
Peltier_Controller_G0B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a48  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08011b00  08011b00  00012b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012174  08012174  000142c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08012174  08012174  000142c8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08012174  08012174  000142c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012174  08012174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012178  08012178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0801217c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d88  200002c8  08012444  000142c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002050  08012444  00015050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000142c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4a8  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049de  00000000  00000000  00031798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00036178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f1  00000000  00000000  00037cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1e0  00000000  00000000  000391b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f08  00000000  00000000  00058391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b39f4  00000000  00000000  0007b299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ec8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007680  00000000  00000000  0012ecd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00136350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002c8 	.word	0x200002c8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08011ae8 	.word	0x08011ae8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002cc 	.word	0x200002cc
 80000fc:	08011ae8 	.word	0x08011ae8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f833 	bl	80014a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff77 	bl	8001338 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f825 	bl	80014a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f81b 	bl	80014a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffa1 	bl	80013c0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff97 	bl	80013c0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff73 	bl	80023a0 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fb40 	bl	8001b48 <__aeabi_dsub>
 80004c8:	f001 ff6a 	bl	80023a0 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb3 	bl	8000450 <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d108      	bne.n	8000500 <__aeabi_d2lz+0x24>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f000 f80f 	bl	8000514 <__aeabi_d2ulz>
 80004f6:	0002      	movs	r2, r0
 80004f8:	000b      	movs	r3, r1
 80004fa:	0010      	movs	r0, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	18e9      	adds	r1, r5, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f804 	bl	8000514 <__aeabi_d2ulz>
 800050c:	2300      	movs	r3, #0
 800050e:	4242      	negs	r2, r0
 8000510:	418b      	sbcs	r3, r1
 8000512:	e7f2      	b.n	80004fa <__aeabi_d2lz+0x1e>

08000514 <__aeabi_d2ulz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <__aeabi_d2ulz+0x34>)
 800051a:	000d      	movs	r5, r1
 800051c:	0004      	movs	r4, r0
 800051e:	f001 f82d 	bl	800157c <__aeabi_dmul>
 8000522:	f7ff ffbd 	bl	80004a0 <__aeabi_d2uiz>
 8000526:	0006      	movs	r6, r0
 8000528:	f001 ffa4 	bl	8002474 <__aeabi_ui2d>
 800052c:	2200      	movs	r2, #0
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <__aeabi_d2ulz+0x38>)
 8000530:	f001 f824 	bl	800157c <__aeabi_dmul>
 8000534:	0002      	movs	r2, r0
 8000536:	000b      	movs	r3, r1
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fb04 	bl	8001b48 <__aeabi_dsub>
 8000540:	f7ff ffae 	bl	80004a0 <__aeabi_d2uiz>
 8000544:	0031      	movs	r1, r6
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	3df00000 	.word	0x3df00000
 800054c:	41f00000 	.word	0x41f00000

08000550 <__aeabi_l2d>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0006      	movs	r6, r0
 8000554:	0008      	movs	r0, r1
 8000556:	f001 ff5f 	bl	8002418 <__aeabi_i2d>
 800055a:	2200      	movs	r2, #0
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <__aeabi_l2d+0x28>)
 800055e:	f001 f80d 	bl	800157c <__aeabi_dmul>
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	0030      	movs	r0, r6
 8000568:	f001 ff84 	bl	8002474 <__aeabi_ui2d>
 800056c:	002b      	movs	r3, r5
 800056e:	0022      	movs	r2, r4
 8000570:	f000 f804 	bl	800057c <__aeabi_dadd>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	41f00000 	.word	0x41f00000

0800057c <__aeabi_dadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	464f      	mov	r7, r9
 8000580:	4646      	mov	r6, r8
 8000582:	46d6      	mov	lr, sl
 8000584:	b5c0      	push	{r6, r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	030e      	lsls	r6, r1, #12
 800058e:	004c      	lsls	r4, r1, #1
 8000590:	0fcd      	lsrs	r5, r1, #31
 8000592:	0a71      	lsrs	r1, r6, #9
 8000594:	9e00      	ldr	r6, [sp, #0]
 8000596:	005f      	lsls	r7, r3, #1
 8000598:	0f76      	lsrs	r6, r6, #29
 800059a:	430e      	orrs	r6, r1
 800059c:	9900      	ldr	r1, [sp, #0]
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	00c9      	lsls	r1, r1, #3
 80005a4:	4689      	mov	r9, r1
 80005a6:	0319      	lsls	r1, r3, #12
 80005a8:	0d7b      	lsrs	r3, r7, #21
 80005aa:	4698      	mov	r8, r3
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	0a49      	lsrs	r1, r1, #9
 80005b0:	0fdb      	lsrs	r3, r3, #31
 80005b2:	469c      	mov	ip, r3
 80005b4:	9b00      	ldr	r3, [sp, #0]
 80005b6:	9a00      	ldr	r2, [sp, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	430b      	orrs	r3, r1
 80005bc:	4641      	mov	r1, r8
 80005be:	0d64      	lsrs	r4, r4, #21
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	1a61      	subs	r1, r4, r1
 80005c4:	4565      	cmp	r5, ip
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x4e>
 80005c8:	e0a6      	b.n	8000718 <__aeabi_dadd+0x19c>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	dd72      	ble.n	80006b4 <__aeabi_dadd+0x138>
 80005ce:	4647      	mov	r7, r8
 80005d0:	2f00      	cmp	r7, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x5a>
 80005d4:	e0dd      	b.n	8000792 <__aeabi_dadd+0x216>
 80005d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000908 <__aeabi_dadd+0x38c>)
 80005d8:	42bc      	cmp	r4, r7
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x62>
 80005dc:	e19a      	b.n	8000914 <__aeabi_dadd+0x398>
 80005de:	2701      	movs	r7, #1
 80005e0:	2938      	cmp	r1, #56	@ 0x38
 80005e2:	dc17      	bgt.n	8000614 <__aeabi_dadd+0x98>
 80005e4:	2780      	movs	r7, #128	@ 0x80
 80005e6:	043f      	lsls	r7, r7, #16
 80005e8:	433b      	orrs	r3, r7
 80005ea:	291f      	cmp	r1, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x74>
 80005ee:	e1dd      	b.n	80009ac <__aeabi_dadd+0x430>
 80005f0:	2720      	movs	r7, #32
 80005f2:	1a78      	subs	r0, r7, r1
 80005f4:	001f      	movs	r7, r3
 80005f6:	4087      	lsls	r7, r0
 80005f8:	46ba      	mov	sl, r7
 80005fa:	0017      	movs	r7, r2
 80005fc:	40cf      	lsrs	r7, r1
 80005fe:	4684      	mov	ip, r0
 8000600:	0038      	movs	r0, r7
 8000602:	4657      	mov	r7, sl
 8000604:	4307      	orrs	r7, r0
 8000606:	4660      	mov	r0, ip
 8000608:	4082      	lsls	r2, r0
 800060a:	40cb      	lsrs	r3, r1
 800060c:	1e50      	subs	r0, r2, #1
 800060e:	4182      	sbcs	r2, r0
 8000610:	1af6      	subs	r6, r6, r3
 8000612:	4317      	orrs	r7, r2
 8000614:	464b      	mov	r3, r9
 8000616:	1bdf      	subs	r7, r3, r7
 8000618:	45b9      	cmp	r9, r7
 800061a:	4180      	sbcs	r0, r0
 800061c:	4240      	negs	r0, r0
 800061e:	1a36      	subs	r6, r6, r0
 8000620:	0233      	lsls	r3, r6, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0xaa>
 8000624:	e0ff      	b.n	8000826 <__aeabi_dadd+0x2aa>
 8000626:	0276      	lsls	r6, r6, #9
 8000628:	0a76      	lsrs	r6, r6, #9
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0xb4>
 800062e:	e13c      	b.n	80008aa <__aeabi_dadd+0x32e>
 8000630:	0030      	movs	r0, r6
 8000632:	f001 ff43 	bl	80024bc <__clzsi2>
 8000636:	0003      	movs	r3, r0
 8000638:	3b08      	subs	r3, #8
 800063a:	2120      	movs	r1, #32
 800063c:	0038      	movs	r0, r7
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	40d0      	lsrs	r0, r2
 8000642:	409e      	lsls	r6, r3
 8000644:	0002      	movs	r2, r0
 8000646:	409f      	lsls	r7, r3
 8000648:	4332      	orrs	r2, r6
 800064a:	429c      	cmp	r4, r3
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0xd4>
 800064e:	e1a6      	b.n	800099e <__aeabi_dadd+0x422>
 8000650:	1b18      	subs	r0, r3, r4
 8000652:	3001      	adds	r0, #1
 8000654:	1a09      	subs	r1, r1, r0
 8000656:	003e      	movs	r6, r7
 8000658:	408f      	lsls	r7, r1
 800065a:	40c6      	lsrs	r6, r0
 800065c:	1e7b      	subs	r3, r7, #1
 800065e:	419f      	sbcs	r7, r3
 8000660:	0013      	movs	r3, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	4337      	orrs	r7, r6
 8000666:	431f      	orrs	r7, r3
 8000668:	40c2      	lsrs	r2, r0
 800066a:	003b      	movs	r3, r7
 800066c:	0016      	movs	r6, r2
 800066e:	2400      	movs	r4, #0
 8000670:	4313      	orrs	r3, r2
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0xfa>
 8000674:	e1df      	b.n	8000a36 <__aeabi_dadd+0x4ba>
 8000676:	077b      	lsls	r3, r7, #29
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x100>
 800067a:	e332      	b.n	8000ce2 <__aeabi_dadd+0x766>
 800067c:	230f      	movs	r3, #15
 800067e:	003a      	movs	r2, r7
 8000680:	403b      	ands	r3, r7
 8000682:	2b04      	cmp	r3, #4
 8000684:	d004      	beq.n	8000690 <__aeabi_dadd+0x114>
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	42ba      	cmp	r2, r7
 800068a:	41bf      	sbcs	r7, r7
 800068c:	427f      	negs	r7, r7
 800068e:	19f6      	adds	r6, r6, r7
 8000690:	0233      	lsls	r3, r6, #8
 8000692:	d400      	bmi.n	8000696 <__aeabi_dadd+0x11a>
 8000694:	e323      	b.n	8000cde <__aeabi_dadd+0x762>
 8000696:	4b9c      	ldr	r3, [pc, #624]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000698:	3401      	adds	r4, #1
 800069a:	429c      	cmp	r4, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x124>
 800069e:	e0b4      	b.n	800080a <__aeabi_dadd+0x28e>
 80006a0:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <__aeabi_dadd+0x390>)
 80006a2:	0564      	lsls	r4, r4, #21
 80006a4:	401e      	ands	r6, r3
 80006a6:	0d64      	lsrs	r4, r4, #21
 80006a8:	0777      	lsls	r7, r6, #29
 80006aa:	08d2      	lsrs	r2, r2, #3
 80006ac:	0276      	lsls	r6, r6, #9
 80006ae:	4317      	orrs	r7, r2
 80006b0:	0b36      	lsrs	r6, r6, #12
 80006b2:	e0ac      	b.n	800080e <__aeabi_dadd+0x292>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x13e>
 80006b8:	e07e      	b.n	80007b8 <__aeabi_dadd+0x23c>
 80006ba:	4641      	mov	r1, r8
 80006bc:	1b09      	subs	r1, r1, r4
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x148>
 80006c2:	e160      	b.n	8000986 <__aeabi_dadd+0x40a>
 80006c4:	0034      	movs	r4, r6
 80006c6:	4648      	mov	r0, r9
 80006c8:	4304      	orrs	r4, r0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x152>
 80006cc:	e1c9      	b.n	8000a62 <__aeabi_dadd+0x4e6>
 80006ce:	1e4c      	subs	r4, r1, #1
 80006d0:	2901      	cmp	r1, #1
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x15a>
 80006d4:	e22e      	b.n	8000b34 <__aeabi_dadd+0x5b8>
 80006d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000908 <__aeabi_dadd+0x38c>)
 80006d8:	42a9      	cmp	r1, r5
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x162>
 80006dc:	e224      	b.n	8000b28 <__aeabi_dadd+0x5ac>
 80006de:	2701      	movs	r7, #1
 80006e0:	2c38      	cmp	r4, #56	@ 0x38
 80006e2:	dc11      	bgt.n	8000708 <__aeabi_dadd+0x18c>
 80006e4:	0021      	movs	r1, r4
 80006e6:	291f      	cmp	r1, #31
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x170>
 80006ea:	e20b      	b.n	8000b04 <__aeabi_dadd+0x588>
 80006ec:	2420      	movs	r4, #32
 80006ee:	0037      	movs	r7, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	1a64      	subs	r4, r4, r1
 80006f4:	40a7      	lsls	r7, r4
 80006f6:	40c8      	lsrs	r0, r1
 80006f8:	4307      	orrs	r7, r0
 80006fa:	4648      	mov	r0, r9
 80006fc:	40a0      	lsls	r0, r4
 80006fe:	40ce      	lsrs	r6, r1
 8000700:	1e44      	subs	r4, r0, #1
 8000702:	41a0      	sbcs	r0, r4
 8000704:	1b9b      	subs	r3, r3, r6
 8000706:	4307      	orrs	r7, r0
 8000708:	1bd7      	subs	r7, r2, r7
 800070a:	42ba      	cmp	r2, r7
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	4665      	mov	r5, ip
 8000712:	4644      	mov	r4, r8
 8000714:	1a9e      	subs	r6, r3, r2
 8000716:	e783      	b.n	8000620 <__aeabi_dadd+0xa4>
 8000718:	2900      	cmp	r1, #0
 800071a:	dc00      	bgt.n	800071e <__aeabi_dadd+0x1a2>
 800071c:	e09c      	b.n	8000858 <__aeabi_dadd+0x2dc>
 800071e:	4647      	mov	r7, r8
 8000720:	2f00      	cmp	r7, #0
 8000722:	d167      	bne.n	80007f4 <__aeabi_dadd+0x278>
 8000724:	001f      	movs	r7, r3
 8000726:	4317      	orrs	r7, r2
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x1b0>
 800072a:	e0e4      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800072c:	1e48      	subs	r0, r1, #1
 800072e:	2901      	cmp	r1, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b8>
 8000732:	e19b      	b.n	8000a6c <__aeabi_dadd+0x4f0>
 8000734:	4f74      	ldr	r7, [pc, #464]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000736:	42b9      	cmp	r1, r7
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1c0>
 800073a:	e0eb      	b.n	8000914 <__aeabi_dadd+0x398>
 800073c:	2701      	movs	r7, #1
 800073e:	0001      	movs	r1, r0
 8000740:	2838      	cmp	r0, #56	@ 0x38
 8000742:	dc11      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000744:	291f      	cmp	r1, #31
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0x1ce>
 8000748:	e1c7      	b.n	8000ada <__aeabi_dadd+0x55e>
 800074a:	2720      	movs	r7, #32
 800074c:	1a78      	subs	r0, r7, r1
 800074e:	001f      	movs	r7, r3
 8000750:	4684      	mov	ip, r0
 8000752:	4087      	lsls	r7, r0
 8000754:	0010      	movs	r0, r2
 8000756:	40c8      	lsrs	r0, r1
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	18f6      	adds	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	444f      	add	r7, r9
 800076a:	454f      	cmp	r7, r9
 800076c:	4180      	sbcs	r0, r0
 800076e:	4240      	negs	r0, r0
 8000770:	1836      	adds	r6, r6, r0
 8000772:	0233      	lsls	r3, r6, #8
 8000774:	d557      	bpl.n	8000826 <__aeabi_dadd+0x2aa>
 8000776:	4b64      	ldr	r3, [pc, #400]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000778:	3401      	adds	r4, #1
 800077a:	429c      	cmp	r4, r3
 800077c:	d045      	beq.n	800080a <__aeabi_dadd+0x28e>
 800077e:	2101      	movs	r1, #1
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <__aeabi_dadd+0x390>)
 8000782:	087a      	lsrs	r2, r7, #1
 8000784:	401e      	ands	r6, r3
 8000786:	4039      	ands	r1, r7
 8000788:	430a      	orrs	r2, r1
 800078a:	07f7      	lsls	r7, r6, #31
 800078c:	4317      	orrs	r7, r2
 800078e:	0876      	lsrs	r6, r6, #1
 8000790:	e771      	b.n	8000676 <__aeabi_dadd+0xfa>
 8000792:	001f      	movs	r7, r3
 8000794:	4317      	orrs	r7, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x21e>
 8000798:	e0ad      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800079a:	1e4f      	subs	r7, r1, #1
 800079c:	46bc      	mov	ip, r7
 800079e:	2901      	cmp	r1, #1
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x228>
 80007a2:	e182      	b.n	8000aaa <__aeabi_dadd+0x52e>
 80007a4:	4f58      	ldr	r7, [pc, #352]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007a6:	42b9      	cmp	r1, r7
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x230>
 80007aa:	e190      	b.n	8000ace <__aeabi_dadd+0x552>
 80007ac:	4661      	mov	r1, ip
 80007ae:	2701      	movs	r7, #1
 80007b0:	2938      	cmp	r1, #56	@ 0x38
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x23a>
 80007b4:	e72e      	b.n	8000614 <__aeabi_dadd+0x98>
 80007b6:	e718      	b.n	80005ea <__aeabi_dadd+0x6e>
 80007b8:	4f55      	ldr	r7, [pc, #340]	@ (8000910 <__aeabi_dadd+0x394>)
 80007ba:	1c61      	adds	r1, r4, #1
 80007bc:	4239      	tst	r1, r7
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x246>
 80007c0:	e0d0      	b.n	8000964 <__aeabi_dadd+0x3e8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	4648      	mov	r0, r9
 80007c6:	001f      	movs	r7, r3
 80007c8:	4301      	orrs	r1, r0
 80007ca:	4317      	orrs	r7, r2
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x256>
 80007d0:	e13d      	b.n	8000a4e <__aeabi_dadd+0x4d2>
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x25c>
 80007d6:	e1bc      	b.n	8000b52 <__aeabi_dadd+0x5d6>
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d000      	beq.n	80007de <__aeabi_dadd+0x262>
 80007dc:	e1bf      	b.n	8000b5e <__aeabi_dadd+0x5e2>
 80007de:	464b      	mov	r3, r9
 80007e0:	2100      	movs	r1, #0
 80007e2:	08d8      	lsrs	r0, r3, #3
 80007e4:	0777      	lsls	r7, r6, #29
 80007e6:	4307      	orrs	r7, r0
 80007e8:	08f0      	lsrs	r0, r6, #3
 80007ea:	0306      	lsls	r6, r0, #12
 80007ec:	054c      	lsls	r4, r1, #21
 80007ee:	0b36      	lsrs	r6, r6, #12
 80007f0:	0d64      	lsrs	r4, r4, #21
 80007f2:	e00c      	b.n	800080e <__aeabi_dadd+0x292>
 80007f4:	4f44      	ldr	r7, [pc, #272]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007f6:	42bc      	cmp	r4, r7
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x280>
 80007fa:	e08b      	b.n	8000914 <__aeabi_dadd+0x398>
 80007fc:	2701      	movs	r7, #1
 80007fe:	2938      	cmp	r1, #56	@ 0x38
 8000800:	dcb2      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000802:	2780      	movs	r7, #128	@ 0x80
 8000804:	043f      	lsls	r7, r7, #16
 8000806:	433b      	orrs	r3, r7
 8000808:	e79c      	b.n	8000744 <__aeabi_dadd+0x1c8>
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
 800080e:	0524      	lsls	r4, r4, #20
 8000810:	4334      	orrs	r4, r6
 8000812:	07ed      	lsls	r5, r5, #31
 8000814:	432c      	orrs	r4, r5
 8000816:	0038      	movs	r0, r7
 8000818:	0021      	movs	r1, r4
 800081a:	b002      	add	sp, #8
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	077b      	lsls	r3, r7, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 800082a:	230f      	movs	r3, #15
 800082c:	403b      	ands	r3, r7
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 8000832:	e728      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000834:	08f8      	lsrs	r0, r7, #3
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000838:	0777      	lsls	r7, r6, #29
 800083a:	4307      	orrs	r7, r0
 800083c:	08f0      	lsrs	r0, r6, #3
 800083e:	429c      	cmp	r4, r3
 8000840:	d000      	beq.n	8000844 <__aeabi_dadd+0x2c8>
 8000842:	e24a      	b.n	8000cda <__aeabi_dadd+0x75e>
 8000844:	003b      	movs	r3, r7
 8000846:	4303      	orrs	r3, r0
 8000848:	d059      	beq.n	80008fe <__aeabi_dadd+0x382>
 800084a:	2680      	movs	r6, #128	@ 0x80
 800084c:	0336      	lsls	r6, r6, #12
 800084e:	4306      	orrs	r6, r0
 8000850:	0336      	lsls	r6, r6, #12
 8000852:	4c2d      	ldr	r4, [pc, #180]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000854:	0b36      	lsrs	r6, r6, #12
 8000856:	e7da      	b.n	800080e <__aeabi_dadd+0x292>
 8000858:	2900      	cmp	r1, #0
 800085a:	d061      	beq.n	8000920 <__aeabi_dadd+0x3a4>
 800085c:	4641      	mov	r1, r8
 800085e:	1b09      	subs	r1, r1, r4
 8000860:	2c00      	cmp	r4, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x2ea>
 8000864:	e0b9      	b.n	80009da <__aeabi_dadd+0x45e>
 8000866:	4c28      	ldr	r4, [pc, #160]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000868:	45a0      	cmp	r8, r4
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2f2>
 800086c:	e1a5      	b.n	8000bba <__aeabi_dadd+0x63e>
 800086e:	2701      	movs	r7, #1
 8000870:	2938      	cmp	r1, #56	@ 0x38
 8000872:	dc13      	bgt.n	800089c <__aeabi_dadd+0x320>
 8000874:	2480      	movs	r4, #128	@ 0x80
 8000876:	0424      	lsls	r4, r4, #16
 8000878:	4326      	orrs	r6, r4
 800087a:	291f      	cmp	r1, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x304>
 800087e:	e1c8      	b.n	8000c12 <__aeabi_dadd+0x696>
 8000880:	2420      	movs	r4, #32
 8000882:	0037      	movs	r7, r6
 8000884:	4648      	mov	r0, r9
 8000886:	1a64      	subs	r4, r4, r1
 8000888:	40a7      	lsls	r7, r4
 800088a:	40c8      	lsrs	r0, r1
 800088c:	4307      	orrs	r7, r0
 800088e:	4648      	mov	r0, r9
 8000890:	40a0      	lsls	r0, r4
 8000892:	40ce      	lsrs	r6, r1
 8000894:	1e44      	subs	r4, r0, #1
 8000896:	41a0      	sbcs	r0, r4
 8000898:	199b      	adds	r3, r3, r6
 800089a:	4307      	orrs	r7, r0
 800089c:	18bf      	adds	r7, r7, r2
 800089e:	4297      	cmp	r7, r2
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4252      	negs	r2, r2
 80008a4:	4644      	mov	r4, r8
 80008a6:	18d6      	adds	r6, r2, r3
 80008a8:	e763      	b.n	8000772 <__aeabi_dadd+0x1f6>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fe06 	bl	80024bc <__clzsi2>
 80008b0:	0003      	movs	r3, r0
 80008b2:	3318      	adds	r3, #24
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x33e>
 80008b8:	e6bf      	b.n	800063a <__aeabi_dadd+0xbe>
 80008ba:	003a      	movs	r2, r7
 80008bc:	3808      	subs	r0, #8
 80008be:	4082      	lsls	r2, r0
 80008c0:	429c      	cmp	r4, r3
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x34a>
 80008c4:	e083      	b.n	80009ce <__aeabi_dadd+0x452>
 80008c6:	1b1b      	subs	r3, r3, r4
 80008c8:	1c58      	adds	r0, r3, #1
 80008ca:	281f      	cmp	r0, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x354>
 80008ce:	e1b4      	b.n	8000c3a <__aeabi_dadd+0x6be>
 80008d0:	0017      	movs	r7, r2
 80008d2:	3b1f      	subs	r3, #31
 80008d4:	40df      	lsrs	r7, r3
 80008d6:	2820      	cmp	r0, #32
 80008d8:	d005      	beq.n	80008e6 <__aeabi_dadd+0x36a>
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	409a      	lsls	r2, r3
 80008e0:	1e53      	subs	r3, r2, #1
 80008e2:	419a      	sbcs	r2, r3
 80008e4:	4317      	orrs	r7, r2
 80008e6:	2400      	movs	r4, #0
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d00a      	beq.n	8000902 <__aeabi_dadd+0x386>
 80008ec:	077b      	lsls	r3, r7, #29
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x376>
 80008f0:	e6c4      	b.n	800067c <__aeabi_dadd+0x100>
 80008f2:	0026      	movs	r6, r4
 80008f4:	e79e      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80008f6:	464b      	mov	r3, r9
 80008f8:	000c      	movs	r4, r1
 80008fa:	08d8      	lsrs	r0, r3, #3
 80008fc:	e79b      	b.n	8000836 <__aeabi_dadd+0x2ba>
 80008fe:	2700      	movs	r7, #0
 8000900:	4c01      	ldr	r4, [pc, #4]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000902:	2600      	movs	r6, #0
 8000904:	e783      	b.n	800080e <__aeabi_dadd+0x292>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff
 8000910:	000007fe 	.word	0x000007fe
 8000914:	464b      	mov	r3, r9
 8000916:	0777      	lsls	r7, r6, #29
 8000918:	08d8      	lsrs	r0, r3, #3
 800091a:	4307      	orrs	r7, r0
 800091c:	08f0      	lsrs	r0, r6, #3
 800091e:	e791      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000920:	4fcd      	ldr	r7, [pc, #820]	@ (8000c58 <__aeabi_dadd+0x6dc>)
 8000922:	1c61      	adds	r1, r4, #1
 8000924:	4239      	tst	r1, r7
 8000926:	d16b      	bne.n	8000a00 <__aeabi_dadd+0x484>
 8000928:	0031      	movs	r1, r6
 800092a:	4648      	mov	r0, r9
 800092c:	4301      	orrs	r1, r0
 800092e:	2c00      	cmp	r4, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x3b8>
 8000932:	e14b      	b.n	8000bcc <__aeabi_dadd+0x650>
 8000934:	001f      	movs	r7, r3
 8000936:	4317      	orrs	r7, r2
 8000938:	2900      	cmp	r1, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x3c2>
 800093c:	e181      	b.n	8000c42 <__aeabi_dadd+0x6c6>
 800093e:	2f00      	cmp	r7, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x3c8>
 8000942:	e74c      	b.n	80007de <__aeabi_dadd+0x262>
 8000944:	444a      	add	r2, r9
 8000946:	454a      	cmp	r2, r9
 8000948:	4180      	sbcs	r0, r0
 800094a:	18f6      	adds	r6, r6, r3
 800094c:	4240      	negs	r0, r0
 800094e:	1836      	adds	r6, r6, r0
 8000950:	0233      	lsls	r3, r6, #8
 8000952:	d500      	bpl.n	8000956 <__aeabi_dadd+0x3da>
 8000954:	e1b0      	b.n	8000cb8 <__aeabi_dadd+0x73c>
 8000956:	0017      	movs	r7, r2
 8000958:	4691      	mov	r9, r2
 800095a:	4337      	orrs	r7, r6
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x3e4>
 800095e:	e73e      	b.n	80007de <__aeabi_dadd+0x262>
 8000960:	2600      	movs	r6, #0
 8000962:	e754      	b.n	800080e <__aeabi_dadd+0x292>
 8000964:	4649      	mov	r1, r9
 8000966:	1a89      	subs	r1, r1, r2
 8000968:	4688      	mov	r8, r1
 800096a:	45c1      	cmp	r9, r8
 800096c:	41bf      	sbcs	r7, r7
 800096e:	1af1      	subs	r1, r6, r3
 8000970:	427f      	negs	r7, r7
 8000972:	1bc9      	subs	r1, r1, r7
 8000974:	020f      	lsls	r7, r1, #8
 8000976:	d461      	bmi.n	8000a3c <__aeabi_dadd+0x4c0>
 8000978:	4647      	mov	r7, r8
 800097a:	430f      	orrs	r7, r1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x404>
 800097e:	e0bd      	b.n	8000afc <__aeabi_dadd+0x580>
 8000980:	000e      	movs	r6, r1
 8000982:	4647      	mov	r7, r8
 8000984:	e651      	b.n	800062a <__aeabi_dadd+0xae>
 8000986:	4cb5      	ldr	r4, [pc, #724]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000988:	45a0      	cmp	r8, r4
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x412>
 800098c:	e100      	b.n	8000b90 <__aeabi_dadd+0x614>
 800098e:	2701      	movs	r7, #1
 8000990:	2938      	cmp	r1, #56	@ 0x38
 8000992:	dd00      	ble.n	8000996 <__aeabi_dadd+0x41a>
 8000994:	e6b8      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	0424      	lsls	r4, r4, #16
 800099a:	4326      	orrs	r6, r4
 800099c:	e6a3      	b.n	80006e6 <__aeabi_dadd+0x16a>
 800099e:	4eb0      	ldr	r6, [pc, #704]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009a0:	1ae4      	subs	r4, r4, r3
 80009a2:	4016      	ands	r6, r2
 80009a4:	077b      	lsls	r3, r7, #29
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x42e>
 80009a8:	e73f      	b.n	800082a <__aeabi_dadd+0x2ae>
 80009aa:	e743      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80009ac:	000f      	movs	r7, r1
 80009ae:	0018      	movs	r0, r3
 80009b0:	3f20      	subs	r7, #32
 80009b2:	40f8      	lsrs	r0, r7
 80009b4:	4684      	mov	ip, r0
 80009b6:	2920      	cmp	r1, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x446>
 80009ba:	2740      	movs	r7, #64	@ 0x40
 80009bc:	1a79      	subs	r1, r7, r1
 80009be:	408b      	lsls	r3, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	1e53      	subs	r3, r2, #1
 80009c4:	419a      	sbcs	r2, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	0017      	movs	r7, r2
 80009ca:	431f      	orrs	r7, r3
 80009cc:	e622      	b.n	8000614 <__aeabi_dadd+0x98>
 80009ce:	48a4      	ldr	r0, [pc, #656]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009d0:	1ae1      	subs	r1, r4, r3
 80009d2:	4010      	ands	r0, r2
 80009d4:	0747      	lsls	r7, r0, #29
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	e707      	b.n	80007ea <__aeabi_dadd+0x26e>
 80009da:	0034      	movs	r4, r6
 80009dc:	4648      	mov	r0, r9
 80009de:	4304      	orrs	r4, r0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x468>
 80009e2:	e0fa      	b.n	8000bda <__aeabi_dadd+0x65e>
 80009e4:	1e4c      	subs	r4, r1, #1
 80009e6:	2901      	cmp	r1, #1
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x470>
 80009ea:	e0d7      	b.n	8000b9c <__aeabi_dadd+0x620>
 80009ec:	4f9b      	ldr	r7, [pc, #620]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 80009ee:	42b9      	cmp	r1, r7
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x478>
 80009f2:	e0e2      	b.n	8000bba <__aeabi_dadd+0x63e>
 80009f4:	2701      	movs	r7, #1
 80009f6:	2c38      	cmp	r4, #56	@ 0x38
 80009f8:	dd00      	ble.n	80009fc <__aeabi_dadd+0x480>
 80009fa:	e74f      	b.n	800089c <__aeabi_dadd+0x320>
 80009fc:	0021      	movs	r1, r4
 80009fe:	e73c      	b.n	800087a <__aeabi_dadd+0x2fe>
 8000a00:	4c96      	ldr	r4, [pc, #600]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x48c>
 8000a06:	e0dd      	b.n	8000bc4 <__aeabi_dadd+0x648>
 8000a08:	444a      	add	r2, r9
 8000a0a:	454a      	cmp	r2, r9
 8000a0c:	4180      	sbcs	r0, r0
 8000a0e:	18f3      	adds	r3, r6, r3
 8000a10:	4240      	negs	r0, r0
 8000a12:	1818      	adds	r0, r3, r0
 8000a14:	07c7      	lsls	r7, r0, #31
 8000a16:	0852      	lsrs	r2, r2, #1
 8000a18:	4317      	orrs	r7, r2
 8000a1a:	0846      	lsrs	r6, r0, #1
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	d005      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a20:	220f      	movs	r2, #15
 8000a22:	000c      	movs	r4, r1
 8000a24:	403a      	ands	r2, r7
 8000a26:	2a04      	cmp	r2, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a2a:	e62c      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000a2c:	0776      	lsls	r6, r6, #29
 8000a2e:	08ff      	lsrs	r7, r7, #3
 8000a30:	4337      	orrs	r7, r6
 8000a32:	0900      	lsrs	r0, r0, #4
 8000a34:	e6d9      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000a36:	2700      	movs	r7, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e6e8      	b.n	800080e <__aeabi_dadd+0x292>
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	1a57      	subs	r7, r2, r1
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	1b9e      	subs	r6, r3, r6
 8000a46:	4252      	negs	r2, r2
 8000a48:	4665      	mov	r5, ip
 8000a4a:	1ab6      	subs	r6, r6, r2
 8000a4c:	e5ed      	b.n	800062a <__aeabi_dadd+0xae>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x4d8>
 8000a52:	e0c6      	b.n	8000be2 <__aeabi_dadd+0x666>
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d167      	bne.n	8000b28 <__aeabi_dadd+0x5ac>
 8000a58:	2680      	movs	r6, #128	@ 0x80
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a5e:	0336      	lsls	r6, r6, #12
 8000a60:	e6d5      	b.n	800080e <__aeabi_dadd+0x292>
 8000a62:	4665      	mov	r5, ip
 8000a64:	000c      	movs	r4, r1
 8000a66:	001e      	movs	r6, r3
 8000a68:	08d0      	lsrs	r0, r2, #3
 8000a6a:	e6e4      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000a6c:	444a      	add	r2, r9
 8000a6e:	454a      	cmp	r2, r9
 8000a70:	4180      	sbcs	r0, r0
 8000a72:	18f3      	adds	r3, r6, r3
 8000a74:	4240      	negs	r0, r0
 8000a76:	1818      	adds	r0, r3, r0
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0203      	lsls	r3, r0, #8
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_dadd+0x504>
 8000a7e:	e096      	b.n	8000bae <__aeabi_dadd+0x632>
 8000a80:	4b77      	ldr	r3, [pc, #476]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 8000a82:	0849      	lsrs	r1, r1, #1
 8000a84:	4018      	ands	r0, r3
 8000a86:	07c3      	lsls	r3, r0, #31
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	0844      	lsrs	r4, r0, #1
 8000a8c:	0749      	lsls	r1, r1, #29
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x516>
 8000a90:	e129      	b.n	8000ce6 <__aeabi_dadd+0x76a>
 8000a92:	220f      	movs	r2, #15
 8000a94:	401a      	ands	r2, r3
 8000a96:	2a04      	cmp	r2, #4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x520>
 8000a9a:	e0ea      	b.n	8000c72 <__aeabi_dadd+0x6f6>
 8000a9c:	1d1f      	adds	r7, r3, #4
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	41b6      	sbcs	r6, r6
 8000aa2:	4276      	negs	r6, r6
 8000aa4:	1936      	adds	r6, r6, r4
 8000aa6:	2402      	movs	r4, #2
 8000aa8:	e6c4      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000aaa:	4649      	mov	r1, r9
 8000aac:	1a8f      	subs	r7, r1, r2
 8000aae:	45b9      	cmp	r9, r7
 8000ab0:	4180      	sbcs	r0, r0
 8000ab2:	1af6      	subs	r6, r6, r3
 8000ab4:	4240      	negs	r0, r0
 8000ab6:	1a36      	subs	r6, r6, r0
 8000ab8:	0233      	lsls	r3, r6, #8
 8000aba:	d406      	bmi.n	8000aca <__aeabi_dadd+0x54e>
 8000abc:	0773      	lsls	r3, r6, #29
 8000abe:	08ff      	lsrs	r7, r7, #3
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	431f      	orrs	r7, r3
 8000ac4:	08f0      	lsrs	r0, r6, #3
 8000ac6:	e690      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000ac8:	4665      	mov	r5, ip
 8000aca:	2401      	movs	r4, #1
 8000acc:	e5ab      	b.n	8000626 <__aeabi_dadd+0xaa>
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0777      	lsls	r7, r6, #29
 8000ad2:	08d8      	lsrs	r0, r3, #3
 8000ad4:	4307      	orrs	r7, r0
 8000ad6:	08f0      	lsrs	r0, r6, #3
 8000ad8:	e6b4      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000ada:	000f      	movs	r7, r1
 8000adc:	0018      	movs	r0, r3
 8000ade:	3f20      	subs	r7, #32
 8000ae0:	40f8      	lsrs	r0, r7
 8000ae2:	4684      	mov	ip, r0
 8000ae4:	2920      	cmp	r1, #32
 8000ae6:	d003      	beq.n	8000af0 <__aeabi_dadd+0x574>
 8000ae8:	2740      	movs	r7, #64	@ 0x40
 8000aea:	1a79      	subs	r1, r7, r1
 8000aec:	408b      	lsls	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	1e53      	subs	r3, r2, #1
 8000af2:	419a      	sbcs	r2, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	0017      	movs	r7, r2
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e635      	b.n	8000768 <__aeabi_dadd+0x1ec>
 8000afc:	2500      	movs	r5, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	2600      	movs	r6, #0
 8000b02:	e684      	b.n	800080e <__aeabi_dadd+0x292>
 8000b04:	000c      	movs	r4, r1
 8000b06:	0035      	movs	r5, r6
 8000b08:	3c20      	subs	r4, #32
 8000b0a:	40e5      	lsrs	r5, r4
 8000b0c:	2920      	cmp	r1, #32
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dadd+0x5a0>
 8000b10:	2440      	movs	r4, #64	@ 0x40
 8000b12:	1a61      	subs	r1, r4, r1
 8000b14:	408e      	lsls	r6, r1
 8000b16:	4649      	mov	r1, r9
 8000b18:	4331      	orrs	r1, r6
 8000b1a:	4689      	mov	r9, r1
 8000b1c:	4648      	mov	r0, r9
 8000b1e:	1e41      	subs	r1, r0, #1
 8000b20:	4188      	sbcs	r0, r1
 8000b22:	0007      	movs	r7, r0
 8000b24:	432f      	orrs	r7, r5
 8000b26:	e5ef      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000b28:	08d2      	lsrs	r2, r2, #3
 8000b2a:	075f      	lsls	r7, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	e687      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b34:	1a17      	subs	r7, r2, r0
 8000b36:	42ba      	cmp	r2, r7
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	1b9e      	subs	r6, r3, r6
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	0233      	lsls	r3, r6, #8
 8000b42:	d4c1      	bmi.n	8000ac8 <__aeabi_dadd+0x54c>
 8000b44:	0773      	lsls	r3, r6, #29
 8000b46:	08ff      	lsrs	r7, r7, #3
 8000b48:	4665      	mov	r5, ip
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	431f      	orrs	r7, r3
 8000b4e:	08f0      	lsrs	r0, r6, #3
 8000b50:	e64b      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d07b      	beq.n	8000c4e <__aeabi_dadd+0x6d2>
 8000b56:	4665      	mov	r5, ip
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	e63f      	b.n	80007de <__aeabi_dadd+0x262>
 8000b5e:	1a81      	subs	r1, r0, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	45c1      	cmp	r9, r8
 8000b64:	41a4      	sbcs	r4, r4
 8000b66:	1af1      	subs	r1, r6, r3
 8000b68:	4264      	negs	r4, r4
 8000b6a:	1b09      	subs	r1, r1, r4
 8000b6c:	2480      	movs	r4, #128	@ 0x80
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	4221      	tst	r1, r4
 8000b72:	d077      	beq.n	8000c64 <__aeabi_dadd+0x6e8>
 8000b74:	1a10      	subs	r0, r2, r0
 8000b76:	4282      	cmp	r2, r0
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	1b9e      	subs	r6, r3, r6
 8000b7e:	4252      	negs	r2, r2
 8000b80:	1ab6      	subs	r6, r6, r2
 8000b82:	4337      	orrs	r7, r6
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x60c>
 8000b86:	e0a0      	b.n	8000cca <__aeabi_dadd+0x74e>
 8000b88:	4665      	mov	r5, ip
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e63e      	b.n	800080e <__aeabi_dadd+0x292>
 8000b90:	075f      	lsls	r7, r3, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	4665      	mov	r5, ip
 8000b96:	4317      	orrs	r7, r2
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	e653      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b9c:	1881      	adds	r1, r0, r2
 8000b9e:	4291      	cmp	r1, r2
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	18f0      	adds	r0, r6, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	1880      	adds	r0, r0, r2
 8000ba8:	0203      	lsls	r3, r0, #8
 8000baa:	d500      	bpl.n	8000bae <__aeabi_dadd+0x632>
 8000bac:	e768      	b.n	8000a80 <__aeabi_dadd+0x504>
 8000bae:	0747      	lsls	r7, r0, #29
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	430f      	orrs	r7, r1
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	e617      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	075f      	lsls	r7, r3, #29
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	08d8      	lsrs	r0, r3, #3
 8000bc2:	e63f      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bc4:	000c      	movs	r4, r1
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e620      	b.n	800080e <__aeabi_dadd+0x292>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d156      	bne.n	8000c7e <__aeabi_dadd+0x702>
 8000bd0:	075f      	lsls	r7, r3, #29
 8000bd2:	08d2      	lsrs	r2, r2, #3
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	e634      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	001e      	movs	r6, r3
 8000bde:	08d0      	lsrs	r0, r2, #3
 8000be0:	e629      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000be2:	08c1      	lsrs	r1, r0, #3
 8000be4:	0770      	lsls	r0, r6, #29
 8000be6:	4301      	orrs	r1, r0
 8000be8:	08f0      	lsrs	r0, r6, #3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d062      	beq.n	8000cb4 <__aeabi_dadd+0x738>
 8000bee:	2480      	movs	r4, #128	@ 0x80
 8000bf0:	0324      	lsls	r4, r4, #12
 8000bf2:	4220      	tst	r0, r4
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x68a>
 8000bf6:	08de      	lsrs	r6, r3, #3
 8000bf8:	4226      	tst	r6, r4
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x68a>
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0030      	movs	r0, r6
 8000c00:	08d1      	lsrs	r1, r2, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4319      	orrs	r1, r3
 8000c06:	0f4f      	lsrs	r7, r1, #29
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	077f      	lsls	r7, r7, #29
 8000c0e:	430f      	orrs	r7, r1
 8000c10:	e618      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c12:	000c      	movs	r4, r1
 8000c14:	0030      	movs	r0, r6
 8000c16:	3c20      	subs	r4, #32
 8000c18:	40e0      	lsrs	r0, r4
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2920      	cmp	r1, #32
 8000c1e:	d005      	beq.n	8000c2c <__aeabi_dadd+0x6b0>
 8000c20:	2440      	movs	r4, #64	@ 0x40
 8000c22:	1a61      	subs	r1, r4, r1
 8000c24:	408e      	lsls	r6, r1
 8000c26:	4649      	mov	r1, r9
 8000c28:	4331      	orrs	r1, r6
 8000c2a:	4689      	mov	r9, r1
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1e41      	subs	r1, r0, #1
 8000c30:	4188      	sbcs	r0, r1
 8000c32:	4661      	mov	r1, ip
 8000c34:	0007      	movs	r7, r0
 8000c36:	430f      	orrs	r7, r1
 8000c38:	e630      	b.n	800089c <__aeabi_dadd+0x320>
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	1a09      	subs	r1, r1, r0
 8000c40:	e50e      	b.n	8000660 <__aeabi_dadd+0xe4>
 8000c42:	001e      	movs	r6, r3
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x6ce>
 8000c48:	e522      	b.n	8000690 <__aeabi_dadd+0x114>
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e758      	b.n	8000b00 <__aeabi_dadd+0x584>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	2400      	movs	r4, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	e5db      	b.n	800080e <__aeabi_dadd+0x292>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	000007fe 	.word	0x000007fe
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	ff7fffff 	.word	0xff7fffff
 8000c64:	4647      	mov	r7, r8
 8000c66:	430f      	orrs	r7, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x6f0>
 8000c6a:	e747      	b.n	8000afc <__aeabi_dadd+0x580>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	46c1      	mov	r9, r8
 8000c70:	e5b5      	b.n	80007de <__aeabi_dadd+0x262>
 8000c72:	08df      	lsrs	r7, r3, #3
 8000c74:	0764      	lsls	r4, r4, #29
 8000c76:	2102      	movs	r1, #2
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	0900      	lsrs	r0, r0, #4
 8000c7c:	e5b5      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000c7e:	0019      	movs	r1, r3
 8000c80:	08c0      	lsrs	r0, r0, #3
 8000c82:	0777      	lsls	r7, r6, #29
 8000c84:	4307      	orrs	r7, r0
 8000c86:	4311      	orrs	r1, r2
 8000c88:	08f0      	lsrs	r0, r6, #3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x714>
 8000c8e:	e5d9      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0309      	lsls	r1, r1, #12
 8000c94:	4208      	tst	r0, r1
 8000c96:	d007      	beq.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	420c      	tst	r4, r1
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c9e:	08d2      	lsrs	r2, r2, #3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	0017      	movs	r7, r2
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	0f7b      	lsrs	r3, r7, #29
 8000caa:	00ff      	lsls	r7, r7, #3
 8000cac:	08ff      	lsrs	r7, r7, #3
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	e5c7      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb4:	000f      	movs	r7, r1
 8000cb6:	e5c5      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	4033      	ands	r3, r6
 8000cbe:	075f      	lsls	r7, r3, #29
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	2401      	movs	r4, #1
 8000cc4:	4317      	orrs	r7, r2
 8000cc6:	0b1e      	lsrs	r6, r3, #12
 8000cc8:	e5a1      	b.n	800080e <__aeabi_dadd+0x292>
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d012      	beq.n	8000cf4 <__aeabi_dadd+0x778>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	2401      	movs	r4, #1
 8000cd6:	401e      	ands	r6, r3
 8000cd8:	e4e6      	b.n	80006a8 <__aeabi_dadd+0x12c>
 8000cda:	0021      	movs	r1, r4
 8000cdc:	e585      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cde:	0017      	movs	r7, r2
 8000ce0:	e5a8      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	e4d4      	b.n	8000690 <__aeabi_dadd+0x114>
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	0764      	lsls	r4, r4, #29
 8000cea:	431c      	orrs	r4, r3
 8000cec:	0027      	movs	r7, r4
 8000cee:	2102      	movs	r1, #2
 8000cf0:	0900      	lsrs	r0, r0, #4
 8000cf2:	e57a      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	0777      	lsls	r7, r6, #29
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	4665      	mov	r5, ip
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	08f0      	lsrs	r0, r6, #3
 8000d00:	e573      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	ff7fffff 	.word	0xff7fffff

08000d08 <__aeabi_ddiv>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	46de      	mov	lr, fp
 8000d0c:	4645      	mov	r5, r8
 8000d0e:	4657      	mov	r7, sl
 8000d10:	464e      	mov	r6, r9
 8000d12:	b5e0      	push	{r5, r6, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	030b      	lsls	r3, r1, #12
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	469b      	mov	fp, r3
 8000d20:	0fca      	lsrs	r2, r1, #31
 8000d22:	004b      	lsls	r3, r1, #1
 8000d24:	0004      	movs	r4, r0
 8000d26:	4680      	mov	r8, r0
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9202      	str	r2, [sp, #8]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x28>
 8000d2e:	e098      	b.n	8000e62 <__aeabi_ddiv+0x15a>
 8000d30:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d037      	beq.n	8000da6 <__aeabi_ddiv+0x9e>
 8000d36:	4659      	mov	r1, fp
 8000d38:	0f42      	lsrs	r2, r0, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	4311      	orrs	r1, r2
 8000d44:	00c2      	lsls	r2, r0, #3
 8000d46:	4690      	mov	r8, r2
 8000d48:	4a77      	ldr	r2, [pc, #476]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	449a      	add	sl, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9e00      	ldr	r6, [sp, #0]
 8000d58:	9f01      	ldr	r7, [sp, #4]
 8000d5a:	033b      	lsls	r3, r7, #12
 8000d5c:	0b1b      	lsrs	r3, r3, #12
 8000d5e:	469b      	mov	fp, r3
 8000d60:	007b      	lsls	r3, r7, #1
 8000d62:	0030      	movs	r0, r6
 8000d64:	0d5b      	lsrs	r3, r3, #21
 8000d66:	0ffd      	lsrs	r5, r7, #31
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <__aeabi_ddiv+0x118>
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d048      	beq.n	8000e04 <__aeabi_ddiv+0xfc>
 8000d72:	4659      	mov	r1, fp
 8000d74:	0f72      	lsrs	r2, r6, #29
 8000d76:	00c9      	lsls	r1, r1, #3
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	468b      	mov	fp, r1
 8000d82:	4969      	ldr	r1, [pc, #420]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d84:	00f2      	lsls	r2, r6, #3
 8000d86:	468c      	mov	ip, r1
 8000d88:	4651      	mov	r1, sl
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	469a      	mov	sl, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	9e02      	ldr	r6, [sp, #8]
 8000d94:	406e      	eors	r6, r5
 8000d96:	b2f6      	uxtb	r6, r6
 8000d98:	2c0f      	cmp	r4, #15
 8000d9a:	d900      	bls.n	8000d9e <__aeabi_ddiv+0x96>
 8000d9c:	e0ce      	b.n	8000f3c <__aeabi_ddiv+0x234>
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <__aeabi_ddiv+0x224>)
 8000da0:	00a4      	lsls	r4, r4, #2
 8000da2:	591b      	ldr	r3, [r3, r4]
 8000da4:	469f      	mov	pc, r3
 8000da6:	465a      	mov	r2, fp
 8000da8:	4302      	orrs	r2, r0
 8000daa:	4691      	mov	r9, r2
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xa8>
 8000dae:	e090      	b.n	8000ed2 <__aeabi_ddiv+0x1ca>
 8000db0:	469a      	mov	sl, r3
 8000db2:	2302      	movs	r3, #2
 8000db4:	4690      	mov	r8, r2
 8000db6:	2408      	movs	r4, #8
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	e7cc      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9d02      	ldr	r5, [sp, #8]
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	2902      	cmp	r1, #2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0xc2>
 8000dc8:	e1de      	b.n	8001188 <__aeabi_ddiv+0x480>
 8000dca:	2903      	cmp	r1, #3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0xc8>
 8000dce:	e08d      	b.n	8000eec <__aeabi_ddiv+0x1e4>
 8000dd0:	2901      	cmp	r1, #1
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_ddiv+0xce>
 8000dd4:	e179      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8000dd6:	002e      	movs	r6, r5
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2400      	movs	r4, #0
 8000dde:	4690      	mov	r8, r2
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07f6      	lsls	r6, r6, #31
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4640      	mov	r0, r8
 8000dea:	0019      	movs	r1, r3
 8000dec:	b007      	add	sp, #28
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000e02:	e7ed      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000e04:	465a      	mov	r2, fp
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <__aeabi_ddiv+0x228>)
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	44e2      	add	sl, ip
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d159      	bne.n	8000ec8 <__aeabi_ddiv+0x1c0>
 8000e14:	2302      	movs	r3, #2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	e7b8      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e20:	465a      	mov	r2, fp
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	d049      	beq.n	8000ebc <__aeabi_ddiv+0x1b4>
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x128>
 8000e2e:	e19c      	b.n	800116a <__aeabi_ddiv+0x462>
 8000e30:	4658      	mov	r0, fp
 8000e32:	f001 fb43 	bl	80024bc <__clzsi2>
 8000e36:	0002      	movs	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3a0b      	subs	r2, #11
 8000e3c:	271d      	movs	r7, #29
 8000e3e:	9e00      	ldr	r6, [sp, #0]
 8000e40:	1aba      	subs	r2, r7, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	4658      	mov	r0, fp
 8000e46:	40d6      	lsrs	r6, r2
 8000e48:	3908      	subs	r1, #8
 8000e4a:	4088      	lsls	r0, r1
 8000e4c:	0032      	movs	r2, r6
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	4693      	mov	fp, r2
 8000e52:	9a00      	ldr	r2, [sp, #0]
 8000e54:	408a      	lsls	r2, r1
 8000e56:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <__aeabi_ddiv+0x22c>)
 8000e58:	4453      	add	r3, sl
 8000e5a:	468a      	mov	sl, r1
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	449a      	add	sl, r3
 8000e60:	e797      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e62:	465b      	mov	r3, fp
 8000e64:	4303      	orrs	r3, r0
 8000e66:	4699      	mov	r9, r3
 8000e68:	d021      	beq.n	8000eae <__aeabi_ddiv+0x1a6>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x16a>
 8000e70:	e169      	b.n	8001146 <__aeabi_ddiv+0x43e>
 8000e72:	4658      	mov	r0, fp
 8000e74:	f001 fb22 	bl	80024bc <__clzsi2>
 8000e78:	230b      	movs	r3, #11
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	469c      	mov	ip, r3
 8000e7e:	0002      	movs	r2, r0
 8000e80:	4484      	add	ip, r0
 8000e82:	4666      	mov	r6, ip
 8000e84:	231d      	movs	r3, #29
 8000e86:	1b9b      	subs	r3, r3, r6
 8000e88:	0026      	movs	r6, r4
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	4658      	mov	r0, fp
 8000e8e:	40de      	lsrs	r6, r3
 8000e90:	3908      	subs	r1, #8
 8000e92:	4088      	lsls	r0, r1
 8000e94:	0033      	movs	r3, r6
 8000e96:	4303      	orrs	r3, r0
 8000e98:	4699      	mov	r9, r3
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <__aeabi_ddiv+0x230>)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	e753      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2404      	movs	r4, #4
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e74c      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e764      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	0032      	movs	r2, r6
 8000ecc:	2103      	movs	r1, #3
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	e75f      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	46d9      	mov	r9, fp
 8000ed8:	240c      	movs	r4, #12
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	e73b      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2480      	movs	r4, #128	@ 0x80
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	e779      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000eec:	2480      	movs	r4, #128	@ 0x80
 8000eee:	465b      	mov	r3, fp
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	0324      	lsls	r4, r4, #12
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	4690      	mov	r8, r2
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	e76f      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f00:	2480      	movs	r4, #128	@ 0x80
 8000f02:	464b      	mov	r3, r9
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	4223      	tst	r3, r4
 8000f08:	d002      	beq.n	8000f10 <__aeabi_ddiv+0x208>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4223      	tst	r3, r4
 8000f0e:	d0f0      	beq.n	8000ef2 <__aeabi_ddiv+0x1ea>
 8000f10:	2480      	movs	r4, #128	@ 0x80
 8000f12:	464b      	mov	r3, r9
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	431c      	orrs	r4, r3
 8000f18:	0324      	lsls	r4, r4, #12
 8000f1a:	9e02      	ldr	r6, [sp, #8]
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	e75e      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff
 8000f28:	fffffc01 	.word	0xfffffc01
 8000f2c:	08011bb8 	.word	0x08011bb8
 8000f30:	fffff801 	.word	0xfffff801
 8000f34:	000003f3 	.word	0x000003f3
 8000f38:	fffffc0d 	.word	0xfffffc0d
 8000f3c:	45cb      	cmp	fp, r9
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0x23a>
 8000f40:	e0f8      	b.n	8001134 <__aeabi_ddiv+0x42c>
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x23e>
 8000f44:	e0f3      	b.n	800112e <__aeabi_ddiv+0x426>
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4648      	mov	r0, r9
 8000f50:	2500      	movs	r5, #0
 8000f52:	44e2      	add	sl, ip
 8000f54:	465b      	mov	r3, fp
 8000f56:	0e17      	lsrs	r7, r2, #24
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c19      	lsrs	r1, r3, #16
 8000f5e:	043b      	lsls	r3, r7, #16
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	0c1f      	lsrs	r7, r3, #16
 8000f66:	4691      	mov	r9, r2
 8000f68:	9102      	str	r1, [sp, #8]
 8000f6a:	9703      	str	r7, [sp, #12]
 8000f6c:	f7ff f96a 	bl	8000244 <__aeabi_uidivmod>
 8000f70:	0002      	movs	r2, r0
 8000f72:	437a      	muls	r2, r7
 8000f74:	040b      	lsls	r3, r1, #16
 8000f76:	0c21      	lsrs	r1, r4, #16
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f80:	9f00      	ldr	r7, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	46bc      	mov	ip, r7
 8000f86:	425b      	negs	r3, r3
 8000f88:	4461      	add	r1, ip
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	44e0      	add	r8, ip
 8000f8e:	428f      	cmp	r7, r1
 8000f90:	d800      	bhi.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f92:	e15c      	b.n	800124e <__aeabi_ddiv+0x546>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f954 	bl	8000244 <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d906      	bls.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fae:	9900      	ldr	r1, [sp, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	4464      	add	r4, ip
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d800      	bhi.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fba:	e142      	b.n	8001242 <__aeabi_ddiv+0x53a>
 8000fbc:	1aa0      	subs	r0, r4, r2
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	0412      	lsls	r2, r2, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4659      	mov	r1, fp
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	001f      	movs	r7, r3
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	040b      	lsls	r3, r1, #16
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0c09      	lsrs	r1, r1, #16
 8000fd8:	000c      	movs	r4, r1
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	435c      	muls	r4, r3
 8000fde:	0c12      	lsrs	r2, r2, #16
 8000fe0:	437b      	muls	r3, r7
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4351      	muls	r1, r2
 8000fe6:	437a      	muls	r2, r7
 8000fe8:	0c27      	lsrs	r7, r4, #16
 8000fea:	46bc      	mov	ip, r7
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	4463      	add	r3, ip
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d903      	bls.n	8000ffc <__aeabi_ddiv+0x2f4>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	4462      	add	r2, ip
 8000ffc:	0c19      	lsrs	r1, r3, #16
 8000ffe:	0424      	lsls	r4, r4, #16
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c24      	lsrs	r4, r4, #16
 8001004:	188a      	adds	r2, r1, r2
 8001006:	191c      	adds	r4, r3, r4
 8001008:	4290      	cmp	r0, r2
 800100a:	d302      	bcc.n	8001012 <__aeabi_ddiv+0x30a>
 800100c:	d116      	bne.n	800103c <__aeabi_ddiv+0x334>
 800100e:	42a5      	cmp	r5, r4
 8001010:	d214      	bcs.n	800103c <__aeabi_ddiv+0x334>
 8001012:	465b      	mov	r3, fp
 8001014:	9f00      	ldr	r7, [sp, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	444d      	add	r5, r9
 800101a:	9305      	str	r3, [sp, #20]
 800101c:	454d      	cmp	r5, r9
 800101e:	419b      	sbcs	r3, r3
 8001020:	46bc      	mov	ip, r7
 8001022:	425b      	negs	r3, r3
 8001024:	4463      	add	r3, ip
 8001026:	18c0      	adds	r0, r0, r3
 8001028:	4287      	cmp	r7, r0
 800102a:	d300      	bcc.n	800102e <__aeabi_ddiv+0x326>
 800102c:	e102      	b.n	8001234 <__aeabi_ddiv+0x52c>
 800102e:	4282      	cmp	r2, r0
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x32c>
 8001032:	e129      	b.n	8001288 <__aeabi_ddiv+0x580>
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x330>
 8001036:	e124      	b.n	8001282 <__aeabi_ddiv+0x57a>
 8001038:	9b05      	ldr	r3, [sp, #20]
 800103a:	469b      	mov	fp, r3
 800103c:	1b2c      	subs	r4, r5, r4
 800103e:	42a5      	cmp	r5, r4
 8001040:	41ad      	sbcs	r5, r5
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4283      	cmp	r3, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x348>
 800104e:	e10f      	b.n	8001270 <__aeabi_ddiv+0x568>
 8001050:	9902      	ldr	r1, [sp, #8]
 8001052:	f7ff f8f7 	bl	8000244 <__aeabi_uidivmod>
 8001056:	9a03      	ldr	r2, [sp, #12]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c21      	lsrs	r1, r4, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x360>
 8001066:	e0cb      	b.n	8001200 <__aeabi_ddiv+0x4f8>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	9902      	ldr	r1, [sp, #8]
 800106c:	f7ff f8ea 	bl	8000244 <__aeabi_uidivmod>
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	0424      	lsls	r4, r4, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c24      	lsrs	r4, r4, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430c      	orrs	r4, r1
 800107e:	42a2      	cmp	r2, r4
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x37c>
 8001082:	e0ca      	b.n	800121a <__aeabi_ddiv+0x512>
 8001084:	4641      	mov	r1, r8
 8001086:	1aa4      	subs	r4, r4, r2
 8001088:	042a      	lsls	r2, r5, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	9f04      	ldr	r7, [sp, #16]
 800108e:	0413      	lsls	r3, r2, #16
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	4359      	muls	r1, r3
 8001094:	4640      	mov	r0, r8
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c15      	lsrs	r5, r2, #16
 800109c:	4368      	muls	r0, r5
 800109e:	0c0b      	lsrs	r3, r1, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	437d      	muls	r5, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x3aa>
 80010aa:	2080      	movs	r0, #128	@ 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4465      	add	r5, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c09      	lsrs	r1, r1, #16
 80010ba:	1940      	adds	r0, r0, r5
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	4284      	cmp	r4, r0
 80010c0:	d327      	bcc.n	8001112 <__aeabi_ddiv+0x40a>
 80010c2:	d023      	beq.n	800110c <__aeabi_ddiv+0x404>
 80010c4:	2301      	movs	r3, #1
 80010c6:	0035      	movs	r5, r6
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b94      	ldr	r3, [pc, #592]	@ (800131c <__aeabi_ddiv+0x614>)
 80010cc:	4453      	add	r3, sl
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd60      	ble.n	8001194 <__aeabi_ddiv+0x48c>
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3d0>
 80010d6:	e086      	b.n	80011e6 <__aeabi_ddiv+0x4de>
 80010d8:	002e      	movs	r6, r5
 80010da:	08d1      	lsrs	r1, r2, #3
 80010dc:	465a      	mov	r2, fp
 80010de:	01d2      	lsls	r2, r2, #7
 80010e0:	d506      	bpl.n	80010f0 <__aeabi_ddiv+0x3e8>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <__aeabi_ddiv+0x618>)
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	4693      	mov	fp, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4453      	add	r3, sl
 80010f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001324 <__aeabi_ddiv+0x61c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_ddiv+0x3f0>
 80010f6:	e680      	b.n	8000dfa <__aeabi_ddiv+0xf2>
 80010f8:	465a      	mov	r2, fp
 80010fa:	0752      	lsls	r2, r2, #29
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4690      	mov	r8, r2
 8001100:	465a      	mov	r2, fp
 8001102:	055b      	lsls	r3, r3, #21
 8001104:	0254      	lsls	r4, r2, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d5b      	lsrs	r3, r3, #21
 800110a:	e669      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 800110c:	0035      	movs	r5, r6
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0db      	beq.n	80010ca <__aeabi_ddiv+0x3c2>
 8001112:	9d00      	ldr	r5, [sp, #0]
 8001114:	1e51      	subs	r1, r2, #1
 8001116:	46ac      	mov	ip, r5
 8001118:	4464      	add	r4, ip
 800111a:	42ac      	cmp	r4, r5
 800111c:	d200      	bcs.n	8001120 <__aeabi_ddiv+0x418>
 800111e:	e09e      	b.n	800125e <__aeabi_ddiv+0x556>
 8001120:	4284      	cmp	r4, r0
 8001122:	d200      	bcs.n	8001126 <__aeabi_ddiv+0x41e>
 8001124:	e0e1      	b.n	80012ea <__aeabi_ddiv+0x5e2>
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x422>
 8001128:	e0ee      	b.n	8001308 <__aeabi_ddiv+0x600>
 800112a:	000a      	movs	r2, r1
 800112c:	e7ca      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800112e:	4542      	cmp	r2, r8
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x42c>
 8001132:	e708      	b.n	8000f46 <__aeabi_ddiv+0x23e>
 8001134:	464b      	mov	r3, r9
 8001136:	07dc      	lsls	r4, r3, #31
 8001138:	0858      	lsrs	r0, r3, #1
 800113a:	4643      	mov	r3, r8
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	431c      	orrs	r4, r3
 8001140:	4643      	mov	r3, r8
 8001142:	07dd      	lsls	r5, r3, #31
 8001144:	e706      	b.n	8000f54 <__aeabi_ddiv+0x24c>
 8001146:	f001 f9b9 	bl	80024bc <__clzsi2>
 800114a:	2315      	movs	r3, #21
 800114c:	469c      	mov	ip, r3
 800114e:	4484      	add	ip, r0
 8001150:	0002      	movs	r2, r0
 8001152:	4663      	mov	r3, ip
 8001154:	3220      	adds	r2, #32
 8001156:	2b1c      	cmp	r3, #28
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x454>
 800115a:	e692      	b.n	8000e82 <__aeabi_ddiv+0x17a>
 800115c:	0023      	movs	r3, r4
 800115e:	3808      	subs	r0, #8
 8001160:	4083      	lsls	r3, r0
 8001162:	4699      	mov	r9, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4698      	mov	r8, r3
 8001168:	e69a      	b.n	8000ea0 <__aeabi_ddiv+0x198>
 800116a:	f001 f9a7 	bl	80024bc <__clzsi2>
 800116e:	0002      	movs	r2, r0
 8001170:	0003      	movs	r3, r0
 8001172:	3215      	adds	r2, #21
 8001174:	3320      	adds	r3, #32
 8001176:	2a1c      	cmp	r2, #28
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x474>
 800117a:	e65f      	b.n	8000e3c <__aeabi_ddiv+0x134>
 800117c:	9900      	ldr	r1, [sp, #0]
 800117e:	3808      	subs	r0, #8
 8001180:	4081      	lsls	r1, r0
 8001182:	2200      	movs	r2, #0
 8001184:	468b      	mov	fp, r1
 8001186:	e666      	b.n	8000e56 <__aeabi_ddiv+0x14e>
 8001188:	2200      	movs	r2, #0
 800118a:	002e      	movs	r6, r5
 800118c:	2400      	movs	r4, #0
 800118e:	4690      	mov	r8, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <__aeabi_ddiv+0x620>)
 8001192:	e625      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8001194:	002e      	movs	r6, r5
 8001196:	2101      	movs	r1, #1
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	2938      	cmp	r1, #56	@ 0x38
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x498>
 800119e:	e61b      	b.n	8000dd8 <__aeabi_ddiv+0xd0>
 80011a0:	291f      	cmp	r1, #31
 80011a2:	dc7e      	bgt.n	80012a2 <__aeabi_ddiv+0x59a>
 80011a4:	4861      	ldr	r0, [pc, #388]	@ (800132c <__aeabi_ddiv+0x624>)
 80011a6:	0014      	movs	r4, r2
 80011a8:	4450      	add	r0, sl
 80011aa:	465b      	mov	r3, fp
 80011ac:	4082      	lsls	r2, r0
 80011ae:	4083      	lsls	r3, r0
 80011b0:	40cc      	lsrs	r4, r1
 80011b2:	1e50      	subs	r0, r2, #1
 80011b4:	4182      	sbcs	r2, r0
 80011b6:	4323      	orrs	r3, r4
 80011b8:	431a      	orrs	r2, r3
 80011ba:	465b      	mov	r3, fp
 80011bc:	40cb      	lsrs	r3, r1
 80011be:	0751      	lsls	r1, r2, #29
 80011c0:	d009      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011c2:	210f      	movs	r1, #15
 80011c4:	4011      	ands	r1, r2
 80011c6:	2904      	cmp	r1, #4
 80011c8:	d005      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011ca:	1d11      	adds	r1, r2, #4
 80011cc:	4291      	cmp	r1, r2
 80011ce:	4192      	sbcs	r2, r2
 80011d0:	4252      	negs	r2, r2
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	0219      	lsls	r1, r3, #8
 80011d8:	d400      	bmi.n	80011dc <__aeabi_ddiv+0x4d4>
 80011da:	e09b      	b.n	8001314 <__aeabi_ddiv+0x60c>
 80011dc:	2200      	movs	r2, #0
 80011de:	2301      	movs	r3, #1
 80011e0:	2400      	movs	r4, #0
 80011e2:	4690      	mov	r8, r2
 80011e4:	e5fc      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80011e6:	210f      	movs	r1, #15
 80011e8:	4011      	ands	r1, r2
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x4e8>
 80011ee:	e773      	b.n	80010d8 <__aeabi_ddiv+0x3d0>
 80011f0:	1d11      	adds	r1, r2, #4
 80011f2:	4291      	cmp	r1, r2
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4252      	negs	r2, r2
 80011f8:	002e      	movs	r6, r5
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	4493      	add	fp, r2
 80011fe:	e76d      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	3d01      	subs	r5, #1
 8001204:	469c      	mov	ip, r3
 8001206:	4461      	add	r1, ip
 8001208:	428b      	cmp	r3, r1
 800120a:	d900      	bls.n	800120e <__aeabi_ddiv+0x506>
 800120c:	e72c      	b.n	8001068 <__aeabi_ddiv+0x360>
 800120e:	428a      	cmp	r2, r1
 8001210:	d800      	bhi.n	8001214 <__aeabi_ddiv+0x50c>
 8001212:	e729      	b.n	8001068 <__aeabi_ddiv+0x360>
 8001214:	1e85      	subs	r5, r0, #2
 8001216:	4461      	add	r1, ip
 8001218:	e726      	b.n	8001068 <__aeabi_ddiv+0x360>
 800121a:	9900      	ldr	r1, [sp, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	468c      	mov	ip, r1
 8001220:	4464      	add	r4, ip
 8001222:	42a1      	cmp	r1, r4
 8001224:	d900      	bls.n	8001228 <__aeabi_ddiv+0x520>
 8001226:	e72d      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001228:	42a2      	cmp	r2, r4
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x526>
 800122c:	e72a      	b.n	8001084 <__aeabi_ddiv+0x37c>
 800122e:	1e83      	subs	r3, r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	e727      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001234:	4287      	cmp	r7, r0
 8001236:	d000      	beq.n	800123a <__aeabi_ddiv+0x532>
 8001238:	e6fe      	b.n	8001038 <__aeabi_ddiv+0x330>
 800123a:	45a9      	cmp	r9, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x538>
 800123e:	e6fb      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001240:	e6f5      	b.n	800102e <__aeabi_ddiv+0x326>
 8001242:	42a2      	cmp	r2, r4
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x540>
 8001246:	e6b9      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 8001248:	1e83      	subs	r3, r0, #2
 800124a:	4464      	add	r4, ip
 800124c:	e6b6      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 800124e:	428a      	cmp	r2, r1
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x54c>
 8001252:	e69f      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 8001254:	46bc      	mov	ip, r7
 8001256:	1e83      	subs	r3, r0, #2
 8001258:	4698      	mov	r8, r3
 800125a:	4461      	add	r1, ip
 800125c:	e69a      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 800125e:	000a      	movs	r2, r1
 8001260:	4284      	cmp	r4, r0
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x55e>
 8001264:	e72e      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 8001266:	454b      	cmp	r3, r9
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x564>
 800126a:	e72b      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800126c:	0035      	movs	r5, r6
 800126e:	e72c      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <__aeabi_ddiv+0x614>)
 8001272:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <__aeabi_ddiv+0x628>)
 8001274:	4453      	add	r3, sl
 8001276:	4592      	cmp	sl, r2
 8001278:	db43      	blt.n	8001302 <__aeabi_ddiv+0x5fa>
 800127a:	2201      	movs	r2, #1
 800127c:	2100      	movs	r1, #0
 800127e:	4493      	add	fp, r2
 8001280:	e72c      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001282:	42ac      	cmp	r4, r5
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x580>
 8001286:	e6d7      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001288:	2302      	movs	r3, #2
 800128a:	425b      	negs	r3, r3
 800128c:	469c      	mov	ip, r3
 800128e:	9900      	ldr	r1, [sp, #0]
 8001290:	444d      	add	r5, r9
 8001292:	454d      	cmp	r5, r9
 8001294:	419b      	sbcs	r3, r3
 8001296:	44e3      	add	fp, ip
 8001298:	468c      	mov	ip, r1
 800129a:	425b      	negs	r3, r3
 800129c:	4463      	add	r3, ip
 800129e:	18c0      	adds	r0, r0, r3
 80012a0:	e6cc      	b.n	800103c <__aeabi_ddiv+0x334>
 80012a2:	201f      	movs	r0, #31
 80012a4:	4240      	negs	r0, r0
 80012a6:	1ac3      	subs	r3, r0, r3
 80012a8:	4658      	mov	r0, fp
 80012aa:	40d8      	lsrs	r0, r3
 80012ac:	2920      	cmp	r1, #32
 80012ae:	d004      	beq.n	80012ba <__aeabi_ddiv+0x5b2>
 80012b0:	4659      	mov	r1, fp
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <__aeabi_ddiv+0x62c>)
 80012b4:	4453      	add	r3, sl
 80012b6:	4099      	lsls	r1, r3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	419a      	sbcs	r2, r3
 80012be:	2307      	movs	r3, #7
 80012c0:	0019      	movs	r1, r3
 80012c2:	4302      	orrs	r2, r0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4011      	ands	r1, r2
 80012c8:	4213      	tst	r3, r2
 80012ca:	d009      	beq.n	80012e0 <__aeabi_ddiv+0x5d8>
 80012cc:	3308      	adds	r3, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d01d      	beq.n	8001310 <__aeabi_ddiv+0x608>
 80012d4:	1d13      	adds	r3, r2, #4
 80012d6:	4293      	cmp	r3, r2
 80012d8:	4189      	sbcs	r1, r1
 80012da:	001a      	movs	r2, r3
 80012dc:	4249      	negs	r1, r1
 80012de:	0749      	lsls	r1, r1, #29
 80012e0:	08d2      	lsrs	r2, r2, #3
 80012e2:	430a      	orrs	r2, r1
 80012e4:	4690      	mov	r8, r2
 80012e6:	2300      	movs	r3, #0
 80012e8:	e57a      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80012ea:	4649      	mov	r1, r9
 80012ec:	9f00      	ldr	r7, [sp, #0]
 80012ee:	004d      	lsls	r5, r1, #1
 80012f0:	454d      	cmp	r5, r9
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	46bc      	mov	ip, r7
 80012f6:	4249      	negs	r1, r1
 80012f8:	4461      	add	r1, ip
 80012fa:	46a9      	mov	r9, r5
 80012fc:	3a02      	subs	r2, #2
 80012fe:	1864      	adds	r4, r4, r1
 8001300:	e7ae      	b.n	8001260 <__aeabi_ddiv+0x558>
 8001302:	2201      	movs	r2, #1
 8001304:	4252      	negs	r2, r2
 8001306:	e746      	b.n	8001196 <__aeabi_ddiv+0x48e>
 8001308:	4599      	cmp	r9, r3
 800130a:	d3ee      	bcc.n	80012ea <__aeabi_ddiv+0x5e2>
 800130c:	000a      	movs	r2, r1
 800130e:	e7aa      	b.n	8001266 <__aeabi_ddiv+0x55e>
 8001310:	2100      	movs	r1, #0
 8001312:	e7e5      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	0b1c      	lsrs	r4, r3, #12
 800131a:	e7e1      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff
 800132c:	0000041e 	.word	0x0000041e
 8001330:	fffffc02 	.word	0xfffffc02
 8001334:	0000043e 	.word	0x0000043e

08001338 <__eqdf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4657      	mov	r7, sl
 800133c:	46de      	mov	lr, fp
 800133e:	464e      	mov	r6, r9
 8001340:	4645      	mov	r5, r8
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	000d      	movs	r5, r1
 8001346:	0004      	movs	r4, r0
 8001348:	0fe8      	lsrs	r0, r5, #31
 800134a:	4683      	mov	fp, r0
 800134c:	0309      	lsls	r1, r1, #12
 800134e:	0fd8      	lsrs	r0, r3, #31
 8001350:	0b09      	lsrs	r1, r1, #12
 8001352:	4682      	mov	sl, r0
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <__eqdf2+0x84>)
 8001356:	468c      	mov	ip, r1
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	005e      	lsls	r6, r3, #1
 800135e:	0d49      	lsrs	r1, r1, #21
 8001360:	0b3f      	lsrs	r7, r7, #12
 8001362:	0d76      	lsrs	r6, r6, #21
 8001364:	4281      	cmp	r1, r0
 8001366:	d018      	beq.n	800139a <__eqdf2+0x62>
 8001368:	4286      	cmp	r6, r0
 800136a:	d00f      	beq.n	800138c <__eqdf2+0x54>
 800136c:	2001      	movs	r0, #1
 800136e:	42b1      	cmp	r1, r6
 8001370:	d10d      	bne.n	800138e <__eqdf2+0x56>
 8001372:	45bc      	cmp	ip, r7
 8001374:	d10b      	bne.n	800138e <__eqdf2+0x56>
 8001376:	4294      	cmp	r4, r2
 8001378:	d109      	bne.n	800138e <__eqdf2+0x56>
 800137a:	45d3      	cmp	fp, sl
 800137c:	d01c      	beq.n	80013b8 <__eqdf2+0x80>
 800137e:	2900      	cmp	r1, #0
 8001380:	d105      	bne.n	800138e <__eqdf2+0x56>
 8001382:	4660      	mov	r0, ip
 8001384:	4320      	orrs	r0, r4
 8001386:	1e43      	subs	r3, r0, #1
 8001388:	4198      	sbcs	r0, r3
 800138a:	e000      	b.n	800138e <__eqdf2+0x56>
 800138c:	2001      	movs	r0, #1
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2001      	movs	r0, #1
 800139c:	428e      	cmp	r6, r1
 800139e:	d1f6      	bne.n	800138e <__eqdf2+0x56>
 80013a0:	4661      	mov	r1, ip
 80013a2:	4339      	orrs	r1, r7
 80013a4:	000f      	movs	r7, r1
 80013a6:	4317      	orrs	r7, r2
 80013a8:	4327      	orrs	r7, r4
 80013aa:	d1f0      	bne.n	800138e <__eqdf2+0x56>
 80013ac:	465b      	mov	r3, fp
 80013ae:	4652      	mov	r2, sl
 80013b0:	1a98      	subs	r0, r3, r2
 80013b2:	1e43      	subs	r3, r0, #1
 80013b4:	4198      	sbcs	r0, r3
 80013b6:	e7ea      	b.n	800138e <__eqdf2+0x56>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e8      	b.n	800138e <__eqdf2+0x56>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	4645      	mov	r5, r8
 80013c8:	46de      	mov	lr, fp
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	000d      	movs	r5, r1
 80013ce:	030e      	lsls	r6, r1, #12
 80013d0:	0049      	lsls	r1, r1, #1
 80013d2:	0d49      	lsrs	r1, r1, #21
 80013d4:	468a      	mov	sl, r1
 80013d6:	0fdf      	lsrs	r7, r3, #31
 80013d8:	0fe9      	lsrs	r1, r5, #31
 80013da:	46bc      	mov	ip, r7
 80013dc:	b083      	sub	sp, #12
 80013de:	4f2f      	ldr	r7, [pc, #188]	@ (800149c <__gedf2+0xdc>)
 80013e0:	0004      	movs	r4, r0
 80013e2:	4680      	mov	r8, r0
 80013e4:	9101      	str	r1, [sp, #4]
 80013e6:	0058      	lsls	r0, r3, #1
 80013e8:	0319      	lsls	r1, r3, #12
 80013ea:	4691      	mov	r9, r2
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0b09      	lsrs	r1, r1, #12
 80013f0:	0d40      	lsrs	r0, r0, #21
 80013f2:	45ba      	cmp	sl, r7
 80013f4:	d01d      	beq.n	8001432 <__gedf2+0x72>
 80013f6:	42b8      	cmp	r0, r7
 80013f8:	d00d      	beq.n	8001416 <__gedf2+0x56>
 80013fa:	4657      	mov	r7, sl
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d12a      	bne.n	8001456 <__gedf2+0x96>
 8001400:	4334      	orrs	r4, r6
 8001402:	2800      	cmp	r0, #0
 8001404:	d124      	bne.n	8001450 <__gedf2+0x90>
 8001406:	430a      	orrs	r2, r1
 8001408:	d036      	beq.n	8001478 <__gedf2+0xb8>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d141      	bne.n	8001492 <__gedf2+0xd2>
 800140e:	4663      	mov	r3, ip
 8001410:	0058      	lsls	r0, r3, #1
 8001412:	3801      	subs	r0, #1
 8001414:	e015      	b.n	8001442 <__gedf2+0x82>
 8001416:	4311      	orrs	r1, r2
 8001418:	d138      	bne.n	800148c <__gedf2+0xcc>
 800141a:	4653      	mov	r3, sl
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <__gedf2+0x64>
 8001420:	4326      	orrs	r6, r4
 8001422:	d0f4      	beq.n	800140e <__gedf2+0x4e>
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	4563      	cmp	r3, ip
 8001428:	d107      	bne.n	800143a <__gedf2+0x7a>
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	0058      	lsls	r0, r3, #1
 800142e:	3801      	subs	r0, #1
 8001430:	e007      	b.n	8001442 <__gedf2+0x82>
 8001432:	4326      	orrs	r6, r4
 8001434:	d12a      	bne.n	800148c <__gedf2+0xcc>
 8001436:	4550      	cmp	r0, sl
 8001438:	d021      	beq.n	800147e <__gedf2+0xbe>
 800143a:	2001      	movs	r0, #1
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	425f      	negs	r7, r3
 8001440:	4338      	orrs	r0, r7
 8001442:	b003      	add	sp, #12
 8001444:	bcf0      	pop	{r4, r5, r6, r7}
 8001446:	46bb      	mov	fp, r7
 8001448:	46b2      	mov	sl, r6
 800144a:	46a9      	mov	r9, r5
 800144c:	46a0      	mov	r8, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	2c00      	cmp	r4, #0
 8001452:	d0dc      	beq.n	800140e <__gedf2+0x4e>
 8001454:	e7e6      	b.n	8001424 <__gedf2+0x64>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0ef      	beq.n	800143a <__gedf2+0x7a>
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	4563      	cmp	r3, ip
 800145e:	d1ec      	bne.n	800143a <__gedf2+0x7a>
 8001460:	4582      	cmp	sl, r0
 8001462:	dcea      	bgt.n	800143a <__gedf2+0x7a>
 8001464:	dbe1      	blt.n	800142a <__gedf2+0x6a>
 8001466:	428e      	cmp	r6, r1
 8001468:	d8e7      	bhi.n	800143a <__gedf2+0x7a>
 800146a:	d1de      	bne.n	800142a <__gedf2+0x6a>
 800146c:	45c8      	cmp	r8, r9
 800146e:	d8e4      	bhi.n	800143a <__gedf2+0x7a>
 8001470:	2000      	movs	r0, #0
 8001472:	45c8      	cmp	r8, r9
 8001474:	d2e5      	bcs.n	8001442 <__gedf2+0x82>
 8001476:	e7d8      	b.n	800142a <__gedf2+0x6a>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e2      	beq.n	8001442 <__gedf2+0x82>
 800147c:	e7dd      	b.n	800143a <__gedf2+0x7a>
 800147e:	4311      	orrs	r1, r2
 8001480:	d104      	bne.n	800148c <__gedf2+0xcc>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	4563      	cmp	r3, ip
 8001486:	d1d8      	bne.n	800143a <__gedf2+0x7a>
 8001488:	2000      	movs	r0, #0
 800148a:	e7da      	b.n	8001442 <__gedf2+0x82>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7d7      	b.n	8001442 <__gedf2+0x82>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	4563      	cmp	r3, ip
 8001496:	d0e6      	beq.n	8001466 <__gedf2+0xa6>
 8001498:	e7cf      	b.n	800143a <__gedf2+0x7a>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__ledf2>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	4645      	mov	r5, r8
 80014a8:	46de      	mov	lr, fp
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	000d      	movs	r5, r1
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	468a      	mov	sl, r1
 80014b6:	0fdf      	lsrs	r7, r3, #31
 80014b8:	0fe9      	lsrs	r1, r5, #31
 80014ba:	46bc      	mov	ip, r7
 80014bc:	b083      	sub	sp, #12
 80014be:	4f2e      	ldr	r7, [pc, #184]	@ (8001578 <__ledf2+0xd8>)
 80014c0:	0004      	movs	r4, r0
 80014c2:	4680      	mov	r8, r0
 80014c4:	9101      	str	r1, [sp, #4]
 80014c6:	0058      	lsls	r0, r3, #1
 80014c8:	0319      	lsls	r1, r3, #12
 80014ca:	4691      	mov	r9, r2
 80014cc:	0b36      	lsrs	r6, r6, #12
 80014ce:	0b09      	lsrs	r1, r1, #12
 80014d0:	0d40      	lsrs	r0, r0, #21
 80014d2:	45ba      	cmp	sl, r7
 80014d4:	d01e      	beq.n	8001514 <__ledf2+0x74>
 80014d6:	42b8      	cmp	r0, r7
 80014d8:	d00d      	beq.n	80014f6 <__ledf2+0x56>
 80014da:	4657      	mov	r7, sl
 80014dc:	2f00      	cmp	r7, #0
 80014de:	d127      	bne.n	8001530 <__ledf2+0x90>
 80014e0:	4334      	orrs	r4, r6
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d133      	bne.n	800154e <__ledf2+0xae>
 80014e6:	430a      	orrs	r2, r1
 80014e8:	d034      	beq.n	8001554 <__ledf2+0xb4>
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d140      	bne.n	8001570 <__ledf2+0xd0>
 80014ee:	4663      	mov	r3, ip
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e015      	b.n	8001522 <__ledf2+0x82>
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d112      	bne.n	8001520 <__ledf2+0x80>
 80014fa:	4653      	mov	r3, sl
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <__ledf2+0x64>
 8001500:	4326      	orrs	r6, r4
 8001502:	d0f4      	beq.n	80014ee <__ledf2+0x4e>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	4563      	cmp	r3, ip
 8001508:	d01d      	beq.n	8001546 <__ledf2+0xa6>
 800150a:	2001      	movs	r0, #1
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	425f      	negs	r7, r3
 8001510:	4338      	orrs	r0, r7
 8001512:	e006      	b.n	8001522 <__ledf2+0x82>
 8001514:	4326      	orrs	r6, r4
 8001516:	d103      	bne.n	8001520 <__ledf2+0x80>
 8001518:	4550      	cmp	r0, sl
 800151a:	d1f6      	bne.n	800150a <__ledf2+0x6a>
 800151c:	4311      	orrs	r1, r2
 800151e:	d01c      	beq.n	800155a <__ledf2+0xba>
 8001520:	2002      	movs	r0, #2
 8001522:	b003      	add	sp, #12
 8001524:	bcf0      	pop	{r4, r5, r6, r7}
 8001526:	46bb      	mov	fp, r7
 8001528:	46b2      	mov	sl, r6
 800152a:	46a9      	mov	r9, r5
 800152c:	46a0      	mov	r8, r4
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0ea      	beq.n	800150a <__ledf2+0x6a>
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	4563      	cmp	r3, ip
 8001538:	d1e7      	bne.n	800150a <__ledf2+0x6a>
 800153a:	4582      	cmp	sl, r0
 800153c:	dce5      	bgt.n	800150a <__ledf2+0x6a>
 800153e:	db02      	blt.n	8001546 <__ledf2+0xa6>
 8001540:	428e      	cmp	r6, r1
 8001542:	d8e2      	bhi.n	800150a <__ledf2+0x6a>
 8001544:	d00e      	beq.n	8001564 <__ledf2+0xc4>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	3801      	subs	r0, #1
 800154c:	e7e9      	b.n	8001522 <__ledf2+0x82>
 800154e:	2c00      	cmp	r4, #0
 8001550:	d0cd      	beq.n	80014ee <__ledf2+0x4e>
 8001552:	e7d7      	b.n	8001504 <__ledf2+0x64>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0e4      	beq.n	8001522 <__ledf2+0x82>
 8001558:	e7d7      	b.n	800150a <__ledf2+0x6a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	2000      	movs	r0, #0
 800155e:	4563      	cmp	r3, ip
 8001560:	d0df      	beq.n	8001522 <__ledf2+0x82>
 8001562:	e7d2      	b.n	800150a <__ledf2+0x6a>
 8001564:	45c8      	cmp	r8, r9
 8001566:	d8d0      	bhi.n	800150a <__ledf2+0x6a>
 8001568:	2000      	movs	r0, #0
 800156a:	45c8      	cmp	r8, r9
 800156c:	d2d9      	bcs.n	8001522 <__ledf2+0x82>
 800156e:	e7ea      	b.n	8001546 <__ledf2+0xa6>
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	4563      	cmp	r3, ip
 8001574:	d0e4      	beq.n	8001540 <__ledf2+0xa0>
 8001576:	e7c8      	b.n	800150a <__ledf2+0x6a>
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	46de      	mov	lr, fp
 8001584:	4645      	mov	r5, r8
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	001f      	movs	r7, r3
 800158a:	030b      	lsls	r3, r1, #12
 800158c:	0b1b      	lsrs	r3, r3, #12
 800158e:	0016      	movs	r6, r2
 8001590:	469a      	mov	sl, r3
 8001592:	0fca      	lsrs	r2, r1, #31
 8001594:	004b      	lsls	r3, r1, #1
 8001596:	0004      	movs	r4, r0
 8001598:	4691      	mov	r9, r2
 800159a:	b085      	sub	sp, #20
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x26>
 80015a0:	e1cf      	b.n	8001942 <__aeabi_dmul+0x3c6>
 80015a2:	4acd      	ldr	r2, [pc, #820]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d055      	beq.n	8001654 <__aeabi_dmul+0xd8>
 80015a8:	4651      	mov	r1, sl
 80015aa:	0f42      	lsrs	r2, r0, #29
 80015ac:	00c9      	lsls	r1, r1, #3
 80015ae:	430a      	orrs	r2, r1
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	4311      	orrs	r1, r2
 80015b6:	00c2      	lsls	r2, r0, #3
 80015b8:	4690      	mov	r8, r2
 80015ba:	4ac8      	ldr	r2, [pc, #800]	@ (80018dc <__aeabi_dmul+0x360>)
 80015bc:	468a      	mov	sl, r1
 80015be:	4693      	mov	fp, r2
 80015c0:	449b      	add	fp, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	033c      	lsls	r4, r7, #12
 80015ca:	007b      	lsls	r3, r7, #1
 80015cc:	0ffa      	lsrs	r2, r7, #31
 80015ce:	9601      	str	r6, [sp, #4]
 80015d0:	0b24      	lsrs	r4, r4, #12
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x5e>
 80015d8:	e188      	b.n	80018ec <__aeabi_dmul+0x370>
 80015da:	4abf      	ldr	r2, [pc, #764]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x66>
 80015e0:	e092      	b.n	8001708 <__aeabi_dmul+0x18c>
 80015e2:	4abe      	ldr	r2, [pc, #760]	@ (80018dc <__aeabi_dmul+0x360>)
 80015e4:	4694      	mov	ip, r2
 80015e6:	4463      	add	r3, ip
 80015e8:	449b      	add	fp, r3
 80015ea:	2d0a      	cmp	r5, #10
 80015ec:	dc42      	bgt.n	8001674 <__aeabi_dmul+0xf8>
 80015ee:	00e4      	lsls	r4, r4, #3
 80015f0:	0f73      	lsrs	r3, r6, #29
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2480      	movs	r4, #128	@ 0x80
 80015f6:	4649      	mov	r1, r9
 80015f8:	0424      	lsls	r4, r4, #16
 80015fa:	431c      	orrs	r4, r3
 80015fc:	00f3      	lsls	r3, r6, #3
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	2000      	movs	r0, #0
 8001604:	4059      	eors	r1, r3
 8001606:	b2cb      	uxtb	r3, r1
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	2d02      	cmp	r5, #2
 800160c:	dc00      	bgt.n	8001610 <__aeabi_dmul+0x94>
 800160e:	e094      	b.n	800173a <__aeabi_dmul+0x1be>
 8001610:	2301      	movs	r3, #1
 8001612:	40ab      	lsls	r3, r5
 8001614:	001d      	movs	r5, r3
 8001616:	23a6      	movs	r3, #166	@ 0xa6
 8001618:	002a      	movs	r2, r5
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	401a      	ands	r2, r3
 800161e:	421d      	tst	r5, r3
 8001620:	d000      	beq.n	8001624 <__aeabi_dmul+0xa8>
 8001622:	e229      	b.n	8001a78 <__aeabi_dmul+0x4fc>
 8001624:	2390      	movs	r3, #144	@ 0x90
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	421d      	tst	r5, r3
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0xb2>
 800162c:	e24d      	b.n	8001aca <__aeabi_dmul+0x54e>
 800162e:	2300      	movs	r3, #0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4699      	mov	r9, r3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4ba8      	ldr	r3, [pc, #672]	@ (80018d8 <__aeabi_dmul+0x35c>)
 8001638:	0010      	movs	r0, r2
 800163a:	464a      	mov	r2, r9
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	4323      	orrs	r3, r4
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	4313      	orrs	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	b005      	add	sp, #20
 8001648:	bcf0      	pop	{r4, r5, r6, r7}
 800164a:	46bb      	mov	fp, r7
 800164c:	46b2      	mov	sl, r6
 800164e:	46a9      	mov	r9, r5
 8001650:	46a0      	mov	r8, r4
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	4652      	mov	r2, sl
 8001656:	4302      	orrs	r2, r0
 8001658:	4690      	mov	r8, r2
 800165a:	d000      	beq.n	800165e <__aeabi_dmul+0xe2>
 800165c:	e1ac      	b.n	80019b8 <__aeabi_dmul+0x43c>
 800165e:	469b      	mov	fp, r3
 8001660:	2302      	movs	r3, #2
 8001662:	4692      	mov	sl, r2
 8001664:	2508      	movs	r5, #8
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	e7ae      	b.n	80015c8 <__aeabi_dmul+0x4c>
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	46a2      	mov	sl, r4
 800166e:	4699      	mov	r9, r3
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4698      	mov	r8, r3
 8001674:	9b02      	ldr	r3, [sp, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x100>
 800167a:	e1ca      	b.n	8001a12 <__aeabi_dmul+0x496>
 800167c:	2b03      	cmp	r3, #3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x106>
 8001680:	e192      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d110      	bne.n	80016a8 <__aeabi_dmul+0x12c>
 8001686:	2300      	movs	r3, #0
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	e7d4      	b.n	8001638 <__aeabi_dmul+0xbc>
 800168e:	2201      	movs	r2, #1
 8001690:	087b      	lsrs	r3, r7, #1
 8001692:	403a      	ands	r2, r7
 8001694:	4313      	orrs	r3, r2
 8001696:	4652      	mov	r2, sl
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	4313      	orrs	r3, r2
 800169c:	4698      	mov	r8, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	469a      	mov	sl, r3
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4699      	mov	r9, r3
 80016a8:	465b      	mov	r3, fp
 80016aa:	1c58      	adds	r0, r3, #1
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	445b      	add	r3, fp
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x13c>
 80016b6:	e1b1      	b.n	8001a1c <__aeabi_dmul+0x4a0>
 80016b8:	4642      	mov	r2, r8
 80016ba:	0752      	lsls	r2, r2, #29
 80016bc:	d00b      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016be:	220f      	movs	r2, #15
 80016c0:	4641      	mov	r1, r8
 80016c2:	400a      	ands	r2, r1
 80016c4:	2a04      	cmp	r2, #4
 80016c6:	d006      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016c8:	4642      	mov	r2, r8
 80016ca:	1d11      	adds	r1, r2, #4
 80016cc:	4541      	cmp	r1, r8
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	4688      	mov	r8, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	4492      	add	sl, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	01d2      	lsls	r2, r2, #7
 80016da:	d506      	bpl.n	80016ea <__aeabi_dmul+0x16e>
 80016dc:	4652      	mov	r2, sl
 80016de:	4b80      	ldr	r3, [pc, #512]	@ (80018e0 <__aeabi_dmul+0x364>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	4692      	mov	sl, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	18c3      	adds	r3, r0, r3
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <__aeabi_dmul+0x368>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x176>
 80016f0:	e18f      	b.n	8001a12 <__aeabi_dmul+0x496>
 80016f2:	4642      	mov	r2, r8
 80016f4:	08d1      	lsrs	r1, r2, #3
 80016f6:	4652      	mov	r2, sl
 80016f8:	0752      	lsls	r2, r2, #29
 80016fa:	430a      	orrs	r2, r1
 80016fc:	4651      	mov	r1, sl
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	024c      	lsls	r4, r1, #9
 8001702:	0b24      	lsrs	r4, r4, #12
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e797      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001708:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <__aeabi_dmul+0x35c>)
 800170a:	4326      	orrs	r6, r4
 800170c:	469c      	mov	ip, r3
 800170e:	44e3      	add	fp, ip
 8001710:	2e00      	cmp	r6, #0
 8001712:	d100      	bne.n	8001716 <__aeabi_dmul+0x19a>
 8001714:	e16f      	b.n	80019f6 <__aeabi_dmul+0x47a>
 8001716:	2303      	movs	r3, #3
 8001718:	4649      	mov	r1, r9
 800171a:	431d      	orrs	r5, r3
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	4059      	eors	r1, r3
 8001720:	b2cb      	uxtb	r3, r1
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	2d0a      	cmp	r5, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x1ae>
 8001728:	e133      	b.n	8001992 <__aeabi_dmul+0x416>
 800172a:	2301      	movs	r3, #1
 800172c:	40ab      	lsls	r3, r5
 800172e:	001d      	movs	r5, r3
 8001730:	2303      	movs	r3, #3
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2288      	movs	r2, #136	@ 0x88
 8001736:	422a      	tst	r2, r5
 8001738:	d197      	bne.n	800166a <__aeabi_dmul+0xee>
 800173a:	4642      	mov	r2, r8
 800173c:	4643      	mov	r3, r8
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	0c12      	lsrs	r2, r2, #16
 8001742:	0016      	movs	r6, r2
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	0c1d      	lsrs	r5, r3, #16
 8001748:	0c03      	lsrs	r3, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4346      	muls	r6, r0
 8001750:	46b4      	mov	ip, r6
 8001752:	001e      	movs	r6, r3
 8001754:	436e      	muls	r6, r5
 8001756:	9600      	str	r6, [sp, #0]
 8001758:	0016      	movs	r6, r2
 800175a:	0007      	movs	r7, r0
 800175c:	435e      	muls	r6, r3
 800175e:	4661      	mov	r1, ip
 8001760:	46b0      	mov	r8, r6
 8001762:	436f      	muls	r7, r5
 8001764:	0c0e      	lsrs	r6, r1, #16
 8001766:	44b8      	add	r8, r7
 8001768:	4446      	add	r6, r8
 800176a:	42b7      	cmp	r7, r6
 800176c:	d905      	bls.n	800177a <__aeabi_dmul+0x1fe>
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	4688      	mov	r8, r1
 8001774:	9f00      	ldr	r7, [sp, #0]
 8001776:	4447      	add	r7, r8
 8001778:	9700      	str	r7, [sp, #0]
 800177a:	4661      	mov	r1, ip
 800177c:	0409      	lsls	r1, r1, #16
 800177e:	0c09      	lsrs	r1, r1, #16
 8001780:	0c37      	lsrs	r7, r6, #16
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	468c      	mov	ip, r1
 8001786:	0031      	movs	r1, r6
 8001788:	4461      	add	r1, ip
 800178a:	9101      	str	r1, [sp, #4]
 800178c:	0011      	movs	r1, r2
 800178e:	0c26      	lsrs	r6, r4, #16
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	0c24      	lsrs	r4, r4, #16
 8001794:	4361      	muls	r1, r4
 8001796:	468c      	mov	ip, r1
 8001798:	0021      	movs	r1, r4
 800179a:	4369      	muls	r1, r5
 800179c:	4689      	mov	r9, r1
 800179e:	4661      	mov	r1, ip
 80017a0:	0c09      	lsrs	r1, r1, #16
 80017a2:	4688      	mov	r8, r1
 80017a4:	4372      	muls	r2, r6
 80017a6:	444a      	add	r2, r9
 80017a8:	4442      	add	r2, r8
 80017aa:	4375      	muls	r5, r6
 80017ac:	4591      	cmp	r9, r2
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x23c>
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	4688      	mov	r8, r1
 80017b6:	4445      	add	r5, r8
 80017b8:	0c11      	lsrs	r1, r2, #16
 80017ba:	4688      	mov	r8, r1
 80017bc:	4661      	mov	r1, ip
 80017be:	0409      	lsls	r1, r1, #16
 80017c0:	0c09      	lsrs	r1, r1, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	0412      	lsls	r2, r2, #16
 80017c6:	4462      	add	r2, ip
 80017c8:	18b9      	adds	r1, r7, r2
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	4651      	mov	r1, sl
 80017ce:	0c09      	lsrs	r1, r1, #16
 80017d0:	468c      	mov	ip, r1
 80017d2:	4651      	mov	r1, sl
 80017d4:	040f      	lsls	r7, r1, #16
 80017d6:	0c3f      	lsrs	r7, r7, #16
 80017d8:	0039      	movs	r1, r7
 80017da:	4341      	muls	r1, r0
 80017dc:	4445      	add	r5, r8
 80017de:	4688      	mov	r8, r1
 80017e0:	4661      	mov	r1, ip
 80017e2:	4341      	muls	r1, r0
 80017e4:	468a      	mov	sl, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	4660      	mov	r0, ip
 80017ea:	0c09      	lsrs	r1, r1, #16
 80017ec:	4689      	mov	r9, r1
 80017ee:	4358      	muls	r0, r3
 80017f0:	437b      	muls	r3, r7
 80017f2:	4453      	add	r3, sl
 80017f4:	444b      	add	r3, r9
 80017f6:	459a      	cmp	sl, r3
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x286>
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0249      	lsls	r1, r1, #9
 80017fe:	4689      	mov	r9, r1
 8001800:	4448      	add	r0, r9
 8001802:	0c19      	lsrs	r1, r3, #16
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	4688      	mov	r8, r1
 800180e:	0039      	movs	r1, r7
 8001810:	4361      	muls	r1, r4
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	4443      	add	r3, r8
 8001816:	4688      	mov	r8, r1
 8001818:	4661      	mov	r1, ip
 800181a:	434c      	muls	r4, r1
 800181c:	4371      	muls	r1, r6
 800181e:	468c      	mov	ip, r1
 8001820:	4641      	mov	r1, r8
 8001822:	4377      	muls	r7, r6
 8001824:	0c0e      	lsrs	r6, r1, #16
 8001826:	193f      	adds	r7, r7, r4
 8001828:	19f6      	adds	r6, r6, r7
 800182a:	4448      	add	r0, r9
 800182c:	42b4      	cmp	r4, r6
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x2bc>
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	4689      	mov	r9, r1
 8001836:	44cc      	add	ip, r9
 8001838:	9902      	ldr	r1, [sp, #8]
 800183a:	9f00      	ldr	r7, [sp, #0]
 800183c:	4689      	mov	r9, r1
 800183e:	0431      	lsls	r1, r6, #16
 8001840:	444f      	add	r7, r9
 8001842:	4689      	mov	r9, r1
 8001844:	4641      	mov	r1, r8
 8001846:	4297      	cmp	r7, r2
 8001848:	4192      	sbcs	r2, r2
 800184a:	040c      	lsls	r4, r1, #16
 800184c:	0c24      	lsrs	r4, r4, #16
 800184e:	444c      	add	r4, r9
 8001850:	18ff      	adds	r7, r7, r3
 8001852:	4252      	negs	r2, r2
 8001854:	1964      	adds	r4, r4, r5
 8001856:	18a1      	adds	r1, r4, r2
 8001858:	429f      	cmp	r7, r3
 800185a:	419b      	sbcs	r3, r3
 800185c:	4688      	mov	r8, r1
 800185e:	4682      	mov	sl, r0
 8001860:	425b      	negs	r3, r3
 8001862:	4699      	mov	r9, r3
 8001864:	4590      	cmp	r8, r2
 8001866:	4192      	sbcs	r2, r2
 8001868:	42ac      	cmp	r4, r5
 800186a:	41a4      	sbcs	r4, r4
 800186c:	44c2      	add	sl, r8
 800186e:	44d1      	add	r9, sl
 8001870:	4252      	negs	r2, r2
 8001872:	4264      	negs	r4, r4
 8001874:	4314      	orrs	r4, r2
 8001876:	4599      	cmp	r9, r3
 8001878:	419b      	sbcs	r3, r3
 800187a:	4582      	cmp	sl, r0
 800187c:	4192      	sbcs	r2, r2
 800187e:	425b      	negs	r3, r3
 8001880:	4252      	negs	r2, r2
 8001882:	4313      	orrs	r3, r2
 8001884:	464a      	mov	r2, r9
 8001886:	0c36      	lsrs	r6, r6, #16
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	4463      	add	r3, ip
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	0dd2      	lsrs	r2, r2, #23
 8001892:	431a      	orrs	r2, r3
 8001894:	9901      	ldr	r1, [sp, #4]
 8001896:	4692      	mov	sl, r2
 8001898:	027a      	lsls	r2, r7, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	1e50      	subs	r0, r2, #1
 800189e:	4182      	sbcs	r2, r0
 80018a0:	0dff      	lsrs	r7, r7, #23
 80018a2:	4317      	orrs	r7, r2
 80018a4:	464a      	mov	r2, r9
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4317      	orrs	r7, r2
 80018aa:	46b8      	mov	r8, r7
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	d500      	bpl.n	80018b2 <__aeabi_dmul+0x336>
 80018b0:	e6ed      	b.n	800168e <__aeabi_dmul+0x112>
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <__aeabi_dmul+0x36c>)
 80018b4:	9a03      	ldr	r2, [sp, #12]
 80018b6:	445b      	add	r3, fp
 80018b8:	4691      	mov	r9, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x344>
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dmul+0x49e>
 80018c0:	003a      	movs	r2, r7
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dmul+0x34c>
 80018c6:	e710      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018c8:	220f      	movs	r2, #15
 80018ca:	4658      	mov	r0, fp
 80018cc:	403a      	ands	r2, r7
 80018ce:	2a04      	cmp	r2, #4
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dmul+0x358>
 80018d2:	e6f9      	b.n	80016c8 <__aeabi_dmul+0x14c>
 80018d4:	e709      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	fffffc01 	.word	0xfffffc01
 80018e0:	feffffff 	.word	0xfeffffff
 80018e4:	000007fe 	.word	0x000007fe
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	0022      	movs	r2, r4
 80018ee:	4332      	orrs	r2, r6
 80018f0:	d06f      	beq.n	80019d2 <__aeabi_dmul+0x456>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0x37c>
 80018f6:	e0c2      	b.n	8001a7e <__aeabi_dmul+0x502>
 80018f8:	0020      	movs	r0, r4
 80018fa:	f000 fddf 	bl	80024bc <__clzsi2>
 80018fe:	0002      	movs	r2, r0
 8001900:	0003      	movs	r3, r0
 8001902:	3a0b      	subs	r2, #11
 8001904:	201d      	movs	r0, #29
 8001906:	1a82      	subs	r2, r0, r2
 8001908:	0030      	movs	r0, r6
 800190a:	0019      	movs	r1, r3
 800190c:	40d0      	lsrs	r0, r2
 800190e:	3908      	subs	r1, #8
 8001910:	408c      	lsls	r4, r1
 8001912:	0002      	movs	r2, r0
 8001914:	4322      	orrs	r2, r4
 8001916:	0034      	movs	r4, r6
 8001918:	408c      	lsls	r4, r1
 800191a:	4659      	mov	r1, fp
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	4986      	ldr	r1, [pc, #536]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001920:	468b      	mov	fp, r1
 8001922:	449b      	add	fp, r3
 8001924:	2d0a      	cmp	r5, #10
 8001926:	dd00      	ble.n	800192a <__aeabi_dmul+0x3ae>
 8001928:	e6a4      	b.n	8001674 <__aeabi_dmul+0xf8>
 800192a:	4649      	mov	r1, r9
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	9401      	str	r4, [sp, #4]
 8001930:	4059      	eors	r1, r3
 8001932:	b2cb      	uxtb	r3, r1
 8001934:	0014      	movs	r4, r2
 8001936:	2000      	movs	r0, #0
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	2d02      	cmp	r5, #2
 800193c:	dd00      	ble.n	8001940 <__aeabi_dmul+0x3c4>
 800193e:	e667      	b.n	8001610 <__aeabi_dmul+0x94>
 8001940:	e6fb      	b.n	800173a <__aeabi_dmul+0x1be>
 8001942:	4653      	mov	r3, sl
 8001944:	4303      	orrs	r3, r0
 8001946:	4698      	mov	r8, r3
 8001948:	d03c      	beq.n	80019c4 <__aeabi_dmul+0x448>
 800194a:	4653      	mov	r3, sl
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dmul+0x3d6>
 8001950:	e0a3      	b.n	8001a9a <__aeabi_dmul+0x51e>
 8001952:	4650      	mov	r0, sl
 8001954:	f000 fdb2 	bl	80024bc <__clzsi2>
 8001958:	230b      	movs	r3, #11
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	0002      	movs	r2, r0
 8001960:	4484      	add	ip, r0
 8001962:	0011      	movs	r1, r2
 8001964:	4650      	mov	r0, sl
 8001966:	3908      	subs	r1, #8
 8001968:	4088      	lsls	r0, r1
 800196a:	231d      	movs	r3, #29
 800196c:	4680      	mov	r8, r0
 800196e:	4660      	mov	r0, ip
 8001970:	1a1b      	subs	r3, r3, r0
 8001972:	0020      	movs	r0, r4
 8001974:	40d8      	lsrs	r0, r3
 8001976:	0003      	movs	r3, r0
 8001978:	4640      	mov	r0, r8
 800197a:	4303      	orrs	r3, r0
 800197c:	469a      	mov	sl, r3
 800197e:	0023      	movs	r3, r4
 8001980:	408b      	lsls	r3, r1
 8001982:	4698      	mov	r8, r3
 8001984:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001986:	2500      	movs	r5, #0
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	469b      	mov	fp, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	e61a      	b.n	80015c8 <__aeabi_dmul+0x4c>
 8001992:	2d0f      	cmp	r5, #15
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x41c>
 8001996:	e0c9      	b.n	8001b2c <__aeabi_dmul+0x5b0>
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	4652      	mov	r2, sl
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	421a      	tst	r2, r3
 80019a0:	d002      	beq.n	80019a8 <__aeabi_dmul+0x42c>
 80019a2:	421c      	tst	r4, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x42c>
 80019a6:	e092      	b.n	8001ace <__aeabi_dmul+0x552>
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	4642      	mov	r2, r8
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	e63e      	b.n	8001636 <__aeabi_dmul+0xba>
 80019b8:	469b      	mov	fp, r3
 80019ba:	2303      	movs	r3, #3
 80019bc:	4680      	mov	r8, r0
 80019be:	250c      	movs	r5, #12
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	e601      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019c4:	2300      	movs	r3, #0
 80019c6:	469a      	mov	sl, r3
 80019c8:	469b      	mov	fp, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	2504      	movs	r5, #4
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e5fa      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019d2:	2101      	movs	r1, #1
 80019d4:	430d      	orrs	r5, r1
 80019d6:	2d0a      	cmp	r5, #10
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dmul+0x460>
 80019da:	e64b      	b.n	8001674 <__aeabi_dmul+0xf8>
 80019dc:	4649      	mov	r1, r9
 80019de:	9800      	ldr	r0, [sp, #0]
 80019e0:	4041      	eors	r1, r0
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2d02      	cmp	r5, #2
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dmul+0x470>
 80019ea:	e096      	b.n	8001b1a <__aeabi_dmul+0x59e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e60c      	b.n	8001610 <__aeabi_dmul+0x94>
 80019f6:	4649      	mov	r1, r9
 80019f8:	2302      	movs	r3, #2
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	432b      	orrs	r3, r5
 80019fe:	4051      	eors	r1, r2
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	9203      	str	r2, [sp, #12]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dmul+0x48e>
 8001a08:	e634      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d157      	bne.n	8001abe <__aeabi_dmul+0x542>
 8001a0e:	9b03      	ldr	r3, [sp, #12]
 8001a10:	4699      	mov	r9, r3
 8001a12:	2400      	movs	r4, #0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4b49      	ldr	r3, [pc, #292]	@ (8001b3c <__aeabi_dmul+0x5c0>)
 8001a18:	e60e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a1a:	4658      	mov	r0, fp
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	1ac9      	subs	r1, r1, r3
 8001a20:	2938      	cmp	r1, #56	@ 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dmul+0x4aa>
 8001a24:	e62f      	b.n	8001686 <__aeabi_dmul+0x10a>
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd56      	ble.n	8001ad8 <__aeabi_dmul+0x55c>
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	4654      	mov	r4, sl
 8001a2e:	4252      	negs	r2, r2
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	40dc      	lsrs	r4, r3
 8001a34:	2920      	cmp	r1, #32
 8001a36:	d007      	beq.n	8001a48 <__aeabi_dmul+0x4cc>
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <__aeabi_dmul+0x5c4>)
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4460      	add	r0, ip
 8001a42:	4083      	lsls	r3, r0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	000b      	movs	r3, r1
 8001a52:	4322      	orrs	r2, r4
 8001a54:	4013      	ands	r3, r2
 8001a56:	2400      	movs	r4, #0
 8001a58:	4211      	tst	r1, r2
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_dmul+0x4f4>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d05d      	beq.n	8001b20 <__aeabi_dmul+0x5a4>
 8001a64:	1d11      	adds	r1, r2, #4
 8001a66:	4291      	cmp	r1, r2
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	08d2      	lsrs	r2, r2, #3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	e5df      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	e5fa      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a7e:	9801      	ldr	r0, [sp, #4]
 8001a80:	f000 fd1c 	bl	80024bc <__clzsi2>
 8001a84:	0002      	movs	r2, r0
 8001a86:	0003      	movs	r3, r0
 8001a88:	3215      	adds	r2, #21
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	2a1c      	cmp	r2, #28
 8001a8e:	dc00      	bgt.n	8001a92 <__aeabi_dmul+0x516>
 8001a90:	e738      	b.n	8001904 <__aeabi_dmul+0x388>
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3808      	subs	r0, #8
 8001a96:	4082      	lsls	r2, r0
 8001a98:	e73f      	b.n	800191a <__aeabi_dmul+0x39e>
 8001a9a:	f000 fd0f 	bl	80024bc <__clzsi2>
 8001a9e:	2315      	movs	r3, #21
 8001aa0:	469c      	mov	ip, r3
 8001aa2:	4484      	add	ip, r0
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	3220      	adds	r2, #32
 8001aaa:	2b1c      	cmp	r3, #28
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x534>
 8001aae:	e758      	b.n	8001962 <__aeabi_dmul+0x3e6>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	3808      	subs	r0, #8
 8001ab8:	4083      	lsls	r3, r0
 8001aba:	469a      	mov	sl, r3
 8001abc:	e762      	b.n	8001984 <__aeabi_dmul+0x408>
 8001abe:	001d      	movs	r5, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	e5a2      	b.n	8001610 <__aeabi_dmul+0x94>
 8001aca:	9002      	str	r0, [sp, #8]
 8001acc:	e632      	b.n	8001734 <__aeabi_dmul+0x1b8>
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	9a01      	ldr	r2, [sp, #4]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e5ae      	b.n	8001636 <__aeabi_dmul+0xba>
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <__aeabi_dmul+0x5c8>)
 8001ada:	4652      	mov	r2, sl
 8001adc:	18c3      	adds	r3, r0, r3
 8001ade:	4640      	mov	r0, r8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	40c8      	lsrs	r0, r1
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4098      	lsls	r0, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4183      	sbcs	r3, r0
 8001af0:	4654      	mov	r4, sl
 8001af2:	431a      	orrs	r2, r3
 8001af4:	40cc      	lsrs	r4, r1
 8001af6:	0753      	lsls	r3, r2, #29
 8001af8:	d009      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001afa:	230f      	movs	r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d005      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001b02:	1d13      	adds	r3, r2, #4
 8001b04:	4293      	cmp	r3, r2
 8001b06:	4192      	sbcs	r2, r2
 8001b08:	4252      	negs	r2, r2
 8001b0a:	18a4      	adds	r4, r4, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	0223      	lsls	r3, r4, #8
 8001b10:	d508      	bpl.n	8001b24 <__aeabi_dmul+0x5a8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	2400      	movs	r4, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	e58e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	e58b      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e7a5      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b24:	0763      	lsls	r3, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e7a1      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b2c:	9b00      	ldr	r3, [sp, #0]
 8001b2e:	46a2      	mov	sl, r4
 8001b30:	4699      	mov	r9, r3
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	4698      	mov	r8, r3
 8001b36:	e737      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001b38:	fffffc0d 	.word	0xfffffc0d
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	0000043e 	.word	0x0000043e
 8001b44:	0000041e 	.word	0x0000041e

08001b48 <__aeabi_dsub>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	4645      	mov	r5, r8
 8001b50:	46de      	mov	lr, fp
 8001b52:	b5e0      	push	{r5, r6, r7, lr}
 8001b54:	b083      	sub	sp, #12
 8001b56:	9000      	str	r0, [sp, #0]
 8001b58:	9101      	str	r1, [sp, #4]
 8001b5a:	030c      	lsls	r4, r1, #12
 8001b5c:	004d      	lsls	r5, r1, #1
 8001b5e:	0fce      	lsrs	r6, r1, #31
 8001b60:	0a61      	lsrs	r1, r4, #9
 8001b62:	9c00      	ldr	r4, [sp, #0]
 8001b64:	005f      	lsls	r7, r3, #1
 8001b66:	0f64      	lsrs	r4, r4, #29
 8001b68:	430c      	orrs	r4, r1
 8001b6a:	9900      	ldr	r1, [sp, #0]
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	00c8      	lsls	r0, r1, #3
 8001b72:	0319      	lsls	r1, r3, #12
 8001b74:	0d7b      	lsrs	r3, r7, #21
 8001b76:	4699      	mov	r9, r3
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001eac <__aeabi_dsub+0x364>)
 8001b7c:	0fdb      	lsrs	r3, r3, #31
 8001b7e:	469c      	mov	ip, r3
 8001b80:	0a4b      	lsrs	r3, r1, #9
 8001b82:	9900      	ldr	r1, [sp, #0]
 8001b84:	4680      	mov	r8, r0
 8001b86:	0f49      	lsrs	r1, r1, #29
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	468b      	mov	fp, r1
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4692      	mov	sl, r2
 8001b92:	0d6d      	lsrs	r5, r5, #21
 8001b94:	45b9      	cmp	r9, r7
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x52>
 8001b98:	e0bf      	b.n	8001d1a <__aeabi_dsub+0x1d2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	4059      	eors	r1, r3
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	1aeb      	subs	r3, r5, r3
 8001ba6:	428e      	cmp	r6, r1
 8001ba8:	d075      	beq.n	8001c96 <__aeabi_dsub+0x14e>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dsub+0x68>
 8001bae:	e2a3      	b.n	80020f8 <__aeabi_dsub+0x5b0>
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x70>
 8001bb6:	e0ce      	b.n	8001d56 <__aeabi_dsub+0x20e>
 8001bb8:	42bd      	cmp	r5, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x76>
 8001bbc:	e200      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001bbe:	2701      	movs	r7, #1
 8001bc0:	2b38      	cmp	r3, #56	@ 0x38
 8001bc2:	dc19      	bgt.n	8001bf8 <__aeabi_dsub+0xb0>
 8001bc4:	2780      	movs	r7, #128	@ 0x80
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	043f      	lsls	r7, r7, #16
 8001bca:	4339      	orrs	r1, r7
 8001bcc:	468b      	mov	fp, r1
 8001bce:	2b1f      	cmp	r3, #31
 8001bd0:	dd00      	ble.n	8001bd4 <__aeabi_dsub+0x8c>
 8001bd2:	e1fa      	b.n	8001fca <__aeabi_dsub+0x482>
 8001bd4:	2720      	movs	r7, #32
 8001bd6:	1af9      	subs	r1, r7, r3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	4667      	mov	r7, ip
 8001bde:	40b9      	lsls	r1, r7
 8001be0:	000f      	movs	r7, r1
 8001be2:	0011      	movs	r1, r2
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	430f      	orrs	r7, r1
 8001be8:	4661      	mov	r1, ip
 8001bea:	408a      	lsls	r2, r1
 8001bec:	1e51      	subs	r1, r2, #1
 8001bee:	418a      	sbcs	r2, r1
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	40d9      	lsrs	r1, r3
 8001bf4:	4317      	orrs	r7, r2
 8001bf6:	1a64      	subs	r4, r4, r1
 8001bf8:	1bc7      	subs	r7, r0, r7
 8001bfa:	42b8      	cmp	r0, r7
 8001bfc:	4180      	sbcs	r0, r0
 8001bfe:	4240      	negs	r0, r0
 8001c00:	1a24      	subs	r4, r4, r0
 8001c02:	0223      	lsls	r3, r4, #8
 8001c04:	d400      	bmi.n	8001c08 <__aeabi_dsub+0xc0>
 8001c06:	e140      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0a64      	lsrs	r4, r4, #9
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0xca>
 8001c10:	e154      	b.n	8001ebc <__aeabi_dsub+0x374>
 8001c12:	0020      	movs	r0, r4
 8001c14:	f000 fc52 	bl	80024bc <__clzsi2>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	0038      	movs	r0, r7
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	409c      	lsls	r4, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409f      	lsls	r7, r3
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xea>
 8001c30:	e1a6      	b.n	8001f80 <__aeabi_dsub+0x438>
 8001c32:	1b58      	subs	r0, r3, r5
 8001c34:	3001      	adds	r0, #1
 8001c36:	1a09      	subs	r1, r1, r0
 8001c38:	003c      	movs	r4, r7
 8001c3a:	408f      	lsls	r7, r1
 8001c3c:	40c4      	lsrs	r4, r0
 8001c3e:	1e7b      	subs	r3, r7, #1
 8001c40:	419f      	sbcs	r7, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	408b      	lsls	r3, r1
 8001c46:	4327      	orrs	r7, r4
 8001c48:	431f      	orrs	r7, r3
 8001c4a:	40c2      	lsrs	r2, r0
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	0014      	movs	r4, r2
 8001c50:	2500      	movs	r5, #0
 8001c52:	4313      	orrs	r3, r2
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x110>
 8001c56:	e1f7      	b.n	8002048 <__aeabi_dsub+0x500>
 8001c58:	077b      	lsls	r3, r7, #29
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x116>
 8001c5c:	e377      	b.n	800234e <__aeabi_dsub+0x806>
 8001c5e:	230f      	movs	r3, #15
 8001c60:	0038      	movs	r0, r7
 8001c62:	403b      	ands	r3, r7
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d004      	beq.n	8001c72 <__aeabi_dsub+0x12a>
 8001c68:	1d38      	adds	r0, r7, #4
 8001c6a:	42b8      	cmp	r0, r7
 8001c6c:	41bf      	sbcs	r7, r7
 8001c6e:	427f      	negs	r7, r7
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	0223      	lsls	r3, r4, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x130>
 8001c76:	e368      	b.n	800234a <__aeabi_dsub+0x802>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	@ (8001eac <__aeabi_dsub+0x364>)
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	429d      	cmp	r5, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13a>
 8001c80:	e0f4      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001c84:	056d      	lsls	r5, r5, #21
 8001c86:	401c      	ands	r4, r3
 8001c88:	0d6d      	lsrs	r5, r5, #21
 8001c8a:	0767      	lsls	r7, r4, #29
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	4307      	orrs	r7, r0
 8001c92:	0b24      	lsrs	r4, r4, #12
 8001c94:	e0ec      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x154>
 8001c9a:	e329      	b.n	80022f0 <__aeabi_dsub+0x7a8>
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x15c>
 8001ca2:	e0d6      	b.n	8001e52 <__aeabi_dsub+0x30a>
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x164>
 8001caa:	e12e      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x16c>
 8001cb2:	e1e6      	b.n	8002082 <__aeabi_dsub+0x53a>
 8001cb4:	42bb      	cmp	r3, r7
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x172>
 8001cb8:	e182      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001cba:	2701      	movs	r7, #1
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	2938      	cmp	r1, #56	@ 0x38
 8001cc0:	dc14      	bgt.n	8001cec <__aeabi_dsub+0x1a4>
 8001cc2:	2b1f      	cmp	r3, #31
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x180>
 8001cc6:	e23c      	b.n	8002142 <__aeabi_dsub+0x5fa>
 8001cc8:	2720      	movs	r7, #32
 8001cca:	1af9      	subs	r1, r7, r3
 8001ccc:	468c      	mov	ip, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	4667      	mov	r7, ip
 8001cd2:	40b9      	lsls	r1, r7
 8001cd4:	000f      	movs	r7, r1
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	430f      	orrs	r7, r1
 8001cdc:	4661      	mov	r1, ip
 8001cde:	408a      	lsls	r2, r1
 8001ce0:	1e51      	subs	r1, r2, #1
 8001ce2:	418a      	sbcs	r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	40d9      	lsrs	r1, r3
 8001ce8:	4317      	orrs	r7, r2
 8001cea:	1864      	adds	r4, r4, r1
 8001cec:	183f      	adds	r7, r7, r0
 8001cee:	4287      	cmp	r7, r0
 8001cf0:	4180      	sbcs	r0, r0
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	0223      	lsls	r3, r4, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_dsub+0x1b4>
 8001cfa:	e0c6      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <__aeabi_dsub+0x364>)
 8001cfe:	3501      	adds	r5, #1
 8001d00:	429d      	cmp	r5, r3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x1be>
 8001d04:	e0b2      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001d06:	2101      	movs	r1, #1
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001d0a:	087a      	lsrs	r2, r7, #1
 8001d0c:	401c      	ands	r4, r3
 8001d0e:	4039      	ands	r1, r7
 8001d10:	430a      	orrs	r2, r1
 8001d12:	07e7      	lsls	r7, r4, #31
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0864      	lsrs	r4, r4, #1
 8001d18:	e79e      	b.n	8001c58 <__aeabi_dsub+0x110>
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <__aeabi_dsub+0x36c>)
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	468a      	mov	sl, r1
 8001d20:	18eb      	adds	r3, r5, r3
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d028      	beq.n	8001d78 <__aeabi_dsub+0x230>
 8001d26:	4566      	cmp	r6, ip
 8001d28:	d02c      	beq.n	8001d84 <__aeabi_dsub+0x23c>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d05b      	beq.n	8001de6 <__aeabi_dsub+0x29e>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1ec>
 8001d32:	e12c      	b.n	8001f8e <__aeabi_dsub+0x446>
 8001d34:	465b      	mov	r3, fp
 8001d36:	4666      	mov	r6, ip
 8001d38:	075f      	lsls	r7, r3, #29
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4317      	orrs	r7, r2
 8001d3e:	08dd      	lsrs	r5, r3, #3
 8001d40:	003b      	movs	r3, r7
 8001d42:	432b      	orrs	r3, r5
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x200>
 8001d46:	e0e2      	b.n	8001f0e <__aeabi_dsub+0x3c6>
 8001d48:	2480      	movs	r4, #128	@ 0x80
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	432c      	orrs	r4, r5
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4d56      	ldr	r5, [pc, #344]	@ (8001eac <__aeabi_dsub+0x364>)
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	e08c      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001d56:	4659      	mov	r1, fp
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x216>
 8001d5c:	e0d5      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x21e>
 8001d64:	e1b9      	b.n	80020da <__aeabi_dsub+0x592>
 8001d66:	42bb      	cmp	r3, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x224>
 8001d6a:	e1b1      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001d6c:	2701      	movs	r7, #1
 8001d6e:	000b      	movs	r3, r1
 8001d70:	2938      	cmp	r1, #56	@ 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x22e>
 8001d74:	e740      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001d76:	e72a      	b.n	8001bce <__aeabi_dsub+0x86>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	2701      	movs	r7, #1
 8001d7c:	4079      	eors	r1, r7
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4566      	cmp	r6, ip
 8001d82:	d1d2      	bne.n	8001d2a <__aeabi_dsub+0x1e2>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x242>
 8001d88:	e0c5      	b.n	8001f16 <__aeabi_dsub+0x3ce>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x248>
 8001d8e:	e155      	b.n	800203c <__aeabi_dsub+0x4f4>
 8001d90:	464b      	mov	r3, r9
 8001d92:	0025      	movs	r5, r4
 8001d94:	4305      	orrs	r5, r0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x252>
 8001d98:	e212      	b.n	80021c0 <__aeabi_dsub+0x678>
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x25c>
 8001da2:	e249      	b.n	8002238 <__aeabi_dsub+0x6f0>
 8001da4:	4d41      	ldr	r5, [pc, #260]	@ (8001eac <__aeabi_dsub+0x364>)
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x264>
 8001daa:	e28f      	b.n	80022cc <__aeabi_dsub+0x784>
 8001dac:	2701      	movs	r7, #1
 8001dae:	2938      	cmp	r1, #56	@ 0x38
 8001db0:	dc11      	bgt.n	8001dd6 <__aeabi_dsub+0x28e>
 8001db2:	4663      	mov	r3, ip
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	dd00      	ble.n	8001dba <__aeabi_dsub+0x272>
 8001db8:	e25b      	b.n	8002272 <__aeabi_dsub+0x72a>
 8001dba:	4661      	mov	r1, ip
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	0027      	movs	r7, r4
 8001dc0:	1a5b      	subs	r3, r3, r1
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	4098      	lsls	r0, r3
 8001dc6:	409f      	lsls	r7, r3
 8001dc8:	40cd      	lsrs	r5, r1
 8001dca:	1e43      	subs	r3, r0, #1
 8001dcc:	4198      	sbcs	r0, r3
 8001dce:	40cc      	lsrs	r4, r1
 8001dd0:	432f      	orrs	r7, r5
 8001dd2:	4307      	orrs	r7, r0
 8001dd4:	44a3      	add	fp, r4
 8001dd6:	18bf      	adds	r7, r7, r2
 8001dd8:	4297      	cmp	r7, r2
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	4252      	negs	r2, r2
 8001dde:	445a      	add	r2, fp
 8001de0:	0014      	movs	r4, r2
 8001de2:	464d      	mov	r5, r9
 8001de4:	e787      	b.n	8001cf6 <__aeabi_dsub+0x1ae>
 8001de6:	4f34      	ldr	r7, [pc, #208]	@ (8001eb8 <__aeabi_dsub+0x370>)
 8001de8:	1c6b      	adds	r3, r5, #1
 8001dea:	423b      	tst	r3, r7
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x2a8>
 8001dee:	e0b6      	b.n	8001f5e <__aeabi_dsub+0x416>
 8001df0:	4659      	mov	r1, fp
 8001df2:	0023      	movs	r3, r4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	000f      	movs	r7, r1
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x2b8>
 8001dfe:	e126      	b.n	800204e <__aeabi_dsub+0x506>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x2be>
 8001e04:	e1c0      	b.n	8002188 <__aeabi_dsub+0x640>
 8001e06:	2900      	cmp	r1, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x2c4>
 8001e0a:	e0a1      	b.n	8001f50 <__aeabi_dsub+0x408>
 8001e0c:	1a83      	subs	r3, r0, r2
 8001e0e:	4698      	mov	r8, r3
 8001e10:	465b      	mov	r3, fp
 8001e12:	4540      	cmp	r0, r8
 8001e14:	41ad      	sbcs	r5, r5
 8001e16:	1ae3      	subs	r3, r4, r3
 8001e18:	426d      	negs	r5, r5
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	2580      	movs	r5, #128	@ 0x80
 8001e1e:	042d      	lsls	r5, r5, #16
 8001e20:	422b      	tst	r3, r5
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x2de>
 8001e24:	e14b      	b.n	80020be <__aeabi_dsub+0x576>
 8001e26:	465b      	mov	r3, fp
 8001e28:	1a10      	subs	r0, r2, r0
 8001e2a:	4282      	cmp	r2, r0
 8001e2c:	4192      	sbcs	r2, r2
 8001e2e:	1b1c      	subs	r4, r3, r4
 8001e30:	0007      	movs	r7, r0
 8001e32:	2601      	movs	r6, #1
 8001e34:	4663      	mov	r3, ip
 8001e36:	4252      	negs	r2, r2
 8001e38:	1aa4      	subs	r4, r4, r2
 8001e3a:	4327      	orrs	r7, r4
 8001e3c:	401e      	ands	r6, r3
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x2fc>
 8001e42:	e142      	b.n	80020ca <__aeabi_dsub+0x582>
 8001e44:	422c      	tst	r4, r5
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x302>
 8001e48:	e26d      	b.n	8002326 <__aeabi_dsub+0x7de>
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	401c      	ands	r4, r3
 8001e50:	e71b      	b.n	8001c8a <__aeabi_dsub+0x142>
 8001e52:	42bd      	cmp	r5, r7
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x310>
 8001e56:	e13b      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001e58:	2701      	movs	r7, #1
 8001e5a:	2b38      	cmp	r3, #56	@ 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x318>
 8001e5e:	e745      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8001e60:	2780      	movs	r7, #128	@ 0x80
 8001e62:	4659      	mov	r1, fp
 8001e64:	043f      	lsls	r7, r7, #16
 8001e66:	4339      	orrs	r1, r7
 8001e68:	468b      	mov	fp, r1
 8001e6a:	e72a      	b.n	8001cc2 <__aeabi_dsub+0x17a>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2700      	movs	r7, #0
 8001e70:	052d      	lsls	r5, r5, #20
 8001e72:	4325      	orrs	r5, r4
 8001e74:	07f6      	lsls	r6, r6, #31
 8001e76:	4335      	orrs	r5, r6
 8001e78:	0038      	movs	r0, r7
 8001e7a:	0029      	movs	r1, r5
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e80:	46bb      	mov	fp, r7
 8001e82:	46b2      	mov	sl, r6
 8001e84:	46a9      	mov	r9, r5
 8001e86:	46a0      	mov	r8, r4
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	d004      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	403b      	ands	r3, r7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x120>
 8001e98:	002b      	movs	r3, r5
 8001e9a:	08f8      	lsrs	r0, r7, #3
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <__aeabi_dsub+0x364>)
 8001e9e:	0767      	lsls	r7, r4, #29
 8001ea0:	4307      	orrs	r7, r0
 8001ea2:	08e5      	lsrs	r5, r4, #3
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x362>
 8001ea8:	e74a      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001eaa:	e0a5      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	0038      	movs	r0, r7
 8001ebe:	f000 fafd 	bl	80024bc <__clzsi2>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x384>
 8001eca:	e6a7      	b.n	8001c1c <__aeabi_dsub+0xd4>
 8001ecc:	003a      	movs	r2, r7
 8001ece:	3808      	subs	r0, #8
 8001ed0:	4082      	lsls	r2, r0
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x390>
 8001ed6:	e08a      	b.n	8001fee <__aeabi_dsub+0x4a6>
 8001ed8:	1b5b      	subs	r3, r3, r5
 8001eda:	1c58      	adds	r0, r3, #1
 8001edc:	281f      	cmp	r0, #31
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dsub+0x39a>
 8001ee0:	e1d8      	b.n	8002294 <__aeabi_dsub+0x74c>
 8001ee2:	0017      	movs	r7, r2
 8001ee4:	3b1f      	subs	r3, #31
 8001ee6:	40df      	lsrs	r7, r3
 8001ee8:	2820      	cmp	r0, #32
 8001eea:	d005      	beq.n	8001ef8 <__aeabi_dsub+0x3b0>
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	1e53      	subs	r3, r2, #1
 8001ef4:	419a      	sbcs	r2, r3
 8001ef6:	4317      	orrs	r7, r2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x3b8>
 8001efe:	e0e5      	b.n	80020cc <__aeabi_dsub+0x584>
 8001f00:	077b      	lsls	r3, r7, #29
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x3be>
 8001f04:	e6ab      	b.n	8001c5e <__aeabi_dsub+0x116>
 8001f06:	002c      	movs	r4, r5
 8001f08:	e7c6      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f0a:	08c0      	lsrs	r0, r0, #3
 8001f0c:	e7c6      	b.n	8001e9c <__aeabi_dsub+0x354>
 8001f0e:	2700      	movs	r7, #0
 8001f10:	2400      	movs	r4, #0
 8001f12:	4dd1      	ldr	r5, [pc, #836]	@ (8002258 <__aeabi_dsub+0x710>)
 8001f14:	e7ac      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001f16:	4fd1      	ldr	r7, [pc, #836]	@ (800225c <__aeabi_dsub+0x714>)
 8001f18:	1c6b      	adds	r3, r5, #1
 8001f1a:	423b      	tst	r3, r7
 8001f1c:	d171      	bne.n	8002002 <__aeabi_dsub+0x4ba>
 8001f1e:	0023      	movs	r3, r4
 8001f20:	4303      	orrs	r3, r0
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e0>
 8001f26:	e14e      	b.n	80021c6 <__aeabi_dsub+0x67e>
 8001f28:	4657      	mov	r7, sl
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x3e8>
 8001f2e:	e1b5      	b.n	800229c <__aeabi_dsub+0x754>
 8001f30:	2f00      	cmp	r7, #0
 8001f32:	d00d      	beq.n	8001f50 <__aeabi_dsub+0x408>
 8001f34:	1883      	adds	r3, r0, r2
 8001f36:	4283      	cmp	r3, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	445c      	add	r4, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1824      	adds	r4, r4, r0
 8001f40:	0222      	lsls	r2, r4, #8
 8001f42:	d500      	bpl.n	8001f46 <__aeabi_dsub+0x3fe>
 8001f44:	e1c8      	b.n	80022d8 <__aeabi_dsub+0x790>
 8001f46:	001f      	movs	r7, r3
 8001f48:	4698      	mov	r8, r3
 8001f4a:	4327      	orrs	r7, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x408>
 8001f4e:	e0bc      	b.n	80020ca <__aeabi_dsub+0x582>
 8001f50:	4643      	mov	r3, r8
 8001f52:	0767      	lsls	r7, r4, #29
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	431f      	orrs	r7, r3
 8001f58:	08e5      	lsrs	r5, r4, #3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e04c      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001f5e:	1a83      	subs	r3, r0, r2
 8001f60:	4698      	mov	r8, r3
 8001f62:	465b      	mov	r3, fp
 8001f64:	4540      	cmp	r0, r8
 8001f66:	41bf      	sbcs	r7, r7
 8001f68:	1ae3      	subs	r3, r4, r3
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1bdb      	subs	r3, r3, r7
 8001f6e:	021f      	lsls	r7, r3, #8
 8001f70:	d47c      	bmi.n	800206c <__aeabi_dsub+0x524>
 8001f72:	4647      	mov	r7, r8
 8001f74:	431f      	orrs	r7, r3
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x432>
 8001f78:	e0a6      	b.n	80020c8 <__aeabi_dsub+0x580>
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	e645      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8001f80:	4cb7      	ldr	r4, [pc, #732]	@ (8002260 <__aeabi_dsub+0x718>)
 8001f82:	1aed      	subs	r5, r5, r3
 8001f84:	4014      	ands	r4, r2
 8001f86:	077b      	lsls	r3, r7, #29
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x444>
 8001f8a:	e780      	b.n	8001e8e <__aeabi_dsub+0x346>
 8001f8c:	e784      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f8e:	464b      	mov	r3, r9
 8001f90:	0025      	movs	r5, r4
 8001f92:	4305      	orrs	r5, r0
 8001f94:	d066      	beq.n	8002064 <__aeabi_dsub+0x51c>
 8001f96:	1e5f      	subs	r7, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x456>
 8001f9c:	e0fc      	b.n	8002198 <__aeabi_dsub+0x650>
 8001f9e:	4dae      	ldr	r5, [pc, #696]	@ (8002258 <__aeabi_dsub+0x710>)
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x45e>
 8001fa4:	e15e      	b.n	8002264 <__aeabi_dsub+0x71c>
 8001fa6:	4666      	mov	r6, ip
 8001fa8:	2f38      	cmp	r7, #56	@ 0x38
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dsub+0x466>
 8001fac:	e0b4      	b.n	8002118 <__aeabi_dsub+0x5d0>
 8001fae:	2001      	movs	r0, #1
 8001fb0:	1a17      	subs	r7, r2, r0
 8001fb2:	42ba      	cmp	r2, r7
 8001fb4:	4192      	sbcs	r2, r2
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	4252      	negs	r2, r2
 8001fba:	464d      	mov	r5, r9
 8001fbc:	1a9c      	subs	r4, r3, r2
 8001fbe:	e620      	b.n	8001c02 <__aeabi_dsub+0xba>
 8001fc0:	0767      	lsls	r7, r4, #29
 8001fc2:	08c0      	lsrs	r0, r0, #3
 8001fc4:	4307      	orrs	r7, r0
 8001fc6:	08e5      	lsrs	r5, r4, #3
 8001fc8:	e6ba      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001fca:	001f      	movs	r7, r3
 8001fcc:	4659      	mov	r1, fp
 8001fce:	3f20      	subs	r7, #32
 8001fd0:	40f9      	lsrs	r1, r7
 8001fd2:	000f      	movs	r7, r1
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x49c>
 8001fd8:	2140      	movs	r1, #64	@ 0x40
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	4659      	mov	r1, fp
 8001fde:	4099      	lsls	r1, r3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	4193      	sbcs	r3, r2
 8001fea:	431f      	orrs	r7, r3
 8001fec:	e604      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001fee:	1aeb      	subs	r3, r5, r3
 8001ff0:	4d9b      	ldr	r5, [pc, #620]	@ (8002260 <__aeabi_dsub+0x718>)
 8001ff2:	4015      	ands	r5, r2
 8001ff4:	076f      	lsls	r7, r5, #29
 8001ff6:	08ed      	lsrs	r5, r5, #3
 8001ff8:	032c      	lsls	r4, r5, #12
 8001ffa:	055d      	lsls	r5, r3, #21
 8001ffc:	0b24      	lsrs	r4, r4, #12
 8001ffe:	0d6d      	lsrs	r5, r5, #21
 8002000:	e736      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002002:	4d95      	ldr	r5, [pc, #596]	@ (8002258 <__aeabi_dsub+0x710>)
 8002004:	42ab      	cmp	r3, r5
 8002006:	d100      	bne.n	800200a <__aeabi_dsub+0x4c2>
 8002008:	e0d6      	b.n	80021b8 <__aeabi_dsub+0x670>
 800200a:	1882      	adds	r2, r0, r2
 800200c:	0021      	movs	r1, r4
 800200e:	4282      	cmp	r2, r0
 8002010:	4180      	sbcs	r0, r0
 8002012:	4459      	add	r1, fp
 8002014:	4240      	negs	r0, r0
 8002016:	1808      	adds	r0, r1, r0
 8002018:	07c7      	lsls	r7, r0, #31
 800201a:	0852      	lsrs	r2, r2, #1
 800201c:	4317      	orrs	r7, r2
 800201e:	0844      	lsrs	r4, r0, #1
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x4de>
 8002024:	e185      	b.n	8002332 <__aeabi_dsub+0x7ea>
 8002026:	220f      	movs	r2, #15
 8002028:	001d      	movs	r5, r3
 800202a:	403a      	ands	r2, r7
 800202c:	2a04      	cmp	r2, #4
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x4ea>
 8002030:	e61a      	b.n	8001c68 <__aeabi_dsub+0x120>
 8002032:	08ff      	lsrs	r7, r7, #3
 8002034:	0764      	lsls	r4, r4, #29
 8002036:	4327      	orrs	r7, r4
 8002038:	0905      	lsrs	r5, r0, #4
 800203a:	e7dd      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800203c:	465b      	mov	r3, fp
 800203e:	08d2      	lsrs	r2, r2, #3
 8002040:	075f      	lsls	r7, r3, #29
 8002042:	4317      	orrs	r7, r2
 8002044:	08dd      	lsrs	r5, r3, #3
 8002046:	e67b      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002048:	2700      	movs	r7, #0
 800204a:	2400      	movs	r4, #0
 800204c:	e710      	b.n	8001e70 <__aeabi_dsub+0x328>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x50c>
 8002052:	e0d6      	b.n	8002202 <__aeabi_dsub+0x6ba>
 8002054:	2900      	cmp	r1, #0
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x512>
 8002058:	e12f      	b.n	80022ba <__aeabi_dsub+0x772>
 800205a:	2480      	movs	r4, #128	@ 0x80
 800205c:	2600      	movs	r6, #0
 800205e:	4d7e      	ldr	r5, [pc, #504]	@ (8002258 <__aeabi_dsub+0x710>)
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	e705      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002064:	4666      	mov	r6, ip
 8002066:	465c      	mov	r4, fp
 8002068:	08d0      	lsrs	r0, r2, #3
 800206a:	e717      	b.n	8001e9c <__aeabi_dsub+0x354>
 800206c:	465b      	mov	r3, fp
 800206e:	1a17      	subs	r7, r2, r0
 8002070:	42ba      	cmp	r2, r7
 8002072:	4192      	sbcs	r2, r2
 8002074:	1b1c      	subs	r4, r3, r4
 8002076:	2601      	movs	r6, #1
 8002078:	4663      	mov	r3, ip
 800207a:	4252      	negs	r2, r2
 800207c:	1aa4      	subs	r4, r4, r2
 800207e:	401e      	ands	r6, r3
 8002080:	e5c4      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8002082:	1883      	adds	r3, r0, r2
 8002084:	4283      	cmp	r3, r0
 8002086:	4180      	sbcs	r0, r0
 8002088:	445c      	add	r4, fp
 800208a:	4240      	negs	r0, r0
 800208c:	1825      	adds	r5, r4, r0
 800208e:	022a      	lsls	r2, r5, #8
 8002090:	d400      	bmi.n	8002094 <__aeabi_dsub+0x54c>
 8002092:	e0da      	b.n	800224a <__aeabi_dsub+0x702>
 8002094:	4a72      	ldr	r2, [pc, #456]	@ (8002260 <__aeabi_dsub+0x718>)
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	4015      	ands	r5, r2
 800209a:	07ea      	lsls	r2, r5, #31
 800209c:	431a      	orrs	r2, r3
 800209e:	0869      	lsrs	r1, r5, #1
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x55e>
 80020a4:	e14a      	b.n	800233c <__aeabi_dsub+0x7f4>
 80020a6:	230f      	movs	r3, #15
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x568>
 80020ae:	e0fc      	b.n	80022aa <__aeabi_dsub+0x762>
 80020b0:	1d17      	adds	r7, r2, #4
 80020b2:	4297      	cmp	r7, r2
 80020b4:	41a4      	sbcs	r4, r4
 80020b6:	4264      	negs	r4, r4
 80020b8:	2502      	movs	r5, #2
 80020ba:	1864      	adds	r4, r4, r1
 80020bc:	e6ec      	b.n	8001e98 <__aeabi_dsub+0x350>
 80020be:	4647      	mov	r7, r8
 80020c0:	001c      	movs	r4, r3
 80020c2:	431f      	orrs	r7, r3
 80020c4:	d000      	beq.n	80020c8 <__aeabi_dsub+0x580>
 80020c6:	e743      	b.n	8001f50 <__aeabi_dsub+0x408>
 80020c8:	2600      	movs	r6, #0
 80020ca:	2500      	movs	r5, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6cf      	b.n	8001e70 <__aeabi_dsub+0x328>
 80020d0:	08c0      	lsrs	r0, r0, #3
 80020d2:	0767      	lsls	r7, r4, #29
 80020d4:	4307      	orrs	r7, r0
 80020d6:	08e5      	lsrs	r5, r4, #3
 80020d8:	e632      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80020da:	1a87      	subs	r7, r0, r2
 80020dc:	465b      	mov	r3, fp
 80020de:	42b8      	cmp	r0, r7
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	1ae4      	subs	r4, r4, r3
 80020e4:	4240      	negs	r0, r0
 80020e6:	1a24      	subs	r4, r4, r0
 80020e8:	0223      	lsls	r3, r4, #8
 80020ea:	d428      	bmi.n	800213e <__aeabi_dsub+0x5f6>
 80020ec:	0763      	lsls	r3, r4, #29
 80020ee:	08ff      	lsrs	r7, r7, #3
 80020f0:	431f      	orrs	r7, r3
 80020f2:	08e5      	lsrs	r5, r4, #3
 80020f4:	2301      	movs	r3, #1
 80020f6:	e77f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x5b6>
 80020fc:	e673      	b.n	8001de6 <__aeabi_dsub+0x29e>
 80020fe:	464b      	mov	r3, r9
 8002100:	1b5f      	subs	r7, r3, r5
 8002102:	003b      	movs	r3, r7
 8002104:	2d00      	cmp	r5, #0
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x5c2>
 8002108:	e742      	b.n	8001f90 <__aeabi_dsub+0x448>
 800210a:	2f38      	cmp	r7, #56	@ 0x38
 800210c:	dd00      	ble.n	8002110 <__aeabi_dsub+0x5c8>
 800210e:	e0ec      	b.n	80022ea <__aeabi_dsub+0x7a2>
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	000e      	movs	r6, r1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431c      	orrs	r4, r3
 8002118:	2f1f      	cmp	r7, #31
 800211a:	dc25      	bgt.n	8002168 <__aeabi_dsub+0x620>
 800211c:	2520      	movs	r5, #32
 800211e:	0023      	movs	r3, r4
 8002120:	1bed      	subs	r5, r5, r7
 8002122:	0001      	movs	r1, r0
 8002124:	40a8      	lsls	r0, r5
 8002126:	40ab      	lsls	r3, r5
 8002128:	40f9      	lsrs	r1, r7
 800212a:	1e45      	subs	r5, r0, #1
 800212c:	41a8      	sbcs	r0, r5
 800212e:	430b      	orrs	r3, r1
 8002130:	40fc      	lsrs	r4, r7
 8002132:	4318      	orrs	r0, r3
 8002134:	465b      	mov	r3, fp
 8002136:	1b1b      	subs	r3, r3, r4
 8002138:	469b      	mov	fp, r3
 800213a:	e739      	b.n	8001fb0 <__aeabi_dsub+0x468>
 800213c:	4666      	mov	r6, ip
 800213e:	2501      	movs	r5, #1
 8002140:	e562      	b.n	8001c08 <__aeabi_dsub+0xc0>
 8002142:	001f      	movs	r7, r3
 8002144:	4659      	mov	r1, fp
 8002146:	3f20      	subs	r7, #32
 8002148:	40f9      	lsrs	r1, r7
 800214a:	468c      	mov	ip, r1
 800214c:	2b20      	cmp	r3, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x614>
 8002150:	2740      	movs	r7, #64	@ 0x40
 8002152:	4659      	mov	r1, fp
 8002154:	1afb      	subs	r3, r7, r3
 8002156:	4099      	lsls	r1, r3
 8002158:	430a      	orrs	r2, r1
 800215a:	4692      	mov	sl, r2
 800215c:	4657      	mov	r7, sl
 800215e:	1e7b      	subs	r3, r7, #1
 8002160:	419f      	sbcs	r7, r3
 8002162:	4663      	mov	r3, ip
 8002164:	431f      	orrs	r7, r3
 8002166:	e5c1      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8002168:	003b      	movs	r3, r7
 800216a:	0025      	movs	r5, r4
 800216c:	3b20      	subs	r3, #32
 800216e:	40dd      	lsrs	r5, r3
 8002170:	2f20      	cmp	r7, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x636>
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	1bdb      	subs	r3, r3, r7
 8002178:	409c      	lsls	r4, r3
 800217a:	4320      	orrs	r0, r4
 800217c:	4680      	mov	r8, r0
 800217e:	4640      	mov	r0, r8
 8002180:	1e43      	subs	r3, r0, #1
 8002182:	4198      	sbcs	r0, r3
 8002184:	4328      	orrs	r0, r5
 8002186:	e713      	b.n	8001fb0 <__aeabi_dsub+0x468>
 8002188:	2900      	cmp	r1, #0
 800218a:	d09d      	beq.n	80020c8 <__aeabi_dsub+0x580>
 800218c:	2601      	movs	r6, #1
 800218e:	4663      	mov	r3, ip
 8002190:	465c      	mov	r4, fp
 8002192:	4690      	mov	r8, r2
 8002194:	401e      	ands	r6, r3
 8002196:	e6db      	b.n	8001f50 <__aeabi_dsub+0x408>
 8002198:	1a17      	subs	r7, r2, r0
 800219a:	465b      	mov	r3, fp
 800219c:	42ba      	cmp	r2, r7
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1b1c      	subs	r4, r3, r4
 80021a2:	4252      	negs	r2, r2
 80021a4:	1aa4      	subs	r4, r4, r2
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	d4c8      	bmi.n	800213c <__aeabi_dsub+0x5f4>
 80021aa:	0763      	lsls	r3, r4, #29
 80021ac:	08ff      	lsrs	r7, r7, #3
 80021ae:	431f      	orrs	r7, r3
 80021b0:	4666      	mov	r6, ip
 80021b2:	2301      	movs	r3, #1
 80021b4:	08e5      	lsrs	r5, r4, #3
 80021b6:	e71f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80021b8:	001d      	movs	r5, r3
 80021ba:	2400      	movs	r4, #0
 80021bc:	2700      	movs	r7, #0
 80021be:	e657      	b.n	8001e70 <__aeabi_dsub+0x328>
 80021c0:	465c      	mov	r4, fp
 80021c2:	08d0      	lsrs	r0, r2, #3
 80021c4:	e66a      	b.n	8001e9c <__aeabi_dsub+0x354>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x684>
 80021ca:	e737      	b.n	800203c <__aeabi_dsub+0x4f4>
 80021cc:	4653      	mov	r3, sl
 80021ce:	08c0      	lsrs	r0, r0, #3
 80021d0:	0767      	lsls	r7, r4, #29
 80021d2:	4307      	orrs	r7, r0
 80021d4:	08e5      	lsrs	r5, r4, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x694>
 80021da:	e5b1      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	421d      	tst	r5, r3
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x6ae>
 80021e4:	4659      	mov	r1, fp
 80021e6:	08c8      	lsrs	r0, r1, #3
 80021e8:	4218      	tst	r0, r3
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x6ae>
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	0749      	lsls	r1, r1, #29
 80021f0:	430a      	orrs	r2, r1
 80021f2:	0017      	movs	r7, r2
 80021f4:	0005      	movs	r5, r0
 80021f6:	0f7b      	lsrs	r3, r7, #29
 80021f8:	00ff      	lsls	r7, r7, #3
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	075b      	lsls	r3, r3, #29
 80021fe:	431f      	orrs	r7, r3
 8002200:	e59e      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002202:	08c0      	lsrs	r0, r0, #3
 8002204:	0763      	lsls	r3, r4, #29
 8002206:	4318      	orrs	r0, r3
 8002208:	08e5      	lsrs	r5, r4, #3
 800220a:	2900      	cmp	r1, #0
 800220c:	d053      	beq.n	80022b6 <__aeabi_dsub+0x76e>
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	421d      	tst	r5, r3
 8002214:	d00a      	beq.n	800222c <__aeabi_dsub+0x6e4>
 8002216:	4659      	mov	r1, fp
 8002218:	08cc      	lsrs	r4, r1, #3
 800221a:	421c      	tst	r4, r3
 800221c:	d106      	bne.n	800222c <__aeabi_dsub+0x6e4>
 800221e:	2601      	movs	r6, #1
 8002220:	4663      	mov	r3, ip
 8002222:	0025      	movs	r5, r4
 8002224:	08d0      	lsrs	r0, r2, #3
 8002226:	0749      	lsls	r1, r1, #29
 8002228:	4308      	orrs	r0, r1
 800222a:	401e      	ands	r6, r3
 800222c:	0f47      	lsrs	r7, r0, #29
 800222e:	00c0      	lsls	r0, r0, #3
 8002230:	08c0      	lsrs	r0, r0, #3
 8002232:	077f      	lsls	r7, r7, #29
 8002234:	4307      	orrs	r7, r0
 8002236:	e583      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002238:	1883      	adds	r3, r0, r2
 800223a:	4293      	cmp	r3, r2
 800223c:	4192      	sbcs	r2, r2
 800223e:	445c      	add	r4, fp
 8002240:	4252      	negs	r2, r2
 8002242:	18a5      	adds	r5, r4, r2
 8002244:	022a      	lsls	r2, r5, #8
 8002246:	d500      	bpl.n	800224a <__aeabi_dsub+0x702>
 8002248:	e724      	b.n	8002094 <__aeabi_dsub+0x54c>
 800224a:	076f      	lsls	r7, r5, #29
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	431f      	orrs	r7, r3
 8002250:	08ed      	lsrs	r5, r5, #3
 8002252:	2301      	movs	r3, #1
 8002254:	e6d0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	000007fe 	.word	0x000007fe
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	465b      	mov	r3, fp
 8002266:	08d2      	lsrs	r2, r2, #3
 8002268:	075f      	lsls	r7, r3, #29
 800226a:	4666      	mov	r6, ip
 800226c:	4317      	orrs	r7, r2
 800226e:	08dd      	lsrs	r5, r3, #3
 8002270:	e566      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002272:	0025      	movs	r5, r4
 8002274:	3b20      	subs	r3, #32
 8002276:	40dd      	lsrs	r5, r3
 8002278:	4663      	mov	r3, ip
 800227a:	2b20      	cmp	r3, #32
 800227c:	d005      	beq.n	800228a <__aeabi_dsub+0x742>
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	4661      	mov	r1, ip
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	409c      	lsls	r4, r3
 8002286:	4320      	orrs	r0, r4
 8002288:	4680      	mov	r8, r0
 800228a:	4647      	mov	r7, r8
 800228c:	1e7b      	subs	r3, r7, #1
 800228e:	419f      	sbcs	r7, r3
 8002290:	432f      	orrs	r7, r5
 8002292:	e5a0      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002294:	2120      	movs	r1, #32
 8002296:	2700      	movs	r7, #0
 8002298:	1a09      	subs	r1, r1, r0
 800229a:	e4d2      	b.n	8001c42 <__aeabi_dsub+0xfa>
 800229c:	2f00      	cmp	r7, #0
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x75a>
 80022a0:	e713      	b.n	80020ca <__aeabi_dsub+0x582>
 80022a2:	465c      	mov	r4, fp
 80022a4:	0017      	movs	r7, r2
 80022a6:	2500      	movs	r5, #0
 80022a8:	e5f6      	b.n	8001e98 <__aeabi_dsub+0x350>
 80022aa:	08d7      	lsrs	r7, r2, #3
 80022ac:	0749      	lsls	r1, r1, #29
 80022ae:	2302      	movs	r3, #2
 80022b0:	430f      	orrs	r7, r1
 80022b2:	092d      	lsrs	r5, r5, #4
 80022b4:	e6a0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80022b6:	0007      	movs	r7, r0
 80022b8:	e542      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022ba:	465b      	mov	r3, fp
 80022bc:	2601      	movs	r6, #1
 80022be:	075f      	lsls	r7, r3, #29
 80022c0:	08dd      	lsrs	r5, r3, #3
 80022c2:	4663      	mov	r3, ip
 80022c4:	08d2      	lsrs	r2, r2, #3
 80022c6:	4317      	orrs	r7, r2
 80022c8:	401e      	ands	r6, r3
 80022ca:	e539      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022cc:	465b      	mov	r3, fp
 80022ce:	08d2      	lsrs	r2, r2, #3
 80022d0:	075f      	lsls	r7, r3, #29
 80022d2:	4317      	orrs	r7, r2
 80022d4:	08dd      	lsrs	r5, r3, #3
 80022d6:	e533      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002354 <__aeabi_dsub+0x80c>)
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	4022      	ands	r2, r4
 80022de:	0757      	lsls	r7, r2, #29
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	2501      	movs	r5, #1
 80022e4:	431f      	orrs	r7, r3
 80022e6:	0b14      	lsrs	r4, r2, #12
 80022e8:	e5c2      	b.n	8001e70 <__aeabi_dsub+0x328>
 80022ea:	000e      	movs	r6, r1
 80022ec:	2001      	movs	r0, #1
 80022ee:	e65f      	b.n	8001fb0 <__aeabi_dsub+0x468>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <__aeabi_dsub+0x7c8>
 80022f4:	464b      	mov	r3, r9
 80022f6:	1b5b      	subs	r3, r3, r5
 80022f8:	469c      	mov	ip, r3
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x7b8>
 80022fe:	e548      	b.n	8001d92 <__aeabi_dsub+0x24a>
 8002300:	2701      	movs	r7, #1
 8002302:	2b38      	cmp	r3, #56	@ 0x38
 8002304:	dd00      	ble.n	8002308 <__aeabi_dsub+0x7c0>
 8002306:	e566      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431c      	orrs	r4, r3
 800230e:	e550      	b.n	8001db2 <__aeabi_dsub+0x26a>
 8002310:	1c6b      	adds	r3, r5, #1
 8002312:	4d11      	ldr	r5, [pc, #68]	@ (8002358 <__aeabi_dsub+0x810>)
 8002314:	422b      	tst	r3, r5
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x7d2>
 8002318:	e673      	b.n	8002002 <__aeabi_dsub+0x4ba>
 800231a:	4659      	mov	r1, fp
 800231c:	0023      	movs	r3, r4
 800231e:	4311      	orrs	r1, r2
 8002320:	468a      	mov	sl, r1
 8002322:	4303      	orrs	r3, r0
 8002324:	e600      	b.n	8001f28 <__aeabi_dsub+0x3e0>
 8002326:	0767      	lsls	r7, r4, #29
 8002328:	08c0      	lsrs	r0, r0, #3
 800232a:	2300      	movs	r3, #0
 800232c:	4307      	orrs	r7, r0
 800232e:	08e5      	lsrs	r5, r4, #3
 8002330:	e662      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002332:	0764      	lsls	r4, r4, #29
 8002334:	08ff      	lsrs	r7, r7, #3
 8002336:	4327      	orrs	r7, r4
 8002338:	0905      	lsrs	r5, r0, #4
 800233a:	e65d      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800233c:	08d2      	lsrs	r2, r2, #3
 800233e:	0749      	lsls	r1, r1, #29
 8002340:	4311      	orrs	r1, r2
 8002342:	000f      	movs	r7, r1
 8002344:	2302      	movs	r3, #2
 8002346:	092d      	lsrs	r5, r5, #4
 8002348:	e656      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800234a:	0007      	movs	r7, r0
 800234c:	e5a4      	b.n	8001e98 <__aeabi_dsub+0x350>
 800234e:	0038      	movs	r0, r7
 8002350:	e48f      	b.n	8001c72 <__aeabi_dsub+0x12a>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	ff7fffff 	.word	0xff7fffff
 8002358:	000007fe 	.word	0x000007fe

0800235c <__aeabi_dcmpun>:
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	46c6      	mov	lr, r8
 8002360:	031e      	lsls	r6, r3, #12
 8002362:	0b36      	lsrs	r6, r6, #12
 8002364:	46b0      	mov	r8, r6
 8002366:	4e0d      	ldr	r6, [pc, #52]	@ (800239c <__aeabi_dcmpun+0x40>)
 8002368:	030c      	lsls	r4, r1, #12
 800236a:	004d      	lsls	r5, r1, #1
 800236c:	005f      	lsls	r7, r3, #1
 800236e:	b500      	push	{lr}
 8002370:	0b24      	lsrs	r4, r4, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	0d7f      	lsrs	r7, r7, #21
 8002376:	42b5      	cmp	r5, r6
 8002378:	d00b      	beq.n	8002392 <__aeabi_dcmpun+0x36>
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <__aeabi_dcmpun+0x40>)
 800237c:	2000      	movs	r0, #0
 800237e:	428f      	cmp	r7, r1
 8002380:	d104      	bne.n	800238c <__aeabi_dcmpun+0x30>
 8002382:	4646      	mov	r6, r8
 8002384:	4316      	orrs	r6, r2
 8002386:	0030      	movs	r0, r6
 8002388:	1e43      	subs	r3, r0, #1
 800238a:	4198      	sbcs	r0, r3
 800238c:	bc80      	pop	{r7}
 800238e:	46b8      	mov	r8, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002392:	4304      	orrs	r4, r0
 8002394:	2001      	movs	r0, #1
 8002396:	2c00      	cmp	r4, #0
 8002398:	d1f8      	bne.n	800238c <__aeabi_dcmpun+0x30>
 800239a:	e7ee      	b.n	800237a <__aeabi_dcmpun+0x1e>
 800239c:	000007ff 	.word	0x000007ff

080023a0 <__aeabi_d2iz>:
 80023a0:	000b      	movs	r3, r1
 80023a2:	0002      	movs	r2, r0
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d16      	ldr	r5, [pc, #88]	@ (8002400 <__aeabi_d2iz+0x60>)
 80023a8:	030c      	lsls	r4, r1, #12
 80023aa:	b082      	sub	sp, #8
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0fde      	lsrs	r6, r3, #31
 80023ba:	42a9      	cmp	r1, r5
 80023bc:	dd04      	ble.n	80023c8 <__aeabi_d2iz+0x28>
 80023be:	4811      	ldr	r0, [pc, #68]	@ (8002404 <__aeabi_d2iz+0x64>)
 80023c0:	4281      	cmp	r1, r0
 80023c2:	dd03      	ble.n	80023cc <__aeabi_d2iz+0x2c>
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <__aeabi_d2iz+0x68>)
 80023c6:	18f0      	adds	r0, r6, r3
 80023c8:	b002      	add	sp, #8
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	2080      	movs	r0, #128	@ 0x80
 80023ce:	0340      	lsls	r0, r0, #13
 80023d0:	4320      	orrs	r0, r4
 80023d2:	4c0e      	ldr	r4, [pc, #56]	@ (800240c <__aeabi_d2iz+0x6c>)
 80023d4:	1a64      	subs	r4, r4, r1
 80023d6:	2c1f      	cmp	r4, #31
 80023d8:	dd08      	ble.n	80023ec <__aeabi_d2iz+0x4c>
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <__aeabi_d2iz+0x70>)
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	40d8      	lsrs	r0, r3
 80023e0:	0003      	movs	r3, r0
 80023e2:	4258      	negs	r0, r3
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	d1ef      	bne.n	80023c8 <__aeabi_d2iz+0x28>
 80023e8:	0018      	movs	r0, r3
 80023ea:	e7ed      	b.n	80023c8 <__aeabi_d2iz+0x28>
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <__aeabi_d2iz+0x74>)
 80023ee:	9a00      	ldr	r2, [sp, #0]
 80023f0:	469c      	mov	ip, r3
 80023f2:	0003      	movs	r3, r0
 80023f4:	4461      	add	r1, ip
 80023f6:	408b      	lsls	r3, r1
 80023f8:	40e2      	lsrs	r2, r4
 80023fa:	4313      	orrs	r3, r2
 80023fc:	e7f1      	b.n	80023e2 <__aeabi_d2iz+0x42>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	000003fe 	.word	0x000003fe
 8002404:	0000041d 	.word	0x0000041d
 8002408:	7fffffff 	.word	0x7fffffff
 800240c:	00000433 	.word	0x00000433
 8002410:	00000413 	.word	0x00000413
 8002414:	fffffbed 	.word	0xfffffbed

08002418 <__aeabi_i2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2800      	cmp	r0, #0
 800241c:	d016      	beq.n	800244c <__aeabi_i2d+0x34>
 800241e:	17c3      	asrs	r3, r0, #31
 8002420:	18c5      	adds	r5, r0, r3
 8002422:	405d      	eors	r5, r3
 8002424:	0fc4      	lsrs	r4, r0, #31
 8002426:	0028      	movs	r0, r5
 8002428:	f000 f848 	bl	80024bc <__clzsi2>
 800242c:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <__aeabi_i2d+0x58>)
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	280a      	cmp	r0, #10
 8002436:	dc14      	bgt.n	8002462 <__aeabi_i2d+0x4a>
 8002438:	0002      	movs	r2, r0
 800243a:	002e      	movs	r6, r5
 800243c:	3215      	adds	r2, #21
 800243e:	4096      	lsls	r6, r2
 8002440:	220b      	movs	r2, #11
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d5      	lsrs	r5, r2
 8002446:	032d      	lsls	r5, r5, #12
 8002448:	0b2d      	lsrs	r5, r5, #12
 800244a:	e003      	b.n	8002454 <__aeabi_i2d+0x3c>
 800244c:	2400      	movs	r4, #0
 800244e:	2300      	movs	r3, #0
 8002450:	2500      	movs	r5, #0
 8002452:	2600      	movs	r6, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	432b      	orrs	r3, r5
 8002458:	07e4      	lsls	r4, r4, #31
 800245a:	4323      	orrs	r3, r4
 800245c:	0030      	movs	r0, r6
 800245e:	0019      	movs	r1, r3
 8002460:	bd70      	pop	{r4, r5, r6, pc}
 8002462:	380b      	subs	r0, #11
 8002464:	4085      	lsls	r5, r0
 8002466:	032d      	lsls	r5, r5, #12
 8002468:	2600      	movs	r6, #0
 800246a:	0b2d      	lsrs	r5, r5, #12
 800246c:	e7f2      	b.n	8002454 <__aeabi_i2d+0x3c>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	0000041e 	.word	0x0000041e

08002474 <__aeabi_ui2d>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e04      	subs	r4, r0, #0
 8002478:	d010      	beq.n	800249c <__aeabi_ui2d+0x28>
 800247a:	f000 f81f 	bl	80024bc <__clzsi2>
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <__aeabi_ui2d+0x44>)
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	280a      	cmp	r0, #10
 8002488:	dc0f      	bgt.n	80024aa <__aeabi_ui2d+0x36>
 800248a:	220b      	movs	r2, #11
 800248c:	0021      	movs	r1, r4
 800248e:	1a12      	subs	r2, r2, r0
 8002490:	40d1      	lsrs	r1, r2
 8002492:	3015      	adds	r0, #21
 8002494:	030a      	lsls	r2, r1, #12
 8002496:	4084      	lsls	r4, r0
 8002498:	0b12      	lsrs	r2, r2, #12
 800249a:	e001      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	4313      	orrs	r3, r2
 80024a4:	0020      	movs	r0, r4
 80024a6:	0019      	movs	r1, r3
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	0022      	movs	r2, r4
 80024ac:	380b      	subs	r0, #11
 80024ae:	4082      	lsls	r2, r0
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	2400      	movs	r4, #0
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	e7f3      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	@ (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <Oled_init>:
#include <stdio.h>
#include "OLED_WS0010.h"

Oled_HandleTypeDef Oled_init(GPIO_TypeDef* rs_port, uint16_t rs_pin,
		GPIO_TypeDef* en_port, uint16_t en_pin, GPIO_TypeDef* data_port[],
		uint16_t data_pin[]) {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
	Oled_HandleTypeDef oled;
	oled.rs_pin = rs_pin;
 8002508:	2110      	movs	r1, #16
 800250a:	187b      	adds	r3, r7, r1
 800250c:	1dba      	adds	r2, r7, #6
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	809a      	strh	r2, [r3, #4]
	oled.rs_port = rs_port;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
	oled.enable_pin = en_pin;
 8002518:	187a      	adds	r2, r7, r1
 800251a:	2338      	movs	r3, #56	@ 0x38
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	8193      	strh	r3, [r2, #12]
	oled.enable_port = en_port;
 8002522:	000c      	movs	r4, r1
 8002524:	193b      	adds	r3, r7, r4
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]
	oled.data_pin = data_pin;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800252e:	615a      	str	r2, [r3, #20]
	oled.data_port = data_port;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	611a      	str	r2, [r3, #16]

	Oled_writeCommand(&oled, 0x33);
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2133      	movs	r1, #51	@ 0x33
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f975 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x32);
 8002540:	193b      	adds	r3, r7, r4
 8002542:	2132      	movs	r1, #50	@ 0x32
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f970 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x28);
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2128      	movs	r1, #40	@ 0x28
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f96b 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002554:	193b      	adds	r3, r7, r4
 8002556:	2101      	movs	r1, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f966 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x08 | 0x04);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	210c      	movs	r1, #12
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f961 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x02);
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2106      	movs	r1, #6
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f95c 	bl	800282a <Oled_writeCommand>

	//WS0010
	Oled_writeCommand(&oled, 0x08);
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2108      	movs	r1, #8
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f957 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x17);
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2117      	movs	r1, #23
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f952 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2101      	movs	r1, #1
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f94d 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x08);
 8002590:	193b      	adds	r3, r7, r4
 8002592:	210c      	movs	r1, #12
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f948 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, OLED_CLEAR_DISPLAY);
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f943 	bl	800282a <Oled_writeCommand>

	return oled;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025aa:	c313      	stmia	r3!, {r0, r1, r4}
 80025ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ae:	c313      	stmia	r3!, {r0, r1, r4}
}
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00b      	add	sp, #44	@ 0x2c
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <refresh_displayed_info>:
void refresh_displayed_info( Oled_HandleTypeDef *oled, double set_temp_inside, double current_temp_inside){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b08d      	sub	sp, #52	@ 0x34
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	603a      	str	r2, [r7, #0]
 80025c2:	607b      	str	r3, [r7, #4]
	char set_temp_inside_string [8] = {0};
 80025c4:	2420      	movs	r4, #32
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00c fc92 	bl	800eef8 <memset>
	char current_temp_inside_string [8] = {0};
 80025d4:	2518      	movs	r5, #24
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	0018      	movs	r0, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f00c fc8a 	bl	800eef8 <memset>
	char celsius_unit[] = {223, 'C', '\0'}; // 223 stands for °
 80025e4:	2614      	movs	r6, #20
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <refresh_displayed_info+0xe4>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	8019      	strh	r1, [r3, #0]
 80025ee:	7892      	ldrb	r2, [r2, #2]
 80025f0:	709a      	strb	r2, [r3, #2]

	Oled_cursor(oled, 0, 0);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f869 	bl	80026d0 <Oled_cursor>
	memset(set_temp_inside_string, (int)' ', 8);
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	2208      	movs	r2, #8
 8002602:	2120      	movs	r1, #32
 8002604:	0018      	movs	r0, r3
 8002606:	f00c fc77 	bl	800eef8 <memset>
	snprintf(set_temp_inside_string,8,"%.1lf",set_temp_inside);
 800260a:	4925      	ldr	r1, [pc, #148]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800260c:	1938      	adds	r0, r7, r4
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	000a      	movs	r2, r1
 8002618:	2108      	movs	r1, #8
 800261a:	f00c fbeb 	bl	800edf4 <sniprintf>
	Oled_string(oled, set_temp_inside_string);
 800261e:	193a      	adds	r2, r7, r4
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f886 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 0,6);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2206      	movs	r2, #6
 800262e:	2100      	movs	r1, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f84d 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002636:	19ba      	adds	r2, r7, r6
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f87a 	bl	8002736 <Oled_string>

	Oled_cursor(oled, 1, 0);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f841 	bl	80026d0 <Oled_cursor>
	memset(current_temp_inside_string, (int)' ', 8);
 800264e:	197b      	adds	r3, r7, r5
 8002650:	2208      	movs	r2, #8
 8002652:	2120      	movs	r1, #32
 8002654:	0018      	movs	r0, r3
 8002656:	f00c fc4f 	bl	800eef8 <memset>
	snprintf(current_temp_inside_string,8,"%.1lf",current_temp_inside);
 800265a:	4911      	ldr	r1, [pc, #68]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800265c:	1978      	adds	r0, r7, r5
 800265e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	9200      	str	r2, [sp, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	000a      	movs	r2, r1
 8002668:	2108      	movs	r1, #8
 800266a:	f00c fbc3 	bl	800edf4 <sniprintf>
	Oled_string(oled, current_temp_inside_string);
 800266e:	197a      	adds	r2, r7, r5
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f85e 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 1,6);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2206      	movs	r2, #6
 800267e:	2101      	movs	r1, #1
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f825 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002686:	19ba      	adds	r2, r7, r6
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f852 	bl	8002736 <Oled_string>
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b00b      	add	sp, #44	@ 0x2c
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	08011b08 	.word	0x08011b08
 80026a0:	08011b00 	.word	0x08011b00

080026a4 <Oled_resupply_power>:

void Oled_resupply_power(Oled_HandleTypeDef *oled){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	uint8_t command = OLED_PWRDWN;
 80026ac:	210f      	movs	r1, #15
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2213      	movs	r2, #19
 80026b2:	701a      	strb	r2, [r3, #0]
	Oled_writeCommand(oled,command);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f8b4 	bl	800282a <Oled_writeCommand>
	HAL_Delay(100);
 80026c2:	2064      	movs	r0, #100	@ 0x64
 80026c4:	f001 fa4e 	bl	8003b64 <HAL_Delay>
//	command = OLED_PWRUP;
//	Oled_writeCommand(oled,command);

}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <Oled_cursor>:
	char buf[17];
	sprintf(buf, "%d", value);
	Oled_string(oled, buf);
}

void Oled_cursor(Oled_HandleTypeDef *oled, uint8_t row, uint8_t col) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	1cfb      	adds	r3, r7, #3
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c0a      	adds	r2, r1, #0
 80026e6:	701a      	strb	r2, [r3, #0]
	uint8_t ROW[] = { 0x00, 0x40, 0x10, 0x50 };
 80026e8:	210c      	movs	r1, #12
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <Oled_cursor+0x48>)
 80026ee:	601a      	str	r2, [r3, #0]
	Oled_writeCommand(oled, 0x80 + ROW[row] + col);
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	5cd2      	ldrb	r2, [r2, r3]
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b80      	subs	r3, #128	@ 0x80
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f88e 	bl	800282a <Oled_writeCommand>
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	50104000 	.word	0x50104000

0800271c <Oled_clear>:

void Oled_blink(Oled_HandleTypeDef *oled) {
	Oled_writeCommand(oled, 0x08 | 0x04 | 0x02 | 0x01);
}

void Oled_clear(Oled_HandleTypeDef *oled) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	Oled_writeCommand(oled, OLED_CLEAR_DISPLAY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2101      	movs	r1, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f87e 	bl	800282a <Oled_writeCommand>
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <Oled_string>:
	if (0 <= y && y <= 1) {
		Oled_writeCommand(oled, 0x80 | y);
	}
}

void Oled_string(Oled_HandleTypeDef *oled, char * string) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	char temp;
	while ((temp = *string++)) {
 8002740:	e007      	b.n	8002752 <Oled_string+0x1c>
		Oled_writeData(oled, temp);
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f892 	bl	8002876 <Oled_writeData>
	while ((temp = *string++)) {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	603a      	str	r2, [r7, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	187a      	adds	r2, r7, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	7013      	strb	r3, [r2, #0]
 8002760:	187b      	adds	r3, r7, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ec      	bne.n	8002742 <Oled_string+0xc>
	}
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <Oled_write>:

void Oled_write(Oled_HandleTypeDef *oled, uint8_t data) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	000a      	movs	r2, r1
 800277c:	1cfb      	adds	r3, r7, #3
 800277e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(oled->data_port[0], oled->data_pin[0], data & (1 << 0));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	8819      	ldrh	r1, [r3, #0]
 800278c:	1cfb      	adds	r3, r7, #3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	f002 fa71 	bl	8004c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[1], oled->data_pin[1], data & (1 << 1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	3304      	adds	r3, #4
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	3302      	adds	r3, #2
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	1cfb      	adds	r3, r7, #3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	001a      	movs	r2, r3
 80027b8:	f002 fa61 	bl	8004c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[2], oled->data_pin[2], data & (1 << 2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	3308      	adds	r3, #8
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	3304      	adds	r3, #4
 80027ca:	8819      	ldrh	r1, [r3, #0]
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	f002 fa51 	bl	8004c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[3], oled->data_pin[3], data & (1 << 3));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	3306      	adds	r3, #6
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	1cfb      	adds	r3, r7, #3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	f002 fa41 	bl	8004c7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	899b      	ldrh	r3, [r3, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	0019      	movs	r1, r3
 8002808:	f002 fa39 	bl	8004c7e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f001 f9a9 	bl	8003b64 <HAL_Delay>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	899b      	ldrh	r3, [r3, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	0019      	movs	r1, r3
 800281e:	f002 fa2e 	bl	8004c7e <HAL_GPIO_WritePin>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b002      	add	sp, #8
 8002828:	bd80      	pop	{r7, pc}

0800282a <Oled_writeCommand>:

void Oled_writeCommand(Oled_HandleTypeDef *oled, uint8_t command) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	000a      	movs	r2, r1
 8002834:	1cfb      	adds	r3, r7, #3
 8002836:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f002 fa1b 	bl	8004c7e <HAL_GPIO_WritePin>
	Oled_write(oled, (command >> 4));
 8002848:	1cfb      	adds	r3, r7, #3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff8c 	bl	8002772 <Oled_write>
	Oled_write(oled, command & 0x0F);
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ff82 	bl	8002772 <Oled_write>

}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <Oled_writeData>:

void Oled_writeData(Oled_HandleTypeDef *oled, uint8_t data) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	000a      	movs	r2, r1
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	0019      	movs	r1, r3
 8002890:	f002 f9f5 	bl	8004c7e <HAL_GPIO_WritePin>
	Oled_write(oled, data >> 4);
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff66 	bl	8002772 <Oled_write>
	Oled_write(oled, data & 0x0F);
 80028a6:	1cfb      	adds	r3, r7, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220f      	movs	r2, #15
 80028ac:	4013      	ands	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff5c 	bl	8002772 <Oled_write>

}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b097      	sub	sp, #92	@ 0x5c
 80028c8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ca:	f001 f8c5 	bl	8003a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ce:	f000 f8d3 	bl	8002a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028d2:	f000 faa3 	bl	8002e1c <MX_GPIO_Init>
  MX_USB_Device_Init();
 80028d6:	f00a f973 	bl	800cbc0 <MX_USB_Device_Init>
  MX_I2C2_Init();
 80028da:	f000 f991 	bl	8002c00 <MX_I2C2_Init>
  MX_ADC1_Init();
 80028de:	f000 f923 	bl	8002b28 <MX_ADC1_Init>
  MX_TIM17_Init();
 80028e2:	f000 fa71 	bl	8002dc8 <MX_TIM17_Init>
  MX_SPI2_Init();
 80028e6:	f000 f9cb 	bl	8002c80 <MX_SPI2_Init>
  MX_TIM16_Init();
 80028ea:	f000 fa43 	bl	8002d74 <MX_TIM16_Init>
  MX_TIM7_Init();
 80028ee:	f000 fa05 	bl	8002cfc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50); // Stabilize voltage for OLED
 80028f2:	2032      	movs	r0, #50	@ 0x32
 80028f4:	f001 f936 	bl	8003b64 <HAL_Delay>
  GPIO_TypeDef *data_ports[] = {OLED_D04_GPIO_Port, OLED_D05_GPIO_Port, OLED_D06_GPIO_Port, OLED_D07_GPIO_Port};
 80028f8:	2530      	movs	r5, #48	@ 0x30
 80028fa:	197b      	adds	r3, r7, r5
 80028fc:	4a53      	ldr	r2, [pc, #332]	@ (8002a4c <main+0x188>)
 80028fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002900:	c313      	stmia	r3!, {r0, r1, r4}
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	601a      	str	r2, [r3, #0]
  uint16_t data_pins[] = {OLED_D04_Pin, OLED_D05_Pin, OLED_D06_Pin, OLED_D07_Pin};
 8002906:	2428      	movs	r4, #40	@ 0x28
 8002908:	193b      	adds	r3, r7, r4
 800290a:	4a51      	ldr	r2, [pc, #324]	@ (8002a50 <main+0x18c>)
 800290c:	ca03      	ldmia	r2!, {r0, r1}
 800290e:	c303      	stmia	r3!, {r0, r1}
  Oled_HandleTypeDef oled = Oled_init(OLED_RS_GPIO_Port, OLED_RS_Pin, OLED_EN_GPIO_Port, OLED_EN_Pin, data_ports, data_pins);
 8002910:	2610      	movs	r6, #16
 8002912:	19b8      	adds	r0, r7, r6
 8002914:	4a4f      	ldr	r2, [pc, #316]	@ (8002a54 <main+0x190>)
 8002916:	494f      	ldr	r1, [pc, #316]	@ (8002a54 <main+0x190>)
 8002918:	193b      	adds	r3, r7, r4
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	197b      	adds	r3, r7, r5
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	2310      	movs	r3, #16
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	0013      	movs	r3, r2
 8002926:	2220      	movs	r2, #32
 8002928:	f7ff fde6 	bl	80024f8 <Oled_init>
  Oled_resupply_power(&oled);
 800292c:	19bb      	adds	r3, r7, r6
 800292e:	0018      	movs	r0, r3
 8002930:	f7ff feb8 	bl	80026a4 <Oled_resupply_power>


  double current_temp_inside = 0;
 8002934:	2200      	movs	r2, #0
 8002936:	2300      	movs	r3, #0
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	60fb      	str	r3, [r7, #12]
  double current_temp_outside = 0;
 800293c:	2200      	movs	r2, #0
 800293e:	2300      	movs	r3, #0
 8002940:	603a      	str	r2, [r7, #0]
 8002942:	607b      	str	r3, [r7, #4]
  // Check if Thermometers are connected
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002944:	e01d      	b.n	8002982 <main+0xbe>
	  Oled_cursor(&oled, 0, 0);
 8002946:	2410      	movs	r4, #16
 8002948:	193b      	adds	r3, r7, r4
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff febe 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 8002954:	4a40      	ldr	r2, [pc, #256]	@ (8002a58 <main+0x194>)
 8002956:	193b      	adds	r3, r7, r4
 8002958:	0011      	movs	r1, r2
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff feeb 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2200      	movs	r2, #0
 8002964:	2101      	movs	r1, #1
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff feb2 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Thermo");
 800296c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a5c <main+0x198>)
 800296e:	193b      	adds	r3, r7, r4
 8002970:	0011      	movs	r1, r2
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff fedf 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002978:	23fa      	movs	r3, #250	@ 0xfa
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	0018      	movs	r0, r3
 800297e:	f001 f8f1 	bl	8003b64 <HAL_Delay>
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002982:	003a      	movs	r2, r7
 8002984:	4b36      	ldr	r3, [pc, #216]	@ (8002a60 <main+0x19c>)
 8002986:	2190      	movs	r1, #144	@ 0x90
 8002988:	0018      	movs	r0, r3
 800298a:	f000 ff37 	bl	80037fc <read_temp>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d1d9      	bne.n	8002946 <main+0x82>
 8002992:	2308      	movs	r3, #8
 8002994:	18fa      	adds	r2, r7, r3
 8002996:	4b32      	ldr	r3, [pc, #200]	@ (8002a60 <main+0x19c>)
 8002998:	2192      	movs	r1, #146	@ 0x92
 800299a:	0018      	movs	r0, r3
 800299c:	f000 ff2e 	bl	80037fc <read_temp>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d1d0      	bne.n	8002946 <main+0x82>
  }

  Oled_clear(&oled);
 80029a4:	2310      	movs	r3, #16
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff feb7 	bl	800271c <Oled_clear>
//	  HAL_Delay(500);
//  }

  //Check if current is flowing through the Peltier

  while(read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0){}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	2308      	movs	r3, #8
 80029b2:	18fa      	adds	r2, r7, r3
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <main+0x19c>)
 80029b6:	2192      	movs	r1, #146	@ 0x92
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 ff1f 	bl	80037fc <read_temp>
 80029be:	1e03      	subs	r3, r0, #0
 80029c0:	d1f6      	bne.n	80029b0 <main+0xec>
  set_temp_inside = current_temp_inside;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4927      	ldr	r1, [pc, #156]	@ (8002a64 <main+0x1a0>)
 80029c8:	600a      	str	r2, [r1, #0]
 80029ca:	604b      	str	r3, [r1, #4]
  double pid_output = 0;
 80029cc:	2200      	movs	r2, #0
 80029ce:	2300      	movs	r3, #0
 80029d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80029d2:	647b      	str	r3, [r7, #68]	@ 0x44
  //Display temperature on the oled as set and read

  HAL_TIM_Base_Start_IT(&htim17); // Starting PID timer. Period 1 second.
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <main+0x1a4>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f005 fcf8 	bl	80083cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Starting OLED refreshing timer. Period 33 miliseconds.
 80029dc:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <main+0x1a8>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f005 fcf4 	bl	80083cc <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(time_to_rerun_PID_loop){
 80029e4:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <main+0x1ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d019      	beq.n	8002a20 <main+0x15c>
		read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside);
 80029ec:	2308      	movs	r3, #8
 80029ee:	18fa      	adds	r2, r7, r3
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <main+0x19c>)
 80029f2:	2192      	movs	r1, #146	@ 0x92
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 ff01 	bl	80037fc <read_temp>
		read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside);
 80029fa:	003a      	movs	r2, r7
 80029fc:	4b18      	ldr	r3, [pc, #96]	@ (8002a60 <main+0x19c>)
 80029fe:	2190      	movs	r1, #144	@ 0x90
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 fefb 	bl	80037fc <read_temp>
//		pid_output = compute_pid_output(set_temp_inside - current_temp_inside);
//		set_vout(&hspi2, pid_output);

		send_temps_via_usb(current_temp_inside, current_temp_outside);
 8002a06:	68b8      	ldr	r0, [r7, #8]
 8002a08:	68f9      	ldr	r1, [r7, #12]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f000 ff60 	bl	80038d2 <send_temps_via_usb>
		listen_for_temp_change_sent_via_usb(&set_temp_inside);
 8002a12:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <main+0x1a0>)
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 ff7f 	bl	8003918 <listen_for_temp_change_sent_via_usb>

		time_to_rerun_PID_loop = 0;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <main+0x1ac>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
	}
	if(time_to_refresh_OLED){
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <main+0x1b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0dd      	beq.n	80029e4 <main+0x120>
		refresh_displayed_info(&oled, set_temp_inside, current_temp_inside);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <main+0x1a0>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2410      	movs	r4, #16
 8002a34:	193c      	adds	r4, r7, r4
 8002a36:	9200      	str	r2, [sp, #0]
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	000b      	movs	r3, r1
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f7ff fdba 	bl	80025b8 <refresh_displayed_info>
		time_to_refresh_OLED = 0;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <main+0x1b0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
	if(time_to_rerun_PID_loop){
 8002a4a:	e7cb      	b.n	80029e4 <main+0x120>
 8002a4c:	08011b28 	.word	0x08011b28
 8002a50:	08011b38 	.word	0x08011b38
 8002a54:	50000400 	.word	0x50000400
 8002a58:	08011b18 	.word	0x08011b18
 8002a5c:	08011b20 	.word	0x08011b20
 8002a60:	20000348 	.word	0x20000348
 8002a64:	200004f8 	.word	0x200004f8
 8002a68:	20000498 	.word	0x20000498
 8002a6c:	20000400 	.word	0x20000400
 8002a70:	200004e4 	.word	0x200004e4
 8002a74:	200004e8 	.word	0x200004e8

08002a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b093      	sub	sp, #76	@ 0x4c
 8002a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7e:	2410      	movs	r4, #16
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	0018      	movs	r0, r3
 8002a84:	2338      	movs	r3, #56	@ 0x38
 8002a86:	001a      	movs	r2, r3
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f00c fa35 	bl	800eef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8e:	003b      	movs	r3, r7
 8002a90:	0018      	movs	r0, r3
 8002a92:	2310      	movs	r3, #16
 8002a94:	001a      	movs	r2, r3
 8002a96:	2100      	movs	r1, #0
 8002a98:	f00c fa2e 	bl	800eef8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f004 fd17 	bl	80074d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	0252      	lsls	r2, r2, #9
 8002ab2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab4:	0021      	movs	r1, r4
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	2202      	movs	r2, #2
 8002aba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002ac8:	187b      	adds	r3, r7, r1
 8002aca:	220c      	movs	r2, #12
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	0292      	lsls	r2, r2, #10
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2280      	movs	r2, #128	@ 0x80
 8002ada:	0492      	lsls	r2, r2, #18
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2280      	movs	r2, #128	@ 0x80
 8002ae2:	0592      	lsls	r2, r2, #22
 8002ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f004 fd33 	bl	8007554 <HAL_RCC_OscConfig>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002af2:	f000 fb93 	bl	800321c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af6:	003b      	movs	r3, r7
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002afc:	003b      	movs	r3, r7
 8002afe:	2202      	movs	r2, #2
 8002b00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b02:	003b      	movs	r3, r7
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b08:	003b      	movs	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b0e:	003b      	movs	r3, r7
 8002b10:	2101      	movs	r1, #1
 8002b12:	0018      	movs	r0, r3
 8002b14:	f005 f838 	bl	8007b88 <HAL_RCC_ClockConfig>
 8002b18:	1e03      	subs	r3, r0, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002b1c:	f000 fb7e 	bl	800321c <Error_Handler>
  }
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b013      	add	sp, #76	@ 0x4c
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	0018      	movs	r0, r3
 8002b32:	230c      	movs	r3, #12
 8002b34:	001a      	movs	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f00c f9de 	bl	800eef8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf8 <MX_ADC1_Init+0xd0>)
 8002b40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b42:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b44:	2280      	movs	r2, #128	@ 0x80
 8002b46:	05d2      	lsls	r2, r2, #23
 8002b48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b50:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b56:	4b27      	ldr	r3, [pc, #156]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b5e:	2204      	movs	r2, #4
 8002b60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b62:	4b24      	ldr	r3, [pc, #144]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b90:	222c      	movs	r2, #44	@ 0x2c
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b96:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002baa:	223c      	movs	r2, #60	@ 0x3c
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f001 f929 	bl	8003e10 <HAL_ADC_Init>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002bc2:	f000 fb2b 	bl	800321c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bfc <MX_ADC1_Init+0xd4>)
 8002bca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd8:	1d3a      	adds	r2, r7, #4
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <MX_ADC1_Init+0xcc>)
 8002bdc:	0011      	movs	r1, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f001 fbee 	bl	80043c0 <HAL_ADC_ConfigChannel>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d001      	beq.n	8002bec <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002be8:	f000 fb18 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200002e4 	.word	0x200002e4
 8002bf8:	40012400 	.word	0x40012400
 8002bfc:	1c000080 	.word	0x1c000080

08002c00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <MX_I2C2_Init+0x78>)
 8002c08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002c7c <MX_I2C2_Init+0x7c>)
 8002c0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c10:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c16:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c22:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c2e:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f002 f88b 	bl	8004d58 <HAL_I2C_Init>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c46:	f000 fae9 	bl	800321c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f002 fe2e 	bl	80058b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c58:	f000 fae0 	bl	800321c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <MX_I2C2_Init+0x74>)
 8002c5e:	2100      	movs	r1, #0
 8002c60:	0018      	movs	r0, r3
 8002c62:	f002 fe71 	bl	8005948 <HAL_I2CEx_ConfigDigitalFilter>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c6a:	f000 fad7 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000348 	.word	0x20000348
 8002c78:	40005800 	.word	0x40005800
 8002c7c:	0090194b 	.word	0x0090194b

08002c80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002c86:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf8 <MX_SPI2_Init+0x78>)
 8002c88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002c8c:	2282      	movs	r2, #130	@ 0x82
 8002c8e:	0052      	lsls	r2, r2, #1
 8002c90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002c9a:	22e0      	movs	r2, #224	@ 0xe0
 8002c9c:	00d2      	lsls	r2, r2, #3
 8002c9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cae:	2280      	movs	r2, #128	@ 0x80
 8002cb0:	0092      	lsls	r2, r2, #2
 8002cb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cce:	2207      	movs	r2, #7
 8002cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002cda:	2208      	movs	r2, #8
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <MX_SPI2_Init+0x74>)
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f005 fa63 	bl	80081ac <HAL_SPI_Init>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002cea:	f000 fa97 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000039c 	.word	0x2000039c
 8002cf8:	40003800 	.word	0x40003800

08002cfc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	0018      	movs	r0, r3
 8002d06:	230c      	movs	r3, #12
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	f00c f8f4 	bl	800eef8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d12:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <MX_TIM7_Init+0x70>)
 8002d14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000-1;
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d18:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <MX_TIM7_Init+0x74>)
 8002d1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33-1;
 8002d22:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d24:	2220      	movs	r2, #32
 8002d26:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d30:	0018      	movs	r0, r3
 8002d32:	f005 faf3 	bl	800831c <HAL_TIM_Base_Init>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002d3a:	f000 fa6f 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d4a:	1d3a      	adds	r2, r7, #4
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <MX_TIM7_Init+0x6c>)
 8002d4e:	0011      	movs	r1, r2
 8002d50:	0018      	movs	r0, r3
 8002d52:	f005 fd7b 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002d5a:	f000 fa5f 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	20000400 	.word	0x20000400
 8002d6c:	40001400 	.word	0x40001400
 8002d70:	0000bb7f 	.word	0x0000bb7f

08002d74 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d7a:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <MX_TIM16_Init+0x48>)
 8002d7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d80:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc0 <MX_TIM16_Init+0x4c>)
 8002d82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <MX_TIM16_Init+0x50>)
 8002d8e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002da2:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <MX_TIM16_Init+0x44>)
 8002da4:	0018      	movs	r0, r3
 8002da6:	f005 fab9 	bl	800831c <HAL_TIM_Base_Init>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8002dae:	f000 fa35 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	2000044c 	.word	0x2000044c
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	0000bb7f 	.word	0x0000bb7f
 8002dc4:	000003e7 	.word	0x000003e7

08002dc8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002dce:	4a10      	ldr	r2, [pc, #64]	@ (8002e10 <MX_TIM17_Init+0x48>)
 8002dd0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8002e14 <MX_TIM17_Init+0x4c>)
 8002dd6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <MX_TIM17_Init+0x50>)
 8002de2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <MX_TIM17_Init+0x44>)
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f005 fa8f 	bl	800831c <HAL_TIM_Base_Init>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8002e02:	f000 fa0b 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000498 	.word	0x20000498
 8002e10:	40014800 	.word	0x40014800
 8002e14:	0000bb7f 	.word	0x0000bb7f
 8002e18:	000003e7 	.word	0x000003e7

08002e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08b      	sub	sp, #44	@ 0x2c
 8002e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e22:	2414      	movs	r4, #20
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	0018      	movs	r0, r3
 8002e28:	2314      	movs	r3, #20
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f00c f863 	bl	800eef8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e32:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e36:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e38:	2120      	movs	r1, #32
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	2220      	movs	r2, #32
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b67      	ldr	r3, [pc, #412]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e4e:	4b66      	ldr	r3, [pc, #408]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e56:	4b64      	ldr	r3, [pc, #400]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e66:	4b60      	ldr	r3, [pc, #384]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e68:	2102      	movs	r1, #2
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e80:	2104      	movs	r1, #4
 8002e82:	430a      	orrs	r2, r1
 8002e84:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e86:	4b58      	ldr	r3, [pc, #352]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e92:	4b55      	ldr	r3, [pc, #340]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e96:	4b54      	ldr	r3, [pc, #336]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002e98:	2108      	movs	r1, #8
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9e:	4b52      	ldr	r3, [pc, #328]	@ (8002fe8 <MX_GPIO_Init+0x1cc>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, GPIO_PIN_RESET);
 8002eaa:	23a0      	movs	r3, #160	@ 0xa0
 8002eac:	05db      	lsls	r3, r3, #23
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2140      	movs	r1, #64	@ 0x40
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f001 fee3 	bl	8004c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin, GPIO_PIN_RESET);
 8002eb8:	2387      	movs	r3, #135	@ 0x87
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	484b      	ldr	r0, [pc, #300]	@ (8002fec <MX_GPIO_Init+0x1d0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	f001 fedc 	bl	8004c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff0 <MX_GPIO_Init+0x1d4>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2140      	movs	r1, #64	@ 0x40
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f001 fed6 	bl	8004c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin, GPIO_PIN_RESET);
 8002ed2:	4b48      	ldr	r3, [pc, #288]	@ (8002ff4 <MX_GPIO_Init+0x1d8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f001 fed0 	bl	8004c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Temp_Down_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Down_Btn_Pin;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2284      	movs	r2, #132	@ 0x84
 8002ee8:	0392      	lsls	r2, r2, #14
 8002eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Down_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	193a      	adds	r2, r7, r4
 8002ef4:	23a0      	movs	r3, #160	@ 0xa0
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	0011      	movs	r1, r2
 8002efa:	0018      	movs	r0, r3
 8002efc:	f001 fd36 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : LT8722_CS_Pin */
  GPIO_InitStruct.Pin = LT8722_CS_Pin;
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	2201      	movs	r2, #1
 8002f0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LT8722_CS_GPIO_Port, &GPIO_InitStruct);
 8002f18:	193a      	adds	r2, r7, r4
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	05db      	lsls	r3, r3, #23
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 fd23 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : LT8722_SWEN_Pin OLED_RW_Pin OLED_EN_Pin OLED_RS_Pin */
  GPIO_InitStruct.Pin = LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin;
 8002f26:	0021      	movs	r1, r4
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2287      	movs	r2, #135	@ 0x87
 8002f2c:	00d2      	lsls	r2, r2, #3
 8002f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f30:	000c      	movs	r4, r1
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2201      	movs	r2, #1
 8002f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	193b      	adds	r3, r7, r4
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	4a29      	ldr	r2, [pc, #164]	@ (8002fec <MX_GPIO_Init+0x1d0>)
 8002f48:	0019      	movs	r1, r3
 8002f4a:	0010      	movs	r0, r2
 8002f4c:	f001 fd0e 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Up_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Up_Btn_Pin;
 8002f50:	0021      	movs	r1, r4
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	2280      	movs	r2, #128	@ 0x80
 8002f56:	0152      	lsls	r2, r2, #5
 8002f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	2284      	movs	r2, #132	@ 0x84
 8002f5e:	0392      	lsls	r2, r2, #14
 8002f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	000c      	movs	r4, r1
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Up_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fec <MX_GPIO_Init+0x1d0>)
 8002f6e:	0019      	movs	r1, r3
 8002f70:	0010      	movs	r0, r2
 8002f72:	f001 fcfb 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8002f76:	193b      	adds	r3, r7, r4
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2201      	movs	r2, #1
 8002f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	4a17      	ldr	r2, [pc, #92]	@ (8002ff0 <MX_GPIO_Init+0x1d4>)
 8002f92:	0019      	movs	r1, r3
 8002f94:	0010      	movs	r0, r2
 8002f96:	f001 fce9 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_D07_Pin OLED_D06_Pin OLED_D04_Pin OLED_D05_Pin */
  GPIO_InitStruct.Pin = OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin;
 8002f9a:	0021      	movs	r1, r4
 8002f9c:	187b      	adds	r3, r7, r1
 8002f9e:	220f      	movs	r2, #15
 8002fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	187b      	adds	r3, r7, r1
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <MX_GPIO_Init+0x1d8>)
 8002fb8:	0019      	movs	r1, r3
 8002fba:	0010      	movs	r0, r2
 8002fbc:	f001 fcd6 	bl	800496c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	2005      	movs	r0, #5
 8002fc6:	f001 fc9f 	bl	8004908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002fca:	2005      	movs	r0, #5
 8002fcc:	f001 fcb1 	bl	8004932 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2007      	movs	r0, #7
 8002fd6:	f001 fc97 	bl	8004908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002fda:	2007      	movs	r0, #7
 8002fdc:	f001 fca9 	bl	8004932 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002fe0:	46c0      	nop			@ (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b00b      	add	sp, #44	@ 0x2c
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	50000400 	.word	0x50000400
 8002ff0:	50000800 	.word	0x50000800
 8002ff4:	50000c00 	.word	0x50000c00

08002ff8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b08b      	sub	sp, #44	@ 0x2c
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) { //PID and USB timer
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a51      	ldr	r2, [pc, #324]	@ (800314c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d107      	bne.n	800301a <HAL_TIM_PeriodElapsedCallback+0x22>
    	time_to_rerun_PID_loop = 1;
 800300a:	4b51      	ldr	r3, [pc, #324]	@ (8003150 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8003010:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003012:	2140      	movs	r1, #64	@ 0x40
 8003014:	0018      	movs	r0, r3
 8003016:	f001 fe4f 	bl	8004cb8 <HAL_GPIO_TogglePin>
    }

    if (htim->Instance == TIM16) { //Button pressed time counting timer
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a4e      	ldr	r2, [pc, #312]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d000      	beq.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8003024:	e086      	b.n	8003134 <HAL_TIM_PeriodElapsedCallback+0x13c>

    	// ----------- REVISIT THIS. SPEED CARRIES OVER IF DIFFERENT BUTTON IS PRESSED RIGHT AFTER ANOTHER IS RELEASED -----------------

    	double temp_change_speeds[] = {0.5, 1, 2, 5};
 8003026:	2408      	movs	r4, #8
 8003028:	193a      	adds	r2, r7, r4
 800302a:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800302c:	0010      	movs	r0, r2
 800302e:	0019      	movs	r1, r3
 8003030:	2320      	movs	r3, #32
 8003032:	001a      	movs	r2, r3
 8003034:	f00c f804 	bl	800f040 <memcpy>
    	static int speed_index = 0;
    	static int period_counter = 0;
    	if(temp_down_btn_is_pressed_down){
 8003038:	4b49      	ldr	r3, [pc, #292]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d039      	beq.n	80030b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			if(HAL_GPIO_ReadPin(Temp_Down_Btn_GPIO_Port, Temp_Down_Btn_Pin) == 0){
 8003040:	23a0      	movs	r3, #160	@ 0xa0
 8003042:	05db      	lsls	r3, r3, #23
 8003044:	2102      	movs	r1, #2
 8003046:	0018      	movs	r0, r3
 8003048:	f001 fdfc 	bl	8004c44 <HAL_GPIO_ReadPin>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d124      	bne.n	800309a <HAL_TIM_PeriodElapsedCallback+0xa2>
				set_temp_inside -= temp_change_speeds[speed_index];
 8003050:	4b44      	ldr	r3, [pc, #272]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	4b44      	ldr	r3, [pc, #272]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	193a      	adds	r2, r7, r4
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	18d3      	adds	r3, r2, r3
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f7fe fd70 	bl	8001b48 <__aeabi_dsub>
 8003068:	0002      	movs	r2, r0
 800306a:	000b      	movs	r3, r1
 800306c:	493d      	ldr	r1, [pc, #244]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800306e:	600a      	str	r2, [r1, #0]
 8003070:	604b      	str	r3, [r1, #4]
				period_counter++;
 8003072:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4b3c      	ldr	r3, [pc, #240]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800307a:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 800307c:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
					speed_index = period_counter/3;
 8003084:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2103      	movs	r1, #3
 800308a:	0018      	movs	r0, r3
 800308c:	f7fd f8de 	bl	800024c <__divsi3>
 8003090:	0003      	movs	r3, r0
 8003092:	001a      	movs	r2, r3
 8003094:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e00c      	b.n	80030b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else{
				temp_down_btn_is_pressed_down = 0;
 800309a:	4b31      	ldr	r3, [pc, #196]	@ (8003160 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 80030a0:	4b33      	ldr	r3, [pc, #204]	@ (8003170 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f005 f9ee 	bl	8008484 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 80030a8:	4b30      	ldr	r3, [pc, #192]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
			}
    	}
    	if(temp_up_btn_is_pressed_down){
 80030b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003174 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03b      	beq.n	8003134 <HAL_TIM_PeriodElapsedCallback+0x13c>
			if(HAL_GPIO_ReadPin(Temp_Up_Btn_GPIO_Port, Temp_Up_Btn_Pin) == 0){
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	015b      	lsls	r3, r3, #5
 80030c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003178 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80030c2:	0019      	movs	r1, r3
 80030c4:	0010      	movs	r0, r2
 80030c6:	f001 fdbd 	bl	8004c44 <HAL_GPIO_ReadPin>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d125      	bne.n	800311a <HAL_TIM_PeriodElapsedCallback+0x122>
				set_temp_inside += temp_change_speeds[speed_index];;
 80030ce:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2208      	movs	r2, #8
 80030d4:	18ba      	adds	r2, r7, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f7fd fa4a 	bl	800057c <__aeabi_dadd>
 80030e8:	0002      	movs	r2, r0
 80030ea:	000b      	movs	r3, r1
 80030ec:	491d      	ldr	r1, [pc, #116]	@ (8003164 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80030ee:	600a      	str	r2, [r1, #0]
 80030f0:	604b      	str	r3, [r1, #4]
				period_counter++;
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80030fa:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 80030fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d017      	beq.n	8003134 <HAL_TIM_PeriodElapsedCallback+0x13c>
					speed_index = period_counter/3;
 8003104:	4b19      	ldr	r3, [pc, #100]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2103      	movs	r1, #3
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd f89e 	bl	800024c <__divsi3>
 8003110:	0003      	movs	r3, r0
 8003112:	001a      	movs	r2, r3
 8003114:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e00c      	b.n	8003134 <HAL_TIM_PeriodElapsedCallback+0x13c>
			}
			else{
				temp_up_btn_is_pressed_down = 0;
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003122:	0018      	movs	r0, r3
 8003124:	f005 f9ae 	bl	8008484 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 8003128:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
			}
    	}

    }

    if (htim->Instance == TIM7) { //Display refresh timer
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a10      	ldr	r2, [pc, #64]	@ (800317c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d102      	bne.n	8003144 <HAL_TIM_PeriodElapsedCallback+0x14c>
    	time_to_refresh_OLED = 1;
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }


}
 8003144:	46c0      	nop			@ (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b00b      	add	sp, #44	@ 0x2c
 800314a:	bd90      	pop	{r4, r7, pc}
 800314c:	40014800 	.word	0x40014800
 8003150:	200004e4 	.word	0x200004e4
 8003154:	50000800 	.word	0x50000800
 8003158:	40014400 	.word	0x40014400
 800315c:	08011b40 	.word	0x08011b40
 8003160:	200004ec 	.word	0x200004ec
 8003164:	200004f8 	.word	0x200004f8
 8003168:	20000500 	.word	0x20000500
 800316c:	20000504 	.word	0x20000504
 8003170:	2000044c 	.word	0x2000044c
 8003174:	200004f0 	.word	0x200004f0
 8003178:	50000400 	.word	0x50000400
 800317c:	40001400 	.word	0x40001400
 8003180:	200004e8 	.word	0x200004e8

08003184 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	0002      	movs	r2, r0
 800318c:	1dbb      	adds	r3, r7, #6
 800318e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == Temp_Down_Btn_Pin) {
 8003190:	1dbb      	adds	r3, r7, #6
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d10e      	bne.n	80031b6 <HAL_GPIO_EXTI_Falling_Callback+0x32>
    	set_temp_inside -= 0.1 ;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	4a1a      	ldr	r2, [pc, #104]	@ (8003208 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80031a2:	f7fe fcd1 	bl	8001b48 <__aeabi_dsub>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	4916      	ldr	r1, [pc, #88]	@ (8003204 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80031ac:	600a      	str	r2, [r1, #0]
 80031ae:	604b      	str	r3, [r1, #4]
    	temp_down_btn_is_pressed_down = 1;
 80031b0:	4b17      	ldr	r3, [pc, #92]	@ (8003210 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == Temp_Up_Btn_Pin) {
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	881a      	ldrh	r2, [r3, #0]
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	015b      	lsls	r3, r3, #5
 80031be:	429a      	cmp	r2, r3
 80031c0:	d10e      	bne.n	80031e0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
    	set_temp_inside += 0.1 ;
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003208 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80031cc:	f7fd f9d6 	bl	800057c <__aeabi_dadd>
 80031d0:	0002      	movs	r2, r0
 80031d2:	000b      	movs	r3, r1
 80031d4:	490b      	ldr	r1, [pc, #44]	@ (8003204 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80031d6:	600a      	str	r2, [r1, #0]
 80031d8:	604b      	str	r3, [r1, #4]
    	temp_up_btn_is_pressed_down = 1;
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    }
    htim16.Instance->CNT = 0;
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE); // So that timer ran for the first time does not immediately raise an interrupt
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2202      	movs	r2, #2
 80031ee:	4252      	negs	r2, r2
 80031f0:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim16);
 80031f2:	4b09      	ldr	r3, [pc, #36]	@ (8003218 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80031f4:	0018      	movs	r0, r3
 80031f6:	f005 f8e9 	bl	80083cc <HAL_TIM_Base_Start_IT>
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	200004f8 	.word	0x200004f8
 8003208:	9999999a 	.word	0x9999999a
 800320c:	3fb99999 	.word	0x3fb99999
 8003210:	200004ec 	.word	0x200004ec
 8003214:	200004f0 	.word	0x200004f0
 8003218:	2000044c 	.word	0x2000044c

0800321c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003224:	46c0      	nop			@ (mov r8, r8)
 8003226:	e7fd      	b.n	8003224 <Error_Handler+0x8>

08003228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322e:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <HAL_MspInit+0x4c>)
 8003230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <HAL_MspInit+0x4c>)
 8003234:	2101      	movs	r1, #1
 8003236:	430a      	orrs	r2, r1
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
 800323a:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_MspInit+0x4c>)
 8003248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800324a:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_MspInit+0x4c>)
 800324c:	2180      	movs	r1, #128	@ 0x80
 800324e:	0549      	lsls	r1, r1, #21
 8003250:	430a      	orrs	r2, r1
 8003252:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003254:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_MspInit+0x4c>)
 8003256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	055b      	lsls	r3, r3, #21
 800325c:	4013      	ands	r3, r2
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003262:	23c0      	movs	r3, #192	@ 0xc0
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fca0 	bl	8003bac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b08b      	sub	sp, #44	@ 0x2c
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	2414      	movs	r4, #20
 8003282:	193b      	adds	r3, r7, r4
 8003284:	0018      	movs	r0, r3
 8003286:	2314      	movs	r3, #20
 8003288:	001a      	movs	r2, r3
 800328a:	2100      	movs	r1, #0
 800328c:	f00b fe34 	bl	800eef8 <memset>
  if(hadc->Instance==ADC1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_ADC_MspInit+0x90>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d131      	bne.n	80032fe <HAL_ADC_MspInit+0x86>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800329a:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_ADC_MspInit+0x94>)
 800329c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800329e:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_ADC_MspInit+0x94>)
 80032a0:	2180      	movs	r1, #128	@ 0x80
 80032a2:	0349      	lsls	r1, r1, #13
 80032a4:	430a      	orrs	r2, r1
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80032a8:	4b18      	ldr	r3, [pc, #96]	@ (800330c <HAL_ADC_MspInit+0x94>)
 80032aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	035b      	lsls	r3, r3, #13
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_ADC_MspInit+0x94>)
 80032b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ba:	4b14      	ldr	r3, [pc, #80]	@ (800330c <HAL_ADC_MspInit+0x94>)
 80032bc:	2101      	movs	r1, #1
 80032be:	430a      	orrs	r2, r1
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032c2:	4b12      	ldr	r3, [pc, #72]	@ (800330c <HAL_ADC_MspInit+0x94>)
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	2280      	movs	r2, #128	@ 0x80
 80032d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	2203      	movs	r2, #3
 80032d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	193b      	adds	r3, r7, r4
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	193a      	adds	r2, r7, r4
 80032e2:	23a0      	movs	r3, #160	@ 0xa0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f001 fb3f 	bl	800496c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	200c      	movs	r0, #12
 80032f4:	f001 fb08 	bl	8004908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80032f8:	200c      	movs	r0, #12
 80032fa:	f001 fb1a 	bl	8004932 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b00b      	add	sp, #44	@ 0x2c
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	40012400 	.word	0x40012400
 800330c:	40021000 	.word	0x40021000

08003310 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b097      	sub	sp, #92	@ 0x5c
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	2344      	movs	r3, #68	@ 0x44
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	0018      	movs	r0, r3
 800331e:	2314      	movs	r3, #20
 8003320:	001a      	movs	r2, r3
 8003322:	2100      	movs	r1, #0
 8003324:	f00b fde8 	bl	800eef8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003328:	2418      	movs	r4, #24
 800332a:	193b      	adds	r3, r7, r4
 800332c:	0018      	movs	r0, r3
 800332e:	232c      	movs	r3, #44	@ 0x2c
 8003330:	001a      	movs	r2, r3
 8003332:	2100      	movs	r1, #0
 8003334:	f00b fde0 	bl	800eef8 <memset>
  if(hi2c->Instance==I2C2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a35      	ldr	r2, [pc, #212]	@ (8003414 <HAL_I2C_MspInit+0x104>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d163      	bne.n	800340a <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2240      	movs	r2, #64	@ 0x40
 8003346:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2200      	movs	r2, #0
 800334c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800334e:	193b      	adds	r3, r7, r4
 8003350:	0018      	movs	r0, r3
 8003352:	f004 fda3 	bl	8007e9c <HAL_RCCEx_PeriphCLKConfig>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800335a:	f7ff ff5f 	bl	800321c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003362:	4b2d      	ldr	r3, [pc, #180]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 8003364:	2102      	movs	r1, #2
 8003366:	430a      	orrs	r2, r1
 8003368:	635a      	str	r2, [r3, #52]	@ 0x34
 800336a:	4b2b      	ldr	r3, [pc, #172]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 800336c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	4b28      	ldr	r3, [pc, #160]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 8003378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337a:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 800337c:	2101      	movs	r1, #1
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	@ 0x34
 8003382:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	2201      	movs	r2, #1
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800338e:	2144      	movs	r1, #68	@ 0x44
 8003390:	187b      	adds	r3, r7, r1
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	01d2      	lsls	r2, r2, #7
 8003396:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003398:	000c      	movs	r4, r1
 800339a:	193b      	adds	r3, r7, r4
 800339c:	2212      	movs	r2, #18
 800339e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a0:	193b      	adds	r3, r7, r4
 80033a2:	2201      	movs	r2, #1
 80033a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80033ac:	193b      	adds	r3, r7, r4
 80033ae:	2206      	movs	r2, #6
 80033b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	4a19      	ldr	r2, [pc, #100]	@ (800341c <HAL_I2C_MspInit+0x10c>)
 80033b6:	0019      	movs	r1, r3
 80033b8:	0010      	movs	r0, r2
 80033ba:	f001 fad7 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033be:	0021      	movs	r1, r4
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2212      	movs	r2, #18
 80033cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2201      	movs	r2, #1
 80033d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 80033da:	187b      	adds	r3, r7, r1
 80033dc:	2208      	movs	r2, #8
 80033de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	187a      	adds	r2, r7, r1
 80033e2:	23a0      	movs	r3, #160	@ 0xa0
 80033e4:	05db      	lsls	r3, r3, #23
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f001 fabf 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 80033f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 80033f4:	2180      	movs	r1, #128	@ 0x80
 80033f6:	03c9      	lsls	r1, r1, #15
 80033f8:	430a      	orrs	r2, r1
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_I2C_MspInit+0x108>)
 80033fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	03db      	lsls	r3, r3, #15
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b017      	add	sp, #92	@ 0x5c
 8003410:	bd90      	pop	{r4, r7, pc}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	40005800 	.word	0x40005800
 8003418:	40021000 	.word	0x40021000
 800341c:	50000400 	.word	0x50000400

08003420 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b08b      	sub	sp, #44	@ 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	2414      	movs	r4, #20
 800342a:	193b      	adds	r3, r7, r4
 800342c:	0018      	movs	r0, r3
 800342e:	2314      	movs	r3, #20
 8003430:	001a      	movs	r2, r3
 8003432:	2100      	movs	r1, #0
 8003434:	f00b fd60 	bl	800eef8 <memset>
  if(hspi->Instance==SPI2)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a26      	ldr	r2, [pc, #152]	@ (80034d8 <HAL_SPI_MspInit+0xb8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d146      	bne.n	80034d0 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003442:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 8003444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003446:	4b25      	ldr	r3, [pc, #148]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	01c9      	lsls	r1, r1, #7
 800344c:	430a      	orrs	r2, r1
 800344e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003450:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 8003452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	01db      	lsls	r3, r3, #7
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b1f      	ldr	r3, [pc, #124]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 8003460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003462:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 8003464:	2101      	movs	r1, #1
 8003466:	430a      	orrs	r2, r1
 8003468:	635a      	str	r2, [r3, #52]	@ 0x34
 800346a:	4b1c      	ldr	r3, [pc, #112]	@ (80034dc <HAL_SPI_MspInit+0xbc>)
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	2201      	movs	r2, #1
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2209      	movs	r2, #9
 800347a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	193b      	adds	r3, r7, r4
 800347e:	2202      	movs	r2, #2
 8003480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	193b      	adds	r3, r7, r4
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	193b      	adds	r3, r7, r4
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	193a      	adds	r2, r7, r4
 8003496:	23a0      	movs	r3, #160	@ 0xa0
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	0011      	movs	r1, r2
 800349c:	0018      	movs	r0, r3
 800349e:	f001 fa65 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034a2:	0021      	movs	r1, r4
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2210      	movs	r2, #16
 80034a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2202      	movs	r2, #2
 80034ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2201      	movs	r2, #1
 80034c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	187a      	adds	r2, r7, r1
 80034c4:	23a0      	movs	r3, #160	@ 0xa0
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f001 fa4e 	bl	800496c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b00b      	add	sp, #44	@ 0x2c
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	40003800 	.word	0x40003800
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a29      	ldr	r2, [pc, #164]	@ (8003594 <HAL_TIM_Base_MspInit+0xb4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d114      	bne.n	800351c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034f2:	4b29      	ldr	r3, [pc, #164]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 80034f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f6:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 80034f8:	2120      	movs	r1, #32
 80034fa:	430a      	orrs	r2, r1
 80034fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034fe:	4b26      	ldr	r3, [pc, #152]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 8003500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003502:	2220      	movs	r2, #32
 8003504:	4013      	ands	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	2012      	movs	r0, #18
 8003510:	f001 f9fa 	bl	8004908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003514:	2012      	movs	r0, #18
 8003516:	f001 fa0c 	bl	8004932 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800351a:	e036      	b.n	800358a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM16)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_TIM_Base_MspInit+0xbc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d116      	bne.n	8003554 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003526:	4b1c      	ldr	r3, [pc, #112]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 8003528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800352a:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 800352c:	2180      	movs	r1, #128	@ 0x80
 800352e:	0289      	lsls	r1, r1, #10
 8003530:	430a      	orrs	r2, r1
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
 8003534:	4b18      	ldr	r3, [pc, #96]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 8003536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003538:	2380      	movs	r3, #128	@ 0x80
 800353a:	029b      	lsls	r3, r3, #10
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2015      	movs	r0, #21
 8003548:	f001 f9de 	bl	8004908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800354c:	2015      	movs	r0, #21
 800354e:	f001 f9f0 	bl	8004932 <HAL_NVIC_EnableIRQ>
}
 8003552:	e01a      	b.n	800358a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM17)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a11      	ldr	r2, [pc, #68]	@ (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d115      	bne.n	800358a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800355e:	4b0e      	ldr	r3, [pc, #56]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 8003560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	02c9      	lsls	r1, r1, #11
 8003568:	430a      	orrs	r2, r1
 800356a:	641a      	str	r2, [r3, #64]	@ 0x40
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_TIM_Base_MspInit+0xb8>)
 800356e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	02db      	lsls	r3, r3, #11
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	2016      	movs	r0, #22
 8003580:	f001 f9c2 	bl	8004908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003584:	2016      	movs	r0, #22
 8003586:	f001 f9d4 	bl	8004932 <HAL_NVIC_EnableIRQ>
}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b006      	add	sp, #24
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	40001400 	.word	0x40001400
 8003598:	40021000 	.word	0x40021000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800

080035a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	e7fd      	b.n	80035a8 <NMI_Handler+0x4>

080035ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	e7fd      	b.n	80035b0 <HardFault_Handler+0x4>

080035b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035b8:	46c0      	nop			@ (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035cc:	f000 faae 	bl	8003b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d0:	46c0      	nop			@ (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Down_Btn_Pin);
 80035da:	2002      	movs	r0, #2
 80035dc:	f001 fb88 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Up_Btn_Pin);
 80035ea:	2380      	movs	r3, #128	@ 0x80
 80035ec:	015b      	lsls	r3, r3, #5
 80035ee:	0018      	movs	r0, r3
 80035f0:	f001 fb7e 	bl	8004cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <USB_IRQHandler>:

/**
  * @brief This function handles USB interrupt.
  */
void USB_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <USB_IRQHandler+0x14>)
 8003602:	0018      	movs	r0, r3
 8003604:	f002 fb72 	bl	8005cec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	20001a04 	.word	0x20001a04

08003614 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 Interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003618:	4b03      	ldr	r3, [pc, #12]	@ (8003628 <ADC1_IRQHandler+0x14>)
 800361a:	0018      	movs	r0, r3
 800361c:	f000 fda0 	bl	8004160 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	200002e4 	.word	0x200002e4

0800362c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global Interrupt.
  */
void TIM7_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003630:	4b03      	ldr	r3, [pc, #12]	@ (8003640 <TIM7_IRQHandler+0x14>)
 8003632:	0018      	movs	r0, r3
 8003634:	f004 ff54 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003638:	46c0      	nop			@ (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	20000400 	.word	0x20000400

08003644 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <TIM16_IRQHandler+0x14>)
 800364a:	0018      	movs	r0, r3
 800364c:	f004 ff48 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	2000044c 	.word	0x2000044c

0800365c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003660:	4b03      	ldr	r3, [pc, #12]	@ (8003670 <TIM17_IRQHandler+0x14>)
 8003662:	0018      	movs	r0, r3
 8003664:	f004 ff3c 	bl	80084e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	20000498 	.word	0x20000498

08003674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return 1;
 8003678:	2301      	movs	r3, #1
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_kill>:

int _kill(int pid, int sig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800368a:	f00b fca1 	bl	800efd0 <__errno>
 800368e:	0003      	movs	r3, r0
 8003690:	2216      	movs	r2, #22
 8003692:	601a      	str	r2, [r3, #0]
  return -1;
 8003694:	2301      	movs	r3, #1
 8003696:	425b      	negs	r3, r3
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_exit>:

void _exit (int status)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036a8:	2301      	movs	r3, #1
 80036aa:	425a      	negs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0011      	movs	r1, r2
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7ff ffe5 	bl	8003680 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	e7fd      	b.n	80036b6 <_exit+0x16>

080036ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e00a      	b.n	80036e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036cc:	e000      	b.n	80036d0 <_read+0x16>
 80036ce:	bf00      	nop
 80036d0:	0001      	movs	r1, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	60ba      	str	r2, [r7, #8]
 80036d8:	b2ca      	uxtb	r2, r1
 80036da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3301      	adds	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	dbf0      	blt.n	80036cc <_read+0x12>
  }

  return len;
 80036ea:	687b      	ldr	r3, [r7, #4]
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e009      	b.n	800371a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	60ba      	str	r2, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	0018      	movs	r0, r3
 8003710:	e000      	b.n	8003714 <_write+0x20>
 8003712:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	429a      	cmp	r2, r3
 8003720:	dbf1      	blt.n	8003706 <_write+0x12>
  }
  return len;
 8003722:	687b      	ldr	r3, [r7, #4]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b006      	add	sp, #24
 800372a:	bd80      	pop	{r7, pc}

0800372c <_close>:

int _close(int file)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003734:	2301      	movs	r3, #1
 8003736:	425b      	negs	r3, r3
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2280      	movs	r2, #128	@ 0x80
 800374e:	0192      	lsls	r2, r2, #6
 8003750:	605a      	str	r2, [r3, #4]
  return 0;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <_isatty>:

int _isatty(int file)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003764:	2301      	movs	r3, #1
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}

0800376e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b004      	add	sp, #16
 8003782:	bd80      	pop	{r7, pc}

08003784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <_sbrk+0x5c>)
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <_sbrk+0x60>)
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003798:	4b13      	ldr	r3, [pc, #76]	@ (80037e8 <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <_sbrk+0x64>)
 80037a2:	4a12      	ldr	r2, [pc, #72]	@ (80037ec <_sbrk+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b4:	f00b fc0c 	bl	800efd0 <__errno>
 80037b8:	0003      	movs	r3, r0
 80037ba:	220c      	movs	r2, #12
 80037bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037be:	2301      	movs	r3, #1
 80037c0:	425b      	negs	r3, r3
 80037c2:	e009      	b.n	80037d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c4:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ca:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	18d2      	adds	r2, r2, r3
 80037d2:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <_sbrk+0x64>)
 80037d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b006      	add	sp, #24
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20024000 	.word	0x20024000
 80037e4:	00000400 	.word	0x00000400
 80037e8:	20000508 	.word	0x20000508
 80037ec:	20002050 	.word	0x20002050

080037f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <read_temp>:
#include "main.h"
#include "tmp1075.h"

int read_temp(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, double *temp){
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	200b      	movs	r0, #11
 8003808:	183b      	adds	r3, r7, r0
 800380a:	1c0a      	adds	r2, r1, #0
 800380c:	701a      	strb	r2, [r3, #0]
	uint8_t raw_data[2] = {0};
 800380e:	2414      	movs	r4, #20
 8003810:	193b      	adds	r3, r7, r4
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
	if(read_reg(hi2c,dev_addr,TEMP_reg_addr,raw_data,2) != 0)
 8003816:	183b      	adds	r3, r7, r0
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	b299      	uxth	r1, r3
 800381c:	193b      	adds	r3, r7, r4
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	9200      	str	r2, [sp, #0]
 8003824:	2200      	movs	r2, #0
 8003826:	f000 f821 	bl	800386c <read_reg>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <read_temp+0x36>
		return 1;
 800382e:	2301      	movs	r3, #1
 8003830:	e015      	b.n	800385e <read_temp+0x62>
	*temp = ((raw_data[0] << 4) | (raw_data[1]) >> 4) * 0.0625; //0.0625C per LSB
 8003832:	2214      	movs	r2, #20
 8003834:	18bb      	adds	r3, r7, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	18ba      	adds	r2, r7, r2
 800383c:	7852      	ldrb	r2, [r2, #1]
 800383e:	0912      	lsrs	r2, r2, #4
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4313      	orrs	r3, r2
 8003844:	0018      	movs	r0, r3
 8003846:	f7fe fde7 	bl	8002418 <__aeabi_i2d>
 800384a:	2200      	movs	r2, #0
 800384c:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <read_temp+0x6c>)
 800384e:	f7fd fe95 	bl	800157c <__aeabi_dmul>
 8003852:	0002      	movs	r2, r0
 8003854:	000b      	movs	r3, r1
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	600a      	str	r2, [r1, #0]
 800385a:	604b      	str	r3, [r1, #4]
	return 0;
 800385c:	2300      	movs	r3, #0
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b007      	add	sp, #28
 8003864:	bd90      	pop	{r4, r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	3fb00000 	.word	0x3fb00000

0800386c <read_reg>:

int read_reg(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint8_t reg_addr, uint8_t *rx_data, uint8_t size){
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b087      	sub	sp, #28
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	0008      	movs	r0, r1
 8003876:	0011      	movs	r1, r2
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	240a      	movs	r4, #10
 800387c:	193b      	adds	r3, r7, r4
 800387e:	1c02      	adds	r2, r0, #0
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	2009      	movs	r0, #9
 8003884:	183b      	adds	r3, r7, r0
 8003886:	1c0a      	adds	r2, r1, #0
 8003888:	701a      	strb	r2, [r3, #0]

	if(HAL_I2C_Master_Transmit(hi2c, dev_addr, &reg_addr, 1, 100) != HAL_OK)
 800388a:	183a      	adds	r2, r7, r0
 800388c:	193b      	adds	r3, r7, r4
 800388e:	8819      	ldrh	r1, [r3, #0]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	2364      	movs	r3, #100	@ 0x64
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2301      	movs	r3, #1
 8003898:	f001 fb04 	bl	8004ea4 <HAL_I2C_Master_Transmit>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d001      	beq.n	80038a4 <read_reg+0x38>
		return 1;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e012      	b.n	80038ca <read_reg+0x5e>

	if(HAL_I2C_Master_Receive(hi2c, dev_addr, rx_data, size, 100) != HAL_OK)
 80038a4:	2320      	movs	r3, #32
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b29c      	uxth	r4, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	230a      	movs	r3, #10
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	8819      	ldrh	r1, [r3, #0]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	2364      	movs	r3, #100	@ 0x64
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	0023      	movs	r3, r4
 80038bc:	f001 fc1c 	bl	80050f8 <HAL_I2C_Master_Receive>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d001      	beq.n	80038c8 <read_reg+0x5c>
		return 1;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <read_reg+0x5e>

	return 0;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b005      	add	sp, #20
 80038d0:	bd90      	pop	{r4, r7, pc}

080038d2 <send_temps_via_usb>:
#include <string.h>
#include "usb_helpers.h"
#include "usbd_cdc_if.h"


void send_temps_via_usb(double current_temp_inside, double current_temp_outside){
 80038d2:	b5b0      	push	{r4, r5, r7, lr}
 80038d4:	b08c      	sub	sp, #48	@ 0x30
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60b8      	str	r0, [r7, #8]
 80038da:	60f9      	str	r1, [r7, #12]
 80038dc:	603a      	str	r2, [r7, #0]
 80038de:	607b      	str	r3, [r7, #4]
	uint8_t usb_tx_data[20] = {0};
 80038e0:	2514      	movs	r5, #20
 80038e2:	197b      	adds	r3, r7, r5
 80038e4:	0018      	movs	r0, r3
 80038e6:	2314      	movs	r3, #20
 80038e8:	001a      	movs	r2, r3
 80038ea:	2100      	movs	r1, #0
 80038ec:	f00b fb04 	bl	800eef8 <memset>
	put_temps_into_char_array(current_temp_inside, current_temp_outside, usb_tx_data, 20);
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	68f9      	ldr	r1, [r7, #12]
 80038f8:	2414      	movs	r4, #20
 80038fa:	9401      	str	r4, [sp, #4]
 80038fc:	197c      	adds	r4, r7, r5
 80038fe:	9400      	str	r4, [sp, #0]
 8003900:	f000 f85a 	bl	80039b8 <put_temps_into_char_array>
	CDC_Transmit_FS(usb_tx_data, 20);
 8003904:	197b      	adds	r3, r7, r5
 8003906:	2114      	movs	r1, #20
 8003908:	0018      	movs	r0, r3
 800390a:	f009 f9ed 	bl	800cce8 <CDC_Transmit_FS>
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b00a      	add	sp, #40	@ 0x28
 8003914:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003918 <listen_for_temp_change_sent_via_usb>:

void listen_for_temp_change_sent_via_usb(double *set_temp_inside){
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	uint32_t len = 20;
 8003920:	2314      	movs	r3, #20
 8003922:	60fb      	str	r3, [r7, #12]
	static uint8_t usb_rx_data[20] = {0};
	CDC_Receive(usb_rx_data, &len);
 8003924:	230c      	movs	r3, #12
 8003926:	18fa      	adds	r2, r7, r3
 8003928:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <listen_for_temp_change_sent_via_usb+0x48>)
 800392a:	0011      	movs	r1, r2
 800392c:	0018      	movs	r0, r3
 800392e:	f009 f97b 	bl	800cc28 <CDC_Receive>

	if(usb_rx_data[0] != '\0' && string_to_double(usb_rx_data, 20, set_temp_inside) != 1){
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <listen_for_temp_change_sent_via_usb+0x48>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00e      	beq.n	8003958 <listen_for_temp_change_sent_via_usb+0x40>
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <listen_for_temp_change_sent_via_usb+0x48>)
 800393e:	2114      	movs	r1, #20
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f80f 	bl	8003964 <string_to_double>
 8003946:	0003      	movs	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d005      	beq.n	8003958 <listen_for_temp_change_sent_via_usb+0x40>
		memset(usb_rx_data, 0, 20);
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <listen_for_temp_change_sent_via_usb+0x48>)
 800394e:	2214      	movs	r2, #20
 8003950:	2100      	movs	r1, #0
 8003952:	0018      	movs	r0, r3
 8003954:	f00b fad0 	bl	800eef8 <memset>
	}
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000050c 	.word	0x2000050c

08003964 <string_to_double>:


int string_to_double(uint8_t *data, uint8_t size, double *result){
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	230b      	movs	r3, #11
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	1c0a      	adds	r2, r1, #0
 8003974:	701a      	strb	r2, [r3, #0]
	char *endptr = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
	double temp = strtod((const char*)data, &endptr);
 800397a:	2314      	movs	r3, #20
 800397c:	18fa      	adds	r2, r7, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0011      	movs	r1, r2
 8003982:	0018      	movs	r0, r3
 8003984:	f00a fd04 	bl	800e390 <strtod>
 8003988:	0002      	movs	r2, r0
 800398a:	000b      	movs	r3, r1
 800398c:	61ba      	str	r2, [r7, #24]
 800398e:	61fb      	str	r3, [r7, #28]

	if (*endptr != '\0' && *endptr != '\n')
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <string_to_double+0x40>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b0a      	cmp	r3, #10
 800399e:	d001      	beq.n	80039a4 <string_to_double+0x40>
		return 1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e005      	b.n	80039b0 <string_to_double+0x4c>

	*result = temp;
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	600a      	str	r2, [r1, #0]
 80039ac:	604b      	str	r3, [r1, #4]
	return 0;
 80039ae:	2300      	movs	r3, #0

}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b008      	add	sp, #32
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <put_temps_into_char_array>:
int put_temps_into_char_array(double temp1, double temp2, uint8_t *char_array, uint8_t size){
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b089      	sub	sp, #36	@ 0x24
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60b8      	str	r0, [r7, #8]
 80039c0:	60f9      	str	r1, [r7, #12]
 80039c2:	603a      	str	r2, [r7, #0]
 80039c4:	607b      	str	r3, [r7, #4]
	memset(char_array,0, size);
 80039c6:	2424      	movs	r4, #36	@ 0x24
 80039c8:	193b      	adds	r3, r7, r4
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2100      	movs	r1, #0
 80039d0:	0018      	movs	r0, r3
 80039d2:	f00b fa91 	bl	800eef8 <memset>
	snprintf((char*)char_array, size, "%.1lf, %.1lf\n", temp1, temp2);
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	7819      	ldrb	r1, [r3, #0]
 80039da:	4c09      	ldr	r4, [pc, #36]	@ (8003a00 <put_temps_into_char_array+0x48>)
 80039dc:	6a38      	ldr	r0, [r7, #32]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9202      	str	r2, [sp, #8]
 80039e4:	9303      	str	r3, [sp, #12]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	9200      	str	r2, [sp, #0]
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	0022      	movs	r2, r4
 80039f0:	f00b fa00 	bl	800edf4 <sniprintf>
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b005      	add	sp, #20
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	08011b60 	.word	0x08011b60

08003a04 <Reset_Handler>:
 8003a04:	480d      	ldr	r0, [pc, #52]	@ (8003a3c <LoopForever+0x2>)
 8003a06:	4685      	mov	sp, r0
 8003a08:	f7ff fef2 	bl	80037f0 <SystemInit>
 8003a0c:	480c      	ldr	r0, [pc, #48]	@ (8003a40 <LoopForever+0x6>)
 8003a0e:	490d      	ldr	r1, [pc, #52]	@ (8003a44 <LoopForever+0xa>)
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <LoopForever+0xe>)
 8003a12:	2300      	movs	r3, #0
 8003a14:	e002      	b.n	8003a1c <LoopCopyDataInit>

08003a16 <CopyDataInit>:
 8003a16:	58d4      	ldr	r4, [r2, r3]
 8003a18:	50c4      	str	r4, [r0, r3]
 8003a1a:	3304      	adds	r3, #4

08003a1c <LoopCopyDataInit>:
 8003a1c:	18c4      	adds	r4, r0, r3
 8003a1e:	428c      	cmp	r4, r1
 8003a20:	d3f9      	bcc.n	8003a16 <CopyDataInit>
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <LoopForever+0x12>)
 8003a24:	4c0a      	ldr	r4, [pc, #40]	@ (8003a50 <LoopForever+0x16>)
 8003a26:	2300      	movs	r3, #0
 8003a28:	e001      	b.n	8003a2e <LoopFillZerobss>

08003a2a <FillZerobss>:
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	3204      	adds	r2, #4

08003a2e <LoopFillZerobss>:
 8003a2e:	42a2      	cmp	r2, r4
 8003a30:	d3fb      	bcc.n	8003a2a <FillZerobss>
 8003a32:	f00b fad3 	bl	800efdc <__libc_init_array>
 8003a36:	f7fe ff45 	bl	80028c4 <main>

08003a3a <LoopForever>:
 8003a3a:	e7fe      	b.n	8003a3a <LoopForever>
 8003a3c:	20024000 	.word	0x20024000
 8003a40:	20000000 	.word	0x20000000
 8003a44:	200002c8 	.word	0x200002c8
 8003a48:	0801217c 	.word	0x0801217c
 8003a4c:	200002c8 	.word	0x200002c8
 8003a50:	20002050 	.word	0x20002050

08003a54 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:
 8003a54:	e7fe      	b.n	8003a54 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>
	...

08003a58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a64:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <HAL_Init+0x3c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_Init+0x3c>)
 8003a6a:	2180      	movs	r1, #128	@ 0x80
 8003a6c:	0049      	lsls	r1, r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a72:	2003      	movs	r0, #3
 8003a74:	f000 f810 	bl	8003a98 <HAL_InitTick>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e001      	b.n	8003a88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7ff fbd0 	bl	8003228 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40022000 	.word	0x40022000

08003a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa0:	230f      	movs	r3, #15
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_InitTick+0x88>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02b      	beq.n	8003b08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_InitTick+0x8c>)
 8003ab2:	681c      	ldr	r4, [r3, #0]
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_InitTick+0x88>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	0019      	movs	r1, r3
 8003aba:	23fa      	movs	r3, #250	@ 0xfa
 8003abc:	0098      	lsls	r0, r3, #2
 8003abe:	f7fc fb3b 	bl	8000138 <__udivsi3>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0020      	movs	r0, r4
 8003ac8:	f7fc fb36 	bl	8000138 <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 ff3f 	bl	8004952 <HAL_SYSTICK_Config>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d112      	bne.n	8003afe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d80a      	bhi.n	8003af4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	425b      	negs	r3, r3
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 ff0e 	bl	8004908 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_InitTick+0x90>)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e00d      	b.n	8003b10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003af4:	230f      	movs	r3, #15
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	e008      	b.n	8003b10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003afe:	230f      	movs	r3, #15
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e003      	b.n	8003b10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b08:	230f      	movs	r3, #15
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003b10:	230f      	movs	r3, #15
 8003b12:	18fb      	adds	r3, r7, r3
 8003b14:	781b      	ldrb	r3, [r3, #0]
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b005      	add	sp, #20
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	46c0      	nop			@ (mov r8, r8)
 8003b20:	20000008 	.word	0x20000008
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000004 	.word	0x20000004

08003b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b30:	4b05      	ldr	r3, [pc, #20]	@ (8003b48 <HAL_IncTick+0x1c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	001a      	movs	r2, r3
 8003b36:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <HAL_IncTick+0x20>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	18d2      	adds	r2, r2, r3
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_IncTick+0x20>)
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	20000520 	.word	0x20000520

08003b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  return uwTick;
 8003b54:	4b02      	ldr	r3, [pc, #8]	@ (8003b60 <HAL_GetTick+0x10>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	20000520 	.word	0x20000520

08003b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	d005      	beq.n	8003b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <HAL_Delay+0x44>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	001a      	movs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	f7ff ffe0 	bl	8003b50 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d8f7      	bhi.n	8003b8c <HAL_Delay+0x28>
  {
  }
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b004      	add	sp, #16
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	20000008 	.word	0x20000008

08003bac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003bb4:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	fffff9ff 	.word	0xfffff9ff

08003bd8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a05      	ldr	r2, [pc, #20]	@ (8003bfc <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003be8:	401a      	ands	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	b002      	add	sp, #8
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	fe3fffff 	.word	0xfe3fffff

08003c00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	23e0      	movs	r3, #224	@ 0xe0
 8003c0e:	045b      	lsls	r3, r3, #17
 8003c10:	4013      	ands	r3, r2
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	400a      	ands	r2, r1
 8003c30:	2107      	movs	r1, #7
 8003c32:	4091      	lsls	r1, r2
 8003c34:	000a      	movs	r2, r1
 8003c36:	43d2      	mvns	r2, r2
 8003c38:	401a      	ands	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	400b      	ands	r3, r1
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4099      	lsls	r1, r3
 8003c44:	000b      	movs	r3, r1
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b004      	add	sp, #16
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	2104      	movs	r1, #4
 8003c66:	400a      	ands	r2, r1
 8003c68:	2107      	movs	r1, #7
 8003c6a:	4091      	lsls	r1, r2
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2104      	movs	r1, #4
 8003c74:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003c76:	40da      	lsrs	r2, r3
 8003c78:	0013      	movs	r3, r2
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	23c0      	movs	r3, #192	@ 0xc0
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	4013      	ands	r3, r2
 8003c94:	d101      	bne.n	8003c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	211f      	movs	r1, #31
 8003cb8:	400a      	ands	r2, r1
 8003cba:	210f      	movs	r1, #15
 8003cbc:	4091      	lsls	r1, r2
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	43d2      	mvns	r2, r2
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0e9b      	lsrs	r3, r3, #26
 8003cc8:	210f      	movs	r1, #15
 8003cca:	4019      	ands	r1, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	201f      	movs	r0, #31
 8003cd0:	4003      	ands	r3, r0
 8003cd2:	4099      	lsls	r1, r3
 8003cd4:	000b      	movs	r3, r1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	035b      	lsls	r3, r3, #13
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	0352      	lsls	r2, r2, #13
 8003d18:	0b52      	lsrs	r2, r2, #13
 8003d1a:	43d2      	mvns	r2, r2
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b002      	add	sp, #8
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2203      	movs	r2, #3
 8003d38:	4013      	ands	r3, r2
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	0212      	lsls	r2, r2, #8
 8003d58:	43d2      	mvns	r2, r2
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	400b      	ands	r3, r1
 8003d64:	4904      	ldr	r1, [pc, #16]	@ (8003d78 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	07ffff00 	.word	0x07ffff00

08003d7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4a05      	ldr	r2, [pc, #20]	@ (8003da0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2280      	movs	r2, #128	@ 0x80
 8003d8e:	0552      	lsls	r2, r2, #21
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	6fffffe8 	.word	0x6fffffe8

08003da4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	2380      	movs	r3, #128	@ 0x80
 8003db2:	055b      	lsls	r3, r3, #21
 8003db4:	401a      	ands	r2, r3
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	055b      	lsls	r3, r3, #21
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d101      	bne.n	8003dc2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <LL_ADC_IsEnabled+0x18>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <LL_ADC_IsEnabled+0x1a>
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b002      	add	sp, #8
 8003dec:	bd80      	pop	{r7, pc}

08003dee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e18:	231f      	movs	r3, #31
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e17f      	b.n	8004136 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10a      	bne.n	8003e54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff fa19 	bl	8003278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2254      	movs	r2, #84	@ 0x54
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff ffa3 	bl	8003da4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e5e:	1e03      	subs	r3, r0, #0
 8003e60:	d115      	bne.n	8003e8e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff ff88 	bl	8003d7c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e6c:	4bb4      	ldr	r3, [pc, #720]	@ (8004140 <HAL_ADC_Init+0x330>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	49b4      	ldr	r1, [pc, #720]	@ (8004144 <HAL_ADC_Init+0x334>)
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7fc f960 	bl	8000138 <__udivsi3>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e80:	e002      	b.n	8003e88 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f9      	bne.n	8003e82 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff ff86 	bl	8003da4 <LL_ADC_IsInternalRegulatorEnabled>
 8003e98:	1e03      	subs	r3, r0, #0
 8003e9a:	d10f      	bne.n	8003ebc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea0:	2210      	movs	r2, #16
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	2201      	movs	r2, #1
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003eb4:	231f      	movs	r3, #31
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff ff94 	bl	8003dee <LL_ADC_REG_IsConversionOngoing>
 8003ec6:	0003      	movs	r3, r0
 8003ec8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	2210      	movs	r2, #16
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d000      	beq.n	8003ed6 <HAL_ADC_Init+0xc6>
 8003ed4:	e122      	b.n	800411c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d000      	beq.n	8003ede <HAL_ADC_Init+0xce>
 8003edc:	e11e      	b.n	800411c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	4a99      	ldr	r2, [pc, #612]	@ (8004148 <HAL_ADC_Init+0x338>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff ff6a 	bl	8003dcc <LL_ADC_IsEnabled>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d000      	beq.n	8003efe <HAL_ADC_Init+0xee>
 8003efc:	e0ad      	b.n	800405a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7e1b      	ldrb	r3, [r3, #24]
 8003f06:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f08:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7e5b      	ldrb	r3, [r3, #25]
 8003f0e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003f10:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7e9b      	ldrb	r3, [r3, #26]
 8003f16:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003f18:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_ADC_Init+0x118>
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	015b      	lsls	r3, r3, #5
 8003f26:	e000      	b.n	8003f2a <HAL_ADC_Init+0x11a>
 8003f28:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003f2a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003f30:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da04      	bge.n	8003f44 <HAL_ADC_Init+0x134>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	e001      	b.n	8003f48 <HAL_ADC_Init+0x138>
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8003f48:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	212c      	movs	r1, #44	@ 0x2c
 8003f4e:	5c5b      	ldrb	r3, [r3, r1]
 8003f50:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003f52:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	5c9b      	ldrb	r3, [r3, r2]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d115      	bne.n	8003f90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7e9b      	ldrb	r3, [r3, #26]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	0252      	lsls	r2, r2, #9
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e00b      	b.n	8003f90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	2201      	movs	r2, #1
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f9c:	23e0      	movs	r3, #224	@ 0xe0
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a65      	ldr	r2, [pc, #404]	@ (800414c <HAL_ADC_Init+0x33c>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0f9b      	lsrs	r3, r3, #30
 8003fca:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223c      	movs	r2, #60	@ 0x3c
 8003fdc:	5c9b      	ldrb	r3, [r3, r2]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d111      	bne.n	8004006 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	0f9b      	lsrs	r3, r3, #30
 8003fe8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003fee:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8003ff4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8003ffa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	2201      	movs	r2, #1
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4a50      	ldr	r2, [pc, #320]	@ (8004150 <HAL_ADC_Init+0x340>)
 800400e:	4013      	ands	r3, r2
 8004010:	0019      	movs	r1, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	430a      	orrs	r2, r1
 800401a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	23c0      	movs	r3, #192	@ 0xc0
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	429a      	cmp	r2, r3
 8004026:	d018      	beq.n	800405a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800402c:	2380      	movs	r3, #128	@ 0x80
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	429a      	cmp	r2, r3
 8004032:	d012      	beq.n	800405a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004038:	2380      	movs	r3, #128	@ 0x80
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	429a      	cmp	r2, r3
 800403e:	d00c      	beq.n	800405a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004040:	4b44      	ldr	r3, [pc, #272]	@ (8004154 <HAL_ADC_Init+0x344>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a44      	ldr	r2, [pc, #272]	@ (8004158 <HAL_ADC_Init+0x348>)
 8004046:	4013      	ands	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	23f0      	movs	r3, #240	@ 0xf0
 8004050:	039b      	lsls	r3, r3, #14
 8004052:	401a      	ands	r2, r3
 8004054:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <HAL_ADC_Init+0x344>)
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004062:	001a      	movs	r2, r3
 8004064:	2100      	movs	r1, #0
 8004066:	f7ff fdd8 	bl	8003c1a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	493a      	ldr	r1, [pc, #232]	@ (800415c <HAL_ADC_Init+0x34c>)
 8004074:	001a      	movs	r2, r3
 8004076:	f7ff fdd0 	bl	8003c1a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2110      	movs	r1, #16
 800408e:	4249      	negs	r1, r1
 8004090:	430a      	orrs	r2, r1
 8004092:	629a      	str	r2, [r3, #40]	@ 0x28
 8004094:	e018      	b.n	80040c8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	039b      	lsls	r3, r3, #14
 800409e:	429a      	cmp	r2, r3
 80040a0:	d112      	bne.n	80040c8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	221c      	movs	r2, #28
 80040b2:	4013      	ands	r3, r2
 80040b4:	2210      	movs	r2, #16
 80040b6:	4252      	negs	r2, r2
 80040b8:	409a      	lsls	r2, r3
 80040ba:	0011      	movs	r1, r2
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2100      	movs	r1, #0
 80040ce:	0018      	movs	r0, r3
 80040d0:	f7ff fdc0 	bl	8003c54 <LL_ADC_GetSamplingTimeCommonChannels>
 80040d4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10b      	bne.n	80040f6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e8:	2203      	movs	r2, #3
 80040ea:	4393      	bics	r3, r2
 80040ec:	2201      	movs	r2, #1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80040f4:	e01c      	b.n	8004130 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	2212      	movs	r2, #18
 80040fc:	4393      	bics	r3, r2
 80040fe:	2210      	movs	r2, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410a:	2201      	movs	r2, #1
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004112:	231f      	movs	r3, #31
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800411a:	e009      	b.n	8004130 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	2210      	movs	r2, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004128:	231f      	movs	r3, #31
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004130:	231f      	movs	r3, #31
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b008      	add	sp, #32
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	20000000 	.word	0x20000000
 8004144:	00030d40 	.word	0x00030d40
 8004148:	fffffefd 	.word	0xfffffefd
 800414c:	ffde0201 	.word	0xffde0201
 8004150:	1ffffc02 	.word	0x1ffffc02
 8004154:	40012708 	.word	0x40012708
 8004158:	ffc3ffff 	.word	0xffc3ffff
 800415c:	07ffff04 	.word	0x07ffff04

08004160 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2202      	movs	r2, #2
 8004180:	4013      	ands	r3, r2
 8004182:	d017      	beq.n	80041b4 <HAL_ADC_IRQHandler+0x54>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d013      	beq.n	80041b4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004190:	2210      	movs	r2, #16
 8004192:	4013      	ands	r3, r2
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	2280      	movs	r2, #128	@ 0x80
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 faf2 	bl	8004790 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2202      	movs	r2, #2
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d003      	beq.n	80041c4 <HAL_ADC_IRQHandler+0x64>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2204      	movs	r2, #4
 80041c0:	4013      	ands	r3, r2
 80041c2:	d107      	bne.n	80041d4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2208      	movs	r2, #8
 80041c8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041ca:	d04d      	beq.n	8004268 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2208      	movs	r2, #8
 80041d0:	4013      	ands	r3, r2
 80041d2:	d049      	beq.n	8004268 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	d106      	bne.n	80041ec <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7ff fd46 	bl	8003c82 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d02e      	beq.n	8004258 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7e9b      	ldrb	r3, [r3, #26]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d12a      	bne.n	8004258 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2208      	movs	r2, #8
 800420a:	4013      	ands	r3, r2
 800420c:	2b08      	cmp	r3, #8
 800420e:	d123      	bne.n	8004258 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fdea 	bl	8003dee <LL_ADC_REG_IsConversionOngoing>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d110      	bne.n	8004240 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	210c      	movs	r1, #12
 800422a:	438a      	bics	r2, r1
 800422c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004232:	4a56      	ldr	r2, [pc, #344]	@ (800438c <HAL_ADC_IRQHandler+0x22c>)
 8004234:	4013      	ands	r3, r2
 8004236:	2201      	movs	r2, #1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	659a      	str	r2, [r3, #88]	@ 0x58
 800423e:	e00b      	b.n	8004258 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	2220      	movs	r2, #32
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004250:	2201      	movs	r2, #1
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f000 f898 	bl	8004390 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	220c      	movs	r2, #12
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2280      	movs	r2, #128	@ 0x80
 800426c:	4013      	ands	r3, r2
 800426e:	d012      	beq.n	8004296 <HAL_ADC_IRQHandler+0x136>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	4013      	ands	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	2280      	movs	r2, #128	@ 0x80
 800427e:	0252      	lsls	r2, r2, #9
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f000 f889 	bl	80043a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2280      	movs	r2, #128	@ 0x80
 8004294:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	2380      	movs	r3, #128	@ 0x80
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4013      	ands	r3, r2
 800429e:	d014      	beq.n	80042ca <HAL_ADC_IRQHandler+0x16a>
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	d00f      	beq.n	80042ca <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	0292      	lsls	r2, r2, #10
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 fa58 	bl	8004770 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2280      	movs	r2, #128	@ 0x80
 80042c6:	0052      	lsls	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d014      	beq.n	80042fe <HAL_ADC_IRQHandler+0x19e>
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4013      	ands	r3, r2
 80042dc:	d00f      	beq.n	80042fe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	02d2      	lsls	r2, r2, #11
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 fa46 	bl	8004780 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2210      	movs	r2, #16
 8004302:	4013      	ands	r3, r2
 8004304:	d02b      	beq.n	800435e <HAL_ADC_IRQHandler+0x1fe>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2210      	movs	r2, #16
 800430a:	4013      	ands	r3, r2
 800430c:	d027      	beq.n	800435e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004316:	2301      	movs	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e008      	b.n	800432e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	0018      	movs	r0, r3
 8004322:	f7ff fd02 	bl	8003d2a <LL_ADC_REG_GetDMATransfer>
 8004326:	1e03      	subs	r3, r0, #0
 8004328:	d001      	beq.n	800432e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800432a:	2301      	movs	r3, #1
 800432c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d110      	bne.n	8004356 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	2280      	movs	r2, #128	@ 0x80
 800433a:	00d2      	lsls	r2, r2, #3
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	2202      	movs	r2, #2
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0018      	movs	r0, r3
 8004352:	f000 f82d 	bl	80043b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2210      	movs	r2, #16
 800435c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	2380      	movs	r3, #128	@ 0x80
 8004362:	019b      	lsls	r3, r3, #6
 8004364:	4013      	ands	r3, r2
 8004366:	d00d      	beq.n	8004384 <HAL_ADC_IRQHandler+0x224>
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	4013      	ands	r3, r2
 8004370:	d008      	beq.n	8004384 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 fa13 	bl	80047a0 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	0192      	lsls	r2, r2, #6
 8004382:	601a      	str	r2, [r3, #0]
  }
}
 8004384:	46c0      	nop			@ (mov r8, r8)
 8004386:	46bd      	mov	sp, r7
 8004388:	b006      	add	sp, #24
 800438a:	bd80      	pop	{r7, pc}
 800438c:	fffffefe 	.word	0xfffffefe

08004390 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004398:	46c0      	nop			@ (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b002      	add	sp, #8
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80043a8:	46c0      	nop			@ (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b002      	add	sp, #8
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ca:	2317      	movs	r3, #23
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2254      	movs	r2, #84	@ 0x54
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x24>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e1c0      	b.n	8004766 <HAL_ADC_ConfigChannel+0x3a6>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2254      	movs	r2, #84	@ 0x54
 80043e8:	2101      	movs	r1, #1
 80043ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fcfc 	bl	8003dee <LL_ADC_REG_IsConversionOngoing>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d000      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x3c>
 80043fa:	e1a3      	b.n	8004744 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d100      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x46>
 8004404:	e143      	b.n	800468e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	429a      	cmp	r2, r3
 8004410:	d004      	beq.n	800441c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004416:	4ac1      	ldr	r2, [pc, #772]	@ (800471c <HAL_ADC_ConfigChannel+0x35c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d108      	bne.n	800442e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	0019      	movs	r1, r3
 8004426:	0010      	movs	r0, r2
 8004428:	f7ff fc5c 	bl	8003ce4 <LL_ADC_REG_SetSequencerChAdd>
 800442c:	e0c9      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	211f      	movs	r1, #31
 8004438:	400b      	ands	r3, r1
 800443a:	210f      	movs	r1, #15
 800443c:	4099      	lsls	r1, r3
 800443e:	000b      	movs	r3, r1
 8004440:	43db      	mvns	r3, r3
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	035b      	lsls	r3, r3, #13
 800444c:	0b5b      	lsrs	r3, r3, #13
 800444e:	d105      	bne.n	800445c <HAL_ADC_ConfigChannel+0x9c>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	0e9b      	lsrs	r3, r3, #26
 8004456:	221f      	movs	r2, #31
 8004458:	4013      	ands	r3, r2
 800445a:	e098      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	d000      	beq.n	8004468 <HAL_ADC_ConfigChannel+0xa8>
 8004466:	e091      	b.n	800458c <HAL_ADC_ConfigChannel+0x1cc>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2202      	movs	r2, #2
 800446e:	4013      	ands	r3, r2
 8004470:	d000      	beq.n	8004474 <HAL_ADC_ConfigChannel+0xb4>
 8004472:	e089      	b.n	8004588 <HAL_ADC_ConfigChannel+0x1c8>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2204      	movs	r2, #4
 800447a:	4013      	ands	r3, r2
 800447c:	d000      	beq.n	8004480 <HAL_ADC_ConfigChannel+0xc0>
 800447e:	e081      	b.n	8004584 <HAL_ADC_ConfigChannel+0x1c4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	4013      	ands	r3, r2
 8004488:	d000      	beq.n	800448c <HAL_ADC_ConfigChannel+0xcc>
 800448a:	e079      	b.n	8004580 <HAL_ADC_ConfigChannel+0x1c0>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2210      	movs	r2, #16
 8004492:	4013      	ands	r3, r2
 8004494:	d000      	beq.n	8004498 <HAL_ADC_ConfigChannel+0xd8>
 8004496:	e071      	b.n	800457c <HAL_ADC_ConfigChannel+0x1bc>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2220      	movs	r2, #32
 800449e:	4013      	ands	r3, r2
 80044a0:	d000      	beq.n	80044a4 <HAL_ADC_ConfigChannel+0xe4>
 80044a2:	e069      	b.n	8004578 <HAL_ADC_ConfigChannel+0x1b8>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2240      	movs	r2, #64	@ 0x40
 80044aa:	4013      	ands	r3, r2
 80044ac:	d000      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0xf0>
 80044ae:	e061      	b.n	8004574 <HAL_ADC_ConfigChannel+0x1b4>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2280      	movs	r2, #128	@ 0x80
 80044b6:	4013      	ands	r3, r2
 80044b8:	d000      	beq.n	80044bc <HAL_ADC_ConfigChannel+0xfc>
 80044ba:	e059      	b.n	8004570 <HAL_ADC_ConfigChannel+0x1b0>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4013      	ands	r3, r2
 80044c6:	d151      	bne.n	800456c <HAL_ADC_ConfigChannel+0x1ac>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4013      	ands	r3, r2
 80044d2:	d149      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x1a8>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	@ 0x80
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4013      	ands	r3, r2
 80044de:	d141      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x1a4>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	@ 0x80
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	d139      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1a0>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	015b      	lsls	r3, r3, #5
 80044f4:	4013      	ands	r3, r2
 80044f6:	d131      	bne.n	800455c <HAL_ADC_ConfigChannel+0x19c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	019b      	lsls	r3, r3, #6
 8004500:	4013      	ands	r3, r2
 8004502:	d129      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x198>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	4013      	ands	r3, r2
 800450e:	d121      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x194>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2380      	movs	r3, #128	@ 0x80
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	4013      	ands	r3, r2
 800451a:	d119      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x190>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	025b      	lsls	r3, r3, #9
 8004524:	4013      	ands	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_ADC_ConfigChannel+0x18c>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	@ 0x80
 800452e:	029b      	lsls	r3, r3, #10
 8004530:	4013      	ands	r3, r2
 8004532:	d109      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x188>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	02db      	lsls	r3, r3, #11
 800453c:	4013      	ands	r3, r2
 800453e:	d001      	beq.n	8004544 <HAL_ADC_ConfigChannel+0x184>
 8004540:	2312      	movs	r3, #18
 8004542:	e024      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004544:	2300      	movs	r3, #0
 8004546:	e022      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004548:	2311      	movs	r3, #17
 800454a:	e020      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800454c:	2310      	movs	r3, #16
 800454e:	e01e      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004550:	230f      	movs	r3, #15
 8004552:	e01c      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004554:	230e      	movs	r3, #14
 8004556:	e01a      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004558:	230d      	movs	r3, #13
 800455a:	e018      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800455c:	230c      	movs	r3, #12
 800455e:	e016      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004560:	230b      	movs	r3, #11
 8004562:	e014      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004564:	230a      	movs	r3, #10
 8004566:	e012      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004568:	2309      	movs	r3, #9
 800456a:	e010      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800456c:	2308      	movs	r3, #8
 800456e:	e00e      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004570:	2307      	movs	r3, #7
 8004572:	e00c      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004574:	2306      	movs	r3, #6
 8004576:	e00a      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004578:	2305      	movs	r3, #5
 800457a:	e008      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800457c:	2304      	movs	r3, #4
 800457e:	e006      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004580:	2303      	movs	r3, #3
 8004582:	e004      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004584:	2302      	movs	r3, #2
 8004586:	e002      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_ADC_ConfigChannel+0x1ce>
 800458c:	2300      	movs	r3, #0
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	6852      	ldr	r2, [r2, #4]
 8004592:	201f      	movs	r0, #31
 8004594:	4002      	ands	r2, r0
 8004596:	4093      	lsls	r3, r2
 8004598:	000a      	movs	r2, r1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d808      	bhi.n	80045c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	001a      	movs	r2, r3
 80045be:	f7ff fb71 	bl	8003ca4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	001a      	movs	r2, r3
 80045d0:	f7ff fbb8 	bl	8003d44 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	db00      	blt.n	80045de <HAL_ADC_ConfigChannel+0x21e>
 80045dc:	e0bc      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045de:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff fb0d 	bl	8003c00 <LL_ADC_GetCommonPathInternalCh>
 80045e6:	0003      	movs	r3, r0
 80045e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004724 <HAL_ADC_ConfigChannel+0x364>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d122      	bne.n	800463a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	2380      	movs	r3, #128	@ 0x80
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80045fc:	d11d      	bne.n	800463a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	0412      	lsls	r2, r2, #16
 8004604:	4313      	orrs	r3, r2
 8004606:	4a46      	ldr	r2, [pc, #280]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 8004608:	0019      	movs	r1, r3
 800460a:	0010      	movs	r0, r2
 800460c:	f7ff fae4 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004610:	4b45      	ldr	r3, [pc, #276]	@ (8004728 <HAL_ADC_ConfigChannel+0x368>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4945      	ldr	r1, [pc, #276]	@ (800472c <HAL_ADC_ConfigChannel+0x36c>)
 8004616:	0018      	movs	r0, r3
 8004618:	f7fb fd8e 	bl	8000138 <__udivsi3>
 800461c:	0003      	movs	r3, r0
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	0013      	movs	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	189b      	adds	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800462a:	e002      	b.n	8004632 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3b01      	subs	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f9      	bne.n	800462c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004638:	e08e      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3c      	ldr	r2, [pc, #240]	@ (8004730 <HAL_ADC_ConfigChannel+0x370>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10e      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	045b      	lsls	r3, r3, #17
 800464a:	4013      	ands	r3, r2
 800464c:	d109      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2280      	movs	r2, #128	@ 0x80
 8004652:	0452      	lsls	r2, r2, #17
 8004654:	4313      	orrs	r3, r2
 8004656:	4a32      	ldr	r2, [pc, #200]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 8004658:	0019      	movs	r1, r3
 800465a:	0010      	movs	r0, r2
 800465c:	f7ff fabc 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
 8004660:	e07a      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a33      	ldr	r2, [pc, #204]	@ (8004734 <HAL_ADC_ConfigChannel+0x374>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d000      	beq.n	800466e <HAL_ADC_ConfigChannel+0x2ae>
 800466c:	e074      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	2380      	movs	r3, #128	@ 0x80
 8004672:	03db      	lsls	r3, r3, #15
 8004674:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004676:	d000      	beq.n	800467a <HAL_ADC_ConfigChannel+0x2ba>
 8004678:	e06e      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2280      	movs	r2, #128	@ 0x80
 800467e:	03d2      	lsls	r2, r2, #15
 8004680:	4313      	orrs	r3, r2
 8004682:	4a27      	ldr	r2, [pc, #156]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 8004684:	0019      	movs	r1, r3
 8004686:	0010      	movs	r0, r2
 8004688:	f7ff faa6 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
 800468c:	e064      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	429a      	cmp	r2, r3
 8004698:	d004      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800469e:	4a1f      	ldr	r2, [pc, #124]	@ (800471c <HAL_ADC_ConfigChannel+0x35c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d107      	bne.n	80046b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0019      	movs	r1, r3
 80046ae:	0010      	movs	r0, r2
 80046b0:	f7ff fb29 	bl	8003d06 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	da4d      	bge.n	8004758 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046bc:	4b18      	ldr	r3, [pc, #96]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff fa9e 	bl	8003c00 <LL_ADC_GetCommonPathInternalCh>
 80046c4:	0003      	movs	r3, r0
 80046c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <HAL_ADC_ConfigChannel+0x364>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_ADC_ConfigChannel+0x378>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	4a11      	ldr	r2, [pc, #68]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 80046da:	0019      	movs	r1, r3
 80046dc:	0010      	movs	r0, r2
 80046de:	f7ff fa7b 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
 80046e2:	e039      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <HAL_ADC_ConfigChannel+0x370>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a12      	ldr	r2, [pc, #72]	@ (800473c <HAL_ADC_ConfigChannel+0x37c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 80046f6:	0019      	movs	r1, r3
 80046f8:	0010      	movs	r0, r2
 80046fa:	f7ff fa6d 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
 80046fe:	e02b      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0b      	ldr	r2, [pc, #44]	@ (8004734 <HAL_ADC_ConfigChannel+0x374>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d126      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4a0c      	ldr	r2, [pc, #48]	@ (8004740 <HAL_ADC_ConfigChannel+0x380>)
 800470e:	4013      	ands	r3, r2
 8004710:	4a03      	ldr	r2, [pc, #12]	@ (8004720 <HAL_ADC_ConfigChannel+0x360>)
 8004712:	0019      	movs	r1, r3
 8004714:	0010      	movs	r0, r2
 8004716:	f7ff fa5f 	bl	8003bd8 <LL_ADC_SetCommonPathInternalCh>
 800471a:	e01d      	b.n	8004758 <HAL_ADC_ConfigChannel+0x398>
 800471c:	80000004 	.word	0x80000004
 8004720:	40012708 	.word	0x40012708
 8004724:	b0001000 	.word	0xb0001000
 8004728:	20000000 	.word	0x20000000
 800472c:	00030d40 	.word	0x00030d40
 8004730:	b8004000 	.word	0xb8004000
 8004734:	b4002000 	.word	0xb4002000
 8004738:	ff7fffff 	.word	0xff7fffff
 800473c:	feffffff 	.word	0xfeffffff
 8004740:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	2220      	movs	r2, #32
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004750:	2317      	movs	r3, #23
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2254      	movs	r2, #84	@ 0x54
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004760:	2317      	movs	r3, #23
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	781b      	ldrb	r3, [r3, #0]
}
 8004766:	0018      	movs	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	b006      	add	sp, #24
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)

08004770 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004788:	46c0      	nop			@ (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004798:	46c0      	nop			@ (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80047a8:	46c0      	nop			@ (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	0002      	movs	r2, r0
 80047b8:	1dfb      	adds	r3, r7, #7
 80047ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80047c2:	d809      	bhi.n	80047d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	001a      	movs	r2, r3
 80047ca:	231f      	movs	r3, #31
 80047cc:	401a      	ands	r2, r3
 80047ce:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <__NVIC_EnableIRQ+0x30>)
 80047d0:	2101      	movs	r1, #1
 80047d2:	4091      	lsls	r1, r2
 80047d4:	000a      	movs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80047d8:	46c0      	nop			@ (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	e000e100 	.word	0xe000e100

080047e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	0002      	movs	r2, r0
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	1dfb      	adds	r3, r7, #7
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80047f8:	d828      	bhi.n	800484c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047fa:	4a2f      	ldr	r2, [pc, #188]	@ (80048b8 <__NVIC_SetPriority+0xd4>)
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	b25b      	sxtb	r3, r3
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	33c0      	adds	r3, #192	@ 0xc0
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	589b      	ldr	r3, [r3, r2]
 800480a:	1dfa      	adds	r2, r7, #7
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	0011      	movs	r1, r2
 8004810:	2203      	movs	r2, #3
 8004812:	400a      	ands	r2, r1
 8004814:	00d2      	lsls	r2, r2, #3
 8004816:	21ff      	movs	r1, #255	@ 0xff
 8004818:	4091      	lsls	r1, r2
 800481a:	000a      	movs	r2, r1
 800481c:	43d2      	mvns	r2, r2
 800481e:	401a      	ands	r2, r3
 8004820:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	22ff      	movs	r2, #255	@ 0xff
 8004828:	401a      	ands	r2, r3
 800482a:	1dfb      	adds	r3, r7, #7
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	0018      	movs	r0, r3
 8004830:	2303      	movs	r3, #3
 8004832:	4003      	ands	r3, r0
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004838:	481f      	ldr	r0, [pc, #124]	@ (80048b8 <__NVIC_SetPriority+0xd4>)
 800483a:	1dfb      	adds	r3, r7, #7
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	430a      	orrs	r2, r1
 8004844:	33c0      	adds	r3, #192	@ 0xc0
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800484a:	e031      	b.n	80048b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800484c:	4a1b      	ldr	r2, [pc, #108]	@ (80048bc <__NVIC_SetPriority+0xd8>)
 800484e:	1dfb      	adds	r3, r7, #7
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	0019      	movs	r1, r3
 8004854:	230f      	movs	r3, #15
 8004856:	400b      	ands	r3, r1
 8004858:	3b08      	subs	r3, #8
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3306      	adds	r3, #6
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	18d3      	adds	r3, r2, r3
 8004862:	3304      	adds	r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	1dfa      	adds	r2, r7, #7
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	0011      	movs	r1, r2
 800486c:	2203      	movs	r2, #3
 800486e:	400a      	ands	r2, r1
 8004870:	00d2      	lsls	r2, r2, #3
 8004872:	21ff      	movs	r1, #255	@ 0xff
 8004874:	4091      	lsls	r1, r2
 8004876:	000a      	movs	r2, r1
 8004878:	43d2      	mvns	r2, r2
 800487a:	401a      	ands	r2, r3
 800487c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	22ff      	movs	r2, #255	@ 0xff
 8004884:	401a      	ands	r2, r3
 8004886:	1dfb      	adds	r3, r7, #7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	0018      	movs	r0, r3
 800488c:	2303      	movs	r3, #3
 800488e:	4003      	ands	r3, r0
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004894:	4809      	ldr	r0, [pc, #36]	@ (80048bc <__NVIC_SetPriority+0xd8>)
 8004896:	1dfb      	adds	r3, r7, #7
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	001c      	movs	r4, r3
 800489c:	230f      	movs	r3, #15
 800489e:	4023      	ands	r3, r4
 80048a0:	3b08      	subs	r3, #8
 80048a2:	089b      	lsrs	r3, r3, #2
 80048a4:	430a      	orrs	r2, r1
 80048a6:	3306      	adds	r3, #6
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	18c3      	adds	r3, r0, r3
 80048ac:	3304      	adds	r3, #4
 80048ae:	601a      	str	r2, [r3, #0]
}
 80048b0:	46c0      	nop			@ (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b003      	add	sp, #12
 80048b6:	bd90      	pop	{r4, r7, pc}
 80048b8:	e000e100 	.word	0xe000e100
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1e5a      	subs	r2, r3, #1
 80048cc:	2380      	movs	r3, #128	@ 0x80
 80048ce:	045b      	lsls	r3, r3, #17
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d301      	bcc.n	80048d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048d4:	2301      	movs	r3, #1
 80048d6:	e010      	b.n	80048fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <SysTick_Config+0x44>)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	3a01      	subs	r2, #1
 80048de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048e0:	2301      	movs	r3, #1
 80048e2:	425b      	negs	r3, r3
 80048e4:	2103      	movs	r1, #3
 80048e6:	0018      	movs	r0, r3
 80048e8:	f7ff ff7c 	bl	80047e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <SysTick_Config+0x44>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f2:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <SysTick_Config+0x44>)
 80048f4:	2207      	movs	r2, #7
 80048f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	e000e010 	.word	0xe000e010

08004908 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	210f      	movs	r1, #15
 8004914:	187b      	adds	r3, r7, r1
 8004916:	1c02      	adds	r2, r0, #0
 8004918:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	187b      	adds	r3, r7, r1
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b25b      	sxtb	r3, r3
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f7ff ff5d 	bl	80047e4 <__NVIC_SetPriority>
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b004      	add	sp, #16
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	0002      	movs	r2, r0
 800493a:	1dfb      	adds	r3, r7, #7
 800493c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800493e:	1dfb      	adds	r3, r7, #7
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b25b      	sxtb	r3, r3
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff ff33 	bl	80047b0 <__NVIC_EnableIRQ>
}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b002      	add	sp, #8
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff ffaf 	bl	80048c0 <SysTick_Config>
 8004962:	0003      	movs	r3, r0
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800497a:	e14d      	b.n	8004c18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4091      	lsls	r1, r2
 8004986:	000a      	movs	r2, r1
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d100      	bne.n	8004994 <HAL_GPIO_Init+0x28>
 8004992:	e13e      	b.n	8004c12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2203      	movs	r2, #3
 800499a:	4013      	ands	r3, r2
 800499c:	2b01      	cmp	r3, #1
 800499e:	d005      	beq.n	80049ac <HAL_GPIO_Init+0x40>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d130      	bne.n	8004a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2203      	movs	r2, #3
 80049b8:	409a      	lsls	r2, r3
 80049ba:	0013      	movs	r3, r2
 80049bc:	43da      	mvns	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	0013      	movs	r3, r2
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	409a      	lsls	r2, r3
 80049e8:	0013      	movs	r3, r2
 80049ea:	43da      	mvns	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	2201      	movs	r2, #1
 80049fa:	401a      	ands	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	409a      	lsls	r2, r3
 8004a00:	0013      	movs	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2203      	movs	r2, #3
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	409a      	lsls	r2, r3
 8004a28:	0013      	movs	r3, r2
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d123      	bne.n	8004a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	0092      	lsls	r2, r2, #2
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2207      	movs	r2, #7
 8004a68:	4013      	ands	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	0013      	movs	r3, r2
 8004a72:	43da      	mvns	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2107      	movs	r1, #7
 8004a82:	400b      	ands	r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	409a      	lsls	r2, r3
 8004a88:	0013      	movs	r3, r2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	6939      	ldr	r1, [r7, #16]
 8004a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	0013      	movs	r3, r2
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	401a      	ands	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	23c0      	movs	r3, #192	@ 0xc0
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <HAL_GPIO_Init+0x174>
 8004ade:	e098      	b.n	8004c12 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004ae0:	4a53      	ldr	r2, [pc, #332]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	089b      	lsrs	r3, r3, #2
 8004ae6:	3318      	adds	r3, #24
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	589b      	ldr	r3, [r3, r2]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2203      	movs	r2, #3
 8004af2:	4013      	ands	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	220f      	movs	r2, #15
 8004af8:	409a      	lsls	r2, r3
 8004afa:	0013      	movs	r3, r2
 8004afc:	43da      	mvns	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	23a0      	movs	r3, #160	@ 0xa0
 8004b08:	05db      	lsls	r3, r3, #23
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d019      	beq.n	8004b42 <HAL_GPIO_Init+0x1d6>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a48      	ldr	r2, [pc, #288]	@ (8004c34 <HAL_GPIO_Init+0x2c8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_GPIO_Init+0x1d2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a47      	ldr	r2, [pc, #284]	@ (8004c38 <HAL_GPIO_Init+0x2cc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00d      	beq.n	8004b3a <HAL_GPIO_Init+0x1ce>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a46      	ldr	r2, [pc, #280]	@ (8004c3c <HAL_GPIO_Init+0x2d0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <HAL_GPIO_Init+0x1ca>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a45      	ldr	r2, [pc, #276]	@ (8004c40 <HAL_GPIO_Init+0x2d4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_GPIO_Init+0x1c6>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e008      	b.n	8004b44 <HAL_GPIO_Init+0x1d8>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e006      	b.n	8004b44 <HAL_GPIO_Init+0x1d8>
 8004b36:	2303      	movs	r3, #3
 8004b38:	e004      	b.n	8004b44 <HAL_GPIO_Init+0x1d8>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e002      	b.n	8004b44 <HAL_GPIO_Init+0x1d8>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_GPIO_Init+0x1d8>
 8004b42:	2300      	movs	r3, #0
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	2103      	movs	r1, #3
 8004b48:	400a      	ands	r2, r1
 8004b4a:	00d2      	lsls	r2, r2, #3
 8004b4c:	4093      	lsls	r3, r2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004b54:	4936      	ldr	r1, [pc, #216]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b62:	4b33      	ldr	r3, [pc, #204]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	035b      	lsls	r3, r3, #13
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b86:	4b2a      	ldr	r3, [pc, #168]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004b8c:	4b28      	ldr	r3, [pc, #160]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	43da      	mvns	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	2380      	movs	r3, #128	@ 0x80
 8004ba2:	039b      	lsls	r3, r3, #14
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d003      	beq.n	8004bb0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004bb8:	2384      	movs	r3, #132	@ 0x84
 8004bba:	58d3      	ldr	r3, [r2, r3]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	029b      	lsls	r3, r3, #10
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bdc:	4914      	ldr	r1, [pc, #80]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004bde:	2284      	movs	r2, #132	@ 0x84
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004be4:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	58d3      	ldr	r3, [r2, r3]
 8004bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	025b      	lsls	r3, r3, #9
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d003      	beq.n	8004c0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c0a:	4909      	ldr	r1, [pc, #36]	@ (8004c30 <HAL_GPIO_Init+0x2c4>)
 8004c0c:	2280      	movs	r2, #128	@ 0x80
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	3301      	adds	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	40da      	lsrs	r2, r3
 8004c20:	1e13      	subs	r3, r2, #0
 8004c22:	d000      	beq.n	8004c26 <HAL_GPIO_Init+0x2ba>
 8004c24:	e6aa      	b.n	800497c <HAL_GPIO_Init+0x10>
  }
}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b006      	add	sp, #24
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40021800 	.word	0x40021800
 8004c34:	50000400 	.word	0x50000400
 8004c38:	50000800 	.word	0x50000800
 8004c3c:	50000c00 	.word	0x50000c00
 8004c40:	50001000 	.word	0x50001000

08004c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	000a      	movs	r2, r1
 8004c4e:	1cbb      	adds	r3, r7, #2
 8004c50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	1cba      	adds	r2, r7, #2
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c5e:	230f      	movs	r3, #15
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e003      	b.n	8004c70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c70:	230f      	movs	r3, #15
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	781b      	ldrb	r3, [r3, #0]
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b004      	add	sp, #16
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	0008      	movs	r0, r1
 8004c88:	0011      	movs	r1, r2
 8004c8a:	1cbb      	adds	r3, r7, #2
 8004c8c:	1c02      	adds	r2, r0, #0
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	1c7b      	adds	r3, r7, #1
 8004c92:	1c0a      	adds	r2, r1, #0
 8004c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c96:	1c7b      	adds	r3, r7, #1
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c9e:	1cbb      	adds	r3, r7, #2
 8004ca0:	881a      	ldrh	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ca6:	e003      	b.n	8004cb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ca8:	1cbb      	adds	r3, r7, #2
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cb0:	46c0      	nop			@ (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	000a      	movs	r2, r1
 8004cc2:	1cbb      	adds	r3, r7, #2
 8004cc4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ccc:	1cbb      	adds	r3, r7, #2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	041a      	lsls	r2, r3, #16
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	1cb9      	adds	r1, r7, #2
 8004cdc:	8809      	ldrh	r1, [r1, #0]
 8004cde:	400b      	ands	r3, r1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	619a      	str	r2, [r3, #24]
}
 8004ce6:	46c0      	nop			@ (mov r8, r8)
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b004      	add	sp, #16
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	1dbb      	adds	r3, r7, #6
 8004cfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004cfc:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	1dba      	adds	r2, r7, #6
 8004d02:	8812      	ldrh	r2, [r2, #0]
 8004d04:	4013      	ands	r3, r2
 8004d06:	d008      	beq.n	8004d1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004d08:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d0a:	1dba      	adds	r2, r7, #6
 8004d0c:	8812      	ldrh	r2, [r2, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004d10:	1dbb      	adds	r3, r7, #6
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 f815 	bl	8004d44 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004d1a:	4b09      	ldr	r3, [pc, #36]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	1dba      	adds	r2, r7, #6
 8004d20:	8812      	ldrh	r2, [r2, #0]
 8004d22:	4013      	ands	r3, r2
 8004d24:	d008      	beq.n	8004d38 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d28:	1dba      	adds	r2, r7, #6
 8004d2a:	8812      	ldrh	r2, [r2, #0]
 8004d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004d2e:	1dbb      	adds	r3, r7, #6
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7fe fa26 	bl	8003184 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004d38:	46c0      	nop			@ (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b002      	add	sp, #8
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021800 	.word	0x40021800

08004d44 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	1dbb      	adds	r3, r7, #6
 8004d4e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e08f      	b.n	8004e8a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2241      	movs	r2, #65	@ 0x41
 8004d6e:	5c9b      	ldrb	r3, [r3, r2]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7fe fac5 	bl	8003310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2241      	movs	r2, #65	@ 0x41
 8004d8a:	2124      	movs	r1, #36	@ 0x24
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	438a      	bics	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	493b      	ldr	r1, [pc, #236]	@ (8004e94 <HAL_I2C_Init+0x13c>)
 8004da8:	400a      	ands	r2, r1
 8004daa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4938      	ldr	r1, [pc, #224]	@ (8004e98 <HAL_I2C_Init+0x140>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d108      	bne.n	8004dd6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	0209      	lsls	r1, r1, #8
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	e007      	b.n	8004de6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2184      	movs	r1, #132	@ 0x84
 8004de0:	0209      	lsls	r1, r1, #8
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d109      	bne.n	8004e02 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	0109      	lsls	r1, r1, #4
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e007      	b.n	8004e12 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4923      	ldr	r1, [pc, #140]	@ (8004e9c <HAL_I2C_Init+0x144>)
 8004e0e:	400a      	ands	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4920      	ldr	r1, [pc, #128]	@ (8004ea0 <HAL_I2C_Init+0x148>)
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	491a      	ldr	r1, [pc, #104]	@ (8004e98 <HAL_I2C_Init+0x140>)
 8004e2e:	400a      	ands	r2, r1
 8004e30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69d9      	ldr	r1, [r3, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2101      	movs	r1, #1
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2241      	movs	r2, #65	@ 0x41
 8004e76:	2120      	movs	r1, #32
 8004e78:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2242      	movs	r2, #66	@ 0x42
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	f0ffffff 	.word	0xf0ffffff
 8004e98:	ffff7fff 	.word	0xffff7fff
 8004e9c:	fffff7ff 	.word	0xfffff7ff
 8004ea0:	02008000 	.word	0x02008000

08004ea4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b089      	sub	sp, #36	@ 0x24
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	0008      	movs	r0, r1
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	1c02      	adds	r2, r0, #0
 8004eb8:	801a      	strh	r2, [r3, #0]
 8004eba:	2308      	movs	r3, #8
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	1c0a      	adds	r2, r1, #0
 8004ec0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2241      	movs	r2, #65	@ 0x41
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d000      	beq.n	8004ed0 <HAL_I2C_Master_Transmit+0x2c>
 8004ece:	e10a      	b.n	80050e6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	5c9b      	ldrb	r3, [r3, r2]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_I2C_Master_Transmit+0x3a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e104      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2240      	movs	r2, #64	@ 0x40
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fe fe33 	bl	8003b50 <HAL_GetTick>
 8004eea:	0003      	movs	r3, r0
 8004eec:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eee:	2380      	movs	r3, #128	@ 0x80
 8004ef0:	0219      	lsls	r1, r3, #8
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2319      	movs	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	f000 fa26 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8004f00:	1e03      	subs	r3, r0, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0ef      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2241      	movs	r2, #65	@ 0x41
 8004f0c:	2121      	movs	r1, #33	@ 0x21
 8004f0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2242      	movs	r2, #66	@ 0x42
 8004f14:	2110      	movs	r1, #16
 8004f16:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2208      	movs	r2, #8
 8004f28:	18ba      	adds	r2, r7, r2
 8004f2a:	8812      	ldrh	r2, [r2, #0]
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2bff      	cmp	r3, #255	@ 0xff
 8004f3c:	d906      	bls.n	8004f4c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	22ff      	movs	r2, #255	@ 0xff
 8004f42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	045b      	lsls	r3, r3, #17
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e007      	b.n	8004f5c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	049b      	lsls	r3, r3, #18
 8004f5a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d027      	beq.n	8004fb4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	781a      	ldrb	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	697c      	ldr	r4, [r7, #20]
 8004fa0:	230a      	movs	r3, #10
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	8819      	ldrh	r1, [r3, #0]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	4b51      	ldr	r3, [pc, #324]	@ (80050f0 <HAL_I2C_Master_Transmit+0x24c>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	0023      	movs	r3, r4
 8004fae:	f000 fc45 	bl	800583c <I2C_TransferConfig>
 8004fb2:	e06f      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	697c      	ldr	r4, [r7, #20]
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	8819      	ldrh	r1, [r3, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80050f0 <HAL_I2C_Master_Transmit+0x24c>)
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	0023      	movs	r3, r4
 8004fca:	f000 fc37 	bl	800583c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fce:	e061      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 fa10 	bl	80053fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004fdc:	1e03      	subs	r3, r0, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e081      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d03a      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x1f0>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d136      	bne.n	8005094 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	0013      	movs	r3, r2
 8005030:	2200      	movs	r2, #0
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	f000 f98a 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e053      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2bff      	cmp	r3, #255	@ 0xff
 8005048:	d911      	bls.n	800506e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	@ 0xff
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	2380      	movs	r3, #128	@ 0x80
 8005058:	045c      	lsls	r4, r3, #17
 800505a:	230a      	movs	r3, #10
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	8819      	ldrh	r1, [r3, #0]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	2300      	movs	r3, #0
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	0023      	movs	r3, r4
 8005068:	f000 fbe8 	bl	800583c <I2C_TransferConfig>
 800506c:	e012      	b.n	8005094 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507c:	b2da      	uxtb	r2, r3
 800507e:	2380      	movs	r3, #128	@ 0x80
 8005080:	049c      	lsls	r4, r3, #18
 8005082:	230a      	movs	r3, #10
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	8819      	ldrh	r1, [r3, #0]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	0023      	movs	r3, r4
 8005090:	f000 fbd4 	bl	800583c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d198      	bne.n	8004fd0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f000 f9ef 	bl	8005488 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050aa:	1e03      	subs	r3, r0, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e01a      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2220      	movs	r2, #32
 80050b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	490b      	ldr	r1, [pc, #44]	@ (80050f4 <HAL_I2C_Master_Transmit+0x250>)
 80050c6:	400a      	ands	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2241      	movs	r2, #65	@ 0x41
 80050ce:	2120      	movs	r1, #32
 80050d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2242      	movs	r2, #66	@ 0x42
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2240      	movs	r2, #64	@ 0x40
 80050de:	2100      	movs	r1, #0
 80050e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b007      	add	sp, #28
 80050ee:	bd90      	pop	{r4, r7, pc}
 80050f0:	80002000 	.word	0x80002000
 80050f4:	fe00e800 	.word	0xfe00e800

080050f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b089      	sub	sp, #36	@ 0x24
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	0008      	movs	r0, r1
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	0019      	movs	r1, r3
 8005106:	230a      	movs	r3, #10
 8005108:	18fb      	adds	r3, r7, r3
 800510a:	1c02      	adds	r2, r0, #0
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	2308      	movs	r3, #8
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	1c0a      	adds	r2, r1, #0
 8005114:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2241      	movs	r2, #65	@ 0x41
 800511a:	5c9b      	ldrb	r3, [r3, r2]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b20      	cmp	r3, #32
 8005120:	d000      	beq.n	8005124 <HAL_I2C_Master_Receive+0x2c>
 8005122:	e0e8      	b.n	80052f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	@ 0x40
 8005128:	5c9b      	ldrb	r3, [r3, r2]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Master_Receive+0x3a>
 800512e:	2302      	movs	r3, #2
 8005130:	e0e2      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2240      	movs	r2, #64	@ 0x40
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800513a:	f7fe fd09 	bl	8003b50 <HAL_GetTick>
 800513e:	0003      	movs	r3, r0
 8005140:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005142:	2380      	movs	r3, #128	@ 0x80
 8005144:	0219      	lsls	r1, r3, #8
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2319      	movs	r3, #25
 800514e:	2201      	movs	r2, #1
 8005150:	f000 f8fc 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8005154:	1e03      	subs	r3, r0, #0
 8005156:	d001      	beq.n	800515c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0cd      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2241      	movs	r2, #65	@ 0x41
 8005160:	2122      	movs	r1, #34	@ 0x22
 8005162:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2242      	movs	r2, #66	@ 0x42
 8005168:	2110      	movs	r1, #16
 800516a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2208      	movs	r2, #8
 800517c:	18ba      	adds	r2, r7, r2
 800517e:	8812      	ldrh	r2, [r2, #0]
 8005180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2bff      	cmp	r3, #255	@ 0xff
 8005190:	d911      	bls.n	80051b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	@ 0xff
 8005196:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	2380      	movs	r3, #128	@ 0x80
 80051a0:	045c      	lsls	r4, r3, #17
 80051a2:	230a      	movs	r3, #10
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	8819      	ldrh	r1, [r3, #0]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	4b55      	ldr	r3, [pc, #340]	@ (8005300 <HAL_I2C_Master_Receive+0x208>)
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	0023      	movs	r3, r4
 80051b0:	f000 fb44 	bl	800583c <I2C_TransferConfig>
 80051b4:	e076      	b.n	80052a4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	049c      	lsls	r4, r3, #18
 80051ca:	230a      	movs	r3, #10
 80051cc:	18fb      	adds	r3, r7, r3
 80051ce:	8819      	ldrh	r1, [r3, #0]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005300 <HAL_I2C_Master_Receive+0x208>)
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	0023      	movs	r3, r4
 80051d8:	f000 fb30 	bl	800583c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051dc:	e062      	b.n	80052a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f993 	bl	8005510 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ea:	1e03      	subs	r3, r0, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e082      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d03a      	beq.n	80052a4 <HAL_I2C_Master_Receive+0x1ac>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d136      	bne.n	80052a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	0013      	movs	r3, r2
 8005240:	2200      	movs	r2, #0
 8005242:	2180      	movs	r1, #128	@ 0x80
 8005244:	f000 f882 	bl	800534c <I2C_WaitOnFlagUntilTimeout>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e053      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2bff      	cmp	r3, #255	@ 0xff
 8005258:	d911      	bls.n	800527e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	22ff      	movs	r2, #255	@ 0xff
 800525e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	b2da      	uxtb	r2, r3
 8005266:	2380      	movs	r3, #128	@ 0x80
 8005268:	045c      	lsls	r4, r3, #17
 800526a:	230a      	movs	r3, #10
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	8819      	ldrh	r1, [r3, #0]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	2300      	movs	r3, #0
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	0023      	movs	r3, r4
 8005278:	f000 fae0 	bl	800583c <I2C_TransferConfig>
 800527c:	e012      	b.n	80052a4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528c:	b2da      	uxtb	r2, r3
 800528e:	2380      	movs	r3, #128	@ 0x80
 8005290:	049c      	lsls	r4, r3, #18
 8005292:	230a      	movs	r3, #10
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	8819      	ldrh	r1, [r3, #0]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	0023      	movs	r3, r4
 80052a0:	f000 facc 	bl	800583c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d197      	bne.n	80051de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 f8e7 	bl	8005488 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ba:	1e03      	subs	r3, r0, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e01a      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2220      	movs	r2, #32
 80052c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	490b      	ldr	r1, [pc, #44]	@ (8005304 <HAL_I2C_Master_Receive+0x20c>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2241      	movs	r2, #65	@ 0x41
 80052de:	2120      	movs	r1, #32
 80052e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2242      	movs	r2, #66	@ 0x42
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2240      	movs	r2, #64	@ 0x40
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e000      	b.n	80052f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80052f6:	2302      	movs	r3, #2
  }
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b007      	add	sp, #28
 80052fe:	bd90      	pop	{r4, r7, pc}
 8005300:	80002400 	.word	0x80002400
 8005304:	fe00e800 	.word	0xfe00e800

08005308 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2202      	movs	r2, #2
 8005318:	4013      	ands	r3, r2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d103      	bne.n	8005326 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2201      	movs	r2, #1
 800532e:	4013      	ands	r3, r2
 8005330:	2b01      	cmp	r3, #1
 8005332:	d007      	beq.n	8005344 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	430a      	orrs	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
  }
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	1dfb      	adds	r3, r7, #7
 800535a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800535c:	e03a      	b.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	0018      	movs	r0, r3
 8005366:	f000 f971 	bl	800564c <I2C_IsErrorOccurred>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d001      	beq.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e040      	b.n	80053f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	d02d      	beq.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005378:	f7fe fbea 	bl	8003b50 <HAL_GetTick>
 800537c:	0002      	movs	r2, r0
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d302      	bcc.n	800538e <I2C_WaitOnFlagUntilTimeout+0x42>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d122      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	425a      	negs	r2, r3
 800539e:	4153      	adcs	r3, r2
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	001a      	movs	r2, r3
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d113      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b0:	2220      	movs	r2, #32
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2241      	movs	r2, #65	@ 0x41
 80053bc:	2120      	movs	r1, #32
 80053be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2242      	movs	r2, #66	@ 0x42
 80053c4:	2100      	movs	r1, #0
 80053c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2240      	movs	r2, #64	@ 0x40
 80053cc:	2100      	movs	r1, #0
 80053ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e00f      	b.n	80053f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4013      	ands	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	425a      	negs	r2, r3
 80053e4:	4153      	adcs	r3, r2
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	001a      	movs	r2, r3
 80053ea:	1dfb      	adds	r3, r7, #7
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d0b5      	beq.n	800535e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005408:	e032      	b.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f91b 	bl	800564c <I2C_IsErrorOccurred>
 8005416:	1e03      	subs	r3, r0, #0
 8005418:	d001      	beq.n	800541e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e030      	b.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3301      	adds	r3, #1
 8005422:	d025      	beq.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005424:	f7fe fb94 	bl	8003b50 <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d11a      	bne.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2202      	movs	r2, #2
 8005442:	4013      	ands	r3, r2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d013      	beq.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544c:	2220      	movs	r2, #32
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2241      	movs	r2, #65	@ 0x41
 8005458:	2120      	movs	r1, #32
 800545a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2242      	movs	r2, #66	@ 0x42
 8005460:	2100      	movs	r1, #0
 8005462:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2240      	movs	r2, #64	@ 0x40
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e007      	b.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d1c5      	bne.n	800540a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b004      	add	sp, #16
 8005486:	bd80      	pop	{r7, pc}

08005488 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005494:	e02f      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 f8d5 	bl	800564c <I2C_IsErrorOccurred>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d001      	beq.n	80054aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e02d      	b.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054aa:	f7fe fb51 	bl	8003b50 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d302      	bcc.n	80054c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d11a      	bne.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2220      	movs	r2, #32
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d013      	beq.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	2220      	movs	r2, #32
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2241      	movs	r2, #65	@ 0x41
 80054de:	2120      	movs	r1, #32
 80054e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2242      	movs	r2, #66	@ 0x42
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2240      	movs	r2, #64	@ 0x40
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e007      	b.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2220      	movs	r2, #32
 80054fe:	4013      	ands	r3, r2
 8005500:	2b20      	cmp	r3, #32
 8005502:	d1c8      	bne.n	8005496 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	0018      	movs	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	b004      	add	sp, #16
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800551c:	2317      	movs	r3, #23
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005524:	e07b      	b.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	0018      	movs	r0, r3
 800552e:	f000 f88d 	bl	800564c <I2C_IsErrorOccurred>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d003      	beq.n	800553e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005536:	2317      	movs	r3, #23
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2220      	movs	r2, #32
 8005546:	4013      	ands	r3, r2
 8005548:	2b20      	cmp	r3, #32
 800554a:	d140      	bne.n	80055ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800554c:	2117      	movs	r1, #23
 800554e:	187b      	adds	r3, r7, r1
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d13b      	bne.n	80055ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2204      	movs	r2, #4
 800555e:	4013      	ands	r3, r2
 8005560:	2b04      	cmp	r3, #4
 8005562:	d106      	bne.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2210      	movs	r2, #16
 800557a:	4013      	ands	r3, r2
 800557c:	2b10      	cmp	r3, #16
 800557e:	d123      	bne.n	80055c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2204      	movs	r2, #4
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2220      	movs	r2, #32
 8005594:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4929      	ldr	r1, [pc, #164]	@ (8005648 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2241      	movs	r2, #65	@ 0x41
 80055aa:	2120      	movs	r1, #32
 80055ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2242      	movs	r2, #66	@ 0x42
 80055b2:	2100      	movs	r1, #0
 80055b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2240      	movs	r2, #64	@ 0x40
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80055be:	2317      	movs	r3, #23
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e002      	b.n	80055ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80055ce:	f7fe fabf 	bl	8003b50 <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11c      	bne.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80055e4:	2017      	movs	r0, #23
 80055e6:	183b      	adds	r3, r7, r0
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d117      	bne.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2204      	movs	r2, #4
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d010      	beq.n	800561e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005600:	2220      	movs	r2, #32
 8005602:	431a      	orrs	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2241      	movs	r2, #65	@ 0x41
 800560c:	2120      	movs	r1, #32
 800560e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2240      	movs	r2, #64	@ 0x40
 8005614:	2100      	movs	r1, #0
 8005616:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005618:	183b      	adds	r3, r7, r0
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2204      	movs	r2, #4
 8005626:	4013      	ands	r3, r2
 8005628:	2b04      	cmp	r3, #4
 800562a:	d005      	beq.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800562c:	2317      	movs	r3, #23
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d100      	bne.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005636:	e776      	b.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005638:	2317      	movs	r3, #23
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	781b      	ldrb	r3, [r3, #0]
}
 800563e:	0018      	movs	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	b006      	add	sp, #24
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			@ (mov r8, r8)
 8005648:	fe00e800 	.word	0xfe00e800

0800564c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	@ 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005658:	2327      	movs	r3, #39	@ 0x27
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2210      	movs	r2, #16
 8005674:	4013      	ands	r3, r2
 8005676:	d100      	bne.n	800567a <I2C_IsErrorOccurred+0x2e>
 8005678:	e079      	b.n	800576e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2210      	movs	r2, #16
 8005680:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005682:	e057      	b.n	8005734 <I2C_IsErrorOccurred+0xe8>
 8005684:	2227      	movs	r2, #39	@ 0x27
 8005686:	18bb      	adds	r3, r7, r2
 8005688:	18ba      	adds	r2, r7, r2
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	3301      	adds	r3, #1
 8005692:	d04f      	beq.n	8005734 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005694:	f7fe fa5c 	bl	8003b50 <HAL_GetTick>
 8005698:	0002      	movs	r2, r0
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <I2C_IsErrorOccurred+0x5e>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d144      	bne.n	8005734 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	2380      	movs	r3, #128	@ 0x80
 80056b2:	01db      	lsls	r3, r3, #7
 80056b4:	4013      	ands	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056b8:	2013      	movs	r0, #19
 80056ba:	183b      	adds	r3, r7, r0
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	2142      	movs	r1, #66	@ 0x42
 80056c0:	5c52      	ldrb	r2, [r2, r1]
 80056c2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	2380      	movs	r3, #128	@ 0x80
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	401a      	ands	r2, r3
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d126      	bne.n	8005726 <I2C_IsErrorOccurred+0xda>
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	2380      	movs	r3, #128	@ 0x80
 80056dc:	01db      	lsls	r3, r3, #7
 80056de:	429a      	cmp	r2, r3
 80056e0:	d021      	beq.n	8005726 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80056e2:	183b      	adds	r3, r7, r0
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d01d      	beq.n	8005726 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2180      	movs	r1, #128	@ 0x80
 80056f6:	01c9      	lsls	r1, r1, #7
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056fc:	f7fe fa28 	bl	8003b50 <HAL_GetTick>
 8005700:	0003      	movs	r3, r0
 8005702:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005704:	e00f      	b.n	8005726 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005706:	f7fe fa23 	bl	8003b50 <HAL_GetTick>
 800570a:	0002      	movs	r2, r0
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b19      	cmp	r3, #25
 8005712:	d908      	bls.n	8005726 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2220      	movs	r2, #32
 8005718:	4313      	orrs	r3, r2
 800571a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800571c:	2327      	movs	r3, #39	@ 0x27
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]

              break;
 8005724:	e006      	b.n	8005734 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2220      	movs	r2, #32
 800572e:	4013      	ands	r3, r2
 8005730:	2b20      	cmp	r3, #32
 8005732:	d1e8      	bne.n	8005706 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2220      	movs	r2, #32
 800573c:	4013      	ands	r3, r2
 800573e:	2b20      	cmp	r3, #32
 8005740:	d004      	beq.n	800574c <I2C_IsErrorOccurred+0x100>
 8005742:	2327      	movs	r3, #39	@ 0x27
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d09b      	beq.n	8005684 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800574c:	2327      	movs	r3, #39	@ 0x27
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2220      	movs	r2, #32
 800575c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2204      	movs	r2, #4
 8005762:	4313      	orrs	r3, r2
 8005764:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005766:	2327      	movs	r3, #39	@ 0x27
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	2380      	movs	r3, #128	@ 0x80
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	4013      	ands	r3, r2
 800577e:	d00c      	beq.n	800579a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2201      	movs	r2, #1
 8005784:	4313      	orrs	r3, r2
 8005786:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2280      	movs	r2, #128	@ 0x80
 800578e:	0052      	lsls	r2, r2, #1
 8005790:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005792:	2327      	movs	r3, #39	@ 0x27
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	2380      	movs	r3, #128	@ 0x80
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4013      	ands	r3, r2
 80057a2:	d00c      	beq.n	80057be <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2208      	movs	r2, #8
 80057a8:	4313      	orrs	r3, r2
 80057aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2280      	movs	r2, #128	@ 0x80
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057b6:	2327      	movs	r3, #39	@ 0x27
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	2380      	movs	r3, #128	@ 0x80
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4013      	ands	r3, r2
 80057c6:	d00c      	beq.n	80057e2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4313      	orrs	r3, r2
 80057ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2280      	movs	r2, #128	@ 0x80
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057da:	2327      	movs	r3, #39	@ 0x27
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80057e2:	2327      	movs	r3, #39	@ 0x27
 80057e4:	18fb      	adds	r3, r7, r3
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01d      	beq.n	8005828 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f7ff fd8a 	bl	8005308 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	490e      	ldr	r1, [pc, #56]	@ (8005838 <I2C_IsErrorOccurred+0x1ec>)
 8005800:	400a      	ands	r2, r1
 8005802:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	431a      	orrs	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2241      	movs	r2, #65	@ 0x41
 8005814:	2120      	movs	r1, #32
 8005816:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2242      	movs	r2, #66	@ 0x42
 800581c:	2100      	movs	r1, #0
 800581e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2240      	movs	r2, #64	@ 0x40
 8005824:	2100      	movs	r1, #0
 8005826:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005828:	2327      	movs	r3, #39	@ 0x27
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	781b      	ldrb	r3, [r3, #0]
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b00a      	add	sp, #40	@ 0x28
 8005834:	bd80      	pop	{r7, pc}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	fe00e800 	.word	0xfe00e800

0800583c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	0008      	movs	r0, r1
 8005846:	0011      	movs	r1, r2
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	240a      	movs	r4, #10
 800584c:	193b      	adds	r3, r7, r4
 800584e:	1c02      	adds	r2, r0, #0
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	2009      	movs	r0, #9
 8005854:	183b      	adds	r3, r7, r0
 8005856:	1c0a      	adds	r2, r1, #0
 8005858:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800585a:	193b      	adds	r3, r7, r4
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	059b      	lsls	r3, r3, #22
 8005860:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005862:	183b      	adds	r3, r7, r0
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	0419      	lsls	r1, r3, #16
 8005868:	23ff      	movs	r3, #255	@ 0xff
 800586a:	041b      	lsls	r3, r3, #16
 800586c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800586e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	4313      	orrs	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005886:	0d51      	lsrs	r1, r2, #21
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	00d2      	lsls	r2, r2, #3
 800588c:	400a      	ands	r2, r1
 800588e:	4907      	ldr	r1, [pc, #28]	@ (80058ac <I2C_TransferConfig+0x70>)
 8005890:	430a      	orrs	r2, r1
 8005892:	43d2      	mvns	r2, r2
 8005894:	401a      	ands	r2, r3
 8005896:	0011      	movs	r1, r2
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b007      	add	sp, #28
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	03ff63ff 	.word	0x03ff63ff

080058b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2241      	movs	r2, #65	@ 0x41
 80058be:	5c9b      	ldrb	r3, [r3, r2]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d138      	bne.n	8005938 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2240      	movs	r2, #64	@ 0x40
 80058ca:	5c9b      	ldrb	r3, [r3, r2]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e032      	b.n	800593a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2240      	movs	r2, #64	@ 0x40
 80058d8:	2101      	movs	r1, #1
 80058da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2241      	movs	r2, #65	@ 0x41
 80058e0:	2124      	movs	r1, #36	@ 0x24
 80058e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2101      	movs	r1, #1
 80058f0:	438a      	bics	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4911      	ldr	r1, [pc, #68]	@ (8005944 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005900:	400a      	ands	r2, r1
 8005902:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2101      	movs	r1, #1
 8005920:	430a      	orrs	r2, r1
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2241      	movs	r2, #65	@ 0x41
 8005928:	2120      	movs	r1, #32
 800592a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2240      	movs	r2, #64	@ 0x40
 8005930:	2100      	movs	r1, #0
 8005932:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b002      	add	sp, #8
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	ffffefff 	.word	0xffffefff

08005948 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2241      	movs	r2, #65	@ 0x41
 8005956:	5c9b      	ldrb	r3, [r3, r2]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	d139      	bne.n	80059d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2240      	movs	r2, #64	@ 0x40
 8005962:	5c9b      	ldrb	r3, [r3, r2]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005968:	2302      	movs	r3, #2
 800596a:	e033      	b.n	80059d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2240      	movs	r2, #64	@ 0x40
 8005970:	2101      	movs	r1, #1
 8005972:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2241      	movs	r2, #65	@ 0x41
 8005978:	2124      	movs	r1, #36	@ 0x24
 800597a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2101      	movs	r1, #1
 8005988:	438a      	bics	r2, r1
 800598a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a11      	ldr	r2, [pc, #68]	@ (80059dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2101      	movs	r1, #1
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2241      	movs	r2, #65	@ 0x41
 80059c2:	2120      	movs	r1, #32
 80059c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2240      	movs	r2, #64	@ 0x40
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	0018      	movs	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b004      	add	sp, #16
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	fffff0ff 	.word	0xfffff0ff

080059e0 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	000a      	movs	r2, r1
 80059ea:	1cbb      	adds	r3, r7, #2
 80059ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80059ee:	230a      	movs	r3, #10
 80059f0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80059f2:	e002      	b.n	80059fa <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f9      	bne.n	80059f4 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8005a00:	1cbb      	adds	r3, r7, #2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	4a06      	ldr	r2, [pc, #24]	@ (8005a20 <PCD_GET_EP_RX_CNT+0x40>)
 8005a08:	4694      	mov	ip, r2
 8005a0a:	4463      	add	r3, ip
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	059b      	lsls	r3, r3, #22
 8005a14:	0d9b      	lsrs	r3, r3, #22
 8005a16:	b29b      	uxth	r3, r3
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b004      	add	sp, #16
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40009800 	.word	0x40009800

08005a24 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	000a      	movs	r2, r1
 8005a2e:	1cbb      	adds	r3, r7, #2
 8005a30:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005a32:	230a      	movs	r3, #10
 8005a34:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8005a36:	e002      	b.n	8005a3e <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f9      	bne.n	8005a38 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8005a44:	1cbb      	adds	r3, r7, #2
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4a06      	ldr	r2, [pc, #24]	@ (8005a64 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8005a4c:	4694      	mov	ip, r2
 8005a4e:	4463      	add	r3, ip
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0c1b      	lsrs	r3, r3, #16
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	059b      	lsls	r3, r3, #22
 8005a58:	0d9b      	lsrs	r3, r3, #22
 8005a5a:	b29b      	uxth	r3, r3
}
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b004      	add	sp, #16
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40009800 	.word	0x40009800

08005a68 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	000a      	movs	r2, r1
 8005a72:	1cbb      	adds	r3, r7, #2
 8005a74:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005a76:	230a      	movs	r3, #10
 8005a78:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8005a7a:	e002      	b.n	8005a82 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f9      	bne.n	8005a7c <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8005a88:	1cbb      	adds	r3, r7, #2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	4a06      	ldr	r2, [pc, #24]	@ (8005aa8 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8005a90:	4694      	mov	ip, r2
 8005a92:	4463      	add	r3, ip
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	059b      	lsls	r3, r3, #22
 8005a9c:	0d9b      	lsrs	r3, r3, #22
 8005a9e:	b29b      	uxth	r3, r3
}
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b004      	add	sp, #16
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40009800 	.word	0x40009800

08005aac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0ea      	b.n	8005c94 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a76      	ldr	r2, [pc, #472]	@ (8005c9c <HAL_PCD_Init+0x1f0>)
 8005ac2:	5c9b      	ldrb	r3, [r3, r2]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	23a5      	movs	r3, #165	@ 0xa5
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f007 fa76 	bl	800cfc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a6f      	ldr	r2, [pc, #444]	@ (8005c9c <HAL_PCD_Init+0x1f0>)
 8005ae0:	2103      	movs	r1, #3
 8005ae2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f002 ff4b 	bl	8008984 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aee:	230f      	movs	r3, #15
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e049      	b.n	8005b8c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005af8:	200f      	movs	r0, #15
 8005afa:	183b      	adds	r3, r7, r0
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	0013      	movs	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	189b      	adds	r3, r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	18cb      	adds	r3, r1, r3
 8005b0a:	3315      	adds	r3, #21
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b10:	183b      	adds	r3, r7, r0
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	0013      	movs	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	18cb      	adds	r3, r1, r3
 8005b20:	3314      	adds	r3, #20
 8005b22:	183a      	adds	r2, r7, r0
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b28:	183b      	adds	r3, r7, r0
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	0013      	movs	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	189b      	adds	r3, r3, r2
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	18cb      	adds	r3, r1, r3
 8005b38:	3317      	adds	r3, #23
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b3e:	183b      	adds	r3, r7, r0
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	0013      	movs	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	189b      	adds	r3, r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	18cb      	adds	r3, r1, r3
 8005b4e:	3324      	adds	r3, #36	@ 0x24
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b54:	183b      	adds	r3, r7, r0
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	0013      	movs	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	18cb      	adds	r3, r1, r3
 8005b64:	3328      	adds	r3, #40	@ 0x28
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b6a:	183b      	adds	r3, r7, r0
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	0013      	movs	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	18cb      	adds	r3, r1, r3
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b82:	183b      	adds	r3, r7, r0
 8005b84:	781a      	ldrb	r2, [r3, #0]
 8005b86:	183b      	adds	r3, r7, r0
 8005b88:	3201      	adds	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	210f      	movs	r1, #15
 8005b92:	187a      	adds	r2, r7, r1
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d3ae      	bcc.n	8005af8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9a:	187b      	adds	r3, r7, r1
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	e056      	b.n	8005c50 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ba2:	240f      	movs	r4, #15
 8005ba4:	193b      	adds	r3, r7, r4
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	2356      	movs	r3, #86	@ 0x56
 8005bac:	33ff      	adds	r3, #255	@ 0xff
 8005bae:	0019      	movs	r1, r3
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	18c3      	adds	r3, r0, r3
 8005bba:	185b      	adds	r3, r3, r1
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	781a      	ldrb	r2, [r3, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	23aa      	movs	r3, #170	@ 0xaa
 8005bc8:	0059      	lsls	r1, r3, #1
 8005bca:	0013      	movs	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	18c3      	adds	r3, r0, r3
 8005bd4:	185b      	adds	r3, r3, r1
 8005bd6:	193a      	adds	r2, r7, r4
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005bdc:	193b      	adds	r3, r7, r4
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	2358      	movs	r3, #88	@ 0x58
 8005be4:	33ff      	adds	r3, #255	@ 0xff
 8005be6:	0019      	movs	r1, r3
 8005be8:	0013      	movs	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	189b      	adds	r3, r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	18c3      	adds	r3, r0, r3
 8005bf2:	185b      	adds	r3, r3, r1
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bf8:	193b      	adds	r3, r7, r4
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	23b2      	movs	r3, #178	@ 0xb2
 8005c00:	0059      	lsls	r1, r3, #1
 8005c02:	0013      	movs	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	18c3      	adds	r3, r0, r3
 8005c0c:	185b      	adds	r3, r3, r1
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c12:	193b      	adds	r3, r7, r4
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	23b4      	movs	r3, #180	@ 0xb4
 8005c1a:	0059      	lsls	r1, r3, #1
 8005c1c:	0013      	movs	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	189b      	adds	r3, r3, r2
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	18c3      	adds	r3, r0, r3
 8005c26:	185b      	adds	r3, r3, r1
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c2c:	193b      	adds	r3, r7, r4
 8005c2e:	781a      	ldrb	r2, [r3, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	23b6      	movs	r3, #182	@ 0xb6
 8005c34:	0059      	lsls	r1, r3, #1
 8005c36:	0013      	movs	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	18c3      	adds	r3, r0, r3
 8005c40:	185b      	adds	r3, r3, r1
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c46:	193b      	adds	r3, r7, r4
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	3201      	adds	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	791b      	ldrb	r3, [r3, #4]
 8005c54:	220f      	movs	r2, #15
 8005c56:	18ba      	adds	r2, r7, r2
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3a1      	bcc.n	8005ba2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	466a      	mov	r2, sp
 8005c66:	7c19      	ldrb	r1, [r3, #16]
 8005c68:	7011      	strb	r1, [r2, #0]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f002 fec1 	bl	80089f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a07      	ldr	r2, [pc, #28]	@ (8005c9c <HAL_PCD_Init+0x1f0>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	7b1b      	ldrb	r3, [r3, #12]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d103      	bne.n	8005c92 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f001 fbf1 	bl	8007474 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b005      	add	sp, #20
 8005c9a:	bd90      	pop	{r4, r7, pc}
 8005c9c:	00000295 	.word	0x00000295

08005ca0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	23a5      	movs	r3, #165	@ 0xa5
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_PCD_Start+0x18>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e014      	b.n	8005ce2 <HAL_PCD_Start+0x42>
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	23a5      	movs	r3, #165	@ 0xa5
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f002 fe48 	bl	800895c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f004 fc52 	bl	800a57a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	23a5      	movs	r3, #165	@ 0xa5
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	2100      	movs	r1, #0
 8005cde:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f004 fc4e 	bl	800a59a <USB_ReadInterrupts>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8005d02:	4a7c      	ldr	r2, [pc, #496]	@ (8005ef4 <HAL_PCD_IRQHandler+0x208>)
 8005d04:	23a0      	movs	r3, #160	@ 0xa0
 8005d06:	58d3      	ldr	r3, [r2, r3]
 8005d08:	2204      	movs	r2, #4
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d100      	bne.n	8005d10 <HAL_PCD_IRQHandler+0x24>
 8005d0e:	e0ed      	b.n	8005eec <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	4013      	ands	r3, r2
 8005d18:	d004      	beq.n	8005d24 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 fb35 	bl	800638c <PCD_EP_ISR_Handler>

    return;
 8005d22:	e0e4      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	2380      	movs	r3, #128	@ 0x80
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d011      	beq.n	8005d52 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	496f      	ldr	r1, [pc, #444]	@ (8005ef8 <HAL_PCD_IRQHandler+0x20c>)
 8005d3a:	400a      	ands	r2, r1
 8005d3c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f007 fa04 	bl	800d14e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2100      	movs	r1, #0
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f8e4 	bl	8005f18 <HAL_PCD_SetAddress>

    return;
 8005d50:	e0cd      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	01db      	lsls	r3, r3, #7
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d008      	beq.n	8005d6e <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4965      	ldr	r1, [pc, #404]	@ (8005efc <HAL_PCD_IRQHandler+0x210>)
 8005d68:	400a      	ands	r2, r1
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8005d6c:	e0bf      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	2380      	movs	r3, #128	@ 0x80
 8005d72:	019b      	lsls	r3, r3, #6
 8005d74:	4013      	ands	r3, r2
 8005d76:	d008      	beq.n	8005d8a <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	495f      	ldr	r1, [pc, #380]	@ (8005f00 <HAL_PCD_IRQHandler+0x214>)
 8005d84:	400a      	ands	r2, r1
 8005d86:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8005d88:	e0b1      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	2380      	movs	r3, #128	@ 0x80
 8005d8e:	015b      	lsls	r3, r3, #5
 8005d90:	4013      	ands	r3, r2
 8005d92:	d02c      	beq.n	8005dee <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2104      	movs	r1, #4
 8005da0:	438a      	bics	r2, r1
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2108      	movs	r1, #8
 8005db0:	438a      	bics	r2, r1
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	23b3      	movs	r3, #179	@ 0xb3
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	5cd3      	ldrb	r3, [r2, r3]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d109      	bne.n	8005dd4 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	23b3      	movs	r3, #179	@ 0xb3
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f007 fc3c 	bl	800d64c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f007 f9fa 	bl	800d1d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4947      	ldr	r1, [pc, #284]	@ (8005f04 <HAL_PCD_IRQHandler+0x218>)
 8005de8:	400a      	ands	r2, r1
 8005dea:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8005dec:	e07f      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	2380      	movs	r3, #128	@ 0x80
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	4013      	ands	r3, r2
 8005df6:	d01c      	beq.n	8005e32 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2108      	movs	r1, #8
 8005e04:	430a      	orrs	r2, r1
 8005e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	493d      	ldr	r1, [pc, #244]	@ (8005f08 <HAL_PCD_IRQHandler+0x21c>)
 8005e14:	400a      	ands	r2, r1
 8005e16:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2104      	movs	r1, #4
 8005e24:	430a      	orrs	r2, r1
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f007 f9b4 	bl	800d198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e30:	e05d      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2280      	movs	r2, #128	@ 0x80
 8005e36:	4013      	ands	r3, r2
 8005e38:	d038      	beq.n	8005eac <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4931      	ldr	r1, [pc, #196]	@ (8005f0c <HAL_PCD_IRQHandler+0x220>)
 8005e46:	400a      	ands	r2, r1
 8005e48:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	23b3      	movs	r3, #179	@ 0xb3
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	5cd3      	ldrb	r3, [r2, r3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d125      	bne.n	8005ea2 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2104      	movs	r1, #4
 8005e62:	430a      	orrs	r2, r1
 8005e64:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2108      	movs	r1, #8
 8005e72:	430a      	orrs	r2, r1
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	23b3      	movs	r3, #179	@ 0xb3
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	223c      	movs	r2, #60	@ 0x3c
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	23b4      	movs	r3, #180	@ 0xb4
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f007 fbd6 	bl	800d64c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005ea0:	e025      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f007 f977 	bl	800d198 <HAL_PCD_SuspendCallback>
    return;
 8005eaa:	e020      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	2380      	movs	r3, #128	@ 0x80
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4913      	ldr	r1, [pc, #76]	@ (8005f10 <HAL_PCD_IRQHandler+0x224>)
 8005ec2:	400a      	ands	r2, r1
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f007 f931 	bl	800d130 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ece:	e00e      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	490b      	ldr	r1, [pc, #44]	@ (8005f14 <HAL_PCD_IRQHandler+0x228>)
 8005ee6:	400a      	ands	r2, r1
 8005ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8005eea:	e000      	b.n	8005eee <HAL_PCD_IRQHandler+0x202>
    return;
 8005eec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b004      	add	sp, #16
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	0000fbff 	.word	0x0000fbff
 8005efc:	0000bfff 	.word	0x0000bfff
 8005f00:	0000dfff 	.word	0x0000dfff
 8005f04:	0000efff 	.word	0x0000efff
 8005f08:	0000f7ff 	.word	0x0000f7ff
 8005f0c:	0000ff7f 	.word	0x0000ff7f
 8005f10:	0000fdff 	.word	0x0000fdff
 8005f14:	0000feff 	.word	0x0000feff

08005f18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	000a      	movs	r2, r1
 8005f22:	1cfb      	adds	r3, r7, #3
 8005f24:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	23a5      	movs	r3, #165	@ 0xa5
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	5cd3      	ldrb	r3, [r2, r3]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_PCD_SetAddress+0x1e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e016      	b.n	8005f64 <HAL_PCD_SetAddress+0x4c>
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	23a5      	movs	r3, #165	@ 0xa5
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1cfa      	adds	r2, r7, #3
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	1cfb      	adds	r3, r7, #3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	0019      	movs	r1, r3
 8005f52:	0010      	movs	r0, r2
 8005f54:	f004 fafe 	bl	800a554 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	23a5      	movs	r3, #165	@ 0xa5
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	2100      	movs	r1, #0
 8005f60:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	0018      	movs	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	000c      	movs	r4, r1
 8005f76:	0010      	movs	r0, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	1cfb      	adds	r3, r7, #3
 8005f7c:	1c22      	adds	r2, r4, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	003b      	movs	r3, r7
 8005f82:	1c02      	adds	r2, r0, #0
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	1cbb      	adds	r3, r7, #2
 8005f88:	1c0a      	adds	r2, r1, #0
 8005f8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f8c:	230b      	movs	r3, #11
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f94:	1cfb      	adds	r3, r7, #3
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da10      	bge.n	8005fc0 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f9e:	1cfb      	adds	r3, r7, #3
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2207      	movs	r2, #7
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	0013      	movs	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	3310      	adds	r3, #16
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	705a      	strb	r2, [r3, #1]
 8005fbe:	e010      	b.n	8005fe2 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc0:	1cfb      	adds	r3, r7, #3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2207      	movs	r2, #7
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	0013      	movs	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	189b      	adds	r3, r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	3351      	adds	r3, #81	@ 0x51
 8005fd2:	33ff      	adds	r3, #255	@ 0xff
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	18d3      	adds	r3, r2, r3
 8005fd8:	3304      	adds	r3, #4
 8005fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fe2:	1cfb      	adds	r3, r7, #3
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2207      	movs	r2, #7
 8005fe8:	4013      	ands	r3, r2
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ff0:	003b      	movs	r3, r7
 8005ff2:	881a      	ldrh	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	1cba      	adds	r2, r7, #2
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006000:	1cbb      	adds	r3, r7, #2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d102      	bne.n	800600e <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	23a5      	movs	r3, #165	@ 0xa5
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	5cd3      	ldrb	r3, [r2, r3]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_PCD_EP_Open+0xb2>
 800601a:	2302      	movs	r3, #2
 800601c:	e013      	b.n	8006046 <HAL_PCD_EP_Open+0xda>
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	23a5      	movs	r3, #165	@ 0xa5
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	2101      	movs	r1, #1
 8006026:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	0011      	movs	r1, r2
 8006030:	0018      	movs	r0, r3
 8006032:	f002 fd0b 	bl	8008a4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	23a5      	movs	r3, #165	@ 0xa5
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	2100      	movs	r1, #0
 800603e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8006040:	230b      	movs	r3, #11
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	781b      	ldrb	r3, [r3, #0]
}
 8006046:	0018      	movs	r0, r3
 8006048:	46bd      	mov	sp, r7
 800604a:	b005      	add	sp, #20
 800604c:	bd90      	pop	{r4, r7, pc}

0800604e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	000a      	movs	r2, r1
 8006058:	1cfb      	adds	r3, r7, #3
 800605a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800605c:	1cfb      	adds	r3, r7, #3
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b25b      	sxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	da10      	bge.n	8006088 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006066:	1cfb      	adds	r3, r7, #3
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2207      	movs	r2, #7
 800606c:	401a      	ands	r2, r3
 800606e:	0013      	movs	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	189b      	adds	r3, r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	3310      	adds	r3, #16
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	18d3      	adds	r3, r2, r3
 800607c:	3304      	adds	r3, #4
 800607e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	705a      	strb	r2, [r3, #1]
 8006086:	e010      	b.n	80060aa <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006088:	1cfb      	adds	r3, r7, #3
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2207      	movs	r2, #7
 800608e:	401a      	ands	r2, r3
 8006090:	0013      	movs	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	189b      	adds	r3, r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	3351      	adds	r3, #81	@ 0x51
 800609a:	33ff      	adds	r3, #255	@ 0xff
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	3304      	adds	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80060aa:	1cfb      	adds	r3, r7, #3
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2207      	movs	r2, #7
 80060b0:	4013      	ands	r3, r2
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	23a5      	movs	r3, #165	@ 0xa5
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	5cd3      	ldrb	r3, [r2, r3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_PCD_EP_Close+0x7a>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e011      	b.n	80060ec <HAL_PCD_EP_Close+0x9e>
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	23a5      	movs	r3, #165	@ 0xa5
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	2101      	movs	r1, #1
 80060d0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f002 ffea 	bl	80090b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	23a5      	movs	r3, #165	@ 0xa5
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	2100      	movs	r1, #0
 80060e8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b004      	add	sp, #16
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	200b      	movs	r0, #11
 8006102:	183b      	adds	r3, r7, r0
 8006104:	1c0a      	adds	r2, r1, #0
 8006106:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006108:	0001      	movs	r1, r0
 800610a:	187b      	adds	r3, r7, r1
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2207      	movs	r2, #7
 8006110:	401a      	ands	r2, r3
 8006112:	0013      	movs	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	189b      	adds	r3, r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	3351      	adds	r3, #81	@ 0x51
 800611c:	33ff      	adds	r3, #255	@ 0xff
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	18d3      	adds	r3, r2, r3
 8006122:	3304      	adds	r3, #4
 8006124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2200      	movs	r2, #0
 8006136:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800613e:	187b      	adds	r3, r7, r1
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2207      	movs	r2, #7
 8006144:	4013      	ands	r3, r2
 8006146:	b2da      	uxtb	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f003 f913 	bl	8009380 <USB_EPStartXfer>

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	0018      	movs	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	b006      	add	sp, #24
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	000a      	movs	r2, r1
 800616e:	1cfb      	adds	r3, r7, #3
 8006170:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006172:	1cfb      	adds	r3, r7, #3
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2207      	movs	r2, #7
 8006178:	401a      	ands	r2, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	23b8      	movs	r3, #184	@ 0xb8
 800617e:	0059      	lsls	r1, r3, #1
 8006180:	0013      	movs	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	189b      	adds	r3, r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	18c3      	adds	r3, r0, r3
 800618a:	185b      	adds	r3, r3, r1
 800618c:	681b      	ldr	r3, [r3, #0]
}
 800618e:	0018      	movs	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	b002      	add	sp, #8
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	200b      	movs	r0, #11
 80061a4:	183b      	adds	r3, r7, r0
 80061a6:	1c0a      	adds	r2, r1, #0
 80061a8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061aa:	183b      	adds	r3, r7, r0
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2207      	movs	r2, #7
 80061b0:	401a      	ands	r2, r3
 80061b2:	0013      	movs	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	189b      	adds	r3, r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	3310      	adds	r3, #16
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	18d3      	adds	r3, r2, r3
 80061c0:	3304      	adds	r3, #4
 80061c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2224      	movs	r2, #36	@ 0x24
 80061d4:	2101      	movs	r1, #1
 80061d6:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2201      	movs	r2, #1
 80061e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ea:	183b      	adds	r3, r7, r0
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2207      	movs	r2, #7
 80061f0:	4013      	ands	r3, r2
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	0011      	movs	r1, r2
 8006200:	0018      	movs	r0, r3
 8006202:	f003 f8bd 	bl	8009380 <USB_EPStartXfer>

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b006      	add	sp, #24
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	000a      	movs	r2, r1
 800621a:	1cfb      	adds	r3, r7, #3
 800621c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800621e:	1cfb      	adds	r3, r7, #3
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2207      	movs	r2, #7
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	7912      	ldrb	r2, [r2, #4]
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e048      	b.n	80062c4 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006232:	1cfb      	adds	r3, r7, #3
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25b      	sxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	da10      	bge.n	800625e <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800623c:	1cfb      	adds	r3, r7, #3
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2207      	movs	r2, #7
 8006242:	401a      	ands	r2, r3
 8006244:	0013      	movs	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	189b      	adds	r3, r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	3310      	adds	r3, #16
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	18d3      	adds	r3, r2, r3
 8006252:	3304      	adds	r3, #4
 8006254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	705a      	strb	r2, [r3, #1]
 800625c:	e00e      	b.n	800627c <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800625e:	1cfb      	adds	r3, r7, #3
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	0013      	movs	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	189b      	adds	r3, r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	3351      	adds	r3, #81	@ 0x51
 800626c:	33ff      	adds	r3, #255	@ 0xff
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	3304      	adds	r3, #4
 8006274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006282:	1cfb      	adds	r3, r7, #3
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2207      	movs	r2, #7
 8006288:	4013      	ands	r3, r2
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	23a5      	movs	r3, #165	@ 0xa5
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	5cd3      	ldrb	r3, [r2, r3]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_PCD_EP_SetStall+0x90>
 800629c:	2302      	movs	r3, #2
 800629e:	e011      	b.n	80062c4 <HAL_PCD_EP_SetStall+0xb4>
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	23a5      	movs	r3, #165	@ 0xa5
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	2101      	movs	r1, #1
 80062a8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	0011      	movs	r1, r2
 80062b2:	0018      	movs	r0, r3
 80062b4:	f004 f87a 	bl	800a3ac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	23a5      	movs	r3, #165	@ 0xa5
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	2100      	movs	r1, #0
 80062c0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b004      	add	sp, #16
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	000a      	movs	r2, r1
 80062d6:	1cfb      	adds	r3, r7, #3
 80062d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062da:	1cfb      	adds	r3, r7, #3
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	220f      	movs	r2, #15
 80062e0:	4013      	ands	r3, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	7912      	ldrb	r2, [r2, #4]
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e04a      	b.n	8006384 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062ee:	1cfb      	adds	r3, r7, #3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da10      	bge.n	800631a <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f8:	1cfb      	adds	r3, r7, #3
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2207      	movs	r2, #7
 80062fe:	401a      	ands	r2, r3
 8006300:	0013      	movs	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	189b      	adds	r3, r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	3310      	adds	r3, #16
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	18d3      	adds	r3, r2, r3
 800630e:	3304      	adds	r3, #4
 8006310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	705a      	strb	r2, [r3, #1]
 8006318:	e010      	b.n	800633c <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800631a:	1cfb      	adds	r3, r7, #3
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2207      	movs	r2, #7
 8006320:	401a      	ands	r2, r3
 8006322:	0013      	movs	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	189b      	adds	r3, r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	3351      	adds	r3, #81	@ 0x51
 800632c:	33ff      	adds	r3, #255	@ 0xff
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	18d3      	adds	r3, r2, r3
 8006332:	3304      	adds	r3, #4
 8006334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006342:	1cfb      	adds	r3, r7, #3
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2207      	movs	r2, #7
 8006348:	4013      	ands	r3, r2
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	23a5      	movs	r3, #165	@ 0xa5
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	5cd3      	ldrb	r3, [r2, r3]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_PCD_EP_ClrStall+0x94>
 800635c:	2302      	movs	r3, #2
 800635e:	e011      	b.n	8006384 <HAL_PCD_EP_ClrStall+0xb8>
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	23a5      	movs	r3, #165	@ 0xa5
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	2101      	movs	r1, #1
 8006368:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	0011      	movs	r1, r2
 8006372:	0018      	movs	r0, r3
 8006374:	f004 f85c 	bl	800a430 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	23a5      	movs	r3, #165	@ 0xa5
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	2100      	movs	r1, #0
 8006380:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}

0800638c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800638c:	b5b0      	push	{r4, r5, r7, lr}
 800638e:	b08e      	sub	sp, #56	@ 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006394:	e355      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800639c:	2022      	movs	r0, #34	@ 0x22
 800639e:	183b      	adds	r3, r7, r0
 80063a0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80063a2:	183b      	adds	r3, r7, r0
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	2421      	movs	r4, #33	@ 0x21
 80063aa:	193b      	adds	r3, r7, r4
 80063ac:	210f      	movs	r1, #15
 80063ae:	400a      	ands	r2, r1
 80063b0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80063b2:	193b      	adds	r3, r7, r4
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d000      	beq.n	80063bc <PCD_EP_ISR_Handler+0x30>
 80063ba:	e12b      	b.n	8006614 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80063bc:	183b      	adds	r3, r7, r0
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	2210      	movs	r2, #16
 80063c2:	4013      	ands	r3, r2
 80063c4:	d140      	bne.n	8006448 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4ac5      	ldr	r2, [pc, #788]	@ (80066e4 <PCD_EP_ISR_Handler+0x358>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	2180      	movs	r1, #128	@ 0x80
 80063da:	0209      	lsls	r1, r1, #8
 80063dc:	430a      	orrs	r2, r1
 80063de:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3314      	adds	r3, #20
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80063e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	4abe      	ldr	r2, [pc, #760]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 80063ee:	4694      	mov	ip, r2
 80063f0:	4463      	add	r3, ip
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	059b      	lsls	r3, r3, #22
 80063f8:	0d9a      	lsrs	r2, r3, #22
 80063fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	18d2      	adds	r2, r2, r3
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2100      	movs	r1, #0
 8006410:	0018      	movs	r0, r3
 8006412:	f006 fe6f 	bl	800d0f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7c5b      	ldrb	r3, [r3, #17]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d100      	bne.n	8006422 <PCD_EP_ISR_Handler+0x96>
 8006420:	e30f      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
 8006422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d000      	beq.n	800642c <PCD_EP_ISR_Handler+0xa0>
 800642a:	e30a      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7c5b      	ldrb	r3, [r3, #17]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2280      	movs	r2, #128	@ 0x80
 8006434:	4252      	negs	r2, r2
 8006436:	4313      	orrs	r3, r2
 8006438:	b2da      	uxtb	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	745a      	strb	r2, [r3, #17]
 8006446:	e2fc      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3355      	adds	r3, #85	@ 0x55
 800644c:	33ff      	adds	r3, #255	@ 0xff
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2132      	movs	r1, #50	@ 0x32
 8006458:	187b      	adds	r3, r7, r1
 800645a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800645c:	187b      	adds	r3, r7, r1
 800645e:	881a      	ldrh	r2, [r3, #0]
 8006460:	2380      	movs	r3, #128	@ 0x80
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	4013      	ands	r3, r2
 8006466:	d029      	beq.n	80064bc <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	0019      	movs	r1, r3
 8006472:	0010      	movs	r0, r2
 8006474:	f7ff fab4 	bl	80059e0 <PCD_GET_EP_RX_CNT>
 8006478:	0003      	movs	r3, r0
 800647a:	001a      	movs	r2, r3
 800647c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800647e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22a7      	movs	r2, #167	@ 0xa7
 8006488:	0092      	lsls	r2, r2, #2
 800648a:	1899      	adds	r1, r3, r2
 800648c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006494:	b29b      	uxth	r3, r3
 8006496:	f004 f903 	bl	800a6a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a92      	ldr	r2, [pc, #584]	@ (80066ec <PCD_EP_ISR_Handler+0x360>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	2180      	movs	r1, #128	@ 0x80
 80064ae:	430a      	orrs	r2, r1
 80064b0:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f006 fde7 	bl	800d088 <HAL_PCD_SetupStageCallback>
 80064ba:	e2c2      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80064bc:	2332      	movs	r3, #50	@ 0x32
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2200      	movs	r2, #0
 80064c2:	5e9b      	ldrsh	r3, [r3, r2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db00      	blt.n	80064ca <PCD_EP_ISR_Handler+0x13e>
 80064c8:	e2bb      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a86      	ldr	r2, [pc, #536]	@ (80066ec <PCD_EP_ISR_Handler+0x360>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064dc:	2180      	movs	r1, #128	@ 0x80
 80064de:	430a      	orrs	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	0019      	movs	r1, r3
 80064ec:	0010      	movs	r0, r2
 80064ee:	f7ff fa77 	bl	80059e0 <PCD_GET_EP_RX_CNT>
 80064f2:	0003      	movs	r3, r0
 80064f4:	001a      	movs	r2, r3
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80064fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01a      	beq.n	8006538 <PCD_EP_ISR_Handler+0x1ac>
 8006502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	6959      	ldr	r1, [r3, #20]
 8006512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006514:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800651a:	b29b      	uxth	r3, r3
 800651c:	f004 f8c0 	bl	800a6a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	18d2      	adds	r2, r2, r3
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2100      	movs	r1, #0
 8006532:	0018      	movs	r0, r3
 8006534:	f006 fdbd 	bl	800d0b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2132      	movs	r1, #50	@ 0x32
 8006540:	187b      	adds	r3, r7, r1
 8006542:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006544:	187b      	adds	r3, r7, r1
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	4013      	ands	r3, r2
 800654e:	d000      	beq.n	8006552 <PCD_EP_ISR_Handler+0x1c6>
 8006550:	e277      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
 8006552:	187b      	adds	r3, r7, r1
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	23c0      	movs	r3, #192	@ 0xc0
 8006558:	019b      	lsls	r3, r3, #6
 800655a:	401a      	ands	r2, r3
 800655c:	23c0      	movs	r3, #192	@ 0xc0
 800655e:	019b      	lsls	r3, r3, #6
 8006560:	429a      	cmp	r2, r3
 8006562:	d100      	bne.n	8006566 <PCD_EP_ISR_Handler+0x1da>
 8006564:	e26d      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006566:	4b60      	ldr	r3, [pc, #384]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4b5f      	ldr	r3, [pc, #380]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 800656c:	0192      	lsls	r2, r2, #6
 800656e:	0992      	lsrs	r2, r2, #6
 8006570:	605a      	str	r2, [r3, #4]
 8006572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b3e      	cmp	r3, #62	@ 0x3e
 8006578:	d916      	bls.n	80065a8 <PCD_EP_ISR_Handler+0x21c>
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	221f      	movs	r2, #31
 8006588:	4013      	ands	r3, r2
 800658a:	d102      	bne.n	8006592 <PCD_EP_ISR_Handler+0x206>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	3b01      	subs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	4b55      	ldr	r3, [pc, #340]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	069b      	lsls	r3, r3, #26
 800659a:	431a      	orrs	r2, r3
 800659c:	4b52      	ldr	r3, [pc, #328]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 800659e:	2180      	movs	r1, #128	@ 0x80
 80065a0:	0609      	lsls	r1, r1, #24
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	e01e      	b.n	80065e6 <PCD_EP_ISR_Handler+0x25a>
 80065a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <PCD_EP_ISR_Handler+0x234>
 80065b0:	4b4d      	ldr	r3, [pc, #308]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	4b4c      	ldr	r3, [pc, #304]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 80065b6:	2180      	movs	r1, #128	@ 0x80
 80065b8:	0609      	lsls	r1, r1, #24
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	e012      	b.n	80065e6 <PCD_EP_ISR_Handler+0x25a>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2201      	movs	r2, #1
 80065ce:	4013      	ands	r3, r2
 80065d0:	d002      	beq.n	80065d8 <PCD_EP_ISR_Handler+0x24c>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	3301      	adds	r3, #1
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	4b43      	ldr	r3, [pc, #268]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 80065da:	6859      	ldr	r1, [r3, #4]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	069a      	lsls	r2, r3, #26
 80065e0:	4b41      	ldr	r3, [pc, #260]	@ (80066e8 <PCD_EP_ISR_Handler+0x35c>)
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a40      	ldr	r2, [pc, #256]	@ (80066f0 <PCD_EP_ISR_Handler+0x364>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2280      	movs	r2, #128	@ 0x80
 80065f6:	0152      	lsls	r2, r2, #5
 80065f8:	4053      	eors	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2280      	movs	r2, #128	@ 0x80
 8006600:	0192      	lsls	r2, r2, #6
 8006602:	4053      	eors	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4939      	ldr	r1, [pc, #228]	@ (80066f4 <PCD_EP_ISR_Handler+0x368>)
 800660e:	430a      	orrs	r2, r1
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e216      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	001a      	movs	r2, r3
 800661a:	2121      	movs	r1, #33	@ 0x21
 800661c:	187b      	adds	r3, r7, r1
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	18d3      	adds	r3, r2, r3
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	2032      	movs	r0, #50	@ 0x32
 8006628:	183b      	adds	r3, r7, r0
 800662a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800662c:	183b      	adds	r3, r7, r0
 800662e:	2200      	movs	r2, #0
 8006630:	5e9b      	ldrsh	r3, [r3, r2]
 8006632:	2b00      	cmp	r3, #0
 8006634:	db00      	blt.n	8006638 <PCD_EP_ISR_Handler+0x2ac>
 8006636:	e0e0      	b.n	80067fa <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	001a      	movs	r2, r3
 800663e:	187b      	adds	r3, r7, r1
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a28      	ldr	r2, [pc, #160]	@ (80066ec <PCD_EP_ISR_Handler+0x360>)
 800664a:	4013      	ands	r3, r2
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	001a      	movs	r2, r3
 8006654:	0008      	movs	r0, r1
 8006656:	187b      	adds	r3, r7, r1
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	18d3      	adds	r3, r2, r3
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	2180      	movs	r1, #128	@ 0x80
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006666:	183b      	adds	r3, r7, r0
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	0013      	movs	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	189b      	adds	r3, r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	3351      	adds	r3, #81	@ 0x51
 8006674:	33ff      	adds	r3, #255	@ 0xff
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	18d3      	adds	r3, r2, r3
 800667a:	3304      	adds	r3, #4
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	7b1b      	ldrb	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d11c      	bne.n	80066c0 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2524      	movs	r5, #36	@ 0x24
 8006690:	197c      	adds	r4, r7, r5
 8006692:	0019      	movs	r1, r3
 8006694:	0010      	movs	r0, r2
 8006696:	f7ff f9a3 	bl	80059e0 <PCD_GET_EP_RX_CNT>
 800669a:	0003      	movs	r3, r0
 800669c:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800669e:	002c      	movs	r4, r5
 80066a0:	193b      	adds	r3, r7, r4
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d100      	bne.n	80066aa <PCD_EP_ISR_Handler+0x31e>
 80066a8:	e07f      	b.n	80067aa <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	6959      	ldr	r1, [r3, #20]
 80066b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b4:	88da      	ldrh	r2, [r3, #6]
 80066b6:	193b      	adds	r3, r7, r4
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	f003 fff1 	bl	800a6a0 <USB_ReadPMA>
 80066be:	e074      	b.n	80067aa <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80066c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d117      	bne.n	80066f8 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80066c8:	2324      	movs	r3, #36	@ 0x24
 80066ca:	18fc      	adds	r4, r7, r3
 80066cc:	2332      	movs	r3, #50	@ 0x32
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	881a      	ldrh	r2, [r3, #0]
 80066d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 f9c8 	bl	8006a6c <HAL_PCD_EP_DB_Receive>
 80066dc:	0003      	movs	r3, r0
 80066de:	8023      	strh	r3, [r4, #0]
 80066e0:	e063      	b.n	80067aa <PCD_EP_ISR_Handler+0x41e>
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	07ff8f0f 	.word	0x07ff8f0f
 80066e8:	40009800 	.word	0x40009800
 80066ec:	07ff0f8f 	.word	0x07ff0f8f
 80066f0:	07ffbf8f 	.word	0x07ffbf8f
 80066f4:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	001a      	movs	r2, r3
 80066fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	18d3      	adds	r3, r2, r3
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4ad4      	ldr	r2, [pc, #848]	@ (8006a5c <PCD_EP_ISR_Handler+0x6d0>)
 800670a:	4013      	ands	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	001a      	movs	r2, r3
 8006714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	18d3      	adds	r3, r2, r3
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	49d0      	ldr	r1, [pc, #832]	@ (8006a60 <PCD_EP_ISR_Handler+0x6d4>)
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	001a      	movs	r2, r3
 800672a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	01db      	lsls	r3, r3, #7
 8006738:	4013      	ands	r3, r2
 800673a:	d01b      	beq.n	8006774 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2524      	movs	r5, #36	@ 0x24
 8006746:	197c      	adds	r4, r7, r5
 8006748:	0019      	movs	r1, r3
 800674a:	0010      	movs	r0, r2
 800674c:	f7ff f96a 	bl	8005a24 <PCD_GET_EP_DBUF0_CNT>
 8006750:	0003      	movs	r3, r0
 8006752:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8006754:	002c      	movs	r4, r5
 8006756:	193b      	adds	r3, r7, r4
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d025      	beq.n	80067aa <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006764:	6959      	ldr	r1, [r3, #20]
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	891a      	ldrh	r2, [r3, #8]
 800676a:	193b      	adds	r3, r7, r4
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	f003 ff97 	bl	800a6a0 <USB_ReadPMA>
 8006772:	e01a      	b.n	80067aa <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2524      	movs	r5, #36	@ 0x24
 800677e:	197c      	adds	r4, r7, r5
 8006780:	0019      	movs	r1, r3
 8006782:	0010      	movs	r0, r2
 8006784:	f7ff f970 	bl	8005a68 <PCD_GET_EP_DBUF1_CNT>
 8006788:	0003      	movs	r3, r0
 800678a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800678c:	002c      	movs	r4, r5
 800678e:	193b      	adds	r3, r7, r4
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679c:	6959      	ldr	r1, [r3, #20]
 800679e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a0:	895a      	ldrh	r2, [r3, #10]
 80067a2:	193b      	adds	r3, r7, r4
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	f003 ff7b 	bl	800a6a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	2124      	movs	r1, #36	@ 0x24
 80067b0:	187b      	adds	r3, r7, r1
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	18d2      	adds	r2, r2, r3
 80067b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80067ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	187b      	adds	r3, r7, r1
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	18d2      	adds	r2, r2, r3
 80067c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80067c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <PCD_EP_ISR_Handler+0x450>
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d207      	bcs.n	80067ec <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80067dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0011      	movs	r1, r2
 80067e4:	0018      	movs	r0, r3
 80067e6:	f006 fc64 	bl	800d0b2 <HAL_PCD_DataOutStageCallback>
 80067ea:	e006      	b.n	80067fa <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067f2:	0011      	movs	r1, r2
 80067f4:	0018      	movs	r0, r3
 80067f6:	f002 fdc3 	bl	8009380 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80067fa:	2032      	movs	r0, #50	@ 0x32
 80067fc:	183b      	adds	r3, r7, r0
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	2280      	movs	r2, #128	@ 0x80
 8006802:	4013      	ands	r3, r2
 8006804:	d100      	bne.n	8006808 <PCD_EP_ISR_Handler+0x47c>
 8006806:	e11c      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 8006808:	2121      	movs	r1, #33	@ 0x21
 800680a:	187b      	adds	r3, r7, r1
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	0013      	movs	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	189b      	adds	r3, r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	3310      	adds	r3, #16
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	18d3      	adds	r3, r2, r3
 800681c:	3304      	adds	r3, #4
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	001a      	movs	r2, r3
 8006826:	187b      	adds	r3, r7, r1
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	18d3      	adds	r3, r2, r3
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a8c      	ldr	r2, [pc, #560]	@ (8006a64 <PCD_EP_ISR_Handler+0x6d8>)
 8006832:	4013      	ands	r3, r2
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	001a      	movs	r2, r3
 800683c:	187b      	adds	r3, r7, r1
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	18d3      	adds	r3, r2, r3
 8006844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006846:	2180      	movs	r1, #128	@ 0x80
 8006848:	0209      	lsls	r1, r1, #8
 800684a:	430a      	orrs	r2, r1
 800684c:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800684e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006850:	78db      	ldrb	r3, [r3, #3]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d000      	beq.n	8006858 <PCD_EP_ISR_Handler+0x4cc>
 8006856:	e0a3      	b.n	80069a0 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	2200      	movs	r2, #0
 800685c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800685e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006860:	7b1b      	ldrb	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d100      	bne.n	8006868 <PCD_EP_ISR_Handler+0x4dc>
 8006866:	e093      	b.n	8006990 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006868:	183b      	adds	r3, r7, r0
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	2240      	movs	r2, #64	@ 0x40
 800686e:	4013      	ands	r3, r2
 8006870:	d047      	beq.n	8006902 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d121      	bne.n	80068be <PCD_EP_ISR_Handler+0x532>
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4a79      	ldr	r2, [pc, #484]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006882:	4694      	mov	ip, r2
 8006884:	4463      	add	r3, ip
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	4976      	ldr	r1, [pc, #472]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006890:	468c      	mov	ip, r1
 8006892:	4463      	add	r3, ip
 8006894:	0192      	lsls	r2, r2, #6
 8006896:	0992      	lsrs	r2, r2, #6
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4a71      	ldr	r2, [pc, #452]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068a2:	4694      	mov	ip, r2
 80068a4:	4463      	add	r3, ip
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	496e      	ldr	r1, [pc, #440]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068b0:	468c      	mov	ip, r1
 80068b2:	4463      	add	r3, ip
 80068b4:	2180      	movs	r1, #128	@ 0x80
 80068b6:	0609      	lsls	r1, r1, #24
 80068b8:	430a      	orrs	r2, r1
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	e068      	b.n	8006990 <PCD_EP_ISR_Handler+0x604>
 80068be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d164      	bne.n	8006990 <PCD_EP_ISR_Handler+0x604>
 80068c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4a66      	ldr	r2, [pc, #408]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068ce:	4694      	mov	ip, r2
 80068d0:	4463      	add	r3, ip
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	4963      	ldr	r1, [pc, #396]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068dc:	468c      	mov	ip, r1
 80068de:	4463      	add	r3, ip
 80068e0:	0412      	lsls	r2, r2, #16
 80068e2:	0c12      	lsrs	r2, r2, #16
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068ee:	189a      	adds	r2, r3, r2
 80068f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	495c      	ldr	r1, [pc, #368]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80068f8:	468c      	mov	ip, r1
 80068fa:	4463      	add	r3, ip
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e046      	b.n	8006990 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d121      	bne.n	800694e <PCD_EP_ISR_Handler+0x5c2>
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4a55      	ldr	r2, [pc, #340]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006912:	4694      	mov	ip, r2
 8006914:	4463      	add	r3, ip
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4952      	ldr	r1, [pc, #328]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006920:	468c      	mov	ip, r1
 8006922:	4463      	add	r3, ip
 8006924:	0192      	lsls	r2, r2, #6
 8006926:	0992      	lsrs	r2, r2, #6
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4a4d      	ldr	r2, [pc, #308]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006932:	4694      	mov	ip, r2
 8006934:	4463      	add	r3, ip
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	494a      	ldr	r1, [pc, #296]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006940:	468c      	mov	ip, r1
 8006942:	4463      	add	r3, ip
 8006944:	2180      	movs	r1, #128	@ 0x80
 8006946:	0609      	lsls	r1, r1, #24
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	e020      	b.n	8006990 <PCD_EP_ISR_Handler+0x604>
 800694e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d11c      	bne.n	8006990 <PCD_EP_ISR_Handler+0x604>
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	4a42      	ldr	r2, [pc, #264]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 800695e:	4694      	mov	ip, r2
 8006960:	4463      	add	r3, ip
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	493f      	ldr	r1, [pc, #252]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 800696c:	468c      	mov	ip, r1
 800696e:	4463      	add	r3, ip
 8006970:	0412      	lsls	r2, r2, #16
 8006972:	0c12      	lsrs	r2, r2, #16
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4a3a      	ldr	r2, [pc, #232]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 800697e:	189a      	adds	r2, r3, r2
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4938      	ldr	r1, [pc, #224]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 8006988:	468c      	mov	ip, r1
 800698a:	4463      	add	r3, ip
 800698c:	6852      	ldr	r2, [r2, #4]
 800698e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f006 fbab 	bl	800d0f4 <HAL_PCD_DataInStageCallback>
 800699e:	e050      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80069a0:	2332      	movs	r3, #50	@ 0x32
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	881a      	ldrh	r2, [r3, #0]
 80069a6:	2380      	movs	r3, #128	@ 0x80
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4013      	ands	r3, r2
 80069ac:	d141      	bne.n	8006a32 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80069ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <PCD_EP_ISR_Handler+0x6dc>)
 80069b6:	4694      	mov	ip, r2
 80069b8:	4463      	add	r3, ip
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	b29a      	uxth	r2, r3
 80069c0:	2126      	movs	r1, #38	@ 0x26
 80069c2:	187b      	adds	r3, r7, r1
 80069c4:	0592      	lsls	r2, r2, #22
 80069c6:	0d92      	lsrs	r2, r2, #22
 80069c8:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	187b      	adds	r3, r7, r1
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d907      	bls.n	80069e6 <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 80069d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	187b      	adds	r3, r7, r1
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e2:	619a      	str	r2, [r3, #24]
 80069e4:	e002      	b.n	80069ec <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 80069e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e8:	2200      	movs	r2, #0
 80069ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80069ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0011      	movs	r1, r2
 80069fc:	0018      	movs	r0, r3
 80069fe:	f006 fb79 	bl	800d0f4 <HAL_PCD_DataInStageCallback>
 8006a02:	e01e      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a06:	695a      	ldr	r2, [r3, #20]
 8006a08:	2126      	movs	r1, #38	@ 0x26
 8006a0a:	187b      	adds	r3, r7, r1
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	18d2      	adds	r2, r2, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	18d2      	adds	r2, r2, r3
 8006a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a20:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a28:	0011      	movs	r1, r2
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f002 fca8 	bl	8009380 <USB_EPStartXfer>
 8006a30:	e007      	b.n	8006a42 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006a32:	2332      	movs	r3, #50	@ 0x32
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 f8ff 	bl	8006c40 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a48:	2380      	movs	r3, #128	@ 0x80
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d000      	beq.n	8006a52 <PCD_EP_ISR_Handler+0x6c6>
 8006a50:	e4a1      	b.n	8006396 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b00e      	add	sp, #56	@ 0x38
 8006a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5c:	07ff8f8f 	.word	0x07ff8f8f
 8006a60:	000080c0 	.word	0x000080c0
 8006a64:	07ff8f0f 	.word	0x07ff8f0f
 8006a68:	40009800 	.word	0x40009800

08006a6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a6c:	b5b0      	push	{r4, r5, r7, lr}
 8006a6e:	b08a      	sub	sp, #40	@ 0x28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	1dbb      	adds	r3, r7, #6
 8006a78:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a7a:	1dbb      	adds	r3, r7, #6
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	2380      	movs	r3, #128	@ 0x80
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4013      	ands	r3, r2
 8006a84:	d067      	beq.n	8006b56 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	251e      	movs	r5, #30
 8006a90:	197c      	adds	r4, r7, r5
 8006a92:	0019      	movs	r1, r3
 8006a94:	0010      	movs	r0, r2
 8006a96:	f7fe ffc5 	bl	8005a24 <PCD_GET_EP_DBUF0_CNT>
 8006a9a:	0003      	movs	r3, r0
 8006a9c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	197b      	adds	r3, r7, r5
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d307      	bcc.n	8006aba <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	197b      	adds	r3, r7, r5
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	619a      	str	r2, [r3, #24]
 8006ab8:	e002      	b.n	8006ac0 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11a      	bne.n	8006afe <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	001a      	movs	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	18d3      	adds	r3, r2, r3
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a55      	ldr	r2, [pc, #340]	@ (8006c30 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2280      	movs	r2, #128	@ 0x80
 8006ae2:	0192      	lsls	r2, r2, #6
 8006ae4:	4053      	eors	r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	001a      	movs	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	18d3      	adds	r3, r2, r3
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	494e      	ldr	r1, [pc, #312]	@ (8006c34 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8006afa:	430a      	orrs	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006afe:	1dbb      	adds	r3, r7, #6
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	2240      	movs	r2, #64	@ 0x40
 8006b04:	4013      	ands	r3, r2
 8006b06:	d015      	beq.n	8006b34 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	18d3      	adds	r3, r2, r3
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a47      	ldr	r2, [pc, #284]	@ (8006c38 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	001a      	movs	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4943      	ldr	r1, [pc, #268]	@ (8006c3c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8006b30:	430a      	orrs	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8006b34:	241e      	movs	r4, #30
 8006b36:	193b      	adds	r3, r7, r4
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d100      	bne.n	8006b40 <HAL_PCD_EP_DB_Receive+0xd4>
 8006b3e:	e070      	b.n	8006c22 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	6959      	ldr	r1, [r3, #20]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	891a      	ldrh	r2, [r3, #8]
 8006b4c:	193b      	adds	r3, r7, r4
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	f003 fda6 	bl	800a6a0 <USB_ReadPMA>
 8006b54:	e065      	b.n	8006c22 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	251e      	movs	r5, #30
 8006b60:	197c      	adds	r4, r7, r5
 8006b62:	0019      	movs	r1, r3
 8006b64:	0010      	movs	r0, r2
 8006b66:	f7fe ff7f 	bl	8005a68 <PCD_GET_EP_DBUF1_CNT>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	197b      	adds	r3, r7, r5
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d307      	bcc.n	8006b8a <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	197b      	adds	r3, r7, r5
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e002      	b.n	8006b90 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11a      	bne.n	8006bce <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	18d3      	adds	r3, r2, r3
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a21      	ldr	r2, [pc, #132]	@ (8006c30 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	2280      	movs	r2, #128	@ 0x80
 8006bb2:	0192      	lsls	r2, r2, #6
 8006bb4:	4053      	eors	r3, r2
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	18d3      	adds	r3, r2, r3
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc8:	491a      	ldr	r1, [pc, #104]	@ (8006c34 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006bce:	1dbb      	adds	r3, r7, #6
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	2240      	movs	r2, #64	@ 0x40
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d115      	bne.n	8006c04 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	001a      	movs	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	18d3      	adds	r3, r2, r3
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a13      	ldr	r2, [pc, #76]	@ (8006c38 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	18d3      	adds	r3, r2, r3
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	490f      	ldr	r1, [pc, #60]	@ (8006c3c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8006c00:	430a      	orrs	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8006c04:	241e      	movs	r4, #30
 8006c06:	193b      	adds	r3, r7, r4
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6959      	ldr	r1, [r3, #20]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	895a      	ldrh	r2, [r3, #10]
 8006c1a:	193b      	adds	r3, r7, r4
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	f003 fd3f 	bl	800a6a0 <USB_ReadPMA>
    }
  }

  return count;
 8006c22:	231e      	movs	r3, #30
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	881b      	ldrh	r3, [r3, #0]
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b00a      	add	sp, #40	@ 0x28
 8006c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c30:	07ffbf8f 	.word	0x07ffbf8f
 8006c34:	00008080 	.word	0x00008080
 8006c38:	07ff8f8f 	.word	0x07ff8f8f
 8006c3c:	000080c0 	.word	0x000080c0

08006c40 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c40:	b5b0      	push	{r4, r5, r7, lr}
 8006c42:	b08e      	sub	sp, #56	@ 0x38
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	1dbb      	adds	r3, r7, #6
 8006c4c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c4e:	1dbb      	adds	r3, r7, #6
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	2240      	movs	r2, #64	@ 0x40
 8006c54:	4013      	ands	r3, r2
 8006c56:	d100      	bne.n	8006c5a <HAL_PCD_EP_DB_Transmit+0x1a>
 8006c58:	e1c3      	b.n	8006fe2 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	251e      	movs	r5, #30
 8006c64:	197c      	adds	r4, r7, r5
 8006c66:	0019      	movs	r1, r3
 8006c68:	0010      	movs	r0, r2
 8006c6a:	f7fe fedb 	bl	8005a24 <PCD_GET_EP_DBUF0_CNT>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	197b      	adds	r3, r7, r5
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d907      	bls.n	8006c8e <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	197b      	adds	r3, r7, r5
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	619a      	str	r2, [r3, #24]
 8006c8c:	e002      	b.n	8006c94 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2200      	movs	r2, #0
 8006c92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d000      	beq.n	8006c9e <HAL_PCD_EP_DB_Transmit+0x5e>
 8006c9c:	e0b2      	b.n	8006e04 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d121      	bne.n	8006cea <HAL_PCD_EP_DB_Transmit+0xaa>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4ada      	ldr	r2, [pc, #872]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006cae:	4694      	mov	ip, r2
 8006cb0:	4463      	add	r3, ip
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	49d7      	ldr	r1, [pc, #860]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006cbc:	468c      	mov	ip, r1
 8006cbe:	4463      	add	r3, ip
 8006cc0:	0192      	lsls	r2, r2, #6
 8006cc2:	0992      	lsrs	r2, r2, #6
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4ad2      	ldr	r2, [pc, #840]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006cce:	4694      	mov	ip, r2
 8006cd0:	4463      	add	r3, ip
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	49cf      	ldr	r1, [pc, #828]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006cdc:	468c      	mov	ip, r1
 8006cde:	4463      	add	r3, ip
 8006ce0:	2180      	movs	r1, #128	@ 0x80
 8006ce2:	0609      	lsls	r1, r1, #24
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	e020      	b.n	8006d2c <HAL_PCD_EP_DB_Transmit+0xec>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d11c      	bne.n	8006d2c <HAL_PCD_EP_DB_Transmit+0xec>
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4ac7      	ldr	r2, [pc, #796]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006cfa:	4694      	mov	ip, r2
 8006cfc:	4463      	add	r3, ip
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	49c4      	ldr	r1, [pc, #784]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d08:	468c      	mov	ip, r1
 8006d0a:	4463      	add	r3, ip
 8006d0c:	0412      	lsls	r2, r2, #16
 8006d0e:	0c12      	lsrs	r2, r2, #16
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	4abf      	ldr	r2, [pc, #764]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d1a:	189a      	adds	r2, r3, r2
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	49bd      	ldr	r1, [pc, #756]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d24:	468c      	mov	ip, r1
 8006d26:	4463      	add	r3, ip
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d121      	bne.n	8006d78 <HAL_PCD_EP_DB_Transmit+0x138>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4ab7      	ldr	r2, [pc, #732]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d3c:	4694      	mov	ip, r2
 8006d3e:	4463      	add	r3, ip
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	49b3      	ldr	r1, [pc, #716]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d4a:	468c      	mov	ip, r1
 8006d4c:	4463      	add	r3, ip
 8006d4e:	0192      	lsls	r2, r2, #6
 8006d50:	0992      	lsrs	r2, r2, #6
 8006d52:	605a      	str	r2, [r3, #4]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	4aaf      	ldr	r2, [pc, #700]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d5c:	4694      	mov	ip, r2
 8006d5e:	4463      	add	r3, ip
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	49ab      	ldr	r1, [pc, #684]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d6a:	468c      	mov	ip, r1
 8006d6c:	4463      	add	r3, ip
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	0609      	lsls	r1, r1, #24
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
 8006d76:	e020      	b.n	8006dba <HAL_PCD_EP_DB_Transmit+0x17a>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d11c      	bne.n	8006dba <HAL_PCD_EP_DB_Transmit+0x17a>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4aa4      	ldr	r2, [pc, #656]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d88:	4694      	mov	ip, r2
 8006d8a:	4463      	add	r3, ip
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	49a0      	ldr	r1, [pc, #640]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006d96:	468c      	mov	ip, r1
 8006d98:	4463      	add	r3, ip
 8006d9a:	0412      	lsls	r2, r2, #16
 8006d9c:	0c12      	lsrs	r2, r2, #16
 8006d9e:	605a      	str	r2, [r3, #4]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4a9c      	ldr	r2, [pc, #624]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006da8:	189a      	adds	r2, r3, r2
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4999      	ldr	r1, [pc, #612]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006db2:	468c      	mov	ip, r1
 8006db4:	4463      	add	r3, ip
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	0011      	movs	r1, r2
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f006 f996 	bl	800d0f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dc8:	1dbb      	adds	r3, r7, #6
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d100      	bne.n	8006dd6 <HAL_PCD_EP_DB_Transmit+0x196>
 8006dd4:	e2d5      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	001a      	movs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	18d3      	adds	r3, r2, r3
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a8d      	ldr	r2, [pc, #564]	@ (800701c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	001a      	movs	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	18d3      	adds	r3, r2, r3
 8006dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfc:	4988      	ldr	r1, [pc, #544]	@ (8007020 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e2be      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e04:	1dbb      	adds	r3, r7, #6
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	2380      	movs	r3, #128	@ 0x80
 8006e0a:	01db      	lsls	r3, r3, #7
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d015      	beq.n	8006e3c <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	001a      	movs	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	18d3      	adds	r3, r2, r3
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7e      	ldr	r2, [pc, #504]	@ (800701c <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	18d3      	adds	r3, r2, r3
 8006e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e36:	497a      	ldr	r1, [pc, #488]	@ (8007020 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2224      	movs	r2, #36	@ 0x24
 8006e40:	5c9b      	ldrb	r3, [r3, r2]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d000      	beq.n	8006e48 <HAL_PCD_EP_DB_Transmit+0x208>
 8006e46:	e29c      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	211e      	movs	r1, #30
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	18d2      	adds	r2, r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	187b      	adds	r3, r7, r1
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	18d2      	adds	r2, r2, r3
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d309      	bcc.n	8006e86 <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	621a      	str	r2, [r3, #32]
 8006e84:	e016      	b.n	8006eb4 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 8006e8e:	231e      	movs	r3, #30
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2224      	movs	r2, #36	@ 0x24
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	5499      	strb	r1, [r3, r2]
 8006e9e:	e009      	b.n	8006eb4 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2224      	movs	r2, #36	@ 0x24
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d162      	bne.n	8006f82 <HAL_PCD_EP_DB_Transmit+0x342>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4a55      	ldr	r2, [pc, #340]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006ec4:	4694      	mov	ip, r2
 8006ec6:	4463      	add	r3, ip
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4951      	ldr	r1, [pc, #324]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006ed2:	468c      	mov	ip, r1
 8006ed4:	4463      	add	r3, ip
 8006ed6:	0192      	lsls	r2, r2, #6
 8006ed8:	0992      	lsrs	r2, r2, #6
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ede:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ee0:	d91e      	bls.n	8006f20 <HAL_PCD_EP_DB_Transmit+0x2e0>
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	221f      	movs	r2, #31
 8006eec:	4013      	ands	r3, r2
 8006eee:	d102      	bne.n	8006ef6 <HAL_PCD_EP_DB_Transmit+0x2b6>
 8006ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	4a46      	ldr	r2, [pc, #280]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006efe:	4694      	mov	ip, r2
 8006f00:	4463      	add	r3, ip
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	069b      	lsls	r3, r3, #26
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	4941      	ldr	r1, [pc, #260]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f12:	468c      	mov	ip, r1
 8006f14:	4463      	add	r3, ip
 8006f16:	2180      	movs	r1, #128	@ 0x80
 8006f18:	0609      	lsls	r1, r1, #24
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e055      	b.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x38c>
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d111      	bne.n	8006f4a <HAL_PCD_EP_DB_Transmit+0x30a>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f2e:	4694      	mov	ip, r2
 8006f30:	4463      	add	r3, ip
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4937      	ldr	r1, [pc, #220]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f3c:	468c      	mov	ip, r1
 8006f3e:	4463      	add	r3, ip
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	0609      	lsls	r1, r1, #24
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e040      	b.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x38c>
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	2201      	movs	r2, #1
 8006f54:	4013      	ands	r3, r2
 8006f56:	d002      	beq.n	8006f5e <HAL_PCD_EP_DB_Transmit+0x31e>
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f66:	4694      	mov	ip, r2
 8006f68:	4463      	add	r3, ip
 8006f6a:	6819      	ldr	r1, [r3, #0]
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6e:	069a      	lsls	r2, r3, #26
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4828      	ldr	r0, [pc, #160]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f78:	4684      	mov	ip, r0
 8006f7a:	4463      	add	r3, ip
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e024      	b.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x38c>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d120      	bne.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x38c>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4a21      	ldr	r2, [pc, #132]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006f92:	4694      	mov	ip, r2
 8006f94:	4463      	add	r3, ip
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	491e      	ldr	r1, [pc, #120]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006fa0:	468c      	mov	ip, r1
 8006fa2:	4463      	add	r3, ip
 8006fa4:	0412      	lsls	r2, r2, #16
 8006fa6:	0c12      	lsrs	r2, r2, #16
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006fb2:	4694      	mov	ip, r2
 8006fb4:	4463      	add	r3, ip
 8006fb6:	6819      	ldr	r1, [r3, #0]
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	041a      	lsls	r2, r3, #16
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4815      	ldr	r0, [pc, #84]	@ (8007018 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8006fc4:	4684      	mov	ip, r0
 8006fc6:	4463      	add	r3, ip
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6959      	ldr	r1, [r3, #20]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	891a      	ldrh	r2, [r3, #8]
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f003 faea 	bl	800a5b4 <USB_WritePMA>
 8006fe0:	e1cf      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	251e      	movs	r5, #30
 8006fec:	197c      	adds	r4, r7, r5
 8006fee:	0019      	movs	r1, r3
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	f7fe fd39 	bl	8005a68 <PCD_GET_EP_DBUF1_CNT>
 8006ff6:	0003      	movs	r3, r0
 8006ff8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	197b      	adds	r3, r7, r5
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d30e      	bcc.n	8007024 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	197b      	adds	r3, r7, r5
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	619a      	str	r2, [r3, #24]
 8007014:	e009      	b.n	800702a <HAL_PCD_EP_DB_Transmit+0x3ea>
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	40009800 	.word	0x40009800
 800701c:	07ff8f8f 	.word	0x07ff8f8f
 8007020:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d000      	beq.n	8007034 <HAL_PCD_EP_DB_Transmit+0x3f4>
 8007032:	e0b2      	b.n	800719a <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d121      	bne.n	8007080 <HAL_PCD_EP_DB_Transmit+0x440>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	4ab5      	ldr	r2, [pc, #724]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007044:	4694      	mov	ip, r2
 8007046:	4463      	add	r3, ip
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	49b1      	ldr	r1, [pc, #708]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007052:	468c      	mov	ip, r1
 8007054:	4463      	add	r3, ip
 8007056:	0192      	lsls	r2, r2, #6
 8007058:	0992      	lsrs	r2, r2, #6
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	4aad      	ldr	r2, [pc, #692]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007064:	4694      	mov	ip, r2
 8007066:	4463      	add	r3, ip
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	49a9      	ldr	r1, [pc, #676]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007072:	468c      	mov	ip, r1
 8007074:	4463      	add	r3, ip
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	0609      	lsls	r1, r1, #24
 800707a:	430a      	orrs	r2, r1
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e020      	b.n	80070c2 <HAL_PCD_EP_DB_Transmit+0x482>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d11c      	bne.n	80070c2 <HAL_PCD_EP_DB_Transmit+0x482>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4aa2      	ldr	r2, [pc, #648]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007090:	4694      	mov	ip, r2
 8007092:	4463      	add	r3, ip
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	499e      	ldr	r1, [pc, #632]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800709e:	468c      	mov	ip, r1
 80070a0:	4463      	add	r3, ip
 80070a2:	0412      	lsls	r2, r2, #16
 80070a4:	0c12      	lsrs	r2, r2, #16
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	4a9a      	ldr	r2, [pc, #616]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80070b0:	189a      	adds	r2, r3, r2
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	4997      	ldr	r1, [pc, #604]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80070ba:	468c      	mov	ip, r1
 80070bc:	4463      	add	r3, ip
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d121      	bne.n	800710e <HAL_PCD_EP_DB_Transmit+0x4ce>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4a91      	ldr	r2, [pc, #580]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80070d2:	4694      	mov	ip, r2
 80070d4:	4463      	add	r3, ip
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	498e      	ldr	r1, [pc, #568]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80070e0:	468c      	mov	ip, r1
 80070e2:	4463      	add	r3, ip
 80070e4:	0192      	lsls	r2, r2, #6
 80070e6:	0992      	lsrs	r2, r2, #6
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4a89      	ldr	r2, [pc, #548]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80070f2:	4694      	mov	ip, r2
 80070f4:	4463      	add	r3, ip
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	4986      	ldr	r1, [pc, #536]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007100:	468c      	mov	ip, r1
 8007102:	4463      	add	r3, ip
 8007104:	2180      	movs	r1, #128	@ 0x80
 8007106:	0609      	lsls	r1, r1, #24
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
 800710c:	e020      	b.n	8007150 <HAL_PCD_EP_DB_Transmit+0x510>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d11c      	bne.n	8007150 <HAL_PCD_EP_DB_Transmit+0x510>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4a7e      	ldr	r2, [pc, #504]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800711e:	4694      	mov	ip, r2
 8007120:	4463      	add	r3, ip
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	497b      	ldr	r1, [pc, #492]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800712c:	468c      	mov	ip, r1
 800712e:	4463      	add	r3, ip
 8007130:	0412      	lsls	r2, r2, #16
 8007132:	0c12      	lsrs	r2, r2, #16
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4a76      	ldr	r2, [pc, #472]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800713e:	189a      	adds	r2, r3, r2
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4974      	ldr	r1, [pc, #464]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007148:	468c      	mov	ip, r1
 800714a:	4463      	add	r3, ip
 800714c:	6852      	ldr	r2, [r2, #4]
 800714e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0011      	movs	r1, r2
 8007158:	0018      	movs	r0, r3
 800715a:	f005 ffcb 	bl	800d0f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800715e:	1dbb      	adds	r3, r7, #6
 8007160:	881a      	ldrh	r2, [r3, #0]
 8007162:	2380      	movs	r3, #128	@ 0x80
 8007164:	01db      	lsls	r3, r3, #7
 8007166:	4013      	ands	r3, r2
 8007168:	d000      	beq.n	800716c <HAL_PCD_EP_DB_Transmit+0x52c>
 800716a:	e10a      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	001a      	movs	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	18d3      	adds	r3, r2, r3
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a67      	ldr	r2, [pc, #412]	@ (800731c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800717e:	4013      	ands	r3, r2
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	001a      	movs	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	18d3      	adds	r3, r2, r3
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	4963      	ldr	r1, [pc, #396]	@ (8007320 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8007194:	430a      	orrs	r2, r1
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e0f3      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800719a:	1dbb      	adds	r3, r7, #6
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	2380      	movs	r3, #128	@ 0x80
 80071a0:	01db      	lsls	r3, r3, #7
 80071a2:	4013      	ands	r3, r2
 80071a4:	d115      	bne.n	80071d2 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	001a      	movs	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	18d3      	adds	r3, r2, r3
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a59      	ldr	r2, [pc, #356]	@ (800731c <HAL_PCD_EP_DB_Transmit+0x6dc>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	001a      	movs	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	18d3      	adds	r3, r2, r3
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4954      	ldr	r1, [pc, #336]	@ (8007320 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 80071ce:	430a      	orrs	r2, r1
 80071d0:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2224      	movs	r2, #36	@ 0x24
 80071d6:	5c9b      	ldrb	r3, [r3, r2]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d000      	beq.n	80071de <HAL_PCD_EP_DB_Transmit+0x59e>
 80071dc:	e0d1      	b.n	8007382 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	695a      	ldr	r2, [r3, #20]
 80071e2:	211e      	movs	r1, #30
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	18d2      	adds	r2, r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	18d2      	adds	r2, r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	429a      	cmp	r2, r3
 8007206:	d309      	bcc.n	800721c <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	621a      	str	r2, [r3, #32]
 800721a:	e016      	b.n	800724a <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d108      	bne.n	8007236 <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 8007224:	231e      	movs	r3, #30
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2224      	movs	r2, #36	@ 0x24
 8007230:	2100      	movs	r1, #0
 8007232:	5499      	strb	r1, [r3, r2]
 8007234:	e009      	b.n	800724a <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2200      	movs	r2, #0
 8007240:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2224      	movs	r2, #36	@ 0x24
 8007246:	2100      	movs	r1, #0
 8007248:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d168      	bne.n	8007324 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4a2f      	ldr	r2, [pc, #188]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800725a:	4694      	mov	ip, r2
 800725c:	4463      	add	r3, ip
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	492c      	ldr	r1, [pc, #176]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007268:	468c      	mov	ip, r1
 800726a:	4463      	add	r3, ip
 800726c:	0192      	lsls	r2, r2, #6
 800726e:	0992      	lsrs	r2, r2, #6
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	2b3e      	cmp	r3, #62	@ 0x3e
 8007276:	d91e      	bls.n	80072b6 <HAL_PCD_EP_DB_Transmit+0x676>
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	221f      	movs	r2, #31
 8007282:	4013      	ands	r3, r2
 8007284:	d102      	bne.n	800728c <HAL_PCD_EP_DB_Transmit+0x64c>
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3b01      	subs	r3, #1
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	4a21      	ldr	r2, [pc, #132]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007294:	4694      	mov	ip, r2
 8007296:	4463      	add	r3, ip
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	069b      	lsls	r3, r3, #26
 800729e:	431a      	orrs	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	491c      	ldr	r1, [pc, #112]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80072a8:	468c      	mov	ip, r1
 80072aa:	4463      	add	r3, ip
 80072ac:	2180      	movs	r1, #128	@ 0x80
 80072ae:	0609      	lsls	r1, r1, #24
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	e05b      	b.n	800736e <HAL_PCD_EP_DB_Transmit+0x72e>
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d111      	bne.n	80072e0 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	4a15      	ldr	r2, [pc, #84]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80072c4:	4694      	mov	ip, r2
 80072c6:	4463      	add	r3, ip
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4911      	ldr	r1, [pc, #68]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80072d2:	468c      	mov	ip, r1
 80072d4:	4463      	add	r3, ip
 80072d6:	2180      	movs	r1, #128	@ 0x80
 80072d8:	0609      	lsls	r1, r1, #24
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
 80072de:	e046      	b.n	800736e <HAL_PCD_EP_DB_Transmit+0x72e>
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	085b      	lsrs	r3, r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	2201      	movs	r2, #1
 80072ea:	4013      	ands	r3, r2
 80072ec:	d002      	beq.n	80072f4 <HAL_PCD_EP_DB_Transmit+0x6b4>
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	4a07      	ldr	r2, [pc, #28]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80072fc:	4694      	mov	ip, r2
 80072fe:	4463      	add	r3, ip
 8007300:	6859      	ldr	r1, [r3, #4]
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	069a      	lsls	r2, r3, #26
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4802      	ldr	r0, [pc, #8]	@ (8007318 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800730e:	4684      	mov	ip, r0
 8007310:	4463      	add	r3, ip
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	e02a      	b.n	800736e <HAL_PCD_EP_DB_Transmit+0x72e>
 8007318:	40009800 	.word	0x40009800
 800731c:	07ff8f8f 	.word	0x07ff8f8f
 8007320:	0000c080 	.word	0x0000c080
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d120      	bne.n	800736e <HAL_PCD_EP_DB_Transmit+0x72e>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4a25      	ldr	r2, [pc, #148]	@ (80073c8 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007334:	4694      	mov	ip, r2
 8007336:	4463      	add	r3, ip
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4921      	ldr	r1, [pc, #132]	@ (80073c8 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007342:	468c      	mov	ip, r1
 8007344:	4463      	add	r3, ip
 8007346:	0412      	lsls	r2, r2, #16
 8007348:	0c12      	lsrs	r2, r2, #16
 800734a:	605a      	str	r2, [r3, #4]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4a1d      	ldr	r2, [pc, #116]	@ (80073c8 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007354:	4694      	mov	ip, r2
 8007356:	4463      	add	r3, ip
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	041a      	lsls	r2, r3, #16
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4818      	ldr	r0, [pc, #96]	@ (80073c8 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007366:	4684      	mov	ip, r0
 8007368:	4463      	add	r3, ip
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6959      	ldr	r1, [r3, #20]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	895a      	ldrh	r2, [r3, #10]
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	b29b      	uxth	r3, r3
 800737e:	f003 f919 	bl	800a5b4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	001a      	movs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	18d3      	adds	r3, r2, r3
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a0e      	ldr	r2, [pc, #56]	@ (80073cc <HAL_PCD_EP_DB_Transmit+0x78c>)
 8007394:	4013      	ands	r3, r2
 8007396:	633b      	str	r3, [r7, #48]	@ 0x30
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	2210      	movs	r2, #16
 800739c:	4053      	eors	r3, r2
 800739e:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	2220      	movs	r2, #32
 80073a4:	4053      	eors	r3, r2
 80073a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	001a      	movs	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	18d3      	adds	r3, r2, r3
 80073b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b8:	4905      	ldr	r1, [pc, #20]	@ (80073d0 <HAL_PCD_EP_DB_Transmit+0x790>)
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b00e      	add	sp, #56	@ 0x38
 80073c6:	bdb0      	pop	{r4, r5, r7, pc}
 80073c8:	40009800 	.word	0x40009800
 80073cc:	07ff8fbf 	.word	0x07ff8fbf
 80073d0:	00008080 	.word	0x00008080

080073d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	0008      	movs	r0, r1
 80073de:	0011      	movs	r1, r2
 80073e0:	607b      	str	r3, [r7, #4]
 80073e2:	240a      	movs	r4, #10
 80073e4:	193b      	adds	r3, r7, r4
 80073e6:	1c02      	adds	r2, r0, #0
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	2308      	movs	r3, #8
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	1c0a      	adds	r2, r1, #0
 80073f0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073f2:	0021      	movs	r1, r4
 80073f4:	187b      	adds	r3, r7, r1
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	2280      	movs	r2, #128	@ 0x80
 80073fa:	4013      	ands	r3, r2
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00d      	beq.n	800741e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007402:	187b      	adds	r3, r7, r1
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	2207      	movs	r2, #7
 8007408:	401a      	ands	r2, r3
 800740a:	0013      	movs	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	189b      	adds	r3, r3, r2
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	3310      	adds	r3, #16
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	18d3      	adds	r3, r2, r3
 8007418:	3304      	adds	r3, #4
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e00c      	b.n	8007438 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800741e:	230a      	movs	r3, #10
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	0013      	movs	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	189b      	adds	r3, r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	3351      	adds	r3, #81	@ 0x51
 800742e:	33ff      	adds	r3, #255	@ 0xff
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	18d3      	adds	r3, r2, r3
 8007434:	3304      	adds	r3, #4
 8007436:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007438:	2308      	movs	r3, #8
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d107      	bne.n	8007452 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	b29a      	uxth	r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	80da      	strh	r2, [r3, #6]
 8007450:	e00b      	b.n	800746a <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2201      	movs	r2, #1
 8007456:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	b29a      	uxth	r2, r3
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0c1b      	lsrs	r3, r3, #16
 8007464:	b29a      	uxth	r2, r3
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	b007      	add	sp, #28
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	23b5      	movs	r3, #181	@ 0xb5
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	2101      	movs	r1, #1
 800748a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	23b3      	movs	r3, #179	@ 0xb3
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	2100      	movs	r1, #0
 8007494:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	2201      	movs	r2, #1
 800749c:	431a      	orrs	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	2202      	movs	r2, #2
 80074a8:	431a      	orrs	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	0018      	movs	r0, r3
 80074b2:	46bd      	mov	sp, r7
 80074b4:	b004      	add	sp, #16
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80074bc:	4b04      	ldr	r3, [pc, #16]	@ (80074d0 <HAL_PWREx_EnableVddUSB+0x18>)
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4b03      	ldr	r3, [pc, #12]	@ (80074d0 <HAL_PWREx_EnableVddUSB+0x18>)
 80074c2:	2180      	movs	r1, #128	@ 0x80
 80074c4:	00c9      	lsls	r1, r1, #3
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
}
 80074ca:	46c0      	nop			@ (mov r8, r8)
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40007000 	.word	0x40007000

080074d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80074dc:	4b19      	ldr	r3, [pc, #100]	@ (8007544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	0019      	movs	r1, r3
 80074e6:	4b17      	ldr	r3, [pc, #92]	@ (8007544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d11f      	bne.n	8007538 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80074f8:	4b14      	ldr	r3, [pc, #80]	@ (800754c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	0013      	movs	r3, r2
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	189b      	adds	r3, r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4912      	ldr	r1, [pc, #72]	@ (8007550 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007506:	0018      	movs	r0, r3
 8007508:	f7f8 fe16 	bl	8000138 <__udivsi3>
 800750c:	0003      	movs	r3, r0
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007512:	e008      	b.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3b01      	subs	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e001      	b.n	8007526 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e009      	b.n	800753a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007526:	4b07      	ldr	r3, [pc, #28]	@ (8007544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	2380      	movs	r3, #128	@ 0x80
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	401a      	ands	r2, r3
 8007530:	2380      	movs	r3, #128	@ 0x80
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	429a      	cmp	r2, r3
 8007536:	d0ed      	beq.n	8007514 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	40007000 	.word	0x40007000
 8007548:	fffff9ff 	.word	0xfffff9ff
 800754c:	20000000 	.word	0x20000000
 8007550:	000f4240 	.word	0x000f4240

08007554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e2fe      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2201      	movs	r2, #1
 800756c:	4013      	ands	r3, r2
 800756e:	d100      	bne.n	8007572 <HAL_RCC_OscConfig+0x1e>
 8007570:	e07c      	b.n	800766c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007572:	4bc3      	ldr	r3, [pc, #780]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2238      	movs	r2, #56	@ 0x38
 8007578:	4013      	ands	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800757c:	4bc0      	ldr	r3, [pc, #768]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2203      	movs	r2, #3
 8007582:	4013      	ands	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b10      	cmp	r3, #16
 800758a:	d102      	bne.n	8007592 <HAL_RCC_OscConfig+0x3e>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d002      	beq.n	8007598 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b08      	cmp	r3, #8
 8007596:	d10b      	bne.n	80075b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	4bb9      	ldr	r3, [pc, #740]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	4013      	ands	r3, r2
 80075a2:	d062      	beq.n	800766a <HAL_RCC_OscConfig+0x116>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d15e      	bne.n	800766a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e2d9      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	025b      	lsls	r3, r3, #9
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d107      	bne.n	80075cc <HAL_RCC_OscConfig+0x78>
 80075bc:	4bb0      	ldr	r3, [pc, #704]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4baf      	ldr	r3, [pc, #700]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075c2:	2180      	movs	r1, #128	@ 0x80
 80075c4:	0249      	lsls	r1, r1, #9
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e020      	b.n	800760e <HAL_RCC_OscConfig+0xba>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	23a0      	movs	r3, #160	@ 0xa0
 80075d2:	02db      	lsls	r3, r3, #11
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d10e      	bne.n	80075f6 <HAL_RCC_OscConfig+0xa2>
 80075d8:	4ba9      	ldr	r3, [pc, #676]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4ba8      	ldr	r3, [pc, #672]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	02c9      	lsls	r1, r1, #11
 80075e2:	430a      	orrs	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	4ba6      	ldr	r3, [pc, #664]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4ba5      	ldr	r3, [pc, #660]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075ec:	2180      	movs	r1, #128	@ 0x80
 80075ee:	0249      	lsls	r1, r1, #9
 80075f0:	430a      	orrs	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	e00b      	b.n	800760e <HAL_RCC_OscConfig+0xba>
 80075f6:	4ba2      	ldr	r3, [pc, #648]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4ba1      	ldr	r3, [pc, #644]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80075fc:	49a1      	ldr	r1, [pc, #644]	@ (8007884 <HAL_RCC_OscConfig+0x330>)
 80075fe:	400a      	ands	r2, r1
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	4b9f      	ldr	r3, [pc, #636]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b9e      	ldr	r3, [pc, #632]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007608:	499f      	ldr	r1, [pc, #636]	@ (8007888 <HAL_RCC_OscConfig+0x334>)
 800760a:	400a      	ands	r2, r1
 800760c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d014      	beq.n	8007640 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007616:	f7fc fa9b 	bl	8003b50 <HAL_GetTick>
 800761a:	0003      	movs	r3, r0
 800761c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007620:	f7fc fa96 	bl	8003b50 <HAL_GetTick>
 8007624:	0002      	movs	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b64      	cmp	r3, #100	@ 0x64
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e298      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007632:	4b93      	ldr	r3, [pc, #588]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	2380      	movs	r3, #128	@ 0x80
 8007638:	029b      	lsls	r3, r3, #10
 800763a:	4013      	ands	r3, r2
 800763c:	d0f0      	beq.n	8007620 <HAL_RCC_OscConfig+0xcc>
 800763e:	e015      	b.n	800766c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007640:	f7fc fa86 	bl	8003b50 <HAL_GetTick>
 8007644:	0003      	movs	r3, r0
 8007646:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800764a:	f7fc fa81 	bl	8003b50 <HAL_GetTick>
 800764e:	0002      	movs	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b64      	cmp	r3, #100	@ 0x64
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e283      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800765c:	4b88      	ldr	r3, [pc, #544]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	2380      	movs	r3, #128	@ 0x80
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	4013      	ands	r3, r2
 8007666:	d1f0      	bne.n	800764a <HAL_RCC_OscConfig+0xf6>
 8007668:	e000      	b.n	800766c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2202      	movs	r2, #2
 8007672:	4013      	ands	r3, r2
 8007674:	d100      	bne.n	8007678 <HAL_RCC_OscConfig+0x124>
 8007676:	e099      	b.n	80077ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007678:	4b81      	ldr	r3, [pc, #516]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2238      	movs	r2, #56	@ 0x38
 800767e:	4013      	ands	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007682:	4b7f      	ldr	r3, [pc, #508]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2203      	movs	r2, #3
 8007688:	4013      	ands	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b10      	cmp	r3, #16
 8007690:	d102      	bne.n	8007698 <HAL_RCC_OscConfig+0x144>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d002      	beq.n	800769e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d135      	bne.n	800770a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800769e:	4b78      	ldr	r3, [pc, #480]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4013      	ands	r3, r2
 80076a8:	d005      	beq.n	80076b6 <HAL_RCC_OscConfig+0x162>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e256      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b6:	4b72      	ldr	r3, [pc, #456]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4a74      	ldr	r2, [pc, #464]	@ (800788c <HAL_RCC_OscConfig+0x338>)
 80076bc:	4013      	ands	r3, r2
 80076be:	0019      	movs	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	021a      	lsls	r2, r3, #8
 80076c6:	4b6e      	ldr	r3, [pc, #440]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076c8:	430a      	orrs	r2, r1
 80076ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d112      	bne.n	80076f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80076d2:	4b6b      	ldr	r3, [pc, #428]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6e      	ldr	r2, [pc, #440]	@ (8007890 <HAL_RCC_OscConfig+0x33c>)
 80076d8:	4013      	ands	r3, r2
 80076da:	0019      	movs	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	4b67      	ldr	r3, [pc, #412]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076e2:	430a      	orrs	r2, r1
 80076e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80076e6:	4b66      	ldr	r3, [pc, #408]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	0adb      	lsrs	r3, r3, #11
 80076ec:	2207      	movs	r2, #7
 80076ee:	4013      	ands	r3, r2
 80076f0:	4a68      	ldr	r2, [pc, #416]	@ (8007894 <HAL_RCC_OscConfig+0x340>)
 80076f2:	40da      	lsrs	r2, r3
 80076f4:	4b68      	ldr	r3, [pc, #416]	@ (8007898 <HAL_RCC_OscConfig+0x344>)
 80076f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076f8:	4b68      	ldr	r3, [pc, #416]	@ (800789c <HAL_RCC_OscConfig+0x348>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7fc f9cb 	bl	8003a98 <HAL_InitTick>
 8007702:	1e03      	subs	r3, r0, #0
 8007704:	d051      	beq.n	80077aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e22c      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d030      	beq.n	8007774 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007712:	4b5b      	ldr	r3, [pc, #364]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a5e      	ldr	r2, [pc, #376]	@ (8007890 <HAL_RCC_OscConfig+0x33c>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	4b57      	ldr	r3, [pc, #348]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007722:	430a      	orrs	r2, r1
 8007724:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007726:	4b56      	ldr	r3, [pc, #344]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4b55      	ldr	r3, [pc, #340]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800772c:	2180      	movs	r1, #128	@ 0x80
 800772e:	0049      	lsls	r1, r1, #1
 8007730:	430a      	orrs	r2, r1
 8007732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fc fa0c 	bl	8003b50 <HAL_GetTick>
 8007738:	0003      	movs	r3, r0
 800773a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800773c:	e008      	b.n	8007750 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800773e:	f7fc fa07 	bl	8003b50 <HAL_GetTick>
 8007742:	0002      	movs	r2, r0
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e209      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007750:	4b4b      	ldr	r3, [pc, #300]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	@ 0x80
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4013      	ands	r3, r2
 800775a:	d0f0      	beq.n	800773e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775c:	4b48      	ldr	r3, [pc, #288]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a4a      	ldr	r2, [pc, #296]	@ (800788c <HAL_RCC_OscConfig+0x338>)
 8007762:	4013      	ands	r3, r2
 8007764:	0019      	movs	r1, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	021a      	lsls	r2, r3, #8
 800776c:	4b44      	ldr	r3, [pc, #272]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	e01b      	b.n	80077ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007774:	4b42      	ldr	r3, [pc, #264]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4b41      	ldr	r3, [pc, #260]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800777a:	4949      	ldr	r1, [pc, #292]	@ (80078a0 <HAL_RCC_OscConfig+0x34c>)
 800777c:	400a      	ands	r2, r1
 800777e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007780:	f7fc f9e6 	bl	8003b50 <HAL_GetTick>
 8007784:	0003      	movs	r3, r0
 8007786:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007788:	e008      	b.n	800779c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800778a:	f7fc f9e1 	bl	8003b50 <HAL_GetTick>
 800778e:	0002      	movs	r2, r0
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d901      	bls.n	800779c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e1e3      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800779c:	4b38      	ldr	r3, [pc, #224]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	2380      	movs	r3, #128	@ 0x80
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4013      	ands	r3, r2
 80077a6:	d1f0      	bne.n	800778a <HAL_RCC_OscConfig+0x236>
 80077a8:	e000      	b.n	80077ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	4013      	ands	r3, r2
 80077b4:	d047      	beq.n	8007846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80077b6:	4b32      	ldr	r3, [pc, #200]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2238      	movs	r2, #56	@ 0x38
 80077bc:	4013      	ands	r3, r2
 80077be:	2b18      	cmp	r3, #24
 80077c0:	d10a      	bne.n	80077d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80077c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80077c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c6:	2202      	movs	r2, #2
 80077c8:	4013      	ands	r3, r2
 80077ca:	d03c      	beq.n	8007846 <HAL_RCC_OscConfig+0x2f2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d138      	bne.n	8007846 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e1c5      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80077e0:	4b27      	ldr	r3, [pc, #156]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80077e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077e4:	4b26      	ldr	r3, [pc, #152]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 80077e6:	2101      	movs	r1, #1
 80077e8:	430a      	orrs	r2, r1
 80077ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fc f9b0 	bl	8003b50 <HAL_GetTick>
 80077f0:	0003      	movs	r3, r0
 80077f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077f6:	f7fc f9ab 	bl	8003b50 <HAL_GetTick>
 80077fa:	0002      	movs	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e1ad      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007808:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800780a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800780c:	2202      	movs	r2, #2
 800780e:	4013      	ands	r3, r2
 8007810:	d0f1      	beq.n	80077f6 <HAL_RCC_OscConfig+0x2a2>
 8007812:	e018      	b.n	8007846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007814:	4b1a      	ldr	r3, [pc, #104]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007818:	4b19      	ldr	r3, [pc, #100]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800781a:	2101      	movs	r1, #1
 800781c:	438a      	bics	r2, r1
 800781e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fc f996 	bl	8003b50 <HAL_GetTick>
 8007824:	0003      	movs	r3, r0
 8007826:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800782a:	f7fc f991 	bl	8003b50 <HAL_GetTick>
 800782e:	0002      	movs	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e193      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800783c:	4b10      	ldr	r3, [pc, #64]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800783e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007840:	2202      	movs	r2, #2
 8007842:	4013      	ands	r3, r2
 8007844:	d1f1      	bne.n	800782a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2204      	movs	r2, #4
 800784c:	4013      	ands	r3, r2
 800784e:	d100      	bne.n	8007852 <HAL_RCC_OscConfig+0x2fe>
 8007850:	e0c6      	b.n	80079e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007852:	231f      	movs	r3, #31
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800785a:	4b09      	ldr	r3, [pc, #36]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2238      	movs	r2, #56	@ 0x38
 8007860:	4013      	ands	r3, r2
 8007862:	2b20      	cmp	r3, #32
 8007864:	d11e      	bne.n	80078a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007866:	4b06      	ldr	r3, [pc, #24]	@ (8007880 <HAL_RCC_OscConfig+0x32c>)
 8007868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800786a:	2202      	movs	r2, #2
 800786c:	4013      	ands	r3, r2
 800786e:	d100      	bne.n	8007872 <HAL_RCC_OscConfig+0x31e>
 8007870:	e0b6      	b.n	80079e0 <HAL_RCC_OscConfig+0x48c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d000      	beq.n	800787c <HAL_RCC_OscConfig+0x328>
 800787a:	e0b1      	b.n	80079e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e171      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
 8007880:	40021000 	.word	0x40021000
 8007884:	fffeffff 	.word	0xfffeffff
 8007888:	fffbffff 	.word	0xfffbffff
 800788c:	ffff80ff 	.word	0xffff80ff
 8007890:	ffffc7ff 	.word	0xffffc7ff
 8007894:	00f42400 	.word	0x00f42400
 8007898:	20000000 	.word	0x20000000
 800789c:	20000004 	.word	0x20000004
 80078a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80078a4:	4bb1      	ldr	r3, [pc, #708]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80078a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078a8:	2380      	movs	r3, #128	@ 0x80
 80078aa:	055b      	lsls	r3, r3, #21
 80078ac:	4013      	ands	r3, r2
 80078ae:	d101      	bne.n	80078b4 <HAL_RCC_OscConfig+0x360>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <HAL_RCC_OscConfig+0x362>
 80078b4:	2300      	movs	r3, #0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80078ba:	4bac      	ldr	r3, [pc, #688]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80078bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078be:	4bab      	ldr	r3, [pc, #684]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80078c0:	2180      	movs	r1, #128	@ 0x80
 80078c2:	0549      	lsls	r1, r1, #21
 80078c4:	430a      	orrs	r2, r1
 80078c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80078c8:	4ba8      	ldr	r3, [pc, #672]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80078ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078cc:	2380      	movs	r3, #128	@ 0x80
 80078ce:	055b      	lsls	r3, r3, #21
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80078d6:	231f      	movs	r3, #31
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078de:	4ba4      	ldr	r3, [pc, #656]	@ (8007b70 <HAL_RCC_OscConfig+0x61c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	2380      	movs	r3, #128	@ 0x80
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	4013      	ands	r3, r2
 80078e8:	d11a      	bne.n	8007920 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078ea:	4ba1      	ldr	r3, [pc, #644]	@ (8007b70 <HAL_RCC_OscConfig+0x61c>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4ba0      	ldr	r3, [pc, #640]	@ (8007b70 <HAL_RCC_OscConfig+0x61c>)
 80078f0:	2180      	movs	r1, #128	@ 0x80
 80078f2:	0049      	lsls	r1, r1, #1
 80078f4:	430a      	orrs	r2, r1
 80078f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80078f8:	f7fc f92a 	bl	8003b50 <HAL_GetTick>
 80078fc:	0003      	movs	r3, r0
 80078fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007902:	f7fc f925 	bl	8003b50 <HAL_GetTick>
 8007906:	0002      	movs	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e127      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007914:	4b96      	ldr	r3, [pc, #600]	@ (8007b70 <HAL_RCC_OscConfig+0x61c>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4013      	ands	r3, r2
 800791e:	d0f0      	beq.n	8007902 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d106      	bne.n	8007936 <HAL_RCC_OscConfig+0x3e2>
 8007928:	4b90      	ldr	r3, [pc, #576]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800792a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800792c:	4b8f      	ldr	r3, [pc, #572]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800792e:	2101      	movs	r1, #1
 8007930:	430a      	orrs	r2, r1
 8007932:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007934:	e01c      	b.n	8007970 <HAL_RCC_OscConfig+0x41c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b05      	cmp	r3, #5
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x404>
 800793e:	4b8b      	ldr	r3, [pc, #556]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007940:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007942:	4b8a      	ldr	r3, [pc, #552]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007944:	2104      	movs	r1, #4
 8007946:	430a      	orrs	r2, r1
 8007948:	65da      	str	r2, [r3, #92]	@ 0x5c
 800794a:	4b88      	ldr	r3, [pc, #544]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800794c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800794e:	4b87      	ldr	r3, [pc, #540]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007950:	2101      	movs	r1, #1
 8007952:	430a      	orrs	r2, r1
 8007954:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007956:	e00b      	b.n	8007970 <HAL_RCC_OscConfig+0x41c>
 8007958:	4b84      	ldr	r3, [pc, #528]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800795a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800795c:	4b83      	ldr	r3, [pc, #524]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800795e:	2101      	movs	r1, #1
 8007960:	438a      	bics	r2, r1
 8007962:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007964:	4b81      	ldr	r3, [pc, #516]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007966:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007968:	4b80      	ldr	r3, [pc, #512]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 800796a:	2104      	movs	r1, #4
 800796c:	438a      	bics	r2, r1
 800796e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d014      	beq.n	80079a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fc f8ea 	bl	8003b50 <HAL_GetTick>
 800797c:	0003      	movs	r3, r0
 800797e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007980:	e009      	b.n	8007996 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007982:	f7fc f8e5 	bl	8003b50 <HAL_GetTick>
 8007986:	0002      	movs	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	4a79      	ldr	r2, [pc, #484]	@ (8007b74 <HAL_RCC_OscConfig+0x620>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0e6      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007996:	4b75      	ldr	r3, [pc, #468]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799a:	2202      	movs	r2, #2
 800799c:	4013      	ands	r3, r2
 800799e:	d0f0      	beq.n	8007982 <HAL_RCC_OscConfig+0x42e>
 80079a0:	e013      	b.n	80079ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fc f8d5 	bl	8003b50 <HAL_GetTick>
 80079a6:	0003      	movs	r3, r0
 80079a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079aa:	e009      	b.n	80079c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ac:	f7fc f8d0 	bl	8003b50 <HAL_GetTick>
 80079b0:	0002      	movs	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007b74 <HAL_RCC_OscConfig+0x620>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e0d1      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079c0:	4b6a      	ldr	r3, [pc, #424]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80079c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c4:	2202      	movs	r2, #2
 80079c6:	4013      	ands	r3, r2
 80079c8:	d1f0      	bne.n	80079ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80079ca:	231f      	movs	r3, #31
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d105      	bne.n	80079e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80079d4:	4b65      	ldr	r3, [pc, #404]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80079d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079d8:	4b64      	ldr	r3, [pc, #400]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80079da:	4967      	ldr	r1, [pc, #412]	@ (8007b78 <HAL_RCC_OscConfig+0x624>)
 80079dc:	400a      	ands	r2, r1
 80079de:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d100      	bne.n	80079ea <HAL_RCC_OscConfig+0x496>
 80079e8:	e0bb      	b.n	8007b62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079ea:	4b60      	ldr	r3, [pc, #384]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2238      	movs	r2, #56	@ 0x38
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d100      	bne.n	80079f8 <HAL_RCC_OscConfig+0x4a4>
 80079f6:	e07b      	b.n	8007af0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d156      	bne.n	8007aae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b5a      	ldr	r3, [pc, #360]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b59      	ldr	r3, [pc, #356]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a06:	495d      	ldr	r1, [pc, #372]	@ (8007b7c <HAL_RCC_OscConfig+0x628>)
 8007a08:	400a      	ands	r2, r1
 8007a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fc f8a0 	bl	8003b50 <HAL_GetTick>
 8007a10:	0003      	movs	r3, r0
 8007a12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a16:	f7fc f89b 	bl	8003b50 <HAL_GetTick>
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e09d      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a28:	4b50      	ldr	r3, [pc, #320]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	2380      	movs	r3, #128	@ 0x80
 8007a2e:	049b      	lsls	r3, r3, #18
 8007a30:	4013      	ands	r3, r2
 8007a32:	d1f0      	bne.n	8007a16 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a34:	4b4d      	ldr	r3, [pc, #308]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	4a51      	ldr	r2, [pc, #324]	@ (8007b80 <HAL_RCC_OscConfig+0x62c>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	0019      	movs	r1, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1a      	ldr	r2, [r3, #32]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a60:	431a      	orrs	r2, r3
 8007a62:	4b42      	ldr	r3, [pc, #264]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a68:	4b40      	ldr	r3, [pc, #256]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a6e:	2180      	movs	r1, #128	@ 0x80
 8007a70:	0449      	lsls	r1, r1, #17
 8007a72:	430a      	orrs	r2, r1
 8007a74:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007a76:	4b3d      	ldr	r3, [pc, #244]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007a7c:	2180      	movs	r1, #128	@ 0x80
 8007a7e:	0549      	lsls	r1, r1, #21
 8007a80:	430a      	orrs	r2, r1
 8007a82:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fc f864 	bl	8003b50 <HAL_GetTick>
 8007a88:	0003      	movs	r3, r0
 8007a8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a8e:	f7fc f85f 	bl	8003b50 <HAL_GetTick>
 8007a92:	0002      	movs	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e061      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aa0:	4b32      	ldr	r3, [pc, #200]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	2380      	movs	r3, #128	@ 0x80
 8007aa6:	049b      	lsls	r3, r3, #18
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	d0f0      	beq.n	8007a8e <HAL_RCC_OscConfig+0x53a>
 8007aac:	e059      	b.n	8007b62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aae:	4b2f      	ldr	r3, [pc, #188]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007ab4:	4931      	ldr	r1, [pc, #196]	@ (8007b7c <HAL_RCC_OscConfig+0x628>)
 8007ab6:	400a      	ands	r2, r1
 8007ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aba:	f7fc f849 	bl	8003b50 <HAL_GetTick>
 8007abe:	0003      	movs	r3, r0
 8007ac0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ac4:	f7fc f844 	bl	8003b50 <HAL_GetTick>
 8007ac8:	0002      	movs	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e046      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ad6:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	2380      	movs	r3, #128	@ 0x80
 8007adc:	049b      	lsls	r3, r3, #18
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d1f0      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007ae2:	4b22      	ldr	r3, [pc, #136]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007ae8:	4926      	ldr	r1, [pc, #152]	@ (8007b84 <HAL_RCC_OscConfig+0x630>)
 8007aea:	400a      	ands	r2, r1
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	e038      	b.n	8007b62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e033      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007afc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b6c <HAL_RCC_OscConfig+0x618>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2203      	movs	r2, #3
 8007b06:	401a      	ands	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d126      	bne.n	8007b5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2270      	movs	r2, #112	@ 0x70
 8007b14:	401a      	ands	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d11f      	bne.n	8007b5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	23fe      	movs	r3, #254	@ 0xfe
 8007b22:	01db      	lsls	r3, r3, #7
 8007b24:	401a      	ands	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d116      	bne.n	8007b5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	23f8      	movs	r3, #248	@ 0xf8
 8007b34:	039b      	lsls	r3, r3, #14
 8007b36:	401a      	ands	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d10e      	bne.n	8007b5e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	23e0      	movs	r3, #224	@ 0xe0
 8007b44:	051b      	lsls	r3, r3, #20
 8007b46:	401a      	ands	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d106      	bne.n	8007b5e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	0f5b      	lsrs	r3, r3, #29
 8007b54:	075a      	lsls	r2, r3, #29
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d001      	beq.n	8007b62 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	0018      	movs	r0, r3
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b008      	add	sp, #32
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	40007000 	.word	0x40007000
 8007b74:	00001388 	.word	0x00001388
 8007b78:	efffffff 	.word	0xefffffff
 8007b7c:	feffffff 	.word	0xfeffffff
 8007b80:	11c1808c 	.word	0x11c1808c
 8007b84:	eefefffc 	.word	0xeefefffc

08007b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0e9      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b76      	ldr	r3, [pc, #472]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d91e      	bls.n	8007be8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b73      	ldr	r3, [pc, #460]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2207      	movs	r2, #7
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	0019      	movs	r1, r3
 8007bb4:	4b70      	ldr	r3, [pc, #448]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007bbc:	f7fb ffc8 	bl	8003b50 <HAL_GetTick>
 8007bc0:	0003      	movs	r3, r0
 8007bc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007bc4:	e009      	b.n	8007bda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bc6:	f7fb ffc3 	bl	8003b50 <HAL_GetTick>
 8007bca:	0002      	movs	r2, r0
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8007d7c <HAL_RCC_ClockConfig+0x1f4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e0ca      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007bda:	4b67      	ldr	r3, [pc, #412]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2207      	movs	r2, #7
 8007be0:	4013      	ands	r3, r2
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1ee      	bne.n	8007bc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2202      	movs	r2, #2
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d015      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	d006      	beq.n	8007c0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007bfc:	4b60      	ldr	r3, [pc, #384]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	4b5f      	ldr	r3, [pc, #380]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c02:	21e0      	movs	r1, #224	@ 0xe0
 8007c04:	01c9      	lsls	r1, r1, #7
 8007c06:	430a      	orrs	r2, r1
 8007c08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	4a5d      	ldr	r2, [pc, #372]	@ (8007d84 <HAL_RCC_ClockConfig+0x1fc>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	0019      	movs	r1, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	4b59      	ldr	r3, [pc, #356]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	4013      	ands	r3, r2
 8007c26:	d057      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c30:	4b53      	ldr	r3, [pc, #332]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	2380      	movs	r3, #128	@ 0x80
 8007c36:	029b      	lsls	r3, r3, #10
 8007c38:	4013      	ands	r3, r2
 8007c3a:	d12b      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e097      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d107      	bne.n	8007c58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c48:	4b4d      	ldr	r3, [pc, #308]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	2380      	movs	r3, #128	@ 0x80
 8007c4e:	049b      	lsls	r3, r3, #18
 8007c50:	4013      	ands	r3, r2
 8007c52:	d11f      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e08b      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d107      	bne.n	8007c70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c60:	4b47      	ldr	r3, [pc, #284]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	2380      	movs	r3, #128	@ 0x80
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d113      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e07f      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c78:	4b41      	ldr	r3, [pc, #260]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	4013      	ands	r3, r2
 8007c80:	d108      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e074      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c86:	4b3e      	ldr	r3, [pc, #248]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e06d      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c94:	4b3a      	ldr	r3, [pc, #232]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	2207      	movs	r2, #7
 8007c9a:	4393      	bics	r3, r2
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca8:	f7fb ff52 	bl	8003b50 <HAL_GetTick>
 8007cac:	0003      	movs	r3, r0
 8007cae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cb0:	e009      	b.n	8007cc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cb2:	f7fb ff4d 	bl	8003b50 <HAL_GetTick>
 8007cb6:	0002      	movs	r2, r0
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8007d7c <HAL_RCC_ClockConfig+0x1f4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e054      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2238      	movs	r2, #56	@ 0x38
 8007ccc:	401a      	ands	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d1ec      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd8:	4b27      	ldr	r3, [pc, #156]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2207      	movs	r2, #7
 8007cde:	4013      	ands	r3, r2
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d21e      	bcs.n	8007d24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce6:	4b24      	ldr	r3, [pc, #144]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2207      	movs	r2, #7
 8007cec:	4393      	bics	r3, r2
 8007cee:	0019      	movs	r1, r3
 8007cf0:	4b21      	ldr	r3, [pc, #132]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007cf8:	f7fb ff2a 	bl	8003b50 <HAL_GetTick>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d00:	e009      	b.n	8007d16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d02:	f7fb ff25 	bl	8003b50 <HAL_GetTick>
 8007d06:	0002      	movs	r2, r0
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007d7c <HAL_RCC_ClockConfig+0x1f4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e02c      	b.n	8007d70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d16:	4b18      	ldr	r3, [pc, #96]	@ (8007d78 <HAL_RCC_ClockConfig+0x1f0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2207      	movs	r2, #7
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d1ee      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	d009      	beq.n	8007d42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	4a15      	ldr	r2, [pc, #84]	@ (8007d88 <HAL_RCC_ClockConfig+0x200>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	0019      	movs	r1, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007d42:	f000 f829 	bl	8007d98 <HAL_RCC_GetSysClockFreq>
 8007d46:	0001      	movs	r1, r0
 8007d48:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <HAL_RCC_ClockConfig+0x1f8>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	220f      	movs	r2, #15
 8007d50:	401a      	ands	r2, r3
 8007d52:	4b0e      	ldr	r3, [pc, #56]	@ (8007d8c <HAL_RCC_ClockConfig+0x204>)
 8007d54:	0092      	lsls	r2, r2, #2
 8007d56:	58d3      	ldr	r3, [r2, r3]
 8007d58:	221f      	movs	r2, #31
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	000a      	movs	r2, r1
 8007d5e:	40da      	lsrs	r2, r3
 8007d60:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <HAL_RCC_ClockConfig+0x208>)
 8007d62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d64:	4b0b      	ldr	r3, [pc, #44]	@ (8007d94 <HAL_RCC_ClockConfig+0x20c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7fb fe95 	bl	8003a98 <HAL_InitTick>
 8007d6e:	0003      	movs	r3, r0
}
 8007d70:	0018      	movs	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b004      	add	sp, #16
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	40022000 	.word	0x40022000
 8007d7c:	00001388 	.word	0x00001388
 8007d80:	40021000 	.word	0x40021000
 8007d84:	fffff0ff 	.word	0xfffff0ff
 8007d88:	ffff8fff 	.word	0xffff8fff
 8007d8c:	08011bf8 	.word	0x08011bf8
 8007d90:	20000000 	.word	0x20000000
 8007d94:	20000004 	.word	0x20000004

08007d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2238      	movs	r2, #56	@ 0x38
 8007da4:	4013      	ands	r3, r2
 8007da6:	d10f      	bne.n	8007dc8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007da8:	4b39      	ldr	r3, [pc, #228]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	0adb      	lsrs	r3, r3, #11
 8007dae:	2207      	movs	r2, #7
 8007db0:	4013      	ands	r3, r2
 8007db2:	2201      	movs	r2, #1
 8007db4:	409a      	lsls	r2, r3
 8007db6:	0013      	movs	r3, r2
 8007db8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	4835      	ldr	r0, [pc, #212]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007dbe:	f7f8 f9bb 	bl	8000138 <__udivsi3>
 8007dc2:	0003      	movs	r3, r0
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	e05d      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dc8:	4b31      	ldr	r3, [pc, #196]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2238      	movs	r2, #56	@ 0x38
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d102      	bne.n	8007dda <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dd4:	4b30      	ldr	r3, [pc, #192]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x100>)
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	e054      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dda:	4b2d      	ldr	r3, [pc, #180]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	2238      	movs	r2, #56	@ 0x38
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b10      	cmp	r3, #16
 8007de4:	d138      	bne.n	8007e58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007de6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	2203      	movs	r2, #3
 8007dec:	4013      	ands	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007df0:	4b27      	ldr	r3, [pc, #156]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	2207      	movs	r2, #7
 8007df8:	4013      	ands	r3, r2
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d10d      	bne.n	8007e20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	4824      	ldr	r0, [pc, #144]	@ (8007e98 <HAL_RCC_GetSysClockFreq+0x100>)
 8007e08:	f7f8 f996 	bl	8000138 <__udivsi3>
 8007e0c:	0003      	movs	r3, r0
 8007e0e:	0019      	movs	r1, r3
 8007e10:	4b1f      	ldr	r3, [pc, #124]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	227f      	movs	r2, #127	@ 0x7f
 8007e18:	4013      	ands	r3, r2
 8007e1a:	434b      	muls	r3, r1
 8007e1c:	617b      	str	r3, [r7, #20]
        break;
 8007e1e:	e00d      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	481c      	ldr	r0, [pc, #112]	@ (8007e94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007e24:	f7f8 f988 	bl	8000138 <__udivsi3>
 8007e28:	0003      	movs	r3, r0
 8007e2a:	0019      	movs	r1, r3
 8007e2c:	4b18      	ldr	r3, [pc, #96]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	227f      	movs	r2, #127	@ 0x7f
 8007e34:	4013      	ands	r3, r2
 8007e36:	434b      	muls	r3, r1
 8007e38:	617b      	str	r3, [r7, #20]
        break;
 8007e3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007e3c:	4b14      	ldr	r3, [pc, #80]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	0f5b      	lsrs	r3, r3, #29
 8007e42:	2207      	movs	r2, #7
 8007e44:	4013      	ands	r3, r2
 8007e46:	3301      	adds	r3, #1
 8007e48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	6978      	ldr	r0, [r7, #20]
 8007e4e:	f7f8 f973 	bl	8000138 <__udivsi3>
 8007e52:	0003      	movs	r3, r0
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	e015      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007e58:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2238      	movs	r2, #56	@ 0x38
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d103      	bne.n	8007e6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007e64:	2380      	movs	r3, #128	@ 0x80
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	e00b      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007e6c:	4b08      	ldr	r3, [pc, #32]	@ (8007e90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	2238      	movs	r2, #56	@ 0x38
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b18      	cmp	r3, #24
 8007e76:	d103      	bne.n	8007e80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007e78:	23fa      	movs	r3, #250	@ 0xfa
 8007e7a:	01db      	lsls	r3, r3, #7
 8007e7c:	613b      	str	r3, [r7, #16]
 8007e7e:	e001      	b.n	8007e84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e84:	693b      	ldr	r3, [r7, #16]
}
 8007e86:	0018      	movs	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	b006      	add	sp, #24
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	46c0      	nop			@ (mov r8, r8)
 8007e90:	40021000 	.word	0x40021000
 8007e94:	00f42400 	.word	0x00f42400
 8007e98:	007a1200 	.word	0x007a1200

08007e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007ea4:	2313      	movs	r3, #19
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007eac:	2312      	movs	r3, #18
 8007eae:	18fb      	adds	r3, r7, r3
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	2380      	movs	r3, #128	@ 0x80
 8007eba:	029b      	lsls	r3, r3, #10
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d100      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007ec0:	e0a3      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ec2:	2011      	movs	r0, #17
 8007ec4:	183b      	adds	r3, r7, r0
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eca:	4bb0      	ldr	r3, [pc, #704]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	055b      	lsls	r3, r3, #21
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d110      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ed6:	4bad      	ldr	r3, [pc, #692]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eda:	4bac      	ldr	r3, [pc, #688]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007edc:	2180      	movs	r1, #128	@ 0x80
 8007ede:	0549      	lsls	r1, r1, #21
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ee4:	4ba9      	ldr	r3, [pc, #676]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	055b      	lsls	r3, r3, #21
 8007eec:	4013      	ands	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ef8:	4ba5      	ldr	r3, [pc, #660]	@ (8008190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	4ba4      	ldr	r3, [pc, #656]	@ (8008190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007efe:	2180      	movs	r1, #128	@ 0x80
 8007f00:	0049      	lsls	r1, r1, #1
 8007f02:	430a      	orrs	r2, r1
 8007f04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f06:	f7fb fe23 	bl	8003b50 <HAL_GetTick>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f0e:	e00b      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f10:	f7fb fe1e 	bl	8003b50 <HAL_GetTick>
 8007f14:	0002      	movs	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d904      	bls.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007f1e:	2313      	movs	r3, #19
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	2203      	movs	r2, #3
 8007f24:	701a      	strb	r2, [r3, #0]
        break;
 8007f26:	e005      	b.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f28:	4b99      	ldr	r3, [pc, #612]	@ (8008190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	4013      	ands	r3, r2
 8007f32:	d0ed      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007f34:	2313      	movs	r3, #19
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d154      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f3e:	4b93      	ldr	r3, [pc, #588]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f42:	23c0      	movs	r3, #192	@ 0xc0
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4013      	ands	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d019      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d014      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f5a:	4b8c      	ldr	r3, [pc, #560]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f5e:	4a8d      	ldr	r2, [pc, #564]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f64:	4b89      	ldr	r3, [pc, #548]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f68:	4b88      	ldr	r3, [pc, #544]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f6a:	2180      	movs	r1, #128	@ 0x80
 8007f6c:	0249      	lsls	r1, r1, #9
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f72:	4b86      	ldr	r3, [pc, #536]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f76:	4b85      	ldr	r3, [pc, #532]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f78:	4987      	ldr	r1, [pc, #540]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007f7a:	400a      	ands	r2, r1
 8007f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f7e:	4b83      	ldr	r3, [pc, #524]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2201      	movs	r2, #1
 8007f88:	4013      	ands	r3, r2
 8007f8a:	d016      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fb fde0 	bl	8003b50 <HAL_GetTick>
 8007f90:	0003      	movs	r3, r0
 8007f92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f94:	e00c      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f96:	f7fb fddb 	bl	8003b50 <HAL_GetTick>
 8007f9a:	0002      	movs	r2, r0
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	4a7e      	ldr	r2, [pc, #504]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d904      	bls.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007fa6:	2313      	movs	r3, #19
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2203      	movs	r2, #3
 8007fac:	701a      	strb	r2, [r3, #0]
            break;
 8007fae:	e004      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb0:	4b76      	ldr	r3, [pc, #472]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d0ed      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007fba:	2313      	movs	r3, #19
 8007fbc:	18fb      	adds	r3, r7, r3
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fc4:	4b71      	ldr	r3, [pc, #452]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc8:	4a72      	ldr	r2, [pc, #456]	@ (8008194 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	0019      	movs	r1, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007fd8:	e00c      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007fda:	2312      	movs	r3, #18
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	2213      	movs	r2, #19
 8007fe0:	18ba      	adds	r2, r7, r2
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	e005      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe8:	2312      	movs	r3, #18
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	2213      	movs	r2, #19
 8007fee:	18ba      	adds	r2, r7, r2
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ff4:	2311      	movs	r3, #17
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d105      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ffe:	4b63      	ldr	r3, [pc, #396]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008002:	4b62      	ldr	r3, [pc, #392]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008004:	4966      	ldr	r1, [pc, #408]	@ (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008006:	400a      	ands	r2, r1
 8008008:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2201      	movs	r2, #1
 8008010:	4013      	ands	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008014:	4b5d      	ldr	r3, [pc, #372]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008018:	2203      	movs	r2, #3
 800801a:	4393      	bics	r3, r2
 800801c:	0019      	movs	r1, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	4b5a      	ldr	r3, [pc, #360]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008024:	430a      	orrs	r2, r1
 8008026:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2202      	movs	r2, #2
 800802e:	4013      	ands	r3, r2
 8008030:	d009      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008032:	4b56      	ldr	r3, [pc, #344]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008036:	220c      	movs	r2, #12
 8008038:	4393      	bics	r3, r2
 800803a:	0019      	movs	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	4b52      	ldr	r3, [pc, #328]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008042:	430a      	orrs	r2, r1
 8008044:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2204      	movs	r2, #4
 800804c:	4013      	ands	r3, r2
 800804e:	d009      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008050:	4b4e      	ldr	r3, [pc, #312]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008054:	2230      	movs	r2, #48	@ 0x30
 8008056:	4393      	bics	r3, r2
 8008058:	0019      	movs	r1, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	4b4b      	ldr	r3, [pc, #300]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008060:	430a      	orrs	r2, r1
 8008062:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2220      	movs	r2, #32
 800806a:	4013      	ands	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800806e:	4b47      	ldr	r3, [pc, #284]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008072:	4a4c      	ldr	r2, [pc, #304]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008074:	4013      	ands	r3, r2
 8008076:	0019      	movs	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	4b43      	ldr	r3, [pc, #268]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800807e:	430a      	orrs	r2, r1
 8008080:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2240      	movs	r2, #64	@ 0x40
 8008088:	4013      	ands	r3, r2
 800808a:	d009      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800808c:	4b3f      	ldr	r3, [pc, #252]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800808e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008090:	4a45      	ldr	r2, [pc, #276]	@ (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8008092:	4013      	ands	r3, r2
 8008094:	0019      	movs	r1, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695a      	ldr	r2, [r3, #20]
 800809a:	4b3c      	ldr	r3, [pc, #240]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800809c:	430a      	orrs	r2, r1
 800809e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2380      	movs	r3, #128	@ 0x80
 80080a6:	01db      	lsls	r3, r3, #7
 80080a8:	4013      	ands	r3, r2
 80080aa:	d015      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080ac:	4b37      	ldr	r3, [pc, #220]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	0899      	lsrs	r1, r3, #2
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	4b34      	ldr	r3, [pc, #208]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080ba:	430a      	orrs	r2, r1
 80080bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1a      	ldr	r2, [r3, #32]
 80080c2:	2380      	movs	r3, #128	@ 0x80
 80080c4:	05db      	lsls	r3, r3, #23
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d106      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80080ca:	4b30      	ldr	r3, [pc, #192]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	4b2f      	ldr	r3, [pc, #188]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080d0:	2180      	movs	r1, #128	@ 0x80
 80080d2:	0249      	lsls	r1, r1, #9
 80080d4:	430a      	orrs	r2, r1
 80080d6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	@ 0x80
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	4013      	ands	r3, r2
 80080e2:	d014      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80080e4:	4b29      	ldr	r3, [pc, #164]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e8:	2203      	movs	r2, #3
 80080ea:	4393      	bics	r3, r2
 80080ec:	0019      	movs	r1, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	4b26      	ldr	r3, [pc, #152]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080f4:	430a      	orrs	r2, r1
 80080f6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d106      	bne.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008100:	4b22      	ldr	r3, [pc, #136]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	4b21      	ldr	r3, [pc, #132]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008106:	2180      	movs	r1, #128	@ 0x80
 8008108:	0249      	lsls	r1, r1, #9
 800810a:	430a      	orrs	r2, r1
 800810c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	2380      	movs	r3, #128	@ 0x80
 8008114:	019b      	lsls	r3, r3, #6
 8008116:	4013      	ands	r3, r2
 8008118:	d014      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800811a:	4b1c      	ldr	r3, [pc, #112]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800811c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811e:	220c      	movs	r2, #12
 8008120:	4393      	bics	r3, r2
 8008122:	0019      	movs	r1, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69da      	ldr	r2, [r3, #28]
 8008128:	4b18      	ldr	r3, [pc, #96]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800812a:	430a      	orrs	r2, r1
 800812c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d106      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008136:	4b15      	ldr	r3, [pc, #84]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	4b14      	ldr	r3, [pc, #80]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800813c:	2180      	movs	r1, #128	@ 0x80
 800813e:	0249      	lsls	r1, r1, #9
 8008140:	430a      	orrs	r2, r1
 8008142:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	2380      	movs	r3, #128	@ 0x80
 800814a:	045b      	lsls	r3, r3, #17
 800814c:	4013      	ands	r3, r2
 800814e:	d016      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008150:	4b0e      	ldr	r3, [pc, #56]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008154:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008156:	4013      	ands	r3, r2
 8008158:	0019      	movs	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800815e:	4b0b      	ldr	r3, [pc, #44]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008160:	430a      	orrs	r2, r1
 8008162:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008168:	2380      	movs	r3, #128	@ 0x80
 800816a:	019b      	lsls	r3, r3, #6
 800816c:	429a      	cmp	r2, r3
 800816e:	d106      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008170:	4b06      	ldr	r3, [pc, #24]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	4b05      	ldr	r3, [pc, #20]	@ (800818c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008176:	2180      	movs	r1, #128	@ 0x80
 8008178:	0449      	lsls	r1, r1, #17
 800817a:	430a      	orrs	r2, r1
 800817c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800817e:	2312      	movs	r3, #18
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	781b      	ldrb	r3, [r3, #0]
}
 8008184:	0018      	movs	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	b006      	add	sp, #24
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40021000 	.word	0x40021000
 8008190:	40007000 	.word	0x40007000
 8008194:	fffffcff 	.word	0xfffffcff
 8008198:	fffeffff 	.word	0xfffeffff
 800819c:	00001388 	.word	0x00001388
 80081a0:	efffffff 	.word	0xefffffff
 80081a4:	ffffcfff 	.word	0xffffcfff
 80081a8:	ffff3fff 	.word	0xffff3fff

080081ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e0a8      	b.n	8008310 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	2382      	movs	r3, #130	@ 0x82
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d009      	beq.n	80081e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	61da      	str	r2, [r3, #28]
 80081d8:	e005      	b.n	80081e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	225d      	movs	r2, #93	@ 0x5d
 80081f0:	5c9b      	ldrb	r3, [r3, r2]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d107      	bne.n	8008208 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	225c      	movs	r2, #92	@ 0x5c
 80081fc:	2100      	movs	r1, #0
 80081fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	0018      	movs	r0, r3
 8008204:	f7fb f90c 	bl	8003420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	225d      	movs	r2, #93	@ 0x5d
 800820c:	2102      	movs	r1, #2
 800820e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2140      	movs	r1, #64	@ 0x40
 800821c:	438a      	bics	r2, r1
 800821e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	23e0      	movs	r3, #224	@ 0xe0
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	429a      	cmp	r2, r3
 800822a:	d902      	bls.n	8008232 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e002      	b.n	8008238 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008232:	2380      	movs	r3, #128	@ 0x80
 8008234:	015b      	lsls	r3, r3, #5
 8008236:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	23f0      	movs	r3, #240	@ 0xf0
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	429a      	cmp	r2, r3
 8008242:	d008      	beq.n	8008256 <HAL_SPI_Init+0xaa>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	23e0      	movs	r3, #224	@ 0xe0
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	429a      	cmp	r2, r3
 800824e:	d002      	beq.n	8008256 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	2382      	movs	r3, #130	@ 0x82
 800825c:	005b      	lsls	r3, r3, #1
 800825e:	401a      	ands	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6899      	ldr	r1, [r3, #8]
 8008264:	2384      	movs	r3, #132	@ 0x84
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	400b      	ands	r3, r1
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2102      	movs	r1, #2
 8008272:	400b      	ands	r3, r1
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	2101      	movs	r1, #1
 800827c:	400b      	ands	r3, r1
 800827e:	431a      	orrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6999      	ldr	r1, [r3, #24]
 8008284:	2380      	movs	r3, #128	@ 0x80
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	400b      	ands	r3, r1
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	2138      	movs	r1, #56	@ 0x38
 8008292:	400b      	ands	r3, r1
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	400b      	ands	r3, r1
 800829e:	431a      	orrs	r2, r3
 80082a0:	0011      	movs	r1, r2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a6:	2380      	movs	r3, #128	@ 0x80
 80082a8:	019b      	lsls	r3, r3, #6
 80082aa:	401a      	ands	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	0c1b      	lsrs	r3, r3, #16
 80082ba:	2204      	movs	r2, #4
 80082bc:	401a      	ands	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	2110      	movs	r1, #16
 80082c4:	400b      	ands	r3, r1
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082cc:	2108      	movs	r1, #8
 80082ce:	400b      	ands	r3, r1
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68d9      	ldr	r1, [r3, #12]
 80082d6:	23f0      	movs	r3, #240	@ 0xf0
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	400b      	ands	r3, r1
 80082dc:	431a      	orrs	r2, r3
 80082de:	0011      	movs	r1, r2
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	2380      	movs	r3, #128	@ 0x80
 80082e4:	015b      	lsls	r3, r3, #5
 80082e6:	401a      	ands	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69da      	ldr	r2, [r3, #28]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4907      	ldr	r1, [pc, #28]	@ (8008318 <HAL_SPI_Init+0x16c>)
 80082fc:	400a      	ands	r2, r1
 80082fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	225d      	movs	r2, #93	@ 0x5d
 800830a:	2101      	movs	r1, #1
 800830c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b004      	add	sp, #16
 8008316:	bd80      	pop	{r7, pc}
 8008318:	fffff7ff 	.word	0xfffff7ff

0800831c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e04a      	b.n	80083c4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	223d      	movs	r2, #61	@ 0x3d
 8008332:	5c9b      	ldrb	r3, [r3, r2]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d107      	bne.n	800834a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	223c      	movs	r2, #60	@ 0x3c
 800833e:	2100      	movs	r1, #0
 8008340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	0018      	movs	r0, r3
 8008346:	f7fb f8cb 	bl	80034e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	223d      	movs	r2, #61	@ 0x3d
 800834e:	2102      	movs	r1, #2
 8008350:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	0019      	movs	r1, r3
 800835c:	0010      	movs	r0, r2
 800835e:	f000 f9e7 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2248      	movs	r2, #72	@ 0x48
 8008366:	2101      	movs	r1, #1
 8008368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	223e      	movs	r2, #62	@ 0x3e
 800836e:	2101      	movs	r1, #1
 8008370:	5499      	strb	r1, [r3, r2]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	223f      	movs	r2, #63	@ 0x3f
 8008376:	2101      	movs	r1, #1
 8008378:	5499      	strb	r1, [r3, r2]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2240      	movs	r2, #64	@ 0x40
 800837e:	2101      	movs	r1, #1
 8008380:	5499      	strb	r1, [r3, r2]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2241      	movs	r2, #65	@ 0x41
 8008386:	2101      	movs	r1, #1
 8008388:	5499      	strb	r1, [r3, r2]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2242      	movs	r2, #66	@ 0x42
 800838e:	2101      	movs	r1, #1
 8008390:	5499      	strb	r1, [r3, r2]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2243      	movs	r2, #67	@ 0x43
 8008396:	2101      	movs	r1, #1
 8008398:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2244      	movs	r2, #68	@ 0x44
 800839e:	2101      	movs	r1, #1
 80083a0:	5499      	strb	r1, [r3, r2]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2245      	movs	r2, #69	@ 0x45
 80083a6:	2101      	movs	r1, #1
 80083a8:	5499      	strb	r1, [r3, r2]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2246      	movs	r2, #70	@ 0x46
 80083ae:	2101      	movs	r1, #1
 80083b0:	5499      	strb	r1, [r3, r2]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2247      	movs	r2, #71	@ 0x47
 80083b6:	2101      	movs	r1, #1
 80083b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	223d      	movs	r2, #61	@ 0x3d
 80083be:	2101      	movs	r1, #1
 80083c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	0018      	movs	r0, r3
 80083c6:	46bd      	mov	sp, r7
 80083c8:	b002      	add	sp, #8
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	223d      	movs	r2, #61	@ 0x3d
 80083d8:	5c9b      	ldrb	r3, [r3, r2]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e041      	b.n	8008468 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	223d      	movs	r2, #61	@ 0x3d
 80083e8:	2102      	movs	r1, #2
 80083ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2101      	movs	r1, #1
 80083f8:	430a      	orrs	r2, r1
 80083fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1b      	ldr	r2, [pc, #108]	@ (8008470 <HAL_TIM_Base_Start_IT+0xa4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00e      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x58>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1a      	ldr	r2, [pc, #104]	@ (8008474 <HAL_TIM_Base_Start_IT+0xa8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d009      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x58>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a18      	ldr	r2, [pc, #96]	@ (8008478 <HAL_TIM_Base_Start_IT+0xac>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x58>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a17      	ldr	r2, [pc, #92]	@ (800847c <HAL_TIM_Base_Start_IT+0xb0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d116      	bne.n	8008452 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	4a15      	ldr	r2, [pc, #84]	@ (8008480 <HAL_TIM_Base_Start_IT+0xb4>)
 800842c:	4013      	ands	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b06      	cmp	r3, #6
 8008434:	d016      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x98>
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	2380      	movs	r3, #128	@ 0x80
 800843a:	025b      	lsls	r3, r3, #9
 800843c:	429a      	cmp	r2, r3
 800843e:	d011      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2101      	movs	r1, #1
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	e008      	b.n	8008464 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2101      	movs	r1, #1
 800845e:	430a      	orrs	r2, r1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e000      	b.n	8008466 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	0018      	movs	r0, r3
 800846a:	46bd      	mov	sp, r7
 800846c:	b004      	add	sp, #16
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40014000 	.word	0x40014000
 8008480:	00010007 	.word	0x00010007

08008484 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2101      	movs	r1, #1
 8008498:	438a      	bics	r2, r1
 800849a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	4a0d      	ldr	r2, [pc, #52]	@ (80084d8 <HAL_TIM_Base_Stop_IT+0x54>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	d10d      	bne.n	80084c4 <HAL_TIM_Base_Stop_IT+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	4a0b      	ldr	r2, [pc, #44]	@ (80084dc <HAL_TIM_Base_Stop_IT+0x58>)
 80084b0:	4013      	ands	r3, r2
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_Base_Stop_IT+0x40>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2101      	movs	r1, #1
 80084c0:	438a      	bics	r2, r1
 80084c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	223d      	movs	r2, #61	@ 0x3d
 80084c8:	2101      	movs	r1, #1
 80084ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b002      	add	sp, #8
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	00001111 	.word	0x00001111
 80084dc:	00000444 	.word	0x00000444

080084e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2202      	movs	r2, #2
 80084fc:	4013      	ands	r3, r2
 80084fe:	d021      	beq.n	8008544 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2202      	movs	r2, #2
 8008504:	4013      	ands	r3, r2
 8008506:	d01d      	beq.n	8008544 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2203      	movs	r2, #3
 800850e:	4252      	negs	r2, r2
 8008510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	2203      	movs	r2, #3
 8008520:	4013      	ands	r3, r2
 8008522:	d004      	beq.n	800852e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	0018      	movs	r0, r3
 8008528:	f000 f8ea 	bl	8008700 <HAL_TIM_IC_CaptureCallback>
 800852c:	e007      	b.n	800853e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0018      	movs	r0, r3
 8008532:	f000 f8dd 	bl	80086f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	0018      	movs	r0, r3
 800853a:	f000 f8e9 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2204      	movs	r2, #4
 8008548:	4013      	ands	r3, r2
 800854a:	d022      	beq.n	8008592 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2204      	movs	r2, #4
 8008550:	4013      	ands	r3, r2
 8008552:	d01e      	beq.n	8008592 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2205      	movs	r2, #5
 800855a:	4252      	negs	r2, r2
 800855c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2202      	movs	r2, #2
 8008562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	23c0      	movs	r3, #192	@ 0xc0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4013      	ands	r3, r2
 8008570:	d004      	beq.n	800857c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	0018      	movs	r0, r3
 8008576:	f000 f8c3 	bl	8008700 <HAL_TIM_IC_CaptureCallback>
 800857a:	e007      	b.n	800858c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0018      	movs	r0, r3
 8008580:	f000 f8b6 	bl	80086f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0018      	movs	r0, r3
 8008588:	f000 f8c2 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2208      	movs	r2, #8
 8008596:	4013      	ands	r3, r2
 8008598:	d021      	beq.n	80085de <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2208      	movs	r2, #8
 800859e:	4013      	ands	r3, r2
 80085a0:	d01d      	beq.n	80085de <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2209      	movs	r2, #9
 80085a8:	4252      	negs	r2, r2
 80085aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2204      	movs	r2, #4
 80085b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	2203      	movs	r2, #3
 80085ba:	4013      	ands	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0018      	movs	r0, r3
 80085c2:	f000 f89d 	bl	8008700 <HAL_TIM_IC_CaptureCallback>
 80085c6:	e007      	b.n	80085d8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	0018      	movs	r0, r3
 80085cc:	f000 f890 	bl	80086f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 f89c 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2210      	movs	r2, #16
 80085e2:	4013      	ands	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2210      	movs	r2, #16
 80085ea:	4013      	ands	r3, r2
 80085ec:	d01e      	beq.n	800862c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2211      	movs	r2, #17
 80085f4:	4252      	negs	r2, r2
 80085f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2208      	movs	r2, #8
 80085fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	23c0      	movs	r3, #192	@ 0xc0
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4013      	ands	r3, r2
 800860a:	d004      	beq.n	8008616 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	0018      	movs	r0, r3
 8008610:	f000 f876 	bl	8008700 <HAL_TIM_IC_CaptureCallback>
 8008614:	e007      	b.n	8008626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	0018      	movs	r0, r3
 800861a:	f000 f869 	bl	80086f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	0018      	movs	r0, r3
 8008622:	f000 f875 	bl	8008710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2201      	movs	r2, #1
 8008630:	4013      	ands	r3, r2
 8008632:	d00c      	beq.n	800864e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	4013      	ands	r3, r2
 800863a:	d008      	beq.n	800864e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2202      	movs	r2, #2
 8008642:	4252      	negs	r2, r2
 8008644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	0018      	movs	r0, r3
 800864a:	f7fa fcd5 	bl	8002ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2280      	movs	r2, #128	@ 0x80
 8008652:	4013      	ands	r3, r2
 8008654:	d104      	bne.n	8008660 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	2380      	movs	r3, #128	@ 0x80
 800865a:	019b      	lsls	r3, r3, #6
 800865c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800865e:	d00b      	beq.n	8008678 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2280      	movs	r2, #128	@ 0x80
 8008664:	4013      	ands	r3, r2
 8008666:	d007      	beq.n	8008678 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a1e      	ldr	r2, [pc, #120]	@ (80086e8 <HAL_TIM_IRQHandler+0x208>)
 800866e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	0018      	movs	r0, r3
 8008674:	f000 f962 	bl	800893c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	2380      	movs	r3, #128	@ 0x80
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	4013      	ands	r3, r2
 8008680:	d00b      	beq.n	800869a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2280      	movs	r2, #128	@ 0x80
 8008686:	4013      	ands	r3, r2
 8008688:	d007      	beq.n	800869a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a17      	ldr	r2, [pc, #92]	@ (80086ec <HAL_TIM_IRQHandler+0x20c>)
 8008690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	0018      	movs	r0, r3
 8008696:	f000 f959 	bl	800894c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2240      	movs	r2, #64	@ 0x40
 800869e:	4013      	ands	r3, r2
 80086a0:	d00c      	beq.n	80086bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2240      	movs	r2, #64	@ 0x40
 80086a6:	4013      	ands	r3, r2
 80086a8:	d008      	beq.n	80086bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2241      	movs	r2, #65	@ 0x41
 80086b0:	4252      	negs	r2, r2
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f832 	bl	8008720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2220      	movs	r2, #32
 80086c0:	4013      	ands	r3, r2
 80086c2:	d00c      	beq.n	80086de <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	4013      	ands	r3, r2
 80086ca:	d008      	beq.n	80086de <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2221      	movs	r2, #33	@ 0x21
 80086d2:	4252      	negs	r2, r2
 80086d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	0018      	movs	r0, r3
 80086da:	f000 f927 	bl	800892c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b004      	add	sp, #16
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	ffffdf7f 	.word	0xffffdf7f
 80086ec:	fffffeff 	.word	0xfffffeff

080086f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086f8:	46c0      	nop			@ (mov r8, r8)
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b002      	add	sp, #8
 80086fe:	bd80      	pop	{r7, pc}

08008700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008708:	46c0      	nop			@ (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b002      	add	sp, #8
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008718:	46c0      	nop			@ (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008728:	46c0      	nop			@ (mov r8, r8)
 800872a:	46bd      	mov	sp, r7
 800872c:	b002      	add	sp, #8
 800872e:	bd80      	pop	{r7, pc}

08008730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a3a      	ldr	r2, [pc, #232]	@ (800882c <TIM_Base_SetConfig+0xfc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d007      	beq.n	8008758 <TIM_Base_SetConfig+0x28>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a39      	ldr	r2, [pc, #228]	@ (8008830 <TIM_Base_SetConfig+0x100>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d003      	beq.n	8008758 <TIM_Base_SetConfig+0x28>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a38      	ldr	r2, [pc, #224]	@ (8008834 <TIM_Base_SetConfig+0x104>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d108      	bne.n	800876a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2270      	movs	r2, #112	@ 0x70
 800875c:	4393      	bics	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a2f      	ldr	r2, [pc, #188]	@ (800882c <TIM_Base_SetConfig+0xfc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d017      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a2e      	ldr	r2, [pc, #184]	@ (8008830 <TIM_Base_SetConfig+0x100>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d013      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a2d      	ldr	r2, [pc, #180]	@ (8008834 <TIM_Base_SetConfig+0x104>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00f      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2c      	ldr	r2, [pc, #176]	@ (8008838 <TIM_Base_SetConfig+0x108>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00b      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a2b      	ldr	r2, [pc, #172]	@ (800883c <TIM_Base_SetConfig+0x10c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2a      	ldr	r2, [pc, #168]	@ (8008840 <TIM_Base_SetConfig+0x110>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d003      	beq.n	80087a2 <TIM_Base_SetConfig+0x72>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a29      	ldr	r2, [pc, #164]	@ (8008844 <TIM_Base_SetConfig+0x114>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d108      	bne.n	80087b4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4a28      	ldr	r2, [pc, #160]	@ (8008848 <TIM_Base_SetConfig+0x118>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2280      	movs	r2, #128	@ 0x80
 80087b8:	4393      	bics	r3, r2
 80087ba:	001a      	movs	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	689a      	ldr	r2, [r3, #8]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a13      	ldr	r2, [pc, #76]	@ (800882c <TIM_Base_SetConfig+0xfc>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00b      	beq.n	80087fa <TIM_Base_SetConfig+0xca>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a15      	ldr	r2, [pc, #84]	@ (800883c <TIM_Base_SetConfig+0x10c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d007      	beq.n	80087fa <TIM_Base_SetConfig+0xca>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a14      	ldr	r2, [pc, #80]	@ (8008840 <TIM_Base_SetConfig+0x110>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d003      	beq.n	80087fa <TIM_Base_SetConfig+0xca>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a13      	ldr	r2, [pc, #76]	@ (8008844 <TIM_Base_SetConfig+0x114>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d103      	bne.n	8008802 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2201      	movs	r2, #1
 800880e:	4013      	ands	r3, r2
 8008810:	2b01      	cmp	r3, #1
 8008812:	d106      	bne.n	8008822 <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2201      	movs	r2, #1
 800881a:	4393      	bics	r3, r2
 800881c:	001a      	movs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	611a      	str	r2, [r3, #16]
  }
}
 8008822:	46c0      	nop			@ (mov r8, r8)
 8008824:	46bd      	mov	sp, r7
 8008826:	b004      	add	sp, #16
 8008828:	bd80      	pop	{r7, pc}
 800882a:	46c0      	nop			@ (mov r8, r8)
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40000400 	.word	0x40000400
 8008834:	40000800 	.word	0x40000800
 8008838:	40002000 	.word	0x40002000
 800883c:	40014000 	.word	0x40014000
 8008840:	40014400 	.word	0x40014400
 8008844:	40014800 	.word	0x40014800
 8008848:	fffffcff 	.word	0xfffffcff

0800884c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	223c      	movs	r2, #60	@ 0x3c
 800885a:	5c9b      	ldrb	r3, [r3, r2]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008860:	2302      	movs	r3, #2
 8008862:	e054      	b.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	223c      	movs	r2, #60	@ 0x3c
 8008868:	2101      	movs	r1, #1
 800886a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	223d      	movs	r2, #61	@ 0x3d
 8008870:	2102      	movs	r1, #2
 8008872:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a23      	ldr	r2, [pc, #140]	@ (8008918 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d108      	bne.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a22      	ldr	r2, [pc, #136]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008892:	4013      	ands	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2270      	movs	r2, #112	@ 0x70
 80088a4:	4393      	bics	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a16      	ldr	r2, [pc, #88]	@ (8008918 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a15      	ldr	r2, [pc, #84]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a14      	ldr	r2, [pc, #80]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a12      	ldr	r2, [pc, #72]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d10c      	bne.n	80088fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2280      	movs	r2, #128	@ 0x80
 80088e6:	4393      	bics	r3, r2
 80088e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	223d      	movs	r2, #61	@ 0x3d
 8008900:	2101      	movs	r1, #1
 8008902:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	223c      	movs	r2, #60	@ 0x3c
 8008908:	2100      	movs	r1, #0
 800890a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	0018      	movs	r0, r3
 8008910:	46bd      	mov	sp, r7
 8008912:	b004      	add	sp, #16
 8008914:	bd80      	pop	{r7, pc}
 8008916:	46c0      	nop			@ (mov r8, r8)
 8008918:	40012c00 	.word	0x40012c00
 800891c:	ff0fffff 	.word	0xff0fffff
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40014000 	.word	0x40014000

0800892c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008934:	46c0      	nop			@ (mov r8, r8)
 8008936:	46bd      	mov	sp, r7
 8008938:	b002      	add	sp, #8
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008944:	46c0      	nop			@ (mov r8, r8)
 8008946:	46bd      	mov	sp, r7
 8008948:	b002      	add	sp, #8
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bd80      	pop	{r7, pc}

0800895c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800896a:	4b05      	ldr	r3, [pc, #20]	@ (8008980 <USB_EnableGlobalInt+0x24>)
 800896c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b004      	add	sp, #16
 800897c:	bd80      	pop	{r7, pc}
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	0000bf80 	.word	0x0000bf80

08008984 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800898c:	4b06      	ldr	r3, [pc, #24]	@ (80089a8 <USB_DisableGlobalInt+0x24>)
 800898e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	43d2      	mvns	r2, r2
 8008998:	401a      	ands	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	0018      	movs	r0, r3
 80089a2:	46bd      	mov	sp, r7
 80089a4:	b004      	add	sp, #16
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	0000bf80 	.word	0x0000bf80

080089ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	000a      	movs	r2, r1
 80089b6:	1cfb      	adds	r3, r7, #3
 80089b8:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 80089ba:	1cfb      	adds	r3, r7, #3
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	085a      	lsrs	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80089ce:	e00d      	b.n	80089ec <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 80089d0:	1cfb      	adds	r3, r7, #3
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d107      	bne.n	80089e8 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089dc:	2280      	movs	r2, #128	@ 0x80
 80089de:	0612      	lsls	r2, r2, #24
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80089e6:	e001      	b.n	80089ec <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	0018      	movs	r0, r3
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b002      	add	sp, #8
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80089f6:	b084      	sub	sp, #16
 80089f8:	b5b0      	push	{r4, r5, r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	2004      	movs	r0, #4
 8008a02:	2420      	movs	r4, #32
 8008a04:	1900      	adds	r0, r0, r4
 8008a06:	19c0      	adds	r0, r0, r7
 8008a08:	6001      	str	r1, [r0, #0]
 8008a0a:	6042      	str	r2, [r0, #4]
 8008a0c:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a18:	2201      	movs	r2, #1
 8008a1a:	4393      	bics	r3, r2
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8008a22:	250f      	movs	r5, #15
 8008a24:	197c      	adds	r4, r7, r5
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f7ff ffbe 	bl	80089ac <USB_SetCurrentMode>
 8008a30:	0003      	movs	r3, r0
 8008a32:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008a3a:	197b      	adds	r3, r7, r5
 8008a3c:	781b      	ldrb	r3, [r3, #0]
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b004      	add	sp, #16
 8008a44:	bcb0      	pop	{r4, r5, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	b004      	add	sp, #16
 8008a4a:	4718      	bx	r3

08008a4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b09e      	sub	sp, #120	@ 0x78
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a56:	2377      	movs	r3, #119	@ 0x77
 8008a58:	18fb      	adds	r3, r7, r3
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	18d3      	adds	r3, r2, r3
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4adc      	ldr	r2, [pc, #880]	@ (8008ddc <USB_ActivateEndpoint+0x390>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d00e      	beq.n	8008a96 <USB_ActivateEndpoint+0x4a>
 8008a78:	dc19      	bgt.n	8008aae <USB_ActivateEndpoint+0x62>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d01c      	beq.n	8008ab8 <USB_ActivateEndpoint+0x6c>
 8008a7e:	dc16      	bgt.n	8008aae <USB_ActivateEndpoint+0x62>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <USB_ActivateEndpoint+0x3e>
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d00c      	beq.n	8008aa2 <USB_ActivateEndpoint+0x56>
 8008a88:	e011      	b.n	8008aae <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a8c:	2280      	movs	r2, #128	@ 0x80
 8008a8e:	0092      	lsls	r2, r2, #2
 8008a90:	4313      	orrs	r3, r2
 8008a92:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8008a94:	e011      	b.n	8008aba <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a98:	22c0      	movs	r2, #192	@ 0xc0
 8008a9a:	00d2      	lsls	r2, r2, #3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8008aa0:	e00b      	b.n	8008aba <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008aa4:	2280      	movs	r2, #128	@ 0x80
 8008aa6:	00d2      	lsls	r2, r2, #3
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8008aac:	e005      	b.n	8008aba <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8008aae:	2377      	movs	r3, #119	@ 0x77
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]
      break;
 8008ab6:	e000      	b.n	8008aba <USB_ActivateEndpoint+0x6e>
      break;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	18d3      	adds	r3, r2, r3
 8008ac4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008ac6:	49c6      	ldr	r1, [pc, #792]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	18d3      	adds	r3, r2, r3
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4ac2      	ldr	r2, [pc, #776]	@ (8008de4 <USB_ActivateEndpoint+0x398>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	7812      	ldrb	r2, [r2, #0]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	18d3      	adds	r3, r2, r3
 8008aee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008af0:	49bb      	ldr	r1, [pc, #748]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008af2:	430a      	orrs	r2, r1
 8008af4:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	7b1b      	ldrb	r3, [r3, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d000      	beq.n	8008b00 <USB_ActivateEndpoint+0xb4>
 8008afe:	e155      	b.n	8008dac <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	785b      	ldrb	r3, [r3, #1]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d06e      	beq.n	8008be6 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	4ab6      	ldr	r2, [pc, #728]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008b10:	4694      	mov	ip, r2
 8008b12:	4463      	add	r3, ip
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	49b2      	ldr	r1, [pc, #712]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008b1e:	468c      	mov	ip, r1
 8008b20:	4463      	add	r3, ip
 8008b22:	0c12      	lsrs	r2, r2, #16
 8008b24:	0412      	lsls	r2, r2, #16
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4aae      	ldr	r2, [pc, #696]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008b30:	4694      	mov	ip, r2
 8008b32:	4463      	add	r3, ip
 8008b34:	6819      	ldr	r1, [r3, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88db      	ldrh	r3, [r3, #6]
 8008b3a:	089b      	lsrs	r3, r3, #2
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	009a      	lsls	r2, r3, #2
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	48a8      	ldr	r0, [pc, #672]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008b48:	4684      	mov	ip, r0
 8008b4a:	4463      	add	r3, ip
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	18d3      	adds	r3, r2, r3
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2240      	movs	r2, #64	@ 0x40
 8008b62:	4013      	ands	r3, r2
 8008b64:	d011      	beq.n	8008b8a <USB_ActivateEndpoint+0x13e>
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	18d3      	adds	r3, r2, r3
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a9c      	ldr	r2, [pc, #624]	@ (8008de4 <USB_ActivateEndpoint+0x398>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	18d3      	adds	r3, r2, r3
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4999      	ldr	r1, [pc, #612]	@ (8008dec <USB_ActivateEndpoint+0x3a0>)
 8008b86:	430a      	orrs	r2, r1
 8008b88:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d016      	beq.n	8008bc0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	18d3      	adds	r3, r2, r3
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a94      	ldr	r2, [pc, #592]	@ (8008df0 <USB_ActivateEndpoint+0x3a4>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	4053      	eors	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	18d3      	adds	r3, r2, r3
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4989      	ldr	r1, [pc, #548]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e261      	b.n	8009084 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	18d3      	adds	r3, r2, r3
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a88      	ldr	r2, [pc, #544]	@ (8008df0 <USB_ActivateEndpoint+0x3a4>)
 8008bce:	4013      	ands	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	18d3      	adds	r3, r2, r3
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4980      	ldr	r1, [pc, #512]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008be0:	430a      	orrs	r2, r1
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e24e      	b.n	8009084 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	4a7e      	ldr	r2, [pc, #504]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008bee:	4694      	mov	ip, r2
 8008bf0:	4463      	add	r3, ip
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	497b      	ldr	r1, [pc, #492]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008bfc:	468c      	mov	ip, r1
 8008bfe:	4463      	add	r3, ip
 8008c00:	0c12      	lsrs	r2, r2, #16
 8008c02:	0412      	lsls	r2, r2, #16
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	4a76      	ldr	r2, [pc, #472]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c0e:	4694      	mov	ip, r2
 8008c10:	4463      	add	r3, ip
 8008c12:	6859      	ldr	r1, [r3, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	88db      	ldrh	r3, [r3, #6]
 8008c18:	089b      	lsrs	r3, r3, #2
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	009a      	lsls	r2, r3, #2
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	4870      	ldr	r0, [pc, #448]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c26:	4684      	mov	ip, r0
 8008c28:	4463      	add	r3, ip
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	4a6c      	ldr	r2, [pc, #432]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c36:	4694      	mov	ip, r2
 8008c38:	4463      	add	r3, ip
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	4969      	ldr	r1, [pc, #420]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c44:	468c      	mov	ip, r1
 8008c46:	4463      	add	r3, ip
 8008c48:	0192      	lsls	r2, r2, #6
 8008c4a:	0992      	lsrs	r2, r2, #6
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c54:	d920      	bls.n	8008c98 <USB_ActivateEndpoint+0x24c>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	221f      	movs	r2, #31
 8008c64:	4013      	ands	r3, r2
 8008c66:	d102      	bne.n	8008c6e <USB_ActivateEndpoint+0x222>
 8008c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4a5c      	ldr	r2, [pc, #368]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c76:	4694      	mov	ip, r2
 8008c78:	4463      	add	r3, ip
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c7e:	069b      	lsls	r3, r3, #26
 8008c80:	431a      	orrs	r2, r3
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4957      	ldr	r1, [pc, #348]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008c8a:	468c      	mov	ip, r1
 8008c8c:	4463      	add	r3, ip
 8008c8e:	2180      	movs	r1, #128	@ 0x80
 8008c90:	0609      	lsls	r1, r1, #24
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	e032      	b.n	8008cfe <USB_ActivateEndpoint+0x2b2>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d111      	bne.n	8008cc4 <USB_ActivateEndpoint+0x278>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4a50      	ldr	r2, [pc, #320]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008ca8:	4694      	mov	ip, r2
 8008caa:	4463      	add	r3, ip
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	494c      	ldr	r1, [pc, #304]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008cb6:	468c      	mov	ip, r1
 8008cb8:	4463      	add	r3, ip
 8008cba:	2180      	movs	r1, #128	@ 0x80
 8008cbc:	0609      	lsls	r1, r1, #24
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	e01c      	b.n	8008cfe <USB_ActivateEndpoint+0x2b2>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d002      	beq.n	8008cdc <USB_ActivateEndpoint+0x290>
 8008cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cd8:	3301      	adds	r3, #1
 8008cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	4a41      	ldr	r2, [pc, #260]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008ce4:	4694      	mov	ip, r2
 8008ce6:	4463      	add	r3, ip
 8008ce8:	6859      	ldr	r1, [r3, #4]
 8008cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cec:	069a      	lsls	r2, r3, #26
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	483c      	ldr	r0, [pc, #240]	@ (8008de8 <USB_ActivateEndpoint+0x39c>)
 8008cf6:	4684      	mov	ip, r0
 8008cf8:	4463      	add	r3, ip
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	18d3      	adds	r3, r2, r3
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d0e:	2380      	movs	r3, #128	@ 0x80
 8008d10:	01db      	lsls	r3, r3, #7
 8008d12:	4013      	ands	r3, r2
 8008d14:	d011      	beq.n	8008d3a <USB_ActivateEndpoint+0x2ee>
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	18d3      	adds	r3, r2, r3
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a30      	ldr	r2, [pc, #192]	@ (8008de4 <USB_ActivateEndpoint+0x398>)
 8008d24:	4013      	ands	r3, r2
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d34:	492f      	ldr	r1, [pc, #188]	@ (8008df4 <USB_ActivateEndpoint+0x3a8>)
 8008d36:	430a      	orrs	r2, r1
 8008d38:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d11c      	bne.n	8008d7c <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	18d3      	adds	r3, r2, r3
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008df8 <USB_ActivateEndpoint+0x3ac>)
 8008d50:	4013      	ands	r3, r2
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	2280      	movs	r2, #128	@ 0x80
 8008d58:	0152      	lsls	r2, r2, #5
 8008d5a:	4053      	eors	r3, r2
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2280      	movs	r2, #128	@ 0x80
 8008d62:	0192      	lsls	r2, r2, #6
 8008d64:	4053      	eors	r3, r2
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	491a      	ldr	r1, [pc, #104]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008d76:	430a      	orrs	r2, r1
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e183      	b.n	8009084 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	18d3      	adds	r3, r2, r3
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1b      	ldr	r2, [pc, #108]	@ (8008df8 <USB_ActivateEndpoint+0x3ac>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	623b      	str	r3, [r7, #32]
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	2280      	movs	r2, #128	@ 0x80
 8008d92:	0192      	lsls	r2, r2, #6
 8008d94:	4053      	eors	r3, r2
 8008d96:	623b      	str	r3, [r7, #32]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	490e      	ldr	r1, [pc, #56]	@ (8008de0 <USB_ActivateEndpoint+0x394>)
 8008da6:	430a      	orrs	r2, r1
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e16b      	b.n	8009084 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	78db      	ldrb	r3, [r3, #3]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d125      	bne.n	8008e00 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	18d3      	adds	r3, r2, r3
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a08      	ldr	r2, [pc, #32]	@ (8008de4 <USB_ActivateEndpoint+0x398>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	18d3      	adds	r3, r2, r3
 8008dd0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008dd2:	490a      	ldr	r1, [pc, #40]	@ (8008dfc <USB_ActivateEndpoint+0x3b0>)
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e024      	b.n	8008e24 <USB_ActivateEndpoint+0x3d8>
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	07ff898f 	.word	0x07ff898f
 8008de0:	00008080 	.word	0x00008080
 8008de4:	07ff8f8f 	.word	0x07ff8f8f
 8008de8:	40009800 	.word	0x40009800
 8008dec:	000080c0 	.word	0x000080c0
 8008df0:	07ff8fbf 	.word	0x07ff8fbf
 8008df4:	0000c080 	.word	0x0000c080
 8008df8:	07ffbf8f 	.word	0x07ffbf8f
 8008dfc:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	18d3      	adds	r3, r2, r3
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4aa1      	ldr	r2, [pc, #644]	@ (8009094 <USB_ActivateEndpoint+0x648>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	18d3      	adds	r3, r2, r3
 8008e1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e1e:	499e      	ldr	r1, [pc, #632]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	4a9c      	ldr	r2, [pc, #624]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e2c:	4694      	mov	ip, r2
 8008e2e:	4463      	add	r3, ip
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	4998      	ldr	r1, [pc, #608]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e3a:	468c      	mov	ip, r1
 8008e3c:	4463      	add	r3, ip
 8008e3e:	0c12      	lsrs	r2, r2, #16
 8008e40:	0412      	lsls	r2, r2, #16
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	4a94      	ldr	r2, [pc, #592]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e4c:	4694      	mov	ip, r2
 8008e4e:	4463      	add	r3, ip
 8008e50:	6819      	ldr	r1, [r3, #0]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	891b      	ldrh	r3, [r3, #8]
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	009a      	lsls	r2, r3, #2
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	488e      	ldr	r0, [pc, #568]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e64:	4684      	mov	ip, r0
 8008e66:	4463      	add	r3, ip
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	4a8a      	ldr	r2, [pc, #552]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e74:	4694      	mov	ip, r2
 8008e76:	4463      	add	r3, ip
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	4986      	ldr	r1, [pc, #536]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e82:	468c      	mov	ip, r1
 8008e84:	4463      	add	r3, ip
 8008e86:	0c12      	lsrs	r2, r2, #16
 8008e88:	0412      	lsls	r2, r2, #16
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	4a82      	ldr	r2, [pc, #520]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008e94:	4694      	mov	ip, r2
 8008e96:	4463      	add	r3, ip
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	895b      	ldrh	r3, [r3, #10]
 8008e9e:	089b      	lsrs	r3, r3, #2
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	009a      	lsls	r2, r3, #2
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	487c      	ldr	r0, [pc, #496]	@ (800909c <USB_ActivateEndpoint+0x650>)
 8008eac:	4684      	mov	ip, r0
 8008eae:	4463      	add	r3, ip
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	785b      	ldrb	r3, [r3, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d169      	bne.n	8008f90 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	18d3      	adds	r3, r2, r3
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ecc:	2380      	movs	r3, #128	@ 0x80
 8008ece:	01db      	lsls	r3, r3, #7
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	d011      	beq.n	8008ef8 <USB_ActivateEndpoint+0x4ac>
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	18d3      	adds	r3, r2, r3
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a6f      	ldr	r2, [pc, #444]	@ (80090a0 <USB_ActivateEndpoint+0x654>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	18d3      	adds	r3, r2, r3
 8008ef0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ef2:	496c      	ldr	r1, [pc, #432]	@ (80090a4 <USB_ActivateEndpoint+0x658>)
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	18d3      	adds	r3, r2, r3
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f08:	2240      	movs	r2, #64	@ 0x40
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	d011      	beq.n	8008f32 <USB_ActivateEndpoint+0x4e6>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	18d3      	adds	r3, r2, r3
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a61      	ldr	r2, [pc, #388]	@ (80090a0 <USB_ActivateEndpoint+0x654>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	18d3      	adds	r3, r2, r3
 8008f2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f2c:	495e      	ldr	r1, [pc, #376]	@ (80090a8 <USB_ActivateEndpoint+0x65c>)
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	18d3      	adds	r3, r2, r3
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80090ac <USB_ActivateEndpoint+0x660>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f46:	2280      	movs	r2, #128	@ 0x80
 8008f48:	0152      	lsls	r2, r2, #5
 8008f4a:	4053      	eors	r3, r2
 8008f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	2280      	movs	r2, #128	@ 0x80
 8008f52:	0192      	lsls	r2, r2, #6
 8008f54:	4053      	eors	r3, r2
 8008f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	18d3      	adds	r3, r2, r3
 8008f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f64:	494c      	ldr	r1, [pc, #304]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 8008f66:	430a      	orrs	r2, r1
 8008f68:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	18d3      	adds	r3, r2, r3
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a4e      	ldr	r2, [pc, #312]	@ (80090b0 <USB_ActivateEndpoint+0x664>)
 8008f78:	4013      	ands	r3, r2
 8008f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	18d3      	adds	r3, r2, r3
 8008f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f88:	4943      	ldr	r1, [pc, #268]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	e079      	b.n	8009084 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	18d3      	adds	r3, r2, r3
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fa0:	2380      	movs	r3, #128	@ 0x80
 8008fa2:	01db      	lsls	r3, r3, #7
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d011      	beq.n	8008fcc <USB_ActivateEndpoint+0x580>
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	18d3      	adds	r3, r2, r3
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a3a      	ldr	r2, [pc, #232]	@ (80090a0 <USB_ActivateEndpoint+0x654>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	18d3      	adds	r3, r2, r3
 8008fc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fc6:	4937      	ldr	r1, [pc, #220]	@ (80090a4 <USB_ActivateEndpoint+0x658>)
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	18d3      	adds	r3, r2, r3
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fdc:	2240      	movs	r2, #64	@ 0x40
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d011      	beq.n	8009006 <USB_ActivateEndpoint+0x5ba>
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	18d3      	adds	r3, r2, r3
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a2c      	ldr	r2, [pc, #176]	@ (80090a0 <USB_ActivateEndpoint+0x654>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	18d3      	adds	r3, r2, r3
 8008ffe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009000:	4929      	ldr	r1, [pc, #164]	@ (80090a8 <USB_ActivateEndpoint+0x65c>)
 8009002:	430a      	orrs	r2, r1
 8009004:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	78db      	ldrb	r3, [r3, #3]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d016      	beq.n	800903c <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18d3      	adds	r3, r2, r3
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a25      	ldr	r2, [pc, #148]	@ (80090b0 <USB_ActivateEndpoint+0x664>)
 800901c:	4013      	ands	r3, r2
 800901e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009022:	2220      	movs	r2, #32
 8009024:	4053      	eors	r3, r2
 8009026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	18d3      	adds	r3, r2, r3
 8009032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009034:	4918      	ldr	r1, [pc, #96]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 8009036:	430a      	orrs	r2, r1
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e011      	b.n	8009060 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a19      	ldr	r2, [pc, #100]	@ (80090b0 <USB_ActivateEndpoint+0x664>)
 800904a:	4013      	ands	r3, r2
 800904c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	18d3      	adds	r3, r2, r3
 8009058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800905a:	490f      	ldr	r1, [pc, #60]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 800905c:	430a      	orrs	r2, r1
 800905e:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a0f      	ldr	r2, [pc, #60]	@ (80090ac <USB_ActivateEndpoint+0x660>)
 800906e:	4013      	ands	r3, r2
 8009070:	647b      	str	r3, [r7, #68]	@ 0x44
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	18d3      	adds	r3, r2, r3
 800907c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800907e:	4906      	ldr	r1, [pc, #24]	@ (8009098 <USB_ActivateEndpoint+0x64c>)
 8009080:	430a      	orrs	r2, r1
 8009082:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009084:	2377      	movs	r3, #119	@ 0x77
 8009086:	18fb      	adds	r3, r7, r3
 8009088:	781b      	ldrb	r3, [r3, #0]
}
 800908a:	0018      	movs	r0, r3
 800908c:	46bd      	mov	sp, r7
 800908e:	b01e      	add	sp, #120	@ 0x78
 8009090:	bd80      	pop	{r7, pc}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	07ff8e8f 	.word	0x07ff8e8f
 8009098:	00008080 	.word	0x00008080
 800909c:	40009800 	.word	0x40009800
 80090a0:	07ff8f8f 	.word	0x07ff8f8f
 80090a4:	0000c080 	.word	0x0000c080
 80090a8:	000080c0 	.word	0x000080c0
 80090ac:	07ffbf8f 	.word	0x07ffbf8f
 80090b0:	07ff8fbf 	.word	0x07ff8fbf

080090b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b096      	sub	sp, #88	@ 0x58
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	7b1b      	ldrb	r3, [r3, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d164      	bne.n	8009190 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	785b      	ldrb	r3, [r3, #1]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d02f      	beq.n	800912e <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	18d3      	adds	r3, r2, r3
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	613b      	str	r3, [r7, #16]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2240      	movs	r2, #64	@ 0x40
 80090e0:	4013      	ands	r3, r2
 80090e2:	d011      	beq.n	8009108 <USB_DeactivateEndpoint+0x54>
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	18d3      	adds	r3, r2, r3
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a9d      	ldr	r2, [pc, #628]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	18d3      	adds	r3, r2, r3
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	499a      	ldr	r1, [pc, #616]	@ (800936c <USB_DeactivateEndpoint+0x2b8>)
 8009104:	430a      	orrs	r2, r1
 8009106:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a96      	ldr	r2, [pc, #600]	@ (8009370 <USB_DeactivateEndpoint+0x2bc>)
 8009116:	4013      	ands	r3, r2
 8009118:	60bb      	str	r3, [r7, #8]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	18d3      	adds	r3, r2, r3
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4993      	ldr	r1, [pc, #588]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 8009128:	430a      	orrs	r2, r1
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	e117      	b.n	800935e <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	18d3      	adds	r3, r2, r3
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	69fa      	ldr	r2, [r7, #28]
 800913e:	2380      	movs	r3, #128	@ 0x80
 8009140:	01db      	lsls	r3, r3, #7
 8009142:	4013      	ands	r3, r2
 8009144:	d011      	beq.n	800916a <USB_DeactivateEndpoint+0xb6>
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	18d3      	adds	r3, r2, r3
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a85      	ldr	r2, [pc, #532]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 8009154:	4013      	ands	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	4984      	ldr	r1, [pc, #528]	@ (8009378 <USB_DeactivateEndpoint+0x2c4>)
 8009166:	430a      	orrs	r2, r1
 8009168:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a81      	ldr	r2, [pc, #516]	@ (800937c <USB_DeactivateEndpoint+0x2c8>)
 8009178:	4013      	ands	r3, r2
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	18d3      	adds	r3, r2, r3
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	497a      	ldr	r1, [pc, #488]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 800918a:	430a      	orrs	r2, r1
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e0e6      	b.n	800935e <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	785b      	ldrb	r3, [r3, #1]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d171      	bne.n	800927c <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	18d3      	adds	r3, r2, r3
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091a8:	2380      	movs	r3, #128	@ 0x80
 80091aa:	01db      	lsls	r3, r3, #7
 80091ac:	4013      	ands	r3, r2
 80091ae:	d011      	beq.n	80091d4 <USB_DeactivateEndpoint+0x120>
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	18d3      	adds	r3, r2, r3
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a6a      	ldr	r2, [pc, #424]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 80091be:	4013      	ands	r3, r2
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	18d3      	adds	r3, r2, r3
 80091cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ce:	496a      	ldr	r1, [pc, #424]	@ (8009378 <USB_DeactivateEndpoint+0x2c4>)
 80091d0:	430a      	orrs	r2, r1
 80091d2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	18d3      	adds	r3, r2, r3
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	2240      	movs	r2, #64	@ 0x40
 80091e6:	4013      	ands	r3, r2
 80091e8:	d011      	beq.n	800920e <USB_DeactivateEndpoint+0x15a>
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	18d3      	adds	r3, r2, r3
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a5c      	ldr	r2, [pc, #368]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	18d3      	adds	r3, r2, r3
 8009206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009208:	4958      	ldr	r1, [pc, #352]	@ (800936c <USB_DeactivateEndpoint+0x2b8>)
 800920a:	430a      	orrs	r2, r1
 800920c:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	18d3      	adds	r3, r2, r3
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a53      	ldr	r2, [pc, #332]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 800921c:	4013      	ands	r3, r2
 800921e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	18d3      	adds	r3, r2, r3
 800922a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800922c:	494f      	ldr	r1, [pc, #316]	@ (800936c <USB_DeactivateEndpoint+0x2b8>)
 800922e:	430a      	orrs	r2, r1
 8009230:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	18d3      	adds	r3, r2, r3
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a4f      	ldr	r2, [pc, #316]	@ (800937c <USB_DeactivateEndpoint+0x2c8>)
 8009240:	4013      	ands	r3, r2
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	18d3      	adds	r3, r2, r3
 800924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009250:	4948      	ldr	r1, [pc, #288]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 8009252:	430a      	orrs	r2, r1
 8009254:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	18d3      	adds	r3, r2, r3
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a43      	ldr	r2, [pc, #268]	@ (8009370 <USB_DeactivateEndpoint+0x2bc>)
 8009264:	4013      	ands	r3, r2
 8009266:	623b      	str	r3, [r7, #32]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	18d3      	adds	r3, r2, r3
 8009272:	6a3a      	ldr	r2, [r7, #32]
 8009274:	493f      	ldr	r1, [pc, #252]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 8009276:	430a      	orrs	r2, r1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e070      	b.n	800935e <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	18d3      	adds	r3, r2, r3
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	657b      	str	r3, [r7, #84]	@ 0x54
 800928a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800928c:	2380      	movs	r3, #128	@ 0x80
 800928e:	01db      	lsls	r3, r3, #7
 8009290:	4013      	ands	r3, r2
 8009292:	d011      	beq.n	80092b8 <USB_DeactivateEndpoint+0x204>
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	18d3      	adds	r3, r2, r3
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a31      	ldr	r2, [pc, #196]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	18d3      	adds	r3, r2, r3
 80092b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092b2:	4931      	ldr	r1, [pc, #196]	@ (8009378 <USB_DeactivateEndpoint+0x2c4>)
 80092b4:	430a      	orrs	r2, r1
 80092b6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	18d3      	adds	r3, r2, r3
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092c8:	2240      	movs	r2, #64	@ 0x40
 80092ca:	4013      	ands	r3, r2
 80092cc:	d011      	beq.n	80092f2 <USB_DeactivateEndpoint+0x23e>
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	18d3      	adds	r3, r2, r3
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a23      	ldr	r2, [pc, #140]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 80092dc:	4013      	ands	r3, r2
 80092de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	18d3      	adds	r3, r2, r3
 80092ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092ec:	491f      	ldr	r1, [pc, #124]	@ (800936c <USB_DeactivateEndpoint+0x2b8>)
 80092ee:	430a      	orrs	r2, r1
 80092f0:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	18d3      	adds	r3, r2, r3
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009368 <USB_DeactivateEndpoint+0x2b4>)
 8009300:	4013      	ands	r3, r2
 8009302:	647b      	str	r3, [r7, #68]	@ 0x44
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	18d3      	adds	r3, r2, r3
 800930e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009310:	4919      	ldr	r1, [pc, #100]	@ (8009378 <USB_DeactivateEndpoint+0x2c4>)
 8009312:	430a      	orrs	r2, r1
 8009314:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	18d3      	adds	r3, r2, r3
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a13      	ldr	r2, [pc, #76]	@ (8009370 <USB_DeactivateEndpoint+0x2bc>)
 8009324:	4013      	ands	r3, r2
 8009326:	643b      	str	r3, [r7, #64]	@ 0x40
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	18d3      	adds	r3, r2, r3
 8009332:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009334:	490f      	ldr	r1, [pc, #60]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 8009336:	430a      	orrs	r2, r1
 8009338:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	18d3      	adds	r3, r2, r3
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a0d      	ldr	r2, [pc, #52]	@ (800937c <USB_DeactivateEndpoint+0x2c8>)
 8009348:	4013      	ands	r3, r2
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	18d3      	adds	r3, r2, r3
 8009356:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009358:	4906      	ldr	r1, [pc, #24]	@ (8009374 <USB_DeactivateEndpoint+0x2c0>)
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	b016      	add	sp, #88	@ 0x58
 8009366:	bd80      	pop	{r7, pc}
 8009368:	07ff8f8f 	.word	0x07ff8f8f
 800936c:	000080c0 	.word	0x000080c0
 8009370:	07ff8fbf 	.word	0x07ff8fbf
 8009374:	00008080 	.word	0x00008080
 8009378:	0000c080 	.word	0x0000c080
 800937c:	07ffbf8f 	.word	0x07ffbf8f

08009380 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b097      	sub	sp, #92	@ 0x5c
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d001      	beq.n	8009396 <USB_EPStartXfer+0x16>
 8009392:	f000 fcbf 	bl	8009d14 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d903      	bls.n	80093aa <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80093a8:	e002      	b.n	80093b0 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	7b1b      	ldrb	r3, [r3, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d12b      	bne.n	8009410 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	6959      	ldr	r1, [r3, #20]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	88da      	ldrh	r2, [r3, #6]
 80093c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f8f5 	bl	800a5b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4ace      	ldr	r2, [pc, #824]	@ (800970c <USB_EPStartXfer+0x38c>)
 80093d2:	4694      	mov	ip, r2
 80093d4:	4463      	add	r3, ip
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	49cb      	ldr	r1, [pc, #812]	@ (800970c <USB_EPStartXfer+0x38c>)
 80093e0:	468c      	mov	ip, r1
 80093e2:	4463      	add	r3, ip
 80093e4:	0412      	lsls	r2, r2, #16
 80093e6:	0c12      	lsrs	r2, r2, #16
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4ac6      	ldr	r2, [pc, #792]	@ (800970c <USB_EPStartXfer+0x38c>)
 80093f2:	4694      	mov	ip, r2
 80093f4:	4463      	add	r3, ip
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093fa:	041a      	lsls	r2, r3, #16
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	48c2      	ldr	r0, [pc, #776]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009404:	4684      	mov	ip, r0
 8009406:	4463      	add	r3, ip
 8009408:	430a      	orrs	r2, r1
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f000 fc67 	bl	8009cde <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	78db      	ldrb	r3, [r3, #3]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d000      	beq.n	800941a <USB_EPStartXfer+0x9a>
 8009418:	e31a      	b.n	8009a50 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	6a1a      	ldr	r2, [r3, #32]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	429a      	cmp	r2, r3
 8009424:	d800      	bhi.n	8009428 <USB_EPStartXfer+0xa8>
 8009426:	e2c7      	b.n	80099b8 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	18d3      	adds	r3, r2, r3
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4ab6      	ldr	r2, [pc, #728]	@ (8009710 <USB_EPStartXfer+0x390>)
 8009436:	4013      	ands	r3, r2
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	49b3      	ldr	r1, [pc, #716]	@ (8009714 <USB_EPStartXfer+0x394>)
 8009448:	430a      	orrs	r2, r1
 800944a:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	6a1a      	ldr	r2, [r3, #32]
 8009450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	18d3      	adds	r3, r2, r3
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2240      	movs	r2, #64	@ 0x40
 8009466:	4013      	ands	r3, r2
 8009468:	d100      	bne.n	800946c <USB_EPStartXfer+0xec>
 800946a:	e155      	b.n	8009718 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d162      	bne.n	800953a <USB_EPStartXfer+0x1ba>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4aa4      	ldr	r2, [pc, #656]	@ (800970c <USB_EPStartXfer+0x38c>)
 800947c:	4694      	mov	ip, r2
 800947e:	4463      	add	r3, ip
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	49a0      	ldr	r1, [pc, #640]	@ (800970c <USB_EPStartXfer+0x38c>)
 800948a:	468c      	mov	ip, r1
 800948c:	4463      	add	r3, ip
 800948e:	0192      	lsls	r2, r2, #6
 8009490:	0992      	lsrs	r2, r2, #6
 8009492:	605a      	str	r2, [r3, #4]
 8009494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009496:	2b3e      	cmp	r3, #62	@ 0x3e
 8009498:	d91e      	bls.n	80094d8 <USB_EPStartXfer+0x158>
 800949a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800949c:	095b      	lsrs	r3, r3, #5
 800949e:	653b      	str	r3, [r7, #80]	@ 0x50
 80094a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a2:	221f      	movs	r2, #31
 80094a4:	4013      	ands	r3, r2
 80094a6:	d102      	bne.n	80094ae <USB_EPStartXfer+0x12e>
 80094a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094aa:	3b01      	subs	r3, #1
 80094ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	4a95      	ldr	r2, [pc, #596]	@ (800970c <USB_EPStartXfer+0x38c>)
 80094b6:	4694      	mov	ip, r2
 80094b8:	4463      	add	r3, ip
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094be:	069b      	lsls	r3, r3, #26
 80094c0:	431a      	orrs	r2, r3
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	4990      	ldr	r1, [pc, #576]	@ (800970c <USB_EPStartXfer+0x38c>)
 80094ca:	468c      	mov	ip, r1
 80094cc:	4463      	add	r3, ip
 80094ce:	2180      	movs	r1, #128	@ 0x80
 80094d0:	0609      	lsls	r1, r1, #24
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]
 80094d6:	e055      	b.n	8009584 <USB_EPStartXfer+0x204>
 80094d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d111      	bne.n	8009502 <USB_EPStartXfer+0x182>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	4a89      	ldr	r2, [pc, #548]	@ (800970c <USB_EPStartXfer+0x38c>)
 80094e6:	4694      	mov	ip, r2
 80094e8:	4463      	add	r3, ip
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	4986      	ldr	r1, [pc, #536]	@ (800970c <USB_EPStartXfer+0x38c>)
 80094f4:	468c      	mov	ip, r1
 80094f6:	4463      	add	r3, ip
 80094f8:	2180      	movs	r1, #128	@ 0x80
 80094fa:	0609      	lsls	r1, r1, #24
 80094fc:	430a      	orrs	r2, r1
 80094fe:	605a      	str	r2, [r3, #4]
 8009500:	e040      	b.n	8009584 <USB_EPStartXfer+0x204>
 8009502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009504:	085b      	lsrs	r3, r3, #1
 8009506:	653b      	str	r3, [r7, #80]	@ 0x50
 8009508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800950a:	2201      	movs	r2, #1
 800950c:	4013      	ands	r3, r2
 800950e:	d002      	beq.n	8009516 <USB_EPStartXfer+0x196>
 8009510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009512:	3301      	adds	r3, #1
 8009514:	653b      	str	r3, [r7, #80]	@ 0x50
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4a7b      	ldr	r2, [pc, #492]	@ (800970c <USB_EPStartXfer+0x38c>)
 800951e:	4694      	mov	ip, r2
 8009520:	4463      	add	r3, ip
 8009522:	6859      	ldr	r1, [r3, #4]
 8009524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009526:	069a      	lsls	r2, r3, #26
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	4877      	ldr	r0, [pc, #476]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009530:	4684      	mov	ip, r0
 8009532:	4463      	add	r3, ip
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
 8009538:	e024      	b.n	8009584 <USB_EPStartXfer+0x204>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d120      	bne.n	8009584 <USB_EPStartXfer+0x204>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	00db      	lsls	r3, r3, #3
 8009548:	4a70      	ldr	r2, [pc, #448]	@ (800970c <USB_EPStartXfer+0x38c>)
 800954a:	4694      	mov	ip, r2
 800954c:	4463      	add	r3, ip
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	496d      	ldr	r1, [pc, #436]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009558:	468c      	mov	ip, r1
 800955a:	4463      	add	r3, ip
 800955c:	0412      	lsls	r2, r2, #16
 800955e:	0c12      	lsrs	r2, r2, #16
 8009560:	605a      	str	r2, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4a68      	ldr	r2, [pc, #416]	@ (800970c <USB_EPStartXfer+0x38c>)
 800956a:	4694      	mov	ip, r2
 800956c:	4463      	add	r3, ip
 800956e:	6859      	ldr	r1, [r3, #4]
 8009570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009572:	041a      	lsls	r2, r3, #16
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4864      	ldr	r0, [pc, #400]	@ (800970c <USB_EPStartXfer+0x38c>)
 800957c:	4684      	mov	ip, r0
 800957e:	4463      	add	r3, ip
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8009584:	201a      	movs	r0, #26
 8009586:	183b      	adds	r3, r7, r0
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	8952      	ldrh	r2, [r2, #10]
 800958c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6959      	ldr	r1, [r3, #20]
 8009592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009594:	b29c      	uxth	r4, r3
 8009596:	183b      	adds	r3, r7, r0
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	0023      	movs	r3, r4
 800959e:	f001 f809 	bl	800a5b4 <USB_WritePMA>
            ep->xfer_buff += len;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695a      	ldr	r2, [r3, #20]
 80095a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a8:	18d2      	adds	r2, r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	6a1a      	ldr	r2, [r3, #32]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d906      	bls.n	80095c8 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c0:	1ad2      	subs	r2, r2, r3
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	621a      	str	r2, [r3, #32]
 80095c6:	e005      	b.n	80095d4 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d162      	bne.n	80096a2 <USB_EPStartXfer+0x322>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4a4a      	ldr	r2, [pc, #296]	@ (800970c <USB_EPStartXfer+0x38c>)
 80095e4:	4694      	mov	ip, r2
 80095e6:	4463      	add	r3, ip
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	4946      	ldr	r1, [pc, #280]	@ (800970c <USB_EPStartXfer+0x38c>)
 80095f2:	468c      	mov	ip, r1
 80095f4:	4463      	add	r3, ip
 80095f6:	0192      	lsls	r2, r2, #6
 80095f8:	0992      	lsrs	r2, r2, #6
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8009600:	d91e      	bls.n	8009640 <USB_EPStartXfer+0x2c0>
 8009602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009604:	095b      	lsrs	r3, r3, #5
 8009606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800960a:	221f      	movs	r2, #31
 800960c:	4013      	ands	r3, r2
 800960e:	d102      	bne.n	8009616 <USB_EPStartXfer+0x296>
 8009610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009612:	3b01      	subs	r3, #1
 8009614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4a3b      	ldr	r2, [pc, #236]	@ (800970c <USB_EPStartXfer+0x38c>)
 800961e:	4694      	mov	ip, r2
 8009620:	4463      	add	r3, ip
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009626:	069b      	lsls	r3, r3, #26
 8009628:	431a      	orrs	r2, r3
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4936      	ldr	r1, [pc, #216]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009632:	468c      	mov	ip, r1
 8009634:	4463      	add	r3, ip
 8009636:	2180      	movs	r1, #128	@ 0x80
 8009638:	0609      	lsls	r1, r1, #24
 800963a:	430a      	orrs	r2, r1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e055      	b.n	80096ec <USB_EPStartXfer+0x36c>
 8009640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009642:	2b00      	cmp	r3, #0
 8009644:	d111      	bne.n	800966a <USB_EPStartXfer+0x2ea>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4a2f      	ldr	r2, [pc, #188]	@ (800970c <USB_EPStartXfer+0x38c>)
 800964e:	4694      	mov	ip, r2
 8009650:	4463      	add	r3, ip
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	492c      	ldr	r1, [pc, #176]	@ (800970c <USB_EPStartXfer+0x38c>)
 800965c:	468c      	mov	ip, r1
 800965e:	4463      	add	r3, ip
 8009660:	2180      	movs	r1, #128	@ 0x80
 8009662:	0609      	lsls	r1, r1, #24
 8009664:	430a      	orrs	r2, r1
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	e040      	b.n	80096ec <USB_EPStartXfer+0x36c>
 800966a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800966c:	085b      	lsrs	r3, r3, #1
 800966e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009672:	2201      	movs	r2, #1
 8009674:	4013      	ands	r3, r2
 8009676:	d002      	beq.n	800967e <USB_EPStartXfer+0x2fe>
 8009678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967a:	3301      	adds	r3, #1
 800967c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00db      	lsls	r3, r3, #3
 8009684:	4a21      	ldr	r2, [pc, #132]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009686:	4694      	mov	ip, r2
 8009688:	4463      	add	r3, ip
 800968a:	6819      	ldr	r1, [r3, #0]
 800968c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800968e:	069a      	lsls	r2, r3, #26
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	481d      	ldr	r0, [pc, #116]	@ (800970c <USB_EPStartXfer+0x38c>)
 8009698:	4684      	mov	ip, r0
 800969a:	4463      	add	r3, ip
 800969c:	430a      	orrs	r2, r1
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	e024      	b.n	80096ec <USB_EPStartXfer+0x36c>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d120      	bne.n	80096ec <USB_EPStartXfer+0x36c>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	00db      	lsls	r3, r3, #3
 80096b0:	4a16      	ldr	r2, [pc, #88]	@ (800970c <USB_EPStartXfer+0x38c>)
 80096b2:	4694      	mov	ip, r2
 80096b4:	4463      	add	r3, ip
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4913      	ldr	r1, [pc, #76]	@ (800970c <USB_EPStartXfer+0x38c>)
 80096c0:	468c      	mov	ip, r1
 80096c2:	4463      	add	r3, ip
 80096c4:	0412      	lsls	r2, r2, #16
 80096c6:	0c12      	lsrs	r2, r2, #16
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4a0e      	ldr	r2, [pc, #56]	@ (800970c <USB_EPStartXfer+0x38c>)
 80096d2:	4694      	mov	ip, r2
 80096d4:	4463      	add	r3, ip
 80096d6:	6819      	ldr	r1, [r3, #0]
 80096d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096da:	041a      	lsls	r2, r3, #16
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	480a      	ldr	r0, [pc, #40]	@ (800970c <USB_EPStartXfer+0x38c>)
 80096e4:	4684      	mov	ip, r0
 80096e6:	4463      	add	r3, ip
 80096e8:	430a      	orrs	r2, r1
 80096ea:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096ec:	201a      	movs	r0, #26
 80096ee:	183b      	adds	r3, r7, r0
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	8912      	ldrh	r2, [r2, #8]
 80096f4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	6959      	ldr	r1, [r3, #20]
 80096fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096fc:	b29c      	uxth	r4, r3
 80096fe:	183b      	adds	r3, r7, r0
 8009700:	881a      	ldrh	r2, [r3, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	0023      	movs	r3, r4
 8009706:	f000 ff55 	bl	800a5b4 <USB_WritePMA>
 800970a:	e2e8      	b.n	8009cde <USB_EPStartXfer+0x95e>
 800970c:	40009800 	.word	0x40009800
 8009710:	07ff8f8f 	.word	0x07ff8f8f
 8009714:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d162      	bne.n	80097e6 <USB_EPStartXfer+0x466>
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	4ac7      	ldr	r2, [pc, #796]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009728:	4694      	mov	ip, r2
 800972a:	4463      	add	r3, ip
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	49c3      	ldr	r1, [pc, #780]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009736:	468c      	mov	ip, r1
 8009738:	4463      	add	r3, ip
 800973a:	0192      	lsls	r2, r2, #6
 800973c:	0992      	lsrs	r2, r2, #6
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009742:	2b3e      	cmp	r3, #62	@ 0x3e
 8009744:	d91e      	bls.n	8009784 <USB_EPStartXfer+0x404>
 8009746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009748:	095b      	lsrs	r3, r3, #5
 800974a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800974c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800974e:	221f      	movs	r2, #31
 8009750:	4013      	ands	r3, r2
 8009752:	d102      	bne.n	800975a <USB_EPStartXfer+0x3da>
 8009754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009756:	3b01      	subs	r3, #1
 8009758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	4ab8      	ldr	r2, [pc, #736]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009762:	4694      	mov	ip, r2
 8009764:	4463      	add	r3, ip
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800976a:	069b      	lsls	r3, r3, #26
 800976c:	431a      	orrs	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	49b3      	ldr	r1, [pc, #716]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009776:	468c      	mov	ip, r1
 8009778:	4463      	add	r3, ip
 800977a:	2180      	movs	r1, #128	@ 0x80
 800977c:	0609      	lsls	r1, r1, #24
 800977e:	430a      	orrs	r2, r1
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e055      	b.n	8009830 <USB_EPStartXfer+0x4b0>
 8009784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009786:	2b00      	cmp	r3, #0
 8009788:	d111      	bne.n	80097ae <USB_EPStartXfer+0x42e>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	4aac      	ldr	r2, [pc, #688]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009792:	4694      	mov	ip, r2
 8009794:	4463      	add	r3, ip
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	49a9      	ldr	r1, [pc, #676]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80097a0:	468c      	mov	ip, r1
 80097a2:	4463      	add	r3, ip
 80097a4:	2180      	movs	r1, #128	@ 0x80
 80097a6:	0609      	lsls	r1, r1, #24
 80097a8:	430a      	orrs	r2, r1
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e040      	b.n	8009830 <USB_EPStartXfer+0x4b0>
 80097ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097b0:	085b      	lsrs	r3, r3, #1
 80097b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097b6:	2201      	movs	r2, #1
 80097b8:	4013      	ands	r3, r2
 80097ba:	d002      	beq.n	80097c2 <USB_EPStartXfer+0x442>
 80097bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097be:	3301      	adds	r3, #1
 80097c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4a9e      	ldr	r2, [pc, #632]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80097ca:	4694      	mov	ip, r2
 80097cc:	4463      	add	r3, ip
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d2:	069a      	lsls	r2, r3, #26
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	489a      	ldr	r0, [pc, #616]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80097dc:	4684      	mov	ip, r0
 80097de:	4463      	add	r3, ip
 80097e0:	430a      	orrs	r2, r1
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	e024      	b.n	8009830 <USB_EPStartXfer+0x4b0>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d120      	bne.n	8009830 <USB_EPStartXfer+0x4b0>
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	4a93      	ldr	r2, [pc, #588]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80097f6:	4694      	mov	ip, r2
 80097f8:	4463      	add	r3, ip
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	4990      	ldr	r1, [pc, #576]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009804:	468c      	mov	ip, r1
 8009806:	4463      	add	r3, ip
 8009808:	0412      	lsls	r2, r2, #16
 800980a:	0c12      	lsrs	r2, r2, #16
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	4a8b      	ldr	r2, [pc, #556]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009816:	4694      	mov	ip, r2
 8009818:	4463      	add	r3, ip
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800981e:	041a      	lsls	r2, r3, #16
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	4887      	ldr	r0, [pc, #540]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009828:	4684      	mov	ip, r0
 800982a:	4463      	add	r3, ip
 800982c:	430a      	orrs	r2, r1
 800982e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009830:	201a      	movs	r0, #26
 8009832:	183b      	adds	r3, r7, r0
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	8912      	ldrh	r2, [r2, #8]
 8009838:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	6959      	ldr	r1, [r3, #20]
 800983e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009840:	b29c      	uxth	r4, r3
 8009842:	183b      	adds	r3, r7, r0
 8009844:	881a      	ldrh	r2, [r3, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	0023      	movs	r3, r4
 800984a:	f000 feb3 	bl	800a5b4 <USB_WritePMA>
            ep->xfer_buff += len;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695a      	ldr	r2, [r3, #20]
 8009852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009854:	18d2      	adds	r2, r2, r3
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6a1a      	ldr	r2, [r3, #32]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	429a      	cmp	r2, r3
 8009864:	d906      	bls.n	8009874 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	621a      	str	r2, [r3, #32]
 8009872:	e005      	b.n	8009880 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d162      	bne.n	800994e <USB_EPStartXfer+0x5ce>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	4a6d      	ldr	r2, [pc, #436]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009890:	4694      	mov	ip, r2
 8009892:	4463      	add	r3, ip
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	4969      	ldr	r1, [pc, #420]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 800989e:	468c      	mov	ip, r1
 80098a0:	4463      	add	r3, ip
 80098a2:	0192      	lsls	r2, r2, #6
 80098a4:	0992      	lsrs	r2, r2, #6
 80098a6:	605a      	str	r2, [r3, #4]
 80098a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80098ac:	d91e      	bls.n	80098ec <USB_EPStartXfer+0x56c>
 80098ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80098b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098b6:	221f      	movs	r2, #31
 80098b8:	4013      	ands	r3, r2
 80098ba:	d102      	bne.n	80098c2 <USB_EPStartXfer+0x542>
 80098bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098be:	3b01      	subs	r3, #1
 80098c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	4a5e      	ldr	r2, [pc, #376]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80098ca:	4694      	mov	ip, r2
 80098cc:	4463      	add	r3, ip
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d2:	069b      	lsls	r3, r3, #26
 80098d4:	431a      	orrs	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	4959      	ldr	r1, [pc, #356]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80098de:	468c      	mov	ip, r1
 80098e0:	4463      	add	r3, ip
 80098e2:	2180      	movs	r1, #128	@ 0x80
 80098e4:	0609      	lsls	r1, r1, #24
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	e055      	b.n	8009998 <USB_EPStartXfer+0x618>
 80098ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d111      	bne.n	8009916 <USB_EPStartXfer+0x596>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	4a52      	ldr	r2, [pc, #328]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80098fa:	4694      	mov	ip, r2
 80098fc:	4463      	add	r3, ip
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	494f      	ldr	r1, [pc, #316]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009908:	468c      	mov	ip, r1
 800990a:	4463      	add	r3, ip
 800990c:	2180      	movs	r1, #128	@ 0x80
 800990e:	0609      	lsls	r1, r1, #24
 8009910:	430a      	orrs	r2, r1
 8009912:	605a      	str	r2, [r3, #4]
 8009914:	e040      	b.n	8009998 <USB_EPStartXfer+0x618>
 8009916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009918:	085b      	lsrs	r3, r3, #1
 800991a:	647b      	str	r3, [r7, #68]	@ 0x44
 800991c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800991e:	2201      	movs	r2, #1
 8009920:	4013      	ands	r3, r2
 8009922:	d002      	beq.n	800992a <USB_EPStartXfer+0x5aa>
 8009924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009926:	3301      	adds	r3, #1
 8009928:	647b      	str	r3, [r7, #68]	@ 0x44
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	4a44      	ldr	r2, [pc, #272]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009932:	4694      	mov	ip, r2
 8009934:	4463      	add	r3, ip
 8009936:	6859      	ldr	r1, [r3, #4]
 8009938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800993a:	069a      	lsls	r2, r3, #26
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	4840      	ldr	r0, [pc, #256]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009944:	4684      	mov	ip, r0
 8009946:	4463      	add	r3, ip
 8009948:	430a      	orrs	r2, r1
 800994a:	605a      	str	r2, [r3, #4]
 800994c:	e024      	b.n	8009998 <USB_EPStartXfer+0x618>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d120      	bne.n	8009998 <USB_EPStartXfer+0x618>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	4a39      	ldr	r2, [pc, #228]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 800995e:	4694      	mov	ip, r2
 8009960:	4463      	add	r3, ip
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	4936      	ldr	r1, [pc, #216]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 800996c:	468c      	mov	ip, r1
 800996e:	4463      	add	r3, ip
 8009970:	0412      	lsls	r2, r2, #16
 8009972:	0c12      	lsrs	r2, r2, #16
 8009974:	605a      	str	r2, [r3, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	4a31      	ldr	r2, [pc, #196]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 800997e:	4694      	mov	ip, r2
 8009980:	4463      	add	r3, ip
 8009982:	6859      	ldr	r1, [r3, #4]
 8009984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009986:	041a      	lsls	r2, r3, #16
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	482d      	ldr	r0, [pc, #180]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009990:	4684      	mov	ip, r0
 8009992:	4463      	add	r3, ip
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8009998:	201a      	movs	r0, #26
 800999a:	183b      	adds	r3, r7, r0
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	8952      	ldrh	r2, [r2, #10]
 80099a0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	6959      	ldr	r1, [r3, #20]
 80099a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a8:	b29c      	uxth	r4, r3
 80099aa:	183b      	adds	r3, r7, r0
 80099ac:	881a      	ldrh	r2, [r3, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	0023      	movs	r3, r4
 80099b2:	f000 fdff 	bl	800a5b4 <USB_WritePMA>
 80099b6:	e192      	b.n	8009cde <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	18d3      	adds	r3, r2, r3
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009a48 <USB_EPStartXfer+0x6c8>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	18d3      	adds	r3, r2, r3
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	491b      	ldr	r1, [pc, #108]	@ (8009a4c <USB_EPStartXfer+0x6cc>)
 80099de:	430a      	orrs	r2, r1
 80099e0:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	4a16      	ldr	r2, [pc, #88]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80099ea:	4694      	mov	ip, r2
 80099ec:	4463      	add	r3, ip
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	00db      	lsls	r3, r3, #3
 80099f6:	4913      	ldr	r1, [pc, #76]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 80099f8:	468c      	mov	ip, r1
 80099fa:	4463      	add	r3, ip
 80099fc:	0412      	lsls	r2, r2, #16
 80099fe:	0c12      	lsrs	r2, r2, #16
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	4a0e      	ldr	r2, [pc, #56]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009a0a:	4694      	mov	ip, r2
 8009a0c:	4463      	add	r3, ip
 8009a0e:	6819      	ldr	r1, [r3, #0]
 8009a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a12:	041a      	lsls	r2, r3, #16
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	480a      	ldr	r0, [pc, #40]	@ (8009a44 <USB_EPStartXfer+0x6c4>)
 8009a1c:	4684      	mov	ip, r0
 8009a1e:	4463      	add	r3, ip
 8009a20:	430a      	orrs	r2, r1
 8009a22:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a24:	201a      	movs	r0, #26
 8009a26:	183b      	adds	r3, r7, r0
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	8912      	ldrh	r2, [r2, #8]
 8009a2c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	6959      	ldr	r1, [r3, #20]
 8009a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a34:	b29c      	uxth	r4, r3
 8009a36:	183b      	adds	r3, r7, r0
 8009a38:	881a      	ldrh	r2, [r3, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	0023      	movs	r3, r4
 8009a3e:	f000 fdb9 	bl	800a5b4 <USB_WritePMA>
 8009a42:	e14c      	b.n	8009cde <USB_EPStartXfer+0x95e>
 8009a44:	40009800 	.word	0x40009800
 8009a48:	07ff8e8f 	.word	0x07ff8e8f
 8009a4c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	18d3      	adds	r3, r2, r3
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2240      	movs	r2, #64	@ 0x40
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	d100      	bne.n	8009a70 <USB_EPStartXfer+0x6f0>
 8009a6e:	e09b      	b.n	8009ba8 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d162      	bne.n	8009b3e <USB_EPStartXfer+0x7be>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	4ad6      	ldr	r2, [pc, #856]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009a80:	4694      	mov	ip, r2
 8009a82:	4463      	add	r3, ip
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	49d2      	ldr	r1, [pc, #840]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009a8e:	468c      	mov	ip, r1
 8009a90:	4463      	add	r3, ip
 8009a92:	0192      	lsls	r2, r2, #6
 8009a94:	0992      	lsrs	r2, r2, #6
 8009a96:	605a      	str	r2, [r3, #4]
 8009a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a9c:	d91e      	bls.n	8009adc <USB_EPStartXfer+0x75c>
 8009a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa6:	221f      	movs	r2, #31
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d102      	bne.n	8009ab2 <USB_EPStartXfer+0x732>
 8009aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	4ac7      	ldr	r2, [pc, #796]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009aba:	4694      	mov	ip, r2
 8009abc:	4463      	add	r3, ip
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ac2:	069b      	lsls	r3, r3, #26
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	49c2      	ldr	r1, [pc, #776]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009ace:	468c      	mov	ip, r1
 8009ad0:	4463      	add	r3, ip
 8009ad2:	2180      	movs	r1, #128	@ 0x80
 8009ad4:	0609      	lsls	r1, r1, #24
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
 8009ada:	e055      	b.n	8009b88 <USB_EPStartXfer+0x808>
 8009adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d111      	bne.n	8009b06 <USB_EPStartXfer+0x786>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	4abb      	ldr	r2, [pc, #748]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009aea:	4694      	mov	ip, r2
 8009aec:	4463      	add	r3, ip
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	49b8      	ldr	r1, [pc, #736]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009af8:	468c      	mov	ip, r1
 8009afa:	4463      	add	r3, ip
 8009afc:	2180      	movs	r1, #128	@ 0x80
 8009afe:	0609      	lsls	r1, r1, #24
 8009b00:	430a      	orrs	r2, r1
 8009b02:	605a      	str	r2, [r3, #4]
 8009b04:	e040      	b.n	8009b88 <USB_EPStartXfer+0x808>
 8009b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b08:	085b      	lsrs	r3, r3, #1
 8009b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4013      	ands	r3, r2
 8009b12:	d002      	beq.n	8009b1a <USB_EPStartXfer+0x79a>
 8009b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b16:	3301      	adds	r3, #1
 8009b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	4aad      	ldr	r2, [pc, #692]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b22:	4694      	mov	ip, r2
 8009b24:	4463      	add	r3, ip
 8009b26:	6859      	ldr	r1, [r3, #4]
 8009b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2a:	069a      	lsls	r2, r3, #26
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	48a9      	ldr	r0, [pc, #676]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b34:	4684      	mov	ip, r0
 8009b36:	4463      	add	r3, ip
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
 8009b3c:	e024      	b.n	8009b88 <USB_EPStartXfer+0x808>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	785b      	ldrb	r3, [r3, #1]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d120      	bne.n	8009b88 <USB_EPStartXfer+0x808>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	4aa2      	ldr	r2, [pc, #648]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b4e:	4694      	mov	ip, r2
 8009b50:	4463      	add	r3, ip
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	00db      	lsls	r3, r3, #3
 8009b5a:	499f      	ldr	r1, [pc, #636]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b5c:	468c      	mov	ip, r1
 8009b5e:	4463      	add	r3, ip
 8009b60:	0412      	lsls	r2, r2, #16
 8009b62:	0c12      	lsrs	r2, r2, #16
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	4a9a      	ldr	r2, [pc, #616]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b6e:	4694      	mov	ip, r2
 8009b70:	4463      	add	r3, ip
 8009b72:	6859      	ldr	r1, [r3, #4]
 8009b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b76:	041a      	lsls	r2, r3, #16
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	4896      	ldr	r0, [pc, #600]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009b80:	4684      	mov	ip, r0
 8009b82:	4463      	add	r3, ip
 8009b84:	430a      	orrs	r2, r1
 8009b86:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8009b88:	201a      	movs	r0, #26
 8009b8a:	183b      	adds	r3, r7, r0
 8009b8c:	683a      	ldr	r2, [r7, #0]
 8009b8e:	8952      	ldrh	r2, [r2, #10]
 8009b90:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6959      	ldr	r1, [r3, #20]
 8009b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b98:	b29c      	uxth	r4, r3
 8009b9a:	183b      	adds	r3, r7, r0
 8009b9c:	881a      	ldrh	r2, [r3, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	0023      	movs	r3, r4
 8009ba2:	f000 fd07 	bl	800a5b4 <USB_WritePMA>
 8009ba6:	e09a      	b.n	8009cde <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d162      	bne.n	8009c76 <USB_EPStartXfer+0x8f6>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	4a88      	ldr	r2, [pc, #544]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009bb8:	4694      	mov	ip, r2
 8009bba:	4463      	add	r3, ip
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	4984      	ldr	r1, [pc, #528]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009bc6:	468c      	mov	ip, r1
 8009bc8:	4463      	add	r3, ip
 8009bca:	0192      	lsls	r2, r2, #6
 8009bcc:	0992      	lsrs	r2, r2, #6
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bd4:	d91e      	bls.n	8009c14 <USB_EPStartXfer+0x894>
 8009bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bde:	221f      	movs	r2, #31
 8009be0:	4013      	ands	r3, r2
 8009be2:	d102      	bne.n	8009bea <USB_EPStartXfer+0x86a>
 8009be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be6:	3b01      	subs	r3, #1
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	4a79      	ldr	r2, [pc, #484]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009bf2:	4694      	mov	ip, r2
 8009bf4:	4463      	add	r3, ip
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bfa:	069b      	lsls	r3, r3, #26
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	4974      	ldr	r1, [pc, #464]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c06:	468c      	mov	ip, r1
 8009c08:	4463      	add	r3, ip
 8009c0a:	2180      	movs	r1, #128	@ 0x80
 8009c0c:	0609      	lsls	r1, r1, #24
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e055      	b.n	8009cc0 <USB_EPStartXfer+0x940>
 8009c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d111      	bne.n	8009c3e <USB_EPStartXfer+0x8be>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4a6d      	ldr	r2, [pc, #436]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c22:	4694      	mov	ip, r2
 8009c24:	4463      	add	r3, ip
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	496a      	ldr	r1, [pc, #424]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c30:	468c      	mov	ip, r1
 8009c32:	4463      	add	r3, ip
 8009c34:	2180      	movs	r1, #128	@ 0x80
 8009c36:	0609      	lsls	r1, r1, #24
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e040      	b.n	8009cc0 <USB_EPStartXfer+0x940>
 8009c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c46:	2201      	movs	r2, #1
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d002      	beq.n	8009c52 <USB_EPStartXfer+0x8d2>
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4e:	3301      	adds	r3, #1
 8009c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	4a5f      	ldr	r2, [pc, #380]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c5a:	4694      	mov	ip, r2
 8009c5c:	4463      	add	r3, ip
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c62:	069a      	lsls	r2, r3, #26
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	485b      	ldr	r0, [pc, #364]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c6c:	4684      	mov	ip, r0
 8009c6e:	4463      	add	r3, ip
 8009c70:	430a      	orrs	r2, r1
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e024      	b.n	8009cc0 <USB_EPStartXfer+0x940>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d120      	bne.n	8009cc0 <USB_EPStartXfer+0x940>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	00db      	lsls	r3, r3, #3
 8009c84:	4a54      	ldr	r2, [pc, #336]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c86:	4694      	mov	ip, r2
 8009c88:	4463      	add	r3, ip
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4951      	ldr	r1, [pc, #324]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009c94:	468c      	mov	ip, r1
 8009c96:	4463      	add	r3, ip
 8009c98:	0412      	lsls	r2, r2, #16
 8009c9a:	0c12      	lsrs	r2, r2, #16
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009ca6:	4694      	mov	ip, r2
 8009ca8:	4463      	add	r3, ip
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cae:	041a      	lsls	r2, r3, #16
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	4848      	ldr	r0, [pc, #288]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009cb8:	4684      	mov	ip, r0
 8009cba:	4463      	add	r3, ip
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cc0:	201a      	movs	r0, #26
 8009cc2:	183b      	adds	r3, r7, r0
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	8912      	ldrh	r2, [r2, #8]
 8009cc8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	6959      	ldr	r1, [r3, #20]
 8009cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cd0:	b29c      	uxth	r4, r3
 8009cd2:	183b      	adds	r3, r7, r0
 8009cd4:	881a      	ldrh	r2, [r3, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	0023      	movs	r3, r4
 8009cda:	f000 fc6b 	bl	800a5b4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	18d3      	adds	r3, r2, r3
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3c      	ldr	r2, [pc, #240]	@ (8009ddc <USB_EPStartXfer+0xa5c>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2210      	movs	r2, #16
 8009cf4:	4053      	eors	r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	4053      	eors	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	18d3      	adds	r3, r2, r3
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4934      	ldr	r1, [pc, #208]	@ (8009de0 <USB_EPStartXfer+0xa60>)
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	e340      	b.n	800a396 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	7b1b      	ldrb	r3, [r3, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d000      	beq.n	8009d1e <USB_EPStartXfer+0x99e>
 8009d1c:	e07e      	b.n	8009e1c <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d909      	bls.n	8009d3e <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	619a      	str	r2, [r3, #24]
 8009d3c:	e005      	b.n	8009d4a <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	4a21      	ldr	r2, [pc, #132]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009d52:	4694      	mov	ip, r2
 8009d54:	4463      	add	r3, ip
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	00db      	lsls	r3, r3, #3
 8009d5e:	491e      	ldr	r1, [pc, #120]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009d60:	468c      	mov	ip, r1
 8009d62:	4463      	add	r3, ip
 8009d64:	0192      	lsls	r2, r2, #6
 8009d66:	0992      	lsrs	r2, r2, #6
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d6e:	d91e      	bls.n	8009dae <USB_EPStartXfer+0xa2e>
 8009d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d78:	221f      	movs	r2, #31
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	d102      	bne.n	8009d84 <USB_EPStartXfer+0xa04>
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	3b01      	subs	r3, #1
 8009d82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	4a13      	ldr	r2, [pc, #76]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009d8c:	4694      	mov	ip, r2
 8009d8e:	4463      	add	r3, ip
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d94:	069b      	lsls	r3, r3, #26
 8009d96:	431a      	orrs	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	490e      	ldr	r1, [pc, #56]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009da0:	468c      	mov	ip, r1
 8009da2:	4463      	add	r3, ip
 8009da4:	2180      	movs	r1, #128	@ 0x80
 8009da6:	0609      	lsls	r1, r1, #24
 8009da8:	430a      	orrs	r2, r1
 8009daa:	605a      	str	r2, [r3, #4]
 8009dac:	e2d7      	b.n	800a35e <USB_EPStartXfer+0xfde>
 8009dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d117      	bne.n	8009de4 <USB_EPStartXfer+0xa64>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	4a07      	ldr	r2, [pc, #28]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009dbc:	4694      	mov	ip, r2
 8009dbe:	4463      	add	r3, ip
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	4903      	ldr	r1, [pc, #12]	@ (8009dd8 <USB_EPStartXfer+0xa58>)
 8009dca:	468c      	mov	ip, r1
 8009dcc:	4463      	add	r3, ip
 8009dce:	2180      	movs	r1, #128	@ 0x80
 8009dd0:	0609      	lsls	r1, r1, #24
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	e2c2      	b.n	800a35e <USB_EPStartXfer+0xfde>
 8009dd8:	40009800 	.word	0x40009800
 8009ddc:	07ff8fbf 	.word	0x07ff8fbf
 8009de0:	00008080 	.word	0x00008080
 8009de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dec:	2201      	movs	r2, #1
 8009dee:	4013      	ands	r3, r2
 8009df0:	d002      	beq.n	8009df8 <USB_EPStartXfer+0xa78>
 8009df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df4:	3301      	adds	r3, #1
 8009df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	4ac4      	ldr	r2, [pc, #784]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e00:	4694      	mov	ip, r2
 8009e02:	4463      	add	r3, ip
 8009e04:	6859      	ldr	r1, [r3, #4]
 8009e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e08:	069a      	lsls	r2, r3, #26
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	48bf      	ldr	r0, [pc, #764]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e12:	4684      	mov	ip, r0
 8009e14:	4463      	add	r3, ip
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
 8009e1a:	e2a0      	b.n	800a35e <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	78db      	ldrb	r3, [r3, #3]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d000      	beq.n	8009e26 <USB_EPStartXfer+0xaa6>
 8009e24:	e15f      	b.n	800a0e6 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d168      	bne.n	8009f00 <USB_EPStartXfer+0xb80>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	4ab6      	ldr	r2, [pc, #728]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e36:	4694      	mov	ip, r2
 8009e38:	4463      	add	r3, ip
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	49b3      	ldr	r1, [pc, #716]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e44:	468c      	mov	ip, r1
 8009e46:	4463      	add	r3, ip
 8009e48:	0192      	lsls	r2, r2, #6
 8009e4a:	0992      	lsrs	r2, r2, #6
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e54:	d920      	bls.n	8009e98 <USB_EPStartXfer+0xb18>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	095b      	lsrs	r3, r3, #5
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	221f      	movs	r2, #31
 8009e64:	4013      	ands	r3, r2
 8009e66:	d102      	bne.n	8009e6e <USB_EPStartXfer+0xaee>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	4aa6      	ldr	r2, [pc, #664]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e76:	4694      	mov	ip, r2
 8009e78:	4463      	add	r3, ip
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7e:	069b      	lsls	r3, r3, #26
 8009e80:	431a      	orrs	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	49a1      	ldr	r1, [pc, #644]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009e8a:	468c      	mov	ip, r1
 8009e8c:	4463      	add	r3, ip
 8009e8e:	2180      	movs	r1, #128	@ 0x80
 8009e90:	0609      	lsls	r1, r1, #24
 8009e92:	430a      	orrs	r2, r1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e059      	b.n	8009f4c <USB_EPStartXfer+0xbcc>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d111      	bne.n	8009ec4 <USB_EPStartXfer+0xb44>
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	4a9a      	ldr	r2, [pc, #616]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009ea8:	4694      	mov	ip, r2
 8009eaa:	4463      	add	r3, ip
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4996      	ldr	r1, [pc, #600]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009eb6:	468c      	mov	ip, r1
 8009eb8:	4463      	add	r3, ip
 8009eba:	2180      	movs	r1, #128	@ 0x80
 8009ebc:	0609      	lsls	r1, r1, #24
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e043      	b.n	8009f4c <USB_EPStartXfer+0xbcc>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	085b      	lsrs	r3, r3, #1
 8009eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	d002      	beq.n	8009edc <USB_EPStartXfer+0xb5c>
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	3301      	adds	r3, #1
 8009eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	4a8b      	ldr	r2, [pc, #556]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009ee4:	4694      	mov	ip, r2
 8009ee6:	4463      	add	r3, ip
 8009ee8:	6819      	ldr	r1, [r3, #0]
 8009eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eec:	069a      	lsls	r2, r3, #26
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4886      	ldr	r0, [pc, #536]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009ef6:	4684      	mov	ip, r0
 8009ef8:	4463      	add	r3, ip
 8009efa:	430a      	orrs	r2, r1
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	e025      	b.n	8009f4c <USB_EPStartXfer+0xbcc>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d121      	bne.n	8009f4c <USB_EPStartXfer+0xbcc>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	4a80      	ldr	r2, [pc, #512]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f10:	4694      	mov	ip, r2
 8009f12:	4463      	add	r3, ip
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	497c      	ldr	r1, [pc, #496]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f1e:	468c      	mov	ip, r1
 8009f20:	4463      	add	r3, ip
 8009f22:	0412      	lsls	r2, r2, #16
 8009f24:	0c12      	lsrs	r2, r2, #16
 8009f26:	601a      	str	r2, [r3, #0]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4a78      	ldr	r2, [pc, #480]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f30:	4694      	mov	ip, r2
 8009f32:	4463      	add	r3, ip
 8009f34:	6819      	ldr	r1, [r3, #0]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	041a      	lsls	r2, r3, #16
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	4873      	ldr	r0, [pc, #460]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f44:	4684      	mov	ip, r0
 8009f46:	4463      	add	r3, ip
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d168      	bne.n	800a026 <USB_EPStartXfer+0xca6>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	4a6d      	ldr	r2, [pc, #436]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f5c:	4694      	mov	ip, r2
 8009f5e:	4463      	add	r3, ip
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	4969      	ldr	r1, [pc, #420]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f6a:	468c      	mov	ip, r1
 8009f6c:	4463      	add	r3, ip
 8009f6e:	0192      	lsls	r2, r2, #6
 8009f70:	0992      	lsrs	r2, r2, #6
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f7a:	d920      	bls.n	8009fbe <USB_EPStartXfer+0xc3e>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	221f      	movs	r2, #31
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	d102      	bne.n	8009f94 <USB_EPStartXfer+0xc14>
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f90:	3b01      	subs	r3, #1
 8009f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4a5d      	ldr	r2, [pc, #372]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009f9c:	4694      	mov	ip, r2
 8009f9e:	4463      	add	r3, ip
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	069b      	lsls	r3, r3, #26
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	4958      	ldr	r1, [pc, #352]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009fb0:	468c      	mov	ip, r1
 8009fb2:	4463      	add	r3, ip
 8009fb4:	2180      	movs	r1, #128	@ 0x80
 8009fb6:	0609      	lsls	r1, r1, #24
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	605a      	str	r2, [r3, #4]
 8009fbc:	e059      	b.n	800a072 <USB_EPStartXfer+0xcf2>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d111      	bne.n	8009fea <USB_EPStartXfer+0xc6a>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	4a50      	ldr	r2, [pc, #320]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009fce:	4694      	mov	ip, r2
 8009fd0:	4463      	add	r3, ip
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	494d      	ldr	r1, [pc, #308]	@ (800a110 <USB_EPStartXfer+0xd90>)
 8009fdc:	468c      	mov	ip, r1
 8009fde:	4463      	add	r3, ip
 8009fe0:	2180      	movs	r1, #128	@ 0x80
 8009fe2:	0609      	lsls	r1, r1, #24
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	e043      	b.n	800a072 <USB_EPStartXfer+0xcf2>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	085b      	lsrs	r3, r3, #1
 8009ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d002      	beq.n	800a002 <USB_EPStartXfer+0xc82>
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	3301      	adds	r3, #1
 800a000:	633b      	str	r3, [r7, #48]	@ 0x30
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	4a41      	ldr	r2, [pc, #260]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a00a:	4694      	mov	ip, r2
 800a00c:	4463      	add	r3, ip
 800a00e:	6859      	ldr	r1, [r3, #4]
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	069a      	lsls	r2, r3, #26
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	483d      	ldr	r0, [pc, #244]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a01c:	4684      	mov	ip, r0
 800a01e:	4463      	add	r3, ip
 800a020:	430a      	orrs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]
 800a024:	e025      	b.n	800a072 <USB_EPStartXfer+0xcf2>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	785b      	ldrb	r3, [r3, #1]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d121      	bne.n	800a072 <USB_EPStartXfer+0xcf2>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	4a36      	ldr	r2, [pc, #216]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a036:	4694      	mov	ip, r2
 800a038:	4463      	add	r3, ip
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	4933      	ldr	r1, [pc, #204]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a044:	468c      	mov	ip, r1
 800a046:	4463      	add	r3, ip
 800a048:	0412      	lsls	r2, r2, #16
 800a04a:	0c12      	lsrs	r2, r2, #16
 800a04c:	605a      	str	r2, [r3, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	4a2e      	ldr	r2, [pc, #184]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a056:	4694      	mov	ip, r2
 800a058:	4463      	add	r3, ip
 800a05a:	6859      	ldr	r1, [r3, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	041a      	lsls	r2, r3, #16
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	4829      	ldr	r0, [pc, #164]	@ (800a110 <USB_EPStartXfer+0xd90>)
 800a06a:	4684      	mov	ip, r0
 800a06c:	4463      	add	r3, ip
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d100      	bne.n	800a07c <USB_EPStartXfer+0xcfc>
 800a07a:	e170      	b.n	800a35e <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	18d3      	adds	r3, r2, r3
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	2126      	movs	r1, #38	@ 0x26
 800a08a:	187b      	adds	r3, r7, r1
 800a08c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a08e:	187b      	adds	r3, r7, r1
 800a090:	881a      	ldrh	r2, [r3, #0]
 800a092:	2380      	movs	r3, #128	@ 0x80
 800a094:	01db      	lsls	r3, r3, #7
 800a096:	4013      	ands	r3, r2
 800a098:	d004      	beq.n	800a0a4 <USB_EPStartXfer+0xd24>
 800a09a:	187b      	adds	r3, r7, r1
 800a09c:	881b      	ldrh	r3, [r3, #0]
 800a09e:	2240      	movs	r2, #64	@ 0x40
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d10d      	bne.n	800a0c0 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0a4:	2126      	movs	r1, #38	@ 0x26
 800a0a6:	187b      	adds	r3, r7, r1
 800a0a8:	881a      	ldrh	r2, [r3, #0]
 800a0aa:	2380      	movs	r3, #128	@ 0x80
 800a0ac:	01db      	lsls	r3, r3, #7
 800a0ae:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0b0:	d000      	beq.n	800a0b4 <USB_EPStartXfer+0xd34>
 800a0b2:	e154      	b.n	800a35e <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0b4:	187b      	adds	r3, r7, r1
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	2240      	movs	r2, #64	@ 0x40
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	d000      	beq.n	800a0c0 <USB_EPStartXfer+0xd40>
 800a0be:	e14e      	b.n	800a35e <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	18d3      	adds	r3, r2, r3
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <USB_EPStartXfer+0xd94>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	623b      	str	r3, [r7, #32]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	18d3      	adds	r3, r2, r3
 800a0dc:	6a3a      	ldr	r2, [r7, #32]
 800a0de:	490e      	ldr	r1, [pc, #56]	@ (800a118 <USB_EPStartXfer+0xd98>)
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e13b      	b.n	800a35e <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	78db      	ldrb	r3, [r3, #3]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d000      	beq.n	800a0f0 <USB_EPStartXfer+0xd70>
 800a0ee:	e134      	b.n	800a35a <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d90f      	bls.n	800a11c <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	699a      	ldr	r2, [r3, #24]
 800a106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a108:	1ad2      	subs	r2, r2, r3
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	619a      	str	r2, [r3, #24]
 800a10e:	e00b      	b.n	800a128 <USB_EPStartXfer+0xda8>
 800a110:	40009800 	.word	0x40009800
 800a114:	07ff8f8f 	.word	0x07ff8f8f
 800a118:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2200      	movs	r2, #0
 800a126:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d162      	bne.n	800a1f6 <USB_EPStartXfer+0xe76>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	00db      	lsls	r3, r3, #3
 800a136:	4a9a      	ldr	r2, [pc, #616]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a138:	4694      	mov	ip, r2
 800a13a:	4463      	add	r3, ip
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	4996      	ldr	r1, [pc, #600]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a146:	468c      	mov	ip, r1
 800a148:	4463      	add	r3, ip
 800a14a:	0192      	lsls	r2, r2, #6
 800a14c:	0992      	lsrs	r2, r2, #6
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a152:	2b3e      	cmp	r3, #62	@ 0x3e
 800a154:	d91e      	bls.n	800a194 <USB_EPStartXfer+0xe14>
 800a156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a158:	095b      	lsrs	r3, r3, #5
 800a15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a15c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a15e:	221f      	movs	r2, #31
 800a160:	4013      	ands	r3, r2
 800a162:	d102      	bne.n	800a16a <USB_EPStartXfer+0xdea>
 800a164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a166:	3b01      	subs	r3, #1
 800a168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	4a8b      	ldr	r2, [pc, #556]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a172:	4694      	mov	ip, r2
 800a174:	4463      	add	r3, ip
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	069b      	lsls	r3, r3, #26
 800a17c:	431a      	orrs	r2, r3
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4986      	ldr	r1, [pc, #536]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a186:	468c      	mov	ip, r1
 800a188:	4463      	add	r3, ip
 800a18a:	2180      	movs	r1, #128	@ 0x80
 800a18c:	0609      	lsls	r1, r1, #24
 800a18e:	430a      	orrs	r2, r1
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e055      	b.n	800a240 <USB_EPStartXfer+0xec0>
 800a194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a196:	2b00      	cmp	r3, #0
 800a198:	d111      	bne.n	800a1be <USB_EPStartXfer+0xe3e>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	00db      	lsls	r3, r3, #3
 800a1a0:	4a7f      	ldr	r2, [pc, #508]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a1a2:	4694      	mov	ip, r2
 800a1a4:	4463      	add	r3, ip
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	497c      	ldr	r1, [pc, #496]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a1b0:	468c      	mov	ip, r1
 800a1b2:	4463      	add	r3, ip
 800a1b4:	2180      	movs	r1, #128	@ 0x80
 800a1b6:	0609      	lsls	r1, r1, #24
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e040      	b.n	800a240 <USB_EPStartXfer+0xec0>
 800a1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1c0:	085b      	lsrs	r3, r3, #1
 800a1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	d002      	beq.n	800a1d2 <USB_EPStartXfer+0xe52>
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	4a71      	ldr	r2, [pc, #452]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a1da:	4694      	mov	ip, r2
 800a1dc:	4463      	add	r3, ip
 800a1de:	6819      	ldr	r1, [r3, #0]
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	069a      	lsls	r2, r3, #26
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	486d      	ldr	r0, [pc, #436]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a1ec:	4684      	mov	ip, r0
 800a1ee:	4463      	add	r3, ip
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	e024      	b.n	800a240 <USB_EPStartXfer+0xec0>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d120      	bne.n	800a240 <USB_EPStartXfer+0xec0>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4a66      	ldr	r2, [pc, #408]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a206:	4694      	mov	ip, r2
 800a208:	4463      	add	r3, ip
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	4963      	ldr	r1, [pc, #396]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a214:	468c      	mov	ip, r1
 800a216:	4463      	add	r3, ip
 800a218:	0412      	lsls	r2, r2, #16
 800a21a:	0c12      	lsrs	r2, r2, #16
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4a5e      	ldr	r2, [pc, #376]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a226:	4694      	mov	ip, r2
 800a228:	4463      	add	r3, ip
 800a22a:	6819      	ldr	r1, [r3, #0]
 800a22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a22e:	041a      	lsls	r2, r3, #16
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	485a      	ldr	r0, [pc, #360]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a238:	4684      	mov	ip, r0
 800a23a:	4463      	add	r3, ip
 800a23c:	430a      	orrs	r2, r1
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d162      	bne.n	800a30e <USB_EPStartXfer+0xf8e>
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	00db      	lsls	r3, r3, #3
 800a24e:	4a54      	ldr	r2, [pc, #336]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a250:	4694      	mov	ip, r2
 800a252:	4463      	add	r3, ip
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4950      	ldr	r1, [pc, #320]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a25e:	468c      	mov	ip, r1
 800a260:	4463      	add	r3, ip
 800a262:	0192      	lsls	r2, r2, #6
 800a264:	0992      	lsrs	r2, r2, #6
 800a266:	605a      	str	r2, [r3, #4]
 800a268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a26a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a26c:	d91e      	bls.n	800a2ac <USB_EPStartXfer+0xf2c>
 800a26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a270:	095b      	lsrs	r3, r3, #5
 800a272:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a276:	221f      	movs	r2, #31
 800a278:	4013      	ands	r3, r2
 800a27a:	d102      	bne.n	800a282 <USB_EPStartXfer+0xf02>
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	3b01      	subs	r3, #1
 800a280:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	4a45      	ldr	r2, [pc, #276]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a28a:	4694      	mov	ip, r2
 800a28c:	4463      	add	r3, ip
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	069b      	lsls	r3, r3, #26
 800a294:	431a      	orrs	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	4940      	ldr	r1, [pc, #256]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a29e:	468c      	mov	ip, r1
 800a2a0:	4463      	add	r3, ip
 800a2a2:	2180      	movs	r1, #128	@ 0x80
 800a2a4:	0609      	lsls	r1, r1, #24
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
 800a2aa:	e058      	b.n	800a35e <USB_EPStartXfer+0xfde>
 800a2ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d111      	bne.n	800a2d6 <USB_EPStartXfer+0xf56>
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4a39      	ldr	r2, [pc, #228]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a2ba:	4694      	mov	ip, r2
 800a2bc:	4463      	add	r3, ip
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4936      	ldr	r1, [pc, #216]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a2c8:	468c      	mov	ip, r1
 800a2ca:	4463      	add	r3, ip
 800a2cc:	2180      	movs	r1, #128	@ 0x80
 800a2ce:	0609      	lsls	r1, r1, #24
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	605a      	str	r2, [r3, #4]
 800a2d4:	e043      	b.n	800a35e <USB_EPStartXfer+0xfde>
 800a2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2d8:	085b      	lsrs	r3, r3, #1
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2de:	2201      	movs	r2, #1
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	d002      	beq.n	800a2ea <USB_EPStartXfer+0xf6a>
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4a2b      	ldr	r2, [pc, #172]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a2f2:	4694      	mov	ip, r2
 800a2f4:	4463      	add	r3, ip
 800a2f6:	6859      	ldr	r1, [r3, #4]
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	069a      	lsls	r2, r3, #26
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	4827      	ldr	r0, [pc, #156]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a304:	4684      	mov	ip, r0
 800a306:	4463      	add	r3, ip
 800a308:	430a      	orrs	r2, r1
 800a30a:	605a      	str	r2, [r3, #4]
 800a30c:	e027      	b.n	800a35e <USB_EPStartXfer+0xfde>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d123      	bne.n	800a35e <USB_EPStartXfer+0xfde>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	00db      	lsls	r3, r3, #3
 800a31c:	4a20      	ldr	r2, [pc, #128]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a31e:	4694      	mov	ip, r2
 800a320:	4463      	add	r3, ip
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	00db      	lsls	r3, r3, #3
 800a32a:	491d      	ldr	r1, [pc, #116]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a32c:	468c      	mov	ip, r1
 800a32e:	4463      	add	r3, ip
 800a330:	0412      	lsls	r2, r2, #16
 800a332:	0c12      	lsrs	r2, r2, #16
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4a18      	ldr	r2, [pc, #96]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a33e:	4694      	mov	ip, r2
 800a340:	4463      	add	r3, ip
 800a342:	6859      	ldr	r1, [r3, #4]
 800a344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a346:	041a      	lsls	r2, r3, #16
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	4814      	ldr	r0, [pc, #80]	@ (800a3a0 <USB_EPStartXfer+0x1020>)
 800a350:	4684      	mov	ip, r0
 800a352:	4463      	add	r3, ip
 800a354:	430a      	orrs	r2, r1
 800a356:	605a      	str	r2, [r3, #4]
 800a358:	e001      	b.n	800a35e <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e01c      	b.n	800a398 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	18d3      	adds	r3, r2, r3
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a0e      	ldr	r2, [pc, #56]	@ (800a3a4 <USB_EPStartXfer+0x1024>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	61fb      	str	r3, [r7, #28]
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	2280      	movs	r2, #128	@ 0x80
 800a374:	0152      	lsls	r2, r2, #5
 800a376:	4053      	eors	r3, r2
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	2280      	movs	r2, #128	@ 0x80
 800a37e:	0192      	lsls	r2, r2, #6
 800a380:	4053      	eors	r3, r2
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	18d3      	adds	r3, r2, r3
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	4905      	ldr	r1, [pc, #20]	@ (800a3a8 <USB_EPStartXfer+0x1028>)
 800a392:	430a      	orrs	r2, r1
 800a394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b017      	add	sp, #92	@ 0x5c
 800a39e:	bd90      	pop	{r4, r7, pc}
 800a3a0:	40009800 	.word	0x40009800
 800a3a4:	07ffbf8f 	.word	0x07ffbf8f
 800a3a8:	00008080 	.word	0x00008080

0800a3ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	785b      	ldrb	r3, [r3, #1]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d016      	beq.n	800a3ec <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	18d3      	adds	r3, r2, r3
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a16      	ldr	r2, [pc, #88]	@ (800a424 <USB_EPSetStall+0x78>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	60bb      	str	r3, [r7, #8]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	4053      	eors	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	18d3      	adds	r3, r2, r3
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4910      	ldr	r1, [pc, #64]	@ (800a428 <USB_EPSetStall+0x7c>)
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	e016      	b.n	800a41a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	18d3      	adds	r3, r2, r3
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a42c <USB_EPSetStall+0x80>)
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2280      	movs	r2, #128	@ 0x80
 800a402:	0152      	lsls	r2, r2, #5
 800a404:	4053      	eors	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	18d3      	adds	r3, r2, r3
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4904      	ldr	r1, [pc, #16]	@ (800a428 <USB_EPSetStall+0x7c>)
 800a416:	430a      	orrs	r2, r1
 800a418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b004      	add	sp, #16
 800a422:	bd80      	pop	{r7, pc}
 800a424:	07ff8fbf 	.word	0x07ff8fbf
 800a428:	00008080 	.word	0x00008080
 800a42c:	07ffbf8f 	.word	0x07ffbf8f

0800a430 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	7b1b      	ldrb	r3, [r3, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d000      	beq.n	800a444 <USB_EPClearStall+0x14>
 800a442:	e075      	b.n	800a530 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	785b      	ldrb	r3, [r3, #1]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d037      	beq.n	800a4bc <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	18d3      	adds	r3, r2, r3
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2240      	movs	r2, #64	@ 0x40
 800a45e:	4013      	ands	r3, r2
 800a460:	d011      	beq.n	800a486 <USB_EPClearStall+0x56>
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	18d3      	adds	r3, r2, r3
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a33      	ldr	r2, [pc, #204]	@ (800a53c <USB_EPClearStall+0x10c>)
 800a470:	4013      	ands	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	18d3      	adds	r3, r2, r3
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	492f      	ldr	r1, [pc, #188]	@ (800a540 <USB_EPClearStall+0x110>)
 800a482:	430a      	orrs	r2, r1
 800a484:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	78db      	ldrb	r3, [r3, #3]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d050      	beq.n	800a530 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	18d3      	adds	r3, r2, r3
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <USB_EPClearStall+0x114>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	60bb      	str	r3, [r7, #8]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2220      	movs	r2, #32
 800a4a4:	4053      	eors	r3, r2
 800a4a6:	60bb      	str	r3, [r7, #8]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4924      	ldr	r1, [pc, #144]	@ (800a548 <USB_EPClearStall+0x118>)
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	e039      	b.n	800a530 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	18d3      	adds	r3, r2, r3
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	2380      	movs	r3, #128	@ 0x80
 800a4ce:	01db      	lsls	r3, r3, #7
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d011      	beq.n	800a4f8 <USB_EPClearStall+0xc8>
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	18d3      	adds	r3, r2, r3
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	@ (800a53c <USB_EPClearStall+0x10c>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	18d3      	adds	r3, r2, r3
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	4916      	ldr	r1, [pc, #88]	@ (800a54c <USB_EPClearStall+0x11c>)
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	18d3      	adds	r3, r2, r3
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a12      	ldr	r2, [pc, #72]	@ (800a550 <USB_EPClearStall+0x120>)
 800a506:	4013      	ands	r3, r2
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2280      	movs	r2, #128	@ 0x80
 800a50e:	0152      	lsls	r2, r2, #5
 800a510:	4053      	eors	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2280      	movs	r2, #128	@ 0x80
 800a518:	0192      	lsls	r2, r2, #6
 800a51a:	4053      	eors	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	18d3      	adds	r3, r2, r3
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	4907      	ldr	r1, [pc, #28]	@ (800a548 <USB_EPClearStall+0x118>)
 800a52c:	430a      	orrs	r2, r1
 800a52e:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	0018      	movs	r0, r3
 800a534:	46bd      	mov	sp, r7
 800a536:	b008      	add	sp, #32
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	07ff8f8f 	.word	0x07ff8f8f
 800a540:	000080c0 	.word	0x000080c0
 800a544:	07ff8fbf 	.word	0x07ff8fbf
 800a548:	00008080 	.word	0x00008080
 800a54c:	0000c080 	.word	0x0000c080
 800a550:	07ffbf8f 	.word	0x07ffbf8f

0800a554 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	000a      	movs	r2, r1
 800a55e:	1cfb      	adds	r3, r7, #3
 800a560:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a562:	1cfb      	adds	r3, r7, #3
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2280      	movs	r2, #128	@ 0x80
 800a56e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	0018      	movs	r0, r3
 800a574:	46bd      	mov	sp, r7
 800a576:	b002      	add	sp, #8
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a586:	2280      	movs	r2, #128	@ 0x80
 800a588:	0212      	lsls	r2, r2, #8
 800a58a:	431a      	orrs	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	0018      	movs	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	b002      	add	sp, #8
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5a6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b004      	add	sp, #16
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08a      	sub	sp, #40	@ 0x28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	0019      	movs	r1, r3
 800a5c0:	1dbb      	adds	r3, r7, #6
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	1d3b      	adds	r3, r7, #4
 800a5c6:	1c0a      	adds	r2, r1, #0
 800a5c8:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800a5ca:	1d3b      	adds	r3, r7, #4
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	089b      	lsrs	r3, r3, #2
 800a5d2:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800a5d4:	2016      	movs	r0, #22
 800a5d6:	183b      	adds	r3, r7, r0
 800a5d8:	1d3a      	adds	r2, r7, #4
 800a5da:	8812      	ldrh	r2, [r2, #0]
 800a5dc:	2103      	movs	r1, #3
 800a5de:	400a      	ands	r2, r1
 800a5e0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800a5e6:	183b      	adds	r3, r7, r0
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <USB_WritePMA+0x40>
  {
    NbWords--;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800a5f4:	1dbb      	adds	r3, r7, #6
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	4a28      	ldr	r2, [pc, #160]	@ (800a69c <USB_WritePMA+0xe8>)
 800a5fa:	4694      	mov	ip, r2
 800a5fc:	4463      	add	r3, ip
 800a5fe:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	623b      	str	r3, [r7, #32]
 800a604:	e01f      	b.n	800a646 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	7859      	ldrb	r1, [r3, #1]
 800a60c:	0209      	lsls	r1, r1, #8
 800a60e:	430a      	orrs	r2, r1
 800a610:	7899      	ldrb	r1, [r3, #2]
 800a612:	0409      	lsls	r1, r1, #16
 800a614:	430a      	orrs	r2, r1
 800a616:	78db      	ldrb	r3, [r3, #3]
 800a618:	061b      	lsls	r3, r3, #24
 800a61a:	4313      	orrs	r3, r2
 800a61c:	001a      	movs	r2, r3
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	3304      	adds	r3, #4
 800a626:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3301      	adds	r3, #1
 800a62c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	3301      	adds	r3, #1
 800a632:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	3301      	adds	r3, #1
 800a638:	613b      	str	r3, [r7, #16]
    pBuf++;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	3301      	adds	r3, #1
 800a63e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	3b01      	subs	r3, #1
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1dc      	bne.n	800a606 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800a64c:	2316      	movs	r3, #22
 800a64e:	18fb      	adds	r3, r7, r3
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d01e      	beq.n	800a694 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	001a      	movs	r2, r3
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	00db      	lsls	r3, r3, #3
 800a664:	409a      	lsls	r2, r3
 800a666:	0013      	movs	r3, r2
 800a668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a66a:	4313      	orrs	r3, r2
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	3301      	adds	r3, #1
 800a672:	623b      	str	r3, [r7, #32]
      pBuf++;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	3301      	adds	r3, #1
 800a678:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800a67a:	2116      	movs	r1, #22
 800a67c:	187b      	adds	r3, r7, r1
 800a67e:	881a      	ldrh	r2, [r3, #0]
 800a680:	187b      	adds	r3, r7, r1
 800a682:	3a01      	subs	r2, #1
 800a684:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800a686:	187b      	adds	r3, r7, r1
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e5      	bne.n	800a65a <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a692:	601a      	str	r2, [r3, #0]
  }
}
 800a694:	46c0      	nop			@ (mov r8, r8)
 800a696:	46bd      	mov	sp, r7
 800a698:	b00a      	add	sp, #40	@ 0x28
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	40009800 	.word	0x40009800

0800a6a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b08b      	sub	sp, #44	@ 0x2c
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	0019      	movs	r1, r3
 800a6ac:	1dbb      	adds	r3, r7, #6
 800a6ae:	801a      	strh	r2, [r3, #0]
 800a6b0:	1d3b      	adds	r3, r7, #4
 800a6b2:	1c0a      	adds	r2, r1, #0
 800a6b4:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	3303      	adds	r3, #3
 800a6bc:	089b      	lsrs	r3, r3, #2
 800a6be:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800a6c0:	201a      	movs	r0, #26
 800a6c2:	183b      	adds	r3, r7, r0
 800a6c4:	1d3a      	adds	r2, r7, #4
 800a6c6:	8812      	ldrh	r2, [r2, #0]
 800a6c8:	2103      	movs	r1, #3
 800a6ca:	400a      	ands	r2, r1
 800a6cc:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800a6d2:	1dbb      	adds	r3, r7, #6
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	4a39      	ldr	r2, [pc, #228]	@ (800a7bc <USB_ReadPMA+0x11c>)
 800a6d8:	4694      	mov	ip, r2
 800a6da:	4463      	add	r3, ip
 800a6dc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800a6de:	183b      	adds	r3, r7, r0
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6f0:	e03c      	b.n	800a76c <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	21ff      	movs	r1, #255	@ 0xff
 800a6fa:	4011      	ands	r1, r2
 800a6fc:	000c      	movs	r4, r1
 800a6fe:	7819      	ldrb	r1, [r3, #0]
 800a700:	2000      	movs	r0, #0
 800a702:	4001      	ands	r1, r0
 800a704:	1c08      	adds	r0, r1, #0
 800a706:	1c21      	adds	r1, r4, #0
 800a708:	4301      	orrs	r1, r0
 800a70a:	7019      	strb	r1, [r3, #0]
 800a70c:	0a11      	lsrs	r1, r2, #8
 800a70e:	20ff      	movs	r0, #255	@ 0xff
 800a710:	4001      	ands	r1, r0
 800a712:	000c      	movs	r4, r1
 800a714:	7859      	ldrb	r1, [r3, #1]
 800a716:	2000      	movs	r0, #0
 800a718:	4001      	ands	r1, r0
 800a71a:	1c08      	adds	r0, r1, #0
 800a71c:	1c21      	adds	r1, r4, #0
 800a71e:	4301      	orrs	r1, r0
 800a720:	7059      	strb	r1, [r3, #1]
 800a722:	0c11      	lsrs	r1, r2, #16
 800a724:	20ff      	movs	r0, #255	@ 0xff
 800a726:	4001      	ands	r1, r0
 800a728:	000c      	movs	r4, r1
 800a72a:	7899      	ldrb	r1, [r3, #2]
 800a72c:	2000      	movs	r0, #0
 800a72e:	4001      	ands	r1, r0
 800a730:	1c08      	adds	r0, r1, #0
 800a732:	1c21      	adds	r1, r4, #0
 800a734:	4301      	orrs	r1, r0
 800a736:	7099      	strb	r1, [r3, #2]
 800a738:	0e10      	lsrs	r0, r2, #24
 800a73a:	78da      	ldrb	r2, [r3, #3]
 800a73c:	2100      	movs	r1, #0
 800a73e:	400a      	ands	r2, r1
 800a740:	1c11      	adds	r1, r2, #0
 800a742:	1c02      	adds	r2, r0, #0
 800a744:	430a      	orrs	r2, r1
 800a746:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	3304      	adds	r3, #4
 800a74c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	3301      	adds	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
    pBuf++;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	3301      	adds	r3, #1
 800a758:	617b      	str	r3, [r7, #20]
    pBuf++;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	3301      	adds	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	3301      	adds	r3, #1
 800a764:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	3b01      	subs	r3, #1
 800a76a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1bf      	bne.n	800a6f2 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800a772:	231a      	movs	r3, #26
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01b      	beq.n	800a7b4 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	b2db      	uxtb	r3, r3
 800a786:	00db      	lsls	r3, r3, #3
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	40da      	lsrs	r2, r3
 800a78c:	0013      	movs	r3, r2
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	701a      	strb	r2, [r3, #0]
      count++;
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	3301      	adds	r3, #1
 800a798:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	3301      	adds	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800a7a0:	211a      	movs	r1, #26
 800a7a2:	187b      	adds	r3, r7, r1
 800a7a4:	881a      	ldrh	r2, [r3, #0]
 800a7a6:	187b      	adds	r3, r7, r1
 800a7a8:	3a01      	subs	r2, #1
 800a7aa:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800a7ac:	187b      	adds	r3, r7, r1
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e6      	bne.n	800a782 <USB_ReadPMA+0xe2>
  }
}
 800a7b4:	46c0      	nop			@ (mov r8, r8)
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	b00b      	add	sp, #44	@ 0x2c
 800a7ba:	bd90      	pop	{r4, r7, pc}
 800a7bc:	40009800 	.word	0x40009800

0800a7c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	000a      	movs	r2, r1
 800a7ca:	1cfb      	adds	r3, r7, #3
 800a7cc:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a7ce:	2387      	movs	r3, #135	@ 0x87
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f002 ff74 	bl	800d6c0 <USBD_static_malloc>
 800a7d8:	0003      	movs	r3, r0
 800a7da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	23b5      	movs	r3, #181	@ 0xb5
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	58d2      	ldr	r2, [r2, r3]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	32b0      	adds	r2, #176	@ 0xb0
 800a7ee:	0092      	lsls	r2, r2, #2
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e0e9      	b.n	800a9cc <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a7f8:	2387      	movs	r3, #135	@ 0x87
 800a7fa:	009a      	lsls	r2, r3, #2
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2100      	movs	r1, #0
 800a800:	0018      	movs	r0, r3
 800a802:	f004 fb79 	bl	800eef8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	23b5      	movs	r3, #181	@ 0xb5
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	58d2      	ldr	r2, [r2, r3]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32b0      	adds	r2, #176	@ 0xb0
 800a812:	0092      	lsls	r2, r2, #2
 800a814:	68f9      	ldr	r1, [r7, #12]
 800a816:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	23b5      	movs	r3, #181	@ 0xb5
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	58d2      	ldr	r2, [r2, r3]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	32b0      	adds	r2, #176	@ 0xb0
 800a824:	0092      	lsls	r2, r2, #2
 800a826:	58d1      	ldr	r1, [r2, r3]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	23af      	movs	r3, #175	@ 0xaf
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	7c1b      	ldrb	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d13c      	bne.n	800a8b2 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a838:	4b66      	ldr	r3, [pc, #408]	@ (800a9d4 <USBD_CDC_Init+0x214>)
 800a83a:	7819      	ldrb	r1, [r3, #0]
 800a83c:	2380      	movs	r3, #128	@ 0x80
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	f002 fd79 	bl	800d33a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a848:	4b62      	ldr	r3, [pc, #392]	@ (800a9d4 <USBD_CDC_Init+0x214>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	001a      	movs	r2, r3
 800a84e:	230f      	movs	r3, #15
 800a850:	401a      	ands	r2, r3
 800a852:	6879      	ldr	r1, [r7, #4]
 800a854:	0013      	movs	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	189b      	adds	r3, r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	18cb      	adds	r3, r1, r3
 800a85e:	3324      	adds	r3, #36	@ 0x24
 800a860:	2201      	movs	r2, #1
 800a862:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a864:	4b5c      	ldr	r3, [pc, #368]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a866:	7819      	ldrb	r1, [r3, #0]
 800a868:	2380      	movs	r3, #128	@ 0x80
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	f002 fd63 	bl	800d33a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a874:	4b58      	ldr	r3, [pc, #352]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	001a      	movs	r2, r3
 800a87a:	230f      	movs	r3, #15
 800a87c:	401a      	ands	r2, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	23b2      	movs	r3, #178	@ 0xb2
 800a882:	0059      	lsls	r1, r3, #1
 800a884:	0013      	movs	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	189b      	adds	r3, r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	18c3      	adds	r3, r0, r3
 800a88e:	185b      	adds	r3, r3, r1
 800a890:	2201      	movs	r2, #1
 800a892:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a894:	4b51      	ldr	r3, [pc, #324]	@ (800a9dc <USBD_CDC_Init+0x21c>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	001a      	movs	r2, r3
 800a89a:	230f      	movs	r3, #15
 800a89c:	401a      	ands	r2, r3
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	0013      	movs	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	189b      	adds	r3, r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	18cb      	adds	r3, r1, r3
 800a8aa:	3326      	adds	r3, #38	@ 0x26
 800a8ac:	2210      	movs	r2, #16
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e039      	b.n	800a926 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8b2:	4b48      	ldr	r3, [pc, #288]	@ (800a9d4 <USBD_CDC_Init+0x214>)
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	2340      	movs	r3, #64	@ 0x40
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f002 fd3d 	bl	800d33a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8c0:	4b44      	ldr	r3, [pc, #272]	@ (800a9d4 <USBD_CDC_Init+0x214>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	001a      	movs	r2, r3
 800a8c6:	230f      	movs	r3, #15
 800a8c8:	401a      	ands	r2, r3
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	0013      	movs	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	189b      	adds	r3, r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	18cb      	adds	r3, r1, r3
 800a8d6:	3324      	adds	r3, #36	@ 0x24
 800a8d8:	2201      	movs	r2, #1
 800a8da:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8dc:	4b3e      	ldr	r3, [pc, #248]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a8de:	7819      	ldrb	r1, [r3, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	2340      	movs	r3, #64	@ 0x40
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	f002 fd28 	bl	800d33a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8ea:	4b3b      	ldr	r3, [pc, #236]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	230f      	movs	r3, #15
 800a8f2:	401a      	ands	r2, r3
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	23b2      	movs	r3, #178	@ 0xb2
 800a8f8:	0059      	lsls	r1, r3, #1
 800a8fa:	0013      	movs	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	189b      	adds	r3, r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	18c3      	adds	r3, r0, r3
 800a904:	185b      	adds	r3, r3, r1
 800a906:	2201      	movs	r2, #1
 800a908:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a90a:	4b34      	ldr	r3, [pc, #208]	@ (800a9dc <USBD_CDC_Init+0x21c>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	001a      	movs	r2, r3
 800a910:	230f      	movs	r3, #15
 800a912:	401a      	ands	r2, r3
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	0013      	movs	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	18cb      	adds	r3, r1, r3
 800a920:	3326      	adds	r3, #38	@ 0x26
 800a922:	2210      	movs	r2, #16
 800a924:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a926:	4b2d      	ldr	r3, [pc, #180]	@ (800a9dc <USBD_CDC_Init+0x21c>)
 800a928:	7819      	ldrb	r1, [r3, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	2308      	movs	r3, #8
 800a92e:	2203      	movs	r2, #3
 800a930:	f002 fd03 	bl	800d33a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a934:	4b29      	ldr	r3, [pc, #164]	@ (800a9dc <USBD_CDC_Init+0x21c>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	001a      	movs	r2, r3
 800a93a:	230f      	movs	r3, #15
 800a93c:	401a      	ands	r2, r3
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	0013      	movs	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	189b      	adds	r3, r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	18cb      	adds	r3, r1, r3
 800a94a:	3324      	adds	r3, #36	@ 0x24
 800a94c:	2201      	movs	r2, #1
 800a94e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	2381      	movs	r3, #129	@ 0x81
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	2100      	movs	r1, #0
 800a958:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	23b5      	movs	r3, #181	@ 0xb5
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	58d3      	ldr	r3, [r2, r3]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	33b0      	adds	r3, #176	@ 0xb0
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	18d3      	adds	r3, r2, r3
 800a96a:	3304      	adds	r3, #4
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	2385      	movs	r3, #133	@ 0x85
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	2100      	movs	r1, #0
 800a97a:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	2386      	movs	r3, #134	@ 0x86
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	2100      	movs	r1, #0
 800a984:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	2381      	movs	r3, #129	@ 0x81
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	58d3      	ldr	r3, [r2, r3]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 800a992:	2302      	movs	r3, #2
 800a994:	e01a      	b.n	800a9cc <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7c1b      	ldrb	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10b      	bne.n	800a9b6 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a99e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a9a0:	7819      	ldrb	r1, [r3, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	2381      	movs	r3, #129	@ 0x81
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	58d2      	ldr	r2, [r2, r3]
 800a9aa:	2380      	movs	r3, #128	@ 0x80
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f002 fe06 	bl	800d5c0 <USBD_LL_PrepareReceive>
 800a9b4:	e009      	b.n	800a9ca <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9b6:	4b08      	ldr	r3, [pc, #32]	@ (800a9d8 <USBD_CDC_Init+0x218>)
 800a9b8:	7819      	ldrb	r1, [r3, #0]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	2381      	movs	r3, #129	@ 0x81
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	58d2      	ldr	r2, [r2, r3]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	2340      	movs	r3, #64	@ 0x40
 800a9c6:	f002 fdfb 	bl	800d5c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	b004      	add	sp, #16
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20000093 	.word	0x20000093
 800a9d8:	20000094 	.word	0x20000094
 800a9dc:	20000095 	.word	0x20000095

0800a9e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	000a      	movs	r2, r1
 800a9ea:	1cfb      	adds	r3, r7, #3
 800a9ec:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a9ee:	4b41      	ldr	r3, [pc, #260]	@ (800aaf4 <USBD_CDC_DeInit+0x114>)
 800a9f0:	781a      	ldrb	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f002 fcd6 	bl	800d3a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a9fc:	4b3d      	ldr	r3, [pc, #244]	@ (800aaf4 <USBD_CDC_DeInit+0x114>)
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	001a      	movs	r2, r3
 800aa02:	230f      	movs	r3, #15
 800aa04:	401a      	ands	r2, r3
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	0013      	movs	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	189b      	adds	r3, r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	18cb      	adds	r3, r1, r3
 800aa12:	3324      	adds	r3, #36	@ 0x24
 800aa14:	2200      	movs	r2, #0
 800aa16:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa18:	4b37      	ldr	r3, [pc, #220]	@ (800aaf8 <USBD_CDC_DeInit+0x118>)
 800aa1a:	781a      	ldrb	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	0011      	movs	r1, r2
 800aa20:	0018      	movs	r0, r3
 800aa22:	f002 fcc1 	bl	800d3a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa26:	4b34      	ldr	r3, [pc, #208]	@ (800aaf8 <USBD_CDC_DeInit+0x118>)
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	001a      	movs	r2, r3
 800aa2c:	230f      	movs	r3, #15
 800aa2e:	401a      	ands	r2, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	23b2      	movs	r3, #178	@ 0xb2
 800aa34:	0059      	lsls	r1, r3, #1
 800aa36:	0013      	movs	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	18c3      	adds	r3, r0, r3
 800aa40:	185b      	adds	r3, r3, r1
 800aa42:	2200      	movs	r2, #0
 800aa44:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa46:	4b2d      	ldr	r3, [pc, #180]	@ (800aafc <USBD_CDC_DeInit+0x11c>)
 800aa48:	781a      	ldrb	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0011      	movs	r1, r2
 800aa4e:	0018      	movs	r0, r3
 800aa50:	f002 fcaa 	bl	800d3a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa54:	4b29      	ldr	r3, [pc, #164]	@ (800aafc <USBD_CDC_DeInit+0x11c>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	001a      	movs	r2, r3
 800aa5a:	230f      	movs	r3, #15
 800aa5c:	401a      	ands	r2, r3
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	0013      	movs	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	189b      	adds	r3, r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	18cb      	adds	r3, r1, r3
 800aa6a:	3324      	adds	r3, #36	@ 0x24
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa70:	4b22      	ldr	r3, [pc, #136]	@ (800aafc <USBD_CDC_DeInit+0x11c>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	001a      	movs	r2, r3
 800aa76:	230f      	movs	r3, #15
 800aa78:	401a      	ands	r2, r3
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	0013      	movs	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	189b      	adds	r3, r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	18cb      	adds	r3, r1, r3
 800aa86:	3326      	adds	r3, #38	@ 0x26
 800aa88:	2200      	movs	r2, #0
 800aa8a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	23b5      	movs	r3, #181	@ 0xb5
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	58d2      	ldr	r2, [r2, r3]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	32b0      	adds	r2, #176	@ 0xb0
 800aa98:	0092      	lsls	r2, r2, #2
 800aa9a:	58d3      	ldr	r3, [r2, r3]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d024      	beq.n	800aaea <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	23b5      	movs	r3, #181	@ 0xb5
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	58d3      	ldr	r3, [r2, r3]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	33b0      	adds	r3, #176	@ 0xb0
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	18d3      	adds	r3, r2, r3
 800aab0:	3304      	adds	r3, #4
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	23b5      	movs	r3, #181	@ 0xb5
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	58d2      	ldr	r2, [r2, r3]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32b0      	adds	r2, #176	@ 0xb0
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	58d3      	ldr	r3, [r2, r3]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f002 fe05 	bl	800d6d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	23b5      	movs	r3, #181	@ 0xb5
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	58d2      	ldr	r2, [r2, r3]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32b0      	adds	r2, #176	@ 0xb0
 800aada:	0092      	lsls	r2, r2, #2
 800aadc:	2100      	movs	r1, #0
 800aade:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	23af      	movs	r3, #175	@ 0xaf
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	2100      	movs	r1, #0
 800aae8:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	0018      	movs	r0, r3
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	b002      	add	sp, #8
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20000093 	.word	0x20000093
 800aaf8:	20000094 	.word	0x20000094
 800aafc:	20000095 	.word	0x20000095

0800ab00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	23b5      	movs	r3, #181	@ 0xb5
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	58d2      	ldr	r2, [r2, r3]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	32b0      	adds	r2, #176	@ 0xb0
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	58d3      	ldr	r3, [r2, r3]
 800ab1a:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab1c:	230d      	movs	r3, #13
 800ab1e:	18fb      	adds	r3, r7, r3
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800ab24:	230a      	movs	r3, #10
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	2200      	movs	r2, #0
 800ab2a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab2c:	2317      	movs	r3, #23
 800ab2e:	18fb      	adds	r3, r7, r3
 800ab30:	2200      	movs	r2, #0
 800ab32:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e0d1      	b.n	800ace2 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	001a      	movs	r2, r3
 800ab44:	2360      	movs	r3, #96	@ 0x60
 800ab46:	4013      	ands	r3, r2
 800ab48:	d05b      	beq.n	800ac02 <USBD_CDC_Setup+0x102>
 800ab4a:	2b20      	cmp	r3, #32
 800ab4c:	d000      	beq.n	800ab50 <USBD_CDC_Setup+0x50>
 800ab4e:	e0ba      	b.n	800acc6 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	88db      	ldrh	r3, [r3, #6]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d043      	beq.n	800abe0 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	b25b      	sxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	da22      	bge.n	800aba8 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	23b5      	movs	r3, #181	@ 0xb5
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	58d3      	ldr	r3, [r2, r3]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	33b0      	adds	r3, #176	@ 0xb0
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	18d3      	adds	r3, r2, r3
 800ab72:	3304      	adds	r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab7c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	88d2      	ldrh	r2, [r2, #6]
 800ab82:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	88db      	ldrh	r3, [r3, #6]
 800ab88:	220e      	movs	r2, #14
 800ab8a:	18ba      	adds	r2, r7, r2
 800ab8c:	b299      	uxth	r1, r3
 800ab8e:	2907      	cmp	r1, #7
 800ab90:	d900      	bls.n	800ab94 <USBD_CDC_Setup+0x94>
 800ab92:	2307      	movs	r3, #7
 800ab94:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab96:	6939      	ldr	r1, [r7, #16]
 800ab98:	230e      	movs	r3, #14
 800ab9a:	18fb      	adds	r3, r7, r3
 800ab9c:	881a      	ldrh	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	0018      	movs	r0, r3
 800aba2:	f001 ff87 	bl	800cab4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aba6:	e099      	b.n	800acdc <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	7859      	ldrb	r1, [r3, #1]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	2380      	movs	r3, #128	@ 0x80
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	88db      	ldrh	r3, [r3, #6]
 800abb8:	2b3f      	cmp	r3, #63	@ 0x3f
 800abba:	d803      	bhi.n	800abc4 <USBD_CDC_Setup+0xc4>
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	88db      	ldrh	r3, [r3, #6]
 800abc0:	b2da      	uxtb	r2, r3
 800abc2:	e000      	b.n	800abc6 <USBD_CDC_Setup+0xc6>
 800abc4:	2240      	movs	r2, #64	@ 0x40
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	4948      	ldr	r1, [pc, #288]	@ (800acec <USBD_CDC_Setup+0x1ec>)
 800abca:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abcc:	6939      	ldr	r1, [r7, #16]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	4a46      	ldr	r2, [pc, #280]	@ (800acec <USBD_CDC_Setup+0x1ec>)
 800abd2:	5c9b      	ldrb	r3, [r3, r2]
 800abd4:	001a      	movs	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	0018      	movs	r0, r3
 800abda:	f001 ff98 	bl	800cb0e <USBD_CtlPrepareRx>
      break;
 800abde:	e07d      	b.n	800acdc <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	23b5      	movs	r3, #181	@ 0xb5
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	58d3      	ldr	r3, [r2, r3]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	33b0      	adds	r3, #176	@ 0xb0
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	18d3      	adds	r3, r2, r3
 800abf0:	3304      	adds	r3, #4
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	7850      	ldrb	r0, [r2, #1]
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	2200      	movs	r2, #0
 800abfe:	4798      	blx	r3
      break;
 800ac00:	e06c      	b.n	800acdc <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	785b      	ldrb	r3, [r3, #1]
 800ac06:	2b0b      	cmp	r3, #11
 800ac08:	d03c      	beq.n	800ac84 <USBD_CDC_Setup+0x184>
 800ac0a:	dc4d      	bgt.n	800aca8 <USBD_CDC_Setup+0x1a8>
 800ac0c:	2b0a      	cmp	r3, #10
 800ac0e:	d01f      	beq.n	800ac50 <USBD_CDC_Setup+0x150>
 800ac10:	dc4a      	bgt.n	800aca8 <USBD_CDC_Setup+0x1a8>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USBD_CDC_Setup+0x11c>
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d051      	beq.n	800acbe <USBD_CDC_Setup+0x1be>
 800ac1a:	e045      	b.n	800aca8 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	23a7      	movs	r3, #167	@ 0xa7
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	5cd3      	ldrb	r3, [r2, r3]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d107      	bne.n	800ac3a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac2a:	230a      	movs	r3, #10
 800ac2c:	18f9      	adds	r1, r7, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2202      	movs	r2, #2
 800ac32:	0018      	movs	r0, r3
 800ac34:	f001 ff3e 	bl	800cab4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac38:	e044      	b.n	800acc4 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	0011      	movs	r1, r2
 800ac40:	0018      	movs	r0, r3
 800ac42:	f001 feaf 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac46:	2317      	movs	r3, #23
 800ac48:	18fb      	adds	r3, r7, r3
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	701a      	strb	r2, [r3, #0]
          break;
 800ac4e:	e039      	b.n	800acc4 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	23a7      	movs	r3, #167	@ 0xa7
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	5cd3      	ldrb	r3, [r2, r3]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d107      	bne.n	800ac6e <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac5e:	230d      	movs	r3, #13
 800ac60:	18f9      	adds	r1, r7, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	0018      	movs	r0, r3
 800ac68:	f001 ff24 	bl	800cab4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac6c:	e02a      	b.n	800acc4 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0011      	movs	r1, r2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f001 fe95 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac7a:	2317      	movs	r3, #23
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	2203      	movs	r2, #3
 800ac80:	701a      	strb	r2, [r3, #0]
          break;
 800ac82:	e01f      	b.n	800acc4 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	23a7      	movs	r3, #167	@ 0xa7
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	5cd3      	ldrb	r3, [r2, r3]
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d017      	beq.n	800acc2 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	0011      	movs	r1, r2
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f001 fe83 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac9e:	2317      	movs	r3, #23
 800aca0:	18fb      	adds	r3, r7, r3
 800aca2:	2203      	movs	r2, #3
 800aca4:	701a      	strb	r2, [r3, #0]
          }
          break;
 800aca6:	e00c      	b.n	800acc2 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	0011      	movs	r1, r2
 800acae:	0018      	movs	r0, r3
 800acb0:	f001 fe78 	bl	800c9a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800acb4:	2317      	movs	r3, #23
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	2203      	movs	r2, #3
 800acba:	701a      	strb	r2, [r3, #0]
          break;
 800acbc:	e002      	b.n	800acc4 <USBD_CDC_Setup+0x1c4>
          break;
 800acbe:	46c0      	nop			@ (mov r8, r8)
 800acc0:	e00c      	b.n	800acdc <USBD_CDC_Setup+0x1dc>
          break;
 800acc2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800acc4:	e00a      	b.n	800acdc <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	0011      	movs	r1, r2
 800accc:	0018      	movs	r0, r3
 800acce:	f001 fe69 	bl	800c9a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800acd2:	2317      	movs	r3, #23
 800acd4:	18fb      	adds	r3, r7, r3
 800acd6:	2203      	movs	r2, #3
 800acd8:	701a      	strb	r2, [r3, #0]
      break;
 800acda:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 800acdc:	2317      	movs	r3, #23
 800acde:	18fb      	adds	r3, r7, r3
 800ace0:	781b      	ldrb	r3, [r3, #0]
}
 800ace2:	0018      	movs	r0, r3
 800ace4:	46bd      	mov	sp, r7
 800ace6:	b006      	add	sp, #24
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	46c0      	nop			@ (mov r8, r8)
 800acec:	00000201 	.word	0x00000201

0800acf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	000a      	movs	r2, r1
 800acfa:	1cfb      	adds	r3, r7, #3
 800acfc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	23b2      	movs	r3, #178	@ 0xb2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	58d3      	ldr	r3, [r2, r3]
 800ad06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	23b5      	movs	r3, #181	@ 0xb5
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	58d2      	ldr	r2, [r2, r3]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	32b0      	adds	r2, #176	@ 0xb0
 800ad14:	0092      	lsls	r2, r2, #2
 800ad16:	58d3      	ldr	r3, [r2, r3]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e072      	b.n	800ae06 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	23b5      	movs	r3, #181	@ 0xb5
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	58d2      	ldr	r2, [r2, r3]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32b0      	adds	r2, #176	@ 0xb0
 800ad2c:	0092      	lsls	r2, r2, #2
 800ad2e:	58d3      	ldr	r3, [r2, r3]
 800ad30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad32:	1cfb      	adds	r3, r7, #3
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	220f      	movs	r2, #15
 800ad38:	401a      	ands	r2, r3
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	0013      	movs	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	189b      	adds	r3, r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	18cb      	adds	r3, r1, r3
 800ad46:	3318      	adds	r3, #24
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d031      	beq.n	800adb2 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad4e:	1cfb      	adds	r3, r7, #3
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	220f      	movs	r2, #15
 800ad54:	401a      	ands	r2, r3
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	0013      	movs	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	189b      	adds	r3, r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	18cb      	adds	r3, r1, r3
 800ad62:	3318      	adds	r3, #24
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	1cfb      	adds	r3, r7, #3
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	220f      	movs	r2, #15
 800ad6c:	401a      	ands	r2, r3
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	0013      	movs	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	189b      	adds	r3, r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	18cb      	adds	r3, r1, r3
 800ad7a:	3324      	adds	r3, #36	@ 0x24
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	0019      	movs	r1, r3
 800ad80:	f7f5 fa60 	bl	8000244 <__aeabi_uidivmod>
 800ad84:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad86:	d114      	bne.n	800adb2 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad88:	1cfb      	adds	r3, r7, #3
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	220f      	movs	r2, #15
 800ad8e:	401a      	ands	r2, r3
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	0013      	movs	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	189b      	adds	r3, r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	18cb      	adds	r3, r1, r3
 800ad9c:	3318      	adds	r3, #24
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ada2:	1cfb      	adds	r3, r7, #3
 800ada4:	7819      	ldrb	r1, [r3, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	2300      	movs	r3, #0
 800adaa:	2200      	movs	r2, #0
 800adac:	f002 fbd8 	bl	800d560 <USBD_LL_Transmit>
 800adb0:	e028      	b.n	800ae04 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	2385      	movs	r3, #133	@ 0x85
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	2100      	movs	r1, #0
 800adba:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	23b5      	movs	r3, #181	@ 0xb5
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	58d3      	ldr	r3, [r2, r3]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	33b0      	adds	r3, #176	@ 0xb0
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	18d3      	adds	r3, r2, r3
 800adcc:	3304      	adds	r3, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d016      	beq.n	800ae04 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	23b5      	movs	r3, #181	@ 0xb5
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	58d3      	ldr	r3, [r2, r3]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	33b0      	adds	r3, #176	@ 0xb0
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	18d3      	adds	r3, r2, r3
 800ade6:	3304      	adds	r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	691c      	ldr	r4, [r3, #16]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	2382      	movs	r3, #130	@ 0x82
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	58d0      	ldr	r0, [r2, r3]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2284      	movs	r2, #132	@ 0x84
 800adf8:	0092      	lsls	r2, r2, #2
 800adfa:	1899      	adds	r1, r3, r2
 800adfc:	1cfb      	adds	r3, r7, #3
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	001a      	movs	r2, r3
 800ae02:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	0018      	movs	r0, r3
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	b005      	add	sp, #20
 800ae0c:	bd90      	pop	{r4, r7, pc}

0800ae0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b084      	sub	sp, #16
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	000a      	movs	r2, r1
 800ae18:	1cfb      	adds	r3, r7, #3
 800ae1a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	23b5      	movs	r3, #181	@ 0xb5
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	58d2      	ldr	r2, [r2, r3]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	32b0      	adds	r2, #176	@ 0xb0
 800ae28:	0092      	lsls	r2, r2, #2
 800ae2a:	58d3      	ldr	r3, [r2, r3]
 800ae2c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	23b5      	movs	r3, #181	@ 0xb5
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	58d2      	ldr	r2, [r2, r3]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	32b0      	adds	r2, #176	@ 0xb0
 800ae3a:	0092      	lsls	r2, r2, #2
 800ae3c:	58d3      	ldr	r3, [r2, r3]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e022      	b.n	800ae8c <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae46:	1cfb      	adds	r3, r7, #3
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	0011      	movs	r1, r2
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f002 fbe6 	bl	800d620 <USBD_LL_GetRxDataSize>
 800ae54:	0001      	movs	r1, r0
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	2383      	movs	r3, #131	@ 0x83
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	23b5      	movs	r3, #181	@ 0xb5
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	58d3      	ldr	r3, [r2, r3]
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	33b0      	adds	r3, #176	@ 0xb0
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	18d3      	adds	r3, r2, r3
 800ae6e:	3304      	adds	r3, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	68f9      	ldr	r1, [r7, #12]
 800ae76:	2381      	movs	r3, #129	@ 0x81
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	58c8      	ldr	r0, [r1, r3]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2183      	movs	r1, #131	@ 0x83
 800ae80:	0089      	lsls	r1, r1, #2
 800ae82:	468c      	mov	ip, r1
 800ae84:	4463      	add	r3, ip
 800ae86:	0019      	movs	r1, r3
 800ae88:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	b004      	add	sp, #16
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	23b5      	movs	r3, #181	@ 0xb5
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	58d2      	ldr	r2, [r2, r3]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	32b0      	adds	r2, #176	@ 0xb0
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	58d3      	ldr	r3, [r2, r3]
 800aeac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e02b      	b.n	800af10 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	23b5      	movs	r3, #181	@ 0xb5
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	58d3      	ldr	r3, [r2, r3]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	33b0      	adds	r3, #176	@ 0xb0
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	3304      	adds	r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d01e      	beq.n	800af0e <USBD_CDC_EP0_RxReady+0x7a>
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	2380      	movs	r3, #128	@ 0x80
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	5cd3      	ldrb	r3, [r2, r3]
 800aed8:	2bff      	cmp	r3, #255	@ 0xff
 800aeda:	d018      	beq.n	800af0e <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	23b5      	movs	r3, #181	@ 0xb5
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	58d3      	ldr	r3, [r2, r3]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	33b0      	adds	r3, #176	@ 0xb0
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	18d3      	adds	r3, r2, r3
 800aeec:	3304      	adds	r3, #4
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	68f9      	ldr	r1, [r7, #12]
 800aef4:	2280      	movs	r2, #128	@ 0x80
 800aef6:	0092      	lsls	r2, r2, #2
 800aef8:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800aefa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4c06      	ldr	r4, [pc, #24]	@ (800af18 <USBD_CDC_EP0_RxReady+0x84>)
 800af00:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	2380      	movs	r3, #128	@ 0x80
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	21ff      	movs	r1, #255	@ 0xff
 800af0c:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	0018      	movs	r0, r3
 800af12:	46bd      	mov	sp, r7
 800af14:	b005      	add	sp, #20
 800af16:	bd90      	pop	{r4, r7, pc}
 800af18:	00000201 	.word	0x00000201

0800af1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af24:	4b20      	ldr	r3, [pc, #128]	@ (800afa8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800af26:	2182      	movs	r1, #130	@ 0x82
 800af28:	0018      	movs	r0, r3
 800af2a:	f000 fd9c 	bl	800ba66 <USBD_GetEpDesc>
 800af2e:	0003      	movs	r3, r0
 800af30:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af32:	4b1d      	ldr	r3, [pc, #116]	@ (800afa8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800af34:	2101      	movs	r1, #1
 800af36:	0018      	movs	r0, r3
 800af38:	f000 fd95 	bl	800ba66 <USBD_GetEpDesc>
 800af3c:	0003      	movs	r3, r0
 800af3e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af40:	4b19      	ldr	r3, [pc, #100]	@ (800afa8 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800af42:	2181      	movs	r1, #129	@ 0x81
 800af44:	0018      	movs	r0, r3
 800af46:	f000 fd8e 	bl	800ba66 <USBD_GetEpDesc>
 800af4a:	0003      	movs	r3, r0
 800af4c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2210      	movs	r2, #16
 800af58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	791a      	ldrb	r2, [r3, #4]
 800af64:	2100      	movs	r1, #0
 800af66:	400a      	ands	r2, r1
 800af68:	1c11      	adds	r1, r2, #0
 800af6a:	2240      	movs	r2, #64	@ 0x40
 800af6c:	430a      	orrs	r2, r1
 800af6e:	711a      	strb	r2, [r3, #4]
 800af70:	795a      	ldrb	r2, [r3, #5]
 800af72:	2100      	movs	r1, #0
 800af74:	400a      	ands	r2, r1
 800af76:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00b      	beq.n	800af96 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	791a      	ldrb	r2, [r3, #4]
 800af82:	2100      	movs	r1, #0
 800af84:	400a      	ands	r2, r1
 800af86:	1c11      	adds	r1, r2, #0
 800af88:	2240      	movs	r2, #64	@ 0x40
 800af8a:	430a      	orrs	r2, r1
 800af8c:	711a      	strb	r2, [r3, #4]
 800af8e:	795a      	ldrb	r2, [r3, #5]
 800af90:	2100      	movs	r1, #0
 800af92:	400a      	ands	r2, r1
 800af94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2243      	movs	r2, #67	@ 0x43
 800af9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af9c:	4b02      	ldr	r3, [pc, #8]	@ (800afa8 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800af9e:	0018      	movs	r0, r3
 800afa0:	46bd      	mov	sp, r7
 800afa2:	b006      	add	sp, #24
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	46c0      	nop			@ (mov r8, r8)
 800afa8:	20000050 	.word	0x20000050

0800afac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afb4:	4b20      	ldr	r3, [pc, #128]	@ (800b038 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800afb6:	2182      	movs	r1, #130	@ 0x82
 800afb8:	0018      	movs	r0, r3
 800afba:	f000 fd54 	bl	800ba66 <USBD_GetEpDesc>
 800afbe:	0003      	movs	r3, r0
 800afc0:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afc2:	4b1d      	ldr	r3, [pc, #116]	@ (800b038 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800afc4:	2101      	movs	r1, #1
 800afc6:	0018      	movs	r0, r3
 800afc8:	f000 fd4d 	bl	800ba66 <USBD_GetEpDesc>
 800afcc:	0003      	movs	r3, r0
 800afce:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afd0:	4b19      	ldr	r3, [pc, #100]	@ (800b038 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800afd2:	2181      	movs	r1, #129	@ 0x81
 800afd4:	0018      	movs	r0, r3
 800afd6:	f000 fd46 	bl	800ba66 <USBD_GetEpDesc>
 800afda:	0003      	movs	r3, r0
 800afdc:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2210      	movs	r2, #16
 800afe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	791a      	ldrb	r2, [r3, #4]
 800aff4:	2100      	movs	r1, #0
 800aff6:	400a      	ands	r2, r1
 800aff8:	711a      	strb	r2, [r3, #4]
 800affa:	795a      	ldrb	r2, [r3, #5]
 800affc:	2100      	movs	r1, #0
 800affe:	400a      	ands	r2, r1
 800b000:	1c11      	adds	r1, r2, #0
 800b002:	2202      	movs	r2, #2
 800b004:	430a      	orrs	r2, r1
 800b006:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	791a      	ldrb	r2, [r3, #4]
 800b012:	2100      	movs	r1, #0
 800b014:	400a      	ands	r2, r1
 800b016:	711a      	strb	r2, [r3, #4]
 800b018:	795a      	ldrb	r2, [r3, #5]
 800b01a:	2100      	movs	r1, #0
 800b01c:	400a      	ands	r2, r1
 800b01e:	1c11      	adds	r1, r2, #0
 800b020:	2202      	movs	r2, #2
 800b022:	430a      	orrs	r2, r1
 800b024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2243      	movs	r2, #67	@ 0x43
 800b02a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b02c:	4b02      	ldr	r3, [pc, #8]	@ (800b038 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800b02e:	0018      	movs	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	b006      	add	sp, #24
 800b034:	bd80      	pop	{r7, pc}
 800b036:	46c0      	nop			@ (mov r8, r8)
 800b038:	20000050 	.word	0x20000050

0800b03c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b044:	4b20      	ldr	r3, [pc, #128]	@ (800b0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800b046:	2182      	movs	r1, #130	@ 0x82
 800b048:	0018      	movs	r0, r3
 800b04a:	f000 fd0c 	bl	800ba66 <USBD_GetEpDesc>
 800b04e:	0003      	movs	r3, r0
 800b050:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b052:	4b1d      	ldr	r3, [pc, #116]	@ (800b0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800b054:	2101      	movs	r1, #1
 800b056:	0018      	movs	r0, r3
 800b058:	f000 fd05 	bl	800ba66 <USBD_GetEpDesc>
 800b05c:	0003      	movs	r3, r0
 800b05e:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b060:	4b19      	ldr	r3, [pc, #100]	@ (800b0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800b062:	2181      	movs	r1, #129	@ 0x81
 800b064:	0018      	movs	r0, r3
 800b066:	f000 fcfe 	bl	800ba66 <USBD_GetEpDesc>
 800b06a:	0003      	movs	r3, r0
 800b06c:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	2210      	movs	r2, #16
 800b078:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	791a      	ldrb	r2, [r3, #4]
 800b084:	2100      	movs	r1, #0
 800b086:	400a      	ands	r2, r1
 800b088:	1c11      	adds	r1, r2, #0
 800b08a:	2240      	movs	r2, #64	@ 0x40
 800b08c:	430a      	orrs	r2, r1
 800b08e:	711a      	strb	r2, [r3, #4]
 800b090:	795a      	ldrb	r2, [r3, #5]
 800b092:	2100      	movs	r1, #0
 800b094:	400a      	ands	r2, r1
 800b096:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	791a      	ldrb	r2, [r3, #4]
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	400a      	ands	r2, r1
 800b0a6:	1c11      	adds	r1, r2, #0
 800b0a8:	2240      	movs	r2, #64	@ 0x40
 800b0aa:	430a      	orrs	r2, r1
 800b0ac:	711a      	strb	r2, [r3, #4]
 800b0ae:	795a      	ldrb	r2, [r3, #5]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	400a      	ands	r2, r1
 800b0b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2243      	movs	r2, #67	@ 0x43
 800b0ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0bc:	4b02      	ldr	r3, [pc, #8]	@ (800b0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800b0be:	0018      	movs	r0, r3
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	b006      	add	sp, #24
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	46c0      	nop			@ (mov r8, r8)
 800b0c8:	20000050 	.word	0x20000050

0800b0cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	220a      	movs	r2, #10
 800b0d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0da:	4b02      	ldr	r3, [pc, #8]	@ (800b0e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b0dc:	0018      	movs	r0, r3
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	b002      	add	sp, #8
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	2000000c 	.word	0x2000000c

0800b0e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e00b      	b.n	800b114 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	23b5      	movs	r3, #181	@ 0xb5
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	58d3      	ldr	r3, [r2, r3]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	33b0      	adds	r3, #176	@ 0xb0
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	18d3      	adds	r3, r2, r3
 800b10c:	3304      	adds	r3, #4
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	0018      	movs	r0, r3
 800b116:	46bd      	mov	sp, r7
 800b118:	b002      	add	sp, #8
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	23b5      	movs	r3, #181	@ 0xb5
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	58d2      	ldr	r2, [r2, r3]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	32b0      	adds	r2, #176	@ 0xb0
 800b134:	0092      	lsls	r2, r2, #2
 800b136:	58d3      	ldr	r3, [r2, r3]
 800b138:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	e00a      	b.n	800b15a <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	2382      	movs	r3, #130	@ 0x82
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	68b9      	ldr	r1, [r7, #8]
 800b14c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	2384      	movs	r3, #132	@ 0x84
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	6879      	ldr	r1, [r7, #4]
 800b156:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	0018      	movs	r0, r3
 800b15c:	46bd      	mov	sp, r7
 800b15e:	b006      	add	sp, #24
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	23b5      	movs	r3, #181	@ 0xb5
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	58d2      	ldr	r2, [r2, r3]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	32b0      	adds	r2, #176	@ 0xb0
 800b178:	0092      	lsls	r2, r2, #2
 800b17a:	58d3      	ldr	r3, [r2, r3]
 800b17c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b184:	2303      	movs	r3, #3
 800b186:	e005      	b.n	800b194 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	2381      	movs	r3, #129	@ 0x81
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	6839      	ldr	r1, [r7, #0]
 800b190:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	0018      	movs	r0, r3
 800b196:	46bd      	mov	sp, r7
 800b198:	b004      	add	sp, #16
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b19c:	b590      	push	{r4, r7, lr}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	23b5      	movs	r3, #181	@ 0xb5
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	58d2      	ldr	r2, [r2, r3]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	32b0      	adds	r2, #176	@ 0xb0
 800b1b0:	0092      	lsls	r2, r2, #2
 800b1b2:	58d3      	ldr	r3, [r2, r3]
 800b1b4:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b1b6:	230f      	movs	r3, #15
 800b1b8:	18fb      	adds	r3, r7, r3
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e030      	b.n	800b22a <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	2385      	movs	r3, #133	@ 0x85
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	58d3      	ldr	r3, [r2, r3]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d127      	bne.n	800b224 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	2385      	movs	r3, #133	@ 0x85
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	2101      	movs	r1, #1
 800b1dc:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b1de:	4b15      	ldr	r3, [pc, #84]	@ (800b234 <USBD_CDC_TransmitPacket+0x98>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	001a      	movs	r2, r3
 800b1e4:	230f      	movs	r3, #15
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	2384      	movs	r3, #132	@ 0x84
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	58c9      	ldr	r1, [r1, r3]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	0013      	movs	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	189b      	adds	r3, r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	18c3      	adds	r3, r0, r3
 800b1fc:	3318      	adds	r3, #24
 800b1fe:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b200:	4b0c      	ldr	r3, [pc, #48]	@ (800b234 <USBD_CDC_TransmitPacket+0x98>)
 800b202:	7819      	ldrb	r1, [r3, #0]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	2382      	movs	r3, #130	@ 0x82
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	58d4      	ldr	r4, [r2, r3]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	2384      	movs	r3, #132	@ 0x84
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	58d3      	ldr	r3, [r2, r3]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	0022      	movs	r2, r4
 800b218:	f002 f9a2 	bl	800d560 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b21c:	230f      	movs	r3, #15
 800b21e:	18fb      	adds	r3, r7, r3
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 800b224:	230f      	movs	r3, #15
 800b226:	18fb      	adds	r3, r7, r3
 800b228:	781b      	ldrb	r3, [r3, #0]
}
 800b22a:	0018      	movs	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	b005      	add	sp, #20
 800b230:	bd90      	pop	{r4, r7, pc}
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	20000093 	.word	0x20000093

0800b238 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	23b5      	movs	r3, #181	@ 0xb5
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	58d2      	ldr	r2, [r2, r3]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	32b0      	adds	r2, #176	@ 0xb0
 800b24c:	0092      	lsls	r2, r2, #2
 800b24e:	58d3      	ldr	r3, [r2, r3]
 800b250:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	23b5      	movs	r3, #181	@ 0xb5
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	58d2      	ldr	r2, [r2, r3]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	32b0      	adds	r2, #176	@ 0xb0
 800b25e:	0092      	lsls	r2, r2, #2
 800b260:	58d3      	ldr	r3, [r2, r3]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	e01a      	b.n	800b2a0 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7c1b      	ldrb	r3, [r3, #16]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10b      	bne.n	800b28a <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b272:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a8 <USBD_CDC_ReceivePacket+0x70>)
 800b274:	7819      	ldrb	r1, [r3, #0]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	2381      	movs	r3, #129	@ 0x81
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	58d2      	ldr	r2, [r2, r3]
 800b27e:	2380      	movs	r3, #128	@ 0x80
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f002 f99c 	bl	800d5c0 <USBD_LL_PrepareReceive>
 800b288:	e009      	b.n	800b29e <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b28a:	4b07      	ldr	r3, [pc, #28]	@ (800b2a8 <USBD_CDC_ReceivePacket+0x70>)
 800b28c:	7819      	ldrb	r1, [r3, #0]
 800b28e:	68fa      	ldr	r2, [r7, #12]
 800b290:	2381      	movs	r3, #129	@ 0x81
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	58d2      	ldr	r2, [r2, r3]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	2340      	movs	r3, #64	@ 0x40
 800b29a:	f002 f991 	bl	800d5c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	b004      	add	sp, #16
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	20000094 	.word	0x20000094

0800b2ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2ac:	b5b0      	push	{r4, r5, r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	1dfb      	adds	r3, r7, #7
 800b2b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e029      	b.n	800b318 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	23ae      	movs	r3, #174	@ 0xae
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	23b1      	movs	r3, #177	@ 0xb1
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	23b4      	movs	r3, #180	@ 0xb4
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	2100      	movs	r1, #0
 800b2e0:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	23ad      	movs	r3, #173	@ 0xad
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	23a7      	movs	r3, #167	@ 0xa7
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	2101      	movs	r1, #1
 800b2fa:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	1dfa      	adds	r2, r7, #7
 800b300:	7812      	ldrb	r2, [r2, #0]
 800b302:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b304:	2517      	movs	r5, #23
 800b306:	197c      	adds	r4, r7, r5
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	0018      	movs	r0, r3
 800b30c:	f001 ff7e 	bl	800d20c <USBD_LL_Init>
 800b310:	0003      	movs	r3, r0
 800b312:	7023      	strb	r3, [r4, #0]

  return ret;
 800b314:	197b      	adds	r3, r7, r5
 800b316:	781b      	ldrb	r3, [r3, #0]
}
 800b318:	0018      	movs	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b006      	add	sp, #24
 800b31e:	bdb0      	pop	{r4, r5, r7, pc}

0800b320 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b32a:	230e      	movs	r3, #14
 800b32c:	18fb      	adds	r3, r7, r3
 800b32e:	2200      	movs	r2, #0
 800b330:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b338:	2303      	movs	r3, #3
 800b33a:	e02b      	b.n	800b394 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	23ae      	movs	r3, #174	@ 0xae
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	6839      	ldr	r1, [r7, #0]
 800b344:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	23b5      	movs	r3, #181	@ 0xb5
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	58d2      	ldr	r2, [r2, r3]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	32ae      	adds	r2, #174	@ 0xae
 800b352:	0092      	lsls	r2, r2, #2
 800b354:	58d3      	ldr	r3, [r2, r3]
 800b356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d011      	beq.n	800b380 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	23b5      	movs	r3, #181	@ 0xb5
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	58d2      	ldr	r2, [r2, r3]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	32ae      	adds	r2, #174	@ 0xae
 800b368:	0092      	lsls	r2, r2, #2
 800b36a:	58d3      	ldr	r3, [r2, r3]
 800b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36e:	220e      	movs	r2, #14
 800b370:	18ba      	adds	r2, r7, r2
 800b372:	0010      	movs	r0, r2
 800b374:	4798      	blx	r3
 800b376:	0001      	movs	r1, r0
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	23b4      	movs	r3, #180	@ 0xb4
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	23b6      	movs	r3, #182	@ 0xb6
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	58d3      	ldr	r3, [r2, r3]
 800b388:	1c59      	adds	r1, r3, #1
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	23b6      	movs	r3, #182	@ 0xb6
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	0018      	movs	r0, r3
 800b396:	46bd      	mov	sp, r7
 800b398:	b004      	add	sp, #16
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f001 ffa2 	bl	800d2f0 <USBD_LL_Start>
 800b3ac:	0003      	movs	r3, r0
}
 800b3ae:	0018      	movs	r0, r3
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b002      	add	sp, #8
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3be:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b002      	add	sp, #8
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	000a      	movs	r2, r1
 800b3d2:	1cfb      	adds	r3, r7, #3
 800b3d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3d6:	210f      	movs	r1, #15
 800b3d8:	187b      	adds	r3, r7, r1
 800b3da:	2200      	movs	r2, #0
 800b3dc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	23ae      	movs	r3, #174	@ 0xae
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	58d3      	ldr	r3, [r2, r3]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00c      	beq.n	800b404 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	23ae      	movs	r3, #174	@ 0xae
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	58d3      	ldr	r3, [r2, r3]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	187c      	adds	r4, r7, r1
 800b3f6:	1cfa      	adds	r2, r7, #3
 800b3f8:	7811      	ldrb	r1, [r2, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	0010      	movs	r0, r2
 800b3fe:	4798      	blx	r3
 800b400:	0003      	movs	r3, r0
 800b402:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b404:	230f      	movs	r3, #15
 800b406:	18fb      	adds	r3, r7, r3
 800b408:	781b      	ldrb	r3, [r3, #0]
}
 800b40a:	0018      	movs	r0, r3
 800b40c:	46bd      	mov	sp, r7
 800b40e:	b005      	add	sp, #20
 800b410:	bd90      	pop	{r4, r7, pc}

0800b412 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b412:	b590      	push	{r4, r7, lr}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	000a      	movs	r2, r1
 800b41c:	1cfb      	adds	r3, r7, #3
 800b41e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b420:	240f      	movs	r4, #15
 800b422:	193b      	adds	r3, r7, r4
 800b424:	2200      	movs	r2, #0
 800b426:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	23ae      	movs	r3, #174	@ 0xae
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	58d3      	ldr	r3, [r2, r3]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	1cfa      	adds	r2, r7, #3
 800b434:	7811      	ldrb	r1, [r2, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	0010      	movs	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	1e03      	subs	r3, r0, #0
 800b43e:	d002      	beq.n	800b446 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 800b440:	193b      	adds	r3, r7, r4
 800b442:	2203      	movs	r2, #3
 800b444:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b446:	230f      	movs	r3, #15
 800b448:	18fb      	adds	r3, r7, r3
 800b44a:	781b      	ldrb	r3, [r3, #0]
}
 800b44c:	0018      	movs	r0, r3
 800b44e:	46bd      	mov	sp, r7
 800b450:	b005      	add	sp, #20
 800b452:	bd90      	pop	{r4, r7, pc}

0800b454 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a30      	ldr	r2, [pc, #192]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b462:	4694      	mov	ip, r2
 800b464:	4463      	add	r3, ip
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	0011      	movs	r1, r2
 800b46a:	0018      	movs	r0, r3
 800b46c:	f001 fa5d 	bl	800c92a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	23a5      	movs	r3, #165	@ 0xa5
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	2101      	movs	r1, #1
 800b478:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	23ac      	movs	r3, #172	@ 0xac
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	5ad3      	ldrh	r3, [r2, r3]
 800b482:	0019      	movs	r1, r3
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	23a6      	movs	r3, #166	@ 0xa6
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a25      	ldr	r2, [pc, #148]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b490:	5c9b      	ldrb	r3, [r3, r2]
 800b492:	001a      	movs	r2, r3
 800b494:	231f      	movs	r3, #31
 800b496:	4013      	ands	r3, r2
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d01f      	beq.n	800b4dc <USBD_LL_SetupStage+0x88>
 800b49c:	d82b      	bhi.n	800b4f6 <USBD_LL_SetupStage+0xa2>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <USBD_LL_SetupStage+0x54>
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d00d      	beq.n	800b4c2 <USBD_LL_SetupStage+0x6e>
 800b4a6:	e026      	b.n	800b4f6 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b4ac:	189a      	adds	r2, r3, r2
 800b4ae:	230f      	movs	r3, #15
 800b4b0:	18fc      	adds	r4, r7, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	0011      	movs	r1, r2
 800b4b6:	0018      	movs	r0, r3
 800b4b8:	f000 fb5c 	bl	800bb74 <USBD_StdDevReq>
 800b4bc:	0003      	movs	r3, r0
 800b4be:	7023      	strb	r3, [r4, #0]
      break;
 800b4c0:	e029      	b.n	800b516 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a17      	ldr	r2, [pc, #92]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b4c6:	189a      	adds	r2, r3, r2
 800b4c8:	230f      	movs	r3, #15
 800b4ca:	18fc      	adds	r4, r7, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	0011      	movs	r1, r2
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f000 fbcd 	bl	800bc70 <USBD_StdItfReq>
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	7023      	strb	r3, [r4, #0]
      break;
 800b4da:	e01c      	b.n	800b516 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a11      	ldr	r2, [pc, #68]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b4e0:	189a      	adds	r2, r3, r2
 800b4e2:	230f      	movs	r3, #15
 800b4e4:	18fc      	adds	r4, r7, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	0011      	movs	r1, r2
 800b4ea:	0018      	movs	r0, r3
 800b4ec:	f000 fc4d 	bl	800bd8a <USBD_StdEPReq>
 800b4f0:	0003      	movs	r3, r0
 800b4f2:	7023      	strb	r3, [r4, #0]
      break;
 800b4f4:	e00f      	b.n	800b516 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a0a      	ldr	r2, [pc, #40]	@ (800b524 <USBD_LL_SetupStage+0xd0>)
 800b4fa:	5c9b      	ldrb	r3, [r3, r2]
 800b4fc:	227f      	movs	r2, #127	@ 0x7f
 800b4fe:	4393      	bics	r3, r2
 800b500:	b2da      	uxtb	r2, r3
 800b502:	230f      	movs	r3, #15
 800b504:	18fc      	adds	r4, r7, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	0011      	movs	r1, r2
 800b50a:	0018      	movs	r0, r3
 800b50c:	f001 ff77 	bl	800d3fe <USBD_LL_StallEP>
 800b510:	0003      	movs	r3, r0
 800b512:	7023      	strb	r3, [r4, #0]
      break;
 800b514:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b516:	230f      	movs	r3, #15
 800b518:	18fb      	adds	r3, r7, r3
 800b51a:	781b      	ldrb	r3, [r3, #0]
}
 800b51c:	0018      	movs	r0, r3
 800b51e:	46bd      	mov	sp, r7
 800b520:	b005      	add	sp, #20
 800b522:	bd90      	pop	{r4, r7, pc}
 800b524:	000002aa 	.word	0x000002aa

0800b528 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	607a      	str	r2, [r7, #4]
 800b532:	200b      	movs	r0, #11
 800b534:	183b      	adds	r3, r7, r0
 800b536:	1c0a      	adds	r2, r1, #0
 800b538:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b53a:	2317      	movs	r3, #23
 800b53c:	18fb      	adds	r3, r7, r3
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 800b542:	183b      	adds	r3, r7, r0
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d000      	beq.n	800b54c <USBD_LL_DataOutStage+0x24>
 800b54a:	e084      	b.n	800b656 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3355      	adds	r3, #85	@ 0x55
 800b550:	33ff      	adds	r3, #255	@ 0xff
 800b552:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	23a5      	movs	r3, #165	@ 0xa5
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	58d3      	ldr	r3, [r2, r3]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d000      	beq.n	800b562 <USBD_LL_DataOutStage+0x3a>
 800b560:	e0c0      	b.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	689a      	ldr	r2, [r3, #8]
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d914      	bls.n	800b598 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	1ad2      	subs	r2, r2, r3
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	68d9      	ldr	r1, [r3, #12]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	000b      	movs	r3, r1
 800b586:	4293      	cmp	r3, r2
 800b588:	d900      	bls.n	800b58c <USBD_LL_DataOutStage+0x64>
 800b58a:	0013      	movs	r3, r2
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	001a      	movs	r2, r3
 800b592:	f001 fadc 	bl	800cb4e <USBD_CtlContinueRx>
 800b596:	e0a5      	b.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4a55      	ldr	r2, [pc, #340]	@ (800b6f0 <USBD_LL_DataOutStage+0x1c8>)
 800b59c:	5c9b      	ldrb	r3, [r3, r2]
 800b59e:	001a      	movs	r2, r3
 800b5a0:	231f      	movs	r3, #31
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d018      	beq.n	800b5da <USBD_LL_DataOutStage+0xb2>
 800b5a8:	d825      	bhi.n	800b5f6 <USBD_LL_DataOutStage+0xce>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d002      	beq.n	800b5b4 <USBD_LL_DataOutStage+0x8c>
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d005      	beq.n	800b5be <USBD_LL_DataOutStage+0x96>
 800b5b2:	e020      	b.n	800b5f6 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b5b4:	2316      	movs	r3, #22
 800b5b6:	18fb      	adds	r3, r7, r3
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
            break;
 800b5bc:	e020      	b.n	800b600 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4a4c      	ldr	r2, [pc, #304]	@ (800b6f4 <USBD_LL_DataOutStage+0x1cc>)
 800b5c2:	5a9b      	ldrh	r3, [r3, r2]
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	2316      	movs	r3, #22
 800b5c8:	18fc      	adds	r4, r7, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	0011      	movs	r1, r2
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	f000 fa31 	bl	800ba36 <USBD_CoreFindIF>
 800b5d4:	0003      	movs	r3, r0
 800b5d6:	7023      	strb	r3, [r4, #0]
            break;
 800b5d8:	e012      	b.n	800b600 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4a45      	ldr	r2, [pc, #276]	@ (800b6f4 <USBD_LL_DataOutStage+0x1cc>)
 800b5de:	5a9b      	ldrh	r3, [r3, r2]
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	2316      	movs	r3, #22
 800b5e4:	18fc      	adds	r4, r7, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	0011      	movs	r1, r2
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	f000 fa2f 	bl	800ba4e <USBD_CoreFindEP>
 800b5f0:	0003      	movs	r3, r0
 800b5f2:	7023      	strb	r3, [r4, #0]
            break;
 800b5f4:	e004      	b.n	800b600 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5f6:	2316      	movs	r3, #22
 800b5f8:	18fb      	adds	r3, r7, r3
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
            break;
 800b5fe:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b600:	2116      	movs	r1, #22
 800b602:	187b      	adds	r3, r7, r1
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d120      	bne.n	800b64c <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	23a7      	movs	r3, #167	@ 0xa7
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	5cd3      	ldrb	r3, [r2, r3]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b03      	cmp	r3, #3
 800b616:	d119      	bne.n	800b64c <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b618:	187b      	adds	r3, r7, r1
 800b61a:	781a      	ldrb	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	32ae      	adds	r2, #174	@ 0xae
 800b620:	0092      	lsls	r2, r2, #2
 800b622:	58d3      	ldr	r3, [r2, r3]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d010      	beq.n	800b64c <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 800b62a:	0008      	movs	r0, r1
 800b62c:	187b      	adds	r3, r7, r1
 800b62e:	7819      	ldrb	r1, [r3, #0]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	23b5      	movs	r3, #181	@ 0xb5
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b638:	183b      	adds	r3, r7, r0
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	32ae      	adds	r2, #174	@ 0xae
 800b640:	0092      	lsls	r2, r2, #2
 800b642:	58d3      	ldr	r3, [r2, r3]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	0010      	movs	r0, r2
 800b64a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	0018      	movs	r0, r3
 800b650:	f001 fa8e 	bl	800cb70 <USBD_CtlSendStatus>
 800b654:	e046      	b.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b656:	260b      	movs	r6, #11
 800b658:	19bb      	adds	r3, r7, r6
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	227f      	movs	r2, #127	@ 0x7f
 800b65e:	4013      	ands	r3, r2
 800b660:	b2da      	uxtb	r2, r3
 800b662:	2516      	movs	r5, #22
 800b664:	197c      	adds	r4, r7, r5
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	0011      	movs	r1, r2
 800b66a:	0018      	movs	r0, r3
 800b66c:	f000 f9ef 	bl	800ba4e <USBD_CoreFindEP>
 800b670:	0003      	movs	r3, r0
 800b672:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b674:	0029      	movs	r1, r5
 800b676:	187b      	adds	r3, r7, r1
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	2bff      	cmp	r3, #255	@ 0xff
 800b67c:	d032      	beq.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
 800b67e:	187b      	adds	r3, r7, r1
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d12e      	bne.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	23a7      	movs	r3, #167	@ 0xa7
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	5cd3      	ldrb	r3, [r2, r3]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b03      	cmp	r3, #3
 800b692:	d11f      	bne.n	800b6d4 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b694:	187b      	adds	r3, r7, r1
 800b696:	781a      	ldrb	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	32ae      	adds	r2, #174	@ 0xae
 800b69c:	0092      	lsls	r2, r2, #2
 800b69e:	58d3      	ldr	r3, [r2, r3]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d016      	beq.n	800b6d4 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 800b6a6:	0008      	movs	r0, r1
 800b6a8:	187b      	adds	r3, r7, r1
 800b6aa:	7819      	ldrb	r1, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	23b5      	movs	r3, #181	@ 0xb5
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b6b4:	183b      	adds	r3, r7, r0
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	32ae      	adds	r2, #174	@ 0xae
 800b6bc:	0092      	lsls	r2, r2, #2
 800b6be:	58d3      	ldr	r3, [r2, r3]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	2217      	movs	r2, #23
 800b6c4:	18bc      	adds	r4, r7, r2
 800b6c6:	19ba      	adds	r2, r7, r6
 800b6c8:	7811      	ldrb	r1, [r2, #0]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	0010      	movs	r0, r2
 800b6ce:	4798      	blx	r3
 800b6d0:	0003      	movs	r3, r0
 800b6d2:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 800b6d4:	2217      	movs	r2, #23
 800b6d6:	18bb      	adds	r3, r7, r2
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 800b6de:	18bb      	adds	r3, r7, r2
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	e000      	b.n	800b6e6 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	0018      	movs	r0, r3
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	b007      	add	sp, #28
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	000002aa 	.word	0x000002aa
 800b6f4:	000002ae 	.word	0x000002ae

0800b6f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6fa:	b087      	sub	sp, #28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	200b      	movs	r0, #11
 800b704:	183b      	adds	r3, r7, r0
 800b706:	1c0a      	adds	r2, r1, #0
 800b708:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b70a:	183b      	adds	r3, r7, r0
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d000      	beq.n	800b714 <USBD_LL_DataInStage+0x1c>
 800b712:	e07d      	b.n	800b810 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3314      	adds	r3, #20
 800b718:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	23a5      	movs	r3, #165	@ 0xa5
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	58d3      	ldr	r3, [r2, r3]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d164      	bne.n	800b7f0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	689a      	ldr	r2, [r3, #8]
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d914      	bls.n	800b75c <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	1ad2      	subs	r2, r2, r3
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	689a      	ldr	r2, [r3, #8]
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	0018      	movs	r0, r3
 800b74a:	f001 f9cf 	bl	800caec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	2300      	movs	r3, #0
 800b752:	2200      	movs	r2, #0
 800b754:	2100      	movs	r1, #0
 800b756:	f001 ff33 	bl	800d5c0 <USBD_LL_PrepareReceive>
 800b75a:	e049      	b.n	800b7f0 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	68da      	ldr	r2, [r3, #12]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	429a      	cmp	r2, r3
 800b766:	d11f      	bne.n	800b7a8 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b770:	429a      	cmp	r2, r3
 800b772:	d319      	bcc.n	800b7a8 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	68f9      	ldr	r1, [r7, #12]
 800b77a:	23a6      	movs	r3, #166	@ 0xa6
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b780:	429a      	cmp	r2, r3
 800b782:	d211      	bcs.n	800b7a8 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	2100      	movs	r1, #0
 800b78a:	0018      	movs	r0, r3
 800b78c:	f001 f9ae 	bl	800caec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	23a6      	movs	r3, #166	@ 0xa6
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	2100      	movs	r1, #0
 800b798:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	2300      	movs	r3, #0
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	f001 ff0d 	bl	800d5c0 <USBD_LL_PrepareReceive>
 800b7a6:	e023      	b.n	800b7f0 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	23a7      	movs	r3, #167	@ 0xa7
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	5cd3      	ldrb	r3, [r2, r3]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d113      	bne.n	800b7de <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	23ae      	movs	r3, #174	@ 0xae
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	58d3      	ldr	r3, [r2, r3]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00c      	beq.n	800b7de <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	23b5      	movs	r3, #181	@ 0xb5
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	23ae      	movs	r3, #174	@ 0xae
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	58d3      	ldr	r3, [r2, r3]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	0010      	movs	r0, r2
 800b7dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2180      	movs	r1, #128	@ 0x80
 800b7e2:	0018      	movs	r0, r3
 800b7e4:	f001 fe0b 	bl	800d3fe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	f001 f9d4 	bl	800cb98 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	23a8      	movs	r3, #168	@ 0xa8
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	5cd3      	ldrb	r3, [r2, r3]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d050      	beq.n	800b89e <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0018      	movs	r0, r3
 800b800:	f7ff fdd9 	bl	800b3b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	23a8      	movs	r3, #168	@ 0xa8
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	2100      	movs	r1, #0
 800b80c:	54d1      	strb	r1, [r2, r3]
 800b80e:	e046      	b.n	800b89e <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b810:	260b      	movs	r6, #11
 800b812:	19bb      	adds	r3, r7, r6
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2280      	movs	r2, #128	@ 0x80
 800b818:	4252      	negs	r2, r2
 800b81a:	4313      	orrs	r3, r2
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	2517      	movs	r5, #23
 800b820:	197c      	adds	r4, r7, r5
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	0011      	movs	r1, r2
 800b826:	0018      	movs	r0, r3
 800b828:	f000 f911 	bl	800ba4e <USBD_CoreFindEP>
 800b82c:	0003      	movs	r3, r0
 800b82e:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b830:	0029      	movs	r1, r5
 800b832:	187b      	adds	r3, r7, r1
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2bff      	cmp	r3, #255	@ 0xff
 800b838:	d031      	beq.n	800b89e <USBD_LL_DataInStage+0x1a6>
 800b83a:	187b      	adds	r3, r7, r1
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d12d      	bne.n	800b89e <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	23a7      	movs	r3, #167	@ 0xa7
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	5cd3      	ldrb	r3, [r2, r3]
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d126      	bne.n	800b89e <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b850:	187b      	adds	r3, r7, r1
 800b852:	781a      	ldrb	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	32ae      	adds	r2, #174	@ 0xae
 800b858:	0092      	lsls	r2, r2, #2
 800b85a:	58d3      	ldr	r3, [r2, r3]
 800b85c:	695b      	ldr	r3, [r3, #20]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01d      	beq.n	800b89e <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 800b862:	0008      	movs	r0, r1
 800b864:	187b      	adds	r3, r7, r1
 800b866:	7819      	ldrb	r1, [r3, #0]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	23b5      	movs	r3, #181	@ 0xb5
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b870:	183b      	adds	r3, r7, r0
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	32ae      	adds	r2, #174	@ 0xae
 800b878:	0092      	lsls	r2, r2, #2
 800b87a:	58d3      	ldr	r3, [r2, r3]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	2516      	movs	r5, #22
 800b880:	197c      	adds	r4, r7, r5
 800b882:	19ba      	adds	r2, r7, r6
 800b884:	7811      	ldrb	r1, [r2, #0]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	0010      	movs	r0, r2
 800b88a:	4798      	blx	r3
 800b88c:	0003      	movs	r3, r0
 800b88e:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 800b890:	197b      	adds	r3, r7, r5
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 800b898:	197b      	adds	r3, r7, r5
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	e000      	b.n	800b8a0 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	b007      	add	sp, #28
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8b0:	240f      	movs	r4, #15
 800b8b2:	193b      	adds	r3, r7, r4
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	23a7      	movs	r3, #167	@ 0xa7
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	2101      	movs	r1, #1
 800b8c0:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	23a5      	movs	r3, #165	@ 0xa5
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	23a9      	movs	r3, #169	@ 0xa9
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	2100      	movs	r1, #0
 800b8da:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	23a8      	movs	r3, #168	@ 0xa8
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	23ae      	movs	r3, #174	@ 0xae
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	58d3      	ldr	r3, [r2, r3]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d016      	beq.n	800b920 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	23ae      	movs	r3, #174	@ 0xae
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	58d3      	ldr	r3, [r2, r3]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00f      	beq.n	800b920 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	23ae      	movs	r3, #174	@ 0xae
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	58d3      	ldr	r3, [r2, r3]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	b2d9      	uxtb	r1, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	0018      	movs	r0, r3
 800b914:	4790      	blx	r2
 800b916:	1e03      	subs	r3, r0, #0
 800b918:	d002      	beq.n	800b920 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800b91a:	193b      	adds	r3, r7, r4
 800b91c:	2203      	movs	r2, #3
 800b91e:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	2340      	movs	r3, #64	@ 0x40
 800b924:	2200      	movs	r2, #0
 800b926:	2100      	movs	r1, #0
 800b928:	f001 fd07 	bl	800d33a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	23b2      	movs	r3, #178	@ 0xb2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	2101      	movs	r1, #1
 800b934:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	23b0      	movs	r3, #176	@ 0xb0
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	2140      	movs	r1, #64	@ 0x40
 800b93e:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	2340      	movs	r3, #64	@ 0x40
 800b944:	2200      	movs	r2, #0
 800b946:	2180      	movs	r1, #128	@ 0x80
 800b948:	f001 fcf7 	bl	800d33a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2240      	movs	r2, #64	@ 0x40
 800b956:	621a      	str	r2, [r3, #32]

  return ret;
 800b958:	230f      	movs	r3, #15
 800b95a:	18fb      	adds	r3, r7, r3
 800b95c:	781b      	ldrb	r3, [r3, #0]
}
 800b95e:	0018      	movs	r0, r3
 800b960:	46bd      	mov	sp, r7
 800b962:	b005      	add	sp, #20
 800b964:	bd90      	pop	{r4, r7, pc}

0800b966 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	000a      	movs	r2, r1
 800b970:	1cfb      	adds	r3, r7, #3
 800b972:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	1cfa      	adds	r2, r7, #3
 800b978:	7812      	ldrb	r2, [r2, #0]
 800b97a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	0018      	movs	r0, r3
 800b980:	46bd      	mov	sp, r7
 800b982:	b002      	add	sp, #8
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	23a7      	movs	r3, #167	@ 0xa7
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	5cd3      	ldrb	r3, [r2, r3]
 800b998:	b2d9      	uxtb	r1, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a05      	ldr	r2, [pc, #20]	@ (800b9b4 <USBD_LL_Suspend+0x2c>)
 800b99e:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	23a7      	movs	r3, #167	@ 0xa7
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	2104      	movs	r1, #4
 800b9a8:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b002      	add	sp, #8
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	0000029d 	.word	0x0000029d

0800b9b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	23a7      	movs	r3, #167	@ 0xa7
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	5cd3      	ldrb	r3, [r2, r3]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	d107      	bne.n	800b9de <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a05      	ldr	r2, [pc, #20]	@ (800b9e8 <USBD_LL_Resume+0x30>)
 800b9d2:	5c9b      	ldrb	r3, [r3, r2]
 800b9d4:	b2d9      	uxtb	r1, r3
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	23a7      	movs	r3, #167	@ 0xa7
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	0018      	movs	r0, r3
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	b002      	add	sp, #8
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	0000029d 	.word	0x0000029d

0800b9ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	23a7      	movs	r3, #167	@ 0xa7
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	5cd3      	ldrb	r3, [r2, r3]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d114      	bne.n	800ba2c <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	23ae      	movs	r3, #174	@ 0xae
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	58d3      	ldr	r3, [r2, r3]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00e      	beq.n	800ba2c <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	23ae      	movs	r3, #174	@ 0xae
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	58d3      	ldr	r3, [r2, r3]
 800ba16:	69db      	ldr	r3, [r3, #28]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d007      	beq.n	800ba2c <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	23ae      	movs	r3, #174	@ 0xae
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	58d3      	ldr	r3, [r2, r3]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	0010      	movs	r0, r2
 800ba2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	0018      	movs	r0, r3
 800ba30:	46bd      	mov	sp, r7
 800ba32:	b002      	add	sp, #8
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b082      	sub	sp, #8
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	000a      	movs	r2, r1
 800ba40:	1cfb      	adds	r3, r7, #3
 800ba42:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba46:	0018      	movs	r0, r3
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b002      	add	sp, #8
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	000a      	movs	r2, r1
 800ba58:	1cfb      	adds	r3, r7, #3
 800ba5a:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba5e:	0018      	movs	r0, r3
 800ba60:	46bd      	mov	sp, r7
 800ba62:	b002      	add	sp, #8
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b086      	sub	sp, #24
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	000a      	movs	r2, r1
 800ba70:	1cfb      	adds	r3, r7, #3
 800ba72:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	789a      	ldrb	r2, [r3, #2]
 800ba84:	78db      	ldrb	r3, [r3, #3]
 800ba86:	021b      	lsls	r3, r3, #8
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	7812      	ldrb	r2, [r2, #0]
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d92a      	bls.n	800baea <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	001a      	movs	r2, r3
 800ba9a:	230a      	movs	r3, #10
 800ba9c:	18fb      	adds	r3, r7, r3
 800ba9e:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800baa0:	e016      	b.n	800bad0 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800baa2:	230a      	movs	r3, #10
 800baa4:	18fa      	adds	r2, r7, r3
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	0011      	movs	r1, r2
 800baaa:	0018      	movs	r0, r3
 800baac:	f000 f822 	bl	800baf4 <USBD_GetNextDesc>
 800bab0:	0003      	movs	r3, r0
 800bab2:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	785b      	ldrb	r3, [r3, #1]
 800bab8:	2b05      	cmp	r3, #5
 800baba:	d109      	bne.n	800bad0 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	789b      	ldrb	r3, [r3, #2]
 800bac4:	1cfa      	adds	r2, r7, #3
 800bac6:	7812      	ldrb	r2, [r2, #0]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d00d      	beq.n	800bae8 <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bacc:	2300      	movs	r3, #0
 800bace:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	789a      	ldrb	r2, [r3, #2]
 800bad4:	78db      	ldrb	r3, [r3, #3]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	4313      	orrs	r3, r2
 800bada:	b29a      	uxth	r2, r3
 800badc:	230a      	movs	r3, #10
 800bade:	18fb      	adds	r3, r7, r3
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d8dd      	bhi.n	800baa2 <USBD_GetEpDesc+0x3c>
 800bae6:	e000      	b.n	800baea <USBD_GetEpDesc+0x84>
          break;
 800bae8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 800baea:	693b      	ldr	r3, [r7, #16]
}
 800baec:	0018      	movs	r0, r3
 800baee:	46bd      	mov	sp, r7
 800baf0:	b006      	add	sp, #24
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	7812      	ldrb	r2, [r2, #0]
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	001a      	movs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	189b      	adds	r3, r3, r2
 800bb1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
}
 800bb20:	0018      	movs	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b004      	add	sp, #16
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	781a      	ldrb	r2, [r3, #0]
 800bb38:	2112      	movs	r1, #18
 800bb3a:	187b      	adds	r3, r7, r1
 800bb3c:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	3301      	adds	r3, #1
 800bb42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	781a      	ldrb	r2, [r3, #0]
 800bb48:	2010      	movs	r0, #16
 800bb4a:	183b      	adds	r3, r7, r0
 800bb4c:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb4e:	183b      	adds	r3, r7, r0
 800bb50:	2200      	movs	r2, #0
 800bb52:	5e9b      	ldrsh	r3, [r3, r2]
 800bb54:	021b      	lsls	r3, r3, #8
 800bb56:	b21a      	sxth	r2, r3
 800bb58:	187b      	adds	r3, r7, r1
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	5e5b      	ldrsh	r3, [r3, r1]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	b21a      	sxth	r2, r3
 800bb62:	210e      	movs	r1, #14
 800bb64:	187b      	adds	r3, r7, r1
 800bb66:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800bb68:	187b      	adds	r3, r7, r1
 800bb6a:	881b      	ldrh	r3, [r3, #0]
}
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	b006      	add	sp, #24
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb7e:	230f      	movs	r3, #15
 800bb80:	18fb      	adds	r3, r7, r3
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	001a      	movs	r2, r3
 800bb8c:	2360      	movs	r3, #96	@ 0x60
 800bb8e:	4013      	ands	r3, r2
 800bb90:	2b40      	cmp	r3, #64	@ 0x40
 800bb92:	d004      	beq.n	800bb9e <USBD_StdDevReq+0x2a>
 800bb94:	d85b      	bhi.n	800bc4e <USBD_StdDevReq+0xda>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d013      	beq.n	800bbc2 <USBD_StdDevReq+0x4e>
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d157      	bne.n	800bc4e <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	23b5      	movs	r3, #181	@ 0xb5
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	58d2      	ldr	r2, [r2, r3]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	32ae      	adds	r2, #174	@ 0xae
 800bbaa:	0092      	lsls	r2, r2, #2
 800bbac:	58d3      	ldr	r3, [r2, r3]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	220f      	movs	r2, #15
 800bbb2:	18bc      	adds	r4, r7, r2
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	0010      	movs	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	0003      	movs	r3, r0
 800bbbe:	7023      	strb	r3, [r4, #0]
      break;
 800bbc0:	e04c      	b.n	800bc5c <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	785b      	ldrb	r3, [r3, #1]
 800bbc6:	2b09      	cmp	r3, #9
 800bbc8:	d839      	bhi.n	800bc3e <USBD_StdDevReq+0xca>
 800bbca:	009a      	lsls	r2, r3, #2
 800bbcc:	4b27      	ldr	r3, [pc, #156]	@ (800bc6c <USBD_StdDevReq+0xf8>)
 800bbce:	18d3      	adds	r3, r2, r3
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0011      	movs	r1, r2
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f000 fada 	bl	800c194 <USBD_GetDescriptor>
          break;
 800bbe0:	e034      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	0011      	movs	r1, r2
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f000 fcad 	bl	800c548 <USBD_SetAddress>
          break;
 800bbee:	e02d      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbf0:	230f      	movs	r3, #15
 800bbf2:	18fc      	adds	r4, r7, r3
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	0011      	movs	r1, r2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f000 fcfa 	bl	800c5f4 <USBD_SetConfig>
 800bc00:	0003      	movs	r3, r0
 800bc02:	7023      	strb	r3, [r4, #0]
          break;
 800bc04:	e022      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc06:	683a      	ldr	r2, [r7, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0011      	movs	r1, r2
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	f000 fdbf 	bl	800c790 <USBD_GetConfig>
          break;
 800bc12:	e01b      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	0011      	movs	r1, r2
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	f000 fdf4 	bl	800c808 <USBD_GetStatus>
          break;
 800bc20:	e014      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	0011      	movs	r1, r2
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f000 fe28 	bl	800c87e <USBD_SetFeature>
          break;
 800bc2e:	e00d      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	0011      	movs	r1, r2
 800bc36:	0018      	movs	r0, r3
 800bc38:	f000 fe50 	bl	800c8dc <USBD_ClrFeature>
          break;
 800bc3c:	e006      	b.n	800bc4c <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	0011      	movs	r1, r2
 800bc44:	0018      	movs	r0, r3
 800bc46:	f000 fead 	bl	800c9a4 <USBD_CtlError>
          break;
 800bc4a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bc4c:	e006      	b.n	800bc5c <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	0011      	movs	r1, r2
 800bc54:	0018      	movs	r0, r3
 800bc56:	f000 fea5 	bl	800c9a4 <USBD_CtlError>
      break;
 800bc5a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bc5c:	230f      	movs	r3, #15
 800bc5e:	18fb      	adds	r3, r7, r3
 800bc60:	781b      	ldrb	r3, [r3, #0]
}
 800bc62:	0018      	movs	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	b005      	add	sp, #20
 800bc68:	bd90      	pop	{r4, r7, pc}
 800bc6a:	46c0      	nop			@ (mov r8, r8)
 800bc6c:	08011c38 	.word	0x08011c38

0800bc70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc70:	b5b0      	push	{r4, r5, r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7a:	230f      	movs	r3, #15
 800bc7c:	18fb      	adds	r3, r7, r3
 800bc7e:	2200      	movs	r2, #0
 800bc80:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	001a      	movs	r2, r3
 800bc88:	2360      	movs	r3, #96	@ 0x60
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b40      	cmp	r3, #64	@ 0x40
 800bc8e:	d005      	beq.n	800bc9c <USBD_StdItfReq+0x2c>
 800bc90:	d900      	bls.n	800bc94 <USBD_StdItfReq+0x24>
 800bc92:	e06c      	b.n	800bd6e <USBD_StdItfReq+0xfe>
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <USBD_StdItfReq+0x2c>
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	d168      	bne.n	800bd6e <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	23a7      	movs	r3, #167	@ 0xa7
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	5cd3      	ldrb	r3, [r2, r3]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	3b01      	subs	r3, #1
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d857      	bhi.n	800bd5c <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	889b      	ldrh	r3, [r3, #4]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d84b      	bhi.n	800bd4e <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	889b      	ldrh	r3, [r3, #4]
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	250e      	movs	r5, #14
 800bcbe:	197c      	adds	r4, r7, r5
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	0011      	movs	r1, r2
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	f7ff feb6 	bl	800ba36 <USBD_CoreFindIF>
 800bcca:	0003      	movs	r3, r0
 800bccc:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcce:	0029      	movs	r1, r5
 800bcd0:	187b      	adds	r3, r7, r1
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2bff      	cmp	r3, #255	@ 0xff
 800bcd6:	d028      	beq.n	800bd2a <USBD_StdItfReq+0xba>
 800bcd8:	187b      	adds	r3, r7, r1
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d124      	bne.n	800bd2a <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bce0:	187b      	adds	r3, r7, r1
 800bce2:	781a      	ldrb	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	32ae      	adds	r2, #174	@ 0xae
 800bce8:	0092      	lsls	r2, r2, #2
 800bcea:	58d3      	ldr	r3, [r2, r3]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d016      	beq.n	800bd20 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 800bcf2:	0008      	movs	r0, r1
 800bcf4:	187b      	adds	r3, r7, r1
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	23b5      	movs	r3, #181	@ 0xb5
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd00:	183b      	adds	r3, r7, r0
 800bd02:	781a      	ldrb	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	32ae      	adds	r2, #174	@ 0xae
 800bd08:	0092      	lsls	r2, r2, #2
 800bd0a:	58d3      	ldr	r3, [r2, r3]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	220f      	movs	r2, #15
 800bd10:	18bc      	adds	r4, r7, r2
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	0010      	movs	r0, r2
 800bd18:	4798      	blx	r3
 800bd1a:	0003      	movs	r3, r0
 800bd1c:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd1e:	e008      	b.n	800bd32 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bd20:	230f      	movs	r3, #15
 800bd22:	18fb      	adds	r3, r7, r3
 800bd24:	2203      	movs	r2, #3
 800bd26:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800bd28:	e003      	b.n	800bd32 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bd2a:	230f      	movs	r3, #15
 800bd2c:	18fb      	adds	r3, r7, r3
 800bd2e:	2203      	movs	r2, #3
 800bd30:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	88db      	ldrh	r3, [r3, #6]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d117      	bne.n	800bd6a <USBD_StdItfReq+0xfa>
 800bd3a:	230f      	movs	r3, #15
 800bd3c:	18fb      	adds	r3, r7, r3
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d112      	bne.n	800bd6a <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	0018      	movs	r0, r3
 800bd48:	f000 ff12 	bl	800cb70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd4c:	e00d      	b.n	800bd6a <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	0011      	movs	r1, r2
 800bd54:	0018      	movs	r0, r3
 800bd56:	f000 fe25 	bl	800c9a4 <USBD_CtlError>
          break;
 800bd5a:	e006      	b.n	800bd6a <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	0011      	movs	r1, r2
 800bd62:	0018      	movs	r0, r3
 800bd64:	f000 fe1e 	bl	800c9a4 <USBD_CtlError>
          break;
 800bd68:	e000      	b.n	800bd6c <USBD_StdItfReq+0xfc>
          break;
 800bd6a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bd6c:	e006      	b.n	800bd7c <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	0011      	movs	r1, r2
 800bd74:	0018      	movs	r0, r3
 800bd76:	f000 fe15 	bl	800c9a4 <USBD_CtlError>
      break;
 800bd7a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bd7c:	230f      	movs	r3, #15
 800bd7e:	18fb      	adds	r3, r7, r3
 800bd80:	781b      	ldrb	r3, [r3, #0]
}
 800bd82:	0018      	movs	r0, r3
 800bd84:	46bd      	mov	sp, r7
 800bd86:	b004      	add	sp, #16
 800bd88:	bdb0      	pop	{r4, r5, r7, pc}

0800bd8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd8a:	b5b0      	push	{r4, r5, r7, lr}
 800bd8c:	b084      	sub	sp, #16
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd94:	230f      	movs	r3, #15
 800bd96:	18fb      	adds	r3, r7, r3
 800bd98:	2200      	movs	r2, #0
 800bd9a:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	889a      	ldrh	r2, [r3, #4]
 800bda0:	230e      	movs	r3, #14
 800bda2:	18fb      	adds	r3, r7, r3
 800bda4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	001a      	movs	r2, r3
 800bdac:	2360      	movs	r3, #96	@ 0x60
 800bdae:	4013      	ands	r3, r2
 800bdb0:	2b40      	cmp	r3, #64	@ 0x40
 800bdb2:	d006      	beq.n	800bdc2 <USBD_StdEPReq+0x38>
 800bdb4:	d900      	bls.n	800bdb8 <USBD_StdEPReq+0x2e>
 800bdb6:	e1de      	b.n	800c176 <USBD_StdEPReq+0x3ec>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d039      	beq.n	800be30 <USBD_StdEPReq+0xa6>
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	d000      	beq.n	800bdc2 <USBD_StdEPReq+0x38>
 800bdc0:	e1d9      	b.n	800c176 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bdc2:	250d      	movs	r5, #13
 800bdc4:	197c      	adds	r4, r7, r5
 800bdc6:	230e      	movs	r3, #14
 800bdc8:	18fb      	adds	r3, r7, r3
 800bdca:	781a      	ldrb	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	0011      	movs	r1, r2
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	f7ff fe3c 	bl	800ba4e <USBD_CoreFindEP>
 800bdd6:	0003      	movs	r3, r0
 800bdd8:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdda:	197b      	adds	r3, r7, r5
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2bff      	cmp	r3, #255	@ 0xff
 800bde0:	d100      	bne.n	800bde4 <USBD_StdEPReq+0x5a>
 800bde2:	e1cf      	b.n	800c184 <USBD_StdEPReq+0x3fa>
 800bde4:	197b      	adds	r3, r7, r5
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d000      	beq.n	800bdee <USBD_StdEPReq+0x64>
 800bdec:	e1ca      	b.n	800c184 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800bdee:	197b      	adds	r3, r7, r5
 800bdf0:	7819      	ldrb	r1, [r3, #0]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	23b5      	movs	r3, #181	@ 0xb5
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bdfa:	0029      	movs	r1, r5
 800bdfc:	187b      	adds	r3, r7, r1
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	32ae      	adds	r2, #174	@ 0xae
 800be04:	0092      	lsls	r2, r2, #2
 800be06:	58d3      	ldr	r3, [r2, r3]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d100      	bne.n	800be10 <USBD_StdEPReq+0x86>
 800be0e:	e1b9      	b.n	800c184 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be10:	187b      	adds	r3, r7, r1
 800be12:	781a      	ldrb	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32ae      	adds	r2, #174	@ 0xae
 800be18:	0092      	lsls	r2, r2, #2
 800be1a:	58d3      	ldr	r3, [r2, r3]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	220f      	movs	r2, #15
 800be20:	18bc      	adds	r4, r7, r2
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	0010      	movs	r0, r2
 800be28:	4798      	blx	r3
 800be2a:	0003      	movs	r3, r0
 800be2c:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 800be2e:	e1a9      	b.n	800c184 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	785b      	ldrb	r3, [r3, #1]
 800be34:	2b03      	cmp	r3, #3
 800be36:	d007      	beq.n	800be48 <USBD_StdEPReq+0xbe>
 800be38:	dd00      	ble.n	800be3c <USBD_StdEPReq+0xb2>
 800be3a:	e194      	b.n	800c166 <USBD_StdEPReq+0x3dc>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d100      	bne.n	800be42 <USBD_StdEPReq+0xb8>
 800be40:	e0c9      	b.n	800bfd6 <USBD_StdEPReq+0x24c>
 800be42:	2b01      	cmp	r3, #1
 800be44:	d04d      	beq.n	800bee2 <USBD_StdEPReq+0x158>
 800be46:	e18e      	b.n	800c166 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	23a7      	movs	r3, #167	@ 0xa7
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	5cd3      	ldrb	r3, [r2, r3]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d002      	beq.n	800be5c <USBD_StdEPReq+0xd2>
 800be56:	2b03      	cmp	r3, #3
 800be58:	d01e      	beq.n	800be98 <USBD_StdEPReq+0x10e>
 800be5a:	e03a      	b.n	800bed2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be5c:	220e      	movs	r2, #14
 800be5e:	18bb      	adds	r3, r7, r2
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d011      	beq.n	800be8a <USBD_StdEPReq+0x100>
 800be66:	18bb      	adds	r3, r7, r2
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	2b80      	cmp	r3, #128	@ 0x80
 800be6c:	d00d      	beq.n	800be8a <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be6e:	18bb      	adds	r3, r7, r2
 800be70:	781a      	ldrb	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	0011      	movs	r1, r2
 800be76:	0018      	movs	r0, r3
 800be78:	f001 fac1 	bl	800d3fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2180      	movs	r1, #128	@ 0x80
 800be80:	0018      	movs	r0, r3
 800be82:	f001 fabc 	bl	800d3fe <USBD_LL_StallEP>
 800be86:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be88:	e02a      	b.n	800bee0 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	0011      	movs	r1, r2
 800be90:	0018      	movs	r0, r3
 800be92:	f000 fd87 	bl	800c9a4 <USBD_CtlError>
              break;
 800be96:	e023      	b.n	800bee0 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	885b      	ldrh	r3, [r3, #2]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d113      	bne.n	800bec8 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bea0:	220e      	movs	r2, #14
 800bea2:	18bb      	adds	r3, r7, r2
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00e      	beq.n	800bec8 <USBD_StdEPReq+0x13e>
 800beaa:	18bb      	adds	r3, r7, r2
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b80      	cmp	r3, #128	@ 0x80
 800beb0:	d00a      	beq.n	800bec8 <USBD_StdEPReq+0x13e>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	88db      	ldrh	r3, [r3, #6]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d106      	bne.n	800bec8 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800beba:	18bb      	adds	r3, r7, r2
 800bebc:	781a      	ldrb	r2, [r3, #0]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	0011      	movs	r1, r2
 800bec2:	0018      	movs	r0, r3
 800bec4:	f001 fa9b 	bl	800d3fe <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	0018      	movs	r0, r3
 800becc:	f000 fe50 	bl	800cb70 <USBD_CtlSendStatus>

              break;
 800bed0:	e006      	b.n	800bee0 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	0011      	movs	r1, r2
 800bed8:	0018      	movs	r0, r3
 800beda:	f000 fd63 	bl	800c9a4 <USBD_CtlError>
              break;
 800bede:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bee0:	e148      	b.n	800c174 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	23a7      	movs	r3, #167	@ 0xa7
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	5cd3      	ldrb	r3, [r2, r3]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b02      	cmp	r3, #2
 800beee:	d002      	beq.n	800bef6 <USBD_StdEPReq+0x16c>
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d01e      	beq.n	800bf32 <USBD_StdEPReq+0x1a8>
 800bef4:	e066      	b.n	800bfc4 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bef6:	220e      	movs	r2, #14
 800bef8:	18bb      	adds	r3, r7, r2
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d011      	beq.n	800bf24 <USBD_StdEPReq+0x19a>
 800bf00:	18bb      	adds	r3, r7, r2
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	2b80      	cmp	r3, #128	@ 0x80
 800bf06:	d00d      	beq.n	800bf24 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf08:	18bb      	adds	r3, r7, r2
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	0011      	movs	r1, r2
 800bf10:	0018      	movs	r0, r3
 800bf12:	f001 fa74 	bl	800d3fe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2180      	movs	r1, #128	@ 0x80
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f001 fa6f 	bl	800d3fe <USBD_LL_StallEP>
 800bf20:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf22:	e057      	b.n	800bfd4 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	0011      	movs	r1, r2
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	f000 fd3a 	bl	800c9a4 <USBD_CtlError>
              break;
 800bf30:	e050      	b.n	800bfd4 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	885b      	ldrh	r3, [r3, #2]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d14b      	bne.n	800bfd2 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf3a:	210e      	movs	r1, #14
 800bf3c:	187b      	adds	r3, r7, r1
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	227f      	movs	r2, #127	@ 0x7f
 800bf42:	4013      	ands	r3, r2
 800bf44:	d006      	beq.n	800bf54 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	0011      	movs	r1, r2
 800bf4e:	0018      	movs	r0, r3
 800bf50:	f001 fa80 	bl	800d454 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	0018      	movs	r0, r3
 800bf58:	f000 fe0a 	bl	800cb70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf5c:	250d      	movs	r5, #13
 800bf5e:	197c      	adds	r4, r7, r5
 800bf60:	230e      	movs	r3, #14
 800bf62:	18fb      	adds	r3, r7, r3
 800bf64:	781a      	ldrb	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	0011      	movs	r1, r2
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f7ff fd6f 	bl	800ba4e <USBD_CoreFindEP>
 800bf70:	0003      	movs	r3, r0
 800bf72:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf74:	197b      	adds	r3, r7, r5
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	2bff      	cmp	r3, #255	@ 0xff
 800bf7a:	d02a      	beq.n	800bfd2 <USBD_StdEPReq+0x248>
 800bf7c:	197b      	adds	r3, r7, r5
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d126      	bne.n	800bfd2 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 800bf84:	197b      	adds	r3, r7, r5
 800bf86:	7819      	ldrb	r1, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	23b5      	movs	r3, #181	@ 0xb5
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf90:	0029      	movs	r1, r5
 800bf92:	187b      	adds	r3, r7, r1
 800bf94:	781a      	ldrb	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	32ae      	adds	r2, #174	@ 0xae
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	58d3      	ldr	r3, [r2, r3]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d016      	beq.n	800bfd2 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfa4:	187b      	adds	r3, r7, r1
 800bfa6:	781a      	ldrb	r2, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	32ae      	adds	r2, #174	@ 0xae
 800bfac:	0092      	lsls	r2, r2, #2
 800bfae:	58d3      	ldr	r3, [r2, r3]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	220f      	movs	r2, #15
 800bfb4:	18bc      	adds	r4, r7, r2
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	0010      	movs	r0, r2
 800bfbc:	4798      	blx	r3
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 800bfc2:	e006      	b.n	800bfd2 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	0011      	movs	r1, r2
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f000 fcea 	bl	800c9a4 <USBD_CtlError>
              break;
 800bfd0:	e000      	b.n	800bfd4 <USBD_StdEPReq+0x24a>
              break;
 800bfd2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bfd4:	e0ce      	b.n	800c174 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	23a7      	movs	r3, #167	@ 0xa7
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	5cd3      	ldrb	r3, [r2, r3]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	2b02      	cmp	r3, #2
 800bfe2:	d002      	beq.n	800bfea <USBD_StdEPReq+0x260>
 800bfe4:	2b03      	cmp	r3, #3
 800bfe6:	d03c      	beq.n	800c062 <USBD_StdEPReq+0x2d8>
 800bfe8:	e0b5      	b.n	800c156 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfea:	220e      	movs	r2, #14
 800bfec:	18bb      	adds	r3, r7, r2
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00a      	beq.n	800c00a <USBD_StdEPReq+0x280>
 800bff4:	18bb      	adds	r3, r7, r2
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b80      	cmp	r3, #128	@ 0x80
 800bffa:	d006      	beq.n	800c00a <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	0011      	movs	r1, r2
 800c002:	0018      	movs	r0, r3
 800c004:	f000 fcce 	bl	800c9a4 <USBD_CtlError>
                break;
 800c008:	e0ac      	b.n	800c164 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c00a:	220e      	movs	r2, #14
 800c00c:	18bb      	adds	r3, r7, r2
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	b25b      	sxtb	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	da0c      	bge.n	800c030 <USBD_StdEPReq+0x2a6>
 800c016:	18bb      	adds	r3, r7, r2
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	227f      	movs	r2, #127	@ 0x7f
 800c01c:	401a      	ands	r2, r3
 800c01e:	0013      	movs	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	189b      	adds	r3, r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	3310      	adds	r3, #16
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	18d3      	adds	r3, r2, r3
 800c02c:	3304      	adds	r3, #4
 800c02e:	e00d      	b.n	800c04c <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c030:	230e      	movs	r3, #14
 800c032:	18fb      	adds	r3, r7, r3
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	227f      	movs	r2, #127	@ 0x7f
 800c038:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c03a:	0013      	movs	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	189b      	adds	r3, r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	3351      	adds	r3, #81	@ 0x51
 800c044:	33ff      	adds	r3, #255	@ 0xff
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	18d3      	adds	r3, r2, r3
 800c04a:	3304      	adds	r3, #4
 800c04c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2202      	movs	r2, #2
 800c05a:	0018      	movs	r0, r3
 800c05c:	f000 fd2a 	bl	800cab4 <USBD_CtlSendData>
              break;
 800c060:	e080      	b.n	800c164 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c062:	220e      	movs	r2, #14
 800c064:	18bb      	adds	r3, r7, r2
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da14      	bge.n	800c098 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c06e:	18bb      	adds	r3, r7, r2
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	220f      	movs	r2, #15
 800c074:	401a      	ands	r2, r3
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	0013      	movs	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	189b      	adds	r3, r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	18cb      	adds	r3, r1, r3
 800c082:	3324      	adds	r3, #36	@ 0x24
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d11e      	bne.n	800c0c8 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	0011      	movs	r1, r2
 800c090:	0018      	movs	r0, r3
 800c092:	f000 fc87 	bl	800c9a4 <USBD_CtlError>
                  break;
 800c096:	e065      	b.n	800c164 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c098:	230e      	movs	r3, #14
 800c09a:	18fb      	adds	r3, r7, r3
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	220f      	movs	r2, #15
 800c0a0:	401a      	ands	r2, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	23b2      	movs	r3, #178	@ 0xb2
 800c0a6:	0059      	lsls	r1, r3, #1
 800c0a8:	0013      	movs	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	189b      	adds	r3, r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	18c3      	adds	r3, r0, r3
 800c0b2:	185b      	adds	r3, r3, r1
 800c0b4:	881b      	ldrh	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d106      	bne.n	800c0c8 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	0011      	movs	r1, r2
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	f000 fc6f 	bl	800c9a4 <USBD_CtlError>
                  break;
 800c0c6:	e04d      	b.n	800c164 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c8:	220e      	movs	r2, #14
 800c0ca:	18bb      	adds	r3, r7, r2
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	b25b      	sxtb	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	da0c      	bge.n	800c0ee <USBD_StdEPReq+0x364>
 800c0d4:	18bb      	adds	r3, r7, r2
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	227f      	movs	r2, #127	@ 0x7f
 800c0da:	401a      	ands	r2, r3
 800c0dc:	0013      	movs	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	189b      	adds	r3, r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	3310      	adds	r3, #16
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	18d3      	adds	r3, r2, r3
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	e00d      	b.n	800c10a <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0ee:	230e      	movs	r3, #14
 800c0f0:	18fb      	adds	r3, r7, r3
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	227f      	movs	r2, #127	@ 0x7f
 800c0f6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f8:	0013      	movs	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	189b      	adds	r3, r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	3351      	adds	r3, #81	@ 0x51
 800c102:	33ff      	adds	r3, #255	@ 0xff
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	18d3      	adds	r3, r2, r3
 800c108:	3304      	adds	r3, #4
 800c10a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c10c:	220e      	movs	r2, #14
 800c10e:	18bb      	adds	r3, r7, r2
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <USBD_StdEPReq+0x394>
 800c116:	18bb      	adds	r3, r7, r2
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b80      	cmp	r3, #128	@ 0x80
 800c11c:	d103      	bne.n	800c126 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	e010      	b.n	800c148 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c126:	230e      	movs	r3, #14
 800c128:	18fb      	adds	r3, r7, r3
 800c12a:	781a      	ldrb	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0011      	movs	r1, r2
 800c130:	0018      	movs	r0, r3
 800c132:	f001 f9ba 	bl	800d4aa <USBD_LL_IsStallEP>
 800c136:	1e03      	subs	r3, r0, #0
 800c138:	d003      	beq.n	800c142 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2201      	movs	r2, #1
 800c13e:	601a      	str	r2, [r3, #0]
 800c140:	e002      	b.n	800c148 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2200      	movs	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2202      	movs	r2, #2
 800c14e:	0018      	movs	r0, r3
 800c150:	f000 fcb0 	bl	800cab4 <USBD_CtlSendData>
              break;
 800c154:	e006      	b.n	800c164 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	0011      	movs	r1, r2
 800c15c:	0018      	movs	r0, r3
 800c15e:	f000 fc21 	bl	800c9a4 <USBD_CtlError>
              break;
 800c162:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c164:	e006      	b.n	800c174 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	0011      	movs	r1, r2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 fc19 	bl	800c9a4 <USBD_CtlError>
          break;
 800c172:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c174:	e007      	b.n	800c186 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	0011      	movs	r1, r2
 800c17c:	0018      	movs	r0, r3
 800c17e:	f000 fc11 	bl	800c9a4 <USBD_CtlError>
      break;
 800c182:	e000      	b.n	800c186 <USBD_StdEPReq+0x3fc>
      break;
 800c184:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c186:	230f      	movs	r3, #15
 800c188:	18fb      	adds	r3, r7, r3
 800c18a:	781b      	ldrb	r3, [r3, #0]
}
 800c18c:	0018      	movs	r0, r3
 800c18e:	46bd      	mov	sp, r7
 800c190:	b004      	add	sp, #16
 800c192:	bdb0      	pop	{r4, r5, r7, pc}

0800c194 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c19e:	2308      	movs	r3, #8
 800c1a0:	18fb      	adds	r3, r7, r3
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1aa:	230b      	movs	r3, #11
 800c1ac:	18fb      	adds	r3, r7, r3
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	2b0f      	cmp	r3, #15
 800c1bc:	d900      	bls.n	800c1c0 <USBD_GetDescriptor+0x2c>
 800c1be:	e17b      	b.n	800c4b8 <USBD_GetDescriptor+0x324>
 800c1c0:	009a      	lsls	r2, r3, #2
 800c1c2:	4bdd      	ldr	r3, [pc, #884]	@ (800c538 <USBD_GetDescriptor+0x3a4>)
 800c1c4:	18d3      	adds	r3, r2, r3
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	23ad      	movs	r3, #173	@ 0xad
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	58d3      	ldr	r3, [r2, r3]
 800c1d2:	69db      	ldr	r3, [r3, #28]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00d      	beq.n	800c1f4 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	23ad      	movs	r3, #173	@ 0xad
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	58d3      	ldr	r3, [r2, r3]
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	7c12      	ldrb	r2, [r2, #16]
 800c1e6:	2108      	movs	r1, #8
 800c1e8:	1879      	adds	r1, r7, r1
 800c1ea:	0010      	movs	r0, r2
 800c1ec:	4798      	blx	r3
 800c1ee:	0003      	movs	r3, r0
 800c1f0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1f2:	e16e      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800c1f4:	683a      	ldr	r2, [r7, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	0011      	movs	r1, r2
 800c1fa:	0018      	movs	r0, r3
 800c1fc:	f000 fbd2 	bl	800c9a4 <USBD_CtlError>
        err++;
 800c200:	210b      	movs	r1, #11
 800c202:	187b      	adds	r3, r7, r1
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	187b      	adds	r3, r7, r1
 800c208:	3201      	adds	r2, #1
 800c20a:	701a      	strb	r2, [r3, #0]
      break;
 800c20c:	e161      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	23ad      	movs	r3, #173	@ 0xad
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	58d3      	ldr	r3, [r2, r3]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	7c12      	ldrb	r2, [r2, #16]
 800c21c:	2108      	movs	r1, #8
 800c21e:	1879      	adds	r1, r7, r1
 800c220:	0010      	movs	r0, r2
 800c222:	4798      	blx	r3
 800c224:	0003      	movs	r3, r0
 800c226:	60fb      	str	r3, [r7, #12]
      break;
 800c228:	e153      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7c1b      	ldrb	r3, [r3, #16]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10f      	bne.n	800c252 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	23ae      	movs	r3, #174	@ 0xae
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	58d3      	ldr	r3, [r2, r3]
 800c23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c23c:	2208      	movs	r2, #8
 800c23e:	18ba      	adds	r2, r7, r2
 800c240:	0010      	movs	r0, r2
 800c242:	4798      	blx	r3
 800c244:	0003      	movs	r3, r0
 800c246:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	3301      	adds	r3, #1
 800c24c:	2202      	movs	r2, #2
 800c24e:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c250:	e13f      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	23ae      	movs	r3, #174	@ 0xae
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	58d3      	ldr	r3, [r2, r3]
 800c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25c:	2208      	movs	r2, #8
 800c25e:	18ba      	adds	r2, r7, r2
 800c260:	0010      	movs	r0, r2
 800c262:	4798      	blx	r3
 800c264:	0003      	movs	r3, r0
 800c266:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3301      	adds	r3, #1
 800c26c:	2202      	movs	r2, #2
 800c26e:	701a      	strb	r2, [r3, #0]
      break;
 800c270:	e12f      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	885b      	ldrh	r3, [r3, #2]
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b05      	cmp	r3, #5
 800c27a:	d900      	bls.n	800c27e <USBD_GetDescriptor+0xea>
 800c27c:	e0d0      	b.n	800c420 <USBD_GetDescriptor+0x28c>
 800c27e:	009a      	lsls	r2, r3, #2
 800c280:	4bae      	ldr	r3, [pc, #696]	@ (800c53c <USBD_GetDescriptor+0x3a8>)
 800c282:	18d3      	adds	r3, r2, r3
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	23ad      	movs	r3, #173	@ 0xad
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	58d3      	ldr	r3, [r2, r3]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00d      	beq.n	800c2b2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	23ad      	movs	r3, #173	@ 0xad
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	58d3      	ldr	r3, [r2, r3]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	7c12      	ldrb	r2, [r2, #16]
 800c2a4:	2108      	movs	r1, #8
 800c2a6:	1879      	adds	r1, r7, r1
 800c2a8:	0010      	movs	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	0003      	movs	r3, r0
 800c2ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b0:	e0c3      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	0011      	movs	r1, r2
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	f000 fb73 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c2be:	210b      	movs	r1, #11
 800c2c0:	187b      	adds	r3, r7, r1
 800c2c2:	781a      	ldrb	r2, [r3, #0]
 800c2c4:	187b      	adds	r3, r7, r1
 800c2c6:	3201      	adds	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
          break;
 800c2ca:	e0b6      	b.n	800c43a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	23ad      	movs	r3, #173	@ 0xad
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	58d3      	ldr	r3, [r2, r3]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00d      	beq.n	800c2f6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	23ad      	movs	r3, #173	@ 0xad
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	58d3      	ldr	r3, [r2, r3]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	7c12      	ldrb	r2, [r2, #16]
 800c2e8:	2108      	movs	r1, #8
 800c2ea:	1879      	adds	r1, r7, r1
 800c2ec:	0010      	movs	r0, r2
 800c2ee:	4798      	blx	r3
 800c2f0:	0003      	movs	r3, r0
 800c2f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f4:	e0a1      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0011      	movs	r1, r2
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f000 fb51 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c302:	210b      	movs	r1, #11
 800c304:	187b      	adds	r3, r7, r1
 800c306:	781a      	ldrb	r2, [r3, #0]
 800c308:	187b      	adds	r3, r7, r1
 800c30a:	3201      	adds	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
          break;
 800c30e:	e094      	b.n	800c43a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	23ad      	movs	r3, #173	@ 0xad
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	58d3      	ldr	r3, [r2, r3]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	23ad      	movs	r3, #173	@ 0xad
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	58d3      	ldr	r3, [r2, r3]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	2108      	movs	r1, #8
 800c32e:	1879      	adds	r1, r7, r1
 800c330:	0010      	movs	r0, r2
 800c332:	4798      	blx	r3
 800c334:	0003      	movs	r3, r0
 800c336:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c338:	e07f      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	0011      	movs	r1, r2
 800c340:	0018      	movs	r0, r3
 800c342:	f000 fb2f 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c346:	210b      	movs	r1, #11
 800c348:	187b      	adds	r3, r7, r1
 800c34a:	781a      	ldrb	r2, [r3, #0]
 800c34c:	187b      	adds	r3, r7, r1
 800c34e:	3201      	adds	r2, #1
 800c350:	701a      	strb	r2, [r3, #0]
          break;
 800c352:	e072      	b.n	800c43a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	23ad      	movs	r3, #173	@ 0xad
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	58d3      	ldr	r3, [r2, r3]
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00d      	beq.n	800c37e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	23ad      	movs	r3, #173	@ 0xad
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	58d3      	ldr	r3, [r2, r3]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	2108      	movs	r1, #8
 800c372:	1879      	adds	r1, r7, r1
 800c374:	0010      	movs	r0, r2
 800c376:	4798      	blx	r3
 800c378:	0003      	movs	r3, r0
 800c37a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c37c:	e05d      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	0011      	movs	r1, r2
 800c384:	0018      	movs	r0, r3
 800c386:	f000 fb0d 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c38a:	210b      	movs	r1, #11
 800c38c:	187b      	adds	r3, r7, r1
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	187b      	adds	r3, r7, r1
 800c392:	3201      	adds	r2, #1
 800c394:	701a      	strb	r2, [r3, #0]
          break;
 800c396:	e050      	b.n	800c43a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	23ad      	movs	r3, #173	@ 0xad
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	58d3      	ldr	r3, [r2, r3]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00d      	beq.n	800c3c2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	23ad      	movs	r3, #173	@ 0xad
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	58d3      	ldr	r3, [r2, r3]
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	7c12      	ldrb	r2, [r2, #16]
 800c3b4:	2108      	movs	r1, #8
 800c3b6:	1879      	adds	r1, r7, r1
 800c3b8:	0010      	movs	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	0003      	movs	r3, r0
 800c3be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c0:	e03b      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c3c2:	683a      	ldr	r2, [r7, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	0011      	movs	r1, r2
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f000 faeb 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c3ce:	210b      	movs	r1, #11
 800c3d0:	187b      	adds	r3, r7, r1
 800c3d2:	781a      	ldrb	r2, [r3, #0]
 800c3d4:	187b      	adds	r3, r7, r1
 800c3d6:	3201      	adds	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
          break;
 800c3da:	e02e      	b.n	800c43a <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	23ad      	movs	r3, #173	@ 0xad
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	58d3      	ldr	r3, [r2, r3]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00d      	beq.n	800c406 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	23ad      	movs	r3, #173	@ 0xad
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	58d3      	ldr	r3, [r2, r3]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	2108      	movs	r1, #8
 800c3fa:	1879      	adds	r1, r7, r1
 800c3fc:	0010      	movs	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	0003      	movs	r3, r0
 800c402:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c404:	e019      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	0011      	movs	r1, r2
 800c40c:	0018      	movs	r0, r3
 800c40e:	f000 fac9 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c412:	210b      	movs	r1, #11
 800c414:	187b      	adds	r3, r7, r1
 800c416:	781a      	ldrb	r2, [r3, #0]
 800c418:	187b      	adds	r3, r7, r1
 800c41a:	3201      	adds	r2, #1
 800c41c:	701a      	strb	r2, [r3, #0]
          break;
 800c41e:	e00c      	b.n	800c43a <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c420:	683a      	ldr	r2, [r7, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	0011      	movs	r1, r2
 800c426:	0018      	movs	r0, r3
 800c428:	f000 fabc 	bl	800c9a4 <USBD_CtlError>
          err++;
 800c42c:	210b      	movs	r1, #11
 800c42e:	187b      	adds	r3, r7, r1
 800c430:	781a      	ldrb	r2, [r3, #0]
 800c432:	187b      	adds	r3, r7, r1
 800c434:	3201      	adds	r2, #1
 800c436:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c438:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c43a:	e04a      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7c1b      	ldrb	r3, [r3, #16]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10b      	bne.n	800c45c <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	23ae      	movs	r3, #174	@ 0xae
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	58d3      	ldr	r3, [r2, r3]
 800c44c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c44e:	2208      	movs	r2, #8
 800c450:	18ba      	adds	r2, r7, r2
 800c452:	0010      	movs	r0, r2
 800c454:	4798      	blx	r3
 800c456:	0003      	movs	r3, r0
 800c458:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c45a:	e03a      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	0011      	movs	r1, r2
 800c462:	0018      	movs	r0, r3
 800c464:	f000 fa9e 	bl	800c9a4 <USBD_CtlError>
        err++;
 800c468:	210b      	movs	r1, #11
 800c46a:	187b      	adds	r3, r7, r1
 800c46c:	781a      	ldrb	r2, [r3, #0]
 800c46e:	187b      	adds	r3, r7, r1
 800c470:	3201      	adds	r2, #1
 800c472:	701a      	strb	r2, [r3, #0]
      break;
 800c474:	e02d      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	7c1b      	ldrb	r3, [r3, #16]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10f      	bne.n	800c49e <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	23ae      	movs	r3, #174	@ 0xae
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	58d3      	ldr	r3, [r2, r3]
 800c486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c488:	2208      	movs	r2, #8
 800c48a:	18ba      	adds	r2, r7, r2
 800c48c:	0010      	movs	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	0003      	movs	r3, r0
 800c492:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3301      	adds	r3, #1
 800c498:	2207      	movs	r2, #7
 800c49a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c49c:	e019      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	0011      	movs	r1, r2
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 fa7d 	bl	800c9a4 <USBD_CtlError>
        err++;
 800c4aa:	210b      	movs	r1, #11
 800c4ac:	187b      	adds	r3, r7, r1
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	187b      	adds	r3, r7, r1
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
      break;
 800c4b6:	e00c      	b.n	800c4d2 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	0011      	movs	r1, r2
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f000 fa70 	bl	800c9a4 <USBD_CtlError>
      err++;
 800c4c4:	210b      	movs	r1, #11
 800c4c6:	187b      	adds	r3, r7, r1
 800c4c8:	781a      	ldrb	r2, [r3, #0]
 800c4ca:	187b      	adds	r3, r7, r1
 800c4cc:	3201      	adds	r2, #1
 800c4ce:	701a      	strb	r2, [r3, #0]
      break;
 800c4d0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800c4d2:	230b      	movs	r3, #11
 800c4d4:	18fb      	adds	r3, r7, r3
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d131      	bne.n	800c540 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d023      	beq.n	800c52c <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800c4e4:	2108      	movs	r1, #8
 800c4e6:	187b      	adds	r3, r7, r1
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d017      	beq.n	800c51e <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	88da      	ldrh	r2, [r3, #6]
 800c4f2:	187b      	adds	r3, r7, r1
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	1c18      	adds	r0, r3, #0
 800c4f8:	1c11      	adds	r1, r2, #0
 800c4fa:	b28a      	uxth	r2, r1
 800c4fc:	b283      	uxth	r3, r0
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d900      	bls.n	800c504 <USBD_GetDescriptor+0x370>
 800c502:	1c01      	adds	r1, r0, #0
 800c504:	b28a      	uxth	r2, r1
 800c506:	2108      	movs	r1, #8
 800c508:	187b      	adds	r3, r7, r1
 800c50a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c50c:	187b      	adds	r3, r7, r1
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	001a      	movs	r2, r3
 800c512:	68f9      	ldr	r1, [r7, #12]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	0018      	movs	r0, r3
 800c518:	f000 facc 	bl	800cab4 <USBD_CtlSendData>
 800c51c:	e011      	b.n	800c542 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	0011      	movs	r1, r2
 800c524:	0018      	movs	r0, r3
 800c526:	f000 fa3d 	bl	800c9a4 <USBD_CtlError>
 800c52a:	e00a      	b.n	800c542 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	0018      	movs	r0, r3
 800c530:	f000 fb1e 	bl	800cb70 <USBD_CtlSendStatus>
 800c534:	e005      	b.n	800c542 <USBD_GetDescriptor+0x3ae>
 800c536:	46c0      	nop			@ (mov r8, r8)
 800c538:	08011c60 	.word	0x08011c60
 800c53c:	08011ca0 	.word	0x08011ca0
    return;
 800c540:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c542:	46bd      	mov	sp, r7
 800c544:	b004      	add	sp, #16
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c548:	b590      	push	{r4, r7, lr}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	889b      	ldrh	r3, [r3, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d13e      	bne.n	800c5d8 <USBD_SetAddress+0x90>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	88db      	ldrh	r3, [r3, #6]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d13a      	bne.n	800c5d8 <USBD_SetAddress+0x90>
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	885b      	ldrh	r3, [r3, #2]
 800c566:	2b7f      	cmp	r3, #127	@ 0x7f
 800c568:	d836      	bhi.n	800c5d8 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	885b      	ldrh	r3, [r3, #2]
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	230f      	movs	r3, #15
 800c572:	18fb      	adds	r3, r7, r3
 800c574:	217f      	movs	r1, #127	@ 0x7f
 800c576:	400a      	ands	r2, r1
 800c578:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	23a7      	movs	r3, #167	@ 0xa7
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	5cd3      	ldrb	r3, [r2, r3]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	2b03      	cmp	r3, #3
 800c586:	d106      	bne.n	800c596 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	0011      	movs	r1, r2
 800c58e:	0018      	movs	r0, r3
 800c590:	f000 fa08 	bl	800c9a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c594:	e027      	b.n	800c5e6 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	240f      	movs	r4, #15
 800c59a:	193a      	adds	r2, r7, r4
 800c59c:	4914      	ldr	r1, [pc, #80]	@ (800c5f0 <USBD_SetAddress+0xa8>)
 800c59e:	7812      	ldrb	r2, [r2, #0]
 800c5a0:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5a2:	193b      	adds	r3, r7, r4
 800c5a4:	781a      	ldrb	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	0011      	movs	r1, r2
 800c5aa:	0018      	movs	r0, r3
 800c5ac:	f000 ffad 	bl	800d50a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	0018      	movs	r0, r3
 800c5b4:	f000 fadc 	bl	800cb70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	23a7      	movs	r3, #167	@ 0xa7
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	2102      	movs	r1, #2
 800c5c8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ca:	e00c      	b.n	800c5e6 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	23a7      	movs	r3, #167	@ 0xa7
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d6:	e006      	b.n	800c5e6 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	0011      	movs	r1, r2
 800c5de:	0018      	movs	r0, r3
 800c5e0:	f000 f9e0 	bl	800c9a4 <USBD_CtlError>
  }
}
 800c5e4:	46c0      	nop			@ (mov r8, r8)
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	b005      	add	sp, #20
 800c5ec:	bd90      	pop	{r4, r7, pc}
 800c5ee:	46c0      	nop			@ (mov r8, r8)
 800c5f0:	0000029e 	.word	0x0000029e

0800c5f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f4:	b5b0      	push	{r4, r5, r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5fe:	230f      	movs	r3, #15
 800c600:	18fb      	adds	r3, r7, r3
 800c602:	2200      	movs	r2, #0
 800c604:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	4b5f      	ldr	r3, [pc, #380]	@ (800c78c <USBD_SetConfig+0x198>)
 800c60e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c610:	4b5e      	ldr	r3, [pc, #376]	@ (800c78c <USBD_SetConfig+0x198>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d907      	bls.n	800c628 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	0011      	movs	r1, r2
 800c61e:	0018      	movs	r0, r3
 800c620:	f000 f9c0 	bl	800c9a4 <USBD_CtlError>
    return USBD_FAIL;
 800c624:	2303      	movs	r3, #3
 800c626:	e0ac      	b.n	800c782 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	23a7      	movs	r3, #167	@ 0xa7
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	5cd3      	ldrb	r3, [r2, r3]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b02      	cmp	r3, #2
 800c634:	d002      	beq.n	800c63c <USBD_SetConfig+0x48>
 800c636:	2b03      	cmp	r3, #3
 800c638:	d033      	beq.n	800c6a2 <USBD_SetConfig+0xae>
 800c63a:	e08d      	b.n	800c758 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c63c:	4b53      	ldr	r3, [pc, #332]	@ (800c78c <USBD_SetConfig+0x198>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d029      	beq.n	800c698 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 800c644:	4b51      	ldr	r3, [pc, #324]	@ (800c78c <USBD_SetConfig+0x198>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	001a      	movs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c64e:	4b4f      	ldr	r3, [pc, #316]	@ (800c78c <USBD_SetConfig+0x198>)
 800c650:	781a      	ldrb	r2, [r3, #0]
 800c652:	250f      	movs	r5, #15
 800c654:	197c      	adds	r4, r7, r5
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	0011      	movs	r1, r2
 800c65a:	0018      	movs	r0, r3
 800c65c:	f7fe feb4 	bl	800b3c8 <USBD_SetClassConfig>
 800c660:	0003      	movs	r3, r0
 800c662:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800c664:	197b      	adds	r3, r7, r5
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00b      	beq.n	800c684 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	0011      	movs	r1, r2
 800c672:	0018      	movs	r0, r3
 800c674:	f000 f996 	bl	800c9a4 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	23a7      	movs	r3, #167	@ 0xa7
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	2102      	movs	r1, #2
 800c680:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c682:	e07b      	b.n	800c77c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	0018      	movs	r0, r3
 800c688:	f000 fa72 	bl	800cb70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	23a7      	movs	r3, #167	@ 0xa7
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	2103      	movs	r1, #3
 800c694:	54d1      	strb	r1, [r2, r3]
      break;
 800c696:	e071      	b.n	800c77c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	0018      	movs	r0, r3
 800c69c:	f000 fa68 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c6a0:	e06c      	b.n	800c77c <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6a2:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <USBD_SetConfig+0x198>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d115      	bne.n	800c6d6 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	23a7      	movs	r3, #167	@ 0xa7
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	2102      	movs	r1, #2
 800c6b2:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800c6b4:	4b35      	ldr	r3, [pc, #212]	@ (800c78c <USBD_SetConfig+0x198>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	001a      	movs	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6be:	4b33      	ldr	r3, [pc, #204]	@ (800c78c <USBD_SetConfig+0x198>)
 800c6c0:	781a      	ldrb	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	0011      	movs	r1, r2
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	f7fe fea3 	bl	800b412 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f000 fa4e 	bl	800cb70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6d4:	e052      	b.n	800c77c <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 800c6d6:	4b2d      	ldr	r3, [pc, #180]	@ (800c78c <USBD_SetConfig+0x198>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	001a      	movs	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d034      	beq.n	800c74e <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	0011      	movs	r1, r2
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	f7fe fe8f 	bl	800b412 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6f4:	4b25      	ldr	r3, [pc, #148]	@ (800c78c <USBD_SetConfig+0x198>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	001a      	movs	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6fe:	4b23      	ldr	r3, [pc, #140]	@ (800c78c <USBD_SetConfig+0x198>)
 800c700:	781a      	ldrb	r2, [r3, #0]
 800c702:	250f      	movs	r5, #15
 800c704:	197c      	adds	r4, r7, r5
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	0011      	movs	r1, r2
 800c70a:	0018      	movs	r0, r3
 800c70c:	f7fe fe5c 	bl	800b3c8 <USBD_SetClassConfig>
 800c710:	0003      	movs	r3, r0
 800c712:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800c714:	197b      	adds	r3, r7, r5
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d013      	beq.n	800c744 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 800c71c:	683a      	ldr	r2, [r7, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	0011      	movs	r1, r2
 800c722:	0018      	movs	r0, r3
 800c724:	f000 f93e 	bl	800c9a4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	0011      	movs	r1, r2
 800c732:	0018      	movs	r0, r3
 800c734:	f7fe fe6d 	bl	800b412 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	23a7      	movs	r3, #167	@ 0xa7
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	2102      	movs	r1, #2
 800c740:	54d1      	strb	r1, [r2, r3]
      break;
 800c742:	e01b      	b.n	800c77c <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	0018      	movs	r0, r3
 800c748:	f000 fa12 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c74c:	e016      	b.n	800c77c <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	0018      	movs	r0, r3
 800c752:	f000 fa0d 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c756:	e011      	b.n	800c77c <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	0011      	movs	r1, r2
 800c75e:	0018      	movs	r0, r3
 800c760:	f000 f920 	bl	800c9a4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c764:	4b09      	ldr	r3, [pc, #36]	@ (800c78c <USBD_SetConfig+0x198>)
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	0011      	movs	r1, r2
 800c76c:	0018      	movs	r0, r3
 800c76e:	f7fe fe50 	bl	800b412 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c772:	230f      	movs	r3, #15
 800c774:	18fb      	adds	r3, r7, r3
 800c776:	2203      	movs	r2, #3
 800c778:	701a      	strb	r2, [r3, #0]
      break;
 800c77a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c77c:	230f      	movs	r3, #15
 800c77e:	18fb      	adds	r3, r7, r3
 800c780:	781b      	ldrb	r3, [r3, #0]
}
 800c782:	0018      	movs	r0, r3
 800c784:	46bd      	mov	sp, r7
 800c786:	b004      	add	sp, #16
 800c788:	bdb0      	pop	{r4, r5, r7, pc}
 800c78a:	46c0      	nop			@ (mov r8, r8)
 800c78c:	20000524 	.word	0x20000524

0800c790 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	88db      	ldrh	r3, [r3, #6]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d006      	beq.n	800c7b0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	0011      	movs	r1, r2
 800c7a8:	0018      	movs	r0, r3
 800c7aa:	f000 f8fb 	bl	800c9a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ae:	e027      	b.n	800c800 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	23a7      	movs	r3, #167	@ 0xa7
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	5cd3      	ldrb	r3, [r2, r3]
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	dc02      	bgt.n	800c7c4 <USBD_GetConfig+0x34>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dc03      	bgt.n	800c7ca <USBD_GetConfig+0x3a>
 800c7c2:	e016      	b.n	800c7f2 <USBD_GetConfig+0x62>
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d00c      	beq.n	800c7e2 <USBD_GetConfig+0x52>
 800c7c8:	e013      	b.n	800c7f2 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	0019      	movs	r1, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	0018      	movs	r0, r3
 800c7dc:	f000 f96a 	bl	800cab4 <USBD_CtlSendData>
        break;
 800c7e0:	e00e      	b.n	800c800 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	1d19      	adds	r1, r3, #4
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f000 f962 	bl	800cab4 <USBD_CtlSendData>
        break;
 800c7f0:	e006      	b.n	800c800 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	0011      	movs	r1, r2
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f000 f8d3 	bl	800c9a4 <USBD_CtlError>
        break;
 800c7fe:	46c0      	nop			@ (mov r8, r8)
}
 800c800:	46c0      	nop			@ (mov r8, r8)
 800c802:	46bd      	mov	sp, r7
 800c804:	b002      	add	sp, #8
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	23a7      	movs	r3, #167	@ 0xa7
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	5cd3      	ldrb	r3, [r2, r3]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	3b01      	subs	r3, #1
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d822      	bhi.n	800c868 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	88db      	ldrh	r3, [r3, #6]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d006      	beq.n	800c838 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	0011      	movs	r1, r2
 800c830:	0018      	movs	r0, r3
 800c832:	f000 f8b7 	bl	800c9a4 <USBD_CtlError>
        break;
 800c836:	e01e      	b.n	800c876 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	23a9      	movs	r3, #169	@ 0xa9
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	58d3      	ldr	r3, [r2, r3]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d005      	beq.n	800c856 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	2202      	movs	r2, #2
 800c850:	431a      	orrs	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	330c      	adds	r3, #12
 800c85a:	0019      	movs	r1, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2202      	movs	r2, #2
 800c860:	0018      	movs	r0, r3
 800c862:	f000 f927 	bl	800cab4 <USBD_CtlSendData>
      break;
 800c866:	e006      	b.n	800c876 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	0011      	movs	r1, r2
 800c86e:	0018      	movs	r0, r3
 800c870:	f000 f898 	bl	800c9a4 <USBD_CtlError>
      break;
 800c874:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c876:	46c0      	nop			@ (mov r8, r8)
 800c878:	46bd      	mov	sp, r7
 800c87a:	b002      	add	sp, #8
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b082      	sub	sp, #8
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	885b      	ldrh	r3, [r3, #2]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d109      	bne.n	800c8a4 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	23a9      	movs	r3, #169	@ 0xa9
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	2101      	movs	r1, #1
 800c898:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	0018      	movs	r0, r3
 800c89e:	f000 f967 	bl	800cb70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8a2:	e017      	b.n	800c8d4 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	885b      	ldrh	r3, [r3, #2]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d10d      	bne.n	800c8c8 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	889b      	ldrh	r3, [r3, #4]
 800c8b0:	0a1b      	lsrs	r3, r3, #8
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	b2d9      	uxtb	r1, r3
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	23a8      	movs	r3, #168	@ 0xa8
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f000 f955 	bl	800cb70 <USBD_CtlSendStatus>
}
 800c8c6:	e005      	b.n	800c8d4 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	0011      	movs	r1, r2
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f000 f868 	bl	800c9a4 <USBD_CtlError>
}
 800c8d4:	46c0      	nop			@ (mov r8, r8)
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b002      	add	sp, #8
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	23a7      	movs	r3, #167	@ 0xa7
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	5cd3      	ldrb	r3, [r2, r3]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d80d      	bhi.n	800c912 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	885b      	ldrh	r3, [r3, #2]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d110      	bne.n	800c920 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	23a9      	movs	r3, #169	@ 0xa9
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	2100      	movs	r1, #0
 800c906:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	0018      	movs	r0, r3
 800c90c:	f000 f930 	bl	800cb70 <USBD_CtlSendStatus>
      }
      break;
 800c910:	e006      	b.n	800c920 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800c912:	683a      	ldr	r2, [r7, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0011      	movs	r1, r2
 800c918:	0018      	movs	r0, r3
 800c91a:	f000 f843 	bl	800c9a4 <USBD_CtlError>
      break;
 800c91e:	e000      	b.n	800c922 <USBD_ClrFeature+0x46>
      break;
 800c920:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	46bd      	mov	sp, r7
 800c926:	b002      	add	sp, #8
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	0018      	movs	r0, r3
 800c958:	f7ff f8e6 	bl	800bb28 <SWAPBYTE>
 800c95c:	0003      	movs	r3, r0
 800c95e:	001a      	movs	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	3301      	adds	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	0018      	movs	r0, r3
 800c974:	f7ff f8d8 	bl	800bb28 <SWAPBYTE>
 800c978:	0003      	movs	r3, r0
 800c97a:	001a      	movs	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	3301      	adds	r3, #1
 800c984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	0018      	movs	r0, r3
 800c990:	f7ff f8ca 	bl	800bb28 <SWAPBYTE>
 800c994:	0003      	movs	r3, r0
 800c996:	001a      	movs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	80da      	strh	r2, [r3, #6]
}
 800c99c:	46c0      	nop			@ (mov r8, r8)
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	b004      	add	sp, #16
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2180      	movs	r1, #128	@ 0x80
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f000 fd23 	bl	800d3fe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f000 fd1e 	bl	800d3fe <USBD_LL_StallEP>
}
 800c9c2:	46c0      	nop			@ (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b002      	add	sp, #8
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b087      	sub	sp, #28
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d6:	2417      	movs	r4, #23
 800c9d8:	193b      	adds	r3, r7, r4
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d044      	beq.n	800ca6e <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f000 f843 	bl	800ca76 <USBD_GetLen>
 800c9f0:	0003      	movs	r3, r0
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	18db      	adds	r3, r3, r3
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9fe:	193b      	adds	r3, r7, r4
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	18d3      	adds	r3, r2, r3
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	7812      	ldrb	r2, [r2, #0]
 800ca0a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca0c:	193b      	adds	r3, r7, r4
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	193b      	adds	r3, r7, r4
 800ca12:	3201      	adds	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca16:	193b      	adds	r3, r7, r4
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	18d3      	adds	r3, r2, r3
 800ca1e:	2203      	movs	r2, #3
 800ca20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca22:	193b      	adds	r3, r7, r4
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	193b      	adds	r3, r7, r4
 800ca28:	3201      	adds	r2, #1
 800ca2a:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800ca2c:	e01a      	b.n	800ca64 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800ca2e:	2117      	movs	r1, #23
 800ca30:	187b      	adds	r3, r7, r1
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	18d3      	adds	r3, r2, r3
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	7812      	ldrb	r2, [r2, #0]
 800ca3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	613b      	str	r3, [r7, #16]
    idx++;
 800ca44:	187b      	adds	r3, r7, r1
 800ca46:	781a      	ldrb	r2, [r3, #0]
 800ca48:	187b      	adds	r3, r7, r1
 800ca4a:	3201      	adds	r2, #1
 800ca4c:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800ca4e:	187b      	adds	r3, r7, r1
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	18d3      	adds	r3, r2, r3
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca5a:	187b      	adds	r3, r7, r1
 800ca5c:	781a      	ldrb	r2, [r3, #0]
 800ca5e:	187b      	adds	r3, r7, r1
 800ca60:	3201      	adds	r2, #1
 800ca62:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1e0      	bne.n	800ca2e <USBD_GetString+0x64>
 800ca6c:	e000      	b.n	800ca70 <USBD_GetString+0xa6>
    return;
 800ca6e:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ca70:	46bd      	mov	sp, r7
 800ca72:	b007      	add	sp, #28
 800ca74:	bd90      	pop	{r4, r7, pc}

0800ca76 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca7e:	230f      	movs	r3, #15
 800ca80:	18fb      	adds	r3, r7, r3
 800ca82:	2200      	movs	r2, #0
 800ca84:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca8a:	e008      	b.n	800ca9e <USBD_GetLen+0x28>
  {
    len++;
 800ca8c:	210f      	movs	r1, #15
 800ca8e:	187b      	adds	r3, r7, r1
 800ca90:	781a      	ldrb	r2, [r3, #0]
 800ca92:	187b      	adds	r3, r7, r1
 800ca94:	3201      	adds	r2, #1
 800ca96:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1f2      	bne.n	800ca8c <USBD_GetLen+0x16>
  }

  return len;
 800caa6:	230f      	movs	r3, #15
 800caa8:	18fb      	adds	r3, r7, r3
 800caaa:	781b      	ldrb	r3, [r3, #0]
}
 800caac:	0018      	movs	r0, r3
 800caae:	46bd      	mov	sp, r7
 800cab0:	b004      	add	sp, #16
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	23a5      	movs	r3, #165	@ 0xa5
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	2102      	movs	r1, #2
 800cac8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	2100      	movs	r1, #0
 800cade:	f000 fd3f 	bl	800d560 <USBD_LL_Transmit>

  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	0018      	movs	r0, r3
 800cae6:	46bd      	mov	sp, r7
 800cae8:	b004      	add	sp, #16
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	2100      	movs	r1, #0
 800cb00:	f000 fd2e 	bl	800d560 <USBD_LL_Transmit>

  return USBD_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	0018      	movs	r0, r3
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	b004      	add	sp, #16
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	60f8      	str	r0, [r7, #12]
 800cb16:	60b9      	str	r1, [r7, #8]
 800cb18:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	23a5      	movs	r3, #165	@ 0xa5
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	2103      	movs	r1, #3
 800cb22:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	23ac      	movs	r3, #172	@ 0xac
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	6879      	ldr	r1, [r7, #4]
 800cb2c:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	23ae      	movs	r3, #174	@ 0xae
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	f000 fd3e 	bl	800d5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	0018      	movs	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	b004      	add	sp, #16
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	2100      	movs	r1, #0
 800cb62:	f000 fd2d 	bl	800d5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	0018      	movs	r0, r3
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	b004      	add	sp, #16
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	23a5      	movs	r3, #165	@ 0xa5
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	2104      	movs	r1, #4
 800cb80:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	2300      	movs	r3, #0
 800cb86:	2200      	movs	r2, #0
 800cb88:	2100      	movs	r1, #0
 800cb8a:	f000 fce9 	bl	800d560 <USBD_LL_Transmit>

  return USBD_OK;
 800cb8e:	2300      	movs	r3, #0
}
 800cb90:	0018      	movs	r0, r3
 800cb92:	46bd      	mov	sp, r7
 800cb94:	b002      	add	sp, #8
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	23a5      	movs	r3, #165	@ 0xa5
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	2105      	movs	r1, #5
 800cba8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	2300      	movs	r3, #0
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	f000 fd05 	bl	800d5c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	0018      	movs	r0, r3
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	b002      	add	sp, #8
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cbc4:	4914      	ldr	r1, [pc, #80]	@ (800cc18 <MX_USB_Device_Init+0x58>)
 800cbc6:	4b15      	ldr	r3, [pc, #84]	@ (800cc1c <MX_USB_Device_Init+0x5c>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	0018      	movs	r0, r3
 800cbcc:	f7fe fb6e 	bl	800b2ac <USBD_Init>
 800cbd0:	1e03      	subs	r3, r0, #0
 800cbd2:	d001      	beq.n	800cbd8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cbd4:	f7f6 fb22 	bl	800321c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cbd8:	4a11      	ldr	r2, [pc, #68]	@ (800cc20 <MX_USB_Device_Init+0x60>)
 800cbda:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <MX_USB_Device_Init+0x5c>)
 800cbdc:	0011      	movs	r1, r2
 800cbde:	0018      	movs	r0, r3
 800cbe0:	f7fe fb9e 	bl	800b320 <USBD_RegisterClass>
 800cbe4:	1e03      	subs	r3, r0, #0
 800cbe6:	d001      	beq.n	800cbec <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800cbe8:	f7f6 fb18 	bl	800321c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cbec:	4a0d      	ldr	r2, [pc, #52]	@ (800cc24 <MX_USB_Device_Init+0x64>)
 800cbee:	4b0b      	ldr	r3, [pc, #44]	@ (800cc1c <MX_USB_Device_Init+0x5c>)
 800cbf0:	0011      	movs	r1, r2
 800cbf2:	0018      	movs	r0, r3
 800cbf4:	f7fe fa78 	bl	800b0e8 <USBD_CDC_RegisterInterface>
 800cbf8:	1e03      	subs	r3, r0, #0
 800cbfa:	d001      	beq.n	800cc00 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800cbfc:	f7f6 fb0e 	bl	800321c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cc00:	4b06      	ldr	r3, [pc, #24]	@ (800cc1c <MX_USB_Device_Init+0x5c>)
 800cc02:	0018      	movs	r0, r3
 800cc04:	f7fe fbca 	bl	800b39c <USBD_Start>
 800cc08:	1e03      	subs	r3, r0, #0
 800cc0a:	d001      	beq.n	800cc10 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800cc0c:	f7f6 fb06 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cc10:	46c0      	nop			@ (mov r8, r8)
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	46c0      	nop			@ (mov r8, r8)
 800cc18:	200000ac 	.word	0x200000ac
 800cc1c:	20000528 	.word	0x20000528
 800cc20:	20000018 	.word	0x20000018
 800cc24:	20000098 	.word	0x20000098

0800cc28 <CDC_Receive>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

int8_t CDC_Receive(uint8_t* pbuf, uint32_t *Len){
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
	CDC_Receive_FS(pbuf, Len);
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	0011      	movs	r1, r2
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f000 f83f 	bl	800ccbc <CDC_Receive_FS>
	return USBD_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	0018      	movs	r0, r3
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b002      	add	sp, #8
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc4c:	4907      	ldr	r1, [pc, #28]	@ (800cc6c <CDC_Init_FS+0x24>)
 800cc4e:	4b08      	ldr	r3, [pc, #32]	@ (800cc70 <CDC_Init_FS+0x28>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	0018      	movs	r0, r3
 800cc54:	f7fe fa62 	bl	800b11c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc58:	4a06      	ldr	r2, [pc, #24]	@ (800cc74 <CDC_Init_FS+0x2c>)
 800cc5a:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <CDC_Init_FS+0x28>)
 800cc5c:	0011      	movs	r1, r2
 800cc5e:	0018      	movs	r0, r3
 800cc60:	f7fe fa7f 	bl	800b162 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc64:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc66:	0018      	movs	r0, r3
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20001004 	.word	0x20001004
 800cc70:	20000528 	.word	0x20000528
 800cc74:	20000804 	.word	0x20000804

0800cc78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc7e:	0018      	movs	r0, r3
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6039      	str	r1, [r7, #0]
 800cc8c:	0011      	movs	r1, r2
 800cc8e:	1dfb      	adds	r3, r7, #7
 800cc90:	1c02      	adds	r2, r0, #0
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	1d3b      	adds	r3, r7, #4
 800cc96:	1c0a      	adds	r2, r1, #0
 800cc98:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc9a:	1dfb      	adds	r3, r7, #7
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	2b23      	cmp	r3, #35	@ 0x23
 800cca0:	d804      	bhi.n	800ccac <CDC_Control_FS+0x28>
 800cca2:	009a      	lsls	r2, r3, #2
 800cca4:	4b04      	ldr	r3, [pc, #16]	@ (800ccb8 <CDC_Control_FS+0x34>)
 800cca6:	18d3      	adds	r3, r2, r3
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccac:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800ccae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	b002      	add	sp, #8
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	08011cb8 	.word	0x08011cb8

0800ccbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4b06      	ldr	r3, [pc, #24]	@ (800cce4 <CDC_Receive_FS+0x28>)
 800ccca:	0011      	movs	r1, r2
 800cccc:	0018      	movs	r0, r3
 800ccce:	f7fe fa48 	bl	800b162 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccd2:	4b04      	ldr	r3, [pc, #16]	@ (800cce4 <CDC_Receive_FS+0x28>)
 800ccd4:	0018      	movs	r0, r3
 800ccd6:	f7fe faaf 	bl	800b238 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccda:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccdc:	0018      	movs	r0, r3
 800ccde:	46bd      	mov	sp, r7
 800cce0:	b002      	add	sp, #8
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	20000528 	.word	0x20000528

0800cce8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cce8:	b5b0      	push	{r4, r5, r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	000a      	movs	r2, r1
 800ccf2:	1cbb      	adds	r3, r7, #2
 800ccf4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800ccf6:	230f      	movs	r3, #15
 800ccf8:	18fb      	adds	r3, r7, r3
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ccfe:	4a11      	ldr	r2, [pc, #68]	@ (800cd44 <CDC_Transmit_FS+0x5c>)
 800cd00:	23af      	movs	r3, #175	@ 0xaf
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	58d3      	ldr	r3, [r2, r3]
 800cd06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	2385      	movs	r3, #133	@ 0x85
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	58d3      	ldr	r3, [r2, r3]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e010      	b.n	800cd3a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd18:	1cbb      	adds	r3, r7, #2
 800cd1a:	881a      	ldrh	r2, [r3, #0]
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	4b09      	ldr	r3, [pc, #36]	@ (800cd44 <CDC_Transmit_FS+0x5c>)
 800cd20:	0018      	movs	r0, r3
 800cd22:	f7fe f9fb 	bl	800b11c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd26:	250f      	movs	r5, #15
 800cd28:	197c      	adds	r4, r7, r5
 800cd2a:	4b06      	ldr	r3, [pc, #24]	@ (800cd44 <CDC_Transmit_FS+0x5c>)
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	f7fe fa35 	bl	800b19c <USBD_CDC_TransmitPacket>
 800cd32:	0003      	movs	r3, r0
 800cd34:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cd36:	197b      	adds	r3, r7, r5
 800cd38:	781b      	ldrb	r3, [r3, #0]
}
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	b004      	add	sp, #16
 800cd40:	bdb0      	pop	{r4, r5, r7, pc}
 800cd42:	46c0      	nop			@ (mov r8, r8)
 800cd44:	20000528 	.word	0x20000528

0800cd48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	1dfb      	adds	r3, r7, #7
 800cd54:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cd56:	2117      	movs	r1, #23
 800cd58:	187b      	adds	r3, r7, r1
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd5e:	187b      	adds	r3, r7, r1
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	b25b      	sxtb	r3, r3
}
 800cd64:	0018      	movs	r0, r3
 800cd66:	46bd      	mov	sp, r7
 800cd68:	b006      	add	sp, #24
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	0002      	movs	r2, r0
 800cd74:	6039      	str	r1, [r7, #0]
 800cd76:	1dfb      	adds	r3, r7, #7
 800cd78:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2212      	movs	r2, #18
 800cd7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cd80:	4b02      	ldr	r3, [pc, #8]	@ (800cd8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cd82:	0018      	movs	r0, r3
 800cd84:	46bd      	mov	sp, r7
 800cd86:	b002      	add	sp, #8
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	46c0      	nop			@ (mov r8, r8)
 800cd8c:	200000cc 	.word	0x200000cc

0800cd90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	0002      	movs	r2, r0
 800cd98:	6039      	str	r1, [r7, #0]
 800cd9a:	1dfb      	adds	r3, r7, #7
 800cd9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	2204      	movs	r2, #4
 800cda2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cda4:	4b02      	ldr	r3, [pc, #8]	@ (800cdb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cda6:	0018      	movs	r0, r3
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	b002      	add	sp, #8
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	46c0      	nop			@ (mov r8, r8)
 800cdb0:	200000e0 	.word	0x200000e0

0800cdb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	0002      	movs	r2, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	1dfb      	adds	r3, r7, #7
 800cdc0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cdc2:	1dfb      	adds	r3, r7, #7
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	4908      	ldr	r1, [pc, #32]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800cdce:	4b09      	ldr	r3, [pc, #36]	@ (800cdf4 <USBD_CDC_ProductStrDescriptor+0x40>)
 800cdd0:	0018      	movs	r0, r3
 800cdd2:	f7ff fdfa 	bl	800c9ca <USBD_GetString>
 800cdd6:	e005      	b.n	800cde4 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	4905      	ldr	r1, [pc, #20]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800cddc:	4b05      	ldr	r3, [pc, #20]	@ (800cdf4 <USBD_CDC_ProductStrDescriptor+0x40>)
 800cdde:	0018      	movs	r0, r3
 800cde0:	f7ff fdf3 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800cde6:	0018      	movs	r0, r3
 800cde8:	46bd      	mov	sp, r7
 800cdea:	b002      	add	sp, #8
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	46c0      	nop			@ (mov r8, r8)
 800cdf0:	20001804 	.word	0x20001804
 800cdf4:	08011b70 	.word	0x08011b70

0800cdf8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	0002      	movs	r2, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	1dfb      	adds	r3, r7, #7
 800ce04:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	4904      	ldr	r1, [pc, #16]	@ (800ce1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ce0a:	4b05      	ldr	r3, [pc, #20]	@ (800ce20 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800ce0c:	0018      	movs	r0, r3
 800ce0e:	f7ff fddc 	bl	800c9ca <USBD_GetString>
  return USBD_StrDesc;
 800ce12:	4b02      	ldr	r3, [pc, #8]	@ (800ce1c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800ce14:	0018      	movs	r0, r3
 800ce16:	46bd      	mov	sp, r7
 800ce18:	b002      	add	sp, #8
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20001804 	.word	0x20001804
 800ce20:	08011b88 	.word	0x08011b88

0800ce24 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	0002      	movs	r2, r0
 800ce2c:	6039      	str	r1, [r7, #0]
 800ce2e:	1dfb      	adds	r3, r7, #7
 800ce30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	221a      	movs	r2, #26
 800ce36:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce38:	f000 f84c 	bl	800ced4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ce3c:	4b02      	ldr	r3, [pc, #8]	@ (800ce48 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800ce3e:	0018      	movs	r0, r3
 800ce40:	46bd      	mov	sp, r7
 800ce42:	b002      	add	sp, #8
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	46c0      	nop			@ (mov r8, r8)
 800ce48:	200000e4 	.word	0x200000e4

0800ce4c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	0002      	movs	r2, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	1dfb      	adds	r3, r7, #7
 800ce58:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ce5a:	1dfb      	adds	r3, r7, #7
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4908      	ldr	r1, [pc, #32]	@ (800ce88 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800ce66:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <USBD_CDC_ConfigStrDescriptor+0x40>)
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f7ff fdae 	bl	800c9ca <USBD_GetString>
 800ce6e:	e005      	b.n	800ce7c <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ce70:	683a      	ldr	r2, [r7, #0]
 800ce72:	4905      	ldr	r1, [pc, #20]	@ (800ce88 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800ce74:	4b05      	ldr	r3, [pc, #20]	@ (800ce8c <USBD_CDC_ConfigStrDescriptor+0x40>)
 800ce76:	0018      	movs	r0, r3
 800ce78:	f7ff fda7 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	@ (800ce88 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800ce7e:	0018      	movs	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	b002      	add	sp, #8
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	46c0      	nop			@ (mov r8, r8)
 800ce88:	20001804 	.word	0x20001804
 800ce8c:	08011b9c 	.word	0x08011b9c

0800ce90 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	0002      	movs	r2, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	1dfb      	adds	r3, r7, #7
 800ce9c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ce9e:	1dfb      	adds	r3, r7, #7
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d106      	bne.n	800ceb4 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	4908      	ldr	r1, [pc, #32]	@ (800cecc <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800ceaa:	4b09      	ldr	r3, [pc, #36]	@ (800ced0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800ceac:	0018      	movs	r0, r3
 800ceae:	f7ff fd8c 	bl	800c9ca <USBD_GetString>
 800ceb2:	e005      	b.n	800cec0 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	4905      	ldr	r1, [pc, #20]	@ (800cecc <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800ceb8:	4b05      	ldr	r3, [pc, #20]	@ (800ced0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800ceba:	0018      	movs	r0, r3
 800cebc:	f7ff fd85 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cec0:	4b02      	ldr	r3, [pc, #8]	@ (800cecc <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800cec2:	0018      	movs	r0, r3
 800cec4:	46bd      	mov	sp, r7
 800cec6:	b002      	add	sp, #8
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	46c0      	nop			@ (mov r8, r8)
 800cecc:	20001804 	.word	0x20001804
 800ced0:	08011ba8 	.word	0x08011ba8

0800ced4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceda:	4b10      	ldr	r3, [pc, #64]	@ (800cf1c <Get_SerialNum+0x48>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cee0:	4b0f      	ldr	r3, [pc, #60]	@ (800cf20 <Get_SerialNum+0x4c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cee6:	4b0f      	ldr	r3, [pc, #60]	@ (800cf24 <Get_SerialNum+0x50>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	18d3      	adds	r3, r2, r3
 800cef2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00b      	beq.n	800cf12 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cefa:	490b      	ldr	r1, [pc, #44]	@ (800cf28 <Get_SerialNum+0x54>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2208      	movs	r2, #8
 800cf00:	0018      	movs	r0, r3
 800cf02:	f000 f815 	bl	800cf30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf06:	4909      	ldr	r1, [pc, #36]	@ (800cf2c <Get_SerialNum+0x58>)
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2204      	movs	r2, #4
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f000 f80f 	bl	800cf30 <IntToUnicode>
  }
}
 800cf12:	46c0      	nop			@ (mov r8, r8)
 800cf14:	46bd      	mov	sp, r7
 800cf16:	b004      	add	sp, #16
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	1fff7590 	.word	0x1fff7590
 800cf20:	1fff7594 	.word	0x1fff7594
 800cf24:	1fff7598 	.word	0x1fff7598
 800cf28:	200000e6 	.word	0x200000e6
 800cf2c:	200000f6 	.word	0x200000f6

0800cf30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	1dfb      	adds	r3, r7, #7
 800cf3c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cf3e:	2117      	movs	r1, #23
 800cf40:	187b      	adds	r3, r7, r1
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cf46:	187b      	adds	r3, r7, r1
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	e02f      	b.n	800cfae <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	0f1b      	lsrs	r3, r3, #28
 800cf52:	2b09      	cmp	r3, #9
 800cf54:	d80d      	bhi.n	800cf72 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	0f1b      	lsrs	r3, r3, #28
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	2317      	movs	r3, #23
 800cf5e:	18fb      	adds	r3, r7, r3
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	0019      	movs	r1, r3
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	185b      	adds	r3, r3, r1
 800cf6a:	3230      	adds	r2, #48	@ 0x30
 800cf6c:	b2d2      	uxtb	r2, r2
 800cf6e:	701a      	strb	r2, [r3, #0]
 800cf70:	e00c      	b.n	800cf8c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	0f1b      	lsrs	r3, r3, #28
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	2317      	movs	r3, #23
 800cf7a:	18fb      	adds	r3, r7, r3
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	0019      	movs	r1, r3
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	185b      	adds	r3, r3, r1
 800cf86:	3237      	adds	r2, #55	@ 0x37
 800cf88:	b2d2      	uxtb	r2, r2
 800cf8a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	011b      	lsls	r3, r3, #4
 800cf90:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf92:	2117      	movs	r1, #23
 800cf94:	187b      	adds	r3, r7, r1
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	18d3      	adds	r3, r2, r3
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfa4:	187b      	adds	r3, r7, r1
 800cfa6:	781a      	ldrb	r2, [r3, #0]
 800cfa8:	187b      	adds	r3, r7, r1
 800cfaa:	3201      	adds	r2, #1
 800cfac:	701a      	strb	r2, [r3, #0]
 800cfae:	2317      	movs	r3, #23
 800cfb0:	18fa      	adds	r2, r7, r3
 800cfb2:	1dfb      	adds	r3, r7, #7
 800cfb4:	7812      	ldrb	r2, [r2, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d3c8      	bcc.n	800cf4e <IntToUnicode+0x1e>
  }
}
 800cfbc:	46c0      	nop			@ (mov r8, r8)
 800cfbe:	46c0      	nop			@ (mov r8, r8)
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	b006      	add	sp, #24
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfc8:	b590      	push	{r4, r7, lr}
 800cfca:	b091      	sub	sp, #68	@ 0x44
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cfd0:	2414      	movs	r4, #20
 800cfd2:	193b      	adds	r3, r7, r4
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	232c      	movs	r3, #44	@ 0x2c
 800cfd8:	001a      	movs	r2, r3
 800cfda:	2100      	movs	r1, #0
 800cfdc:	f001 ff8c 	bl	800eef8 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a25      	ldr	r2, [pc, #148]	@ (800d07c <HAL_PCD_MspInit+0xb4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d144      	bne.n	800d074 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfea:	193b      	adds	r3, r7, r4
 800cfec:	2280      	movs	r2, #128	@ 0x80
 800cfee:	0452      	lsls	r2, r2, #17
 800cff0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cff2:	193b      	adds	r3, r7, r4
 800cff4:	2280      	movs	r2, #128	@ 0x80
 800cff6:	0192      	lsls	r2, r2, #6
 800cff8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cffa:	193b      	adds	r3, r7, r4
 800cffc:	0018      	movs	r0, r3
 800cffe:	f7fa ff4d 	bl	8007e9c <HAL_RCCEx_PeriphCLKConfig>
 800d002:	1e03      	subs	r3, r0, #0
 800d004:	d001      	beq.n	800d00a <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800d006:	f7f6 f909 	bl	800321c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d00a:	4b1d      	ldr	r3, [pc, #116]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d00c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d00e:	4b1c      	ldr	r3, [pc, #112]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d010:	2180      	movs	r1, #128	@ 0x80
 800d012:	0189      	lsls	r1, r1, #6
 800d014:	430a      	orrs	r2, r1
 800d016:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d018:	4b19      	ldr	r3, [pc, #100]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d01c:	2380      	movs	r3, #128	@ 0x80
 800d01e:	019b      	lsls	r3, r3, #6
 800d020:	4013      	ands	r3, r2
 800d022:	613b      	str	r3, [r7, #16]
 800d024:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d026:	4b16      	ldr	r3, [pc, #88]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d02a:	2380      	movs	r3, #128	@ 0x80
 800d02c:	055b      	lsls	r3, r3, #21
 800d02e:	4013      	ands	r3, r2
 800d030:	d116      	bne.n	800d060 <HAL_PCD_MspInit+0x98>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d032:	4b13      	ldr	r3, [pc, #76]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d036:	4b12      	ldr	r3, [pc, #72]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d038:	2180      	movs	r1, #128	@ 0x80
 800d03a:	0549      	lsls	r1, r1, #21
 800d03c:	430a      	orrs	r2, r1
 800d03e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d040:	4b0f      	ldr	r3, [pc, #60]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d044:	2380      	movs	r3, #128	@ 0x80
 800d046:	055b      	lsls	r3, r3, #21
 800d048:	4013      	ands	r3, r2
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d04e:	f7fa fa33 	bl	80074b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d052:	4b0b      	ldr	r3, [pc, #44]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d056:	4b0a      	ldr	r3, [pc, #40]	@ (800d080 <HAL_PCD_MspInit+0xb8>)
 800d058:	490a      	ldr	r1, [pc, #40]	@ (800d084 <HAL_PCD_MspInit+0xbc>)
 800d05a:	400a      	ands	r2, r1
 800d05c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d05e:	e001      	b.n	800d064 <HAL_PCD_MspInit+0x9c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d060:	f7fa fa2a 	bl	80074b8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d064:	2200      	movs	r2, #0
 800d066:	2100      	movs	r1, #0
 800d068:	2008      	movs	r0, #8
 800d06a:	f7f7 fc4d 	bl	8004908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d06e:	2008      	movs	r0, #8
 800d070:	f7f7 fc5f 	bl	8004932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800d074:	46c0      	nop			@ (mov r8, r8)
 800d076:	46bd      	mov	sp, r7
 800d078:	b011      	add	sp, #68	@ 0x44
 800d07a:	bd90      	pop	{r4, r7, pc}
 800d07c:	40005c00 	.word	0x40005c00
 800d080:	40021000 	.word	0x40021000
 800d084:	efffffff 	.word	0xefffffff

0800d088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	23b7      	movs	r3, #183	@ 0xb7
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	58d2      	ldr	r2, [r2, r3]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	21a7      	movs	r1, #167	@ 0xa7
 800d09c:	0089      	lsls	r1, r1, #2
 800d09e:	468c      	mov	ip, r1
 800d0a0:	4463      	add	r3, ip
 800d0a2:	0019      	movs	r1, r3
 800d0a4:	0010      	movs	r0, r2
 800d0a6:	f7fe f9d5 	bl	800b454 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d0aa:	46c0      	nop			@ (mov r8, r8)
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	b002      	add	sp, #8
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b2:	b590      	push	{r4, r7, lr}
 800d0b4:	b083      	sub	sp, #12
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	000a      	movs	r2, r1
 800d0bc:	1cfb      	adds	r3, r7, #3
 800d0be:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	23b7      	movs	r3, #183	@ 0xb7
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	58d4      	ldr	r4, [r2, r3]
 800d0c8:	1cfb      	adds	r3, r7, #3
 800d0ca:	781a      	ldrb	r2, [r3, #0]
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	23b4      	movs	r3, #180	@ 0xb4
 800d0d0:	0059      	lsls	r1, r3, #1
 800d0d2:	0013      	movs	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	189b      	adds	r3, r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	18c3      	adds	r3, r0, r3
 800d0dc:	185b      	adds	r3, r3, r1
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	1cfb      	adds	r3, r7, #3
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	0019      	movs	r1, r3
 800d0e6:	0020      	movs	r0, r4
 800d0e8:	f7fe fa1e 	bl	800b528 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d0ec:	46c0      	nop			@ (mov r8, r8)
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b003      	add	sp, #12
 800d0f2:	bd90      	pop	{r4, r7, pc}

0800d0f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	000a      	movs	r2, r1
 800d0fe:	1cfb      	adds	r3, r7, #3
 800d100:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	23b7      	movs	r3, #183	@ 0xb7
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	58d0      	ldr	r0, [r2, r3]
 800d10a:	1cfb      	adds	r3, r7, #3
 800d10c:	781a      	ldrb	r2, [r3, #0]
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	0013      	movs	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	189b      	adds	r3, r3, r2
 800d116:	00db      	lsls	r3, r3, #3
 800d118:	18cb      	adds	r3, r1, r3
 800d11a:	3328      	adds	r3, #40	@ 0x28
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	1cfb      	adds	r3, r7, #3
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	0019      	movs	r1, r3
 800d124:	f7fe fae8 	bl	800b6f8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d128:	46c0      	nop			@ (mov r8, r8)
 800d12a:	46bd      	mov	sp, r7
 800d12c:	b002      	add	sp, #8
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	23b7      	movs	r3, #183	@ 0xb7
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	58d3      	ldr	r3, [r2, r3]
 800d140:	0018      	movs	r0, r3
 800d142:	f7fe fc53 	bl	800b9ec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d146:	46c0      	nop			@ (mov r8, r8)
 800d148:	46bd      	mov	sp, r7
 800d14a:	b002      	add	sp, #8
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d156:	230f      	movs	r3, #15
 800d158:	18fb      	adds	r3, r7, r3
 800d15a:	2201      	movs	r2, #1
 800d15c:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	79db      	ldrb	r3, [r3, #7]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d001      	beq.n	800d16a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d166:	f7f6 f859 	bl	800321c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	23b7      	movs	r3, #183	@ 0xb7
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	58d2      	ldr	r2, [r2, r3]
 800d172:	230f      	movs	r3, #15
 800d174:	18fb      	adds	r3, r7, r3
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	0019      	movs	r1, r3
 800d17a:	0010      	movs	r0, r2
 800d17c:	f7fe fbf3 	bl	800b966 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	23b7      	movs	r3, #183	@ 0xb7
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	58d3      	ldr	r3, [r2, r3]
 800d188:	0018      	movs	r0, r3
 800d18a:	f7fe fb8d 	bl	800b8a8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d18e:	46c0      	nop			@ (mov r8, r8)
 800d190:	46bd      	mov	sp, r7
 800d192:	b004      	add	sp, #16
 800d194:	bd80      	pop	{r7, pc}
	...

0800d198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	23b7      	movs	r3, #183	@ 0xb7
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	58d3      	ldr	r3, [r2, r3]
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	f7fe fbed 	bl	800b988 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	7adb      	ldrb	r3, [r3, #11]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d005      	beq.n	800d1c2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1b6:	4b05      	ldr	r3, [pc, #20]	@ (800d1cc <HAL_PCD_SuspendCallback+0x34>)
 800d1b8:	691a      	ldr	r2, [r3, #16]
 800d1ba:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <HAL_PCD_SuspendCallback+0x34>)
 800d1bc:	2106      	movs	r1, #6
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d1c2:	46c0      	nop			@ (mov r8, r8)
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	b002      	add	sp, #8
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	46c0      	nop			@ (mov r8, r8)
 800d1cc:	e000ed00 	.word	0xe000ed00

0800d1d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7adb      	ldrb	r3, [r3, #11]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1e0:	4b09      	ldr	r3, [pc, #36]	@ (800d208 <HAL_PCD_ResumeCallback+0x38>)
 800d1e2:	691a      	ldr	r2, [r3, #16]
 800d1e4:	4b08      	ldr	r3, [pc, #32]	@ (800d208 <HAL_PCD_ResumeCallback+0x38>)
 800d1e6:	2106      	movs	r1, #6
 800d1e8:	438a      	bics	r2, r1
 800d1ea:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d1ec:	f000 fa7c 	bl	800d6e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	23b7      	movs	r3, #183	@ 0xb7
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	58d3      	ldr	r3, [r2, r3]
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f7fe fbdd 	bl	800b9b8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d1fe:	46c0      	nop			@ (mov r8, r8)
 800d200:	46bd      	mov	sp, r7
 800d202:	b002      	add	sp, #8
 800d204:	bd80      	pop	{r7, pc}
 800d206:	46c0      	nop			@ (mov r8, r8)
 800d208:	e000ed00 	.word	0xe000ed00

0800d20c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800d214:	4a34      	ldr	r2, [pc, #208]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d216:	23b7      	movs	r3, #183	@ 0xb7
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	6879      	ldr	r1, [r7, #4]
 800d21c:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	23b2      	movs	r3, #178	@ 0xb2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4930      	ldr	r1, [pc, #192]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d226:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800d228:	4b2f      	ldr	r3, [pc, #188]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d22a:	4a30      	ldr	r2, [pc, #192]	@ (800d2ec <USBD_LL_Init+0xe0>)
 800d22c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800d22e:	4b2e      	ldr	r3, [pc, #184]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d230:	2208      	movs	r2, #8
 800d232:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800d234:	4b2c      	ldr	r3, [pc, #176]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d236:	2208      	movs	r2, #8
 800d238:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800d23a:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d23c:	2202      	movs	r2, #2
 800d23e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d240:	4b29      	ldr	r3, [pc, #164]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d242:	2202      	movs	r2, #2
 800d244:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800d246:	4b28      	ldr	r3, [pc, #160]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d248:	2200      	movs	r2, #0
 800d24a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800d24c:	4b26      	ldr	r3, [pc, #152]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d24e:	2200      	movs	r2, #0
 800d250:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800d252:	4b25      	ldr	r3, [pc, #148]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d254:	2200      	movs	r2, #0
 800d256:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800d258:	4b23      	ldr	r3, [pc, #140]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800d25e:	4b22      	ldr	r3, [pc, #136]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d260:	2200      	movs	r2, #0
 800d262:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800d264:	4b20      	ldr	r3, [pc, #128]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d266:	2200      	movs	r2, #0
 800d268:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800d26a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800d270:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e8 <USBD_LL_Init+0xdc>)
 800d272:	0018      	movs	r0, r3
 800d274:	f7f8 fc1a 	bl	8005aac <HAL_PCD_Init>
 800d278:	1e03      	subs	r3, r0, #0
 800d27a:	d001      	beq.n	800d280 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800d27c:	f7f5 ffce 	bl	800321c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	23b2      	movs	r3, #178	@ 0xb2
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	58d0      	ldr	r0, [r2, r3]
 800d288:	2318      	movs	r3, #24
 800d28a:	2200      	movs	r2, #0
 800d28c:	2100      	movs	r1, #0
 800d28e:	f7fa f8a1 	bl	80073d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	23b2      	movs	r3, #178	@ 0xb2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	58d0      	ldr	r0, [r2, r3]
 800d29a:	2358      	movs	r3, #88	@ 0x58
 800d29c:	2200      	movs	r2, #0
 800d29e:	2180      	movs	r1, #128	@ 0x80
 800d2a0:	f7fa f898 	bl	80073d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	23b2      	movs	r3, #178	@ 0xb2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	58d0      	ldr	r0, [r2, r3]
 800d2ac:	23c0      	movs	r3, #192	@ 0xc0
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2181      	movs	r1, #129	@ 0x81
 800d2b2:	f7fa f88f 	bl	80073d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	23b2      	movs	r3, #178	@ 0xb2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	58d0      	ldr	r0, [r2, r3]
 800d2be:	2388      	movs	r3, #136	@ 0x88
 800d2c0:	005b      	lsls	r3, r3, #1
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2101      	movs	r1, #1
 800d2c6:	f7fa f885 	bl	80073d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	23b2      	movs	r3, #178	@ 0xb2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	58d0      	ldr	r0, [r2, r3]
 800d2d2:	2380      	movs	r3, #128	@ 0x80
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2182      	movs	r1, #130	@ 0x82
 800d2da:	f7fa f87b 	bl	80073d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	0018      	movs	r0, r3
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	b002      	add	sp, #8
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20001a04 	.word	0x20001a04
 800d2ec:	40005c00 	.word	0x40005c00

0800d2f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f8:	210f      	movs	r1, #15
 800d2fa:	187b      	adds	r3, r7, r1
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d300:	260e      	movs	r6, #14
 800d302:	19bb      	adds	r3, r7, r6
 800d304:	2200      	movs	r2, #0
 800d306:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	23b2      	movs	r3, #178	@ 0xb2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	58d3      	ldr	r3, [r2, r3]
 800d310:	000d      	movs	r5, r1
 800d312:	187c      	adds	r4, r7, r1
 800d314:	0018      	movs	r0, r3
 800d316:	f7f8 fcc3 	bl	8005ca0 <HAL_PCD_Start>
 800d31a:	0003      	movs	r3, r0
 800d31c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d31e:	19bc      	adds	r4, r7, r6
 800d320:	197b      	adds	r3, r7, r5
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	0018      	movs	r0, r3
 800d326:	f000 f9e6 	bl	800d6f6 <USBD_Get_USB_Status>
 800d32a:	0003      	movs	r3, r0
 800d32c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d32e:	19bb      	adds	r3, r7, r6
 800d330:	781b      	ldrb	r3, [r3, #0]
}
 800d332:	0018      	movs	r0, r3
 800d334:	46bd      	mov	sp, r7
 800d336:	b005      	add	sp, #20
 800d338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d33a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d33a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33c:	b085      	sub	sp, #20
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	000c      	movs	r4, r1
 800d344:	0010      	movs	r0, r2
 800d346:	0019      	movs	r1, r3
 800d348:	1cfb      	adds	r3, r7, #3
 800d34a:	1c22      	adds	r2, r4, #0
 800d34c:	701a      	strb	r2, [r3, #0]
 800d34e:	1cbb      	adds	r3, r7, #2
 800d350:	1c02      	adds	r2, r0, #0
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	003b      	movs	r3, r7
 800d356:	1c0a      	adds	r2, r1, #0
 800d358:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d35a:	260f      	movs	r6, #15
 800d35c:	19bb      	adds	r3, r7, r6
 800d35e:	2200      	movs	r2, #0
 800d360:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d362:	250e      	movs	r5, #14
 800d364:	197b      	adds	r3, r7, r5
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	23b2      	movs	r3, #178	@ 0xb2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	58d0      	ldr	r0, [r2, r3]
 800d372:	19bc      	adds	r4, r7, r6
 800d374:	1cbb      	adds	r3, r7, #2
 800d376:	781d      	ldrb	r5, [r3, #0]
 800d378:	003b      	movs	r3, r7
 800d37a:	881a      	ldrh	r2, [r3, #0]
 800d37c:	1cfb      	adds	r3, r7, #3
 800d37e:	7819      	ldrb	r1, [r3, #0]
 800d380:	002b      	movs	r3, r5
 800d382:	f7f8 fdf3 	bl	8005f6c <HAL_PCD_EP_Open>
 800d386:	0003      	movs	r3, r0
 800d388:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d38a:	250e      	movs	r5, #14
 800d38c:	197c      	adds	r4, r7, r5
 800d38e:	19bb      	adds	r3, r7, r6
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	0018      	movs	r0, r3
 800d394:	f000 f9af 	bl	800d6f6 <USBD_Get_USB_Status>
 800d398:	0003      	movs	r3, r0
 800d39a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d39c:	197b      	adds	r3, r7, r5
 800d39e:	781b      	ldrb	r3, [r3, #0]
}
 800d3a0:	0018      	movs	r0, r3
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	b005      	add	sp, #20
 800d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	000a      	movs	r2, r1
 800d3b2:	1cfb      	adds	r3, r7, #3
 800d3b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b6:	210f      	movs	r1, #15
 800d3b8:	187b      	adds	r3, r7, r1
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3be:	260e      	movs	r6, #14
 800d3c0:	19bb      	adds	r3, r7, r6
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	23b2      	movs	r3, #178	@ 0xb2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	58d2      	ldr	r2, [r2, r3]
 800d3ce:	000d      	movs	r5, r1
 800d3d0:	187c      	adds	r4, r7, r1
 800d3d2:	1cfb      	adds	r3, r7, #3
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	0019      	movs	r1, r3
 800d3d8:	0010      	movs	r0, r2
 800d3da:	f7f8 fe38 	bl	800604e <HAL_PCD_EP_Close>
 800d3de:	0003      	movs	r3, r0
 800d3e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3e2:	19bc      	adds	r4, r7, r6
 800d3e4:	197b      	adds	r3, r7, r5
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	f000 f984 	bl	800d6f6 <USBD_Get_USB_Status>
 800d3ee:	0003      	movs	r3, r0
 800d3f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3f2:	19bb      	adds	r3, r7, r6
 800d3f4:	781b      	ldrb	r3, [r3, #0]
}
 800d3f6:	0018      	movs	r0, r3
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	b005      	add	sp, #20
 800d3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3fe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	000a      	movs	r2, r1
 800d408:	1cfb      	adds	r3, r7, #3
 800d40a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d40c:	210f      	movs	r1, #15
 800d40e:	187b      	adds	r3, r7, r1
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d414:	260e      	movs	r6, #14
 800d416:	19bb      	adds	r3, r7, r6
 800d418:	2200      	movs	r2, #0
 800d41a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	23b2      	movs	r3, #178	@ 0xb2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	58d2      	ldr	r2, [r2, r3]
 800d424:	000d      	movs	r5, r1
 800d426:	187c      	adds	r4, r7, r1
 800d428:	1cfb      	adds	r3, r7, #3
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	0019      	movs	r1, r3
 800d42e:	0010      	movs	r0, r2
 800d430:	f7f8 feee 	bl	8006210 <HAL_PCD_EP_SetStall>
 800d434:	0003      	movs	r3, r0
 800d436:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d438:	19bc      	adds	r4, r7, r6
 800d43a:	197b      	adds	r3, r7, r5
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	0018      	movs	r0, r3
 800d440:	f000 f959 	bl	800d6f6 <USBD_Get_USB_Status>
 800d444:	0003      	movs	r3, r0
 800d446:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d448:	19bb      	adds	r3, r7, r6
 800d44a:	781b      	ldrb	r3, [r3, #0]
}
 800d44c:	0018      	movs	r0, r3
 800d44e:	46bd      	mov	sp, r7
 800d450:	b005      	add	sp, #20
 800d452:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d454 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	000a      	movs	r2, r1
 800d45e:	1cfb      	adds	r3, r7, #3
 800d460:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d462:	210f      	movs	r1, #15
 800d464:	187b      	adds	r3, r7, r1
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d46a:	260e      	movs	r6, #14
 800d46c:	19bb      	adds	r3, r7, r6
 800d46e:	2200      	movs	r2, #0
 800d470:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	23b2      	movs	r3, #178	@ 0xb2
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	58d2      	ldr	r2, [r2, r3]
 800d47a:	000d      	movs	r5, r1
 800d47c:	187c      	adds	r4, r7, r1
 800d47e:	1cfb      	adds	r3, r7, #3
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	0019      	movs	r1, r3
 800d484:	0010      	movs	r0, r2
 800d486:	f7f8 ff21 	bl	80062cc <HAL_PCD_EP_ClrStall>
 800d48a:	0003      	movs	r3, r0
 800d48c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d48e:	19bc      	adds	r4, r7, r6
 800d490:	197b      	adds	r3, r7, r5
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	0018      	movs	r0, r3
 800d496:	f000 f92e 	bl	800d6f6 <USBD_Get_USB_Status>
 800d49a:	0003      	movs	r3, r0
 800d49c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d49e:	19bb      	adds	r3, r7, r6
 800d4a0:	781b      	ldrb	r3, [r3, #0]
}
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	b005      	add	sp, #20
 800d4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b084      	sub	sp, #16
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	000a      	movs	r2, r1
 800d4b4:	1cfb      	adds	r3, r7, #3
 800d4b6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	23b2      	movs	r3, #178	@ 0xb2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	58d3      	ldr	r3, [r2, r3]
 800d4c0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4c2:	1cfb      	adds	r3, r7, #3
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b25b      	sxtb	r3, r3
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	da0c      	bge.n	800d4e6 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4cc:	1cfb      	adds	r3, r7, #3
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	227f      	movs	r2, #127	@ 0x7f
 800d4d2:	401a      	ands	r2, r3
 800d4d4:	68f9      	ldr	r1, [r7, #12]
 800d4d6:	0013      	movs	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	189b      	adds	r3, r3, r2
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	18cb      	adds	r3, r1, r3
 800d4e0:	3316      	adds	r3, #22
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	e00d      	b.n	800d502 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d4e6:	1cfb      	adds	r3, r7, #3
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	227f      	movs	r2, #127	@ 0x7f
 800d4ec:	401a      	ands	r2, r3
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	23ab      	movs	r3, #171	@ 0xab
 800d4f2:	0059      	lsls	r1, r3, #1
 800d4f4:	0013      	movs	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	189b      	adds	r3, r3, r2
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	18c3      	adds	r3, r0, r3
 800d4fe:	185b      	adds	r3, r3, r1
 800d500:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d502:	0018      	movs	r0, r3
 800d504:	46bd      	mov	sp, r7
 800d506:	b004      	add	sp, #16
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d50a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50c:	b085      	sub	sp, #20
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	000a      	movs	r2, r1
 800d514:	1cfb      	adds	r3, r7, #3
 800d516:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d518:	210f      	movs	r1, #15
 800d51a:	187b      	adds	r3, r7, r1
 800d51c:	2200      	movs	r2, #0
 800d51e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d520:	260e      	movs	r6, #14
 800d522:	19bb      	adds	r3, r7, r6
 800d524:	2200      	movs	r2, #0
 800d526:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	23b2      	movs	r3, #178	@ 0xb2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	58d2      	ldr	r2, [r2, r3]
 800d530:	000d      	movs	r5, r1
 800d532:	187c      	adds	r4, r7, r1
 800d534:	1cfb      	adds	r3, r7, #3
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	0019      	movs	r1, r3
 800d53a:	0010      	movs	r0, r2
 800d53c:	f7f8 fcec 	bl	8005f18 <HAL_PCD_SetAddress>
 800d540:	0003      	movs	r3, r0
 800d542:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d544:	19bc      	adds	r4, r7, r6
 800d546:	197b      	adds	r3, r7, r5
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	0018      	movs	r0, r3
 800d54c:	f000 f8d3 	bl	800d6f6 <USBD_Get_USB_Status>
 800d550:	0003      	movs	r3, r0
 800d552:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d554:	19bb      	adds	r3, r7, r6
 800d556:	781b      	ldrb	r3, [r3, #0]
}
 800d558:	0018      	movs	r0, r3
 800d55a:	46bd      	mov	sp, r7
 800d55c:	b005      	add	sp, #20
 800d55e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d560 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d560:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d562:	b087      	sub	sp, #28
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	607a      	str	r2, [r7, #4]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	230b      	movs	r3, #11
 800d56e:	18fb      	adds	r3, r7, r3
 800d570:	1c0a      	adds	r2, r1, #0
 800d572:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d574:	2617      	movs	r6, #23
 800d576:	19bb      	adds	r3, r7, r6
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d57c:	2516      	movs	r5, #22
 800d57e:	197b      	adds	r3, r7, r5
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	23b2      	movs	r3, #178	@ 0xb2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	58d0      	ldr	r0, [r2, r3]
 800d58c:	19bc      	adds	r4, r7, r6
 800d58e:	683d      	ldr	r5, [r7, #0]
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	230b      	movs	r3, #11
 800d594:	18fb      	adds	r3, r7, r3
 800d596:	7819      	ldrb	r1, [r3, #0]
 800d598:	002b      	movs	r3, r5
 800d59a:	f7f8 fdfc 	bl	8006196 <HAL_PCD_EP_Transmit>
 800d59e:	0003      	movs	r3, r0
 800d5a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5a2:	2516      	movs	r5, #22
 800d5a4:	197c      	adds	r4, r7, r5
 800d5a6:	19bb      	adds	r3, r7, r6
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f000 f8a3 	bl	800d6f6 <USBD_Get_USB_Status>
 800d5b0:	0003      	movs	r3, r0
 800d5b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5b4:	197b      	adds	r3, r7, r5
 800d5b6:	781b      	ldrb	r3, [r3, #0]
}
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	b007      	add	sp, #28
 800d5be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	607a      	str	r2, [r7, #4]
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	230b      	movs	r3, #11
 800d5ce:	18fb      	adds	r3, r7, r3
 800d5d0:	1c0a      	adds	r2, r1, #0
 800d5d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d4:	2617      	movs	r6, #23
 800d5d6:	19bb      	adds	r3, r7, r6
 800d5d8:	2200      	movs	r2, #0
 800d5da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5dc:	2516      	movs	r5, #22
 800d5de:	197b      	adds	r3, r7, r5
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	23b2      	movs	r3, #178	@ 0xb2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	58d0      	ldr	r0, [r2, r3]
 800d5ec:	19bc      	adds	r4, r7, r6
 800d5ee:	683d      	ldr	r5, [r7, #0]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	230b      	movs	r3, #11
 800d5f4:	18fb      	adds	r3, r7, r3
 800d5f6:	7819      	ldrb	r1, [r3, #0]
 800d5f8:	002b      	movs	r3, r5
 800d5fa:	f7f8 fd7b 	bl	80060f4 <HAL_PCD_EP_Receive>
 800d5fe:	0003      	movs	r3, r0
 800d600:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d602:	2516      	movs	r5, #22
 800d604:	197c      	adds	r4, r7, r5
 800d606:	19bb      	adds	r3, r7, r6
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	0018      	movs	r0, r3
 800d60c:	f000 f873 	bl	800d6f6 <USBD_Get_USB_Status>
 800d610:	0003      	movs	r3, r0
 800d612:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d614:	197b      	adds	r3, r7, r5
 800d616:	781b      	ldrb	r3, [r3, #0]
}
 800d618:	0018      	movs	r0, r3
 800d61a:	46bd      	mov	sp, r7
 800d61c:	b007      	add	sp, #28
 800d61e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d620 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	000a      	movs	r2, r1
 800d62a:	1cfb      	adds	r3, r7, #3
 800d62c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	23b2      	movs	r3, #178	@ 0xb2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	58d2      	ldr	r2, [r2, r3]
 800d636:	1cfb      	adds	r3, r7, #3
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	0019      	movs	r1, r3
 800d63c:	0010      	movs	r0, r2
 800d63e:	f7f8 fd91 	bl	8006164 <HAL_PCD_EP_GetRxCount>
 800d642:	0003      	movs	r3, r0
}
 800d644:	0018      	movs	r0, r3
 800d646:	46bd      	mov	sp, r7
 800d648:	b002      	add	sp, #8
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	000a      	movs	r2, r1
 800d656:	1cfb      	adds	r3, r7, #3
 800d658:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d65a:	1cfb      	adds	r3, r7, #3
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d002      	beq.n	800d668 <HAL_PCDEx_LPM_Callback+0x1c>
 800d662:	2b01      	cmp	r3, #1
 800d664:	d014      	beq.n	800d690 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d666:	e025      	b.n	800d6b4 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7adb      	ldrb	r3, [r3, #11]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d007      	beq.n	800d680 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800d670:	f000 f83a 	bl	800d6e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d674:	4b11      	ldr	r3, [pc, #68]	@ (800d6bc <HAL_PCDEx_LPM_Callback+0x70>)
 800d676:	691a      	ldr	r2, [r3, #16]
 800d678:	4b10      	ldr	r3, [pc, #64]	@ (800d6bc <HAL_PCDEx_LPM_Callback+0x70>)
 800d67a:	2106      	movs	r1, #6
 800d67c:	438a      	bics	r2, r1
 800d67e:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	23b7      	movs	r3, #183	@ 0xb7
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	58d3      	ldr	r3, [r2, r3]
 800d688:	0018      	movs	r0, r3
 800d68a:	f7fe f995 	bl	800b9b8 <USBD_LL_Resume>
    break;
 800d68e:	e011      	b.n	800d6b4 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	23b7      	movs	r3, #183	@ 0xb7
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	58d3      	ldr	r3, [r2, r3]
 800d698:	0018      	movs	r0, r3
 800d69a:	f7fe f975 	bl	800b988 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7adb      	ldrb	r3, [r3, #11]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a6:	4b05      	ldr	r3, [pc, #20]	@ (800d6bc <HAL_PCDEx_LPM_Callback+0x70>)
 800d6a8:	691a      	ldr	r2, [r3, #16]
 800d6aa:	4b04      	ldr	r3, [pc, #16]	@ (800d6bc <HAL_PCDEx_LPM_Callback+0x70>)
 800d6ac:	2106      	movs	r1, #6
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	611a      	str	r2, [r3, #16]
    break;
 800d6b2:	46c0      	nop			@ (mov r8, r8)
}
 800d6b4:	46c0      	nop			@ (mov r8, r8)
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	b002      	add	sp, #8
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	e000ed00 	.word	0xe000ed00

0800d6c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d6c8:	4b02      	ldr	r3, [pc, #8]	@ (800d6d4 <USBD_static_malloc+0x14>)
}
 800d6ca:	0018      	movs	r0, r3
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	b002      	add	sp, #8
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	46c0      	nop			@ (mov r8, r8)
 800d6d4:	20001ce4 	.word	0x20001ce4

0800d6d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]

}
 800d6e0:	46c0      	nop			@ (mov r8, r8)
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	b002      	add	sp, #8
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d6ec:	f7f5 f9c4 	bl	8002a78 <SystemClock_Config>
}
 800d6f0:	46c0      	nop			@ (mov r8, r8)
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	0002      	movs	r2, r0
 800d6fe:	1dfb      	adds	r3, r7, #7
 800d700:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d702:	230f      	movs	r3, #15
 800d704:	18fb      	adds	r3, r7, r3
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d70a:	1dfb      	adds	r3, r7, #7
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d017      	beq.n	800d742 <USBD_Get_USB_Status+0x4c>
 800d712:	dc1b      	bgt.n	800d74c <USBD_Get_USB_Status+0x56>
 800d714:	2b02      	cmp	r3, #2
 800d716:	d00f      	beq.n	800d738 <USBD_Get_USB_Status+0x42>
 800d718:	dc18      	bgt.n	800d74c <USBD_Get_USB_Status+0x56>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <USBD_Get_USB_Status+0x2e>
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d005      	beq.n	800d72e <USBD_Get_USB_Status+0x38>
 800d722:	e013      	b.n	800d74c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d724:	230f      	movs	r3, #15
 800d726:	18fb      	adds	r3, r7, r3
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
    break;
 800d72c:	e013      	b.n	800d756 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d72e:	230f      	movs	r3, #15
 800d730:	18fb      	adds	r3, r7, r3
 800d732:	2203      	movs	r2, #3
 800d734:	701a      	strb	r2, [r3, #0]
    break;
 800d736:	e00e      	b.n	800d756 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d738:	230f      	movs	r3, #15
 800d73a:	18fb      	adds	r3, r7, r3
 800d73c:	2201      	movs	r2, #1
 800d73e:	701a      	strb	r2, [r3, #0]
    break;
 800d740:	e009      	b.n	800d756 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d742:	230f      	movs	r3, #15
 800d744:	18fb      	adds	r3, r7, r3
 800d746:	2203      	movs	r2, #3
 800d748:	701a      	strb	r2, [r3, #0]
    break;
 800d74a:	e004      	b.n	800d756 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d74c:	230f      	movs	r3, #15
 800d74e:	18fb      	adds	r3, r7, r3
 800d750:	2203      	movs	r2, #3
 800d752:	701a      	strb	r2, [r3, #0]
    break;
 800d754:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800d756:	230f      	movs	r3, #15
 800d758:	18fb      	adds	r3, r7, r3
 800d75a:	781b      	ldrb	r3, [r3, #0]
}
 800d75c:	0018      	movs	r0, r3
 800d75e:	46bd      	mov	sp, r7
 800d760:	b004      	add	sp, #16
 800d762:	bd80      	pop	{r7, pc}

0800d764 <sulp>:
 800d764:	b570      	push	{r4, r5, r6, lr}
 800d766:	0016      	movs	r6, r2
 800d768:	000d      	movs	r5, r1
 800d76a:	f003 fae9 	bl	8010d40 <__ulp>
 800d76e:	2e00      	cmp	r6, #0
 800d770:	d00d      	beq.n	800d78e <sulp+0x2a>
 800d772:	236b      	movs	r3, #107	@ 0x6b
 800d774:	006a      	lsls	r2, r5, #1
 800d776:	0d52      	lsrs	r2, r2, #21
 800d778:	1a9b      	subs	r3, r3, r2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dd07      	ble.n	800d78e <sulp+0x2a>
 800d77e:	2400      	movs	r4, #0
 800d780:	4a03      	ldr	r2, [pc, #12]	@ (800d790 <sulp+0x2c>)
 800d782:	051b      	lsls	r3, r3, #20
 800d784:	189d      	adds	r5, r3, r2
 800d786:	002b      	movs	r3, r5
 800d788:	0022      	movs	r2, r4
 800d78a:	f7f3 fef7 	bl	800157c <__aeabi_dmul>
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	3ff00000 	.word	0x3ff00000

0800d794 <_strtod_l>:
 800d794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d796:	b0a3      	sub	sp, #140	@ 0x8c
 800d798:	921b      	str	r2, [sp, #108]	@ 0x6c
 800d79a:	2200      	movs	r2, #0
 800d79c:	2600      	movs	r6, #0
 800d79e:	2700      	movs	r7, #0
 800d7a0:	9005      	str	r0, [sp, #20]
 800d7a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7a4:	921e      	str	r2, [sp, #120]	@ 0x78
 800d7a6:	911d      	str	r1, [sp, #116]	@ 0x74
 800d7a8:	780a      	ldrb	r2, [r1, #0]
 800d7aa:	2a2b      	cmp	r2, #43	@ 0x2b
 800d7ac:	d053      	beq.n	800d856 <_strtod_l+0xc2>
 800d7ae:	d83f      	bhi.n	800d830 <_strtod_l+0x9c>
 800d7b0:	2a0d      	cmp	r2, #13
 800d7b2:	d839      	bhi.n	800d828 <_strtod_l+0x94>
 800d7b4:	2a08      	cmp	r2, #8
 800d7b6:	d839      	bhi.n	800d82c <_strtod_l+0x98>
 800d7b8:	2a00      	cmp	r2, #0
 800d7ba:	d042      	beq.n	800d842 <_strtod_l+0xae>
 800d7bc:	2200      	movs	r2, #0
 800d7be:	9212      	str	r2, [sp, #72]	@ 0x48
 800d7c0:	2100      	movs	r1, #0
 800d7c2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800d7c4:	910c      	str	r1, [sp, #48]	@ 0x30
 800d7c6:	782a      	ldrb	r2, [r5, #0]
 800d7c8:	2a30      	cmp	r2, #48	@ 0x30
 800d7ca:	d000      	beq.n	800d7ce <_strtod_l+0x3a>
 800d7cc:	e083      	b.n	800d8d6 <_strtod_l+0x142>
 800d7ce:	786a      	ldrb	r2, [r5, #1]
 800d7d0:	3120      	adds	r1, #32
 800d7d2:	438a      	bics	r2, r1
 800d7d4:	2a58      	cmp	r2, #88	@ 0x58
 800d7d6:	d000      	beq.n	800d7da <_strtod_l+0x46>
 800d7d8:	e073      	b.n	800d8c2 <_strtod_l+0x12e>
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d7de:	4a9b      	ldr	r2, [pc, #620]	@ (800da4c <_strtod_l+0x2b8>)
 800d7e0:	9301      	str	r3, [sp, #4]
 800d7e2:	ab1e      	add	r3, sp, #120	@ 0x78
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	9805      	ldr	r0, [sp, #20]
 800d7e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d7ea:	a91d      	add	r1, sp, #116	@ 0x74
 800d7ec:	f002 fb60 	bl	800feb0 <__gethex>
 800d7f0:	230f      	movs	r3, #15
 800d7f2:	0002      	movs	r2, r0
 800d7f4:	401a      	ands	r2, r3
 800d7f6:	0004      	movs	r4, r0
 800d7f8:	9206      	str	r2, [sp, #24]
 800d7fa:	4218      	tst	r0, r3
 800d7fc:	d005      	beq.n	800d80a <_strtod_l+0x76>
 800d7fe:	2a06      	cmp	r2, #6
 800d800:	d12b      	bne.n	800d85a <_strtod_l+0xc6>
 800d802:	2300      	movs	r3, #0
 800d804:	3501      	adds	r5, #1
 800d806:	951d      	str	r5, [sp, #116]	@ 0x74
 800d808:	9312      	str	r3, [sp, #72]	@ 0x48
 800d80a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <_strtod_l+0x82>
 800d810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d812:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d019      	beq.n	800d850 <_strtod_l+0xbc>
 800d81c:	2380      	movs	r3, #128	@ 0x80
 800d81e:	0030      	movs	r0, r6
 800d820:	061b      	lsls	r3, r3, #24
 800d822:	18f9      	adds	r1, r7, r3
 800d824:	b023      	add	sp, #140	@ 0x8c
 800d826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d828:	2a20      	cmp	r2, #32
 800d82a:	d1c7      	bne.n	800d7bc <_strtod_l+0x28>
 800d82c:	3101      	adds	r1, #1
 800d82e:	e7ba      	b.n	800d7a6 <_strtod_l+0x12>
 800d830:	2a2d      	cmp	r2, #45	@ 0x2d
 800d832:	d1c3      	bne.n	800d7bc <_strtod_l+0x28>
 800d834:	3a2c      	subs	r2, #44	@ 0x2c
 800d836:	9212      	str	r2, [sp, #72]	@ 0x48
 800d838:	1c4a      	adds	r2, r1, #1
 800d83a:	921d      	str	r2, [sp, #116]	@ 0x74
 800d83c:	784a      	ldrb	r2, [r1, #1]
 800d83e:	2a00      	cmp	r2, #0
 800d840:	d1be      	bne.n	800d7c0 <_strtod_l+0x2c>
 800d842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d844:	931d      	str	r3, [sp, #116]	@ 0x74
 800d846:	2300      	movs	r3, #0
 800d848:	9312      	str	r3, [sp, #72]	@ 0x48
 800d84a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1df      	bne.n	800d810 <_strtod_l+0x7c>
 800d850:	0030      	movs	r0, r6
 800d852:	0039      	movs	r1, r7
 800d854:	e7e6      	b.n	800d824 <_strtod_l+0x90>
 800d856:	2200      	movs	r2, #0
 800d858:	e7ed      	b.n	800d836 <_strtod_l+0xa2>
 800d85a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d85c:	2a00      	cmp	r2, #0
 800d85e:	d007      	beq.n	800d870 <_strtod_l+0xdc>
 800d860:	2135      	movs	r1, #53	@ 0x35
 800d862:	a820      	add	r0, sp, #128	@ 0x80
 800d864:	f003 fb62 	bl	8010f2c <__copybits>
 800d868:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d86a:	9805      	ldr	r0, [sp, #20]
 800d86c:	f002 ff24 	bl	80106b8 <_Bfree>
 800d870:	9806      	ldr	r0, [sp, #24]
 800d872:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d874:	3801      	subs	r0, #1
 800d876:	2804      	cmp	r0, #4
 800d878:	d806      	bhi.n	800d888 <_strtod_l+0xf4>
 800d87a:	f7f2 fc49 	bl	8000110 <__gnu_thumb1_case_uqi>
 800d87e:	0312      	.short	0x0312
 800d880:	1e1c      	.short	0x1e1c
 800d882:	12          	.byte	0x12
 800d883:	00          	.byte	0x00
 800d884:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d886:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800d888:	05e4      	lsls	r4, r4, #23
 800d88a:	d502      	bpl.n	800d892 <_strtod_l+0xfe>
 800d88c:	2380      	movs	r3, #128	@ 0x80
 800d88e:	061b      	lsls	r3, r3, #24
 800d890:	431f      	orrs	r7, r3
 800d892:	4b6f      	ldr	r3, [pc, #444]	@ (800da50 <_strtod_l+0x2bc>)
 800d894:	423b      	tst	r3, r7
 800d896:	d1b8      	bne.n	800d80a <_strtod_l+0x76>
 800d898:	f001 fb9a 	bl	800efd0 <__errno>
 800d89c:	2322      	movs	r3, #34	@ 0x22
 800d89e:	6003      	str	r3, [r0, #0]
 800d8a0:	e7b3      	b.n	800d80a <_strtod_l+0x76>
 800d8a2:	496c      	ldr	r1, [pc, #432]	@ (800da54 <_strtod_l+0x2c0>)
 800d8a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d8a6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d8a8:	400a      	ands	r2, r1
 800d8aa:	496b      	ldr	r1, [pc, #428]	@ (800da58 <_strtod_l+0x2c4>)
 800d8ac:	185b      	adds	r3, r3, r1
 800d8ae:	051b      	lsls	r3, r3, #20
 800d8b0:	431a      	orrs	r2, r3
 800d8b2:	0017      	movs	r7, r2
 800d8b4:	e7e8      	b.n	800d888 <_strtod_l+0xf4>
 800d8b6:	4f66      	ldr	r7, [pc, #408]	@ (800da50 <_strtod_l+0x2bc>)
 800d8b8:	e7e6      	b.n	800d888 <_strtod_l+0xf4>
 800d8ba:	2601      	movs	r6, #1
 800d8bc:	4f67      	ldr	r7, [pc, #412]	@ (800da5c <_strtod_l+0x2c8>)
 800d8be:	4276      	negs	r6, r6
 800d8c0:	e7e2      	b.n	800d888 <_strtod_l+0xf4>
 800d8c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	921d      	str	r2, [sp, #116]	@ 0x74
 800d8c8:	785b      	ldrb	r3, [r3, #1]
 800d8ca:	2b30      	cmp	r3, #48	@ 0x30
 800d8cc:	d0f9      	beq.n	800d8c2 <_strtod_l+0x12e>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d09b      	beq.n	800d80a <_strtod_l+0x76>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d8d8:	220a      	movs	r2, #10
 800d8da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8dc:	2300      	movs	r3, #0
 800d8de:	9310      	str	r3, [sp, #64]	@ 0x40
 800d8e0:	930d      	str	r3, [sp, #52]	@ 0x34
 800d8e2:	9308      	str	r3, [sp, #32]
 800d8e4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d8e6:	7804      	ldrb	r4, [r0, #0]
 800d8e8:	0023      	movs	r3, r4
 800d8ea:	3b30      	subs	r3, #48	@ 0x30
 800d8ec:	b2d9      	uxtb	r1, r3
 800d8ee:	2909      	cmp	r1, #9
 800d8f0:	d927      	bls.n	800d942 <_strtod_l+0x1ae>
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	495a      	ldr	r1, [pc, #360]	@ (800da60 <_strtod_l+0x2cc>)
 800d8f6:	f001 fb07 	bl	800ef08 <strncmp>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d033      	beq.n	800d966 <_strtod_l+0x1d2>
 800d8fe:	2000      	movs	r0, #0
 800d900:	0023      	movs	r3, r4
 800d902:	4684      	mov	ip, r0
 800d904:	9a08      	ldr	r2, [sp, #32]
 800d906:	900e      	str	r0, [sp, #56]	@ 0x38
 800d908:	9206      	str	r2, [sp, #24]
 800d90a:	2220      	movs	r2, #32
 800d90c:	0019      	movs	r1, r3
 800d90e:	4391      	bics	r1, r2
 800d910:	000a      	movs	r2, r1
 800d912:	2100      	movs	r1, #0
 800d914:	9107      	str	r1, [sp, #28]
 800d916:	2a45      	cmp	r2, #69	@ 0x45
 800d918:	d000      	beq.n	800d91c <_strtod_l+0x188>
 800d91a:	e0cb      	b.n	800dab4 <_strtod_l+0x320>
 800d91c:	9b06      	ldr	r3, [sp, #24]
 800d91e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d920:	4303      	orrs	r3, r0
 800d922:	4313      	orrs	r3, r2
 800d924:	428b      	cmp	r3, r1
 800d926:	d08c      	beq.n	800d842 <_strtod_l+0xae>
 800d928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92c:	3301      	adds	r3, #1
 800d92e:	931d      	str	r3, [sp, #116]	@ 0x74
 800d930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d932:	785b      	ldrb	r3, [r3, #1]
 800d934:	2b2b      	cmp	r3, #43	@ 0x2b
 800d936:	d07b      	beq.n	800da30 <_strtod_l+0x29c>
 800d938:	000c      	movs	r4, r1
 800d93a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d93c:	d17e      	bne.n	800da3c <_strtod_l+0x2a8>
 800d93e:	2401      	movs	r4, #1
 800d940:	e077      	b.n	800da32 <_strtod_l+0x29e>
 800d942:	9908      	ldr	r1, [sp, #32]
 800d944:	2908      	cmp	r1, #8
 800d946:	dc09      	bgt.n	800d95c <_strtod_l+0x1c8>
 800d948:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d94a:	4351      	muls	r1, r2
 800d94c:	185b      	adds	r3, r3, r1
 800d94e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d950:	9b08      	ldr	r3, [sp, #32]
 800d952:	3001      	adds	r0, #1
 800d954:	3301      	adds	r3, #1
 800d956:	9308      	str	r3, [sp, #32]
 800d958:	901d      	str	r0, [sp, #116]	@ 0x74
 800d95a:	e7c3      	b.n	800d8e4 <_strtod_l+0x150>
 800d95c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d95e:	4355      	muls	r5, r2
 800d960:	195b      	adds	r3, r3, r5
 800d962:	9310      	str	r3, [sp, #64]	@ 0x40
 800d964:	e7f4      	b.n	800d950 <_strtod_l+0x1bc>
 800d966:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	921d      	str	r2, [sp, #116]	@ 0x74
 800d96c:	9a08      	ldr	r2, [sp, #32]
 800d96e:	785b      	ldrb	r3, [r3, #1]
 800d970:	2a00      	cmp	r2, #0
 800d972:	d03e      	beq.n	800d9f2 <_strtod_l+0x25e>
 800d974:	900e      	str	r0, [sp, #56]	@ 0x38
 800d976:	9206      	str	r2, [sp, #24]
 800d978:	001a      	movs	r2, r3
 800d97a:	3a30      	subs	r2, #48	@ 0x30
 800d97c:	2a09      	cmp	r2, #9
 800d97e:	d912      	bls.n	800d9a6 <_strtod_l+0x212>
 800d980:	2201      	movs	r2, #1
 800d982:	4694      	mov	ip, r2
 800d984:	e7c1      	b.n	800d90a <_strtod_l+0x176>
 800d986:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d988:	3001      	adds	r0, #1
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	921d      	str	r2, [sp, #116]	@ 0x74
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b30      	cmp	r3, #48	@ 0x30
 800d992:	d0f8      	beq.n	800d986 <_strtod_l+0x1f2>
 800d994:	001a      	movs	r2, r3
 800d996:	3a31      	subs	r2, #49	@ 0x31
 800d998:	2a08      	cmp	r2, #8
 800d99a:	d844      	bhi.n	800da26 <_strtod_l+0x292>
 800d99c:	900e      	str	r0, [sp, #56]	@ 0x38
 800d99e:	2000      	movs	r0, #0
 800d9a0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d9a2:	9006      	str	r0, [sp, #24]
 800d9a4:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d9a6:	001c      	movs	r4, r3
 800d9a8:	1c42      	adds	r2, r0, #1
 800d9aa:	3c30      	subs	r4, #48	@ 0x30
 800d9ac:	2b30      	cmp	r3, #48	@ 0x30
 800d9ae:	d01a      	beq.n	800d9e6 <_strtod_l+0x252>
 800d9b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9b2:	9906      	ldr	r1, [sp, #24]
 800d9b4:	189b      	adds	r3, r3, r2
 800d9b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9b8:	230a      	movs	r3, #10
 800d9ba:	469c      	mov	ip, r3
 800d9bc:	9d06      	ldr	r5, [sp, #24]
 800d9be:	1c4b      	adds	r3, r1, #1
 800d9c0:	1b5d      	subs	r5, r3, r5
 800d9c2:	42aa      	cmp	r2, r5
 800d9c4:	dc17      	bgt.n	800d9f6 <_strtod_l+0x262>
 800d9c6:	43c3      	mvns	r3, r0
 800d9c8:	9a06      	ldr	r2, [sp, #24]
 800d9ca:	17db      	asrs	r3, r3, #31
 800d9cc:	4003      	ands	r3, r0
 800d9ce:	18d1      	adds	r1, r2, r3
 800d9d0:	3201      	adds	r2, #1
 800d9d2:	18d3      	adds	r3, r2, r3
 800d9d4:	9306      	str	r3, [sp, #24]
 800d9d6:	2908      	cmp	r1, #8
 800d9d8:	dc1c      	bgt.n	800da14 <_strtod_l+0x280>
 800d9da:	230a      	movs	r3, #10
 800d9dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d9de:	4353      	muls	r3, r2
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	18e3      	adds	r3, r4, r3
 800d9e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d9e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d9e8:	0010      	movs	r0, r2
 800d9ea:	1c59      	adds	r1, r3, #1
 800d9ec:	911d      	str	r1, [sp, #116]	@ 0x74
 800d9ee:	785b      	ldrb	r3, [r3, #1]
 800d9f0:	e7c2      	b.n	800d978 <_strtod_l+0x1e4>
 800d9f2:	9808      	ldr	r0, [sp, #32]
 800d9f4:	e7cc      	b.n	800d990 <_strtod_l+0x1fc>
 800d9f6:	2908      	cmp	r1, #8
 800d9f8:	dc05      	bgt.n	800da06 <_strtod_l+0x272>
 800d9fa:	4665      	mov	r5, ip
 800d9fc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d9fe:	4369      	muls	r1, r5
 800da00:	910d      	str	r1, [sp, #52]	@ 0x34
 800da02:	0019      	movs	r1, r3
 800da04:	e7da      	b.n	800d9bc <_strtod_l+0x228>
 800da06:	2b10      	cmp	r3, #16
 800da08:	dcfb      	bgt.n	800da02 <_strtod_l+0x26e>
 800da0a:	4661      	mov	r1, ip
 800da0c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800da0e:	434d      	muls	r5, r1
 800da10:	9510      	str	r5, [sp, #64]	@ 0x40
 800da12:	e7f6      	b.n	800da02 <_strtod_l+0x26e>
 800da14:	2200      	movs	r2, #0
 800da16:	290f      	cmp	r1, #15
 800da18:	dce5      	bgt.n	800d9e6 <_strtod_l+0x252>
 800da1a:	230a      	movs	r3, #10
 800da1c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800da1e:	435d      	muls	r5, r3
 800da20:	1963      	adds	r3, r4, r5
 800da22:	9310      	str	r3, [sp, #64]	@ 0x40
 800da24:	e7df      	b.n	800d9e6 <_strtod_l+0x252>
 800da26:	2200      	movs	r2, #0
 800da28:	920e      	str	r2, [sp, #56]	@ 0x38
 800da2a:	9206      	str	r2, [sp, #24]
 800da2c:	3201      	adds	r2, #1
 800da2e:	e7a8      	b.n	800d982 <_strtod_l+0x1ee>
 800da30:	2400      	movs	r4, #0
 800da32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da34:	3302      	adds	r3, #2
 800da36:	931d      	str	r3, [sp, #116]	@ 0x74
 800da38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3a:	789b      	ldrb	r3, [r3, #2]
 800da3c:	001a      	movs	r2, r3
 800da3e:	3a30      	subs	r2, #48	@ 0x30
 800da40:	2a09      	cmp	r2, #9
 800da42:	d913      	bls.n	800da6c <_strtod_l+0x2d8>
 800da44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da46:	921d      	str	r2, [sp, #116]	@ 0x74
 800da48:	2200      	movs	r2, #0
 800da4a:	e032      	b.n	800dab2 <_strtod_l+0x31e>
 800da4c:	08011f30 	.word	0x08011f30
 800da50:	7ff00000 	.word	0x7ff00000
 800da54:	ffefffff 	.word	0xffefffff
 800da58:	00000433 	.word	0x00000433
 800da5c:	7fffffff 	.word	0x7fffffff
 800da60:	08011d48 	.word	0x08011d48
 800da64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	921d      	str	r2, [sp, #116]	@ 0x74
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	2b30      	cmp	r3, #48	@ 0x30
 800da6e:	d0f9      	beq.n	800da64 <_strtod_l+0x2d0>
 800da70:	2200      	movs	r2, #0
 800da72:	9207      	str	r2, [sp, #28]
 800da74:	001a      	movs	r2, r3
 800da76:	3a31      	subs	r2, #49	@ 0x31
 800da78:	2a08      	cmp	r2, #8
 800da7a:	d81b      	bhi.n	800dab4 <_strtod_l+0x320>
 800da7c:	3b30      	subs	r3, #48	@ 0x30
 800da7e:	001a      	movs	r2, r3
 800da80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da82:	9307      	str	r3, [sp, #28]
 800da84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800da86:	1c59      	adds	r1, r3, #1
 800da88:	911d      	str	r1, [sp, #116]	@ 0x74
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	001d      	movs	r5, r3
 800da8e:	3d30      	subs	r5, #48	@ 0x30
 800da90:	2d09      	cmp	r5, #9
 800da92:	d93a      	bls.n	800db0a <_strtod_l+0x376>
 800da94:	9d07      	ldr	r5, [sp, #28]
 800da96:	1b49      	subs	r1, r1, r5
 800da98:	000d      	movs	r5, r1
 800da9a:	49b3      	ldr	r1, [pc, #716]	@ (800dd68 <_strtod_l+0x5d4>)
 800da9c:	9107      	str	r1, [sp, #28]
 800da9e:	2d08      	cmp	r5, #8
 800daa0:	dc03      	bgt.n	800daaa <_strtod_l+0x316>
 800daa2:	9207      	str	r2, [sp, #28]
 800daa4:	428a      	cmp	r2, r1
 800daa6:	dd00      	ble.n	800daaa <_strtod_l+0x316>
 800daa8:	9107      	str	r1, [sp, #28]
 800daaa:	2c00      	cmp	r4, #0
 800daac:	d002      	beq.n	800dab4 <_strtod_l+0x320>
 800daae:	9a07      	ldr	r2, [sp, #28]
 800dab0:	4252      	negs	r2, r2
 800dab2:	9207      	str	r2, [sp, #28]
 800dab4:	9a06      	ldr	r2, [sp, #24]
 800dab6:	2a00      	cmp	r2, #0
 800dab8:	d14b      	bne.n	800db52 <_strtod_l+0x3be>
 800daba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dabc:	4310      	orrs	r0, r2
 800dabe:	d000      	beq.n	800dac2 <_strtod_l+0x32e>
 800dac0:	e6a3      	b.n	800d80a <_strtod_l+0x76>
 800dac2:	4662      	mov	r2, ip
 800dac4:	2a00      	cmp	r2, #0
 800dac6:	d000      	beq.n	800daca <_strtod_l+0x336>
 800dac8:	e6bb      	b.n	800d842 <_strtod_l+0xae>
 800daca:	2b69      	cmp	r3, #105	@ 0x69
 800dacc:	d025      	beq.n	800db1a <_strtod_l+0x386>
 800dace:	dc21      	bgt.n	800db14 <_strtod_l+0x380>
 800dad0:	2b49      	cmp	r3, #73	@ 0x49
 800dad2:	d022      	beq.n	800db1a <_strtod_l+0x386>
 800dad4:	2b4e      	cmp	r3, #78	@ 0x4e
 800dad6:	d000      	beq.n	800dada <_strtod_l+0x346>
 800dad8:	e6b3      	b.n	800d842 <_strtod_l+0xae>
 800dada:	49a4      	ldr	r1, [pc, #656]	@ (800dd6c <_strtod_l+0x5d8>)
 800dadc:	a81d      	add	r0, sp, #116	@ 0x74
 800dade:	f002 fc1d 	bl	801031c <__match>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d100      	bne.n	800dae8 <_strtod_l+0x354>
 800dae6:	e6ac      	b.n	800d842 <_strtod_l+0xae>
 800dae8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b28      	cmp	r3, #40	@ 0x28
 800daee:	d12a      	bne.n	800db46 <_strtod_l+0x3b2>
 800daf0:	499f      	ldr	r1, [pc, #636]	@ (800dd70 <_strtod_l+0x5dc>)
 800daf2:	aa20      	add	r2, sp, #128	@ 0x80
 800daf4:	a81d      	add	r0, sp, #116	@ 0x74
 800daf6:	f002 fc25 	bl	8010344 <__hexnan>
 800dafa:	2805      	cmp	r0, #5
 800dafc:	d123      	bne.n	800db46 <_strtod_l+0x3b2>
 800dafe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800db00:	4a9c      	ldr	r2, [pc, #624]	@ (800dd74 <_strtod_l+0x5e0>)
 800db02:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800db04:	431a      	orrs	r2, r3
 800db06:	0017      	movs	r7, r2
 800db08:	e67f      	b.n	800d80a <_strtod_l+0x76>
 800db0a:	210a      	movs	r1, #10
 800db0c:	434a      	muls	r2, r1
 800db0e:	18d2      	adds	r2, r2, r3
 800db10:	3a30      	subs	r2, #48	@ 0x30
 800db12:	e7b7      	b.n	800da84 <_strtod_l+0x2f0>
 800db14:	2b6e      	cmp	r3, #110	@ 0x6e
 800db16:	d0e0      	beq.n	800dada <_strtod_l+0x346>
 800db18:	e693      	b.n	800d842 <_strtod_l+0xae>
 800db1a:	4997      	ldr	r1, [pc, #604]	@ (800dd78 <_strtod_l+0x5e4>)
 800db1c:	a81d      	add	r0, sp, #116	@ 0x74
 800db1e:	f002 fbfd 	bl	801031c <__match>
 800db22:	2800      	cmp	r0, #0
 800db24:	d100      	bne.n	800db28 <_strtod_l+0x394>
 800db26:	e68c      	b.n	800d842 <_strtod_l+0xae>
 800db28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db2a:	4994      	ldr	r1, [pc, #592]	@ (800dd7c <_strtod_l+0x5e8>)
 800db2c:	3b01      	subs	r3, #1
 800db2e:	a81d      	add	r0, sp, #116	@ 0x74
 800db30:	931d      	str	r3, [sp, #116]	@ 0x74
 800db32:	f002 fbf3 	bl	801031c <__match>
 800db36:	2800      	cmp	r0, #0
 800db38:	d102      	bne.n	800db40 <_strtod_l+0x3ac>
 800db3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db3c:	3301      	adds	r3, #1
 800db3e:	931d      	str	r3, [sp, #116]	@ 0x74
 800db40:	2600      	movs	r6, #0
 800db42:	4f8c      	ldr	r7, [pc, #560]	@ (800dd74 <_strtod_l+0x5e0>)
 800db44:	e661      	b.n	800d80a <_strtod_l+0x76>
 800db46:	488e      	ldr	r0, [pc, #568]	@ (800dd80 <_strtod_l+0x5ec>)
 800db48:	f001 fa84 	bl	800f054 <nan>
 800db4c:	0006      	movs	r6, r0
 800db4e:	000f      	movs	r7, r1
 800db50:	e65b      	b.n	800d80a <_strtod_l+0x76>
 800db52:	9b07      	ldr	r3, [sp, #28]
 800db54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db56:	1a9b      	subs	r3, r3, r2
 800db58:	930c      	str	r3, [sp, #48]	@ 0x30
 800db5a:	9b08      	ldr	r3, [sp, #32]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <_strtod_l+0x3d0>
 800db60:	9b06      	ldr	r3, [sp, #24]
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	9c06      	ldr	r4, [sp, #24]
 800db66:	2c10      	cmp	r4, #16
 800db68:	dd00      	ble.n	800db6c <_strtod_l+0x3d8>
 800db6a:	2410      	movs	r4, #16
 800db6c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800db6e:	f7f4 fc81 	bl	8002474 <__aeabi_ui2d>
 800db72:	9b06      	ldr	r3, [sp, #24]
 800db74:	0006      	movs	r6, r0
 800db76:	000f      	movs	r7, r1
 800db78:	2b09      	cmp	r3, #9
 800db7a:	dc13      	bgt.n	800dba4 <_strtod_l+0x410>
 800db7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d100      	bne.n	800db84 <_strtod_l+0x3f0>
 800db82:	e642      	b.n	800d80a <_strtod_l+0x76>
 800db84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db86:	2b00      	cmp	r3, #0
 800db88:	dc00      	bgt.n	800db8c <_strtod_l+0x3f8>
 800db8a:	e07e      	b.n	800dc8a <_strtod_l+0x4f6>
 800db8c:	2b16      	cmp	r3, #22
 800db8e:	dc63      	bgt.n	800dc58 <_strtod_l+0x4c4>
 800db90:	497c      	ldr	r1, [pc, #496]	@ (800dd84 <_strtod_l+0x5f0>)
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	18c9      	adds	r1, r1, r3
 800db96:	0032      	movs	r2, r6
 800db98:	6808      	ldr	r0, [r1, #0]
 800db9a:	6849      	ldr	r1, [r1, #4]
 800db9c:	003b      	movs	r3, r7
 800db9e:	f7f3 fced 	bl	800157c <__aeabi_dmul>
 800dba2:	e7d3      	b.n	800db4c <_strtod_l+0x3b8>
 800dba4:	0022      	movs	r2, r4
 800dba6:	4b77      	ldr	r3, [pc, #476]	@ (800dd84 <_strtod_l+0x5f0>)
 800dba8:	3a09      	subs	r2, #9
 800dbaa:	00d2      	lsls	r2, r2, #3
 800dbac:	189b      	adds	r3, r3, r2
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	f7f3 fce3 	bl	800157c <__aeabi_dmul>
 800dbb6:	0006      	movs	r6, r0
 800dbb8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dbba:	000f      	movs	r7, r1
 800dbbc:	f7f4 fc5a 	bl	8002474 <__aeabi_ui2d>
 800dbc0:	000b      	movs	r3, r1
 800dbc2:	0002      	movs	r2, r0
 800dbc4:	0039      	movs	r1, r7
 800dbc6:	0030      	movs	r0, r6
 800dbc8:	f7f2 fcd8 	bl	800057c <__aeabi_dadd>
 800dbcc:	9b06      	ldr	r3, [sp, #24]
 800dbce:	0006      	movs	r6, r0
 800dbd0:	000f      	movs	r7, r1
 800dbd2:	2b0f      	cmp	r3, #15
 800dbd4:	ddd2      	ble.n	800db7c <_strtod_l+0x3e8>
 800dbd6:	9b06      	ldr	r3, [sp, #24]
 800dbd8:	1b1c      	subs	r4, r3, r4
 800dbda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbdc:	18e4      	adds	r4, r4, r3
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	dc00      	bgt.n	800dbe4 <_strtod_l+0x450>
 800dbe2:	e09b      	b.n	800dd1c <_strtod_l+0x588>
 800dbe4:	220f      	movs	r2, #15
 800dbe6:	0023      	movs	r3, r4
 800dbe8:	4013      	ands	r3, r2
 800dbea:	4214      	tst	r4, r2
 800dbec:	d00a      	beq.n	800dc04 <_strtod_l+0x470>
 800dbee:	4965      	ldr	r1, [pc, #404]	@ (800dd84 <_strtod_l+0x5f0>)
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	18c9      	adds	r1, r1, r3
 800dbf4:	0032      	movs	r2, r6
 800dbf6:	6808      	ldr	r0, [r1, #0]
 800dbf8:	6849      	ldr	r1, [r1, #4]
 800dbfa:	003b      	movs	r3, r7
 800dbfc:	f7f3 fcbe 	bl	800157c <__aeabi_dmul>
 800dc00:	0006      	movs	r6, r0
 800dc02:	000f      	movs	r7, r1
 800dc04:	230f      	movs	r3, #15
 800dc06:	439c      	bics	r4, r3
 800dc08:	d073      	beq.n	800dcf2 <_strtod_l+0x55e>
 800dc0a:	3326      	adds	r3, #38	@ 0x26
 800dc0c:	33ff      	adds	r3, #255	@ 0xff
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	dd4b      	ble.n	800dcaa <_strtod_l+0x516>
 800dc12:	2300      	movs	r3, #0
 800dc14:	9306      	str	r3, [sp, #24]
 800dc16:	9307      	str	r3, [sp, #28]
 800dc18:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc1a:	9308      	str	r3, [sp, #32]
 800dc1c:	2322      	movs	r3, #34	@ 0x22
 800dc1e:	2600      	movs	r6, #0
 800dc20:	9a05      	ldr	r2, [sp, #20]
 800dc22:	4f54      	ldr	r7, [pc, #336]	@ (800dd74 <_strtod_l+0x5e0>)
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc28:	42b3      	cmp	r3, r6
 800dc2a:	d100      	bne.n	800dc2e <_strtod_l+0x49a>
 800dc2c:	e5ed      	b.n	800d80a <_strtod_l+0x76>
 800dc2e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dc30:	9805      	ldr	r0, [sp, #20]
 800dc32:	f002 fd41 	bl	80106b8 <_Bfree>
 800dc36:	9908      	ldr	r1, [sp, #32]
 800dc38:	9805      	ldr	r0, [sp, #20]
 800dc3a:	f002 fd3d 	bl	80106b8 <_Bfree>
 800dc3e:	9907      	ldr	r1, [sp, #28]
 800dc40:	9805      	ldr	r0, [sp, #20]
 800dc42:	f002 fd39 	bl	80106b8 <_Bfree>
 800dc46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dc48:	9805      	ldr	r0, [sp, #20]
 800dc4a:	f002 fd35 	bl	80106b8 <_Bfree>
 800dc4e:	9906      	ldr	r1, [sp, #24]
 800dc50:	9805      	ldr	r0, [sp, #20]
 800dc52:	f002 fd31 	bl	80106b8 <_Bfree>
 800dc56:	e5d8      	b.n	800d80a <_strtod_l+0x76>
 800dc58:	2325      	movs	r3, #37	@ 0x25
 800dc5a:	9a06      	ldr	r2, [sp, #24]
 800dc5c:	1a9b      	subs	r3, r3, r2
 800dc5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc60:	4293      	cmp	r3, r2
 800dc62:	dbb8      	blt.n	800dbd6 <_strtod_l+0x442>
 800dc64:	240f      	movs	r4, #15
 800dc66:	9b06      	ldr	r3, [sp, #24]
 800dc68:	4d46      	ldr	r5, [pc, #280]	@ (800dd84 <_strtod_l+0x5f0>)
 800dc6a:	1ae4      	subs	r4, r4, r3
 800dc6c:	00e1      	lsls	r1, r4, #3
 800dc6e:	1869      	adds	r1, r5, r1
 800dc70:	0032      	movs	r2, r6
 800dc72:	6808      	ldr	r0, [r1, #0]
 800dc74:	6849      	ldr	r1, [r1, #4]
 800dc76:	003b      	movs	r3, r7
 800dc78:	f7f3 fc80 	bl	800157c <__aeabi_dmul>
 800dc7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc7e:	1b1c      	subs	r4, r3, r4
 800dc80:	00e4      	lsls	r4, r4, #3
 800dc82:	192d      	adds	r5, r5, r4
 800dc84:	682a      	ldr	r2, [r5, #0]
 800dc86:	686b      	ldr	r3, [r5, #4]
 800dc88:	e789      	b.n	800db9e <_strtod_l+0x40a>
 800dc8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc8c:	3316      	adds	r3, #22
 800dc8e:	dba2      	blt.n	800dbd6 <_strtod_l+0x442>
 800dc90:	9907      	ldr	r1, [sp, #28]
 800dc92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc94:	4b3b      	ldr	r3, [pc, #236]	@ (800dd84 <_strtod_l+0x5f0>)
 800dc96:	1a52      	subs	r2, r2, r1
 800dc98:	00d2      	lsls	r2, r2, #3
 800dc9a:	189b      	adds	r3, r3, r2
 800dc9c:	0030      	movs	r0, r6
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	0039      	movs	r1, r7
 800dca4:	f7f3 f830 	bl	8000d08 <__aeabi_ddiv>
 800dca8:	e750      	b.n	800db4c <_strtod_l+0x3b8>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	0030      	movs	r0, r6
 800dcae:	0039      	movs	r1, r7
 800dcb0:	4d35      	ldr	r5, [pc, #212]	@ (800dd88 <_strtod_l+0x5f4>)
 800dcb2:	1124      	asrs	r4, r4, #4
 800dcb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb6:	2c01      	cmp	r4, #1
 800dcb8:	dc1e      	bgt.n	800dcf8 <_strtod_l+0x564>
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <_strtod_l+0x52e>
 800dcbe:	0006      	movs	r6, r0
 800dcc0:	000f      	movs	r7, r1
 800dcc2:	4b32      	ldr	r3, [pc, #200]	@ (800dd8c <_strtod_l+0x5f8>)
 800dcc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcc6:	18ff      	adds	r7, r7, r3
 800dcc8:	4b2f      	ldr	r3, [pc, #188]	@ (800dd88 <_strtod_l+0x5f4>)
 800dcca:	00d5      	lsls	r5, r2, #3
 800dccc:	195d      	adds	r5, r3, r5
 800dcce:	0032      	movs	r2, r6
 800dcd0:	6828      	ldr	r0, [r5, #0]
 800dcd2:	6869      	ldr	r1, [r5, #4]
 800dcd4:	003b      	movs	r3, r7
 800dcd6:	f7f3 fc51 	bl	800157c <__aeabi_dmul>
 800dcda:	4b26      	ldr	r3, [pc, #152]	@ (800dd74 <_strtod_l+0x5e0>)
 800dcdc:	4a2c      	ldr	r2, [pc, #176]	@ (800dd90 <_strtod_l+0x5fc>)
 800dcde:	0006      	movs	r6, r0
 800dce0:	400b      	ands	r3, r1
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d895      	bhi.n	800dc12 <_strtod_l+0x47e>
 800dce6:	4a2b      	ldr	r2, [pc, #172]	@ (800dd94 <_strtod_l+0x600>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d913      	bls.n	800dd14 <_strtod_l+0x580>
 800dcec:	2601      	movs	r6, #1
 800dcee:	4f2a      	ldr	r7, [pc, #168]	@ (800dd98 <_strtod_l+0x604>)
 800dcf0:	4276      	negs	r6, r6
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf6:	e086      	b.n	800de06 <_strtod_l+0x672>
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	4214      	tst	r4, r2
 800dcfc:	d004      	beq.n	800dd08 <_strtod_l+0x574>
 800dcfe:	682a      	ldr	r2, [r5, #0]
 800dd00:	686b      	ldr	r3, [r5, #4]
 800dd02:	f7f3 fc3b 	bl	800157c <__aeabi_dmul>
 800dd06:	2301      	movs	r3, #1
 800dd08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd0a:	1064      	asrs	r4, r4, #1
 800dd0c:	3201      	adds	r2, #1
 800dd0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd10:	3508      	adds	r5, #8
 800dd12:	e7d0      	b.n	800dcb6 <_strtod_l+0x522>
 800dd14:	23d4      	movs	r3, #212	@ 0xd4
 800dd16:	049b      	lsls	r3, r3, #18
 800dd18:	18cf      	adds	r7, r1, r3
 800dd1a:	e7ea      	b.n	800dcf2 <_strtod_l+0x55e>
 800dd1c:	2c00      	cmp	r4, #0
 800dd1e:	d0e8      	beq.n	800dcf2 <_strtod_l+0x55e>
 800dd20:	4264      	negs	r4, r4
 800dd22:	230f      	movs	r3, #15
 800dd24:	0022      	movs	r2, r4
 800dd26:	401a      	ands	r2, r3
 800dd28:	421c      	tst	r4, r3
 800dd2a:	d00a      	beq.n	800dd42 <_strtod_l+0x5ae>
 800dd2c:	4b15      	ldr	r3, [pc, #84]	@ (800dd84 <_strtod_l+0x5f0>)
 800dd2e:	00d2      	lsls	r2, r2, #3
 800dd30:	189b      	adds	r3, r3, r2
 800dd32:	0030      	movs	r0, r6
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	0039      	movs	r1, r7
 800dd3a:	f7f2 ffe5 	bl	8000d08 <__aeabi_ddiv>
 800dd3e:	0006      	movs	r6, r0
 800dd40:	000f      	movs	r7, r1
 800dd42:	1124      	asrs	r4, r4, #4
 800dd44:	d0d5      	beq.n	800dcf2 <_strtod_l+0x55e>
 800dd46:	2c1f      	cmp	r4, #31
 800dd48:	dd28      	ble.n	800dd9c <_strtod_l+0x608>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	9306      	str	r3, [sp, #24]
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd52:	9308      	str	r3, [sp, #32]
 800dd54:	2322      	movs	r3, #34	@ 0x22
 800dd56:	9a05      	ldr	r2, [sp, #20]
 800dd58:	2600      	movs	r6, #0
 800dd5a:	6013      	str	r3, [r2, #0]
 800dd5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd5e:	2700      	movs	r7, #0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d000      	beq.n	800dd66 <_strtod_l+0x5d2>
 800dd64:	e763      	b.n	800dc2e <_strtod_l+0x49a>
 800dd66:	e550      	b.n	800d80a <_strtod_l+0x76>
 800dd68:	00004e1f 	.word	0x00004e1f
 800dd6c:	08011d57 	.word	0x08011d57
 800dd70:	08011f1c 	.word	0x08011f1c
 800dd74:	7ff00000 	.word	0x7ff00000
 800dd78:	08011d4f 	.word	0x08011d4f
 800dd7c:	08011d89 	.word	0x08011d89
 800dd80:	08011f18 	.word	0x08011f18
 800dd84:	08011fa8 	.word	0x08011fa8
 800dd88:	08011f80 	.word	0x08011f80
 800dd8c:	fcb00000 	.word	0xfcb00000
 800dd90:	7ca00000 	.word	0x7ca00000
 800dd94:	7c900000 	.word	0x7c900000
 800dd98:	7fefffff 	.word	0x7fefffff
 800dd9c:	2310      	movs	r3, #16
 800dd9e:	0022      	movs	r2, r4
 800dda0:	401a      	ands	r2, r3
 800dda2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda4:	421c      	tst	r4, r3
 800dda6:	d001      	beq.n	800ddac <_strtod_l+0x618>
 800dda8:	335a      	adds	r3, #90	@ 0x5a
 800ddaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddac:	0030      	movs	r0, r6
 800ddae:	0039      	movs	r1, r7
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4dc0      	ldr	r5, [pc, #768]	@ (800e0b4 <_strtod_l+0x920>)
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	4214      	tst	r4, r2
 800ddb8:	d004      	beq.n	800ddc4 <_strtod_l+0x630>
 800ddba:	682a      	ldr	r2, [r5, #0]
 800ddbc:	686b      	ldr	r3, [r5, #4]
 800ddbe:	f7f3 fbdd 	bl	800157c <__aeabi_dmul>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	1064      	asrs	r4, r4, #1
 800ddc6:	3508      	adds	r5, #8
 800ddc8:	2c00      	cmp	r4, #0
 800ddca:	d1f3      	bne.n	800ddb4 <_strtod_l+0x620>
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <_strtod_l+0x640>
 800ddd0:	0006      	movs	r6, r0
 800ddd2:	000f      	movs	r7, r1
 800ddd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00d      	beq.n	800ddf6 <_strtod_l+0x662>
 800ddda:	236b      	movs	r3, #107	@ 0x6b
 800dddc:	007a      	lsls	r2, r7, #1
 800ddde:	0d52      	lsrs	r2, r2, #21
 800dde0:	0039      	movs	r1, r7
 800dde2:	1a9b      	subs	r3, r3, r2
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dd06      	ble.n	800ddf6 <_strtod_l+0x662>
 800dde8:	2b1f      	cmp	r3, #31
 800ddea:	dd5c      	ble.n	800dea6 <_strtod_l+0x712>
 800ddec:	2600      	movs	r6, #0
 800ddee:	2b34      	cmp	r3, #52	@ 0x34
 800ddf0:	dd52      	ble.n	800de98 <_strtod_l+0x704>
 800ddf2:	27dc      	movs	r7, #220	@ 0xdc
 800ddf4:	04bf      	lsls	r7, r7, #18
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	0030      	movs	r0, r6
 800ddfc:	0039      	movs	r1, r7
 800ddfe:	f7f2 fb21 	bl	8000444 <__aeabi_dcmpeq>
 800de02:	2800      	cmp	r0, #0
 800de04:	d1a1      	bne.n	800dd4a <_strtod_l+0x5b6>
 800de06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de08:	9a08      	ldr	r2, [sp, #32]
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de0e:	9b06      	ldr	r3, [sp, #24]
 800de10:	9805      	ldr	r0, [sp, #20]
 800de12:	f002 fcb9 	bl	8010788 <__s2b>
 800de16:	900d      	str	r0, [sp, #52]	@ 0x34
 800de18:	2800      	cmp	r0, #0
 800de1a:	d100      	bne.n	800de1e <_strtod_l+0x68a>
 800de1c:	e6f9      	b.n	800dc12 <_strtod_l+0x47e>
 800de1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de20:	9907      	ldr	r1, [sp, #28]
 800de22:	43db      	mvns	r3, r3
 800de24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de26:	17db      	asrs	r3, r3, #31
 800de28:	1a52      	subs	r2, r2, r1
 800de2a:	9214      	str	r2, [sp, #80]	@ 0x50
 800de2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800de2e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800de30:	17d2      	asrs	r2, r2, #31
 800de32:	4011      	ands	r1, r2
 800de34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800de36:	9114      	str	r1, [sp, #80]	@ 0x50
 800de38:	401a      	ands	r2, r3
 800de3a:	2300      	movs	r3, #0
 800de3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800de3e:	9306      	str	r3, [sp, #24]
 800de40:	9307      	str	r3, [sp, #28]
 800de42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de44:	9805      	ldr	r0, [sp, #20]
 800de46:	6859      	ldr	r1, [r3, #4]
 800de48:	f002 fbf2 	bl	8010630 <_Balloc>
 800de4c:	9008      	str	r0, [sp, #32]
 800de4e:	2800      	cmp	r0, #0
 800de50:	d100      	bne.n	800de54 <_strtod_l+0x6c0>
 800de52:	e6e3      	b.n	800dc1c <_strtod_l+0x488>
 800de54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de56:	300c      	adds	r0, #12
 800de58:	0019      	movs	r1, r3
 800de5a:	691a      	ldr	r2, [r3, #16]
 800de5c:	310c      	adds	r1, #12
 800de5e:	3202      	adds	r2, #2
 800de60:	0092      	lsls	r2, r2, #2
 800de62:	f001 f8ed 	bl	800f040 <memcpy>
 800de66:	ab20      	add	r3, sp, #128	@ 0x80
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	0032      	movs	r2, r6
 800de70:	003b      	movs	r3, r7
 800de72:	9805      	ldr	r0, [sp, #20]
 800de74:	9610      	str	r6, [sp, #64]	@ 0x40
 800de76:	9711      	str	r7, [sp, #68]	@ 0x44
 800de78:	f002 ffce 	bl	8010e18 <__d2b>
 800de7c:	901e      	str	r0, [sp, #120]	@ 0x78
 800de7e:	2800      	cmp	r0, #0
 800de80:	d100      	bne.n	800de84 <_strtod_l+0x6f0>
 800de82:	e6cb      	b.n	800dc1c <_strtod_l+0x488>
 800de84:	2101      	movs	r1, #1
 800de86:	9805      	ldr	r0, [sp, #20]
 800de88:	f002 fd1a 	bl	80108c0 <__i2b>
 800de8c:	9007      	str	r0, [sp, #28]
 800de8e:	2800      	cmp	r0, #0
 800de90:	d10e      	bne.n	800deb0 <_strtod_l+0x71c>
 800de92:	2300      	movs	r3, #0
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	e6c1      	b.n	800dc1c <_strtod_l+0x488>
 800de98:	234b      	movs	r3, #75	@ 0x4b
 800de9a:	1a9a      	subs	r2, r3, r2
 800de9c:	3b4c      	subs	r3, #76	@ 0x4c
 800de9e:	4093      	lsls	r3, r2
 800dea0:	4019      	ands	r1, r3
 800dea2:	000f      	movs	r7, r1
 800dea4:	e7a7      	b.n	800ddf6 <_strtod_l+0x662>
 800dea6:	2201      	movs	r2, #1
 800dea8:	4252      	negs	r2, r2
 800deaa:	409a      	lsls	r2, r3
 800deac:	4016      	ands	r6, r2
 800deae:	e7a2      	b.n	800ddf6 <_strtod_l+0x662>
 800deb0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800deb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800deb4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800deb6:	1ad4      	subs	r4, r2, r3
 800deb8:	2b00      	cmp	r3, #0
 800deba:	db01      	blt.n	800dec0 <_strtod_l+0x72c>
 800debc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800debe:	195d      	adds	r5, r3, r5
 800dec0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dec2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dec4:	1a5b      	subs	r3, r3, r1
 800dec6:	2136      	movs	r1, #54	@ 0x36
 800dec8:	189b      	adds	r3, r3, r2
 800deca:	1a8a      	subs	r2, r1, r2
 800decc:	497a      	ldr	r1, [pc, #488]	@ (800e0b8 <_strtod_l+0x924>)
 800dece:	2001      	movs	r0, #1
 800ded0:	468c      	mov	ip, r1
 800ded2:	2100      	movs	r1, #0
 800ded4:	3b01      	subs	r3, #1
 800ded6:	9115      	str	r1, [sp, #84]	@ 0x54
 800ded8:	9016      	str	r0, [sp, #88]	@ 0x58
 800deda:	4563      	cmp	r3, ip
 800dedc:	da06      	bge.n	800deec <_strtod_l+0x758>
 800dede:	4661      	mov	r1, ip
 800dee0:	1ac9      	subs	r1, r1, r3
 800dee2:	1a52      	subs	r2, r2, r1
 800dee4:	291f      	cmp	r1, #31
 800dee6:	dc3f      	bgt.n	800df68 <_strtod_l+0x7d4>
 800dee8:	4088      	lsls	r0, r1
 800deea:	9016      	str	r0, [sp, #88]	@ 0x58
 800deec:	18ab      	adds	r3, r5, r2
 800deee:	930e      	str	r3, [sp, #56]	@ 0x38
 800def0:	18a4      	adds	r4, r4, r2
 800def2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800def6:	191c      	adds	r4, r3, r4
 800def8:	002b      	movs	r3, r5
 800defa:	4295      	cmp	r5, r2
 800defc:	dd00      	ble.n	800df00 <_strtod_l+0x76c>
 800defe:	0013      	movs	r3, r2
 800df00:	42a3      	cmp	r3, r4
 800df02:	dd00      	ble.n	800df06 <_strtod_l+0x772>
 800df04:	0023      	movs	r3, r4
 800df06:	2b00      	cmp	r3, #0
 800df08:	dd04      	ble.n	800df14 <_strtod_l+0x780>
 800df0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df0c:	1ae4      	subs	r4, r4, r3
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	920e      	str	r2, [sp, #56]	@ 0x38
 800df12:	1aed      	subs	r5, r5, r3
 800df14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800df16:	2b00      	cmp	r3, #0
 800df18:	dd16      	ble.n	800df48 <_strtod_l+0x7b4>
 800df1a:	001a      	movs	r2, r3
 800df1c:	9907      	ldr	r1, [sp, #28]
 800df1e:	9805      	ldr	r0, [sp, #20]
 800df20:	f002 fd90 	bl	8010a44 <__pow5mult>
 800df24:	9007      	str	r0, [sp, #28]
 800df26:	2800      	cmp	r0, #0
 800df28:	d0b3      	beq.n	800de92 <_strtod_l+0x6fe>
 800df2a:	0001      	movs	r1, r0
 800df2c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800df2e:	9805      	ldr	r0, [sp, #20]
 800df30:	f002 fcde 	bl	80108f0 <__multiply>
 800df34:	9013      	str	r0, [sp, #76]	@ 0x4c
 800df36:	2800      	cmp	r0, #0
 800df38:	d100      	bne.n	800df3c <_strtod_l+0x7a8>
 800df3a:	e66f      	b.n	800dc1c <_strtod_l+0x488>
 800df3c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800df3e:	9805      	ldr	r0, [sp, #20]
 800df40:	f002 fbba 	bl	80106b8 <_Bfree>
 800df44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df46:	931e      	str	r3, [sp, #120]	@ 0x78
 800df48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dc12      	bgt.n	800df74 <_strtod_l+0x7e0>
 800df4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df50:	2b00      	cmp	r3, #0
 800df52:	dd18      	ble.n	800df86 <_strtod_l+0x7f2>
 800df54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df56:	9908      	ldr	r1, [sp, #32]
 800df58:	9805      	ldr	r0, [sp, #20]
 800df5a:	f002 fd73 	bl	8010a44 <__pow5mult>
 800df5e:	9008      	str	r0, [sp, #32]
 800df60:	2800      	cmp	r0, #0
 800df62:	d110      	bne.n	800df86 <_strtod_l+0x7f2>
 800df64:	2300      	movs	r3, #0
 800df66:	e658      	b.n	800dc1a <_strtod_l+0x486>
 800df68:	4954      	ldr	r1, [pc, #336]	@ (800e0bc <_strtod_l+0x928>)
 800df6a:	1acb      	subs	r3, r1, r3
 800df6c:	0001      	movs	r1, r0
 800df6e:	4099      	lsls	r1, r3
 800df70:	9115      	str	r1, [sp, #84]	@ 0x54
 800df72:	e7ba      	b.n	800deea <_strtod_l+0x756>
 800df74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df76:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800df78:	9805      	ldr	r0, [sp, #20]
 800df7a:	f002 fdbf 	bl	8010afc <__lshift>
 800df7e:	901e      	str	r0, [sp, #120]	@ 0x78
 800df80:	2800      	cmp	r0, #0
 800df82:	d1e4      	bne.n	800df4e <_strtod_l+0x7ba>
 800df84:	e64a      	b.n	800dc1c <_strtod_l+0x488>
 800df86:	2c00      	cmp	r4, #0
 800df88:	dd07      	ble.n	800df9a <_strtod_l+0x806>
 800df8a:	0022      	movs	r2, r4
 800df8c:	9908      	ldr	r1, [sp, #32]
 800df8e:	9805      	ldr	r0, [sp, #20]
 800df90:	f002 fdb4 	bl	8010afc <__lshift>
 800df94:	9008      	str	r0, [sp, #32]
 800df96:	2800      	cmp	r0, #0
 800df98:	d0e4      	beq.n	800df64 <_strtod_l+0x7d0>
 800df9a:	2d00      	cmp	r5, #0
 800df9c:	dd08      	ble.n	800dfb0 <_strtod_l+0x81c>
 800df9e:	002a      	movs	r2, r5
 800dfa0:	9907      	ldr	r1, [sp, #28]
 800dfa2:	9805      	ldr	r0, [sp, #20]
 800dfa4:	f002 fdaa 	bl	8010afc <__lshift>
 800dfa8:	9007      	str	r0, [sp, #28]
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d100      	bne.n	800dfb0 <_strtod_l+0x81c>
 800dfae:	e635      	b.n	800dc1c <_strtod_l+0x488>
 800dfb0:	9a08      	ldr	r2, [sp, #32]
 800dfb2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dfb4:	9805      	ldr	r0, [sp, #20]
 800dfb6:	f002 fe29 	bl	8010c0c <__mdiff>
 800dfba:	9006      	str	r0, [sp, #24]
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d100      	bne.n	800dfc2 <_strtod_l+0x82e>
 800dfc0:	e62c      	b.n	800dc1c <_strtod_l+0x488>
 800dfc2:	68c3      	ldr	r3, [r0, #12]
 800dfc4:	9907      	ldr	r1, [sp, #28]
 800dfc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60c3      	str	r3, [r0, #12]
 800dfcc:	f002 fe02 	bl	8010bd4 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	da3b      	bge.n	800e04c <_strtod_l+0x8b8>
 800dfd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfd6:	4333      	orrs	r3, r6
 800dfd8:	d167      	bne.n	800e0aa <_strtod_l+0x916>
 800dfda:	033b      	lsls	r3, r7, #12
 800dfdc:	d165      	bne.n	800e0aa <_strtod_l+0x916>
 800dfde:	22d6      	movs	r2, #214	@ 0xd6
 800dfe0:	4b37      	ldr	r3, [pc, #220]	@ (800e0c0 <_strtod_l+0x92c>)
 800dfe2:	04d2      	lsls	r2, r2, #19
 800dfe4:	403b      	ands	r3, r7
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d95f      	bls.n	800e0aa <_strtod_l+0x916>
 800dfea:	9b06      	ldr	r3, [sp, #24]
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d103      	bne.n	800dffa <_strtod_l+0x866>
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	691b      	ldr	r3, [r3, #16]
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	dd57      	ble.n	800e0aa <_strtod_l+0x916>
 800dffa:	9906      	ldr	r1, [sp, #24]
 800dffc:	2201      	movs	r2, #1
 800dffe:	9805      	ldr	r0, [sp, #20]
 800e000:	f002 fd7c 	bl	8010afc <__lshift>
 800e004:	9907      	ldr	r1, [sp, #28]
 800e006:	9006      	str	r0, [sp, #24]
 800e008:	f002 fde4 	bl	8010bd4 <__mcmp>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	dd4c      	ble.n	800e0aa <_strtod_l+0x916>
 800e010:	4b2b      	ldr	r3, [pc, #172]	@ (800e0c0 <_strtod_l+0x92c>)
 800e012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e014:	403b      	ands	r3, r7
 800e016:	2a00      	cmp	r2, #0
 800e018:	d074      	beq.n	800e104 <_strtod_l+0x970>
 800e01a:	22d6      	movs	r2, #214	@ 0xd6
 800e01c:	04d2      	lsls	r2, r2, #19
 800e01e:	4293      	cmp	r3, r2
 800e020:	d870      	bhi.n	800e104 <_strtod_l+0x970>
 800e022:	22dc      	movs	r2, #220	@ 0xdc
 800e024:	0492      	lsls	r2, r2, #18
 800e026:	4293      	cmp	r3, r2
 800e028:	d800      	bhi.n	800e02c <_strtod_l+0x898>
 800e02a:	e693      	b.n	800dd54 <_strtod_l+0x5c0>
 800e02c:	0030      	movs	r0, r6
 800e02e:	0039      	movs	r1, r7
 800e030:	4b24      	ldr	r3, [pc, #144]	@ (800e0c4 <_strtod_l+0x930>)
 800e032:	2200      	movs	r2, #0
 800e034:	f7f3 faa2 	bl	800157c <__aeabi_dmul>
 800e038:	4b21      	ldr	r3, [pc, #132]	@ (800e0c0 <_strtod_l+0x92c>)
 800e03a:	0006      	movs	r6, r0
 800e03c:	000f      	movs	r7, r1
 800e03e:	420b      	tst	r3, r1
 800e040:	d000      	beq.n	800e044 <_strtod_l+0x8b0>
 800e042:	e5f4      	b.n	800dc2e <_strtod_l+0x49a>
 800e044:	2322      	movs	r3, #34	@ 0x22
 800e046:	9a05      	ldr	r2, [sp, #20]
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e5f0      	b.n	800dc2e <_strtod_l+0x49a>
 800e04c:	970e      	str	r7, [sp, #56]	@ 0x38
 800e04e:	2800      	cmp	r0, #0
 800e050:	d175      	bne.n	800e13e <_strtod_l+0x9aa>
 800e052:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e054:	033b      	lsls	r3, r7, #12
 800e056:	0b1b      	lsrs	r3, r3, #12
 800e058:	2a00      	cmp	r2, #0
 800e05a:	d039      	beq.n	800e0d0 <_strtod_l+0x93c>
 800e05c:	4a1a      	ldr	r2, [pc, #104]	@ (800e0c8 <_strtod_l+0x934>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d138      	bne.n	800e0d4 <_strtod_l+0x940>
 800e062:	2101      	movs	r1, #1
 800e064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e066:	4249      	negs	r1, r1
 800e068:	0032      	movs	r2, r6
 800e06a:	0008      	movs	r0, r1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <_strtod_l+0x8f4>
 800e070:	24d4      	movs	r4, #212	@ 0xd4
 800e072:	4b13      	ldr	r3, [pc, #76]	@ (800e0c0 <_strtod_l+0x92c>)
 800e074:	0008      	movs	r0, r1
 800e076:	403b      	ands	r3, r7
 800e078:	04e4      	lsls	r4, r4, #19
 800e07a:	42a3      	cmp	r3, r4
 800e07c:	d804      	bhi.n	800e088 <_strtod_l+0x8f4>
 800e07e:	306c      	adds	r0, #108	@ 0x6c
 800e080:	0d1b      	lsrs	r3, r3, #20
 800e082:	1ac3      	subs	r3, r0, r3
 800e084:	4099      	lsls	r1, r3
 800e086:	0008      	movs	r0, r1
 800e088:	4282      	cmp	r2, r0
 800e08a:	d123      	bne.n	800e0d4 <_strtod_l+0x940>
 800e08c:	4b0f      	ldr	r3, [pc, #60]	@ (800e0cc <_strtod_l+0x938>)
 800e08e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e090:	4299      	cmp	r1, r3
 800e092:	d102      	bne.n	800e09a <_strtod_l+0x906>
 800e094:	3201      	adds	r2, #1
 800e096:	d100      	bne.n	800e09a <_strtod_l+0x906>
 800e098:	e5c0      	b.n	800dc1c <_strtod_l+0x488>
 800e09a:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <_strtod_l+0x92c>)
 800e09c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e09e:	2600      	movs	r6, #0
 800e0a0:	401a      	ands	r2, r3
 800e0a2:	0013      	movs	r3, r2
 800e0a4:	2280      	movs	r2, #128	@ 0x80
 800e0a6:	0352      	lsls	r2, r2, #13
 800e0a8:	189f      	adds	r7, r3, r2
 800e0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1bd      	bne.n	800e02c <_strtod_l+0x898>
 800e0b0:	e5bd      	b.n	800dc2e <_strtod_l+0x49a>
 800e0b2:	46c0      	nop			@ (mov r8, r8)
 800e0b4:	08011f48 	.word	0x08011f48
 800e0b8:	fffffc02 	.word	0xfffffc02
 800e0bc:	fffffbe2 	.word	0xfffffbe2
 800e0c0:	7ff00000 	.word	0x7ff00000
 800e0c4:	39500000 	.word	0x39500000
 800e0c8:	000fffff 	.word	0x000fffff
 800e0cc:	7fefffff 	.word	0x7fefffff
 800e0d0:	4333      	orrs	r3, r6
 800e0d2:	d09d      	beq.n	800e010 <_strtod_l+0x87c>
 800e0d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d01c      	beq.n	800e114 <_strtod_l+0x980>
 800e0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e0de:	4213      	tst	r3, r2
 800e0e0:	d0e3      	beq.n	800e0aa <_strtod_l+0x916>
 800e0e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0e4:	0030      	movs	r0, r6
 800e0e6:	0039      	movs	r1, r7
 800e0e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d016      	beq.n	800e11c <_strtod_l+0x988>
 800e0ee:	f7ff fb39 	bl	800d764 <sulp>
 800e0f2:	0002      	movs	r2, r0
 800e0f4:	000b      	movs	r3, r1
 800e0f6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e0f8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e0fa:	f7f2 fa3f 	bl	800057c <__aeabi_dadd>
 800e0fe:	0006      	movs	r6, r0
 800e100:	000f      	movs	r7, r1
 800e102:	e7d2      	b.n	800e0aa <_strtod_l+0x916>
 800e104:	2601      	movs	r6, #1
 800e106:	4a92      	ldr	r2, [pc, #584]	@ (800e350 <_strtod_l+0xbbc>)
 800e108:	4276      	negs	r6, r6
 800e10a:	189b      	adds	r3, r3, r2
 800e10c:	4a91      	ldr	r2, [pc, #580]	@ (800e354 <_strtod_l+0xbc0>)
 800e10e:	431a      	orrs	r2, r3
 800e110:	0017      	movs	r7, r2
 800e112:	e7ca      	b.n	800e0aa <_strtod_l+0x916>
 800e114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e116:	4233      	tst	r3, r6
 800e118:	d0c7      	beq.n	800e0aa <_strtod_l+0x916>
 800e11a:	e7e2      	b.n	800e0e2 <_strtod_l+0x94e>
 800e11c:	f7ff fb22 	bl	800d764 <sulp>
 800e120:	0002      	movs	r2, r0
 800e122:	000b      	movs	r3, r1
 800e124:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e126:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e128:	f7f3 fd0e 	bl	8001b48 <__aeabi_dsub>
 800e12c:	2200      	movs	r2, #0
 800e12e:	2300      	movs	r3, #0
 800e130:	0006      	movs	r6, r0
 800e132:	000f      	movs	r7, r1
 800e134:	f7f2 f986 	bl	8000444 <__aeabi_dcmpeq>
 800e138:	2800      	cmp	r0, #0
 800e13a:	d0b6      	beq.n	800e0aa <_strtod_l+0x916>
 800e13c:	e60a      	b.n	800dd54 <_strtod_l+0x5c0>
 800e13e:	9907      	ldr	r1, [sp, #28]
 800e140:	9806      	ldr	r0, [sp, #24]
 800e142:	f002 fec9 	bl	8010ed8 <__ratio>
 800e146:	2380      	movs	r3, #128	@ 0x80
 800e148:	2200      	movs	r2, #0
 800e14a:	05db      	lsls	r3, r3, #23
 800e14c:	0004      	movs	r4, r0
 800e14e:	000d      	movs	r5, r1
 800e150:	f7f2 f988 	bl	8000464 <__aeabi_dcmple>
 800e154:	2800      	cmp	r0, #0
 800e156:	d06c      	beq.n	800e232 <_strtod_l+0xa9e>
 800e158:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d177      	bne.n	800e24e <_strtod_l+0xaba>
 800e15e:	2e00      	cmp	r6, #0
 800e160:	d157      	bne.n	800e212 <_strtod_l+0xa7e>
 800e162:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e164:	031b      	lsls	r3, r3, #12
 800e166:	d15a      	bne.n	800e21e <_strtod_l+0xa8a>
 800e168:	2200      	movs	r2, #0
 800e16a:	0020      	movs	r0, r4
 800e16c:	0029      	movs	r1, r5
 800e16e:	4b7a      	ldr	r3, [pc, #488]	@ (800e358 <_strtod_l+0xbc4>)
 800e170:	f7f2 f96e 	bl	8000450 <__aeabi_dcmplt>
 800e174:	2800      	cmp	r0, #0
 800e176:	d159      	bne.n	800e22c <_strtod_l+0xa98>
 800e178:	0020      	movs	r0, r4
 800e17a:	0029      	movs	r1, r5
 800e17c:	2200      	movs	r2, #0
 800e17e:	4b77      	ldr	r3, [pc, #476]	@ (800e35c <_strtod_l+0xbc8>)
 800e180:	f7f3 f9fc 	bl	800157c <__aeabi_dmul>
 800e184:	0004      	movs	r4, r0
 800e186:	000d      	movs	r5, r1
 800e188:	2380      	movs	r3, #128	@ 0x80
 800e18a:	061b      	lsls	r3, r3, #24
 800e18c:	18eb      	adds	r3, r5, r3
 800e18e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e190:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e192:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e196:	9216      	str	r2, [sp, #88]	@ 0x58
 800e198:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e19a:	4a71      	ldr	r2, [pc, #452]	@ (800e360 <_strtod_l+0xbcc>)
 800e19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e19e:	4013      	ands	r3, r2
 800e1a0:	9315      	str	r3, [sp, #84]	@ 0x54
 800e1a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e1a4:	4b6f      	ldr	r3, [pc, #444]	@ (800e364 <_strtod_l+0xbd0>)
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d000      	beq.n	800e1ac <_strtod_l+0xa18>
 800e1aa:	e087      	b.n	800e2bc <_strtod_l+0xb28>
 800e1ac:	4a6e      	ldr	r2, [pc, #440]	@ (800e368 <_strtod_l+0xbd4>)
 800e1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b0:	4694      	mov	ip, r2
 800e1b2:	4463      	add	r3, ip
 800e1b4:	001f      	movs	r7, r3
 800e1b6:	0030      	movs	r0, r6
 800e1b8:	0019      	movs	r1, r3
 800e1ba:	f002 fdc1 	bl	8010d40 <__ulp>
 800e1be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1c2:	f7f3 f9db 	bl	800157c <__aeabi_dmul>
 800e1c6:	0032      	movs	r2, r6
 800e1c8:	003b      	movs	r3, r7
 800e1ca:	f7f2 f9d7 	bl	800057c <__aeabi_dadd>
 800e1ce:	4a64      	ldr	r2, [pc, #400]	@ (800e360 <_strtod_l+0xbcc>)
 800e1d0:	4b66      	ldr	r3, [pc, #408]	@ (800e36c <_strtod_l+0xbd8>)
 800e1d2:	0006      	movs	r6, r0
 800e1d4:	400a      	ands	r2, r1
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d940      	bls.n	800e25c <_strtod_l+0xac8>
 800e1da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e1dc:	4a64      	ldr	r2, [pc, #400]	@ (800e370 <_strtod_l+0xbdc>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d103      	bne.n	800e1ea <_strtod_l+0xa56>
 800e1e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	d100      	bne.n	800e1ea <_strtod_l+0xa56>
 800e1e8:	e518      	b.n	800dc1c <_strtod_l+0x488>
 800e1ea:	2601      	movs	r6, #1
 800e1ec:	4f60      	ldr	r7, [pc, #384]	@ (800e370 <_strtod_l+0xbdc>)
 800e1ee:	4276      	negs	r6, r6
 800e1f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e1f2:	9805      	ldr	r0, [sp, #20]
 800e1f4:	f002 fa60 	bl	80106b8 <_Bfree>
 800e1f8:	9908      	ldr	r1, [sp, #32]
 800e1fa:	9805      	ldr	r0, [sp, #20]
 800e1fc:	f002 fa5c 	bl	80106b8 <_Bfree>
 800e200:	9907      	ldr	r1, [sp, #28]
 800e202:	9805      	ldr	r0, [sp, #20]
 800e204:	f002 fa58 	bl	80106b8 <_Bfree>
 800e208:	9906      	ldr	r1, [sp, #24]
 800e20a:	9805      	ldr	r0, [sp, #20]
 800e20c:	f002 fa54 	bl	80106b8 <_Bfree>
 800e210:	e617      	b.n	800de42 <_strtod_l+0x6ae>
 800e212:	2e01      	cmp	r6, #1
 800e214:	d103      	bne.n	800e21e <_strtod_l+0xa8a>
 800e216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d100      	bne.n	800e21e <_strtod_l+0xa8a>
 800e21c:	e59a      	b.n	800dd54 <_strtod_l+0x5c0>
 800e21e:	2300      	movs	r3, #0
 800e220:	4c54      	ldr	r4, [pc, #336]	@ (800e374 <_strtod_l+0xbe0>)
 800e222:	4d4d      	ldr	r5, [pc, #308]	@ (800e358 <_strtod_l+0xbc4>)
 800e224:	930a      	str	r3, [sp, #40]	@ 0x28
 800e226:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e228:	2400      	movs	r4, #0
 800e22a:	e7b2      	b.n	800e192 <_strtod_l+0x9fe>
 800e22c:	2400      	movs	r4, #0
 800e22e:	4d4b      	ldr	r5, [pc, #300]	@ (800e35c <_strtod_l+0xbc8>)
 800e230:	e7aa      	b.n	800e188 <_strtod_l+0x9f4>
 800e232:	0020      	movs	r0, r4
 800e234:	0029      	movs	r1, r5
 800e236:	4b49      	ldr	r3, [pc, #292]	@ (800e35c <_strtod_l+0xbc8>)
 800e238:	2200      	movs	r2, #0
 800e23a:	f7f3 f99f 	bl	800157c <__aeabi_dmul>
 800e23e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e240:	0004      	movs	r4, r0
 800e242:	000d      	movs	r5, r1
 800e244:	2b00      	cmp	r3, #0
 800e246:	d09f      	beq.n	800e188 <_strtod_l+0x9f4>
 800e248:	940a      	str	r4, [sp, #40]	@ 0x28
 800e24a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e24c:	e7a1      	b.n	800e192 <_strtod_l+0x9fe>
 800e24e:	2300      	movs	r3, #0
 800e250:	4c41      	ldr	r4, [pc, #260]	@ (800e358 <_strtod_l+0xbc4>)
 800e252:	0025      	movs	r5, r4
 800e254:	930a      	str	r3, [sp, #40]	@ 0x28
 800e256:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e258:	001c      	movs	r4, r3
 800e25a:	e79a      	b.n	800e192 <_strtod_l+0x9fe>
 800e25c:	23d4      	movs	r3, #212	@ 0xd4
 800e25e:	049b      	lsls	r3, r3, #18
 800e260:	18cf      	adds	r7, r1, r3
 800e262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e264:	9710      	str	r7, [sp, #64]	@ 0x40
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1c2      	bne.n	800e1f0 <_strtod_l+0xa5c>
 800e26a:	4b3d      	ldr	r3, [pc, #244]	@ (800e360 <_strtod_l+0xbcc>)
 800e26c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e26e:	403b      	ands	r3, r7
 800e270:	429a      	cmp	r2, r3
 800e272:	d1bd      	bne.n	800e1f0 <_strtod_l+0xa5c>
 800e274:	0020      	movs	r0, r4
 800e276:	0029      	movs	r1, r5
 800e278:	f7f2 f930 	bl	80004dc <__aeabi_d2lz>
 800e27c:	f7f2 f968 	bl	8000550 <__aeabi_l2d>
 800e280:	0002      	movs	r2, r0
 800e282:	000b      	movs	r3, r1
 800e284:	0020      	movs	r0, r4
 800e286:	0029      	movs	r1, r5
 800e288:	f7f3 fc5e 	bl	8001b48 <__aeabi_dsub>
 800e28c:	033c      	lsls	r4, r7, #12
 800e28e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e290:	0b24      	lsrs	r4, r4, #12
 800e292:	4334      	orrs	r4, r6
 800e294:	900e      	str	r0, [sp, #56]	@ 0x38
 800e296:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e298:	4a37      	ldr	r2, [pc, #220]	@ (800e378 <_strtod_l+0xbe4>)
 800e29a:	431c      	orrs	r4, r3
 800e29c:	d052      	beq.n	800e344 <_strtod_l+0xbb0>
 800e29e:	4b37      	ldr	r3, [pc, #220]	@ (800e37c <_strtod_l+0xbe8>)
 800e2a0:	f7f2 f8d6 	bl	8000450 <__aeabi_dcmplt>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d000      	beq.n	800e2aa <_strtod_l+0xb16>
 800e2a8:	e4c1      	b.n	800dc2e <_strtod_l+0x49a>
 800e2aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e2ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e2ae:	4a34      	ldr	r2, [pc, #208]	@ (800e380 <_strtod_l+0xbec>)
 800e2b0:	4b2a      	ldr	r3, [pc, #168]	@ (800e35c <_strtod_l+0xbc8>)
 800e2b2:	f7f2 f8e1 	bl	8000478 <__aeabi_dcmpgt>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d09a      	beq.n	800e1f0 <_strtod_l+0xa5c>
 800e2ba:	e4b8      	b.n	800dc2e <_strtod_l+0x49a>
 800e2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d02a      	beq.n	800e318 <_strtod_l+0xb84>
 800e2c2:	23d4      	movs	r3, #212	@ 0xd4
 800e2c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e2c6:	04db      	lsls	r3, r3, #19
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d825      	bhi.n	800e318 <_strtod_l+0xb84>
 800e2cc:	0020      	movs	r0, r4
 800e2ce:	0029      	movs	r1, r5
 800e2d0:	4a2c      	ldr	r2, [pc, #176]	@ (800e384 <_strtod_l+0xbf0>)
 800e2d2:	4b2d      	ldr	r3, [pc, #180]	@ (800e388 <_strtod_l+0xbf4>)
 800e2d4:	f7f2 f8c6 	bl	8000464 <__aeabi_dcmple>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d016      	beq.n	800e30a <_strtod_l+0xb76>
 800e2dc:	0020      	movs	r0, r4
 800e2de:	0029      	movs	r1, r5
 800e2e0:	f7f2 f8de 	bl	80004a0 <__aeabi_d2uiz>
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d100      	bne.n	800e2ea <_strtod_l+0xb56>
 800e2e8:	3001      	adds	r0, #1
 800e2ea:	f7f4 f8c3 	bl	8002474 <__aeabi_ui2d>
 800e2ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e2f0:	0004      	movs	r4, r0
 800e2f2:	000d      	movs	r5, r1
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d122      	bne.n	800e33e <_strtod_l+0xbaa>
 800e2f8:	2380      	movs	r3, #128	@ 0x80
 800e2fa:	061b      	lsls	r3, r3, #24
 800e2fc:	18cb      	adds	r3, r1, r3
 800e2fe:	9018      	str	r0, [sp, #96]	@ 0x60
 800e300:	9319      	str	r3, [sp, #100]	@ 0x64
 800e302:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e306:	9216      	str	r2, [sp, #88]	@ 0x58
 800e308:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e30a:	22d6      	movs	r2, #214	@ 0xd6
 800e30c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e30e:	04d2      	lsls	r2, r2, #19
 800e310:	189b      	adds	r3, r3, r2
 800e312:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e314:	1a9b      	subs	r3, r3, r2
 800e316:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e318:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e31a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e31c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800e31e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800e320:	f002 fd0e 	bl	8010d40 <__ulp>
 800e324:	0002      	movs	r2, r0
 800e326:	000b      	movs	r3, r1
 800e328:	0030      	movs	r0, r6
 800e32a:	0039      	movs	r1, r7
 800e32c:	f7f3 f926 	bl	800157c <__aeabi_dmul>
 800e330:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e334:	f7f2 f922 	bl	800057c <__aeabi_dadd>
 800e338:	0006      	movs	r6, r0
 800e33a:	000f      	movs	r7, r1
 800e33c:	e791      	b.n	800e262 <_strtod_l+0xace>
 800e33e:	9418      	str	r4, [sp, #96]	@ 0x60
 800e340:	9519      	str	r5, [sp, #100]	@ 0x64
 800e342:	e7de      	b.n	800e302 <_strtod_l+0xb6e>
 800e344:	4b11      	ldr	r3, [pc, #68]	@ (800e38c <_strtod_l+0xbf8>)
 800e346:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e348:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e34a:	f7f2 f881 	bl	8000450 <__aeabi_dcmplt>
 800e34e:	e7b2      	b.n	800e2b6 <_strtod_l+0xb22>
 800e350:	fff00000 	.word	0xfff00000
 800e354:	000fffff 	.word	0x000fffff
 800e358:	3ff00000 	.word	0x3ff00000
 800e35c:	3fe00000 	.word	0x3fe00000
 800e360:	7ff00000 	.word	0x7ff00000
 800e364:	7fe00000 	.word	0x7fe00000
 800e368:	fcb00000 	.word	0xfcb00000
 800e36c:	7c9fffff 	.word	0x7c9fffff
 800e370:	7fefffff 	.word	0x7fefffff
 800e374:	bff00000 	.word	0xbff00000
 800e378:	94a03595 	.word	0x94a03595
 800e37c:	3fdfffff 	.word	0x3fdfffff
 800e380:	35afe535 	.word	0x35afe535
 800e384:	ffc00000 	.word	0xffc00000
 800e388:	41dfffff 	.word	0x41dfffff
 800e38c:	3fcfffff 	.word	0x3fcfffff

0800e390 <strtod>:
 800e390:	b510      	push	{r4, lr}
 800e392:	4c04      	ldr	r4, [pc, #16]	@ (800e3a4 <strtod+0x14>)
 800e394:	000a      	movs	r2, r1
 800e396:	0001      	movs	r1, r0
 800e398:	4b03      	ldr	r3, [pc, #12]	@ (800e3a8 <strtod+0x18>)
 800e39a:	6820      	ldr	r0, [r4, #0]
 800e39c:	f7ff f9fa 	bl	800d794 <_strtod_l>
 800e3a0:	bd10      	pop	{r4, pc}
 800e3a2:	46c0      	nop			@ (mov r8, r8)
 800e3a4:	20000278 	.word	0x20000278
 800e3a8:	2000010c 	.word	0x2000010c

0800e3ac <__cvt>:
 800e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ae:	001f      	movs	r7, r3
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	0016      	movs	r6, r2
 800e3b4:	b08b      	sub	sp, #44	@ 0x2c
 800e3b6:	429f      	cmp	r7, r3
 800e3b8:	da04      	bge.n	800e3c4 <__cvt+0x18>
 800e3ba:	2180      	movs	r1, #128	@ 0x80
 800e3bc:	0609      	lsls	r1, r1, #24
 800e3be:	187b      	adds	r3, r7, r1
 800e3c0:	001f      	movs	r7, r3
 800e3c2:	232d      	movs	r3, #45	@ 0x2d
 800e3c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e3c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e3c8:	7013      	strb	r3, [r2, #0]
 800e3ca:	2320      	movs	r3, #32
 800e3cc:	2203      	movs	r2, #3
 800e3ce:	439d      	bics	r5, r3
 800e3d0:	2d46      	cmp	r5, #70	@ 0x46
 800e3d2:	d007      	beq.n	800e3e4 <__cvt+0x38>
 800e3d4:	002b      	movs	r3, r5
 800e3d6:	3b45      	subs	r3, #69	@ 0x45
 800e3d8:	4259      	negs	r1, r3
 800e3da:	414b      	adcs	r3, r1
 800e3dc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e3de:	3a01      	subs	r2, #1
 800e3e0:	18cb      	adds	r3, r1, r3
 800e3e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3e4:	ab09      	add	r3, sp, #36	@ 0x24
 800e3e6:	9304      	str	r3, [sp, #16]
 800e3e8:	ab08      	add	r3, sp, #32
 800e3ea:	9303      	str	r3, [sp, #12]
 800e3ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3ee:	9200      	str	r2, [sp, #0]
 800e3f0:	9302      	str	r3, [sp, #8]
 800e3f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3f4:	0032      	movs	r2, r6
 800e3f6:	9301      	str	r3, [sp, #4]
 800e3f8:	003b      	movs	r3, r7
 800e3fa:	f000 feb7 	bl	800f16c <_dtoa_r>
 800e3fe:	0004      	movs	r4, r0
 800e400:	2d47      	cmp	r5, #71	@ 0x47
 800e402:	d11b      	bne.n	800e43c <__cvt+0x90>
 800e404:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e406:	07db      	lsls	r3, r3, #31
 800e408:	d511      	bpl.n	800e42e <__cvt+0x82>
 800e40a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e40c:	18c3      	adds	r3, r0, r3
 800e40e:	9307      	str	r3, [sp, #28]
 800e410:	2200      	movs	r2, #0
 800e412:	2300      	movs	r3, #0
 800e414:	0030      	movs	r0, r6
 800e416:	0039      	movs	r1, r7
 800e418:	f7f2 f814 	bl	8000444 <__aeabi_dcmpeq>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d001      	beq.n	800e424 <__cvt+0x78>
 800e420:	9b07      	ldr	r3, [sp, #28]
 800e422:	9309      	str	r3, [sp, #36]	@ 0x24
 800e424:	2230      	movs	r2, #48	@ 0x30
 800e426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e428:	9907      	ldr	r1, [sp, #28]
 800e42a:	428b      	cmp	r3, r1
 800e42c:	d320      	bcc.n	800e470 <__cvt+0xc4>
 800e42e:	0020      	movs	r0, r4
 800e430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e432:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e434:	1b1b      	subs	r3, r3, r4
 800e436:	6013      	str	r3, [r2, #0]
 800e438:	b00b      	add	sp, #44	@ 0x2c
 800e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e43e:	18c3      	adds	r3, r0, r3
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	2d46      	cmp	r5, #70	@ 0x46
 800e444:	d1e4      	bne.n	800e410 <__cvt+0x64>
 800e446:	7803      	ldrb	r3, [r0, #0]
 800e448:	2b30      	cmp	r3, #48	@ 0x30
 800e44a:	d10c      	bne.n	800e466 <__cvt+0xba>
 800e44c:	2200      	movs	r2, #0
 800e44e:	2300      	movs	r3, #0
 800e450:	0030      	movs	r0, r6
 800e452:	0039      	movs	r1, r7
 800e454:	f7f1 fff6 	bl	8000444 <__aeabi_dcmpeq>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d104      	bne.n	800e466 <__cvt+0xba>
 800e45c:	2301      	movs	r3, #1
 800e45e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e460:	1a9b      	subs	r3, r3, r2
 800e462:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e464:	6013      	str	r3, [r2, #0]
 800e466:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e468:	9a07      	ldr	r2, [sp, #28]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	18d3      	adds	r3, r2, r3
 800e46e:	e7ce      	b.n	800e40e <__cvt+0x62>
 800e470:	1c59      	adds	r1, r3, #1
 800e472:	9109      	str	r1, [sp, #36]	@ 0x24
 800e474:	701a      	strb	r2, [r3, #0]
 800e476:	e7d6      	b.n	800e426 <__cvt+0x7a>

0800e478 <__exponent>:
 800e478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e47a:	232b      	movs	r3, #43	@ 0x2b
 800e47c:	b085      	sub	sp, #20
 800e47e:	0005      	movs	r5, r0
 800e480:	1e0c      	subs	r4, r1, #0
 800e482:	7002      	strb	r2, [r0, #0]
 800e484:	da01      	bge.n	800e48a <__exponent+0x12>
 800e486:	424c      	negs	r4, r1
 800e488:	3302      	adds	r3, #2
 800e48a:	706b      	strb	r3, [r5, #1]
 800e48c:	2c09      	cmp	r4, #9
 800e48e:	dd2c      	ble.n	800e4ea <__exponent+0x72>
 800e490:	ab02      	add	r3, sp, #8
 800e492:	1dde      	adds	r6, r3, #7
 800e494:	0020      	movs	r0, r4
 800e496:	210a      	movs	r1, #10
 800e498:	f7f1 ffbe 	bl	8000418 <__aeabi_idivmod>
 800e49c:	0037      	movs	r7, r6
 800e49e:	3130      	adds	r1, #48	@ 0x30
 800e4a0:	3e01      	subs	r6, #1
 800e4a2:	0020      	movs	r0, r4
 800e4a4:	7031      	strb	r1, [r6, #0]
 800e4a6:	210a      	movs	r1, #10
 800e4a8:	9401      	str	r4, [sp, #4]
 800e4aa:	f7f1 fecf 	bl	800024c <__divsi3>
 800e4ae:	9b01      	ldr	r3, [sp, #4]
 800e4b0:	0004      	movs	r4, r0
 800e4b2:	2b63      	cmp	r3, #99	@ 0x63
 800e4b4:	dcee      	bgt.n	800e494 <__exponent+0x1c>
 800e4b6:	1eba      	subs	r2, r7, #2
 800e4b8:	1ca8      	adds	r0, r5, #2
 800e4ba:	0001      	movs	r1, r0
 800e4bc:	0013      	movs	r3, r2
 800e4be:	3430      	adds	r4, #48	@ 0x30
 800e4c0:	7014      	strb	r4, [r2, #0]
 800e4c2:	ac02      	add	r4, sp, #8
 800e4c4:	3407      	adds	r4, #7
 800e4c6:	429c      	cmp	r4, r3
 800e4c8:	d80a      	bhi.n	800e4e0 <__exponent+0x68>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	4294      	cmp	r4, r2
 800e4ce:	d303      	bcc.n	800e4d8 <__exponent+0x60>
 800e4d0:	3309      	adds	r3, #9
 800e4d2:	aa02      	add	r2, sp, #8
 800e4d4:	189b      	adds	r3, r3, r2
 800e4d6:	1bdb      	subs	r3, r3, r7
 800e4d8:	18c0      	adds	r0, r0, r3
 800e4da:	1b40      	subs	r0, r0, r5
 800e4dc:	b005      	add	sp, #20
 800e4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e0:	781c      	ldrb	r4, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	700c      	strb	r4, [r1, #0]
 800e4e6:	3101      	adds	r1, #1
 800e4e8:	e7eb      	b.n	800e4c2 <__exponent+0x4a>
 800e4ea:	2330      	movs	r3, #48	@ 0x30
 800e4ec:	18e4      	adds	r4, r4, r3
 800e4ee:	70ab      	strb	r3, [r5, #2]
 800e4f0:	1d28      	adds	r0, r5, #4
 800e4f2:	70ec      	strb	r4, [r5, #3]
 800e4f4:	e7f1      	b.n	800e4da <__exponent+0x62>
	...

0800e4f8 <_printf_float>:
 800e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4fa:	b097      	sub	sp, #92	@ 0x5c
 800e4fc:	000d      	movs	r5, r1
 800e4fe:	920a      	str	r2, [sp, #40]	@ 0x28
 800e500:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800e502:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e504:	9009      	str	r0, [sp, #36]	@ 0x24
 800e506:	f000 fd11 	bl	800ef2c <_localeconv_r>
 800e50a:	6803      	ldr	r3, [r0, #0]
 800e50c:	0018      	movs	r0, r3
 800e50e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e510:	f7f1 fdf6 	bl	8000100 <strlen>
 800e514:	2300      	movs	r3, #0
 800e516:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e518:	9314      	str	r3, [sp, #80]	@ 0x50
 800e51a:	7e2b      	ldrb	r3, [r5, #24]
 800e51c:	2207      	movs	r2, #7
 800e51e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	930e      	str	r3, [sp, #56]	@ 0x38
 800e524:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	05c9      	lsls	r1, r1, #23
 800e52a:	d545      	bpl.n	800e5b8 <_printf_float+0xc0>
 800e52c:	189b      	adds	r3, r3, r2
 800e52e:	4393      	bics	r3, r2
 800e530:	001a      	movs	r2, r3
 800e532:	3208      	adds	r2, #8
 800e534:	6022      	str	r2, [r4, #0]
 800e536:	2201      	movs	r2, #1
 800e538:	681e      	ldr	r6, [r3, #0]
 800e53a:	685f      	ldr	r7, [r3, #4]
 800e53c:	007b      	lsls	r3, r7, #1
 800e53e:	085b      	lsrs	r3, r3, #1
 800e540:	9311      	str	r3, [sp, #68]	@ 0x44
 800e542:	9610      	str	r6, [sp, #64]	@ 0x40
 800e544:	64ae      	str	r6, [r5, #72]	@ 0x48
 800e546:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800e548:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e54a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e54c:	4ba7      	ldr	r3, [pc, #668]	@ (800e7ec <_printf_float+0x2f4>)
 800e54e:	4252      	negs	r2, r2
 800e550:	f7f3 ff04 	bl	800235c <__aeabi_dcmpun>
 800e554:	2800      	cmp	r0, #0
 800e556:	d131      	bne.n	800e5bc <_printf_float+0xc4>
 800e558:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e55a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e55c:	2201      	movs	r2, #1
 800e55e:	4ba3      	ldr	r3, [pc, #652]	@ (800e7ec <_printf_float+0x2f4>)
 800e560:	4252      	negs	r2, r2
 800e562:	f7f1 ff7f 	bl	8000464 <__aeabi_dcmple>
 800e566:	2800      	cmp	r0, #0
 800e568:	d128      	bne.n	800e5bc <_printf_float+0xc4>
 800e56a:	2200      	movs	r2, #0
 800e56c:	2300      	movs	r3, #0
 800e56e:	0030      	movs	r0, r6
 800e570:	0039      	movs	r1, r7
 800e572:	f7f1 ff6d 	bl	8000450 <__aeabi_dcmplt>
 800e576:	2800      	cmp	r0, #0
 800e578:	d003      	beq.n	800e582 <_printf_float+0x8a>
 800e57a:	002b      	movs	r3, r5
 800e57c:	222d      	movs	r2, #45	@ 0x2d
 800e57e:	3343      	adds	r3, #67	@ 0x43
 800e580:	701a      	strb	r2, [r3, #0]
 800e582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e584:	4f9a      	ldr	r7, [pc, #616]	@ (800e7f0 <_printf_float+0x2f8>)
 800e586:	2b47      	cmp	r3, #71	@ 0x47
 800e588:	d800      	bhi.n	800e58c <_printf_float+0x94>
 800e58a:	4f9a      	ldr	r7, [pc, #616]	@ (800e7f4 <_printf_float+0x2fc>)
 800e58c:	2303      	movs	r3, #3
 800e58e:	2400      	movs	r4, #0
 800e590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e592:	612b      	str	r3, [r5, #16]
 800e594:	3301      	adds	r3, #1
 800e596:	439a      	bics	r2, r3
 800e598:	602a      	str	r2, [r5, #0]
 800e59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e59c:	0029      	movs	r1, r5
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a4:	aa15      	add	r2, sp, #84	@ 0x54
 800e5a6:	f000 f9e5 	bl	800e974 <_printf_common>
 800e5aa:	3001      	adds	r0, #1
 800e5ac:	d000      	beq.n	800e5b0 <_printf_float+0xb8>
 800e5ae:	e09e      	b.n	800e6ee <_printf_float+0x1f6>
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	4240      	negs	r0, r0
 800e5b4:	b017      	add	sp, #92	@ 0x5c
 800e5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b8:	3307      	adds	r3, #7
 800e5ba:	e7b8      	b.n	800e52e <_printf_float+0x36>
 800e5bc:	0032      	movs	r2, r6
 800e5be:	003b      	movs	r3, r7
 800e5c0:	0030      	movs	r0, r6
 800e5c2:	0039      	movs	r1, r7
 800e5c4:	f7f3 feca 	bl	800235c <__aeabi_dcmpun>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d00b      	beq.n	800e5e4 <_printf_float+0xec>
 800e5cc:	2f00      	cmp	r7, #0
 800e5ce:	da03      	bge.n	800e5d8 <_printf_float+0xe0>
 800e5d0:	002b      	movs	r3, r5
 800e5d2:	222d      	movs	r2, #45	@ 0x2d
 800e5d4:	3343      	adds	r3, #67	@ 0x43
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5da:	4f87      	ldr	r7, [pc, #540]	@ (800e7f8 <_printf_float+0x300>)
 800e5dc:	2b47      	cmp	r3, #71	@ 0x47
 800e5de:	d8d5      	bhi.n	800e58c <_printf_float+0x94>
 800e5e0:	4f86      	ldr	r7, [pc, #536]	@ (800e7fc <_printf_float+0x304>)
 800e5e2:	e7d3      	b.n	800e58c <_printf_float+0x94>
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800e5e8:	686b      	ldr	r3, [r5, #4]
 800e5ea:	4394      	bics	r4, r2
 800e5ec:	1c5a      	adds	r2, r3, #1
 800e5ee:	d146      	bne.n	800e67e <_printf_float+0x186>
 800e5f0:	3307      	adds	r3, #7
 800e5f2:	606b      	str	r3, [r5, #4]
 800e5f4:	2380      	movs	r3, #128	@ 0x80
 800e5f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	602b      	str	r3, [r5, #0]
 800e600:	9206      	str	r2, [sp, #24]
 800e602:	aa14      	add	r2, sp, #80	@ 0x50
 800e604:	9205      	str	r2, [sp, #20]
 800e606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e608:	a90a      	add	r1, sp, #40	@ 0x28
 800e60a:	9204      	str	r2, [sp, #16]
 800e60c:	aa13      	add	r2, sp, #76	@ 0x4c
 800e60e:	9203      	str	r2, [sp, #12]
 800e610:	2223      	movs	r2, #35	@ 0x23
 800e612:	1852      	adds	r2, r2, r1
 800e614:	9202      	str	r2, [sp, #8]
 800e616:	9301      	str	r3, [sp, #4]
 800e618:	686b      	ldr	r3, [r5, #4]
 800e61a:	0032      	movs	r2, r6
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e620:	003b      	movs	r3, r7
 800e622:	f7ff fec3 	bl	800e3ac <__cvt>
 800e626:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e628:	0007      	movs	r7, r0
 800e62a:	2c47      	cmp	r4, #71	@ 0x47
 800e62c:	d12d      	bne.n	800e68a <_printf_float+0x192>
 800e62e:	1cd3      	adds	r3, r2, #3
 800e630:	db02      	blt.n	800e638 <_printf_float+0x140>
 800e632:	686b      	ldr	r3, [r5, #4]
 800e634:	429a      	cmp	r2, r3
 800e636:	dd47      	ble.n	800e6c8 <_printf_float+0x1d0>
 800e638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e63a:	3b02      	subs	r3, #2
 800e63c:	b2db      	uxtb	r3, r3
 800e63e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e640:	0028      	movs	r0, r5
 800e642:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e644:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e646:	3901      	subs	r1, #1
 800e648:	3050      	adds	r0, #80	@ 0x50
 800e64a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e64c:	f7ff ff14 	bl	800e478 <__exponent>
 800e650:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e652:	0004      	movs	r4, r0
 800e654:	1813      	adds	r3, r2, r0
 800e656:	612b      	str	r3, [r5, #16]
 800e658:	2a01      	cmp	r2, #1
 800e65a:	dc02      	bgt.n	800e662 <_printf_float+0x16a>
 800e65c:	682a      	ldr	r2, [r5, #0]
 800e65e:	07d2      	lsls	r2, r2, #31
 800e660:	d501      	bpl.n	800e666 <_printf_float+0x16e>
 800e662:	3301      	adds	r3, #1
 800e664:	612b      	str	r3, [r5, #16]
 800e666:	2323      	movs	r3, #35	@ 0x23
 800e668:	aa0a      	add	r2, sp, #40	@ 0x28
 800e66a:	189b      	adds	r3, r3, r2
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d100      	bne.n	800e674 <_printf_float+0x17c>
 800e672:	e792      	b.n	800e59a <_printf_float+0xa2>
 800e674:	002b      	movs	r3, r5
 800e676:	222d      	movs	r2, #45	@ 0x2d
 800e678:	3343      	adds	r3, #67	@ 0x43
 800e67a:	701a      	strb	r2, [r3, #0]
 800e67c:	e78d      	b.n	800e59a <_printf_float+0xa2>
 800e67e:	2c47      	cmp	r4, #71	@ 0x47
 800e680:	d1b8      	bne.n	800e5f4 <_printf_float+0xfc>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1b6      	bne.n	800e5f4 <_printf_float+0xfc>
 800e686:	3301      	adds	r3, #1
 800e688:	e7b3      	b.n	800e5f2 <_printf_float+0xfa>
 800e68a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e68c:	2b65      	cmp	r3, #101	@ 0x65
 800e68e:	d9d7      	bls.n	800e640 <_printf_float+0x148>
 800e690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e692:	2b66      	cmp	r3, #102	@ 0x66
 800e694:	d11a      	bne.n	800e6cc <_printf_float+0x1d4>
 800e696:	686b      	ldr	r3, [r5, #4]
 800e698:	2a00      	cmp	r2, #0
 800e69a:	dd09      	ble.n	800e6b0 <_printf_float+0x1b8>
 800e69c:	612a      	str	r2, [r5, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <_printf_float+0x1b0>
 800e6a2:	6829      	ldr	r1, [r5, #0]
 800e6a4:	07c9      	lsls	r1, r1, #31
 800e6a6:	d50b      	bpl.n	800e6c0 <_printf_float+0x1c8>
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	189b      	adds	r3, r3, r2
 800e6ac:	612b      	str	r3, [r5, #16]
 800e6ae:	e007      	b.n	800e6c0 <_printf_float+0x1c8>
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d103      	bne.n	800e6bc <_printf_float+0x1c4>
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	6829      	ldr	r1, [r5, #0]
 800e6b8:	4211      	tst	r1, r2
 800e6ba:	d000      	beq.n	800e6be <_printf_float+0x1c6>
 800e6bc:	1c9a      	adds	r2, r3, #2
 800e6be:	612a      	str	r2, [r5, #16]
 800e6c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6c2:	2400      	movs	r4, #0
 800e6c4:	65ab      	str	r3, [r5, #88]	@ 0x58
 800e6c6:	e7ce      	b.n	800e666 <_printf_float+0x16e>
 800e6c8:	2367      	movs	r3, #103	@ 0x67
 800e6ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e6ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6d0:	4299      	cmp	r1, r3
 800e6d2:	db06      	blt.n	800e6e2 <_printf_float+0x1ea>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	6129      	str	r1, [r5, #16]
 800e6d8:	07db      	lsls	r3, r3, #31
 800e6da:	d5f1      	bpl.n	800e6c0 <_printf_float+0x1c8>
 800e6dc:	3101      	adds	r1, #1
 800e6de:	6129      	str	r1, [r5, #16]
 800e6e0:	e7ee      	b.n	800e6c0 <_printf_float+0x1c8>
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	2900      	cmp	r1, #0
 800e6e6:	dce0      	bgt.n	800e6aa <_printf_float+0x1b2>
 800e6e8:	1892      	adds	r2, r2, r2
 800e6ea:	1a52      	subs	r2, r2, r1
 800e6ec:	e7dd      	b.n	800e6aa <_printf_float+0x1b2>
 800e6ee:	682a      	ldr	r2, [r5, #0]
 800e6f0:	0553      	lsls	r3, r2, #21
 800e6f2:	d408      	bmi.n	800e706 <_printf_float+0x20e>
 800e6f4:	692b      	ldr	r3, [r5, #16]
 800e6f6:	003a      	movs	r2, r7
 800e6f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e6fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e6fe:	47a0      	blx	r4
 800e700:	3001      	adds	r0, #1
 800e702:	d129      	bne.n	800e758 <_printf_float+0x260>
 800e704:	e754      	b.n	800e5b0 <_printf_float+0xb8>
 800e706:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e708:	2b65      	cmp	r3, #101	@ 0x65
 800e70a:	d800      	bhi.n	800e70e <_printf_float+0x216>
 800e70c:	e0db      	b.n	800e8c6 <_printf_float+0x3ce>
 800e70e:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e710:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e712:	2200      	movs	r2, #0
 800e714:	2300      	movs	r3, #0
 800e716:	f7f1 fe95 	bl	8000444 <__aeabi_dcmpeq>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d033      	beq.n	800e786 <_printf_float+0x28e>
 800e71e:	2301      	movs	r3, #1
 800e720:	4a37      	ldr	r2, [pc, #220]	@ (800e800 <_printf_float+0x308>)
 800e722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e726:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e728:	47a0      	blx	r4
 800e72a:	3001      	adds	r0, #1
 800e72c:	d100      	bne.n	800e730 <_printf_float+0x238>
 800e72e:	e73f      	b.n	800e5b0 <_printf_float+0xb8>
 800e730:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e732:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e734:	42b3      	cmp	r3, r6
 800e736:	db02      	blt.n	800e73e <_printf_float+0x246>
 800e738:	682b      	ldr	r3, [r5, #0]
 800e73a:	07db      	lsls	r3, r3, #31
 800e73c:	d50c      	bpl.n	800e758 <_printf_float+0x260>
 800e73e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e742:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e748:	47a0      	blx	r4
 800e74a:	2400      	movs	r4, #0
 800e74c:	3001      	adds	r0, #1
 800e74e:	d100      	bne.n	800e752 <_printf_float+0x25a>
 800e750:	e72e      	b.n	800e5b0 <_printf_float+0xb8>
 800e752:	1e73      	subs	r3, r6, #1
 800e754:	42a3      	cmp	r3, r4
 800e756:	dc0a      	bgt.n	800e76e <_printf_float+0x276>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	079b      	lsls	r3, r3, #30
 800e75c:	d500      	bpl.n	800e760 <_printf_float+0x268>
 800e75e:	e106      	b.n	800e96e <_printf_float+0x476>
 800e760:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e762:	68e8      	ldr	r0, [r5, #12]
 800e764:	4298      	cmp	r0, r3
 800e766:	db00      	blt.n	800e76a <_printf_float+0x272>
 800e768:	e724      	b.n	800e5b4 <_printf_float+0xbc>
 800e76a:	0018      	movs	r0, r3
 800e76c:	e722      	b.n	800e5b4 <_printf_float+0xbc>
 800e76e:	002a      	movs	r2, r5
 800e770:	2301      	movs	r3, #1
 800e772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e774:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e776:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e778:	321a      	adds	r2, #26
 800e77a:	47b8      	blx	r7
 800e77c:	3001      	adds	r0, #1
 800e77e:	d100      	bne.n	800e782 <_printf_float+0x28a>
 800e780:	e716      	b.n	800e5b0 <_printf_float+0xb8>
 800e782:	3401      	adds	r4, #1
 800e784:	e7e5      	b.n	800e752 <_printf_float+0x25a>
 800e786:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e788:	2b00      	cmp	r3, #0
 800e78a:	dc3b      	bgt.n	800e804 <_printf_float+0x30c>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4a1c      	ldr	r2, [pc, #112]	@ (800e800 <_printf_float+0x308>)
 800e790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e794:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e796:	47a0      	blx	r4
 800e798:	3001      	adds	r0, #1
 800e79a:	d100      	bne.n	800e79e <_printf_float+0x2a6>
 800e79c:	e708      	b.n	800e5b0 <_printf_float+0xb8>
 800e79e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e7a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7a2:	4333      	orrs	r3, r6
 800e7a4:	d102      	bne.n	800e7ac <_printf_float+0x2b4>
 800e7a6:	682b      	ldr	r3, [r5, #0]
 800e7a8:	07db      	lsls	r3, r3, #31
 800e7aa:	d5d5      	bpl.n	800e758 <_printf_float+0x260>
 800e7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e7b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e7b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e7b6:	47a0      	blx	r4
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d100      	bne.n	800e7c0 <_printf_float+0x2c8>
 800e7be:	e6f7      	b.n	800e5b0 <_printf_float+0xb8>
 800e7c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e7c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e7c6:	425b      	negs	r3, r3
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	dc01      	bgt.n	800e7d0 <_printf_float+0x2d8>
 800e7cc:	0033      	movs	r3, r6
 800e7ce:	e792      	b.n	800e6f6 <_printf_float+0x1fe>
 800e7d0:	002a      	movs	r2, r5
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e7da:	321a      	adds	r2, #26
 800e7dc:	47a0      	blx	r4
 800e7de:	3001      	adds	r0, #1
 800e7e0:	d100      	bne.n	800e7e4 <_printf_float+0x2ec>
 800e7e2:	e6e5      	b.n	800e5b0 <_printf_float+0xb8>
 800e7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	e7ea      	b.n	800e7c0 <_printf_float+0x2c8>
 800e7ea:	46c0      	nop			@ (mov r8, r8)
 800e7ec:	7fefffff 	.word	0x7fefffff
 800e7f0:	08011d4e 	.word	0x08011d4e
 800e7f4:	08011d4a 	.word	0x08011d4a
 800e7f8:	08011d56 	.word	0x08011d56
 800e7fc:	08011d52 	.word	0x08011d52
 800e800:	08011d5a 	.word	0x08011d5a
 800e804:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e806:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800e808:	930c      	str	r3, [sp, #48]	@ 0x30
 800e80a:	429e      	cmp	r6, r3
 800e80c:	dd00      	ble.n	800e810 <_printf_float+0x318>
 800e80e:	001e      	movs	r6, r3
 800e810:	2e00      	cmp	r6, #0
 800e812:	dc31      	bgt.n	800e878 <_printf_float+0x380>
 800e814:	43f3      	mvns	r3, r6
 800e816:	2400      	movs	r4, #0
 800e818:	17db      	asrs	r3, r3, #31
 800e81a:	4033      	ands	r3, r6
 800e81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800e81e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800e820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e822:	1af3      	subs	r3, r6, r3
 800e824:	42a3      	cmp	r3, r4
 800e826:	dc30      	bgt.n	800e88a <_printf_float+0x392>
 800e828:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e82a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e82c:	429a      	cmp	r2, r3
 800e82e:	dc38      	bgt.n	800e8a2 <_printf_float+0x3aa>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	07db      	lsls	r3, r3, #31
 800e834:	d435      	bmi.n	800e8a2 <_printf_float+0x3aa>
 800e836:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e83a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e83c:	1b9b      	subs	r3, r3, r6
 800e83e:	1b14      	subs	r4, r2, r4
 800e840:	429c      	cmp	r4, r3
 800e842:	dd00      	ble.n	800e846 <_printf_float+0x34e>
 800e844:	001c      	movs	r4, r3
 800e846:	2c00      	cmp	r4, #0
 800e848:	dc34      	bgt.n	800e8b4 <_printf_float+0x3bc>
 800e84a:	43e3      	mvns	r3, r4
 800e84c:	2600      	movs	r6, #0
 800e84e:	17db      	asrs	r3, r3, #31
 800e850:	401c      	ands	r4, r3
 800e852:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e854:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	1b1b      	subs	r3, r3, r4
 800e85a:	42b3      	cmp	r3, r6
 800e85c:	dc00      	bgt.n	800e860 <_printf_float+0x368>
 800e85e:	e77b      	b.n	800e758 <_printf_float+0x260>
 800e860:	002a      	movs	r2, r5
 800e862:	2301      	movs	r3, #1
 800e864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e868:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e86a:	321a      	adds	r2, #26
 800e86c:	47b8      	blx	r7
 800e86e:	3001      	adds	r0, #1
 800e870:	d100      	bne.n	800e874 <_printf_float+0x37c>
 800e872:	e69d      	b.n	800e5b0 <_printf_float+0xb8>
 800e874:	3601      	adds	r6, #1
 800e876:	e7ec      	b.n	800e852 <_printf_float+0x35a>
 800e878:	0033      	movs	r3, r6
 800e87a:	003a      	movs	r2, r7
 800e87c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e87e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e880:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e882:	47a0      	blx	r4
 800e884:	3001      	adds	r0, #1
 800e886:	d1c5      	bne.n	800e814 <_printf_float+0x31c>
 800e888:	e692      	b.n	800e5b0 <_printf_float+0xb8>
 800e88a:	002a      	movs	r2, r5
 800e88c:	2301      	movs	r3, #1
 800e88e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e890:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e892:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e894:	321a      	adds	r2, #26
 800e896:	47b0      	blx	r6
 800e898:	3001      	adds	r0, #1
 800e89a:	d100      	bne.n	800e89e <_printf_float+0x3a6>
 800e89c:	e688      	b.n	800e5b0 <_printf_float+0xb8>
 800e89e:	3401      	adds	r4, #1
 800e8a0:	e7bd      	b.n	800e81e <_printf_float+0x326>
 800e8a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e8a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e8ac:	47a0      	blx	r4
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d1c1      	bne.n	800e836 <_printf_float+0x33e>
 800e8b2:	e67d      	b.n	800e5b0 <_printf_float+0xb8>
 800e8b4:	19ba      	adds	r2, r7, r6
 800e8b6:	0023      	movs	r3, r4
 800e8b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e8be:	47b0      	blx	r6
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	d1c2      	bne.n	800e84a <_printf_float+0x352>
 800e8c4:	e674      	b.n	800e5b0 <_printf_float+0xb8>
 800e8c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	dc02      	bgt.n	800e8d4 <_printf_float+0x3dc>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	421a      	tst	r2, r3
 800e8d2:	d039      	beq.n	800e948 <_printf_float+0x450>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	003a      	movs	r2, r7
 800e8d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e8de:	47b0      	blx	r6
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d100      	bne.n	800e8e6 <_printf_float+0x3ee>
 800e8e4:	e664      	b.n	800e5b0 <_printf_float+0xb8>
 800e8e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e8ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8ee:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e8f0:	47b0      	blx	r6
 800e8f2:	3001      	adds	r0, #1
 800e8f4:	d100      	bne.n	800e8f8 <_printf_float+0x400>
 800e8f6:	e65b      	b.n	800e5b0 <_printf_float+0xb8>
 800e8f8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800e8fa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e8fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e8fe:	2200      	movs	r2, #0
 800e900:	3b01      	subs	r3, #1
 800e902:	930c      	str	r3, [sp, #48]	@ 0x30
 800e904:	2300      	movs	r3, #0
 800e906:	f7f1 fd9d 	bl	8000444 <__aeabi_dcmpeq>
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d11a      	bne.n	800e944 <_printf_float+0x44c>
 800e90e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e910:	1c7a      	adds	r2, r7, #1
 800e912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e914:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e916:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e918:	47b0      	blx	r6
 800e91a:	3001      	adds	r0, #1
 800e91c:	d10e      	bne.n	800e93c <_printf_float+0x444>
 800e91e:	e647      	b.n	800e5b0 <_printf_float+0xb8>
 800e920:	002a      	movs	r2, r5
 800e922:	2301      	movs	r3, #1
 800e924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e928:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e92a:	321a      	adds	r2, #26
 800e92c:	47b8      	blx	r7
 800e92e:	3001      	adds	r0, #1
 800e930:	d100      	bne.n	800e934 <_printf_float+0x43c>
 800e932:	e63d      	b.n	800e5b0 <_printf_float+0xb8>
 800e934:	3601      	adds	r6, #1
 800e936:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e938:	429e      	cmp	r6, r3
 800e93a:	dbf1      	blt.n	800e920 <_printf_float+0x428>
 800e93c:	002a      	movs	r2, r5
 800e93e:	0023      	movs	r3, r4
 800e940:	3250      	adds	r2, #80	@ 0x50
 800e942:	e6d9      	b.n	800e6f8 <_printf_float+0x200>
 800e944:	2600      	movs	r6, #0
 800e946:	e7f6      	b.n	800e936 <_printf_float+0x43e>
 800e948:	003a      	movs	r2, r7
 800e94a:	e7e2      	b.n	800e912 <_printf_float+0x41a>
 800e94c:	002a      	movs	r2, r5
 800e94e:	2301      	movs	r3, #1
 800e950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e954:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e956:	3219      	adds	r2, #25
 800e958:	47b0      	blx	r6
 800e95a:	3001      	adds	r0, #1
 800e95c:	d100      	bne.n	800e960 <_printf_float+0x468>
 800e95e:	e627      	b.n	800e5b0 <_printf_float+0xb8>
 800e960:	3401      	adds	r4, #1
 800e962:	68eb      	ldr	r3, [r5, #12]
 800e964:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e966:	1a9b      	subs	r3, r3, r2
 800e968:	42a3      	cmp	r3, r4
 800e96a:	dcef      	bgt.n	800e94c <_printf_float+0x454>
 800e96c:	e6f8      	b.n	800e760 <_printf_float+0x268>
 800e96e:	2400      	movs	r4, #0
 800e970:	e7f7      	b.n	800e962 <_printf_float+0x46a>
 800e972:	46c0      	nop			@ (mov r8, r8)

0800e974 <_printf_common>:
 800e974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e976:	0016      	movs	r6, r2
 800e978:	9301      	str	r3, [sp, #4]
 800e97a:	688a      	ldr	r2, [r1, #8]
 800e97c:	690b      	ldr	r3, [r1, #16]
 800e97e:	000c      	movs	r4, r1
 800e980:	9000      	str	r0, [sp, #0]
 800e982:	4293      	cmp	r3, r2
 800e984:	da00      	bge.n	800e988 <_printf_common+0x14>
 800e986:	0013      	movs	r3, r2
 800e988:	0022      	movs	r2, r4
 800e98a:	6033      	str	r3, [r6, #0]
 800e98c:	3243      	adds	r2, #67	@ 0x43
 800e98e:	7812      	ldrb	r2, [r2, #0]
 800e990:	2a00      	cmp	r2, #0
 800e992:	d001      	beq.n	800e998 <_printf_common+0x24>
 800e994:	3301      	adds	r3, #1
 800e996:	6033      	str	r3, [r6, #0]
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	069b      	lsls	r3, r3, #26
 800e99c:	d502      	bpl.n	800e9a4 <_printf_common+0x30>
 800e99e:	6833      	ldr	r3, [r6, #0]
 800e9a0:	3302      	adds	r3, #2
 800e9a2:	6033      	str	r3, [r6, #0]
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	2306      	movs	r3, #6
 800e9a8:	0015      	movs	r5, r2
 800e9aa:	401d      	ands	r5, r3
 800e9ac:	421a      	tst	r2, r3
 800e9ae:	d027      	beq.n	800ea00 <_printf_common+0x8c>
 800e9b0:	0023      	movs	r3, r4
 800e9b2:	3343      	adds	r3, #67	@ 0x43
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	1e5a      	subs	r2, r3, #1
 800e9b8:	4193      	sbcs	r3, r2
 800e9ba:	6822      	ldr	r2, [r4, #0]
 800e9bc:	0692      	lsls	r2, r2, #26
 800e9be:	d430      	bmi.n	800ea22 <_printf_common+0xae>
 800e9c0:	0022      	movs	r2, r4
 800e9c2:	9901      	ldr	r1, [sp, #4]
 800e9c4:	9800      	ldr	r0, [sp, #0]
 800e9c6:	9d08      	ldr	r5, [sp, #32]
 800e9c8:	3243      	adds	r2, #67	@ 0x43
 800e9ca:	47a8      	blx	r5
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	d025      	beq.n	800ea1c <_printf_common+0xa8>
 800e9d0:	2206      	movs	r2, #6
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	2500      	movs	r5, #0
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	2b04      	cmp	r3, #4
 800e9da:	d105      	bne.n	800e9e8 <_printf_common+0x74>
 800e9dc:	6833      	ldr	r3, [r6, #0]
 800e9de:	68e5      	ldr	r5, [r4, #12]
 800e9e0:	1aed      	subs	r5, r5, r3
 800e9e2:	43eb      	mvns	r3, r5
 800e9e4:	17db      	asrs	r3, r3, #31
 800e9e6:	401d      	ands	r5, r3
 800e9e8:	68a3      	ldr	r3, [r4, #8]
 800e9ea:	6922      	ldr	r2, [r4, #16]
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	dd01      	ble.n	800e9f4 <_printf_common+0x80>
 800e9f0:	1a9b      	subs	r3, r3, r2
 800e9f2:	18ed      	adds	r5, r5, r3
 800e9f4:	2600      	movs	r6, #0
 800e9f6:	42b5      	cmp	r5, r6
 800e9f8:	d120      	bne.n	800ea3c <_printf_common+0xc8>
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e010      	b.n	800ea20 <_printf_common+0xac>
 800e9fe:	3501      	adds	r5, #1
 800ea00:	68e3      	ldr	r3, [r4, #12]
 800ea02:	6832      	ldr	r2, [r6, #0]
 800ea04:	1a9b      	subs	r3, r3, r2
 800ea06:	42ab      	cmp	r3, r5
 800ea08:	ddd2      	ble.n	800e9b0 <_printf_common+0x3c>
 800ea0a:	0022      	movs	r2, r4
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	9901      	ldr	r1, [sp, #4]
 800ea10:	9800      	ldr	r0, [sp, #0]
 800ea12:	9f08      	ldr	r7, [sp, #32]
 800ea14:	3219      	adds	r2, #25
 800ea16:	47b8      	blx	r7
 800ea18:	3001      	adds	r0, #1
 800ea1a:	d1f0      	bne.n	800e9fe <_printf_common+0x8a>
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	4240      	negs	r0, r0
 800ea20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea22:	2030      	movs	r0, #48	@ 0x30
 800ea24:	18e1      	adds	r1, r4, r3
 800ea26:	3143      	adds	r1, #67	@ 0x43
 800ea28:	7008      	strb	r0, [r1, #0]
 800ea2a:	0021      	movs	r1, r4
 800ea2c:	1c5a      	adds	r2, r3, #1
 800ea2e:	3145      	adds	r1, #69	@ 0x45
 800ea30:	7809      	ldrb	r1, [r1, #0]
 800ea32:	18a2      	adds	r2, r4, r2
 800ea34:	3243      	adds	r2, #67	@ 0x43
 800ea36:	3302      	adds	r3, #2
 800ea38:	7011      	strb	r1, [r2, #0]
 800ea3a:	e7c1      	b.n	800e9c0 <_printf_common+0x4c>
 800ea3c:	0022      	movs	r2, r4
 800ea3e:	2301      	movs	r3, #1
 800ea40:	9901      	ldr	r1, [sp, #4]
 800ea42:	9800      	ldr	r0, [sp, #0]
 800ea44:	9f08      	ldr	r7, [sp, #32]
 800ea46:	321a      	adds	r2, #26
 800ea48:	47b8      	blx	r7
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	d0e6      	beq.n	800ea1c <_printf_common+0xa8>
 800ea4e:	3601      	adds	r6, #1
 800ea50:	e7d1      	b.n	800e9f6 <_printf_common+0x82>
	...

0800ea54 <_printf_i>:
 800ea54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea56:	b08b      	sub	sp, #44	@ 0x2c
 800ea58:	9206      	str	r2, [sp, #24]
 800ea5a:	000a      	movs	r2, r1
 800ea5c:	3243      	adds	r2, #67	@ 0x43
 800ea5e:	9307      	str	r3, [sp, #28]
 800ea60:	9005      	str	r0, [sp, #20]
 800ea62:	9203      	str	r2, [sp, #12]
 800ea64:	7e0a      	ldrb	r2, [r1, #24]
 800ea66:	000c      	movs	r4, r1
 800ea68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea6a:	2a78      	cmp	r2, #120	@ 0x78
 800ea6c:	d809      	bhi.n	800ea82 <_printf_i+0x2e>
 800ea6e:	2a62      	cmp	r2, #98	@ 0x62
 800ea70:	d80b      	bhi.n	800ea8a <_printf_i+0x36>
 800ea72:	2a00      	cmp	r2, #0
 800ea74:	d100      	bne.n	800ea78 <_printf_i+0x24>
 800ea76:	e0ba      	b.n	800ebee <_printf_i+0x19a>
 800ea78:	497a      	ldr	r1, [pc, #488]	@ (800ec64 <_printf_i+0x210>)
 800ea7a:	9104      	str	r1, [sp, #16]
 800ea7c:	2a58      	cmp	r2, #88	@ 0x58
 800ea7e:	d100      	bne.n	800ea82 <_printf_i+0x2e>
 800ea80:	e08e      	b.n	800eba0 <_printf_i+0x14c>
 800ea82:	0025      	movs	r5, r4
 800ea84:	3542      	adds	r5, #66	@ 0x42
 800ea86:	702a      	strb	r2, [r5, #0]
 800ea88:	e022      	b.n	800ead0 <_printf_i+0x7c>
 800ea8a:	0010      	movs	r0, r2
 800ea8c:	3863      	subs	r0, #99	@ 0x63
 800ea8e:	2815      	cmp	r0, #21
 800ea90:	d8f7      	bhi.n	800ea82 <_printf_i+0x2e>
 800ea92:	f7f1 fb47 	bl	8000124 <__gnu_thumb1_case_shi>
 800ea96:	0016      	.short	0x0016
 800ea98:	fff6001f 	.word	0xfff6001f
 800ea9c:	fff6fff6 	.word	0xfff6fff6
 800eaa0:	001ffff6 	.word	0x001ffff6
 800eaa4:	fff6fff6 	.word	0xfff6fff6
 800eaa8:	fff6fff6 	.word	0xfff6fff6
 800eaac:	0036009f 	.word	0x0036009f
 800eab0:	fff6007e 	.word	0xfff6007e
 800eab4:	00b0fff6 	.word	0x00b0fff6
 800eab8:	0036fff6 	.word	0x0036fff6
 800eabc:	fff6fff6 	.word	0xfff6fff6
 800eac0:	0082      	.short	0x0082
 800eac2:	0025      	movs	r5, r4
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	3542      	adds	r5, #66	@ 0x42
 800eac8:	1d11      	adds	r1, r2, #4
 800eaca:	6019      	str	r1, [r3, #0]
 800eacc:	6813      	ldr	r3, [r2, #0]
 800eace:	702b      	strb	r3, [r5, #0]
 800ead0:	2301      	movs	r3, #1
 800ead2:	e09e      	b.n	800ec12 <_printf_i+0x1be>
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	6809      	ldr	r1, [r1, #0]
 800ead8:	1d02      	adds	r2, r0, #4
 800eada:	060d      	lsls	r5, r1, #24
 800eadc:	d50b      	bpl.n	800eaf6 <_printf_i+0xa2>
 800eade:	6806      	ldr	r6, [r0, #0]
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	2e00      	cmp	r6, #0
 800eae4:	da03      	bge.n	800eaee <_printf_i+0x9a>
 800eae6:	232d      	movs	r3, #45	@ 0x2d
 800eae8:	9a03      	ldr	r2, [sp, #12]
 800eaea:	4276      	negs	r6, r6
 800eaec:	7013      	strb	r3, [r2, #0]
 800eaee:	4b5d      	ldr	r3, [pc, #372]	@ (800ec64 <_printf_i+0x210>)
 800eaf0:	270a      	movs	r7, #10
 800eaf2:	9304      	str	r3, [sp, #16]
 800eaf4:	e018      	b.n	800eb28 <_printf_i+0xd4>
 800eaf6:	6806      	ldr	r6, [r0, #0]
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	0649      	lsls	r1, r1, #25
 800eafc:	d5f1      	bpl.n	800eae2 <_printf_i+0x8e>
 800eafe:	b236      	sxth	r6, r6
 800eb00:	e7ef      	b.n	800eae2 <_printf_i+0x8e>
 800eb02:	6808      	ldr	r0, [r1, #0]
 800eb04:	6819      	ldr	r1, [r3, #0]
 800eb06:	c940      	ldmia	r1!, {r6}
 800eb08:	0605      	lsls	r5, r0, #24
 800eb0a:	d402      	bmi.n	800eb12 <_printf_i+0xbe>
 800eb0c:	0640      	lsls	r0, r0, #25
 800eb0e:	d500      	bpl.n	800eb12 <_printf_i+0xbe>
 800eb10:	b2b6      	uxth	r6, r6
 800eb12:	6019      	str	r1, [r3, #0]
 800eb14:	4b53      	ldr	r3, [pc, #332]	@ (800ec64 <_printf_i+0x210>)
 800eb16:	270a      	movs	r7, #10
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	2a6f      	cmp	r2, #111	@ 0x6f
 800eb1c:	d100      	bne.n	800eb20 <_printf_i+0xcc>
 800eb1e:	3f02      	subs	r7, #2
 800eb20:	0023      	movs	r3, r4
 800eb22:	2200      	movs	r2, #0
 800eb24:	3343      	adds	r3, #67	@ 0x43
 800eb26:	701a      	strb	r2, [r3, #0]
 800eb28:	6863      	ldr	r3, [r4, #4]
 800eb2a:	60a3      	str	r3, [r4, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	db06      	blt.n	800eb3e <_printf_i+0xea>
 800eb30:	2104      	movs	r1, #4
 800eb32:	6822      	ldr	r2, [r4, #0]
 800eb34:	9d03      	ldr	r5, [sp, #12]
 800eb36:	438a      	bics	r2, r1
 800eb38:	6022      	str	r2, [r4, #0]
 800eb3a:	4333      	orrs	r3, r6
 800eb3c:	d00c      	beq.n	800eb58 <_printf_i+0x104>
 800eb3e:	9d03      	ldr	r5, [sp, #12]
 800eb40:	0030      	movs	r0, r6
 800eb42:	0039      	movs	r1, r7
 800eb44:	f7f1 fb7e 	bl	8000244 <__aeabi_uidivmod>
 800eb48:	9b04      	ldr	r3, [sp, #16]
 800eb4a:	3d01      	subs	r5, #1
 800eb4c:	5c5b      	ldrb	r3, [r3, r1]
 800eb4e:	702b      	strb	r3, [r5, #0]
 800eb50:	0033      	movs	r3, r6
 800eb52:	0006      	movs	r6, r0
 800eb54:	429f      	cmp	r7, r3
 800eb56:	d9f3      	bls.n	800eb40 <_printf_i+0xec>
 800eb58:	2f08      	cmp	r7, #8
 800eb5a:	d109      	bne.n	800eb70 <_printf_i+0x11c>
 800eb5c:	6823      	ldr	r3, [r4, #0]
 800eb5e:	07db      	lsls	r3, r3, #31
 800eb60:	d506      	bpl.n	800eb70 <_printf_i+0x11c>
 800eb62:	6862      	ldr	r2, [r4, #4]
 800eb64:	6923      	ldr	r3, [r4, #16]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	dc02      	bgt.n	800eb70 <_printf_i+0x11c>
 800eb6a:	2330      	movs	r3, #48	@ 0x30
 800eb6c:	3d01      	subs	r5, #1
 800eb6e:	702b      	strb	r3, [r5, #0]
 800eb70:	9b03      	ldr	r3, [sp, #12]
 800eb72:	1b5b      	subs	r3, r3, r5
 800eb74:	6123      	str	r3, [r4, #16]
 800eb76:	9b07      	ldr	r3, [sp, #28]
 800eb78:	0021      	movs	r1, r4
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	9805      	ldr	r0, [sp, #20]
 800eb7e:	9b06      	ldr	r3, [sp, #24]
 800eb80:	aa09      	add	r2, sp, #36	@ 0x24
 800eb82:	f7ff fef7 	bl	800e974 <_printf_common>
 800eb86:	3001      	adds	r0, #1
 800eb88:	d148      	bne.n	800ec1c <_printf_i+0x1c8>
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	4240      	negs	r0, r0
 800eb8e:	b00b      	add	sp, #44	@ 0x2c
 800eb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb92:	2220      	movs	r2, #32
 800eb94:	6809      	ldr	r1, [r1, #0]
 800eb96:	430a      	orrs	r2, r1
 800eb98:	6022      	str	r2, [r4, #0]
 800eb9a:	2278      	movs	r2, #120	@ 0x78
 800eb9c:	4932      	ldr	r1, [pc, #200]	@ (800ec68 <_printf_i+0x214>)
 800eb9e:	9104      	str	r1, [sp, #16]
 800eba0:	0021      	movs	r1, r4
 800eba2:	3145      	adds	r1, #69	@ 0x45
 800eba4:	700a      	strb	r2, [r1, #0]
 800eba6:	6819      	ldr	r1, [r3, #0]
 800eba8:	6822      	ldr	r2, [r4, #0]
 800ebaa:	c940      	ldmia	r1!, {r6}
 800ebac:	0610      	lsls	r0, r2, #24
 800ebae:	d402      	bmi.n	800ebb6 <_printf_i+0x162>
 800ebb0:	0650      	lsls	r0, r2, #25
 800ebb2:	d500      	bpl.n	800ebb6 <_printf_i+0x162>
 800ebb4:	b2b6      	uxth	r6, r6
 800ebb6:	6019      	str	r1, [r3, #0]
 800ebb8:	07d3      	lsls	r3, r2, #31
 800ebba:	d502      	bpl.n	800ebc2 <_printf_i+0x16e>
 800ebbc:	2320      	movs	r3, #32
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	2e00      	cmp	r6, #0
 800ebc4:	d001      	beq.n	800ebca <_printf_i+0x176>
 800ebc6:	2710      	movs	r7, #16
 800ebc8:	e7aa      	b.n	800eb20 <_printf_i+0xcc>
 800ebca:	2220      	movs	r2, #32
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	4393      	bics	r3, r2
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	e7f8      	b.n	800ebc6 <_printf_i+0x172>
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	680d      	ldr	r5, [r1, #0]
 800ebd8:	1d10      	adds	r0, r2, #4
 800ebda:	6949      	ldr	r1, [r1, #20]
 800ebdc:	6018      	str	r0, [r3, #0]
 800ebde:	6813      	ldr	r3, [r2, #0]
 800ebe0:	062e      	lsls	r6, r5, #24
 800ebe2:	d501      	bpl.n	800ebe8 <_printf_i+0x194>
 800ebe4:	6019      	str	r1, [r3, #0]
 800ebe6:	e002      	b.n	800ebee <_printf_i+0x19a>
 800ebe8:	066d      	lsls	r5, r5, #25
 800ebea:	d5fb      	bpl.n	800ebe4 <_printf_i+0x190>
 800ebec:	8019      	strh	r1, [r3, #0]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	9d03      	ldr	r5, [sp, #12]
 800ebf2:	6123      	str	r3, [r4, #16]
 800ebf4:	e7bf      	b.n	800eb76 <_printf_i+0x122>
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	1d11      	adds	r1, r2, #4
 800ebfa:	6019      	str	r1, [r3, #0]
 800ebfc:	6815      	ldr	r5, [r2, #0]
 800ebfe:	2100      	movs	r1, #0
 800ec00:	0028      	movs	r0, r5
 800ec02:	6862      	ldr	r2, [r4, #4]
 800ec04:	f000 fa11 	bl	800f02a <memchr>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d001      	beq.n	800ec10 <_printf_i+0x1bc>
 800ec0c:	1b40      	subs	r0, r0, r5
 800ec0e:	6060      	str	r0, [r4, #4]
 800ec10:	6863      	ldr	r3, [r4, #4]
 800ec12:	6123      	str	r3, [r4, #16]
 800ec14:	2300      	movs	r3, #0
 800ec16:	9a03      	ldr	r2, [sp, #12]
 800ec18:	7013      	strb	r3, [r2, #0]
 800ec1a:	e7ac      	b.n	800eb76 <_printf_i+0x122>
 800ec1c:	002a      	movs	r2, r5
 800ec1e:	6923      	ldr	r3, [r4, #16]
 800ec20:	9906      	ldr	r1, [sp, #24]
 800ec22:	9805      	ldr	r0, [sp, #20]
 800ec24:	9d07      	ldr	r5, [sp, #28]
 800ec26:	47a8      	blx	r5
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d0ae      	beq.n	800eb8a <_printf_i+0x136>
 800ec2c:	6823      	ldr	r3, [r4, #0]
 800ec2e:	079b      	lsls	r3, r3, #30
 800ec30:	d415      	bmi.n	800ec5e <_printf_i+0x20a>
 800ec32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec34:	68e0      	ldr	r0, [r4, #12]
 800ec36:	4298      	cmp	r0, r3
 800ec38:	daa9      	bge.n	800eb8e <_printf_i+0x13a>
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	e7a7      	b.n	800eb8e <_printf_i+0x13a>
 800ec3e:	0022      	movs	r2, r4
 800ec40:	2301      	movs	r3, #1
 800ec42:	9906      	ldr	r1, [sp, #24]
 800ec44:	9805      	ldr	r0, [sp, #20]
 800ec46:	9e07      	ldr	r6, [sp, #28]
 800ec48:	3219      	adds	r2, #25
 800ec4a:	47b0      	blx	r6
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d09c      	beq.n	800eb8a <_printf_i+0x136>
 800ec50:	3501      	adds	r5, #1
 800ec52:	68e3      	ldr	r3, [r4, #12]
 800ec54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec56:	1a9b      	subs	r3, r3, r2
 800ec58:	42ab      	cmp	r3, r5
 800ec5a:	dcf0      	bgt.n	800ec3e <_printf_i+0x1ea>
 800ec5c:	e7e9      	b.n	800ec32 <_printf_i+0x1de>
 800ec5e:	2500      	movs	r5, #0
 800ec60:	e7f7      	b.n	800ec52 <_printf_i+0x1fe>
 800ec62:	46c0      	nop			@ (mov r8, r8)
 800ec64:	08011d5c 	.word	0x08011d5c
 800ec68:	08011d6d 	.word	0x08011d6d

0800ec6c <std>:
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	b510      	push	{r4, lr}
 800ec70:	0004      	movs	r4, r0
 800ec72:	6003      	str	r3, [r0, #0]
 800ec74:	6043      	str	r3, [r0, #4]
 800ec76:	6083      	str	r3, [r0, #8]
 800ec78:	8181      	strh	r1, [r0, #12]
 800ec7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec7c:	81c2      	strh	r2, [r0, #14]
 800ec7e:	6103      	str	r3, [r0, #16]
 800ec80:	6143      	str	r3, [r0, #20]
 800ec82:	6183      	str	r3, [r0, #24]
 800ec84:	0019      	movs	r1, r3
 800ec86:	2208      	movs	r2, #8
 800ec88:	305c      	adds	r0, #92	@ 0x5c
 800ec8a:	f000 f935 	bl	800eef8 <memset>
 800ec8e:	4b0b      	ldr	r3, [pc, #44]	@ (800ecbc <std+0x50>)
 800ec90:	6224      	str	r4, [r4, #32]
 800ec92:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec94:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc0 <std+0x54>)
 800ec96:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec98:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc4 <std+0x58>)
 800ec9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ecc8 <std+0x5c>)
 800ec9e:	6323      	str	r3, [r4, #48]	@ 0x30
 800eca0:	4b0a      	ldr	r3, [pc, #40]	@ (800eccc <std+0x60>)
 800eca2:	429c      	cmp	r4, r3
 800eca4:	d005      	beq.n	800ecb2 <std+0x46>
 800eca6:	4b0a      	ldr	r3, [pc, #40]	@ (800ecd0 <std+0x64>)
 800eca8:	429c      	cmp	r4, r3
 800ecaa:	d002      	beq.n	800ecb2 <std+0x46>
 800ecac:	4b09      	ldr	r3, [pc, #36]	@ (800ecd4 <std+0x68>)
 800ecae:	429c      	cmp	r4, r3
 800ecb0:	d103      	bne.n	800ecba <std+0x4e>
 800ecb2:	0020      	movs	r0, r4
 800ecb4:	3058      	adds	r0, #88	@ 0x58
 800ecb6:	f000 f9b5 	bl	800f024 <__retarget_lock_init_recursive>
 800ecba:	bd10      	pop	{r4, pc}
 800ecbc:	0800ee61 	.word	0x0800ee61
 800ecc0:	0800ee89 	.word	0x0800ee89
 800ecc4:	0800eec1 	.word	0x0800eec1
 800ecc8:	0800eeed 	.word	0x0800eeed
 800eccc:	20001f04 	.word	0x20001f04
 800ecd0:	20001f6c 	.word	0x20001f6c
 800ecd4:	20001fd4 	.word	0x20001fd4

0800ecd8 <stdio_exit_handler>:
 800ecd8:	b510      	push	{r4, lr}
 800ecda:	4a03      	ldr	r2, [pc, #12]	@ (800ece8 <stdio_exit_handler+0x10>)
 800ecdc:	4903      	ldr	r1, [pc, #12]	@ (800ecec <stdio_exit_handler+0x14>)
 800ecde:	4804      	ldr	r0, [pc, #16]	@ (800ecf0 <stdio_exit_handler+0x18>)
 800ece0:	f000 f86c 	bl	800edbc <_fwalk_sglue>
 800ece4:	bd10      	pop	{r4, pc}
 800ece6:	46c0      	nop			@ (mov r8, r8)
 800ece8:	20000100 	.word	0x20000100
 800ecec:	08011399 	.word	0x08011399
 800ecf0:	2000027c 	.word	0x2000027c

0800ecf4 <cleanup_stdio>:
 800ecf4:	6841      	ldr	r1, [r0, #4]
 800ecf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ed24 <cleanup_stdio+0x30>)
 800ecf8:	b510      	push	{r4, lr}
 800ecfa:	0004      	movs	r4, r0
 800ecfc:	4299      	cmp	r1, r3
 800ecfe:	d001      	beq.n	800ed04 <cleanup_stdio+0x10>
 800ed00:	f002 fb4a 	bl	8011398 <_fflush_r>
 800ed04:	68a1      	ldr	r1, [r4, #8]
 800ed06:	4b08      	ldr	r3, [pc, #32]	@ (800ed28 <cleanup_stdio+0x34>)
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	d002      	beq.n	800ed12 <cleanup_stdio+0x1e>
 800ed0c:	0020      	movs	r0, r4
 800ed0e:	f002 fb43 	bl	8011398 <_fflush_r>
 800ed12:	68e1      	ldr	r1, [r4, #12]
 800ed14:	4b05      	ldr	r3, [pc, #20]	@ (800ed2c <cleanup_stdio+0x38>)
 800ed16:	4299      	cmp	r1, r3
 800ed18:	d002      	beq.n	800ed20 <cleanup_stdio+0x2c>
 800ed1a:	0020      	movs	r0, r4
 800ed1c:	f002 fb3c 	bl	8011398 <_fflush_r>
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	46c0      	nop			@ (mov r8, r8)
 800ed24:	20001f04 	.word	0x20001f04
 800ed28:	20001f6c 	.word	0x20001f6c
 800ed2c:	20001fd4 	.word	0x20001fd4

0800ed30 <global_stdio_init.part.0>:
 800ed30:	b510      	push	{r4, lr}
 800ed32:	4b09      	ldr	r3, [pc, #36]	@ (800ed58 <global_stdio_init.part.0+0x28>)
 800ed34:	4a09      	ldr	r2, [pc, #36]	@ (800ed5c <global_stdio_init.part.0+0x2c>)
 800ed36:	2104      	movs	r1, #4
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	4809      	ldr	r0, [pc, #36]	@ (800ed60 <global_stdio_init.part.0+0x30>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f7ff ff95 	bl	800ec6c <std>
 800ed42:	2201      	movs	r2, #1
 800ed44:	2109      	movs	r1, #9
 800ed46:	4807      	ldr	r0, [pc, #28]	@ (800ed64 <global_stdio_init.part.0+0x34>)
 800ed48:	f7ff ff90 	bl	800ec6c <std>
 800ed4c:	2202      	movs	r2, #2
 800ed4e:	2112      	movs	r1, #18
 800ed50:	4805      	ldr	r0, [pc, #20]	@ (800ed68 <global_stdio_init.part.0+0x38>)
 800ed52:	f7ff ff8b 	bl	800ec6c <std>
 800ed56:	bd10      	pop	{r4, pc}
 800ed58:	2000203c 	.word	0x2000203c
 800ed5c:	0800ecd9 	.word	0x0800ecd9
 800ed60:	20001f04 	.word	0x20001f04
 800ed64:	20001f6c 	.word	0x20001f6c
 800ed68:	20001fd4 	.word	0x20001fd4

0800ed6c <__sfp_lock_acquire>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	4802      	ldr	r0, [pc, #8]	@ (800ed78 <__sfp_lock_acquire+0xc>)
 800ed70:	f000 f959 	bl	800f026 <__retarget_lock_acquire_recursive>
 800ed74:	bd10      	pop	{r4, pc}
 800ed76:	46c0      	nop			@ (mov r8, r8)
 800ed78:	20002045 	.word	0x20002045

0800ed7c <__sfp_lock_release>:
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	4802      	ldr	r0, [pc, #8]	@ (800ed88 <__sfp_lock_release+0xc>)
 800ed80:	f000 f952 	bl	800f028 <__retarget_lock_release_recursive>
 800ed84:	bd10      	pop	{r4, pc}
 800ed86:	46c0      	nop			@ (mov r8, r8)
 800ed88:	20002045 	.word	0x20002045

0800ed8c <__sinit>:
 800ed8c:	b510      	push	{r4, lr}
 800ed8e:	0004      	movs	r4, r0
 800ed90:	f7ff ffec 	bl	800ed6c <__sfp_lock_acquire>
 800ed94:	6a23      	ldr	r3, [r4, #32]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d002      	beq.n	800eda0 <__sinit+0x14>
 800ed9a:	f7ff ffef 	bl	800ed7c <__sfp_lock_release>
 800ed9e:	bd10      	pop	{r4, pc}
 800eda0:	4b04      	ldr	r3, [pc, #16]	@ (800edb4 <__sinit+0x28>)
 800eda2:	6223      	str	r3, [r4, #32]
 800eda4:	4b04      	ldr	r3, [pc, #16]	@ (800edb8 <__sinit+0x2c>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1f6      	bne.n	800ed9a <__sinit+0xe>
 800edac:	f7ff ffc0 	bl	800ed30 <global_stdio_init.part.0>
 800edb0:	e7f3      	b.n	800ed9a <__sinit+0xe>
 800edb2:	46c0      	nop			@ (mov r8, r8)
 800edb4:	0800ecf5 	.word	0x0800ecf5
 800edb8:	2000203c 	.word	0x2000203c

0800edbc <_fwalk_sglue>:
 800edbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edbe:	0014      	movs	r4, r2
 800edc0:	2600      	movs	r6, #0
 800edc2:	9000      	str	r0, [sp, #0]
 800edc4:	9101      	str	r1, [sp, #4]
 800edc6:	68a5      	ldr	r5, [r4, #8]
 800edc8:	6867      	ldr	r7, [r4, #4]
 800edca:	3f01      	subs	r7, #1
 800edcc:	d504      	bpl.n	800edd8 <_fwalk_sglue+0x1c>
 800edce:	6824      	ldr	r4, [r4, #0]
 800edd0:	2c00      	cmp	r4, #0
 800edd2:	d1f8      	bne.n	800edc6 <_fwalk_sglue+0xa>
 800edd4:	0030      	movs	r0, r6
 800edd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800edd8:	89ab      	ldrh	r3, [r5, #12]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d908      	bls.n	800edf0 <_fwalk_sglue+0x34>
 800edde:	220e      	movs	r2, #14
 800ede0:	5eab      	ldrsh	r3, [r5, r2]
 800ede2:	3301      	adds	r3, #1
 800ede4:	d004      	beq.n	800edf0 <_fwalk_sglue+0x34>
 800ede6:	0029      	movs	r1, r5
 800ede8:	9800      	ldr	r0, [sp, #0]
 800edea:	9b01      	ldr	r3, [sp, #4]
 800edec:	4798      	blx	r3
 800edee:	4306      	orrs	r6, r0
 800edf0:	3568      	adds	r5, #104	@ 0x68
 800edf2:	e7ea      	b.n	800edca <_fwalk_sglue+0xe>

0800edf4 <sniprintf>:
 800edf4:	b40c      	push	{r2, r3}
 800edf6:	b530      	push	{r4, r5, lr}
 800edf8:	4b18      	ldr	r3, [pc, #96]	@ (800ee5c <sniprintf+0x68>)
 800edfa:	000c      	movs	r4, r1
 800edfc:	681d      	ldr	r5, [r3, #0]
 800edfe:	b09d      	sub	sp, #116	@ 0x74
 800ee00:	2900      	cmp	r1, #0
 800ee02:	da08      	bge.n	800ee16 <sniprintf+0x22>
 800ee04:	238b      	movs	r3, #139	@ 0x8b
 800ee06:	2001      	movs	r0, #1
 800ee08:	602b      	str	r3, [r5, #0]
 800ee0a:	4240      	negs	r0, r0
 800ee0c:	b01d      	add	sp, #116	@ 0x74
 800ee0e:	bc30      	pop	{r4, r5}
 800ee10:	bc08      	pop	{r3}
 800ee12:	b002      	add	sp, #8
 800ee14:	4718      	bx	r3
 800ee16:	2382      	movs	r3, #130	@ 0x82
 800ee18:	466a      	mov	r2, sp
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	8293      	strh	r3, [r2, #20]
 800ee1e:	2300      	movs	r3, #0
 800ee20:	9002      	str	r0, [sp, #8]
 800ee22:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ee24:	9006      	str	r0, [sp, #24]
 800ee26:	4299      	cmp	r1, r3
 800ee28:	d000      	beq.n	800ee2c <sniprintf+0x38>
 800ee2a:	1e4b      	subs	r3, r1, #1
 800ee2c:	9304      	str	r3, [sp, #16]
 800ee2e:	9307      	str	r3, [sp, #28]
 800ee30:	2301      	movs	r3, #1
 800ee32:	466a      	mov	r2, sp
 800ee34:	425b      	negs	r3, r3
 800ee36:	82d3      	strh	r3, [r2, #22]
 800ee38:	0028      	movs	r0, r5
 800ee3a:	ab21      	add	r3, sp, #132	@ 0x84
 800ee3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ee3e:	a902      	add	r1, sp, #8
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	f002 f925 	bl	8011090 <_svfiprintf_r>
 800ee46:	1c43      	adds	r3, r0, #1
 800ee48:	da01      	bge.n	800ee4e <sniprintf+0x5a>
 800ee4a:	238b      	movs	r3, #139	@ 0x8b
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	2c00      	cmp	r4, #0
 800ee50:	d0dc      	beq.n	800ee0c <sniprintf+0x18>
 800ee52:	2200      	movs	r2, #0
 800ee54:	9b02      	ldr	r3, [sp, #8]
 800ee56:	701a      	strb	r2, [r3, #0]
 800ee58:	e7d8      	b.n	800ee0c <sniprintf+0x18>
 800ee5a:	46c0      	nop			@ (mov r8, r8)
 800ee5c:	20000278 	.word	0x20000278

0800ee60 <__sread>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	000c      	movs	r4, r1
 800ee64:	250e      	movs	r5, #14
 800ee66:	5f49      	ldrsh	r1, [r1, r5]
 800ee68:	f000 f88a 	bl	800ef80 <_read_r>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	db03      	blt.n	800ee78 <__sread+0x18>
 800ee70:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ee72:	181b      	adds	r3, r3, r0
 800ee74:	6563      	str	r3, [r4, #84]	@ 0x54
 800ee76:	bd70      	pop	{r4, r5, r6, pc}
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	4a02      	ldr	r2, [pc, #8]	@ (800ee84 <__sread+0x24>)
 800ee7c:	4013      	ands	r3, r2
 800ee7e:	81a3      	strh	r3, [r4, #12]
 800ee80:	e7f9      	b.n	800ee76 <__sread+0x16>
 800ee82:	46c0      	nop			@ (mov r8, r8)
 800ee84:	ffffefff 	.word	0xffffefff

0800ee88 <__swrite>:
 800ee88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee8a:	001f      	movs	r7, r3
 800ee8c:	898b      	ldrh	r3, [r1, #12]
 800ee8e:	0005      	movs	r5, r0
 800ee90:	000c      	movs	r4, r1
 800ee92:	0016      	movs	r6, r2
 800ee94:	05db      	lsls	r3, r3, #23
 800ee96:	d505      	bpl.n	800eea4 <__swrite+0x1c>
 800ee98:	230e      	movs	r3, #14
 800ee9a:	5ec9      	ldrsh	r1, [r1, r3]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	2302      	movs	r3, #2
 800eea0:	f000 f85a 	bl	800ef58 <_lseek_r>
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	4a05      	ldr	r2, [pc, #20]	@ (800eebc <__swrite+0x34>)
 800eea8:	0028      	movs	r0, r5
 800eeaa:	4013      	ands	r3, r2
 800eeac:	81a3      	strh	r3, [r4, #12]
 800eeae:	0032      	movs	r2, r6
 800eeb0:	230e      	movs	r3, #14
 800eeb2:	5ee1      	ldrsh	r1, [r4, r3]
 800eeb4:	003b      	movs	r3, r7
 800eeb6:	f000 f877 	bl	800efa8 <_write_r>
 800eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eebc:	ffffefff 	.word	0xffffefff

0800eec0 <__sseek>:
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	000c      	movs	r4, r1
 800eec4:	250e      	movs	r5, #14
 800eec6:	5f49      	ldrsh	r1, [r1, r5]
 800eec8:	f000 f846 	bl	800ef58 <_lseek_r>
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	1c42      	adds	r2, r0, #1
 800eed0:	d103      	bne.n	800eeda <__sseek+0x1a>
 800eed2:	4a05      	ldr	r2, [pc, #20]	@ (800eee8 <__sseek+0x28>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	81a3      	strh	r3, [r4, #12]
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	2280      	movs	r2, #128	@ 0x80
 800eedc:	0152      	lsls	r2, r2, #5
 800eede:	4313      	orrs	r3, r2
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	6560      	str	r0, [r4, #84]	@ 0x54
 800eee4:	e7f8      	b.n	800eed8 <__sseek+0x18>
 800eee6:	46c0      	nop			@ (mov r8, r8)
 800eee8:	ffffefff 	.word	0xffffefff

0800eeec <__sclose>:
 800eeec:	b510      	push	{r4, lr}
 800eeee:	230e      	movs	r3, #14
 800eef0:	5ec9      	ldrsh	r1, [r1, r3]
 800eef2:	f000 f81f 	bl	800ef34 <_close_r>
 800eef6:	bd10      	pop	{r4, pc}

0800eef8 <memset>:
 800eef8:	0003      	movs	r3, r0
 800eefa:	1882      	adds	r2, r0, r2
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d100      	bne.n	800ef02 <memset+0xa>
 800ef00:	4770      	bx	lr
 800ef02:	7019      	strb	r1, [r3, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	e7f9      	b.n	800eefc <memset+0x4>

0800ef08 <strncmp>:
 800ef08:	b530      	push	{r4, r5, lr}
 800ef0a:	0005      	movs	r5, r0
 800ef0c:	1e10      	subs	r0, r2, #0
 800ef0e:	d00b      	beq.n	800ef28 <strncmp+0x20>
 800ef10:	2400      	movs	r4, #0
 800ef12:	3a01      	subs	r2, #1
 800ef14:	5d2b      	ldrb	r3, [r5, r4]
 800ef16:	5d08      	ldrb	r0, [r1, r4]
 800ef18:	4283      	cmp	r3, r0
 800ef1a:	d104      	bne.n	800ef26 <strncmp+0x1e>
 800ef1c:	4294      	cmp	r4, r2
 800ef1e:	d002      	beq.n	800ef26 <strncmp+0x1e>
 800ef20:	3401      	adds	r4, #1
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1f6      	bne.n	800ef14 <strncmp+0xc>
 800ef26:	1a18      	subs	r0, r3, r0
 800ef28:	bd30      	pop	{r4, r5, pc}
	...

0800ef2c <_localeconv_r>:
 800ef2c:	4800      	ldr	r0, [pc, #0]	@ (800ef30 <_localeconv_r+0x4>)
 800ef2e:	4770      	bx	lr
 800ef30:	200001fc 	.word	0x200001fc

0800ef34 <_close_r>:
 800ef34:	2300      	movs	r3, #0
 800ef36:	b570      	push	{r4, r5, r6, lr}
 800ef38:	4d06      	ldr	r5, [pc, #24]	@ (800ef54 <_close_r+0x20>)
 800ef3a:	0004      	movs	r4, r0
 800ef3c:	0008      	movs	r0, r1
 800ef3e:	602b      	str	r3, [r5, #0]
 800ef40:	f7f4 fbf4 	bl	800372c <_close>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	d103      	bne.n	800ef50 <_close_r+0x1c>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d000      	beq.n	800ef50 <_close_r+0x1c>
 800ef4e:	6023      	str	r3, [r4, #0]
 800ef50:	bd70      	pop	{r4, r5, r6, pc}
 800ef52:	46c0      	nop			@ (mov r8, r8)
 800ef54:	20002040 	.word	0x20002040

0800ef58 <_lseek_r>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	0004      	movs	r4, r0
 800ef5c:	0008      	movs	r0, r1
 800ef5e:	0011      	movs	r1, r2
 800ef60:	001a      	movs	r2, r3
 800ef62:	2300      	movs	r3, #0
 800ef64:	4d05      	ldr	r5, [pc, #20]	@ (800ef7c <_lseek_r+0x24>)
 800ef66:	602b      	str	r3, [r5, #0]
 800ef68:	f7f4 fc01 	bl	800376e <_lseek>
 800ef6c:	1c43      	adds	r3, r0, #1
 800ef6e:	d103      	bne.n	800ef78 <_lseek_r+0x20>
 800ef70:	682b      	ldr	r3, [r5, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d000      	beq.n	800ef78 <_lseek_r+0x20>
 800ef76:	6023      	str	r3, [r4, #0]
 800ef78:	bd70      	pop	{r4, r5, r6, pc}
 800ef7a:	46c0      	nop			@ (mov r8, r8)
 800ef7c:	20002040 	.word	0x20002040

0800ef80 <_read_r>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	0004      	movs	r4, r0
 800ef84:	0008      	movs	r0, r1
 800ef86:	0011      	movs	r1, r2
 800ef88:	001a      	movs	r2, r3
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	4d05      	ldr	r5, [pc, #20]	@ (800efa4 <_read_r+0x24>)
 800ef8e:	602b      	str	r3, [r5, #0]
 800ef90:	f7f4 fb93 	bl	80036ba <_read>
 800ef94:	1c43      	adds	r3, r0, #1
 800ef96:	d103      	bne.n	800efa0 <_read_r+0x20>
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d000      	beq.n	800efa0 <_read_r+0x20>
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
 800efa2:	46c0      	nop			@ (mov r8, r8)
 800efa4:	20002040 	.word	0x20002040

0800efa8 <_write_r>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	0004      	movs	r4, r0
 800efac:	0008      	movs	r0, r1
 800efae:	0011      	movs	r1, r2
 800efb0:	001a      	movs	r2, r3
 800efb2:	2300      	movs	r3, #0
 800efb4:	4d05      	ldr	r5, [pc, #20]	@ (800efcc <_write_r+0x24>)
 800efb6:	602b      	str	r3, [r5, #0]
 800efb8:	f7f4 fb9c 	bl	80036f4 <_write>
 800efbc:	1c43      	adds	r3, r0, #1
 800efbe:	d103      	bne.n	800efc8 <_write_r+0x20>
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d000      	beq.n	800efc8 <_write_r+0x20>
 800efc6:	6023      	str	r3, [r4, #0]
 800efc8:	bd70      	pop	{r4, r5, r6, pc}
 800efca:	46c0      	nop			@ (mov r8, r8)
 800efcc:	20002040 	.word	0x20002040

0800efd0 <__errno>:
 800efd0:	4b01      	ldr	r3, [pc, #4]	@ (800efd8 <__errno+0x8>)
 800efd2:	6818      	ldr	r0, [r3, #0]
 800efd4:	4770      	bx	lr
 800efd6:	46c0      	nop			@ (mov r8, r8)
 800efd8:	20000278 	.word	0x20000278

0800efdc <__libc_init_array>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	2600      	movs	r6, #0
 800efe0:	4c0c      	ldr	r4, [pc, #48]	@ (800f014 <__libc_init_array+0x38>)
 800efe2:	4d0d      	ldr	r5, [pc, #52]	@ (800f018 <__libc_init_array+0x3c>)
 800efe4:	1b64      	subs	r4, r4, r5
 800efe6:	10a4      	asrs	r4, r4, #2
 800efe8:	42a6      	cmp	r6, r4
 800efea:	d109      	bne.n	800f000 <__libc_init_array+0x24>
 800efec:	2600      	movs	r6, #0
 800efee:	f002 fd7b 	bl	8011ae8 <_init>
 800eff2:	4c0a      	ldr	r4, [pc, #40]	@ (800f01c <__libc_init_array+0x40>)
 800eff4:	4d0a      	ldr	r5, [pc, #40]	@ (800f020 <__libc_init_array+0x44>)
 800eff6:	1b64      	subs	r4, r4, r5
 800eff8:	10a4      	asrs	r4, r4, #2
 800effa:	42a6      	cmp	r6, r4
 800effc:	d105      	bne.n	800f00a <__libc_init_array+0x2e>
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	00b3      	lsls	r3, r6, #2
 800f002:	58eb      	ldr	r3, [r5, r3]
 800f004:	4798      	blx	r3
 800f006:	3601      	adds	r6, #1
 800f008:	e7ee      	b.n	800efe8 <__libc_init_array+0xc>
 800f00a:	00b3      	lsls	r3, r6, #2
 800f00c:	58eb      	ldr	r3, [r5, r3]
 800f00e:	4798      	blx	r3
 800f010:	3601      	adds	r6, #1
 800f012:	e7f2      	b.n	800effa <__libc_init_array+0x1e>
 800f014:	08012174 	.word	0x08012174
 800f018:	08012174 	.word	0x08012174
 800f01c:	08012178 	.word	0x08012178
 800f020:	08012174 	.word	0x08012174

0800f024 <__retarget_lock_init_recursive>:
 800f024:	4770      	bx	lr

0800f026 <__retarget_lock_acquire_recursive>:
 800f026:	4770      	bx	lr

0800f028 <__retarget_lock_release_recursive>:
 800f028:	4770      	bx	lr

0800f02a <memchr>:
 800f02a:	b2c9      	uxtb	r1, r1
 800f02c:	1882      	adds	r2, r0, r2
 800f02e:	4290      	cmp	r0, r2
 800f030:	d101      	bne.n	800f036 <memchr+0xc>
 800f032:	2000      	movs	r0, #0
 800f034:	4770      	bx	lr
 800f036:	7803      	ldrb	r3, [r0, #0]
 800f038:	428b      	cmp	r3, r1
 800f03a:	d0fb      	beq.n	800f034 <memchr+0xa>
 800f03c:	3001      	adds	r0, #1
 800f03e:	e7f6      	b.n	800f02e <memchr+0x4>

0800f040 <memcpy>:
 800f040:	2300      	movs	r3, #0
 800f042:	b510      	push	{r4, lr}
 800f044:	429a      	cmp	r2, r3
 800f046:	d100      	bne.n	800f04a <memcpy+0xa>
 800f048:	bd10      	pop	{r4, pc}
 800f04a:	5ccc      	ldrb	r4, [r1, r3]
 800f04c:	54c4      	strb	r4, [r0, r3]
 800f04e:	3301      	adds	r3, #1
 800f050:	e7f8      	b.n	800f044 <memcpy+0x4>
	...

0800f054 <nan>:
 800f054:	2000      	movs	r0, #0
 800f056:	4901      	ldr	r1, [pc, #4]	@ (800f05c <nan+0x8>)
 800f058:	4770      	bx	lr
 800f05a:	46c0      	nop			@ (mov r8, r8)
 800f05c:	7ff80000 	.word	0x7ff80000

0800f060 <quorem>:
 800f060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f062:	6903      	ldr	r3, [r0, #16]
 800f064:	690c      	ldr	r4, [r1, #16]
 800f066:	b089      	sub	sp, #36	@ 0x24
 800f068:	9003      	str	r0, [sp, #12]
 800f06a:	9106      	str	r1, [sp, #24]
 800f06c:	2000      	movs	r0, #0
 800f06e:	42a3      	cmp	r3, r4
 800f070:	db63      	blt.n	800f13a <quorem+0xda>
 800f072:	000b      	movs	r3, r1
 800f074:	3c01      	subs	r4, #1
 800f076:	3314      	adds	r3, #20
 800f078:	00a5      	lsls	r5, r4, #2
 800f07a:	9304      	str	r3, [sp, #16]
 800f07c:	195b      	adds	r3, r3, r5
 800f07e:	9305      	str	r3, [sp, #20]
 800f080:	9b03      	ldr	r3, [sp, #12]
 800f082:	3314      	adds	r3, #20
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	195d      	adds	r5, r3, r5
 800f088:	9b05      	ldr	r3, [sp, #20]
 800f08a:	682f      	ldr	r7, [r5, #0]
 800f08c:	681e      	ldr	r6, [r3, #0]
 800f08e:	0038      	movs	r0, r7
 800f090:	3601      	adds	r6, #1
 800f092:	0031      	movs	r1, r6
 800f094:	f7f1 f850 	bl	8000138 <__udivsi3>
 800f098:	9002      	str	r0, [sp, #8]
 800f09a:	42b7      	cmp	r7, r6
 800f09c:	d327      	bcc.n	800f0ee <quorem+0x8e>
 800f09e:	9b04      	ldr	r3, [sp, #16]
 800f0a0:	2700      	movs	r7, #0
 800f0a2:	469c      	mov	ip, r3
 800f0a4:	9e01      	ldr	r6, [sp, #4]
 800f0a6:	9707      	str	r7, [sp, #28]
 800f0a8:	4662      	mov	r2, ip
 800f0aa:	ca08      	ldmia	r2!, {r3}
 800f0ac:	6830      	ldr	r0, [r6, #0]
 800f0ae:	4694      	mov	ip, r2
 800f0b0:	9a02      	ldr	r2, [sp, #8]
 800f0b2:	b299      	uxth	r1, r3
 800f0b4:	4351      	muls	r1, r2
 800f0b6:	0c1b      	lsrs	r3, r3, #16
 800f0b8:	4353      	muls	r3, r2
 800f0ba:	19c9      	adds	r1, r1, r7
 800f0bc:	0c0a      	lsrs	r2, r1, #16
 800f0be:	189b      	adds	r3, r3, r2
 800f0c0:	b289      	uxth	r1, r1
 800f0c2:	b282      	uxth	r2, r0
 800f0c4:	1a52      	subs	r2, r2, r1
 800f0c6:	9907      	ldr	r1, [sp, #28]
 800f0c8:	0c1f      	lsrs	r7, r3, #16
 800f0ca:	1852      	adds	r2, r2, r1
 800f0cc:	0c00      	lsrs	r0, r0, #16
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	1411      	asrs	r1, r2, #16
 800f0d2:	1ac3      	subs	r3, r0, r3
 800f0d4:	185b      	adds	r3, r3, r1
 800f0d6:	1419      	asrs	r1, r3, #16
 800f0d8:	b292      	uxth	r2, r2
 800f0da:	041b      	lsls	r3, r3, #16
 800f0dc:	431a      	orrs	r2, r3
 800f0de:	9b05      	ldr	r3, [sp, #20]
 800f0e0:	9107      	str	r1, [sp, #28]
 800f0e2:	c604      	stmia	r6!, {r2}
 800f0e4:	4563      	cmp	r3, ip
 800f0e6:	d2df      	bcs.n	800f0a8 <quorem+0x48>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d02b      	beq.n	800f146 <quorem+0xe6>
 800f0ee:	9906      	ldr	r1, [sp, #24]
 800f0f0:	9803      	ldr	r0, [sp, #12]
 800f0f2:	f001 fd6f 	bl	8010bd4 <__mcmp>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	db1e      	blt.n	800f138 <quorem+0xd8>
 800f0fa:	2600      	movs	r6, #0
 800f0fc:	9d01      	ldr	r5, [sp, #4]
 800f0fe:	9904      	ldr	r1, [sp, #16]
 800f100:	c901      	ldmia	r1!, {r0}
 800f102:	682b      	ldr	r3, [r5, #0]
 800f104:	b287      	uxth	r7, r0
 800f106:	b29a      	uxth	r2, r3
 800f108:	1bd2      	subs	r2, r2, r7
 800f10a:	1992      	adds	r2, r2, r6
 800f10c:	0c00      	lsrs	r0, r0, #16
 800f10e:	0c1b      	lsrs	r3, r3, #16
 800f110:	1a1b      	subs	r3, r3, r0
 800f112:	1410      	asrs	r0, r2, #16
 800f114:	181b      	adds	r3, r3, r0
 800f116:	141e      	asrs	r6, r3, #16
 800f118:	b292      	uxth	r2, r2
 800f11a:	041b      	lsls	r3, r3, #16
 800f11c:	431a      	orrs	r2, r3
 800f11e:	9b05      	ldr	r3, [sp, #20]
 800f120:	c504      	stmia	r5!, {r2}
 800f122:	428b      	cmp	r3, r1
 800f124:	d2ec      	bcs.n	800f100 <quorem+0xa0>
 800f126:	9a01      	ldr	r2, [sp, #4]
 800f128:	00a3      	lsls	r3, r4, #2
 800f12a:	18d3      	adds	r3, r2, r3
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	2a00      	cmp	r2, #0
 800f130:	d014      	beq.n	800f15c <quorem+0xfc>
 800f132:	9b02      	ldr	r3, [sp, #8]
 800f134:	3301      	adds	r3, #1
 800f136:	9302      	str	r3, [sp, #8]
 800f138:	9802      	ldr	r0, [sp, #8]
 800f13a:	b009      	add	sp, #36	@ 0x24
 800f13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13e:	682b      	ldr	r3, [r5, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d104      	bne.n	800f14e <quorem+0xee>
 800f144:	3c01      	subs	r4, #1
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	3d04      	subs	r5, #4
 800f14a:	42ab      	cmp	r3, r5
 800f14c:	d3f7      	bcc.n	800f13e <quorem+0xde>
 800f14e:	9b03      	ldr	r3, [sp, #12]
 800f150:	611c      	str	r4, [r3, #16]
 800f152:	e7cc      	b.n	800f0ee <quorem+0x8e>
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	2a00      	cmp	r2, #0
 800f158:	d104      	bne.n	800f164 <quorem+0x104>
 800f15a:	3c01      	subs	r4, #1
 800f15c:	9a01      	ldr	r2, [sp, #4]
 800f15e:	3b04      	subs	r3, #4
 800f160:	429a      	cmp	r2, r3
 800f162:	d3f7      	bcc.n	800f154 <quorem+0xf4>
 800f164:	9b03      	ldr	r3, [sp, #12]
 800f166:	611c      	str	r4, [r3, #16]
 800f168:	e7e3      	b.n	800f132 <quorem+0xd2>
	...

0800f16c <_dtoa_r>:
 800f16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f16e:	0014      	movs	r4, r2
 800f170:	001d      	movs	r5, r3
 800f172:	69c6      	ldr	r6, [r0, #28]
 800f174:	b09d      	sub	sp, #116	@ 0x74
 800f176:	940a      	str	r4, [sp, #40]	@ 0x28
 800f178:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f17a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800f17c:	9003      	str	r0, [sp, #12]
 800f17e:	2e00      	cmp	r6, #0
 800f180:	d10f      	bne.n	800f1a2 <_dtoa_r+0x36>
 800f182:	2010      	movs	r0, #16
 800f184:	f001 f986 	bl	8010494 <malloc>
 800f188:	9b03      	ldr	r3, [sp, #12]
 800f18a:	1e02      	subs	r2, r0, #0
 800f18c:	61d8      	str	r0, [r3, #28]
 800f18e:	d104      	bne.n	800f19a <_dtoa_r+0x2e>
 800f190:	21ef      	movs	r1, #239	@ 0xef
 800f192:	4bc7      	ldr	r3, [pc, #796]	@ (800f4b0 <_dtoa_r+0x344>)
 800f194:	48c7      	ldr	r0, [pc, #796]	@ (800f4b4 <_dtoa_r+0x348>)
 800f196:	f002 f94f 	bl	8011438 <__assert_func>
 800f19a:	6046      	str	r6, [r0, #4]
 800f19c:	6086      	str	r6, [r0, #8]
 800f19e:	6006      	str	r6, [r0, #0]
 800f1a0:	60c6      	str	r6, [r0, #12]
 800f1a2:	9b03      	ldr	r3, [sp, #12]
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	6819      	ldr	r1, [r3, #0]
 800f1a8:	2900      	cmp	r1, #0
 800f1aa:	d00b      	beq.n	800f1c4 <_dtoa_r+0x58>
 800f1ac:	685a      	ldr	r2, [r3, #4]
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	4093      	lsls	r3, r2
 800f1b2:	604a      	str	r2, [r1, #4]
 800f1b4:	608b      	str	r3, [r1, #8]
 800f1b6:	9803      	ldr	r0, [sp, #12]
 800f1b8:	f001 fa7e 	bl	80106b8 <_Bfree>
 800f1bc:	2200      	movs	r2, #0
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	601a      	str	r2, [r3, #0]
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	da1e      	bge.n	800f206 <_dtoa_r+0x9a>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	603b      	str	r3, [r7, #0]
 800f1cc:	006b      	lsls	r3, r5, #1
 800f1ce:	085b      	lsrs	r3, r3, #1
 800f1d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1d2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f1d4:	4bb8      	ldr	r3, [pc, #736]	@ (800f4b8 <_dtoa_r+0x34c>)
 800f1d6:	4ab8      	ldr	r2, [pc, #736]	@ (800f4b8 <_dtoa_r+0x34c>)
 800f1d8:	403b      	ands	r3, r7
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d116      	bne.n	800f20c <_dtoa_r+0xa0>
 800f1de:	4bb7      	ldr	r3, [pc, #732]	@ (800f4bc <_dtoa_r+0x350>)
 800f1e0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f1e2:	6013      	str	r3, [r2, #0]
 800f1e4:	033b      	lsls	r3, r7, #12
 800f1e6:	0b1b      	lsrs	r3, r3, #12
 800f1e8:	4323      	orrs	r3, r4
 800f1ea:	d101      	bne.n	800f1f0 <_dtoa_r+0x84>
 800f1ec:	f000 fd80 	bl	800fcf0 <_dtoa_r+0xb84>
 800f1f0:	4bb3      	ldr	r3, [pc, #716]	@ (800f4c0 <_dtoa_r+0x354>)
 800f1f2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f1f4:	9308      	str	r3, [sp, #32]
 800f1f6:	2a00      	cmp	r2, #0
 800f1f8:	d002      	beq.n	800f200 <_dtoa_r+0x94>
 800f1fa:	4bb2      	ldr	r3, [pc, #712]	@ (800f4c4 <_dtoa_r+0x358>)
 800f1fc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	9808      	ldr	r0, [sp, #32]
 800f202:	b01d      	add	sp, #116	@ 0x74
 800f204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f206:	2300      	movs	r3, #0
 800f208:	603b      	str	r3, [r7, #0]
 800f20a:	e7e2      	b.n	800f1d2 <_dtoa_r+0x66>
 800f20c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f210:	9212      	str	r2, [sp, #72]	@ 0x48
 800f212:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f214:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f216:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f218:	2200      	movs	r2, #0
 800f21a:	2300      	movs	r3, #0
 800f21c:	f7f1 f912 	bl	8000444 <__aeabi_dcmpeq>
 800f220:	1e06      	subs	r6, r0, #0
 800f222:	d00b      	beq.n	800f23c <_dtoa_r+0xd0>
 800f224:	2301      	movs	r3, #1
 800f226:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f228:	6013      	str	r3, [r2, #0]
 800f22a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <_dtoa_r+0xca>
 800f230:	4ba5      	ldr	r3, [pc, #660]	@ (800f4c8 <_dtoa_r+0x35c>)
 800f232:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	4ba5      	ldr	r3, [pc, #660]	@ (800f4cc <_dtoa_r+0x360>)
 800f238:	9308      	str	r3, [sp, #32]
 800f23a:	e7e1      	b.n	800f200 <_dtoa_r+0x94>
 800f23c:	ab1a      	add	r3, sp, #104	@ 0x68
 800f23e:	9301      	str	r3, [sp, #4]
 800f240:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	9803      	ldr	r0, [sp, #12]
 800f246:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f248:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f24a:	f001 fde5 	bl	8010e18 <__d2b>
 800f24e:	007a      	lsls	r2, r7, #1
 800f250:	9005      	str	r0, [sp, #20]
 800f252:	0d52      	lsrs	r2, r2, #21
 800f254:	d100      	bne.n	800f258 <_dtoa_r+0xec>
 800f256:	e07b      	b.n	800f350 <_dtoa_r+0x1e4>
 800f258:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f25a:	9618      	str	r6, [sp, #96]	@ 0x60
 800f25c:	0319      	lsls	r1, r3, #12
 800f25e:	4b9c      	ldr	r3, [pc, #624]	@ (800f4d0 <_dtoa_r+0x364>)
 800f260:	0b09      	lsrs	r1, r1, #12
 800f262:	430b      	orrs	r3, r1
 800f264:	499b      	ldr	r1, [pc, #620]	@ (800f4d4 <_dtoa_r+0x368>)
 800f266:	1857      	adds	r7, r2, r1
 800f268:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f26a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f26c:	0019      	movs	r1, r3
 800f26e:	2200      	movs	r2, #0
 800f270:	4b99      	ldr	r3, [pc, #612]	@ (800f4d8 <_dtoa_r+0x36c>)
 800f272:	f7f2 fc69 	bl	8001b48 <__aeabi_dsub>
 800f276:	4a99      	ldr	r2, [pc, #612]	@ (800f4dc <_dtoa_r+0x370>)
 800f278:	4b99      	ldr	r3, [pc, #612]	@ (800f4e0 <_dtoa_r+0x374>)
 800f27a:	f7f2 f97f 	bl	800157c <__aeabi_dmul>
 800f27e:	4a99      	ldr	r2, [pc, #612]	@ (800f4e4 <_dtoa_r+0x378>)
 800f280:	4b99      	ldr	r3, [pc, #612]	@ (800f4e8 <_dtoa_r+0x37c>)
 800f282:	f7f1 f97b 	bl	800057c <__aeabi_dadd>
 800f286:	0004      	movs	r4, r0
 800f288:	0038      	movs	r0, r7
 800f28a:	000d      	movs	r5, r1
 800f28c:	f7f3 f8c4 	bl	8002418 <__aeabi_i2d>
 800f290:	4a96      	ldr	r2, [pc, #600]	@ (800f4ec <_dtoa_r+0x380>)
 800f292:	4b97      	ldr	r3, [pc, #604]	@ (800f4f0 <_dtoa_r+0x384>)
 800f294:	f7f2 f972 	bl	800157c <__aeabi_dmul>
 800f298:	0002      	movs	r2, r0
 800f29a:	000b      	movs	r3, r1
 800f29c:	0020      	movs	r0, r4
 800f29e:	0029      	movs	r1, r5
 800f2a0:	f7f1 f96c 	bl	800057c <__aeabi_dadd>
 800f2a4:	0004      	movs	r4, r0
 800f2a6:	000d      	movs	r5, r1
 800f2a8:	f7f3 f87a 	bl	80023a0 <__aeabi_d2iz>
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	9004      	str	r0, [sp, #16]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	0020      	movs	r0, r4
 800f2b4:	0029      	movs	r1, r5
 800f2b6:	f7f1 f8cb 	bl	8000450 <__aeabi_dcmplt>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d00b      	beq.n	800f2d6 <_dtoa_r+0x16a>
 800f2be:	9804      	ldr	r0, [sp, #16]
 800f2c0:	f7f3 f8aa 	bl	8002418 <__aeabi_i2d>
 800f2c4:	002b      	movs	r3, r5
 800f2c6:	0022      	movs	r2, r4
 800f2c8:	f7f1 f8bc 	bl	8000444 <__aeabi_dcmpeq>
 800f2cc:	4243      	negs	r3, r0
 800f2ce:	4158      	adcs	r0, r3
 800f2d0:	9b04      	ldr	r3, [sp, #16]
 800f2d2:	1a1b      	subs	r3, r3, r0
 800f2d4:	9304      	str	r3, [sp, #16]
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	9315      	str	r3, [sp, #84]	@ 0x54
 800f2da:	9b04      	ldr	r3, [sp, #16]
 800f2dc:	2b16      	cmp	r3, #22
 800f2de:	d810      	bhi.n	800f302 <_dtoa_r+0x196>
 800f2e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f2e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f2e4:	9a04      	ldr	r2, [sp, #16]
 800f2e6:	4b83      	ldr	r3, [pc, #524]	@ (800f4f4 <_dtoa_r+0x388>)
 800f2e8:	00d2      	lsls	r2, r2, #3
 800f2ea:	189b      	adds	r3, r3, r2
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	f7f1 f8ae 	bl	8000450 <__aeabi_dcmplt>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d047      	beq.n	800f388 <_dtoa_r+0x21c>
 800f2f8:	9b04      	ldr	r3, [sp, #16]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	9304      	str	r3, [sp, #16]
 800f2fe:	2300      	movs	r3, #0
 800f300:	9315      	str	r3, [sp, #84]	@ 0x54
 800f302:	2200      	movs	r2, #0
 800f304:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f306:	9206      	str	r2, [sp, #24]
 800f308:	1bdb      	subs	r3, r3, r7
 800f30a:	1e5a      	subs	r2, r3, #1
 800f30c:	d53e      	bpl.n	800f38c <_dtoa_r+0x220>
 800f30e:	2201      	movs	r2, #1
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	9306      	str	r3, [sp, #24]
 800f314:	2300      	movs	r3, #0
 800f316:	930d      	str	r3, [sp, #52]	@ 0x34
 800f318:	9b04      	ldr	r3, [sp, #16]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	db38      	blt.n	800f390 <_dtoa_r+0x224>
 800f31e:	9a04      	ldr	r2, [sp, #16]
 800f320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f322:	4694      	mov	ip, r2
 800f324:	4463      	add	r3, ip
 800f326:	930d      	str	r3, [sp, #52]	@ 0x34
 800f328:	2300      	movs	r3, #0
 800f32a:	9214      	str	r2, [sp, #80]	@ 0x50
 800f32c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f32e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f330:	2401      	movs	r4, #1
 800f332:	2b09      	cmp	r3, #9
 800f334:	d862      	bhi.n	800f3fc <_dtoa_r+0x290>
 800f336:	2b05      	cmp	r3, #5
 800f338:	dd02      	ble.n	800f340 <_dtoa_r+0x1d4>
 800f33a:	2400      	movs	r4, #0
 800f33c:	3b04      	subs	r3, #4
 800f33e:	9322      	str	r3, [sp, #136]	@ 0x88
 800f340:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f342:	1e98      	subs	r0, r3, #2
 800f344:	2803      	cmp	r0, #3
 800f346:	d863      	bhi.n	800f410 <_dtoa_r+0x2a4>
 800f348:	f7f0 fee2 	bl	8000110 <__gnu_thumb1_case_uqi>
 800f34c:	2b385654 	.word	0x2b385654
 800f350:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f352:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800f354:	18f6      	adds	r6, r6, r3
 800f356:	4b68      	ldr	r3, [pc, #416]	@ (800f4f8 <_dtoa_r+0x38c>)
 800f358:	18f2      	adds	r2, r6, r3
 800f35a:	2a20      	cmp	r2, #32
 800f35c:	dd0f      	ble.n	800f37e <_dtoa_r+0x212>
 800f35e:	2340      	movs	r3, #64	@ 0x40
 800f360:	1a9b      	subs	r3, r3, r2
 800f362:	409f      	lsls	r7, r3
 800f364:	4b65      	ldr	r3, [pc, #404]	@ (800f4fc <_dtoa_r+0x390>)
 800f366:	0038      	movs	r0, r7
 800f368:	18f3      	adds	r3, r6, r3
 800f36a:	40dc      	lsrs	r4, r3
 800f36c:	4320      	orrs	r0, r4
 800f36e:	f7f3 f881 	bl	8002474 <__aeabi_ui2d>
 800f372:	2201      	movs	r2, #1
 800f374:	4b62      	ldr	r3, [pc, #392]	@ (800f500 <_dtoa_r+0x394>)
 800f376:	1e77      	subs	r7, r6, #1
 800f378:	18cb      	adds	r3, r1, r3
 800f37a:	9218      	str	r2, [sp, #96]	@ 0x60
 800f37c:	e776      	b.n	800f26c <_dtoa_r+0x100>
 800f37e:	2320      	movs	r3, #32
 800f380:	0020      	movs	r0, r4
 800f382:	1a9b      	subs	r3, r3, r2
 800f384:	4098      	lsls	r0, r3
 800f386:	e7f2      	b.n	800f36e <_dtoa_r+0x202>
 800f388:	9015      	str	r0, [sp, #84]	@ 0x54
 800f38a:	e7ba      	b.n	800f302 <_dtoa_r+0x196>
 800f38c:	920d      	str	r2, [sp, #52]	@ 0x34
 800f38e:	e7c3      	b.n	800f318 <_dtoa_r+0x1ac>
 800f390:	9b06      	ldr	r3, [sp, #24]
 800f392:	9a04      	ldr	r2, [sp, #16]
 800f394:	1a9b      	subs	r3, r3, r2
 800f396:	9306      	str	r3, [sp, #24]
 800f398:	4253      	negs	r3, r2
 800f39a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f39c:	2300      	movs	r3, #0
 800f39e:	9314      	str	r3, [sp, #80]	@ 0x50
 800f3a0:	e7c5      	b.n	800f32e <_dtoa_r+0x1c2>
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f3a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3a8:	4694      	mov	ip, r2
 800f3aa:	9b04      	ldr	r3, [sp, #16]
 800f3ac:	4463      	add	r3, ip
 800f3ae:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	dc08      	bgt.n	800f3ca <_dtoa_r+0x25e>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e006      	b.n	800f3ca <_dtoa_r+0x25e>
 800f3bc:	2301      	movs	r3, #1
 800f3be:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	dd28      	ble.n	800f418 <_dtoa_r+0x2ac>
 800f3c6:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3ca:	9a03      	ldr	r2, [sp, #12]
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	69d0      	ldr	r0, [r2, #28]
 800f3d0:	2204      	movs	r2, #4
 800f3d2:	0015      	movs	r5, r2
 800f3d4:	3514      	adds	r5, #20
 800f3d6:	429d      	cmp	r5, r3
 800f3d8:	d923      	bls.n	800f422 <_dtoa_r+0x2b6>
 800f3da:	6041      	str	r1, [r0, #4]
 800f3dc:	9803      	ldr	r0, [sp, #12]
 800f3de:	f001 f927 	bl	8010630 <_Balloc>
 800f3e2:	9008      	str	r0, [sp, #32]
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d11f      	bne.n	800f428 <_dtoa_r+0x2bc>
 800f3e8:	21b0      	movs	r1, #176	@ 0xb0
 800f3ea:	4b46      	ldr	r3, [pc, #280]	@ (800f504 <_dtoa_r+0x398>)
 800f3ec:	4831      	ldr	r0, [pc, #196]	@ (800f4b4 <_dtoa_r+0x348>)
 800f3ee:	9a08      	ldr	r2, [sp, #32]
 800f3f0:	31ff      	adds	r1, #255	@ 0xff
 800f3f2:	e6d0      	b.n	800f196 <_dtoa_r+0x2a>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	e7e2      	b.n	800f3be <_dtoa_r+0x252>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	e7d3      	b.n	800f3a4 <_dtoa_r+0x238>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	9410      	str	r4, [sp, #64]	@ 0x40
 800f400:	9322      	str	r3, [sp, #136]	@ 0x88
 800f402:	3b01      	subs	r3, #1
 800f404:	2200      	movs	r2, #0
 800f406:	930e      	str	r3, [sp, #56]	@ 0x38
 800f408:	9309      	str	r3, [sp, #36]	@ 0x24
 800f40a:	3313      	adds	r3, #19
 800f40c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800f40e:	e7dc      	b.n	800f3ca <_dtoa_r+0x25e>
 800f410:	2301      	movs	r3, #1
 800f412:	9310      	str	r3, [sp, #64]	@ 0x40
 800f414:	3b02      	subs	r3, #2
 800f416:	e7f5      	b.n	800f404 <_dtoa_r+0x298>
 800f418:	2301      	movs	r3, #1
 800f41a:	001a      	movs	r2, r3
 800f41c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f420:	e7f4      	b.n	800f40c <_dtoa_r+0x2a0>
 800f422:	3101      	adds	r1, #1
 800f424:	0052      	lsls	r2, r2, #1
 800f426:	e7d4      	b.n	800f3d2 <_dtoa_r+0x266>
 800f428:	9b03      	ldr	r3, [sp, #12]
 800f42a:	9a08      	ldr	r2, [sp, #32]
 800f42c:	69db      	ldr	r3, [r3, #28]
 800f42e:	601a      	str	r2, [r3, #0]
 800f430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f432:	2b0e      	cmp	r3, #14
 800f434:	d900      	bls.n	800f438 <_dtoa_r+0x2cc>
 800f436:	e0d6      	b.n	800f5e6 <_dtoa_r+0x47a>
 800f438:	2c00      	cmp	r4, #0
 800f43a:	d100      	bne.n	800f43e <_dtoa_r+0x2d2>
 800f43c:	e0d3      	b.n	800f5e6 <_dtoa_r+0x47a>
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	dd63      	ble.n	800f50c <_dtoa_r+0x3a0>
 800f444:	210f      	movs	r1, #15
 800f446:	9a04      	ldr	r2, [sp, #16]
 800f448:	4b2a      	ldr	r3, [pc, #168]	@ (800f4f4 <_dtoa_r+0x388>)
 800f44a:	400a      	ands	r2, r1
 800f44c:	00d2      	lsls	r2, r2, #3
 800f44e:	189b      	adds	r3, r3, r2
 800f450:	681e      	ldr	r6, [r3, #0]
 800f452:	685f      	ldr	r7, [r3, #4]
 800f454:	9b04      	ldr	r3, [sp, #16]
 800f456:	2402      	movs	r4, #2
 800f458:	111d      	asrs	r5, r3, #4
 800f45a:	05db      	lsls	r3, r3, #23
 800f45c:	d50a      	bpl.n	800f474 <_dtoa_r+0x308>
 800f45e:	4b2a      	ldr	r3, [pc, #168]	@ (800f508 <_dtoa_r+0x39c>)
 800f460:	400d      	ands	r5, r1
 800f462:	6a1a      	ldr	r2, [r3, #32]
 800f464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f466:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f468:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f46a:	f7f1 fc4d 	bl	8000d08 <__aeabi_ddiv>
 800f46e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f470:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f472:	3401      	adds	r4, #1
 800f474:	4b24      	ldr	r3, [pc, #144]	@ (800f508 <_dtoa_r+0x39c>)
 800f476:	930c      	str	r3, [sp, #48]	@ 0x30
 800f478:	2d00      	cmp	r5, #0
 800f47a:	d108      	bne.n	800f48e <_dtoa_r+0x322>
 800f47c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f47e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f480:	0032      	movs	r2, r6
 800f482:	003b      	movs	r3, r7
 800f484:	f7f1 fc40 	bl	8000d08 <__aeabi_ddiv>
 800f488:	900a      	str	r0, [sp, #40]	@ 0x28
 800f48a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f48c:	e059      	b.n	800f542 <_dtoa_r+0x3d6>
 800f48e:	2301      	movs	r3, #1
 800f490:	421d      	tst	r5, r3
 800f492:	d009      	beq.n	800f4a8 <_dtoa_r+0x33c>
 800f494:	18e4      	adds	r4, r4, r3
 800f496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f498:	0030      	movs	r0, r6
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	0039      	movs	r1, r7
 800f4a0:	f7f2 f86c 	bl	800157c <__aeabi_dmul>
 800f4a4:	0006      	movs	r6, r0
 800f4a6:	000f      	movs	r7, r1
 800f4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4aa:	106d      	asrs	r5, r5, #1
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	e7e2      	b.n	800f476 <_dtoa_r+0x30a>
 800f4b0:	08011d93 	.word	0x08011d93
 800f4b4:	08011daa 	.word	0x08011daa
 800f4b8:	7ff00000 	.word	0x7ff00000
 800f4bc:	0000270f 	.word	0x0000270f
 800f4c0:	08011d8f 	.word	0x08011d8f
 800f4c4:	08011d92 	.word	0x08011d92
 800f4c8:	08011d5b 	.word	0x08011d5b
 800f4cc:	08011d5a 	.word	0x08011d5a
 800f4d0:	3ff00000 	.word	0x3ff00000
 800f4d4:	fffffc01 	.word	0xfffffc01
 800f4d8:	3ff80000 	.word	0x3ff80000
 800f4dc:	636f4361 	.word	0x636f4361
 800f4e0:	3fd287a7 	.word	0x3fd287a7
 800f4e4:	8b60c8b3 	.word	0x8b60c8b3
 800f4e8:	3fc68a28 	.word	0x3fc68a28
 800f4ec:	509f79fb 	.word	0x509f79fb
 800f4f0:	3fd34413 	.word	0x3fd34413
 800f4f4:	08011fa8 	.word	0x08011fa8
 800f4f8:	00000432 	.word	0x00000432
 800f4fc:	00000412 	.word	0x00000412
 800f500:	fe100000 	.word	0xfe100000
 800f504:	08011e02 	.word	0x08011e02
 800f508:	08011f80 	.word	0x08011f80
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	2402      	movs	r4, #2
 800f510:	2b00      	cmp	r3, #0
 800f512:	d016      	beq.n	800f542 <_dtoa_r+0x3d6>
 800f514:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f516:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f518:	220f      	movs	r2, #15
 800f51a:	425d      	negs	r5, r3
 800f51c:	402a      	ands	r2, r5
 800f51e:	4bd5      	ldr	r3, [pc, #852]	@ (800f874 <_dtoa_r+0x708>)
 800f520:	00d2      	lsls	r2, r2, #3
 800f522:	189b      	adds	r3, r3, r2
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	f7f2 f828 	bl	800157c <__aeabi_dmul>
 800f52c:	2701      	movs	r7, #1
 800f52e:	2300      	movs	r3, #0
 800f530:	900a      	str	r0, [sp, #40]	@ 0x28
 800f532:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f534:	4ed0      	ldr	r6, [pc, #832]	@ (800f878 <_dtoa_r+0x70c>)
 800f536:	112d      	asrs	r5, r5, #4
 800f538:	2d00      	cmp	r5, #0
 800f53a:	d000      	beq.n	800f53e <_dtoa_r+0x3d2>
 800f53c:	e095      	b.n	800f66a <_dtoa_r+0x4fe>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1a2      	bne.n	800f488 <_dtoa_r+0x31c>
 800f542:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f544:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f546:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d100      	bne.n	800f54e <_dtoa_r+0x3e2>
 800f54c:	e098      	b.n	800f680 <_dtoa_r+0x514>
 800f54e:	2200      	movs	r2, #0
 800f550:	0030      	movs	r0, r6
 800f552:	0039      	movs	r1, r7
 800f554:	4bc9      	ldr	r3, [pc, #804]	@ (800f87c <_dtoa_r+0x710>)
 800f556:	f7f0 ff7b 	bl	8000450 <__aeabi_dcmplt>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	d100      	bne.n	800f560 <_dtoa_r+0x3f4>
 800f55e:	e08f      	b.n	800f680 <_dtoa_r+0x514>
 800f560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f562:	2b00      	cmp	r3, #0
 800f564:	d100      	bne.n	800f568 <_dtoa_r+0x3fc>
 800f566:	e08b      	b.n	800f680 <_dtoa_r+0x514>
 800f568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	dd37      	ble.n	800f5de <_dtoa_r+0x472>
 800f56e:	9b04      	ldr	r3, [sp, #16]
 800f570:	2200      	movs	r2, #0
 800f572:	3b01      	subs	r3, #1
 800f574:	930c      	str	r3, [sp, #48]	@ 0x30
 800f576:	0030      	movs	r0, r6
 800f578:	4bc1      	ldr	r3, [pc, #772]	@ (800f880 <_dtoa_r+0x714>)
 800f57a:	0039      	movs	r1, r7
 800f57c:	f7f1 fffe 	bl	800157c <__aeabi_dmul>
 800f580:	900a      	str	r0, [sp, #40]	@ 0x28
 800f582:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f586:	3401      	adds	r4, #1
 800f588:	0020      	movs	r0, r4
 800f58a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f58c:	f7f2 ff44 	bl	8002418 <__aeabi_i2d>
 800f590:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f594:	f7f1 fff2 	bl	800157c <__aeabi_dmul>
 800f598:	4bba      	ldr	r3, [pc, #744]	@ (800f884 <_dtoa_r+0x718>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	f7f0 ffee 	bl	800057c <__aeabi_dadd>
 800f5a0:	4bb9      	ldr	r3, [pc, #740]	@ (800f888 <_dtoa_r+0x71c>)
 800f5a2:	0006      	movs	r6, r0
 800f5a4:	18cf      	adds	r7, r1, r3
 800f5a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d16d      	bne.n	800f688 <_dtoa_r+0x51c>
 800f5ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f5ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	4bb6      	ldr	r3, [pc, #728]	@ (800f88c <_dtoa_r+0x720>)
 800f5b4:	f7f2 fac8 	bl	8001b48 <__aeabi_dsub>
 800f5b8:	0032      	movs	r2, r6
 800f5ba:	003b      	movs	r3, r7
 800f5bc:	0004      	movs	r4, r0
 800f5be:	000d      	movs	r5, r1
 800f5c0:	f7f0 ff5a 	bl	8000478 <__aeabi_dcmpgt>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d000      	beq.n	800f5ca <_dtoa_r+0x45e>
 800f5c8:	e2b6      	b.n	800fb38 <_dtoa_r+0x9cc>
 800f5ca:	2180      	movs	r1, #128	@ 0x80
 800f5cc:	0609      	lsls	r1, r1, #24
 800f5ce:	187b      	adds	r3, r7, r1
 800f5d0:	0032      	movs	r2, r6
 800f5d2:	0020      	movs	r0, r4
 800f5d4:	0029      	movs	r1, r5
 800f5d6:	f7f0 ff3b 	bl	8000450 <__aeabi_dcmplt>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d128      	bne.n	800f630 <_dtoa_r+0x4c4>
 800f5de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5e0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f5e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5e4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f5e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	da00      	bge.n	800f5ee <_dtoa_r+0x482>
 800f5ec:	e174      	b.n	800f8d8 <_dtoa_r+0x76c>
 800f5ee:	9a04      	ldr	r2, [sp, #16]
 800f5f0:	2a0e      	cmp	r2, #14
 800f5f2:	dd00      	ble.n	800f5f6 <_dtoa_r+0x48a>
 800f5f4:	e170      	b.n	800f8d8 <_dtoa_r+0x76c>
 800f5f6:	4b9f      	ldr	r3, [pc, #636]	@ (800f874 <_dtoa_r+0x708>)
 800f5f8:	00d2      	lsls	r2, r2, #3
 800f5fa:	189b      	adds	r3, r3, r2
 800f5fc:	685c      	ldr	r4, [r3, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	9306      	str	r3, [sp, #24]
 800f602:	9407      	str	r4, [sp, #28]
 800f604:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f606:	2b00      	cmp	r3, #0
 800f608:	db00      	blt.n	800f60c <_dtoa_r+0x4a0>
 800f60a:	e0e7      	b.n	800f7dc <_dtoa_r+0x670>
 800f60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f60e:	2b00      	cmp	r3, #0
 800f610:	dd00      	ble.n	800f614 <_dtoa_r+0x4a8>
 800f612:	e0e3      	b.n	800f7dc <_dtoa_r+0x670>
 800f614:	d10c      	bne.n	800f630 <_dtoa_r+0x4c4>
 800f616:	9806      	ldr	r0, [sp, #24]
 800f618:	9907      	ldr	r1, [sp, #28]
 800f61a:	2200      	movs	r2, #0
 800f61c:	4b9b      	ldr	r3, [pc, #620]	@ (800f88c <_dtoa_r+0x720>)
 800f61e:	f7f1 ffad 	bl	800157c <__aeabi_dmul>
 800f622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f626:	f7f0 ff31 	bl	800048c <__aeabi_dcmpge>
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d100      	bne.n	800f630 <_dtoa_r+0x4c4>
 800f62e:	e286      	b.n	800fb3e <_dtoa_r+0x9d2>
 800f630:	2600      	movs	r6, #0
 800f632:	0037      	movs	r7, r6
 800f634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f636:	9c08      	ldr	r4, [sp, #32]
 800f638:	43db      	mvns	r3, r3
 800f63a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f63c:	9704      	str	r7, [sp, #16]
 800f63e:	2700      	movs	r7, #0
 800f640:	0031      	movs	r1, r6
 800f642:	9803      	ldr	r0, [sp, #12]
 800f644:	f001 f838 	bl	80106b8 <_Bfree>
 800f648:	9b04      	ldr	r3, [sp, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d100      	bne.n	800f650 <_dtoa_r+0x4e4>
 800f64e:	e0bb      	b.n	800f7c8 <_dtoa_r+0x65c>
 800f650:	2f00      	cmp	r7, #0
 800f652:	d005      	beq.n	800f660 <_dtoa_r+0x4f4>
 800f654:	429f      	cmp	r7, r3
 800f656:	d003      	beq.n	800f660 <_dtoa_r+0x4f4>
 800f658:	0039      	movs	r1, r7
 800f65a:	9803      	ldr	r0, [sp, #12]
 800f65c:	f001 f82c 	bl	80106b8 <_Bfree>
 800f660:	9904      	ldr	r1, [sp, #16]
 800f662:	9803      	ldr	r0, [sp, #12]
 800f664:	f001 f828 	bl	80106b8 <_Bfree>
 800f668:	e0ae      	b.n	800f7c8 <_dtoa_r+0x65c>
 800f66a:	423d      	tst	r5, r7
 800f66c:	d005      	beq.n	800f67a <_dtoa_r+0x50e>
 800f66e:	6832      	ldr	r2, [r6, #0]
 800f670:	6873      	ldr	r3, [r6, #4]
 800f672:	f7f1 ff83 	bl	800157c <__aeabi_dmul>
 800f676:	003b      	movs	r3, r7
 800f678:	3401      	adds	r4, #1
 800f67a:	106d      	asrs	r5, r5, #1
 800f67c:	3608      	adds	r6, #8
 800f67e:	e75b      	b.n	800f538 <_dtoa_r+0x3cc>
 800f680:	9b04      	ldr	r3, [sp, #16]
 800f682:	930c      	str	r3, [sp, #48]	@ 0x30
 800f684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f686:	e77f      	b.n	800f588 <_dtoa_r+0x41c>
 800f688:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f68a:	4b7a      	ldr	r3, [pc, #488]	@ (800f874 <_dtoa_r+0x708>)
 800f68c:	3a01      	subs	r2, #1
 800f68e:	00d2      	lsls	r2, r2, #3
 800f690:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f692:	189b      	adds	r3, r3, r2
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2900      	cmp	r1, #0
 800f69a:	d04c      	beq.n	800f736 <_dtoa_r+0x5ca>
 800f69c:	2000      	movs	r0, #0
 800f69e:	497c      	ldr	r1, [pc, #496]	@ (800f890 <_dtoa_r+0x724>)
 800f6a0:	f7f1 fb32 	bl	8000d08 <__aeabi_ddiv>
 800f6a4:	0032      	movs	r2, r6
 800f6a6:	003b      	movs	r3, r7
 800f6a8:	f7f2 fa4e 	bl	8001b48 <__aeabi_dsub>
 800f6ac:	9a08      	ldr	r2, [sp, #32]
 800f6ae:	0006      	movs	r6, r0
 800f6b0:	4694      	mov	ip, r2
 800f6b2:	000f      	movs	r7, r1
 800f6b4:	9b08      	ldr	r3, [sp, #32]
 800f6b6:	9316      	str	r3, [sp, #88]	@ 0x58
 800f6b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6ba:	4463      	add	r3, ip
 800f6bc:	9311      	str	r3, [sp, #68]	@ 0x44
 800f6be:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f6c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6c2:	f7f2 fe6d 	bl	80023a0 <__aeabi_d2iz>
 800f6c6:	0005      	movs	r5, r0
 800f6c8:	f7f2 fea6 	bl	8002418 <__aeabi_i2d>
 800f6cc:	0002      	movs	r2, r0
 800f6ce:	000b      	movs	r3, r1
 800f6d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f6d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f6d4:	f7f2 fa38 	bl	8001b48 <__aeabi_dsub>
 800f6d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f6da:	3530      	adds	r5, #48	@ 0x30
 800f6dc:	1c5c      	adds	r4, r3, #1
 800f6de:	701d      	strb	r5, [r3, #0]
 800f6e0:	0032      	movs	r2, r6
 800f6e2:	003b      	movs	r3, r7
 800f6e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f6e6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f6e8:	f7f0 feb2 	bl	8000450 <__aeabi_dcmplt>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d16b      	bne.n	800f7c8 <_dtoa_r+0x65c>
 800f6f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	4961      	ldr	r1, [pc, #388]	@ (800f87c <_dtoa_r+0x710>)
 800f6f8:	f7f2 fa26 	bl	8001b48 <__aeabi_dsub>
 800f6fc:	0032      	movs	r2, r6
 800f6fe:	003b      	movs	r3, r7
 800f700:	f7f0 fea6 	bl	8000450 <__aeabi_dcmplt>
 800f704:	2800      	cmp	r0, #0
 800f706:	d000      	beq.n	800f70a <_dtoa_r+0x59e>
 800f708:	e0c6      	b.n	800f898 <_dtoa_r+0x72c>
 800f70a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f70c:	42a3      	cmp	r3, r4
 800f70e:	d100      	bne.n	800f712 <_dtoa_r+0x5a6>
 800f710:	e765      	b.n	800f5de <_dtoa_r+0x472>
 800f712:	2200      	movs	r2, #0
 800f714:	0030      	movs	r0, r6
 800f716:	0039      	movs	r1, r7
 800f718:	4b59      	ldr	r3, [pc, #356]	@ (800f880 <_dtoa_r+0x714>)
 800f71a:	f7f1 ff2f 	bl	800157c <__aeabi_dmul>
 800f71e:	2200      	movs	r2, #0
 800f720:	0006      	movs	r6, r0
 800f722:	000f      	movs	r7, r1
 800f724:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f726:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f728:	4b55      	ldr	r3, [pc, #340]	@ (800f880 <_dtoa_r+0x714>)
 800f72a:	f7f1 ff27 	bl	800157c <__aeabi_dmul>
 800f72e:	9416      	str	r4, [sp, #88]	@ 0x58
 800f730:	900a      	str	r0, [sp, #40]	@ 0x28
 800f732:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f734:	e7c3      	b.n	800f6be <_dtoa_r+0x552>
 800f736:	0030      	movs	r0, r6
 800f738:	0039      	movs	r1, r7
 800f73a:	f7f1 ff1f 	bl	800157c <__aeabi_dmul>
 800f73e:	9d08      	ldr	r5, [sp, #32]
 800f740:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f742:	002b      	movs	r3, r5
 800f744:	4694      	mov	ip, r2
 800f746:	9016      	str	r0, [sp, #88]	@ 0x58
 800f748:	9117      	str	r1, [sp, #92]	@ 0x5c
 800f74a:	4463      	add	r3, ip
 800f74c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f74e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f752:	f7f2 fe25 	bl	80023a0 <__aeabi_d2iz>
 800f756:	0004      	movs	r4, r0
 800f758:	f7f2 fe5e 	bl	8002418 <__aeabi_i2d>
 800f75c:	000b      	movs	r3, r1
 800f75e:	0002      	movs	r2, r0
 800f760:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f762:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f764:	f7f2 f9f0 	bl	8001b48 <__aeabi_dsub>
 800f768:	3430      	adds	r4, #48	@ 0x30
 800f76a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f76c:	702c      	strb	r4, [r5, #0]
 800f76e:	3501      	adds	r5, #1
 800f770:	0006      	movs	r6, r0
 800f772:	000f      	movs	r7, r1
 800f774:	42ab      	cmp	r3, r5
 800f776:	d12a      	bne.n	800f7ce <_dtoa_r+0x662>
 800f778:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f77a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800f77c:	9b08      	ldr	r3, [sp, #32]
 800f77e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800f780:	469c      	mov	ip, r3
 800f782:	2200      	movs	r2, #0
 800f784:	4b42      	ldr	r3, [pc, #264]	@ (800f890 <_dtoa_r+0x724>)
 800f786:	4464      	add	r4, ip
 800f788:	f7f0 fef8 	bl	800057c <__aeabi_dadd>
 800f78c:	0002      	movs	r2, r0
 800f78e:	000b      	movs	r3, r1
 800f790:	0030      	movs	r0, r6
 800f792:	0039      	movs	r1, r7
 800f794:	f7f0 fe70 	bl	8000478 <__aeabi_dcmpgt>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d000      	beq.n	800f79e <_dtoa_r+0x632>
 800f79c:	e07c      	b.n	800f898 <_dtoa_r+0x72c>
 800f79e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f7a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	493a      	ldr	r1, [pc, #232]	@ (800f890 <_dtoa_r+0x724>)
 800f7a6:	f7f2 f9cf 	bl	8001b48 <__aeabi_dsub>
 800f7aa:	0002      	movs	r2, r0
 800f7ac:	000b      	movs	r3, r1
 800f7ae:	0030      	movs	r0, r6
 800f7b0:	0039      	movs	r1, r7
 800f7b2:	f7f0 fe4d 	bl	8000450 <__aeabi_dcmplt>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d100      	bne.n	800f7bc <_dtoa_r+0x650>
 800f7ba:	e710      	b.n	800f5de <_dtoa_r+0x472>
 800f7bc:	0023      	movs	r3, r4
 800f7be:	3c01      	subs	r4, #1
 800f7c0:	7822      	ldrb	r2, [r4, #0]
 800f7c2:	2a30      	cmp	r2, #48	@ 0x30
 800f7c4:	d0fa      	beq.n	800f7bc <_dtoa_r+0x650>
 800f7c6:	001c      	movs	r4, r3
 800f7c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7ca:	9304      	str	r3, [sp, #16]
 800f7cc:	e042      	b.n	800f854 <_dtoa_r+0x6e8>
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4b2b      	ldr	r3, [pc, #172]	@ (800f880 <_dtoa_r+0x714>)
 800f7d2:	f7f1 fed3 	bl	800157c <__aeabi_dmul>
 800f7d6:	900a      	str	r0, [sp, #40]	@ 0x28
 800f7d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f7da:	e7b8      	b.n	800f74e <_dtoa_r+0x5e2>
 800f7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7de:	9d08      	ldr	r5, [sp, #32]
 800f7e0:	3b01      	subs	r3, #1
 800f7e2:	195b      	adds	r3, r3, r5
 800f7e4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f7e6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f7e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7ea:	9a06      	ldr	r2, [sp, #24]
 800f7ec:	9b07      	ldr	r3, [sp, #28]
 800f7ee:	0030      	movs	r0, r6
 800f7f0:	0039      	movs	r1, r7
 800f7f2:	f7f1 fa89 	bl	8000d08 <__aeabi_ddiv>
 800f7f6:	f7f2 fdd3 	bl	80023a0 <__aeabi_d2iz>
 800f7fa:	9009      	str	r0, [sp, #36]	@ 0x24
 800f7fc:	f7f2 fe0c 	bl	8002418 <__aeabi_i2d>
 800f800:	9a06      	ldr	r2, [sp, #24]
 800f802:	9b07      	ldr	r3, [sp, #28]
 800f804:	f7f1 feba 	bl	800157c <__aeabi_dmul>
 800f808:	0002      	movs	r2, r0
 800f80a:	000b      	movs	r3, r1
 800f80c:	0030      	movs	r0, r6
 800f80e:	0039      	movs	r1, r7
 800f810:	f7f2 f99a 	bl	8001b48 <__aeabi_dsub>
 800f814:	002b      	movs	r3, r5
 800f816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f818:	3501      	adds	r5, #1
 800f81a:	3230      	adds	r2, #48	@ 0x30
 800f81c:	701a      	strb	r2, [r3, #0]
 800f81e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f820:	002c      	movs	r4, r5
 800f822:	429a      	cmp	r2, r3
 800f824:	d14b      	bne.n	800f8be <_dtoa_r+0x752>
 800f826:	0002      	movs	r2, r0
 800f828:	000b      	movs	r3, r1
 800f82a:	f7f0 fea7 	bl	800057c <__aeabi_dadd>
 800f82e:	9a06      	ldr	r2, [sp, #24]
 800f830:	9b07      	ldr	r3, [sp, #28]
 800f832:	0006      	movs	r6, r0
 800f834:	000f      	movs	r7, r1
 800f836:	f7f0 fe1f 	bl	8000478 <__aeabi_dcmpgt>
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d12a      	bne.n	800f894 <_dtoa_r+0x728>
 800f83e:	9a06      	ldr	r2, [sp, #24]
 800f840:	9b07      	ldr	r3, [sp, #28]
 800f842:	0030      	movs	r0, r6
 800f844:	0039      	movs	r1, r7
 800f846:	f7f0 fdfd 	bl	8000444 <__aeabi_dcmpeq>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d002      	beq.n	800f854 <_dtoa_r+0x6e8>
 800f84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f850:	07dd      	lsls	r5, r3, #31
 800f852:	d41f      	bmi.n	800f894 <_dtoa_r+0x728>
 800f854:	9905      	ldr	r1, [sp, #20]
 800f856:	9803      	ldr	r0, [sp, #12]
 800f858:	f000 ff2e 	bl	80106b8 <_Bfree>
 800f85c:	2300      	movs	r3, #0
 800f85e:	7023      	strb	r3, [r4, #0]
 800f860:	9b04      	ldr	r3, [sp, #16]
 800f862:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f864:	3301      	adds	r3, #1
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d100      	bne.n	800f870 <_dtoa_r+0x704>
 800f86e:	e4c7      	b.n	800f200 <_dtoa_r+0x94>
 800f870:	601c      	str	r4, [r3, #0]
 800f872:	e4c5      	b.n	800f200 <_dtoa_r+0x94>
 800f874:	08011fa8 	.word	0x08011fa8
 800f878:	08011f80 	.word	0x08011f80
 800f87c:	3ff00000 	.word	0x3ff00000
 800f880:	40240000 	.word	0x40240000
 800f884:	401c0000 	.word	0x401c0000
 800f888:	fcc00000 	.word	0xfcc00000
 800f88c:	40140000 	.word	0x40140000
 800f890:	3fe00000 	.word	0x3fe00000
 800f894:	9b04      	ldr	r3, [sp, #16]
 800f896:	930c      	str	r3, [sp, #48]	@ 0x30
 800f898:	0023      	movs	r3, r4
 800f89a:	001c      	movs	r4, r3
 800f89c:	3b01      	subs	r3, #1
 800f89e:	781a      	ldrb	r2, [r3, #0]
 800f8a0:	2a39      	cmp	r2, #57	@ 0x39
 800f8a2:	d108      	bne.n	800f8b6 <_dtoa_r+0x74a>
 800f8a4:	9a08      	ldr	r2, [sp, #32]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d1f7      	bne.n	800f89a <_dtoa_r+0x72e>
 800f8aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f8ac:	9908      	ldr	r1, [sp, #32]
 800f8ae:	3201      	adds	r2, #1
 800f8b0:	920c      	str	r2, [sp, #48]	@ 0x30
 800f8b2:	2230      	movs	r2, #48	@ 0x30
 800f8b4:	700a      	strb	r2, [r1, #0]
 800f8b6:	781a      	ldrb	r2, [r3, #0]
 800f8b8:	3201      	adds	r2, #1
 800f8ba:	701a      	strb	r2, [r3, #0]
 800f8bc:	e784      	b.n	800f7c8 <_dtoa_r+0x65c>
 800f8be:	2200      	movs	r2, #0
 800f8c0:	4bc6      	ldr	r3, [pc, #792]	@ (800fbdc <_dtoa_r+0xa70>)
 800f8c2:	f7f1 fe5b 	bl	800157c <__aeabi_dmul>
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	0006      	movs	r6, r0
 800f8cc:	000f      	movs	r7, r1
 800f8ce:	f7f0 fdb9 	bl	8000444 <__aeabi_dcmpeq>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	d089      	beq.n	800f7ea <_dtoa_r+0x67e>
 800f8d6:	e7bd      	b.n	800f854 <_dtoa_r+0x6e8>
 800f8d8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800f8da:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800f8dc:	9c06      	ldr	r4, [sp, #24]
 800f8de:	2f00      	cmp	r7, #0
 800f8e0:	d014      	beq.n	800f90c <_dtoa_r+0x7a0>
 800f8e2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f8e4:	2a01      	cmp	r2, #1
 800f8e6:	dd00      	ble.n	800f8ea <_dtoa_r+0x77e>
 800f8e8:	e0e4      	b.n	800fab4 <_dtoa_r+0x948>
 800f8ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f8ec:	2a00      	cmp	r2, #0
 800f8ee:	d100      	bne.n	800f8f2 <_dtoa_r+0x786>
 800f8f0:	e0da      	b.n	800faa8 <_dtoa_r+0x93c>
 800f8f2:	4abb      	ldr	r2, [pc, #748]	@ (800fbe0 <_dtoa_r+0xa74>)
 800f8f4:	189b      	adds	r3, r3, r2
 800f8f6:	9a06      	ldr	r2, [sp, #24]
 800f8f8:	2101      	movs	r1, #1
 800f8fa:	18d2      	adds	r2, r2, r3
 800f8fc:	9206      	str	r2, [sp, #24]
 800f8fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f900:	9803      	ldr	r0, [sp, #12]
 800f902:	18d3      	adds	r3, r2, r3
 800f904:	930d      	str	r3, [sp, #52]	@ 0x34
 800f906:	f000 ffdb 	bl	80108c0 <__i2b>
 800f90a:	0007      	movs	r7, r0
 800f90c:	2c00      	cmp	r4, #0
 800f90e:	d00e      	beq.n	800f92e <_dtoa_r+0x7c2>
 800f910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f912:	2b00      	cmp	r3, #0
 800f914:	dd0b      	ble.n	800f92e <_dtoa_r+0x7c2>
 800f916:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f918:	0023      	movs	r3, r4
 800f91a:	4294      	cmp	r4, r2
 800f91c:	dd00      	ble.n	800f920 <_dtoa_r+0x7b4>
 800f91e:	0013      	movs	r3, r2
 800f920:	9a06      	ldr	r2, [sp, #24]
 800f922:	1ae4      	subs	r4, r4, r3
 800f924:	1ad2      	subs	r2, r2, r3
 800f926:	9206      	str	r2, [sp, #24]
 800f928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f92e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d021      	beq.n	800f978 <_dtoa_r+0x80c>
 800f934:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f936:	2b00      	cmp	r3, #0
 800f938:	d100      	bne.n	800f93c <_dtoa_r+0x7d0>
 800f93a:	e0d3      	b.n	800fae4 <_dtoa_r+0x978>
 800f93c:	9e05      	ldr	r6, [sp, #20]
 800f93e:	2d00      	cmp	r5, #0
 800f940:	d014      	beq.n	800f96c <_dtoa_r+0x800>
 800f942:	0039      	movs	r1, r7
 800f944:	002a      	movs	r2, r5
 800f946:	9803      	ldr	r0, [sp, #12]
 800f948:	f001 f87c 	bl	8010a44 <__pow5mult>
 800f94c:	9a05      	ldr	r2, [sp, #20]
 800f94e:	0001      	movs	r1, r0
 800f950:	0007      	movs	r7, r0
 800f952:	9803      	ldr	r0, [sp, #12]
 800f954:	f000 ffcc 	bl	80108f0 <__multiply>
 800f958:	0006      	movs	r6, r0
 800f95a:	9905      	ldr	r1, [sp, #20]
 800f95c:	9803      	ldr	r0, [sp, #12]
 800f95e:	f000 feab 	bl	80106b8 <_Bfree>
 800f962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f964:	9605      	str	r6, [sp, #20]
 800f966:	1b5b      	subs	r3, r3, r5
 800f968:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f96a:	d005      	beq.n	800f978 <_dtoa_r+0x80c>
 800f96c:	0031      	movs	r1, r6
 800f96e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f970:	9803      	ldr	r0, [sp, #12]
 800f972:	f001 f867 	bl	8010a44 <__pow5mult>
 800f976:	9005      	str	r0, [sp, #20]
 800f978:	2101      	movs	r1, #1
 800f97a:	9803      	ldr	r0, [sp, #12]
 800f97c:	f000 ffa0 	bl	80108c0 <__i2b>
 800f980:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f982:	0006      	movs	r6, r0
 800f984:	2b00      	cmp	r3, #0
 800f986:	d100      	bne.n	800f98a <_dtoa_r+0x81e>
 800f988:	e1bc      	b.n	800fd04 <_dtoa_r+0xb98>
 800f98a:	001a      	movs	r2, r3
 800f98c:	0001      	movs	r1, r0
 800f98e:	9803      	ldr	r0, [sp, #12]
 800f990:	f001 f858 	bl	8010a44 <__pow5mult>
 800f994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f996:	0006      	movs	r6, r0
 800f998:	2500      	movs	r5, #0
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	dc16      	bgt.n	800f9cc <_dtoa_r+0x860>
 800f99e:	2500      	movs	r5, #0
 800f9a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9a2:	42ab      	cmp	r3, r5
 800f9a4:	d10e      	bne.n	800f9c4 <_dtoa_r+0x858>
 800f9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9a8:	031b      	lsls	r3, r3, #12
 800f9aa:	42ab      	cmp	r3, r5
 800f9ac:	d10a      	bne.n	800f9c4 <_dtoa_r+0x858>
 800f9ae:	4b8d      	ldr	r3, [pc, #564]	@ (800fbe4 <_dtoa_r+0xa78>)
 800f9b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f9b2:	4213      	tst	r3, r2
 800f9b4:	d006      	beq.n	800f9c4 <_dtoa_r+0x858>
 800f9b6:	9b06      	ldr	r3, [sp, #24]
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	9306      	str	r3, [sp, #24]
 800f9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	930d      	str	r3, [sp, #52]	@ 0x34
 800f9c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f9c6:	2001      	movs	r0, #1
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d008      	beq.n	800f9de <_dtoa_r+0x872>
 800f9cc:	6933      	ldr	r3, [r6, #16]
 800f9ce:	3303      	adds	r3, #3
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	18f3      	adds	r3, r6, r3
 800f9d4:	6858      	ldr	r0, [r3, #4]
 800f9d6:	f000 ff23 	bl	8010820 <__hi0bits>
 800f9da:	2320      	movs	r3, #32
 800f9dc:	1a18      	subs	r0, r3, r0
 800f9de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9e0:	1818      	adds	r0, r3, r0
 800f9e2:	0002      	movs	r2, r0
 800f9e4:	231f      	movs	r3, #31
 800f9e6:	401a      	ands	r2, r3
 800f9e8:	4218      	tst	r0, r3
 800f9ea:	d100      	bne.n	800f9ee <_dtoa_r+0x882>
 800f9ec:	e081      	b.n	800faf2 <_dtoa_r+0x986>
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	1a9b      	subs	r3, r3, r2
 800f9f2:	2b04      	cmp	r3, #4
 800f9f4:	dd79      	ble.n	800faea <_dtoa_r+0x97e>
 800f9f6:	231c      	movs	r3, #28
 800f9f8:	1a9b      	subs	r3, r3, r2
 800f9fa:	9a06      	ldr	r2, [sp, #24]
 800f9fc:	18e4      	adds	r4, r4, r3
 800f9fe:	18d2      	adds	r2, r2, r3
 800fa00:	9206      	str	r2, [sp, #24]
 800fa02:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fa04:	18d3      	adds	r3, r2, r3
 800fa06:	930d      	str	r3, [sp, #52]	@ 0x34
 800fa08:	9b06      	ldr	r3, [sp, #24]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	dd05      	ble.n	800fa1a <_dtoa_r+0x8ae>
 800fa0e:	001a      	movs	r2, r3
 800fa10:	9905      	ldr	r1, [sp, #20]
 800fa12:	9803      	ldr	r0, [sp, #12]
 800fa14:	f001 f872 	bl	8010afc <__lshift>
 800fa18:	9005      	str	r0, [sp, #20]
 800fa1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dd05      	ble.n	800fa2c <_dtoa_r+0x8c0>
 800fa20:	0031      	movs	r1, r6
 800fa22:	001a      	movs	r2, r3
 800fa24:	9803      	ldr	r0, [sp, #12]
 800fa26:	f001 f869 	bl	8010afc <__lshift>
 800fa2a:	0006      	movs	r6, r0
 800fa2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d061      	beq.n	800faf6 <_dtoa_r+0x98a>
 800fa32:	0031      	movs	r1, r6
 800fa34:	9805      	ldr	r0, [sp, #20]
 800fa36:	f001 f8cd 	bl	8010bd4 <__mcmp>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	da5b      	bge.n	800faf6 <_dtoa_r+0x98a>
 800fa3e:	9b04      	ldr	r3, [sp, #16]
 800fa40:	220a      	movs	r2, #10
 800fa42:	3b01      	subs	r3, #1
 800fa44:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa46:	9905      	ldr	r1, [sp, #20]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	9803      	ldr	r0, [sp, #12]
 800fa4c:	f000 fe58 	bl	8010700 <__multadd>
 800fa50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa52:	9005      	str	r0, [sp, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d100      	bne.n	800fa5a <_dtoa_r+0x8ee>
 800fa58:	e15b      	b.n	800fd12 <_dtoa_r+0xba6>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	0039      	movs	r1, r7
 800fa5e:	220a      	movs	r2, #10
 800fa60:	9803      	ldr	r0, [sp, #12]
 800fa62:	f000 fe4d 	bl	8010700 <__multadd>
 800fa66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa68:	0007      	movs	r7, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	dc4d      	bgt.n	800fb0a <_dtoa_r+0x99e>
 800fa6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	dd46      	ble.n	800fb02 <_dtoa_r+0x996>
 800fa74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d000      	beq.n	800fa7c <_dtoa_r+0x910>
 800fa7a:	e5db      	b.n	800f634 <_dtoa_r+0x4c8>
 800fa7c:	0031      	movs	r1, r6
 800fa7e:	2205      	movs	r2, #5
 800fa80:	9803      	ldr	r0, [sp, #12]
 800fa82:	f000 fe3d 	bl	8010700 <__multadd>
 800fa86:	0006      	movs	r6, r0
 800fa88:	0001      	movs	r1, r0
 800fa8a:	9805      	ldr	r0, [sp, #20]
 800fa8c:	f001 f8a2 	bl	8010bd4 <__mcmp>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	dc00      	bgt.n	800fa96 <_dtoa_r+0x92a>
 800fa94:	e5ce      	b.n	800f634 <_dtoa_r+0x4c8>
 800fa96:	9b08      	ldr	r3, [sp, #32]
 800fa98:	9a08      	ldr	r2, [sp, #32]
 800fa9a:	1c5c      	adds	r4, r3, #1
 800fa9c:	2331      	movs	r3, #49	@ 0x31
 800fa9e:	7013      	strb	r3, [r2, #0]
 800faa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faa2:	3301      	adds	r3, #1
 800faa4:	930c      	str	r3, [sp, #48]	@ 0x30
 800faa6:	e5c9      	b.n	800f63c <_dtoa_r+0x4d0>
 800faa8:	2336      	movs	r3, #54	@ 0x36
 800faaa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800faac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800faae:	1a9b      	subs	r3, r3, r2
 800fab0:	9c06      	ldr	r4, [sp, #24]
 800fab2:	e720      	b.n	800f8f6 <_dtoa_r+0x78a>
 800fab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fab6:	1e5d      	subs	r5, r3, #1
 800fab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faba:	42ab      	cmp	r3, r5
 800fabc:	db08      	blt.n	800fad0 <_dtoa_r+0x964>
 800fabe:	1b5d      	subs	r5, r3, r5
 800fac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	daf4      	bge.n	800fab0 <_dtoa_r+0x944>
 800fac6:	9b06      	ldr	r3, [sp, #24]
 800fac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800faca:	1a9c      	subs	r4, r3, r2
 800facc:	2300      	movs	r3, #0
 800face:	e712      	b.n	800f8f6 <_dtoa_r+0x78a>
 800fad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fad2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fad4:	1aeb      	subs	r3, r5, r3
 800fad6:	18d3      	adds	r3, r2, r3
 800fad8:	9314      	str	r3, [sp, #80]	@ 0x50
 800fada:	950f      	str	r5, [sp, #60]	@ 0x3c
 800fadc:	9c06      	ldr	r4, [sp, #24]
 800fade:	2500      	movs	r5, #0
 800fae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae2:	e708      	b.n	800f8f6 <_dtoa_r+0x78a>
 800fae4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fae6:	9905      	ldr	r1, [sp, #20]
 800fae8:	e742      	b.n	800f970 <_dtoa_r+0x804>
 800faea:	2b04      	cmp	r3, #4
 800faec:	d08c      	beq.n	800fa08 <_dtoa_r+0x89c>
 800faee:	331c      	adds	r3, #28
 800faf0:	e783      	b.n	800f9fa <_dtoa_r+0x88e>
 800faf2:	0013      	movs	r3, r2
 800faf4:	e7fb      	b.n	800faee <_dtoa_r+0x982>
 800faf6:	9b04      	ldr	r3, [sp, #16]
 800faf8:	930c      	str	r3, [sp, #48]	@ 0x30
 800fafa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fafc:	930e      	str	r3, [sp, #56]	@ 0x38
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	ddb5      	ble.n	800fa6e <_dtoa_r+0x902>
 800fb02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d100      	bne.n	800fb0a <_dtoa_r+0x99e>
 800fb08:	e107      	b.n	800fd1a <_dtoa_r+0xbae>
 800fb0a:	2c00      	cmp	r4, #0
 800fb0c:	dd05      	ble.n	800fb1a <_dtoa_r+0x9ae>
 800fb0e:	0039      	movs	r1, r7
 800fb10:	0022      	movs	r2, r4
 800fb12:	9803      	ldr	r0, [sp, #12]
 800fb14:	f000 fff2 	bl	8010afc <__lshift>
 800fb18:	0007      	movs	r7, r0
 800fb1a:	9704      	str	r7, [sp, #16]
 800fb1c:	2d00      	cmp	r5, #0
 800fb1e:	d020      	beq.n	800fb62 <_dtoa_r+0x9f6>
 800fb20:	6879      	ldr	r1, [r7, #4]
 800fb22:	9803      	ldr	r0, [sp, #12]
 800fb24:	f000 fd84 	bl	8010630 <_Balloc>
 800fb28:	1e04      	subs	r4, r0, #0
 800fb2a:	d10c      	bne.n	800fb46 <_dtoa_r+0x9da>
 800fb2c:	0022      	movs	r2, r4
 800fb2e:	4b2e      	ldr	r3, [pc, #184]	@ (800fbe8 <_dtoa_r+0xa7c>)
 800fb30:	482e      	ldr	r0, [pc, #184]	@ (800fbec <_dtoa_r+0xa80>)
 800fb32:	492f      	ldr	r1, [pc, #188]	@ (800fbf0 <_dtoa_r+0xa84>)
 800fb34:	f7ff fb2f 	bl	800f196 <_dtoa_r+0x2a>
 800fb38:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800fb3a:	0037      	movs	r7, r6
 800fb3c:	e7ab      	b.n	800fa96 <_dtoa_r+0x92a>
 800fb3e:	9b04      	ldr	r3, [sp, #16]
 800fb40:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800fb42:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb44:	e7f9      	b.n	800fb3a <_dtoa_r+0x9ce>
 800fb46:	0039      	movs	r1, r7
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	310c      	adds	r1, #12
 800fb4c:	3202      	adds	r2, #2
 800fb4e:	0092      	lsls	r2, r2, #2
 800fb50:	300c      	adds	r0, #12
 800fb52:	f7ff fa75 	bl	800f040 <memcpy>
 800fb56:	2201      	movs	r2, #1
 800fb58:	0021      	movs	r1, r4
 800fb5a:	9803      	ldr	r0, [sp, #12]
 800fb5c:	f000 ffce 	bl	8010afc <__lshift>
 800fb60:	9004      	str	r0, [sp, #16]
 800fb62:	9b08      	ldr	r3, [sp, #32]
 800fb64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb66:	9306      	str	r3, [sp, #24]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	189b      	adds	r3, r3, r2
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fb70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb72:	4013      	ands	r3, r2
 800fb74:	930e      	str	r3, [sp, #56]	@ 0x38
 800fb76:	0031      	movs	r1, r6
 800fb78:	9805      	ldr	r0, [sp, #20]
 800fb7a:	f7ff fa71 	bl	800f060 <quorem>
 800fb7e:	0039      	movs	r1, r7
 800fb80:	0005      	movs	r5, r0
 800fb82:	900a      	str	r0, [sp, #40]	@ 0x28
 800fb84:	9805      	ldr	r0, [sp, #20]
 800fb86:	f001 f825 	bl	8010bd4 <__mcmp>
 800fb8a:	9a04      	ldr	r2, [sp, #16]
 800fb8c:	900d      	str	r0, [sp, #52]	@ 0x34
 800fb8e:	0031      	movs	r1, r6
 800fb90:	9803      	ldr	r0, [sp, #12]
 800fb92:	f001 f83b 	bl	8010c0c <__mdiff>
 800fb96:	2201      	movs	r2, #1
 800fb98:	68c3      	ldr	r3, [r0, #12]
 800fb9a:	0004      	movs	r4, r0
 800fb9c:	3530      	adds	r5, #48	@ 0x30
 800fb9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d104      	bne.n	800fbae <_dtoa_r+0xa42>
 800fba4:	0001      	movs	r1, r0
 800fba6:	9805      	ldr	r0, [sp, #20]
 800fba8:	f001 f814 	bl	8010bd4 <__mcmp>
 800fbac:	9009      	str	r0, [sp, #36]	@ 0x24
 800fbae:	0021      	movs	r1, r4
 800fbb0:	9803      	ldr	r0, [sp, #12]
 800fbb2:	f000 fd81 	bl	80106b8 <_Bfree>
 800fbb6:	9b06      	ldr	r3, [sp, #24]
 800fbb8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fbba:	1c5c      	adds	r4, r3, #1
 800fbbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	d116      	bne.n	800fbf4 <_dtoa_r+0xa88>
 800fbc6:	2d39      	cmp	r5, #57	@ 0x39
 800fbc8:	d02f      	beq.n	800fc2a <_dtoa_r+0xabe>
 800fbca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dd01      	ble.n	800fbd4 <_dtoa_r+0xa68>
 800fbd0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fbd2:	3531      	adds	r5, #49	@ 0x31
 800fbd4:	9b06      	ldr	r3, [sp, #24]
 800fbd6:	701d      	strb	r5, [r3, #0]
 800fbd8:	e532      	b.n	800f640 <_dtoa_r+0x4d4>
 800fbda:	46c0      	nop			@ (mov r8, r8)
 800fbdc:	40240000 	.word	0x40240000
 800fbe0:	00000433 	.word	0x00000433
 800fbe4:	7ff00000 	.word	0x7ff00000
 800fbe8:	08011e02 	.word	0x08011e02
 800fbec:	08011daa 	.word	0x08011daa
 800fbf0:	000002ef 	.word	0x000002ef
 800fbf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	db04      	blt.n	800fc04 <_dtoa_r+0xa98>
 800fbfa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc00:	4313      	orrs	r3, r2
 800fc02:	d11e      	bne.n	800fc42 <_dtoa_r+0xad6>
 800fc04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	dde4      	ble.n	800fbd4 <_dtoa_r+0xa68>
 800fc0a:	9905      	ldr	r1, [sp, #20]
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	9803      	ldr	r0, [sp, #12]
 800fc10:	f000 ff74 	bl	8010afc <__lshift>
 800fc14:	0031      	movs	r1, r6
 800fc16:	9005      	str	r0, [sp, #20]
 800fc18:	f000 ffdc 	bl	8010bd4 <__mcmp>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	dc02      	bgt.n	800fc26 <_dtoa_r+0xaba>
 800fc20:	d1d8      	bne.n	800fbd4 <_dtoa_r+0xa68>
 800fc22:	07eb      	lsls	r3, r5, #31
 800fc24:	d5d6      	bpl.n	800fbd4 <_dtoa_r+0xa68>
 800fc26:	2d39      	cmp	r5, #57	@ 0x39
 800fc28:	d1d2      	bne.n	800fbd0 <_dtoa_r+0xa64>
 800fc2a:	2339      	movs	r3, #57	@ 0x39
 800fc2c:	9a06      	ldr	r2, [sp, #24]
 800fc2e:	7013      	strb	r3, [r2, #0]
 800fc30:	0023      	movs	r3, r4
 800fc32:	001c      	movs	r4, r3
 800fc34:	3b01      	subs	r3, #1
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	2a39      	cmp	r2, #57	@ 0x39
 800fc3a:	d050      	beq.n	800fcde <_dtoa_r+0xb72>
 800fc3c:	3201      	adds	r2, #1
 800fc3e:	701a      	strb	r2, [r3, #0]
 800fc40:	e4fe      	b.n	800f640 <_dtoa_r+0x4d4>
 800fc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	dd03      	ble.n	800fc50 <_dtoa_r+0xae4>
 800fc48:	2d39      	cmp	r5, #57	@ 0x39
 800fc4a:	d0ee      	beq.n	800fc2a <_dtoa_r+0xabe>
 800fc4c:	3501      	adds	r5, #1
 800fc4e:	e7c1      	b.n	800fbd4 <_dtoa_r+0xa68>
 800fc50:	9b06      	ldr	r3, [sp, #24]
 800fc52:	9a06      	ldr	r2, [sp, #24]
 800fc54:	701d      	strb	r5, [r3, #0]
 800fc56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d02b      	beq.n	800fcb4 <_dtoa_r+0xb48>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	220a      	movs	r2, #10
 800fc60:	9905      	ldr	r1, [sp, #20]
 800fc62:	9803      	ldr	r0, [sp, #12]
 800fc64:	f000 fd4c 	bl	8010700 <__multadd>
 800fc68:	9b04      	ldr	r3, [sp, #16]
 800fc6a:	9005      	str	r0, [sp, #20]
 800fc6c:	429f      	cmp	r7, r3
 800fc6e:	d109      	bne.n	800fc84 <_dtoa_r+0xb18>
 800fc70:	0039      	movs	r1, r7
 800fc72:	2300      	movs	r3, #0
 800fc74:	220a      	movs	r2, #10
 800fc76:	9803      	ldr	r0, [sp, #12]
 800fc78:	f000 fd42 	bl	8010700 <__multadd>
 800fc7c:	0007      	movs	r7, r0
 800fc7e:	9004      	str	r0, [sp, #16]
 800fc80:	9406      	str	r4, [sp, #24]
 800fc82:	e778      	b.n	800fb76 <_dtoa_r+0xa0a>
 800fc84:	0039      	movs	r1, r7
 800fc86:	2300      	movs	r3, #0
 800fc88:	220a      	movs	r2, #10
 800fc8a:	9803      	ldr	r0, [sp, #12]
 800fc8c:	f000 fd38 	bl	8010700 <__multadd>
 800fc90:	2300      	movs	r3, #0
 800fc92:	0007      	movs	r7, r0
 800fc94:	220a      	movs	r2, #10
 800fc96:	9904      	ldr	r1, [sp, #16]
 800fc98:	9803      	ldr	r0, [sp, #12]
 800fc9a:	f000 fd31 	bl	8010700 <__multadd>
 800fc9e:	9004      	str	r0, [sp, #16]
 800fca0:	e7ee      	b.n	800fc80 <_dtoa_r+0xb14>
 800fca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fca4:	2401      	movs	r4, #1
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	dd00      	ble.n	800fcac <_dtoa_r+0xb40>
 800fcaa:	001c      	movs	r4, r3
 800fcac:	9704      	str	r7, [sp, #16]
 800fcae:	2700      	movs	r7, #0
 800fcb0:	9b08      	ldr	r3, [sp, #32]
 800fcb2:	191c      	adds	r4, r3, r4
 800fcb4:	9905      	ldr	r1, [sp, #20]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	9803      	ldr	r0, [sp, #12]
 800fcba:	f000 ff1f 	bl	8010afc <__lshift>
 800fcbe:	0031      	movs	r1, r6
 800fcc0:	9005      	str	r0, [sp, #20]
 800fcc2:	f000 ff87 	bl	8010bd4 <__mcmp>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	dcb2      	bgt.n	800fc30 <_dtoa_r+0xac4>
 800fcca:	d101      	bne.n	800fcd0 <_dtoa_r+0xb64>
 800fccc:	07ed      	lsls	r5, r5, #31
 800fcce:	d4af      	bmi.n	800fc30 <_dtoa_r+0xac4>
 800fcd0:	0023      	movs	r3, r4
 800fcd2:	001c      	movs	r4, r3
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	781a      	ldrb	r2, [r3, #0]
 800fcd8:	2a30      	cmp	r2, #48	@ 0x30
 800fcda:	d0fa      	beq.n	800fcd2 <_dtoa_r+0xb66>
 800fcdc:	e4b0      	b.n	800f640 <_dtoa_r+0x4d4>
 800fcde:	9a08      	ldr	r2, [sp, #32]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d1a6      	bne.n	800fc32 <_dtoa_r+0xac6>
 800fce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fce6:	3301      	adds	r3, #1
 800fce8:	930c      	str	r3, [sp, #48]	@ 0x30
 800fcea:	2331      	movs	r3, #49	@ 0x31
 800fcec:	7013      	strb	r3, [r2, #0]
 800fcee:	e4a7      	b.n	800f640 <_dtoa_r+0x4d4>
 800fcf0:	4b14      	ldr	r3, [pc, #80]	@ (800fd44 <_dtoa_r+0xbd8>)
 800fcf2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800fcf4:	9308      	str	r3, [sp, #32]
 800fcf6:	4b14      	ldr	r3, [pc, #80]	@ (800fd48 <_dtoa_r+0xbdc>)
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	d001      	beq.n	800fd00 <_dtoa_r+0xb94>
 800fcfc:	f7ff fa7e 	bl	800f1fc <_dtoa_r+0x90>
 800fd00:	f7ff fa7e 	bl	800f200 <_dtoa_r+0x94>
 800fd04:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	dc00      	bgt.n	800fd0c <_dtoa_r+0xba0>
 800fd0a:	e648      	b.n	800f99e <_dtoa_r+0x832>
 800fd0c:	2001      	movs	r0, #1
 800fd0e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800fd10:	e665      	b.n	800f9de <_dtoa_r+0x872>
 800fd12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	dc00      	bgt.n	800fd1a <_dtoa_r+0xbae>
 800fd18:	e6a9      	b.n	800fa6e <_dtoa_r+0x902>
 800fd1a:	2400      	movs	r4, #0
 800fd1c:	0031      	movs	r1, r6
 800fd1e:	9805      	ldr	r0, [sp, #20]
 800fd20:	f7ff f99e 	bl	800f060 <quorem>
 800fd24:	9b08      	ldr	r3, [sp, #32]
 800fd26:	3030      	adds	r0, #48	@ 0x30
 800fd28:	5518      	strb	r0, [r3, r4]
 800fd2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd2c:	3401      	adds	r4, #1
 800fd2e:	0005      	movs	r5, r0
 800fd30:	42a3      	cmp	r3, r4
 800fd32:	ddb6      	ble.n	800fca2 <_dtoa_r+0xb36>
 800fd34:	2300      	movs	r3, #0
 800fd36:	220a      	movs	r2, #10
 800fd38:	9905      	ldr	r1, [sp, #20]
 800fd3a:	9803      	ldr	r0, [sp, #12]
 800fd3c:	f000 fce0 	bl	8010700 <__multadd>
 800fd40:	9005      	str	r0, [sp, #20]
 800fd42:	e7eb      	b.n	800fd1c <_dtoa_r+0xbb0>
 800fd44:	08011d86 	.word	0x08011d86
 800fd48:	08011d8e 	.word	0x08011d8e

0800fd4c <_free_r>:
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	0005      	movs	r5, r0
 800fd50:	1e0c      	subs	r4, r1, #0
 800fd52:	d010      	beq.n	800fd76 <_free_r+0x2a>
 800fd54:	3c04      	subs	r4, #4
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	da00      	bge.n	800fd5e <_free_r+0x12>
 800fd5c:	18e4      	adds	r4, r4, r3
 800fd5e:	0028      	movs	r0, r5
 800fd60:	f000 fc56 	bl	8010610 <__malloc_lock>
 800fd64:	4a1d      	ldr	r2, [pc, #116]	@ (800fddc <_free_r+0x90>)
 800fd66:	6813      	ldr	r3, [r2, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d105      	bne.n	800fd78 <_free_r+0x2c>
 800fd6c:	6063      	str	r3, [r4, #4]
 800fd6e:	6014      	str	r4, [r2, #0]
 800fd70:	0028      	movs	r0, r5
 800fd72:	f000 fc55 	bl	8010620 <__malloc_unlock>
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	42a3      	cmp	r3, r4
 800fd7a:	d908      	bls.n	800fd8e <_free_r+0x42>
 800fd7c:	6820      	ldr	r0, [r4, #0]
 800fd7e:	1821      	adds	r1, r4, r0
 800fd80:	428b      	cmp	r3, r1
 800fd82:	d1f3      	bne.n	800fd6c <_free_r+0x20>
 800fd84:	6819      	ldr	r1, [r3, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	1809      	adds	r1, r1, r0
 800fd8a:	6021      	str	r1, [r4, #0]
 800fd8c:	e7ee      	b.n	800fd6c <_free_r+0x20>
 800fd8e:	001a      	movs	r2, r3
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <_free_r+0x4e>
 800fd96:	42a3      	cmp	r3, r4
 800fd98:	d9f9      	bls.n	800fd8e <_free_r+0x42>
 800fd9a:	6811      	ldr	r1, [r2, #0]
 800fd9c:	1850      	adds	r0, r2, r1
 800fd9e:	42a0      	cmp	r0, r4
 800fda0:	d10b      	bne.n	800fdba <_free_r+0x6e>
 800fda2:	6820      	ldr	r0, [r4, #0]
 800fda4:	1809      	adds	r1, r1, r0
 800fda6:	1850      	adds	r0, r2, r1
 800fda8:	6011      	str	r1, [r2, #0]
 800fdaa:	4283      	cmp	r3, r0
 800fdac:	d1e0      	bne.n	800fd70 <_free_r+0x24>
 800fdae:	6818      	ldr	r0, [r3, #0]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	1841      	adds	r1, r0, r1
 800fdb4:	6011      	str	r1, [r2, #0]
 800fdb6:	6053      	str	r3, [r2, #4]
 800fdb8:	e7da      	b.n	800fd70 <_free_r+0x24>
 800fdba:	42a0      	cmp	r0, r4
 800fdbc:	d902      	bls.n	800fdc4 <_free_r+0x78>
 800fdbe:	230c      	movs	r3, #12
 800fdc0:	602b      	str	r3, [r5, #0]
 800fdc2:	e7d5      	b.n	800fd70 <_free_r+0x24>
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	1821      	adds	r1, r4, r0
 800fdc8:	428b      	cmp	r3, r1
 800fdca:	d103      	bne.n	800fdd4 <_free_r+0x88>
 800fdcc:	6819      	ldr	r1, [r3, #0]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	1809      	adds	r1, r1, r0
 800fdd2:	6021      	str	r1, [r4, #0]
 800fdd4:	6063      	str	r3, [r4, #4]
 800fdd6:	6054      	str	r4, [r2, #4]
 800fdd8:	e7ca      	b.n	800fd70 <_free_r+0x24>
 800fdda:	46c0      	nop			@ (mov r8, r8)
 800fddc:	2000204c 	.word	0x2000204c

0800fde0 <rshift>:
 800fde0:	0002      	movs	r2, r0
 800fde2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fde4:	6904      	ldr	r4, [r0, #16]
 800fde6:	b085      	sub	sp, #20
 800fde8:	3214      	adds	r2, #20
 800fdea:	114b      	asrs	r3, r1, #5
 800fdec:	0016      	movs	r6, r2
 800fdee:	9302      	str	r3, [sp, #8]
 800fdf0:	429c      	cmp	r4, r3
 800fdf2:	dd31      	ble.n	800fe58 <rshift+0x78>
 800fdf4:	261f      	movs	r6, #31
 800fdf6:	000f      	movs	r7, r1
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	00a5      	lsls	r5, r4, #2
 800fdfc:	18d3      	adds	r3, r2, r3
 800fdfe:	4037      	ands	r7, r6
 800fe00:	1955      	adds	r5, r2, r5
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	9701      	str	r7, [sp, #4]
 800fe06:	4231      	tst	r1, r6
 800fe08:	d10d      	bne.n	800fe26 <rshift+0x46>
 800fe0a:	0016      	movs	r6, r2
 800fe0c:	0019      	movs	r1, r3
 800fe0e:	428d      	cmp	r5, r1
 800fe10:	d836      	bhi.n	800fe80 <rshift+0xa0>
 800fe12:	9b00      	ldr	r3, [sp, #0]
 800fe14:	2600      	movs	r6, #0
 800fe16:	3b03      	subs	r3, #3
 800fe18:	429d      	cmp	r5, r3
 800fe1a:	d302      	bcc.n	800fe22 <rshift+0x42>
 800fe1c:	9b02      	ldr	r3, [sp, #8]
 800fe1e:	1ae4      	subs	r4, r4, r3
 800fe20:	00a6      	lsls	r6, r4, #2
 800fe22:	1996      	adds	r6, r2, r6
 800fe24:	e018      	b.n	800fe58 <rshift+0x78>
 800fe26:	2120      	movs	r1, #32
 800fe28:	9e01      	ldr	r6, [sp, #4]
 800fe2a:	9f01      	ldr	r7, [sp, #4]
 800fe2c:	1b89      	subs	r1, r1, r6
 800fe2e:	9e00      	ldr	r6, [sp, #0]
 800fe30:	9103      	str	r1, [sp, #12]
 800fe32:	ce02      	ldmia	r6!, {r1}
 800fe34:	4694      	mov	ip, r2
 800fe36:	40f9      	lsrs	r1, r7
 800fe38:	42b5      	cmp	r5, r6
 800fe3a:	d816      	bhi.n	800fe6a <rshift+0x8a>
 800fe3c:	9b00      	ldr	r3, [sp, #0]
 800fe3e:	2600      	movs	r6, #0
 800fe40:	3301      	adds	r3, #1
 800fe42:	429d      	cmp	r5, r3
 800fe44:	d303      	bcc.n	800fe4e <rshift+0x6e>
 800fe46:	9b02      	ldr	r3, [sp, #8]
 800fe48:	1ae4      	subs	r4, r4, r3
 800fe4a:	00a6      	lsls	r6, r4, #2
 800fe4c:	3e04      	subs	r6, #4
 800fe4e:	1996      	adds	r6, r2, r6
 800fe50:	6031      	str	r1, [r6, #0]
 800fe52:	2900      	cmp	r1, #0
 800fe54:	d000      	beq.n	800fe58 <rshift+0x78>
 800fe56:	3604      	adds	r6, #4
 800fe58:	1ab1      	subs	r1, r6, r2
 800fe5a:	1089      	asrs	r1, r1, #2
 800fe5c:	6101      	str	r1, [r0, #16]
 800fe5e:	4296      	cmp	r6, r2
 800fe60:	d101      	bne.n	800fe66 <rshift+0x86>
 800fe62:	2300      	movs	r3, #0
 800fe64:	6143      	str	r3, [r0, #20]
 800fe66:	b005      	add	sp, #20
 800fe68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe6a:	6837      	ldr	r7, [r6, #0]
 800fe6c:	9b03      	ldr	r3, [sp, #12]
 800fe6e:	409f      	lsls	r7, r3
 800fe70:	430f      	orrs	r7, r1
 800fe72:	4661      	mov	r1, ip
 800fe74:	c180      	stmia	r1!, {r7}
 800fe76:	468c      	mov	ip, r1
 800fe78:	9b01      	ldr	r3, [sp, #4]
 800fe7a:	ce02      	ldmia	r6!, {r1}
 800fe7c:	40d9      	lsrs	r1, r3
 800fe7e:	e7db      	b.n	800fe38 <rshift+0x58>
 800fe80:	c980      	ldmia	r1!, {r7}
 800fe82:	c680      	stmia	r6!, {r7}
 800fe84:	e7c3      	b.n	800fe0e <rshift+0x2e>

0800fe86 <__hexdig_fun>:
 800fe86:	0002      	movs	r2, r0
 800fe88:	3a30      	subs	r2, #48	@ 0x30
 800fe8a:	0003      	movs	r3, r0
 800fe8c:	2a09      	cmp	r2, #9
 800fe8e:	d802      	bhi.n	800fe96 <__hexdig_fun+0x10>
 800fe90:	3b20      	subs	r3, #32
 800fe92:	b2d8      	uxtb	r0, r3
 800fe94:	4770      	bx	lr
 800fe96:	0002      	movs	r2, r0
 800fe98:	3a61      	subs	r2, #97	@ 0x61
 800fe9a:	2a05      	cmp	r2, #5
 800fe9c:	d801      	bhi.n	800fea2 <__hexdig_fun+0x1c>
 800fe9e:	3b47      	subs	r3, #71	@ 0x47
 800fea0:	e7f7      	b.n	800fe92 <__hexdig_fun+0xc>
 800fea2:	001a      	movs	r2, r3
 800fea4:	3a41      	subs	r2, #65	@ 0x41
 800fea6:	2000      	movs	r0, #0
 800fea8:	2a05      	cmp	r2, #5
 800feaa:	d8f3      	bhi.n	800fe94 <__hexdig_fun+0xe>
 800feac:	3b27      	subs	r3, #39	@ 0x27
 800feae:	e7f0      	b.n	800fe92 <__hexdig_fun+0xc>

0800feb0 <__gethex>:
 800feb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feb2:	b089      	sub	sp, #36	@ 0x24
 800feb4:	9307      	str	r3, [sp, #28]
 800feb6:	680b      	ldr	r3, [r1, #0]
 800feb8:	9201      	str	r2, [sp, #4]
 800feba:	9003      	str	r0, [sp, #12]
 800febc:	9106      	str	r1, [sp, #24]
 800febe:	1c9a      	adds	r2, r3, #2
 800fec0:	0011      	movs	r1, r2
 800fec2:	3201      	adds	r2, #1
 800fec4:	1e50      	subs	r0, r2, #1
 800fec6:	7800      	ldrb	r0, [r0, #0]
 800fec8:	2830      	cmp	r0, #48	@ 0x30
 800feca:	d0f9      	beq.n	800fec0 <__gethex+0x10>
 800fecc:	1acb      	subs	r3, r1, r3
 800fece:	3b02      	subs	r3, #2
 800fed0:	9305      	str	r3, [sp, #20]
 800fed2:	9100      	str	r1, [sp, #0]
 800fed4:	f7ff ffd7 	bl	800fe86 <__hexdig_fun>
 800fed8:	2300      	movs	r3, #0
 800feda:	001d      	movs	r5, r3
 800fedc:	9302      	str	r3, [sp, #8]
 800fede:	4298      	cmp	r0, r3
 800fee0:	d11e      	bne.n	800ff20 <__gethex+0x70>
 800fee2:	2201      	movs	r2, #1
 800fee4:	49a6      	ldr	r1, [pc, #664]	@ (8010180 <__gethex+0x2d0>)
 800fee6:	9800      	ldr	r0, [sp, #0]
 800fee8:	f7ff f80e 	bl	800ef08 <strncmp>
 800feec:	0007      	movs	r7, r0
 800feee:	42a8      	cmp	r0, r5
 800fef0:	d000      	beq.n	800fef4 <__gethex+0x44>
 800fef2:	e06a      	b.n	800ffca <__gethex+0x11a>
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	7858      	ldrb	r0, [r3, #1]
 800fef8:	1c5c      	adds	r4, r3, #1
 800fefa:	f7ff ffc4 	bl	800fe86 <__hexdig_fun>
 800fefe:	2301      	movs	r3, #1
 800ff00:	9302      	str	r3, [sp, #8]
 800ff02:	42a8      	cmp	r0, r5
 800ff04:	d02f      	beq.n	800ff66 <__gethex+0xb6>
 800ff06:	9400      	str	r4, [sp, #0]
 800ff08:	9b00      	ldr	r3, [sp, #0]
 800ff0a:	7818      	ldrb	r0, [r3, #0]
 800ff0c:	2830      	cmp	r0, #48	@ 0x30
 800ff0e:	d009      	beq.n	800ff24 <__gethex+0x74>
 800ff10:	f7ff ffb9 	bl	800fe86 <__hexdig_fun>
 800ff14:	4242      	negs	r2, r0
 800ff16:	4142      	adcs	r2, r0
 800ff18:	2301      	movs	r3, #1
 800ff1a:	0025      	movs	r5, r4
 800ff1c:	9202      	str	r2, [sp, #8]
 800ff1e:	9305      	str	r3, [sp, #20]
 800ff20:	9c00      	ldr	r4, [sp, #0]
 800ff22:	e004      	b.n	800ff2e <__gethex+0x7e>
 800ff24:	9b00      	ldr	r3, [sp, #0]
 800ff26:	3301      	adds	r3, #1
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	e7ed      	b.n	800ff08 <__gethex+0x58>
 800ff2c:	3401      	adds	r4, #1
 800ff2e:	7820      	ldrb	r0, [r4, #0]
 800ff30:	f7ff ffa9 	bl	800fe86 <__hexdig_fun>
 800ff34:	1e07      	subs	r7, r0, #0
 800ff36:	d1f9      	bne.n	800ff2c <__gethex+0x7c>
 800ff38:	2201      	movs	r2, #1
 800ff3a:	0020      	movs	r0, r4
 800ff3c:	4990      	ldr	r1, [pc, #576]	@ (8010180 <__gethex+0x2d0>)
 800ff3e:	f7fe ffe3 	bl	800ef08 <strncmp>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d10d      	bne.n	800ff62 <__gethex+0xb2>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	d106      	bne.n	800ff58 <__gethex+0xa8>
 800ff4a:	3401      	adds	r4, #1
 800ff4c:	0025      	movs	r5, r4
 800ff4e:	7820      	ldrb	r0, [r4, #0]
 800ff50:	f7ff ff99 	bl	800fe86 <__hexdig_fun>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d102      	bne.n	800ff5e <__gethex+0xae>
 800ff58:	1b2d      	subs	r5, r5, r4
 800ff5a:	00af      	lsls	r7, r5, #2
 800ff5c:	e003      	b.n	800ff66 <__gethex+0xb6>
 800ff5e:	3401      	adds	r4, #1
 800ff60:	e7f5      	b.n	800ff4e <__gethex+0x9e>
 800ff62:	2d00      	cmp	r5, #0
 800ff64:	d1f8      	bne.n	800ff58 <__gethex+0xa8>
 800ff66:	2220      	movs	r2, #32
 800ff68:	7823      	ldrb	r3, [r4, #0]
 800ff6a:	0026      	movs	r6, r4
 800ff6c:	4393      	bics	r3, r2
 800ff6e:	2b50      	cmp	r3, #80	@ 0x50
 800ff70:	d11d      	bne.n	800ffae <__gethex+0xfe>
 800ff72:	7863      	ldrb	r3, [r4, #1]
 800ff74:	2b2b      	cmp	r3, #43	@ 0x2b
 800ff76:	d02d      	beq.n	800ffd4 <__gethex+0x124>
 800ff78:	2b2d      	cmp	r3, #45	@ 0x2d
 800ff7a:	d02f      	beq.n	800ffdc <__gethex+0x12c>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	1c66      	adds	r6, r4, #1
 800ff80:	9304      	str	r3, [sp, #16]
 800ff82:	7830      	ldrb	r0, [r6, #0]
 800ff84:	f7ff ff7f 	bl	800fe86 <__hexdig_fun>
 800ff88:	1e43      	subs	r3, r0, #1
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	0005      	movs	r5, r0
 800ff8e:	2b18      	cmp	r3, #24
 800ff90:	d82a      	bhi.n	800ffe8 <__gethex+0x138>
 800ff92:	7870      	ldrb	r0, [r6, #1]
 800ff94:	f7ff ff77 	bl	800fe86 <__hexdig_fun>
 800ff98:	1e43      	subs	r3, r0, #1
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	3601      	adds	r6, #1
 800ff9e:	3d10      	subs	r5, #16
 800ffa0:	2b18      	cmp	r3, #24
 800ffa2:	d91d      	bls.n	800ffe0 <__gethex+0x130>
 800ffa4:	9b04      	ldr	r3, [sp, #16]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d000      	beq.n	800ffac <__gethex+0xfc>
 800ffaa:	426d      	negs	r5, r5
 800ffac:	197f      	adds	r7, r7, r5
 800ffae:	9b06      	ldr	r3, [sp, #24]
 800ffb0:	601e      	str	r6, [r3, #0]
 800ffb2:	9b02      	ldr	r3, [sp, #8]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d019      	beq.n	800ffec <__gethex+0x13c>
 800ffb8:	9b05      	ldr	r3, [sp, #20]
 800ffba:	2606      	movs	r6, #6
 800ffbc:	425a      	negs	r2, r3
 800ffbe:	4153      	adcs	r3, r2
 800ffc0:	425b      	negs	r3, r3
 800ffc2:	401e      	ands	r6, r3
 800ffc4:	0030      	movs	r0, r6
 800ffc6:	b009      	add	sp, #36	@ 0x24
 800ffc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffca:	2301      	movs	r3, #1
 800ffcc:	2700      	movs	r7, #0
 800ffce:	9c00      	ldr	r4, [sp, #0]
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	e7c8      	b.n	800ff66 <__gethex+0xb6>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9304      	str	r3, [sp, #16]
 800ffd8:	1ca6      	adds	r6, r4, #2
 800ffda:	e7d2      	b.n	800ff82 <__gethex+0xd2>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e7fa      	b.n	800ffd6 <__gethex+0x126>
 800ffe0:	230a      	movs	r3, #10
 800ffe2:	435d      	muls	r5, r3
 800ffe4:	182d      	adds	r5, r5, r0
 800ffe6:	e7d4      	b.n	800ff92 <__gethex+0xe2>
 800ffe8:	0026      	movs	r6, r4
 800ffea:	e7e0      	b.n	800ffae <__gethex+0xfe>
 800ffec:	9b00      	ldr	r3, [sp, #0]
 800ffee:	9902      	ldr	r1, [sp, #8]
 800fff0:	1ae3      	subs	r3, r4, r3
 800fff2:	3b01      	subs	r3, #1
 800fff4:	2b07      	cmp	r3, #7
 800fff6:	dc0a      	bgt.n	801000e <__gethex+0x15e>
 800fff8:	9803      	ldr	r0, [sp, #12]
 800fffa:	f000 fb19 	bl	8010630 <_Balloc>
 800fffe:	1e05      	subs	r5, r0, #0
 8010000:	d108      	bne.n	8010014 <__gethex+0x164>
 8010002:	002a      	movs	r2, r5
 8010004:	21e4      	movs	r1, #228	@ 0xe4
 8010006:	4b5f      	ldr	r3, [pc, #380]	@ (8010184 <__gethex+0x2d4>)
 8010008:	485f      	ldr	r0, [pc, #380]	@ (8010188 <__gethex+0x2d8>)
 801000a:	f001 fa15 	bl	8011438 <__assert_func>
 801000e:	3101      	adds	r1, #1
 8010010:	105b      	asrs	r3, r3, #1
 8010012:	e7ef      	b.n	800fff4 <__gethex+0x144>
 8010014:	0003      	movs	r3, r0
 8010016:	3314      	adds	r3, #20
 8010018:	9302      	str	r3, [sp, #8]
 801001a:	9305      	str	r3, [sp, #20]
 801001c:	2300      	movs	r3, #0
 801001e:	001e      	movs	r6, r3
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	9b00      	ldr	r3, [sp, #0]
 8010024:	42a3      	cmp	r3, r4
 8010026:	d338      	bcc.n	801009a <__gethex+0x1ea>
 8010028:	9c05      	ldr	r4, [sp, #20]
 801002a:	9b02      	ldr	r3, [sp, #8]
 801002c:	c440      	stmia	r4!, {r6}
 801002e:	1ae4      	subs	r4, r4, r3
 8010030:	10a4      	asrs	r4, r4, #2
 8010032:	0030      	movs	r0, r6
 8010034:	612c      	str	r4, [r5, #16]
 8010036:	f000 fbf3 	bl	8010820 <__hi0bits>
 801003a:	9b01      	ldr	r3, [sp, #4]
 801003c:	0164      	lsls	r4, r4, #5
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	1a26      	subs	r6, r4, r0
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	429e      	cmp	r6, r3
 8010046:	dd52      	ble.n	80100ee <__gethex+0x23e>
 8010048:	1af6      	subs	r6, r6, r3
 801004a:	0031      	movs	r1, r6
 801004c:	0028      	movs	r0, r5
 801004e:	f000 ff8e 	bl	8010f6e <__any_on>
 8010052:	1e04      	subs	r4, r0, #0
 8010054:	d00f      	beq.n	8010076 <__gethex+0x1c6>
 8010056:	2401      	movs	r4, #1
 8010058:	211f      	movs	r1, #31
 801005a:	0020      	movs	r0, r4
 801005c:	1e73      	subs	r3, r6, #1
 801005e:	4019      	ands	r1, r3
 8010060:	4088      	lsls	r0, r1
 8010062:	0001      	movs	r1, r0
 8010064:	115a      	asrs	r2, r3, #5
 8010066:	9802      	ldr	r0, [sp, #8]
 8010068:	0092      	lsls	r2, r2, #2
 801006a:	5812      	ldr	r2, [r2, r0]
 801006c:	420a      	tst	r2, r1
 801006e:	d002      	beq.n	8010076 <__gethex+0x1c6>
 8010070:	42a3      	cmp	r3, r4
 8010072:	dc34      	bgt.n	80100de <__gethex+0x22e>
 8010074:	2402      	movs	r4, #2
 8010076:	0031      	movs	r1, r6
 8010078:	0028      	movs	r0, r5
 801007a:	f7ff feb1 	bl	800fde0 <rshift>
 801007e:	19bf      	adds	r7, r7, r6
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	42bb      	cmp	r3, r7
 8010086:	da42      	bge.n	801010e <__gethex+0x25e>
 8010088:	0029      	movs	r1, r5
 801008a:	9803      	ldr	r0, [sp, #12]
 801008c:	f000 fb14 	bl	80106b8 <_Bfree>
 8010090:	2300      	movs	r3, #0
 8010092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010094:	26a3      	movs	r6, #163	@ 0xa3
 8010096:	6013      	str	r3, [r2, #0]
 8010098:	e794      	b.n	800ffc4 <__gethex+0x114>
 801009a:	3c01      	subs	r4, #1
 801009c:	7823      	ldrb	r3, [r4, #0]
 801009e:	2b2e      	cmp	r3, #46	@ 0x2e
 80100a0:	d012      	beq.n	80100c8 <__gethex+0x218>
 80100a2:	9b04      	ldr	r3, [sp, #16]
 80100a4:	2b20      	cmp	r3, #32
 80100a6:	d104      	bne.n	80100b2 <__gethex+0x202>
 80100a8:	9b05      	ldr	r3, [sp, #20]
 80100aa:	c340      	stmia	r3!, {r6}
 80100ac:	2600      	movs	r6, #0
 80100ae:	9305      	str	r3, [sp, #20]
 80100b0:	9604      	str	r6, [sp, #16]
 80100b2:	7820      	ldrb	r0, [r4, #0]
 80100b4:	f7ff fee7 	bl	800fe86 <__hexdig_fun>
 80100b8:	230f      	movs	r3, #15
 80100ba:	4018      	ands	r0, r3
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	4098      	lsls	r0, r3
 80100c0:	3304      	adds	r3, #4
 80100c2:	4306      	orrs	r6, r0
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	e7ac      	b.n	8010022 <__gethex+0x172>
 80100c8:	9b00      	ldr	r3, [sp, #0]
 80100ca:	42a3      	cmp	r3, r4
 80100cc:	d8e9      	bhi.n	80100a2 <__gethex+0x1f2>
 80100ce:	2201      	movs	r2, #1
 80100d0:	0020      	movs	r0, r4
 80100d2:	492b      	ldr	r1, [pc, #172]	@ (8010180 <__gethex+0x2d0>)
 80100d4:	f7fe ff18 	bl	800ef08 <strncmp>
 80100d8:	2800      	cmp	r0, #0
 80100da:	d1e2      	bne.n	80100a2 <__gethex+0x1f2>
 80100dc:	e7a1      	b.n	8010022 <__gethex+0x172>
 80100de:	0028      	movs	r0, r5
 80100e0:	1eb1      	subs	r1, r6, #2
 80100e2:	f000 ff44 	bl	8010f6e <__any_on>
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d0c4      	beq.n	8010074 <__gethex+0x1c4>
 80100ea:	2403      	movs	r4, #3
 80100ec:	e7c3      	b.n	8010076 <__gethex+0x1c6>
 80100ee:	9b00      	ldr	r3, [sp, #0]
 80100f0:	2400      	movs	r4, #0
 80100f2:	429e      	cmp	r6, r3
 80100f4:	dac4      	bge.n	8010080 <__gethex+0x1d0>
 80100f6:	1b9e      	subs	r6, r3, r6
 80100f8:	0029      	movs	r1, r5
 80100fa:	0032      	movs	r2, r6
 80100fc:	9803      	ldr	r0, [sp, #12]
 80100fe:	f000 fcfd 	bl	8010afc <__lshift>
 8010102:	0003      	movs	r3, r0
 8010104:	3314      	adds	r3, #20
 8010106:	0005      	movs	r5, r0
 8010108:	1bbf      	subs	r7, r7, r6
 801010a:	9302      	str	r3, [sp, #8]
 801010c:	e7b8      	b.n	8010080 <__gethex+0x1d0>
 801010e:	9b01      	ldr	r3, [sp, #4]
 8010110:	685e      	ldr	r6, [r3, #4]
 8010112:	42be      	cmp	r6, r7
 8010114:	dd6f      	ble.n	80101f6 <__gethex+0x346>
 8010116:	9b00      	ldr	r3, [sp, #0]
 8010118:	1bf6      	subs	r6, r6, r7
 801011a:	42b3      	cmp	r3, r6
 801011c:	dc36      	bgt.n	801018c <__gethex+0x2dc>
 801011e:	9b01      	ldr	r3, [sp, #4]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	2b02      	cmp	r3, #2
 8010124:	d024      	beq.n	8010170 <__gethex+0x2c0>
 8010126:	2b03      	cmp	r3, #3
 8010128:	d026      	beq.n	8010178 <__gethex+0x2c8>
 801012a:	2b01      	cmp	r3, #1
 801012c:	d117      	bne.n	801015e <__gethex+0x2ae>
 801012e:	9b00      	ldr	r3, [sp, #0]
 8010130:	42b3      	cmp	r3, r6
 8010132:	d114      	bne.n	801015e <__gethex+0x2ae>
 8010134:	2b01      	cmp	r3, #1
 8010136:	d10b      	bne.n	8010150 <__gethex+0x2a0>
 8010138:	9b01      	ldr	r3, [sp, #4]
 801013a:	9a07      	ldr	r2, [sp, #28]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	2662      	movs	r6, #98	@ 0x62
 8010140:	6013      	str	r3, [r2, #0]
 8010142:	2301      	movs	r3, #1
 8010144:	9a02      	ldr	r2, [sp, #8]
 8010146:	612b      	str	r3, [r5, #16]
 8010148:	6013      	str	r3, [r2, #0]
 801014a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801014c:	601d      	str	r5, [r3, #0]
 801014e:	e739      	b.n	800ffc4 <__gethex+0x114>
 8010150:	9900      	ldr	r1, [sp, #0]
 8010152:	0028      	movs	r0, r5
 8010154:	3901      	subs	r1, #1
 8010156:	f000 ff0a 	bl	8010f6e <__any_on>
 801015a:	2800      	cmp	r0, #0
 801015c:	d1ec      	bne.n	8010138 <__gethex+0x288>
 801015e:	0029      	movs	r1, r5
 8010160:	9803      	ldr	r0, [sp, #12]
 8010162:	f000 faa9 	bl	80106b8 <_Bfree>
 8010166:	2300      	movs	r3, #0
 8010168:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801016a:	2650      	movs	r6, #80	@ 0x50
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	e729      	b.n	800ffc4 <__gethex+0x114>
 8010170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1f3      	bne.n	801015e <__gethex+0x2ae>
 8010176:	e7df      	b.n	8010138 <__gethex+0x288>
 8010178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1dc      	bne.n	8010138 <__gethex+0x288>
 801017e:	e7ee      	b.n	801015e <__gethex+0x2ae>
 8010180:	08011d48 	.word	0x08011d48
 8010184:	08011e02 	.word	0x08011e02
 8010188:	08011e13 	.word	0x08011e13
 801018c:	1e77      	subs	r7, r6, #1
 801018e:	2c00      	cmp	r4, #0
 8010190:	d12f      	bne.n	80101f2 <__gethex+0x342>
 8010192:	2f00      	cmp	r7, #0
 8010194:	d004      	beq.n	80101a0 <__gethex+0x2f0>
 8010196:	0039      	movs	r1, r7
 8010198:	0028      	movs	r0, r5
 801019a:	f000 fee8 	bl	8010f6e <__any_on>
 801019e:	0004      	movs	r4, r0
 80101a0:	231f      	movs	r3, #31
 80101a2:	117a      	asrs	r2, r7, #5
 80101a4:	401f      	ands	r7, r3
 80101a6:	3b1e      	subs	r3, #30
 80101a8:	40bb      	lsls	r3, r7
 80101aa:	9902      	ldr	r1, [sp, #8]
 80101ac:	0092      	lsls	r2, r2, #2
 80101ae:	5852      	ldr	r2, [r2, r1]
 80101b0:	421a      	tst	r2, r3
 80101b2:	d001      	beq.n	80101b8 <__gethex+0x308>
 80101b4:	2302      	movs	r3, #2
 80101b6:	431c      	orrs	r4, r3
 80101b8:	9b00      	ldr	r3, [sp, #0]
 80101ba:	0031      	movs	r1, r6
 80101bc:	1b9b      	subs	r3, r3, r6
 80101be:	2602      	movs	r6, #2
 80101c0:	0028      	movs	r0, r5
 80101c2:	9300      	str	r3, [sp, #0]
 80101c4:	f7ff fe0c 	bl	800fde0 <rshift>
 80101c8:	9b01      	ldr	r3, [sp, #4]
 80101ca:	685f      	ldr	r7, [r3, #4]
 80101cc:	2c00      	cmp	r4, #0
 80101ce:	d03f      	beq.n	8010250 <__gethex+0x3a0>
 80101d0:	9b01      	ldr	r3, [sp, #4]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d010      	beq.n	80101fa <__gethex+0x34a>
 80101d8:	2b03      	cmp	r3, #3
 80101da:	d012      	beq.n	8010202 <__gethex+0x352>
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d106      	bne.n	80101ee <__gethex+0x33e>
 80101e0:	07a2      	lsls	r2, r4, #30
 80101e2:	d504      	bpl.n	80101ee <__gethex+0x33e>
 80101e4:	9a02      	ldr	r2, [sp, #8]
 80101e6:	6812      	ldr	r2, [r2, #0]
 80101e8:	4314      	orrs	r4, r2
 80101ea:	421c      	tst	r4, r3
 80101ec:	d10c      	bne.n	8010208 <__gethex+0x358>
 80101ee:	2310      	movs	r3, #16
 80101f0:	e02d      	b.n	801024e <__gethex+0x39e>
 80101f2:	2401      	movs	r4, #1
 80101f4:	e7d4      	b.n	80101a0 <__gethex+0x2f0>
 80101f6:	2601      	movs	r6, #1
 80101f8:	e7e8      	b.n	80101cc <__gethex+0x31c>
 80101fa:	2301      	movs	r3, #1
 80101fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80101fe:	1a9b      	subs	r3, r3, r2
 8010200:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0f2      	beq.n	80101ee <__gethex+0x33e>
 8010208:	692b      	ldr	r3, [r5, #16]
 801020a:	2000      	movs	r0, #0
 801020c:	9302      	str	r3, [sp, #8]
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	9304      	str	r3, [sp, #16]
 8010212:	002b      	movs	r3, r5
 8010214:	9a04      	ldr	r2, [sp, #16]
 8010216:	3314      	adds	r3, #20
 8010218:	1899      	adds	r1, r3, r2
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	1c54      	adds	r4, r2, #1
 801021e:	d01c      	beq.n	801025a <__gethex+0x3aa>
 8010220:	3201      	adds	r2, #1
 8010222:	601a      	str	r2, [r3, #0]
 8010224:	002b      	movs	r3, r5
 8010226:	3314      	adds	r3, #20
 8010228:	2e02      	cmp	r6, #2
 801022a:	d13f      	bne.n	80102ac <__gethex+0x3fc>
 801022c:	9a01      	ldr	r2, [sp, #4]
 801022e:	9900      	ldr	r1, [sp, #0]
 8010230:	6812      	ldr	r2, [r2, #0]
 8010232:	3a01      	subs	r2, #1
 8010234:	428a      	cmp	r2, r1
 8010236:	d109      	bne.n	801024c <__gethex+0x39c>
 8010238:	000a      	movs	r2, r1
 801023a:	201f      	movs	r0, #31
 801023c:	4010      	ands	r0, r2
 801023e:	2201      	movs	r2, #1
 8010240:	4082      	lsls	r2, r0
 8010242:	1149      	asrs	r1, r1, #5
 8010244:	0089      	lsls	r1, r1, #2
 8010246:	58cb      	ldr	r3, [r1, r3]
 8010248:	4213      	tst	r3, r2
 801024a:	d13d      	bne.n	80102c8 <__gethex+0x418>
 801024c:	2320      	movs	r3, #32
 801024e:	431e      	orrs	r6, r3
 8010250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010252:	601d      	str	r5, [r3, #0]
 8010254:	9b07      	ldr	r3, [sp, #28]
 8010256:	601f      	str	r7, [r3, #0]
 8010258:	e6b4      	b.n	800ffc4 <__gethex+0x114>
 801025a:	c301      	stmia	r3!, {r0}
 801025c:	4299      	cmp	r1, r3
 801025e:	d8dc      	bhi.n	801021a <__gethex+0x36a>
 8010260:	68ab      	ldr	r3, [r5, #8]
 8010262:	9a02      	ldr	r2, [sp, #8]
 8010264:	429a      	cmp	r2, r3
 8010266:	db18      	blt.n	801029a <__gethex+0x3ea>
 8010268:	6869      	ldr	r1, [r5, #4]
 801026a:	9803      	ldr	r0, [sp, #12]
 801026c:	3101      	adds	r1, #1
 801026e:	f000 f9df 	bl	8010630 <_Balloc>
 8010272:	1e04      	subs	r4, r0, #0
 8010274:	d104      	bne.n	8010280 <__gethex+0x3d0>
 8010276:	0022      	movs	r2, r4
 8010278:	2184      	movs	r1, #132	@ 0x84
 801027a:	4b1d      	ldr	r3, [pc, #116]	@ (80102f0 <__gethex+0x440>)
 801027c:	481d      	ldr	r0, [pc, #116]	@ (80102f4 <__gethex+0x444>)
 801027e:	e6c4      	b.n	801000a <__gethex+0x15a>
 8010280:	0029      	movs	r1, r5
 8010282:	692a      	ldr	r2, [r5, #16]
 8010284:	310c      	adds	r1, #12
 8010286:	3202      	adds	r2, #2
 8010288:	0092      	lsls	r2, r2, #2
 801028a:	300c      	adds	r0, #12
 801028c:	f7fe fed8 	bl	800f040 <memcpy>
 8010290:	0029      	movs	r1, r5
 8010292:	9803      	ldr	r0, [sp, #12]
 8010294:	f000 fa10 	bl	80106b8 <_Bfree>
 8010298:	0025      	movs	r5, r4
 801029a:	692b      	ldr	r3, [r5, #16]
 801029c:	1c5a      	adds	r2, r3, #1
 801029e:	612a      	str	r2, [r5, #16]
 80102a0:	2201      	movs	r2, #1
 80102a2:	3304      	adds	r3, #4
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	18eb      	adds	r3, r5, r3
 80102a8:	605a      	str	r2, [r3, #4]
 80102aa:	e7bb      	b.n	8010224 <__gethex+0x374>
 80102ac:	692a      	ldr	r2, [r5, #16]
 80102ae:	9902      	ldr	r1, [sp, #8]
 80102b0:	428a      	cmp	r2, r1
 80102b2:	dd0b      	ble.n	80102cc <__gethex+0x41c>
 80102b4:	2101      	movs	r1, #1
 80102b6:	0028      	movs	r0, r5
 80102b8:	f7ff fd92 	bl	800fde0 <rshift>
 80102bc:	9b01      	ldr	r3, [sp, #4]
 80102be:	3701      	adds	r7, #1
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	42bb      	cmp	r3, r7
 80102c4:	da00      	bge.n	80102c8 <__gethex+0x418>
 80102c6:	e6df      	b.n	8010088 <__gethex+0x1d8>
 80102c8:	2601      	movs	r6, #1
 80102ca:	e7bf      	b.n	801024c <__gethex+0x39c>
 80102cc:	221f      	movs	r2, #31
 80102ce:	9c00      	ldr	r4, [sp, #0]
 80102d0:	9900      	ldr	r1, [sp, #0]
 80102d2:	4014      	ands	r4, r2
 80102d4:	4211      	tst	r1, r2
 80102d6:	d0f7      	beq.n	80102c8 <__gethex+0x418>
 80102d8:	9a04      	ldr	r2, [sp, #16]
 80102da:	189b      	adds	r3, r3, r2
 80102dc:	3b04      	subs	r3, #4
 80102de:	6818      	ldr	r0, [r3, #0]
 80102e0:	f000 fa9e 	bl	8010820 <__hi0bits>
 80102e4:	2320      	movs	r3, #32
 80102e6:	1b1b      	subs	r3, r3, r4
 80102e8:	4298      	cmp	r0, r3
 80102ea:	dbe3      	blt.n	80102b4 <__gethex+0x404>
 80102ec:	e7ec      	b.n	80102c8 <__gethex+0x418>
 80102ee:	46c0      	nop			@ (mov r8, r8)
 80102f0:	08011e02 	.word	0x08011e02
 80102f4:	08011e13 	.word	0x08011e13

080102f8 <L_shift>:
 80102f8:	2308      	movs	r3, #8
 80102fa:	b570      	push	{r4, r5, r6, lr}
 80102fc:	2520      	movs	r5, #32
 80102fe:	1a9a      	subs	r2, r3, r2
 8010300:	0092      	lsls	r2, r2, #2
 8010302:	1aad      	subs	r5, r5, r2
 8010304:	6843      	ldr	r3, [r0, #4]
 8010306:	6804      	ldr	r4, [r0, #0]
 8010308:	001e      	movs	r6, r3
 801030a:	40ae      	lsls	r6, r5
 801030c:	40d3      	lsrs	r3, r2
 801030e:	4334      	orrs	r4, r6
 8010310:	6004      	str	r4, [r0, #0]
 8010312:	6043      	str	r3, [r0, #4]
 8010314:	3004      	adds	r0, #4
 8010316:	4288      	cmp	r0, r1
 8010318:	d3f4      	bcc.n	8010304 <L_shift+0xc>
 801031a:	bd70      	pop	{r4, r5, r6, pc}

0801031c <__match>:
 801031c:	b530      	push	{r4, r5, lr}
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	780c      	ldrb	r4, [r1, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	2c00      	cmp	r4, #0
 8010326:	d102      	bne.n	801032e <__match+0x12>
 8010328:	6003      	str	r3, [r0, #0]
 801032a:	2001      	movs	r0, #1
 801032c:	bd30      	pop	{r4, r5, pc}
 801032e:	781a      	ldrb	r2, [r3, #0]
 8010330:	0015      	movs	r5, r2
 8010332:	3d41      	subs	r5, #65	@ 0x41
 8010334:	2d19      	cmp	r5, #25
 8010336:	d800      	bhi.n	801033a <__match+0x1e>
 8010338:	3220      	adds	r2, #32
 801033a:	3101      	adds	r1, #1
 801033c:	42a2      	cmp	r2, r4
 801033e:	d0ef      	beq.n	8010320 <__match+0x4>
 8010340:	2000      	movs	r0, #0
 8010342:	e7f3      	b.n	801032c <__match+0x10>

08010344 <__hexnan>:
 8010344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010346:	680b      	ldr	r3, [r1, #0]
 8010348:	b08b      	sub	sp, #44	@ 0x2c
 801034a:	9201      	str	r2, [sp, #4]
 801034c:	9901      	ldr	r1, [sp, #4]
 801034e:	115a      	asrs	r2, r3, #5
 8010350:	0092      	lsls	r2, r2, #2
 8010352:	188a      	adds	r2, r1, r2
 8010354:	9202      	str	r2, [sp, #8]
 8010356:	0019      	movs	r1, r3
 8010358:	221f      	movs	r2, #31
 801035a:	4011      	ands	r1, r2
 801035c:	9008      	str	r0, [sp, #32]
 801035e:	9106      	str	r1, [sp, #24]
 8010360:	4213      	tst	r3, r2
 8010362:	d002      	beq.n	801036a <__hexnan+0x26>
 8010364:	9b02      	ldr	r3, [sp, #8]
 8010366:	3304      	adds	r3, #4
 8010368:	9302      	str	r3, [sp, #8]
 801036a:	9b02      	ldr	r3, [sp, #8]
 801036c:	2500      	movs	r5, #0
 801036e:	1f1f      	subs	r7, r3, #4
 8010370:	003e      	movs	r6, r7
 8010372:	003c      	movs	r4, r7
 8010374:	9b08      	ldr	r3, [sp, #32]
 8010376:	603d      	str	r5, [r7, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	9507      	str	r5, [sp, #28]
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	9503      	str	r5, [sp, #12]
 8010380:	9b05      	ldr	r3, [sp, #20]
 8010382:	3301      	adds	r3, #1
 8010384:	9309      	str	r3, [sp, #36]	@ 0x24
 8010386:	9b05      	ldr	r3, [sp, #20]
 8010388:	785b      	ldrb	r3, [r3, #1]
 801038a:	9304      	str	r3, [sp, #16]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d028      	beq.n	80103e2 <__hexnan+0x9e>
 8010390:	9804      	ldr	r0, [sp, #16]
 8010392:	f7ff fd78 	bl	800fe86 <__hexdig_fun>
 8010396:	2800      	cmp	r0, #0
 8010398:	d155      	bne.n	8010446 <__hexnan+0x102>
 801039a:	9b04      	ldr	r3, [sp, #16]
 801039c:	2b20      	cmp	r3, #32
 801039e:	d819      	bhi.n	80103d4 <__hexnan+0x90>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	9a07      	ldr	r2, [sp, #28]
 80103a4:	4293      	cmp	r3, r2
 80103a6:	dd12      	ble.n	80103ce <__hexnan+0x8a>
 80103a8:	42b4      	cmp	r4, r6
 80103aa:	d206      	bcs.n	80103ba <__hexnan+0x76>
 80103ac:	2d07      	cmp	r5, #7
 80103ae:	dc04      	bgt.n	80103ba <__hexnan+0x76>
 80103b0:	002a      	movs	r2, r5
 80103b2:	0031      	movs	r1, r6
 80103b4:	0020      	movs	r0, r4
 80103b6:	f7ff ff9f 	bl	80102f8 <L_shift>
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	2508      	movs	r5, #8
 80103be:	429c      	cmp	r4, r3
 80103c0:	d905      	bls.n	80103ce <__hexnan+0x8a>
 80103c2:	1f26      	subs	r6, r4, #4
 80103c4:	2500      	movs	r5, #0
 80103c6:	0034      	movs	r4, r6
 80103c8:	9b03      	ldr	r3, [sp, #12]
 80103ca:	6035      	str	r5, [r6, #0]
 80103cc:	9307      	str	r3, [sp, #28]
 80103ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d0:	9305      	str	r3, [sp, #20]
 80103d2:	e7d5      	b.n	8010380 <__hexnan+0x3c>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	2b29      	cmp	r3, #41	@ 0x29
 80103d8:	d15a      	bne.n	8010490 <__hexnan+0x14c>
 80103da:	9b05      	ldr	r3, [sp, #20]
 80103dc:	9a08      	ldr	r2, [sp, #32]
 80103de:	3302      	adds	r3, #2
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	9b03      	ldr	r3, [sp, #12]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d053      	beq.n	8010490 <__hexnan+0x14c>
 80103e8:	42b4      	cmp	r4, r6
 80103ea:	d206      	bcs.n	80103fa <__hexnan+0xb6>
 80103ec:	2d07      	cmp	r5, #7
 80103ee:	dc04      	bgt.n	80103fa <__hexnan+0xb6>
 80103f0:	002a      	movs	r2, r5
 80103f2:	0031      	movs	r1, r6
 80103f4:	0020      	movs	r0, r4
 80103f6:	f7ff ff7f 	bl	80102f8 <L_shift>
 80103fa:	9b01      	ldr	r3, [sp, #4]
 80103fc:	429c      	cmp	r4, r3
 80103fe:	d936      	bls.n	801046e <__hexnan+0x12a>
 8010400:	001a      	movs	r2, r3
 8010402:	0023      	movs	r3, r4
 8010404:	cb02      	ldmia	r3!, {r1}
 8010406:	c202      	stmia	r2!, {r1}
 8010408:	429f      	cmp	r7, r3
 801040a:	d2fb      	bcs.n	8010404 <__hexnan+0xc0>
 801040c:	9b02      	ldr	r3, [sp, #8]
 801040e:	1c62      	adds	r2, r4, #1
 8010410:	1ed9      	subs	r1, r3, #3
 8010412:	2304      	movs	r3, #4
 8010414:	4291      	cmp	r1, r2
 8010416:	d305      	bcc.n	8010424 <__hexnan+0xe0>
 8010418:	9b02      	ldr	r3, [sp, #8]
 801041a:	3b04      	subs	r3, #4
 801041c:	1b1b      	subs	r3, r3, r4
 801041e:	089b      	lsrs	r3, r3, #2
 8010420:	3301      	adds	r3, #1
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	9a01      	ldr	r2, [sp, #4]
 8010426:	18d3      	adds	r3, r2, r3
 8010428:	2200      	movs	r2, #0
 801042a:	c304      	stmia	r3!, {r2}
 801042c:	429f      	cmp	r7, r3
 801042e:	d2fc      	bcs.n	801042a <__hexnan+0xe6>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d104      	bne.n	8010440 <__hexnan+0xfc>
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	429f      	cmp	r7, r3
 801043a:	d127      	bne.n	801048c <__hexnan+0x148>
 801043c:	2301      	movs	r3, #1
 801043e:	603b      	str	r3, [r7, #0]
 8010440:	2005      	movs	r0, #5
 8010442:	b00b      	add	sp, #44	@ 0x2c
 8010444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	3501      	adds	r5, #1
 801044a:	3301      	adds	r3, #1
 801044c:	9303      	str	r3, [sp, #12]
 801044e:	2d08      	cmp	r5, #8
 8010450:	dd06      	ble.n	8010460 <__hexnan+0x11c>
 8010452:	9b01      	ldr	r3, [sp, #4]
 8010454:	429c      	cmp	r4, r3
 8010456:	d9ba      	bls.n	80103ce <__hexnan+0x8a>
 8010458:	2300      	movs	r3, #0
 801045a:	2501      	movs	r5, #1
 801045c:	3c04      	subs	r4, #4
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	220f      	movs	r2, #15
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	4010      	ands	r0, r2
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	4303      	orrs	r3, r0
 801046a:	6023      	str	r3, [r4, #0]
 801046c:	e7af      	b.n	80103ce <__hexnan+0x8a>
 801046e:	9b06      	ldr	r3, [sp, #24]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d0dd      	beq.n	8010430 <__hexnan+0xec>
 8010474:	2320      	movs	r3, #32
 8010476:	9a06      	ldr	r2, [sp, #24]
 8010478:	9902      	ldr	r1, [sp, #8]
 801047a:	1a9b      	subs	r3, r3, r2
 801047c:	2201      	movs	r2, #1
 801047e:	4252      	negs	r2, r2
 8010480:	40da      	lsrs	r2, r3
 8010482:	3904      	subs	r1, #4
 8010484:	680b      	ldr	r3, [r1, #0]
 8010486:	4013      	ands	r3, r2
 8010488:	600b      	str	r3, [r1, #0]
 801048a:	e7d1      	b.n	8010430 <__hexnan+0xec>
 801048c:	3f04      	subs	r7, #4
 801048e:	e7cf      	b.n	8010430 <__hexnan+0xec>
 8010490:	2004      	movs	r0, #4
 8010492:	e7d6      	b.n	8010442 <__hexnan+0xfe>

08010494 <malloc>:
 8010494:	b510      	push	{r4, lr}
 8010496:	4b03      	ldr	r3, [pc, #12]	@ (80104a4 <malloc+0x10>)
 8010498:	0001      	movs	r1, r0
 801049a:	6818      	ldr	r0, [r3, #0]
 801049c:	f000 f826 	bl	80104ec <_malloc_r>
 80104a0:	bd10      	pop	{r4, pc}
 80104a2:	46c0      	nop			@ (mov r8, r8)
 80104a4:	20000278 	.word	0x20000278

080104a8 <sbrk_aligned>:
 80104a8:	b570      	push	{r4, r5, r6, lr}
 80104aa:	4e0f      	ldr	r6, [pc, #60]	@ (80104e8 <sbrk_aligned+0x40>)
 80104ac:	000d      	movs	r5, r1
 80104ae:	6831      	ldr	r1, [r6, #0]
 80104b0:	0004      	movs	r4, r0
 80104b2:	2900      	cmp	r1, #0
 80104b4:	d102      	bne.n	80104bc <sbrk_aligned+0x14>
 80104b6:	f000 ffad 	bl	8011414 <_sbrk_r>
 80104ba:	6030      	str	r0, [r6, #0]
 80104bc:	0029      	movs	r1, r5
 80104be:	0020      	movs	r0, r4
 80104c0:	f000 ffa8 	bl	8011414 <_sbrk_r>
 80104c4:	1c43      	adds	r3, r0, #1
 80104c6:	d103      	bne.n	80104d0 <sbrk_aligned+0x28>
 80104c8:	2501      	movs	r5, #1
 80104ca:	426d      	negs	r5, r5
 80104cc:	0028      	movs	r0, r5
 80104ce:	bd70      	pop	{r4, r5, r6, pc}
 80104d0:	2303      	movs	r3, #3
 80104d2:	1cc5      	adds	r5, r0, #3
 80104d4:	439d      	bics	r5, r3
 80104d6:	42a8      	cmp	r0, r5
 80104d8:	d0f8      	beq.n	80104cc <sbrk_aligned+0x24>
 80104da:	1a29      	subs	r1, r5, r0
 80104dc:	0020      	movs	r0, r4
 80104de:	f000 ff99 	bl	8011414 <_sbrk_r>
 80104e2:	3001      	adds	r0, #1
 80104e4:	d1f2      	bne.n	80104cc <sbrk_aligned+0x24>
 80104e6:	e7ef      	b.n	80104c8 <sbrk_aligned+0x20>
 80104e8:	20002048 	.word	0x20002048

080104ec <_malloc_r>:
 80104ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ee:	2203      	movs	r2, #3
 80104f0:	1ccb      	adds	r3, r1, #3
 80104f2:	4393      	bics	r3, r2
 80104f4:	3308      	adds	r3, #8
 80104f6:	0005      	movs	r5, r0
 80104f8:	001f      	movs	r7, r3
 80104fa:	2b0c      	cmp	r3, #12
 80104fc:	d234      	bcs.n	8010568 <_malloc_r+0x7c>
 80104fe:	270c      	movs	r7, #12
 8010500:	42b9      	cmp	r1, r7
 8010502:	d833      	bhi.n	801056c <_malloc_r+0x80>
 8010504:	0028      	movs	r0, r5
 8010506:	f000 f883 	bl	8010610 <__malloc_lock>
 801050a:	4e37      	ldr	r6, [pc, #220]	@ (80105e8 <_malloc_r+0xfc>)
 801050c:	6833      	ldr	r3, [r6, #0]
 801050e:	001c      	movs	r4, r3
 8010510:	2c00      	cmp	r4, #0
 8010512:	d12f      	bne.n	8010574 <_malloc_r+0x88>
 8010514:	0039      	movs	r1, r7
 8010516:	0028      	movs	r0, r5
 8010518:	f7ff ffc6 	bl	80104a8 <sbrk_aligned>
 801051c:	0004      	movs	r4, r0
 801051e:	1c43      	adds	r3, r0, #1
 8010520:	d15f      	bne.n	80105e2 <_malloc_r+0xf6>
 8010522:	6834      	ldr	r4, [r6, #0]
 8010524:	9400      	str	r4, [sp, #0]
 8010526:	9b00      	ldr	r3, [sp, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d14a      	bne.n	80105c2 <_malloc_r+0xd6>
 801052c:	2c00      	cmp	r4, #0
 801052e:	d052      	beq.n	80105d6 <_malloc_r+0xea>
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	0028      	movs	r0, r5
 8010534:	18e3      	adds	r3, r4, r3
 8010536:	9900      	ldr	r1, [sp, #0]
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	f000 ff6b 	bl	8011414 <_sbrk_r>
 801053e:	9b01      	ldr	r3, [sp, #4]
 8010540:	4283      	cmp	r3, r0
 8010542:	d148      	bne.n	80105d6 <_malloc_r+0xea>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	0028      	movs	r0, r5
 8010548:	1aff      	subs	r7, r7, r3
 801054a:	0039      	movs	r1, r7
 801054c:	f7ff ffac 	bl	80104a8 <sbrk_aligned>
 8010550:	3001      	adds	r0, #1
 8010552:	d040      	beq.n	80105d6 <_malloc_r+0xea>
 8010554:	6823      	ldr	r3, [r4, #0]
 8010556:	19db      	adds	r3, r3, r7
 8010558:	6023      	str	r3, [r4, #0]
 801055a:	6833      	ldr	r3, [r6, #0]
 801055c:	685a      	ldr	r2, [r3, #4]
 801055e:	2a00      	cmp	r2, #0
 8010560:	d133      	bne.n	80105ca <_malloc_r+0xde>
 8010562:	9b00      	ldr	r3, [sp, #0]
 8010564:	6033      	str	r3, [r6, #0]
 8010566:	e019      	b.n	801059c <_malloc_r+0xb0>
 8010568:	2b00      	cmp	r3, #0
 801056a:	dac9      	bge.n	8010500 <_malloc_r+0x14>
 801056c:	230c      	movs	r3, #12
 801056e:	602b      	str	r3, [r5, #0]
 8010570:	2000      	movs	r0, #0
 8010572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010574:	6821      	ldr	r1, [r4, #0]
 8010576:	1bc9      	subs	r1, r1, r7
 8010578:	d420      	bmi.n	80105bc <_malloc_r+0xd0>
 801057a:	290b      	cmp	r1, #11
 801057c:	d90a      	bls.n	8010594 <_malloc_r+0xa8>
 801057e:	19e2      	adds	r2, r4, r7
 8010580:	6027      	str	r7, [r4, #0]
 8010582:	42a3      	cmp	r3, r4
 8010584:	d104      	bne.n	8010590 <_malloc_r+0xa4>
 8010586:	6032      	str	r2, [r6, #0]
 8010588:	6863      	ldr	r3, [r4, #4]
 801058a:	6011      	str	r1, [r2, #0]
 801058c:	6053      	str	r3, [r2, #4]
 801058e:	e005      	b.n	801059c <_malloc_r+0xb0>
 8010590:	605a      	str	r2, [r3, #4]
 8010592:	e7f9      	b.n	8010588 <_malloc_r+0x9c>
 8010594:	6862      	ldr	r2, [r4, #4]
 8010596:	42a3      	cmp	r3, r4
 8010598:	d10e      	bne.n	80105b8 <_malloc_r+0xcc>
 801059a:	6032      	str	r2, [r6, #0]
 801059c:	0028      	movs	r0, r5
 801059e:	f000 f83f 	bl	8010620 <__malloc_unlock>
 80105a2:	0020      	movs	r0, r4
 80105a4:	2207      	movs	r2, #7
 80105a6:	300b      	adds	r0, #11
 80105a8:	1d23      	adds	r3, r4, #4
 80105aa:	4390      	bics	r0, r2
 80105ac:	1ac2      	subs	r2, r0, r3
 80105ae:	4298      	cmp	r0, r3
 80105b0:	d0df      	beq.n	8010572 <_malloc_r+0x86>
 80105b2:	1a1b      	subs	r3, r3, r0
 80105b4:	50a3      	str	r3, [r4, r2]
 80105b6:	e7dc      	b.n	8010572 <_malloc_r+0x86>
 80105b8:	605a      	str	r2, [r3, #4]
 80105ba:	e7ef      	b.n	801059c <_malloc_r+0xb0>
 80105bc:	0023      	movs	r3, r4
 80105be:	6864      	ldr	r4, [r4, #4]
 80105c0:	e7a6      	b.n	8010510 <_malloc_r+0x24>
 80105c2:	9c00      	ldr	r4, [sp, #0]
 80105c4:	6863      	ldr	r3, [r4, #4]
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	e7ad      	b.n	8010526 <_malloc_r+0x3a>
 80105ca:	001a      	movs	r2, r3
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	42a3      	cmp	r3, r4
 80105d0:	d1fb      	bne.n	80105ca <_malloc_r+0xde>
 80105d2:	2300      	movs	r3, #0
 80105d4:	e7da      	b.n	801058c <_malloc_r+0xa0>
 80105d6:	230c      	movs	r3, #12
 80105d8:	0028      	movs	r0, r5
 80105da:	602b      	str	r3, [r5, #0]
 80105dc:	f000 f820 	bl	8010620 <__malloc_unlock>
 80105e0:	e7c6      	b.n	8010570 <_malloc_r+0x84>
 80105e2:	6007      	str	r7, [r0, #0]
 80105e4:	e7da      	b.n	801059c <_malloc_r+0xb0>
 80105e6:	46c0      	nop			@ (mov r8, r8)
 80105e8:	2000204c 	.word	0x2000204c

080105ec <__ascii_mbtowc>:
 80105ec:	b082      	sub	sp, #8
 80105ee:	2900      	cmp	r1, #0
 80105f0:	d100      	bne.n	80105f4 <__ascii_mbtowc+0x8>
 80105f2:	a901      	add	r1, sp, #4
 80105f4:	1e10      	subs	r0, r2, #0
 80105f6:	d006      	beq.n	8010606 <__ascii_mbtowc+0x1a>
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d006      	beq.n	801060a <__ascii_mbtowc+0x1e>
 80105fc:	7813      	ldrb	r3, [r2, #0]
 80105fe:	600b      	str	r3, [r1, #0]
 8010600:	7810      	ldrb	r0, [r2, #0]
 8010602:	1e43      	subs	r3, r0, #1
 8010604:	4198      	sbcs	r0, r3
 8010606:	b002      	add	sp, #8
 8010608:	4770      	bx	lr
 801060a:	2002      	movs	r0, #2
 801060c:	4240      	negs	r0, r0
 801060e:	e7fa      	b.n	8010606 <__ascii_mbtowc+0x1a>

08010610 <__malloc_lock>:
 8010610:	b510      	push	{r4, lr}
 8010612:	4802      	ldr	r0, [pc, #8]	@ (801061c <__malloc_lock+0xc>)
 8010614:	f7fe fd07 	bl	800f026 <__retarget_lock_acquire_recursive>
 8010618:	bd10      	pop	{r4, pc}
 801061a:	46c0      	nop			@ (mov r8, r8)
 801061c:	20002044 	.word	0x20002044

08010620 <__malloc_unlock>:
 8010620:	b510      	push	{r4, lr}
 8010622:	4802      	ldr	r0, [pc, #8]	@ (801062c <__malloc_unlock+0xc>)
 8010624:	f7fe fd00 	bl	800f028 <__retarget_lock_release_recursive>
 8010628:	bd10      	pop	{r4, pc}
 801062a:	46c0      	nop			@ (mov r8, r8)
 801062c:	20002044 	.word	0x20002044

08010630 <_Balloc>:
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	69c5      	ldr	r5, [r0, #28]
 8010634:	0006      	movs	r6, r0
 8010636:	000c      	movs	r4, r1
 8010638:	2d00      	cmp	r5, #0
 801063a:	d10e      	bne.n	801065a <_Balloc+0x2a>
 801063c:	2010      	movs	r0, #16
 801063e:	f7ff ff29 	bl	8010494 <malloc>
 8010642:	1e02      	subs	r2, r0, #0
 8010644:	61f0      	str	r0, [r6, #28]
 8010646:	d104      	bne.n	8010652 <_Balloc+0x22>
 8010648:	216b      	movs	r1, #107	@ 0x6b
 801064a:	4b19      	ldr	r3, [pc, #100]	@ (80106b0 <_Balloc+0x80>)
 801064c:	4819      	ldr	r0, [pc, #100]	@ (80106b4 <_Balloc+0x84>)
 801064e:	f000 fef3 	bl	8011438 <__assert_func>
 8010652:	6045      	str	r5, [r0, #4]
 8010654:	6085      	str	r5, [r0, #8]
 8010656:	6005      	str	r5, [r0, #0]
 8010658:	60c5      	str	r5, [r0, #12]
 801065a:	69f5      	ldr	r5, [r6, #28]
 801065c:	68eb      	ldr	r3, [r5, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d013      	beq.n	801068a <_Balloc+0x5a>
 8010662:	69f3      	ldr	r3, [r6, #28]
 8010664:	00a2      	lsls	r2, r4, #2
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	189b      	adds	r3, r3, r2
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	2800      	cmp	r0, #0
 801066e:	d118      	bne.n	80106a2 <_Balloc+0x72>
 8010670:	2101      	movs	r1, #1
 8010672:	000d      	movs	r5, r1
 8010674:	40a5      	lsls	r5, r4
 8010676:	1d6a      	adds	r2, r5, #5
 8010678:	0030      	movs	r0, r6
 801067a:	0092      	lsls	r2, r2, #2
 801067c:	f000 fefa 	bl	8011474 <_calloc_r>
 8010680:	2800      	cmp	r0, #0
 8010682:	d00c      	beq.n	801069e <_Balloc+0x6e>
 8010684:	6044      	str	r4, [r0, #4]
 8010686:	6085      	str	r5, [r0, #8]
 8010688:	e00d      	b.n	80106a6 <_Balloc+0x76>
 801068a:	2221      	movs	r2, #33	@ 0x21
 801068c:	2104      	movs	r1, #4
 801068e:	0030      	movs	r0, r6
 8010690:	f000 fef0 	bl	8011474 <_calloc_r>
 8010694:	69f3      	ldr	r3, [r6, #28]
 8010696:	60e8      	str	r0, [r5, #12]
 8010698:	68db      	ldr	r3, [r3, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1e1      	bne.n	8010662 <_Balloc+0x32>
 801069e:	2000      	movs	r0, #0
 80106a0:	bd70      	pop	{r4, r5, r6, pc}
 80106a2:	6802      	ldr	r2, [r0, #0]
 80106a4:	601a      	str	r2, [r3, #0]
 80106a6:	2300      	movs	r3, #0
 80106a8:	6103      	str	r3, [r0, #16]
 80106aa:	60c3      	str	r3, [r0, #12]
 80106ac:	e7f8      	b.n	80106a0 <_Balloc+0x70>
 80106ae:	46c0      	nop			@ (mov r8, r8)
 80106b0:	08011d93 	.word	0x08011d93
 80106b4:	08011e73 	.word	0x08011e73

080106b8 <_Bfree>:
 80106b8:	b570      	push	{r4, r5, r6, lr}
 80106ba:	69c6      	ldr	r6, [r0, #28]
 80106bc:	0005      	movs	r5, r0
 80106be:	000c      	movs	r4, r1
 80106c0:	2e00      	cmp	r6, #0
 80106c2:	d10e      	bne.n	80106e2 <_Bfree+0x2a>
 80106c4:	2010      	movs	r0, #16
 80106c6:	f7ff fee5 	bl	8010494 <malloc>
 80106ca:	1e02      	subs	r2, r0, #0
 80106cc:	61e8      	str	r0, [r5, #28]
 80106ce:	d104      	bne.n	80106da <_Bfree+0x22>
 80106d0:	218f      	movs	r1, #143	@ 0x8f
 80106d2:	4b09      	ldr	r3, [pc, #36]	@ (80106f8 <_Bfree+0x40>)
 80106d4:	4809      	ldr	r0, [pc, #36]	@ (80106fc <_Bfree+0x44>)
 80106d6:	f000 feaf 	bl	8011438 <__assert_func>
 80106da:	6046      	str	r6, [r0, #4]
 80106dc:	6086      	str	r6, [r0, #8]
 80106de:	6006      	str	r6, [r0, #0]
 80106e0:	60c6      	str	r6, [r0, #12]
 80106e2:	2c00      	cmp	r4, #0
 80106e4:	d007      	beq.n	80106f6 <_Bfree+0x3e>
 80106e6:	69eb      	ldr	r3, [r5, #28]
 80106e8:	6862      	ldr	r2, [r4, #4]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	0092      	lsls	r2, r2, #2
 80106ee:	189b      	adds	r3, r3, r2
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	6022      	str	r2, [r4, #0]
 80106f4:	601c      	str	r4, [r3, #0]
 80106f6:	bd70      	pop	{r4, r5, r6, pc}
 80106f8:	08011d93 	.word	0x08011d93
 80106fc:	08011e73 	.word	0x08011e73

08010700 <__multadd>:
 8010700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010702:	000f      	movs	r7, r1
 8010704:	9001      	str	r0, [sp, #4]
 8010706:	000c      	movs	r4, r1
 8010708:	001e      	movs	r6, r3
 801070a:	2000      	movs	r0, #0
 801070c:	690d      	ldr	r5, [r1, #16]
 801070e:	3714      	adds	r7, #20
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	3001      	adds	r0, #1
 8010714:	b299      	uxth	r1, r3
 8010716:	4351      	muls	r1, r2
 8010718:	0c1b      	lsrs	r3, r3, #16
 801071a:	4353      	muls	r3, r2
 801071c:	1989      	adds	r1, r1, r6
 801071e:	0c0e      	lsrs	r6, r1, #16
 8010720:	199b      	adds	r3, r3, r6
 8010722:	0c1e      	lsrs	r6, r3, #16
 8010724:	b289      	uxth	r1, r1
 8010726:	041b      	lsls	r3, r3, #16
 8010728:	185b      	adds	r3, r3, r1
 801072a:	c708      	stmia	r7!, {r3}
 801072c:	4285      	cmp	r5, r0
 801072e:	dcef      	bgt.n	8010710 <__multadd+0x10>
 8010730:	2e00      	cmp	r6, #0
 8010732:	d022      	beq.n	801077a <__multadd+0x7a>
 8010734:	68a3      	ldr	r3, [r4, #8]
 8010736:	42ab      	cmp	r3, r5
 8010738:	dc19      	bgt.n	801076e <__multadd+0x6e>
 801073a:	6861      	ldr	r1, [r4, #4]
 801073c:	9801      	ldr	r0, [sp, #4]
 801073e:	3101      	adds	r1, #1
 8010740:	f7ff ff76 	bl	8010630 <_Balloc>
 8010744:	1e07      	subs	r7, r0, #0
 8010746:	d105      	bne.n	8010754 <__multadd+0x54>
 8010748:	003a      	movs	r2, r7
 801074a:	21ba      	movs	r1, #186	@ 0xba
 801074c:	4b0c      	ldr	r3, [pc, #48]	@ (8010780 <__multadd+0x80>)
 801074e:	480d      	ldr	r0, [pc, #52]	@ (8010784 <__multadd+0x84>)
 8010750:	f000 fe72 	bl	8011438 <__assert_func>
 8010754:	0021      	movs	r1, r4
 8010756:	6922      	ldr	r2, [r4, #16]
 8010758:	310c      	adds	r1, #12
 801075a:	3202      	adds	r2, #2
 801075c:	0092      	lsls	r2, r2, #2
 801075e:	300c      	adds	r0, #12
 8010760:	f7fe fc6e 	bl	800f040 <memcpy>
 8010764:	0021      	movs	r1, r4
 8010766:	9801      	ldr	r0, [sp, #4]
 8010768:	f7ff ffa6 	bl	80106b8 <_Bfree>
 801076c:	003c      	movs	r4, r7
 801076e:	1d2b      	adds	r3, r5, #4
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	18e3      	adds	r3, r4, r3
 8010774:	3501      	adds	r5, #1
 8010776:	605e      	str	r6, [r3, #4]
 8010778:	6125      	str	r5, [r4, #16]
 801077a:	0020      	movs	r0, r4
 801077c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801077e:	46c0      	nop			@ (mov r8, r8)
 8010780:	08011e02 	.word	0x08011e02
 8010784:	08011e73 	.word	0x08011e73

08010788 <__s2b>:
 8010788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801078a:	0007      	movs	r7, r0
 801078c:	0018      	movs	r0, r3
 801078e:	000c      	movs	r4, r1
 8010790:	3008      	adds	r0, #8
 8010792:	2109      	movs	r1, #9
 8010794:	9301      	str	r3, [sp, #4]
 8010796:	0015      	movs	r5, r2
 8010798:	f7ef fd58 	bl	800024c <__divsi3>
 801079c:	2301      	movs	r3, #1
 801079e:	2100      	movs	r1, #0
 80107a0:	4283      	cmp	r3, r0
 80107a2:	db0a      	blt.n	80107ba <__s2b+0x32>
 80107a4:	0038      	movs	r0, r7
 80107a6:	f7ff ff43 	bl	8010630 <_Balloc>
 80107aa:	1e01      	subs	r1, r0, #0
 80107ac:	d108      	bne.n	80107c0 <__s2b+0x38>
 80107ae:	000a      	movs	r2, r1
 80107b0:	4b19      	ldr	r3, [pc, #100]	@ (8010818 <__s2b+0x90>)
 80107b2:	481a      	ldr	r0, [pc, #104]	@ (801081c <__s2b+0x94>)
 80107b4:	31d3      	adds	r1, #211	@ 0xd3
 80107b6:	f000 fe3f 	bl	8011438 <__assert_func>
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	3101      	adds	r1, #1
 80107be:	e7ef      	b.n	80107a0 <__s2b+0x18>
 80107c0:	9b08      	ldr	r3, [sp, #32]
 80107c2:	6143      	str	r3, [r0, #20]
 80107c4:	2301      	movs	r3, #1
 80107c6:	6103      	str	r3, [r0, #16]
 80107c8:	2d09      	cmp	r5, #9
 80107ca:	dd18      	ble.n	80107fe <__s2b+0x76>
 80107cc:	0023      	movs	r3, r4
 80107ce:	3309      	adds	r3, #9
 80107d0:	001e      	movs	r6, r3
 80107d2:	9300      	str	r3, [sp, #0]
 80107d4:	1964      	adds	r4, r4, r5
 80107d6:	7833      	ldrb	r3, [r6, #0]
 80107d8:	220a      	movs	r2, #10
 80107da:	0038      	movs	r0, r7
 80107dc:	3b30      	subs	r3, #48	@ 0x30
 80107de:	f7ff ff8f 	bl	8010700 <__multadd>
 80107e2:	3601      	adds	r6, #1
 80107e4:	0001      	movs	r1, r0
 80107e6:	42a6      	cmp	r6, r4
 80107e8:	d1f5      	bne.n	80107d6 <__s2b+0x4e>
 80107ea:	002c      	movs	r4, r5
 80107ec:	9b00      	ldr	r3, [sp, #0]
 80107ee:	3c08      	subs	r4, #8
 80107f0:	191c      	adds	r4, r3, r4
 80107f2:	002e      	movs	r6, r5
 80107f4:	9b01      	ldr	r3, [sp, #4]
 80107f6:	429e      	cmp	r6, r3
 80107f8:	db04      	blt.n	8010804 <__s2b+0x7c>
 80107fa:	0008      	movs	r0, r1
 80107fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107fe:	2509      	movs	r5, #9
 8010800:	340a      	adds	r4, #10
 8010802:	e7f6      	b.n	80107f2 <__s2b+0x6a>
 8010804:	1b63      	subs	r3, r4, r5
 8010806:	5d9b      	ldrb	r3, [r3, r6]
 8010808:	220a      	movs	r2, #10
 801080a:	0038      	movs	r0, r7
 801080c:	3b30      	subs	r3, #48	@ 0x30
 801080e:	f7ff ff77 	bl	8010700 <__multadd>
 8010812:	3601      	adds	r6, #1
 8010814:	0001      	movs	r1, r0
 8010816:	e7ed      	b.n	80107f4 <__s2b+0x6c>
 8010818:	08011e02 	.word	0x08011e02
 801081c:	08011e73 	.word	0x08011e73

08010820 <__hi0bits>:
 8010820:	2280      	movs	r2, #128	@ 0x80
 8010822:	0003      	movs	r3, r0
 8010824:	0252      	lsls	r2, r2, #9
 8010826:	2000      	movs	r0, #0
 8010828:	4293      	cmp	r3, r2
 801082a:	d201      	bcs.n	8010830 <__hi0bits+0x10>
 801082c:	041b      	lsls	r3, r3, #16
 801082e:	3010      	adds	r0, #16
 8010830:	2280      	movs	r2, #128	@ 0x80
 8010832:	0452      	lsls	r2, r2, #17
 8010834:	4293      	cmp	r3, r2
 8010836:	d201      	bcs.n	801083c <__hi0bits+0x1c>
 8010838:	3008      	adds	r0, #8
 801083a:	021b      	lsls	r3, r3, #8
 801083c:	2280      	movs	r2, #128	@ 0x80
 801083e:	0552      	lsls	r2, r2, #21
 8010840:	4293      	cmp	r3, r2
 8010842:	d201      	bcs.n	8010848 <__hi0bits+0x28>
 8010844:	3004      	adds	r0, #4
 8010846:	011b      	lsls	r3, r3, #4
 8010848:	2280      	movs	r2, #128	@ 0x80
 801084a:	05d2      	lsls	r2, r2, #23
 801084c:	4293      	cmp	r3, r2
 801084e:	d201      	bcs.n	8010854 <__hi0bits+0x34>
 8010850:	3002      	adds	r0, #2
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	2b00      	cmp	r3, #0
 8010856:	db03      	blt.n	8010860 <__hi0bits+0x40>
 8010858:	3001      	adds	r0, #1
 801085a:	4213      	tst	r3, r2
 801085c:	d100      	bne.n	8010860 <__hi0bits+0x40>
 801085e:	2020      	movs	r0, #32
 8010860:	4770      	bx	lr

08010862 <__lo0bits>:
 8010862:	6803      	ldr	r3, [r0, #0]
 8010864:	0001      	movs	r1, r0
 8010866:	2207      	movs	r2, #7
 8010868:	0018      	movs	r0, r3
 801086a:	4010      	ands	r0, r2
 801086c:	4213      	tst	r3, r2
 801086e:	d00d      	beq.n	801088c <__lo0bits+0x2a>
 8010870:	3a06      	subs	r2, #6
 8010872:	2000      	movs	r0, #0
 8010874:	4213      	tst	r3, r2
 8010876:	d105      	bne.n	8010884 <__lo0bits+0x22>
 8010878:	3002      	adds	r0, #2
 801087a:	4203      	tst	r3, r0
 801087c:	d003      	beq.n	8010886 <__lo0bits+0x24>
 801087e:	40d3      	lsrs	r3, r2
 8010880:	0010      	movs	r0, r2
 8010882:	600b      	str	r3, [r1, #0]
 8010884:	4770      	bx	lr
 8010886:	089b      	lsrs	r3, r3, #2
 8010888:	600b      	str	r3, [r1, #0]
 801088a:	e7fb      	b.n	8010884 <__lo0bits+0x22>
 801088c:	b29a      	uxth	r2, r3
 801088e:	2a00      	cmp	r2, #0
 8010890:	d101      	bne.n	8010896 <__lo0bits+0x34>
 8010892:	2010      	movs	r0, #16
 8010894:	0c1b      	lsrs	r3, r3, #16
 8010896:	b2da      	uxtb	r2, r3
 8010898:	2a00      	cmp	r2, #0
 801089a:	d101      	bne.n	80108a0 <__lo0bits+0x3e>
 801089c:	3008      	adds	r0, #8
 801089e:	0a1b      	lsrs	r3, r3, #8
 80108a0:	071a      	lsls	r2, r3, #28
 80108a2:	d101      	bne.n	80108a8 <__lo0bits+0x46>
 80108a4:	3004      	adds	r0, #4
 80108a6:	091b      	lsrs	r3, r3, #4
 80108a8:	079a      	lsls	r2, r3, #30
 80108aa:	d101      	bne.n	80108b0 <__lo0bits+0x4e>
 80108ac:	3002      	adds	r0, #2
 80108ae:	089b      	lsrs	r3, r3, #2
 80108b0:	07da      	lsls	r2, r3, #31
 80108b2:	d4e9      	bmi.n	8010888 <__lo0bits+0x26>
 80108b4:	3001      	adds	r0, #1
 80108b6:	085b      	lsrs	r3, r3, #1
 80108b8:	d1e6      	bne.n	8010888 <__lo0bits+0x26>
 80108ba:	2020      	movs	r0, #32
 80108bc:	e7e2      	b.n	8010884 <__lo0bits+0x22>
	...

080108c0 <__i2b>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	000c      	movs	r4, r1
 80108c4:	2101      	movs	r1, #1
 80108c6:	f7ff feb3 	bl	8010630 <_Balloc>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	d107      	bne.n	80108de <__i2b+0x1e>
 80108ce:	2146      	movs	r1, #70	@ 0x46
 80108d0:	4c05      	ldr	r4, [pc, #20]	@ (80108e8 <__i2b+0x28>)
 80108d2:	0002      	movs	r2, r0
 80108d4:	4b05      	ldr	r3, [pc, #20]	@ (80108ec <__i2b+0x2c>)
 80108d6:	0020      	movs	r0, r4
 80108d8:	31ff      	adds	r1, #255	@ 0xff
 80108da:	f000 fdad 	bl	8011438 <__assert_func>
 80108de:	2301      	movs	r3, #1
 80108e0:	6144      	str	r4, [r0, #20]
 80108e2:	6103      	str	r3, [r0, #16]
 80108e4:	bd10      	pop	{r4, pc}
 80108e6:	46c0      	nop			@ (mov r8, r8)
 80108e8:	08011e73 	.word	0x08011e73
 80108ec:	08011e02 	.word	0x08011e02

080108f0 <__multiply>:
 80108f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108f2:	0014      	movs	r4, r2
 80108f4:	690a      	ldr	r2, [r1, #16]
 80108f6:	6923      	ldr	r3, [r4, #16]
 80108f8:	000d      	movs	r5, r1
 80108fa:	b089      	sub	sp, #36	@ 0x24
 80108fc:	429a      	cmp	r2, r3
 80108fe:	db02      	blt.n	8010906 <__multiply+0x16>
 8010900:	0023      	movs	r3, r4
 8010902:	000c      	movs	r4, r1
 8010904:	001d      	movs	r5, r3
 8010906:	6927      	ldr	r7, [r4, #16]
 8010908:	692e      	ldr	r6, [r5, #16]
 801090a:	6861      	ldr	r1, [r4, #4]
 801090c:	19bb      	adds	r3, r7, r6
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	68a3      	ldr	r3, [r4, #8]
 8010912:	19ba      	adds	r2, r7, r6
 8010914:	4293      	cmp	r3, r2
 8010916:	da00      	bge.n	801091a <__multiply+0x2a>
 8010918:	3101      	adds	r1, #1
 801091a:	f7ff fe89 	bl	8010630 <_Balloc>
 801091e:	4684      	mov	ip, r0
 8010920:	2800      	cmp	r0, #0
 8010922:	d106      	bne.n	8010932 <__multiply+0x42>
 8010924:	21b1      	movs	r1, #177	@ 0xb1
 8010926:	4662      	mov	r2, ip
 8010928:	4b44      	ldr	r3, [pc, #272]	@ (8010a3c <__multiply+0x14c>)
 801092a:	4845      	ldr	r0, [pc, #276]	@ (8010a40 <__multiply+0x150>)
 801092c:	0049      	lsls	r1, r1, #1
 801092e:	f000 fd83 	bl	8011438 <__assert_func>
 8010932:	0002      	movs	r2, r0
 8010934:	19bb      	adds	r3, r7, r6
 8010936:	3214      	adds	r2, #20
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	18d3      	adds	r3, r2, r3
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	2100      	movs	r1, #0
 8010940:	0013      	movs	r3, r2
 8010942:	9801      	ldr	r0, [sp, #4]
 8010944:	4283      	cmp	r3, r0
 8010946:	d328      	bcc.n	801099a <__multiply+0xaa>
 8010948:	0023      	movs	r3, r4
 801094a:	00bf      	lsls	r7, r7, #2
 801094c:	3314      	adds	r3, #20
 801094e:	9304      	str	r3, [sp, #16]
 8010950:	3514      	adds	r5, #20
 8010952:	19db      	adds	r3, r3, r7
 8010954:	00b6      	lsls	r6, r6, #2
 8010956:	9302      	str	r3, [sp, #8]
 8010958:	19ab      	adds	r3, r5, r6
 801095a:	9307      	str	r3, [sp, #28]
 801095c:	2304      	movs	r3, #4
 801095e:	9305      	str	r3, [sp, #20]
 8010960:	0023      	movs	r3, r4
 8010962:	9902      	ldr	r1, [sp, #8]
 8010964:	3315      	adds	r3, #21
 8010966:	4299      	cmp	r1, r3
 8010968:	d305      	bcc.n	8010976 <__multiply+0x86>
 801096a:	1b0c      	subs	r4, r1, r4
 801096c:	3c15      	subs	r4, #21
 801096e:	08a4      	lsrs	r4, r4, #2
 8010970:	3401      	adds	r4, #1
 8010972:	00a3      	lsls	r3, r4, #2
 8010974:	9305      	str	r3, [sp, #20]
 8010976:	9b07      	ldr	r3, [sp, #28]
 8010978:	429d      	cmp	r5, r3
 801097a:	d310      	bcc.n	801099e <__multiply+0xae>
 801097c:	9b00      	ldr	r3, [sp, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd05      	ble.n	801098e <__multiply+0x9e>
 8010982:	9b01      	ldr	r3, [sp, #4]
 8010984:	3b04      	subs	r3, #4
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d052      	beq.n	8010a34 <__multiply+0x144>
 801098e:	4663      	mov	r3, ip
 8010990:	4660      	mov	r0, ip
 8010992:	9a00      	ldr	r2, [sp, #0]
 8010994:	611a      	str	r2, [r3, #16]
 8010996:	b009      	add	sp, #36	@ 0x24
 8010998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801099a:	c302      	stmia	r3!, {r1}
 801099c:	e7d1      	b.n	8010942 <__multiply+0x52>
 801099e:	682c      	ldr	r4, [r5, #0]
 80109a0:	b2a4      	uxth	r4, r4
 80109a2:	2c00      	cmp	r4, #0
 80109a4:	d01f      	beq.n	80109e6 <__multiply+0xf6>
 80109a6:	2300      	movs	r3, #0
 80109a8:	0017      	movs	r7, r2
 80109aa:	9e04      	ldr	r6, [sp, #16]
 80109ac:	9303      	str	r3, [sp, #12]
 80109ae:	ce08      	ldmia	r6!, {r3}
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	9306      	str	r3, [sp, #24]
 80109b4:	466b      	mov	r3, sp
 80109b6:	8b1b      	ldrh	r3, [r3, #24]
 80109b8:	b288      	uxth	r0, r1
 80109ba:	4363      	muls	r3, r4
 80109bc:	181b      	adds	r3, r3, r0
 80109be:	9803      	ldr	r0, [sp, #12]
 80109c0:	0c09      	lsrs	r1, r1, #16
 80109c2:	181b      	adds	r3, r3, r0
 80109c4:	9806      	ldr	r0, [sp, #24]
 80109c6:	0c00      	lsrs	r0, r0, #16
 80109c8:	4360      	muls	r0, r4
 80109ca:	1840      	adds	r0, r0, r1
 80109cc:	0c19      	lsrs	r1, r3, #16
 80109ce:	1841      	adds	r1, r0, r1
 80109d0:	0c08      	lsrs	r0, r1, #16
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	0409      	lsls	r1, r1, #16
 80109d6:	4319      	orrs	r1, r3
 80109d8:	9b02      	ldr	r3, [sp, #8]
 80109da:	9003      	str	r0, [sp, #12]
 80109dc:	c702      	stmia	r7!, {r1}
 80109de:	42b3      	cmp	r3, r6
 80109e0:	d8e5      	bhi.n	80109ae <__multiply+0xbe>
 80109e2:	9b05      	ldr	r3, [sp, #20]
 80109e4:	50d0      	str	r0, [r2, r3]
 80109e6:	682c      	ldr	r4, [r5, #0]
 80109e8:	0c24      	lsrs	r4, r4, #16
 80109ea:	d020      	beq.n	8010a2e <__multiply+0x13e>
 80109ec:	2100      	movs	r1, #0
 80109ee:	0010      	movs	r0, r2
 80109f0:	6813      	ldr	r3, [r2, #0]
 80109f2:	9e04      	ldr	r6, [sp, #16]
 80109f4:	9103      	str	r1, [sp, #12]
 80109f6:	6831      	ldr	r1, [r6, #0]
 80109f8:	6807      	ldr	r7, [r0, #0]
 80109fa:	b289      	uxth	r1, r1
 80109fc:	4361      	muls	r1, r4
 80109fe:	0c3f      	lsrs	r7, r7, #16
 8010a00:	19c9      	adds	r1, r1, r7
 8010a02:	9f03      	ldr	r7, [sp, #12]
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	19c9      	adds	r1, r1, r7
 8010a08:	040f      	lsls	r7, r1, #16
 8010a0a:	431f      	orrs	r7, r3
 8010a0c:	6007      	str	r7, [r0, #0]
 8010a0e:	ce80      	ldmia	r6!, {r7}
 8010a10:	6843      	ldr	r3, [r0, #4]
 8010a12:	0c3f      	lsrs	r7, r7, #16
 8010a14:	4367      	muls	r7, r4
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	0c09      	lsrs	r1, r1, #16
 8010a1a:	18fb      	adds	r3, r7, r3
 8010a1c:	185b      	adds	r3, r3, r1
 8010a1e:	0c19      	lsrs	r1, r3, #16
 8010a20:	9103      	str	r1, [sp, #12]
 8010a22:	9902      	ldr	r1, [sp, #8]
 8010a24:	3004      	adds	r0, #4
 8010a26:	42b1      	cmp	r1, r6
 8010a28:	d8e5      	bhi.n	80109f6 <__multiply+0x106>
 8010a2a:	9905      	ldr	r1, [sp, #20]
 8010a2c:	5053      	str	r3, [r2, r1]
 8010a2e:	3504      	adds	r5, #4
 8010a30:	3204      	adds	r2, #4
 8010a32:	e7a0      	b.n	8010976 <__multiply+0x86>
 8010a34:	9b00      	ldr	r3, [sp, #0]
 8010a36:	3b01      	subs	r3, #1
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	e79f      	b.n	801097c <__multiply+0x8c>
 8010a3c:	08011e02 	.word	0x08011e02
 8010a40:	08011e73 	.word	0x08011e73

08010a44 <__pow5mult>:
 8010a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a46:	2303      	movs	r3, #3
 8010a48:	0015      	movs	r5, r2
 8010a4a:	0007      	movs	r7, r0
 8010a4c:	000e      	movs	r6, r1
 8010a4e:	401a      	ands	r2, r3
 8010a50:	421d      	tst	r5, r3
 8010a52:	d008      	beq.n	8010a66 <__pow5mult+0x22>
 8010a54:	4925      	ldr	r1, [pc, #148]	@ (8010aec <__pow5mult+0xa8>)
 8010a56:	3a01      	subs	r2, #1
 8010a58:	0092      	lsls	r2, r2, #2
 8010a5a:	5852      	ldr	r2, [r2, r1]
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	0031      	movs	r1, r6
 8010a60:	f7ff fe4e 	bl	8010700 <__multadd>
 8010a64:	0006      	movs	r6, r0
 8010a66:	10ad      	asrs	r5, r5, #2
 8010a68:	d03d      	beq.n	8010ae6 <__pow5mult+0xa2>
 8010a6a:	69fc      	ldr	r4, [r7, #28]
 8010a6c:	2c00      	cmp	r4, #0
 8010a6e:	d10f      	bne.n	8010a90 <__pow5mult+0x4c>
 8010a70:	2010      	movs	r0, #16
 8010a72:	f7ff fd0f 	bl	8010494 <malloc>
 8010a76:	1e02      	subs	r2, r0, #0
 8010a78:	61f8      	str	r0, [r7, #28]
 8010a7a:	d105      	bne.n	8010a88 <__pow5mult+0x44>
 8010a7c:	21b4      	movs	r1, #180	@ 0xb4
 8010a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010af0 <__pow5mult+0xac>)
 8010a80:	481c      	ldr	r0, [pc, #112]	@ (8010af4 <__pow5mult+0xb0>)
 8010a82:	31ff      	adds	r1, #255	@ 0xff
 8010a84:	f000 fcd8 	bl	8011438 <__assert_func>
 8010a88:	6044      	str	r4, [r0, #4]
 8010a8a:	6084      	str	r4, [r0, #8]
 8010a8c:	6004      	str	r4, [r0, #0]
 8010a8e:	60c4      	str	r4, [r0, #12]
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	689c      	ldr	r4, [r3, #8]
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	2c00      	cmp	r4, #0
 8010a98:	d108      	bne.n	8010aac <__pow5mult+0x68>
 8010a9a:	0038      	movs	r0, r7
 8010a9c:	4916      	ldr	r1, [pc, #88]	@ (8010af8 <__pow5mult+0xb4>)
 8010a9e:	f7ff ff0f 	bl	80108c0 <__i2b>
 8010aa2:	9b01      	ldr	r3, [sp, #4]
 8010aa4:	0004      	movs	r4, r0
 8010aa6:	6098      	str	r0, [r3, #8]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	6003      	str	r3, [r0, #0]
 8010aac:	2301      	movs	r3, #1
 8010aae:	421d      	tst	r5, r3
 8010ab0:	d00a      	beq.n	8010ac8 <__pow5mult+0x84>
 8010ab2:	0031      	movs	r1, r6
 8010ab4:	0022      	movs	r2, r4
 8010ab6:	0038      	movs	r0, r7
 8010ab8:	f7ff ff1a 	bl	80108f0 <__multiply>
 8010abc:	0031      	movs	r1, r6
 8010abe:	9001      	str	r0, [sp, #4]
 8010ac0:	0038      	movs	r0, r7
 8010ac2:	f7ff fdf9 	bl	80106b8 <_Bfree>
 8010ac6:	9e01      	ldr	r6, [sp, #4]
 8010ac8:	106d      	asrs	r5, r5, #1
 8010aca:	d00c      	beq.n	8010ae6 <__pow5mult+0xa2>
 8010acc:	6820      	ldr	r0, [r4, #0]
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d107      	bne.n	8010ae2 <__pow5mult+0x9e>
 8010ad2:	0022      	movs	r2, r4
 8010ad4:	0021      	movs	r1, r4
 8010ad6:	0038      	movs	r0, r7
 8010ad8:	f7ff ff0a 	bl	80108f0 <__multiply>
 8010adc:	2300      	movs	r3, #0
 8010ade:	6020      	str	r0, [r4, #0]
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	0004      	movs	r4, r0
 8010ae4:	e7e2      	b.n	8010aac <__pow5mult+0x68>
 8010ae6:	0030      	movs	r0, r6
 8010ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010aea:	46c0      	nop			@ (mov r8, r8)
 8010aec:	08011f70 	.word	0x08011f70
 8010af0:	08011d93 	.word	0x08011d93
 8010af4:	08011e73 	.word	0x08011e73
 8010af8:	00000271 	.word	0x00000271

08010afc <__lshift>:
 8010afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010afe:	000c      	movs	r4, r1
 8010b00:	0016      	movs	r6, r2
 8010b02:	6923      	ldr	r3, [r4, #16]
 8010b04:	1157      	asrs	r7, r2, #5
 8010b06:	b085      	sub	sp, #20
 8010b08:	18fb      	adds	r3, r7, r3
 8010b0a:	9301      	str	r3, [sp, #4]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	6849      	ldr	r1, [r1, #4]
 8010b12:	68a3      	ldr	r3, [r4, #8]
 8010b14:	9002      	str	r0, [sp, #8]
 8010b16:	9a00      	ldr	r2, [sp, #0]
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	db10      	blt.n	8010b3e <__lshift+0x42>
 8010b1c:	9802      	ldr	r0, [sp, #8]
 8010b1e:	f7ff fd87 	bl	8010630 <_Balloc>
 8010b22:	2300      	movs	r3, #0
 8010b24:	0001      	movs	r1, r0
 8010b26:	0005      	movs	r5, r0
 8010b28:	001a      	movs	r2, r3
 8010b2a:	3114      	adds	r1, #20
 8010b2c:	4298      	cmp	r0, r3
 8010b2e:	d10c      	bne.n	8010b4a <__lshift+0x4e>
 8010b30:	21ef      	movs	r1, #239	@ 0xef
 8010b32:	002a      	movs	r2, r5
 8010b34:	4b25      	ldr	r3, [pc, #148]	@ (8010bcc <__lshift+0xd0>)
 8010b36:	4826      	ldr	r0, [pc, #152]	@ (8010bd0 <__lshift+0xd4>)
 8010b38:	0049      	lsls	r1, r1, #1
 8010b3a:	f000 fc7d 	bl	8011438 <__assert_func>
 8010b3e:	3101      	adds	r1, #1
 8010b40:	005b      	lsls	r3, r3, #1
 8010b42:	e7e8      	b.n	8010b16 <__lshift+0x1a>
 8010b44:	0098      	lsls	r0, r3, #2
 8010b46:	500a      	str	r2, [r1, r0]
 8010b48:	3301      	adds	r3, #1
 8010b4a:	42bb      	cmp	r3, r7
 8010b4c:	dbfa      	blt.n	8010b44 <__lshift+0x48>
 8010b4e:	43fb      	mvns	r3, r7
 8010b50:	17db      	asrs	r3, r3, #31
 8010b52:	401f      	ands	r7, r3
 8010b54:	00bf      	lsls	r7, r7, #2
 8010b56:	0023      	movs	r3, r4
 8010b58:	201f      	movs	r0, #31
 8010b5a:	19c9      	adds	r1, r1, r7
 8010b5c:	0037      	movs	r7, r6
 8010b5e:	6922      	ldr	r2, [r4, #16]
 8010b60:	3314      	adds	r3, #20
 8010b62:	0092      	lsls	r2, r2, #2
 8010b64:	189a      	adds	r2, r3, r2
 8010b66:	4007      	ands	r7, r0
 8010b68:	4206      	tst	r6, r0
 8010b6a:	d029      	beq.n	8010bc0 <__lshift+0xc4>
 8010b6c:	3001      	adds	r0, #1
 8010b6e:	1bc0      	subs	r0, r0, r7
 8010b70:	9003      	str	r0, [sp, #12]
 8010b72:	468c      	mov	ip, r1
 8010b74:	2000      	movs	r0, #0
 8010b76:	681e      	ldr	r6, [r3, #0]
 8010b78:	40be      	lsls	r6, r7
 8010b7a:	4306      	orrs	r6, r0
 8010b7c:	4660      	mov	r0, ip
 8010b7e:	c040      	stmia	r0!, {r6}
 8010b80:	4684      	mov	ip, r0
 8010b82:	9e03      	ldr	r6, [sp, #12]
 8010b84:	cb01      	ldmia	r3!, {r0}
 8010b86:	40f0      	lsrs	r0, r6
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d8f4      	bhi.n	8010b76 <__lshift+0x7a>
 8010b8c:	0026      	movs	r6, r4
 8010b8e:	3615      	adds	r6, #21
 8010b90:	2304      	movs	r3, #4
 8010b92:	42b2      	cmp	r2, r6
 8010b94:	d304      	bcc.n	8010ba0 <__lshift+0xa4>
 8010b96:	1b13      	subs	r3, r2, r4
 8010b98:	3b15      	subs	r3, #21
 8010b9a:	089b      	lsrs	r3, r3, #2
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	50c8      	str	r0, [r1, r3]
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d002      	beq.n	8010bac <__lshift+0xb0>
 8010ba6:	9b01      	ldr	r3, [sp, #4]
 8010ba8:	3302      	adds	r3, #2
 8010baa:	9300      	str	r3, [sp, #0]
 8010bac:	9b00      	ldr	r3, [sp, #0]
 8010bae:	9802      	ldr	r0, [sp, #8]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	0021      	movs	r1, r4
 8010bb4:	612b      	str	r3, [r5, #16]
 8010bb6:	f7ff fd7f 	bl	80106b8 <_Bfree>
 8010bba:	0028      	movs	r0, r5
 8010bbc:	b005      	add	sp, #20
 8010bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc0:	cb01      	ldmia	r3!, {r0}
 8010bc2:	c101      	stmia	r1!, {r0}
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d8fb      	bhi.n	8010bc0 <__lshift+0xc4>
 8010bc8:	e7f0      	b.n	8010bac <__lshift+0xb0>
 8010bca:	46c0      	nop			@ (mov r8, r8)
 8010bcc:	08011e02 	.word	0x08011e02
 8010bd0:	08011e73 	.word	0x08011e73

08010bd4 <__mcmp>:
 8010bd4:	b530      	push	{r4, r5, lr}
 8010bd6:	690b      	ldr	r3, [r1, #16]
 8010bd8:	6904      	ldr	r4, [r0, #16]
 8010bda:	0002      	movs	r2, r0
 8010bdc:	1ae0      	subs	r0, r4, r3
 8010bde:	429c      	cmp	r4, r3
 8010be0:	d10f      	bne.n	8010c02 <__mcmp+0x2e>
 8010be2:	3214      	adds	r2, #20
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	3114      	adds	r1, #20
 8010be8:	0014      	movs	r4, r2
 8010bea:	18c9      	adds	r1, r1, r3
 8010bec:	18d2      	adds	r2, r2, r3
 8010bee:	3a04      	subs	r2, #4
 8010bf0:	3904      	subs	r1, #4
 8010bf2:	6815      	ldr	r5, [r2, #0]
 8010bf4:	680b      	ldr	r3, [r1, #0]
 8010bf6:	429d      	cmp	r5, r3
 8010bf8:	d004      	beq.n	8010c04 <__mcmp+0x30>
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	429d      	cmp	r5, r3
 8010bfe:	d200      	bcs.n	8010c02 <__mcmp+0x2e>
 8010c00:	3802      	subs	r0, #2
 8010c02:	bd30      	pop	{r4, r5, pc}
 8010c04:	4294      	cmp	r4, r2
 8010c06:	d3f2      	bcc.n	8010bee <__mcmp+0x1a>
 8010c08:	e7fb      	b.n	8010c02 <__mcmp+0x2e>
	...

08010c0c <__mdiff>:
 8010c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c0e:	000c      	movs	r4, r1
 8010c10:	b087      	sub	sp, #28
 8010c12:	9000      	str	r0, [sp, #0]
 8010c14:	0011      	movs	r1, r2
 8010c16:	0020      	movs	r0, r4
 8010c18:	0017      	movs	r7, r2
 8010c1a:	f7ff ffdb 	bl	8010bd4 <__mcmp>
 8010c1e:	1e05      	subs	r5, r0, #0
 8010c20:	d110      	bne.n	8010c44 <__mdiff+0x38>
 8010c22:	0001      	movs	r1, r0
 8010c24:	9800      	ldr	r0, [sp, #0]
 8010c26:	f7ff fd03 	bl	8010630 <_Balloc>
 8010c2a:	1e02      	subs	r2, r0, #0
 8010c2c:	d104      	bne.n	8010c38 <__mdiff+0x2c>
 8010c2e:	4b40      	ldr	r3, [pc, #256]	@ (8010d30 <__mdiff+0x124>)
 8010c30:	4840      	ldr	r0, [pc, #256]	@ (8010d34 <__mdiff+0x128>)
 8010c32:	4941      	ldr	r1, [pc, #260]	@ (8010d38 <__mdiff+0x12c>)
 8010c34:	f000 fc00 	bl	8011438 <__assert_func>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	6145      	str	r5, [r0, #20]
 8010c3c:	6103      	str	r3, [r0, #16]
 8010c3e:	0010      	movs	r0, r2
 8010c40:	b007      	add	sp, #28
 8010c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c44:	2600      	movs	r6, #0
 8010c46:	42b0      	cmp	r0, r6
 8010c48:	da03      	bge.n	8010c52 <__mdiff+0x46>
 8010c4a:	0023      	movs	r3, r4
 8010c4c:	003c      	movs	r4, r7
 8010c4e:	001f      	movs	r7, r3
 8010c50:	3601      	adds	r6, #1
 8010c52:	6861      	ldr	r1, [r4, #4]
 8010c54:	9800      	ldr	r0, [sp, #0]
 8010c56:	f7ff fceb 	bl	8010630 <_Balloc>
 8010c5a:	1e02      	subs	r2, r0, #0
 8010c5c:	d103      	bne.n	8010c66 <__mdiff+0x5a>
 8010c5e:	4b34      	ldr	r3, [pc, #208]	@ (8010d30 <__mdiff+0x124>)
 8010c60:	4834      	ldr	r0, [pc, #208]	@ (8010d34 <__mdiff+0x128>)
 8010c62:	4936      	ldr	r1, [pc, #216]	@ (8010d3c <__mdiff+0x130>)
 8010c64:	e7e6      	b.n	8010c34 <__mdiff+0x28>
 8010c66:	6923      	ldr	r3, [r4, #16]
 8010c68:	3414      	adds	r4, #20
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	18e3      	adds	r3, r4, r3
 8010c70:	0021      	movs	r1, r4
 8010c72:	9401      	str	r4, [sp, #4]
 8010c74:	003c      	movs	r4, r7
 8010c76:	9302      	str	r3, [sp, #8]
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	3414      	adds	r4, #20
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	18e3      	adds	r3, r4, r3
 8010c80:	9303      	str	r3, [sp, #12]
 8010c82:	0003      	movs	r3, r0
 8010c84:	60c6      	str	r6, [r0, #12]
 8010c86:	468c      	mov	ip, r1
 8010c88:	2000      	movs	r0, #0
 8010c8a:	3314      	adds	r3, #20
 8010c8c:	9304      	str	r3, [sp, #16]
 8010c8e:	9305      	str	r3, [sp, #20]
 8010c90:	4663      	mov	r3, ip
 8010c92:	cb20      	ldmia	r3!, {r5}
 8010c94:	b2a9      	uxth	r1, r5
 8010c96:	000e      	movs	r6, r1
 8010c98:	469c      	mov	ip, r3
 8010c9a:	cc08      	ldmia	r4!, {r3}
 8010c9c:	0c2d      	lsrs	r5, r5, #16
 8010c9e:	b299      	uxth	r1, r3
 8010ca0:	1a71      	subs	r1, r6, r1
 8010ca2:	1809      	adds	r1, r1, r0
 8010ca4:	0c1b      	lsrs	r3, r3, #16
 8010ca6:	1408      	asrs	r0, r1, #16
 8010ca8:	1aeb      	subs	r3, r5, r3
 8010caa:	181b      	adds	r3, r3, r0
 8010cac:	1418      	asrs	r0, r3, #16
 8010cae:	b289      	uxth	r1, r1
 8010cb0:	041b      	lsls	r3, r3, #16
 8010cb2:	4319      	orrs	r1, r3
 8010cb4:	9b05      	ldr	r3, [sp, #20]
 8010cb6:	c302      	stmia	r3!, {r1}
 8010cb8:	9305      	str	r3, [sp, #20]
 8010cba:	9b03      	ldr	r3, [sp, #12]
 8010cbc:	42a3      	cmp	r3, r4
 8010cbe:	d8e7      	bhi.n	8010c90 <__mdiff+0x84>
 8010cc0:	0039      	movs	r1, r7
 8010cc2:	9c03      	ldr	r4, [sp, #12]
 8010cc4:	3115      	adds	r1, #21
 8010cc6:	2304      	movs	r3, #4
 8010cc8:	428c      	cmp	r4, r1
 8010cca:	d304      	bcc.n	8010cd6 <__mdiff+0xca>
 8010ccc:	1be3      	subs	r3, r4, r7
 8010cce:	3b15      	subs	r3, #21
 8010cd0:	089b      	lsrs	r3, r3, #2
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	9901      	ldr	r1, [sp, #4]
 8010cd8:	18cd      	adds	r5, r1, r3
 8010cda:	9904      	ldr	r1, [sp, #16]
 8010cdc:	002e      	movs	r6, r5
 8010cde:	18cb      	adds	r3, r1, r3
 8010ce0:	001f      	movs	r7, r3
 8010ce2:	9902      	ldr	r1, [sp, #8]
 8010ce4:	428e      	cmp	r6, r1
 8010ce6:	d311      	bcc.n	8010d0c <__mdiff+0x100>
 8010ce8:	9c02      	ldr	r4, [sp, #8]
 8010cea:	1ee9      	subs	r1, r5, #3
 8010cec:	2000      	movs	r0, #0
 8010cee:	428c      	cmp	r4, r1
 8010cf0:	d304      	bcc.n	8010cfc <__mdiff+0xf0>
 8010cf2:	0021      	movs	r1, r4
 8010cf4:	3103      	adds	r1, #3
 8010cf6:	1b49      	subs	r1, r1, r5
 8010cf8:	0889      	lsrs	r1, r1, #2
 8010cfa:	0088      	lsls	r0, r1, #2
 8010cfc:	181b      	adds	r3, r3, r0
 8010cfe:	3b04      	subs	r3, #4
 8010d00:	6819      	ldr	r1, [r3, #0]
 8010d02:	2900      	cmp	r1, #0
 8010d04:	d010      	beq.n	8010d28 <__mdiff+0x11c>
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	6113      	str	r3, [r2, #16]
 8010d0a:	e798      	b.n	8010c3e <__mdiff+0x32>
 8010d0c:	4684      	mov	ip, r0
 8010d0e:	ce02      	ldmia	r6!, {r1}
 8010d10:	b288      	uxth	r0, r1
 8010d12:	4460      	add	r0, ip
 8010d14:	1400      	asrs	r0, r0, #16
 8010d16:	0c0c      	lsrs	r4, r1, #16
 8010d18:	1904      	adds	r4, r0, r4
 8010d1a:	4461      	add	r1, ip
 8010d1c:	1420      	asrs	r0, r4, #16
 8010d1e:	b289      	uxth	r1, r1
 8010d20:	0424      	lsls	r4, r4, #16
 8010d22:	4321      	orrs	r1, r4
 8010d24:	c702      	stmia	r7!, {r1}
 8010d26:	e7dc      	b.n	8010ce2 <__mdiff+0xd6>
 8010d28:	9900      	ldr	r1, [sp, #0]
 8010d2a:	3901      	subs	r1, #1
 8010d2c:	9100      	str	r1, [sp, #0]
 8010d2e:	e7e6      	b.n	8010cfe <__mdiff+0xf2>
 8010d30:	08011e02 	.word	0x08011e02
 8010d34:	08011e73 	.word	0x08011e73
 8010d38:	00000237 	.word	0x00000237
 8010d3c:	00000245 	.word	0x00000245

08010d40 <__ulp>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	2400      	movs	r4, #0
 8010d44:	4b0c      	ldr	r3, [pc, #48]	@ (8010d78 <__ulp+0x38>)
 8010d46:	4a0d      	ldr	r2, [pc, #52]	@ (8010d7c <__ulp+0x3c>)
 8010d48:	400b      	ands	r3, r1
 8010d4a:	189b      	adds	r3, r3, r2
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	dc06      	bgt.n	8010d5e <__ulp+0x1e>
 8010d50:	425b      	negs	r3, r3
 8010d52:	151a      	asrs	r2, r3, #20
 8010d54:	2a13      	cmp	r2, #19
 8010d56:	dc05      	bgt.n	8010d64 <__ulp+0x24>
 8010d58:	2380      	movs	r3, #128	@ 0x80
 8010d5a:	031b      	lsls	r3, r3, #12
 8010d5c:	4113      	asrs	r3, r2
 8010d5e:	0019      	movs	r1, r3
 8010d60:	0020      	movs	r0, r4
 8010d62:	bd10      	pop	{r4, pc}
 8010d64:	3a14      	subs	r2, #20
 8010d66:	2401      	movs	r4, #1
 8010d68:	2a1e      	cmp	r2, #30
 8010d6a:	dc02      	bgt.n	8010d72 <__ulp+0x32>
 8010d6c:	2480      	movs	r4, #128	@ 0x80
 8010d6e:	0624      	lsls	r4, r4, #24
 8010d70:	40d4      	lsrs	r4, r2
 8010d72:	2300      	movs	r3, #0
 8010d74:	e7f3      	b.n	8010d5e <__ulp+0x1e>
 8010d76:	46c0      	nop			@ (mov r8, r8)
 8010d78:	7ff00000 	.word	0x7ff00000
 8010d7c:	fcc00000 	.word	0xfcc00000

08010d80 <__b2d>:
 8010d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d82:	0006      	movs	r6, r0
 8010d84:	6903      	ldr	r3, [r0, #16]
 8010d86:	3614      	adds	r6, #20
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	18f3      	adds	r3, r6, r3
 8010d8c:	1f1d      	subs	r5, r3, #4
 8010d8e:	682c      	ldr	r4, [r5, #0]
 8010d90:	000f      	movs	r7, r1
 8010d92:	0020      	movs	r0, r4
 8010d94:	9301      	str	r3, [sp, #4]
 8010d96:	f7ff fd43 	bl	8010820 <__hi0bits>
 8010d9a:	2220      	movs	r2, #32
 8010d9c:	1a12      	subs	r2, r2, r0
 8010d9e:	603a      	str	r2, [r7, #0]
 8010da0:	0003      	movs	r3, r0
 8010da2:	4a1c      	ldr	r2, [pc, #112]	@ (8010e14 <__b2d+0x94>)
 8010da4:	280a      	cmp	r0, #10
 8010da6:	dc15      	bgt.n	8010dd4 <__b2d+0x54>
 8010da8:	210b      	movs	r1, #11
 8010daa:	0027      	movs	r7, r4
 8010dac:	1a09      	subs	r1, r1, r0
 8010dae:	40cf      	lsrs	r7, r1
 8010db0:	433a      	orrs	r2, r7
 8010db2:	468c      	mov	ip, r1
 8010db4:	0011      	movs	r1, r2
 8010db6:	2200      	movs	r2, #0
 8010db8:	42ae      	cmp	r6, r5
 8010dba:	d202      	bcs.n	8010dc2 <__b2d+0x42>
 8010dbc:	9a01      	ldr	r2, [sp, #4]
 8010dbe:	3a08      	subs	r2, #8
 8010dc0:	6812      	ldr	r2, [r2, #0]
 8010dc2:	3315      	adds	r3, #21
 8010dc4:	409c      	lsls	r4, r3
 8010dc6:	4663      	mov	r3, ip
 8010dc8:	0027      	movs	r7, r4
 8010dca:	40da      	lsrs	r2, r3
 8010dcc:	4317      	orrs	r7, r2
 8010dce:	0038      	movs	r0, r7
 8010dd0:	b003      	add	sp, #12
 8010dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dd4:	2700      	movs	r7, #0
 8010dd6:	42ae      	cmp	r6, r5
 8010dd8:	d202      	bcs.n	8010de0 <__b2d+0x60>
 8010dda:	9d01      	ldr	r5, [sp, #4]
 8010ddc:	3d08      	subs	r5, #8
 8010dde:	682f      	ldr	r7, [r5, #0]
 8010de0:	210b      	movs	r1, #11
 8010de2:	4249      	negs	r1, r1
 8010de4:	468c      	mov	ip, r1
 8010de6:	449c      	add	ip, r3
 8010de8:	2b0b      	cmp	r3, #11
 8010dea:	d010      	beq.n	8010e0e <__b2d+0x8e>
 8010dec:	4661      	mov	r1, ip
 8010dee:	2320      	movs	r3, #32
 8010df0:	408c      	lsls	r4, r1
 8010df2:	1a5b      	subs	r3, r3, r1
 8010df4:	0039      	movs	r1, r7
 8010df6:	40d9      	lsrs	r1, r3
 8010df8:	430c      	orrs	r4, r1
 8010dfa:	4322      	orrs	r2, r4
 8010dfc:	0011      	movs	r1, r2
 8010dfe:	2200      	movs	r2, #0
 8010e00:	42b5      	cmp	r5, r6
 8010e02:	d901      	bls.n	8010e08 <__b2d+0x88>
 8010e04:	3d04      	subs	r5, #4
 8010e06:	682a      	ldr	r2, [r5, #0]
 8010e08:	4664      	mov	r4, ip
 8010e0a:	40a7      	lsls	r7, r4
 8010e0c:	e7dd      	b.n	8010dca <__b2d+0x4a>
 8010e0e:	4322      	orrs	r2, r4
 8010e10:	0011      	movs	r1, r2
 8010e12:	e7dc      	b.n	8010dce <__b2d+0x4e>
 8010e14:	3ff00000 	.word	0x3ff00000

08010e18 <__d2b>:
 8010e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e1a:	2101      	movs	r1, #1
 8010e1c:	0016      	movs	r6, r2
 8010e1e:	001f      	movs	r7, r3
 8010e20:	f7ff fc06 	bl	8010630 <_Balloc>
 8010e24:	1e04      	subs	r4, r0, #0
 8010e26:	d105      	bne.n	8010e34 <__d2b+0x1c>
 8010e28:	0022      	movs	r2, r4
 8010e2a:	4b25      	ldr	r3, [pc, #148]	@ (8010ec0 <__d2b+0xa8>)
 8010e2c:	4825      	ldr	r0, [pc, #148]	@ (8010ec4 <__d2b+0xac>)
 8010e2e:	4926      	ldr	r1, [pc, #152]	@ (8010ec8 <__d2b+0xb0>)
 8010e30:	f000 fb02 	bl	8011438 <__assert_func>
 8010e34:	033b      	lsls	r3, r7, #12
 8010e36:	007d      	lsls	r5, r7, #1
 8010e38:	0b1b      	lsrs	r3, r3, #12
 8010e3a:	0d6d      	lsrs	r5, r5, #21
 8010e3c:	d002      	beq.n	8010e44 <__d2b+0x2c>
 8010e3e:	2280      	movs	r2, #128	@ 0x80
 8010e40:	0352      	lsls	r2, r2, #13
 8010e42:	4313      	orrs	r3, r2
 8010e44:	9301      	str	r3, [sp, #4]
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	d025      	beq.n	8010e96 <__d2b+0x7e>
 8010e4a:	4668      	mov	r0, sp
 8010e4c:	9600      	str	r6, [sp, #0]
 8010e4e:	f7ff fd08 	bl	8010862 <__lo0bits>
 8010e52:	9b01      	ldr	r3, [sp, #4]
 8010e54:	9900      	ldr	r1, [sp, #0]
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d01b      	beq.n	8010e92 <__d2b+0x7a>
 8010e5a:	2220      	movs	r2, #32
 8010e5c:	001e      	movs	r6, r3
 8010e5e:	1a12      	subs	r2, r2, r0
 8010e60:	4096      	lsls	r6, r2
 8010e62:	0032      	movs	r2, r6
 8010e64:	40c3      	lsrs	r3, r0
 8010e66:	430a      	orrs	r2, r1
 8010e68:	6162      	str	r2, [r4, #20]
 8010e6a:	9301      	str	r3, [sp, #4]
 8010e6c:	9e01      	ldr	r6, [sp, #4]
 8010e6e:	61a6      	str	r6, [r4, #24]
 8010e70:	1e73      	subs	r3, r6, #1
 8010e72:	419e      	sbcs	r6, r3
 8010e74:	3601      	adds	r6, #1
 8010e76:	6126      	str	r6, [r4, #16]
 8010e78:	2d00      	cmp	r5, #0
 8010e7a:	d014      	beq.n	8010ea6 <__d2b+0x8e>
 8010e7c:	2635      	movs	r6, #53	@ 0x35
 8010e7e:	4b13      	ldr	r3, [pc, #76]	@ (8010ecc <__d2b+0xb4>)
 8010e80:	18ed      	adds	r5, r5, r3
 8010e82:	9b08      	ldr	r3, [sp, #32]
 8010e84:	182d      	adds	r5, r5, r0
 8010e86:	601d      	str	r5, [r3, #0]
 8010e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e8a:	1a36      	subs	r6, r6, r0
 8010e8c:	601e      	str	r6, [r3, #0]
 8010e8e:	0020      	movs	r0, r4
 8010e90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010e92:	6161      	str	r1, [r4, #20]
 8010e94:	e7ea      	b.n	8010e6c <__d2b+0x54>
 8010e96:	a801      	add	r0, sp, #4
 8010e98:	f7ff fce3 	bl	8010862 <__lo0bits>
 8010e9c:	9b01      	ldr	r3, [sp, #4]
 8010e9e:	2601      	movs	r6, #1
 8010ea0:	6163      	str	r3, [r4, #20]
 8010ea2:	3020      	adds	r0, #32
 8010ea4:	e7e7      	b.n	8010e76 <__d2b+0x5e>
 8010ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8010ed0 <__d2b+0xb8>)
 8010ea8:	18c0      	adds	r0, r0, r3
 8010eaa:	9b08      	ldr	r3, [sp, #32]
 8010eac:	6018      	str	r0, [r3, #0]
 8010eae:	4b09      	ldr	r3, [pc, #36]	@ (8010ed4 <__d2b+0xbc>)
 8010eb0:	18f3      	adds	r3, r6, r3
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	18e3      	adds	r3, r4, r3
 8010eb6:	6958      	ldr	r0, [r3, #20]
 8010eb8:	f7ff fcb2 	bl	8010820 <__hi0bits>
 8010ebc:	0176      	lsls	r6, r6, #5
 8010ebe:	e7e3      	b.n	8010e88 <__d2b+0x70>
 8010ec0:	08011e02 	.word	0x08011e02
 8010ec4:	08011e73 	.word	0x08011e73
 8010ec8:	0000030f 	.word	0x0000030f
 8010ecc:	fffffbcd 	.word	0xfffffbcd
 8010ed0:	fffffbce 	.word	0xfffffbce
 8010ed4:	3fffffff 	.word	0x3fffffff

08010ed8 <__ratio>:
 8010ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eda:	b087      	sub	sp, #28
 8010edc:	000f      	movs	r7, r1
 8010ede:	a904      	add	r1, sp, #16
 8010ee0:	0006      	movs	r6, r0
 8010ee2:	f7ff ff4d 	bl	8010d80 <__b2d>
 8010ee6:	9000      	str	r0, [sp, #0]
 8010ee8:	9101      	str	r1, [sp, #4]
 8010eea:	9b00      	ldr	r3, [sp, #0]
 8010eec:	9c01      	ldr	r4, [sp, #4]
 8010eee:	0038      	movs	r0, r7
 8010ef0:	a905      	add	r1, sp, #20
 8010ef2:	9302      	str	r3, [sp, #8]
 8010ef4:	9403      	str	r4, [sp, #12]
 8010ef6:	f7ff ff43 	bl	8010d80 <__b2d>
 8010efa:	000d      	movs	r5, r1
 8010efc:	0002      	movs	r2, r0
 8010efe:	000b      	movs	r3, r1
 8010f00:	6930      	ldr	r0, [r6, #16]
 8010f02:	6939      	ldr	r1, [r7, #16]
 8010f04:	9e04      	ldr	r6, [sp, #16]
 8010f06:	1a40      	subs	r0, r0, r1
 8010f08:	9905      	ldr	r1, [sp, #20]
 8010f0a:	0140      	lsls	r0, r0, #5
 8010f0c:	1a71      	subs	r1, r6, r1
 8010f0e:	1841      	adds	r1, r0, r1
 8010f10:	0508      	lsls	r0, r1, #20
 8010f12:	2900      	cmp	r1, #0
 8010f14:	dd08      	ble.n	8010f28 <__ratio+0x50>
 8010f16:	9901      	ldr	r1, [sp, #4]
 8010f18:	1841      	adds	r1, r0, r1
 8010f1a:	9103      	str	r1, [sp, #12]
 8010f1c:	9802      	ldr	r0, [sp, #8]
 8010f1e:	9903      	ldr	r1, [sp, #12]
 8010f20:	f7ef fef2 	bl	8000d08 <__aeabi_ddiv>
 8010f24:	b007      	add	sp, #28
 8010f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f28:	1a2b      	subs	r3, r5, r0
 8010f2a:	e7f7      	b.n	8010f1c <__ratio+0x44>

08010f2c <__copybits>:
 8010f2c:	b570      	push	{r4, r5, r6, lr}
 8010f2e:	0014      	movs	r4, r2
 8010f30:	0005      	movs	r5, r0
 8010f32:	3901      	subs	r1, #1
 8010f34:	6913      	ldr	r3, [r2, #16]
 8010f36:	1149      	asrs	r1, r1, #5
 8010f38:	3101      	adds	r1, #1
 8010f3a:	0089      	lsls	r1, r1, #2
 8010f3c:	3414      	adds	r4, #20
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	1841      	adds	r1, r0, r1
 8010f42:	18e3      	adds	r3, r4, r3
 8010f44:	42a3      	cmp	r3, r4
 8010f46:	d80d      	bhi.n	8010f64 <__copybits+0x38>
 8010f48:	0014      	movs	r4, r2
 8010f4a:	3411      	adds	r4, #17
 8010f4c:	2500      	movs	r5, #0
 8010f4e:	42a3      	cmp	r3, r4
 8010f50:	d303      	bcc.n	8010f5a <__copybits+0x2e>
 8010f52:	1a9b      	subs	r3, r3, r2
 8010f54:	3b11      	subs	r3, #17
 8010f56:	089b      	lsrs	r3, r3, #2
 8010f58:	009d      	lsls	r5, r3, #2
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	1940      	adds	r0, r0, r5
 8010f5e:	4281      	cmp	r1, r0
 8010f60:	d803      	bhi.n	8010f6a <__copybits+0x3e>
 8010f62:	bd70      	pop	{r4, r5, r6, pc}
 8010f64:	cc40      	ldmia	r4!, {r6}
 8010f66:	c540      	stmia	r5!, {r6}
 8010f68:	e7ec      	b.n	8010f44 <__copybits+0x18>
 8010f6a:	c008      	stmia	r0!, {r3}
 8010f6c:	e7f7      	b.n	8010f5e <__copybits+0x32>

08010f6e <__any_on>:
 8010f6e:	0002      	movs	r2, r0
 8010f70:	6900      	ldr	r0, [r0, #16]
 8010f72:	b510      	push	{r4, lr}
 8010f74:	3214      	adds	r2, #20
 8010f76:	114b      	asrs	r3, r1, #5
 8010f78:	4298      	cmp	r0, r3
 8010f7a:	db13      	blt.n	8010fa4 <__any_on+0x36>
 8010f7c:	dd0c      	ble.n	8010f98 <__any_on+0x2a>
 8010f7e:	241f      	movs	r4, #31
 8010f80:	0008      	movs	r0, r1
 8010f82:	4020      	ands	r0, r4
 8010f84:	4221      	tst	r1, r4
 8010f86:	d007      	beq.n	8010f98 <__any_on+0x2a>
 8010f88:	0099      	lsls	r1, r3, #2
 8010f8a:	588c      	ldr	r4, [r1, r2]
 8010f8c:	0021      	movs	r1, r4
 8010f8e:	40c1      	lsrs	r1, r0
 8010f90:	4081      	lsls	r1, r0
 8010f92:	2001      	movs	r0, #1
 8010f94:	428c      	cmp	r4, r1
 8010f96:	d104      	bne.n	8010fa2 <__any_on+0x34>
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	18d3      	adds	r3, r2, r3
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d803      	bhi.n	8010fa8 <__any_on+0x3a>
 8010fa0:	2000      	movs	r0, #0
 8010fa2:	bd10      	pop	{r4, pc}
 8010fa4:	0003      	movs	r3, r0
 8010fa6:	e7f7      	b.n	8010f98 <__any_on+0x2a>
 8010fa8:	3b04      	subs	r3, #4
 8010faa:	6819      	ldr	r1, [r3, #0]
 8010fac:	2900      	cmp	r1, #0
 8010fae:	d0f5      	beq.n	8010f9c <__any_on+0x2e>
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	e7f6      	b.n	8010fa2 <__any_on+0x34>

08010fb4 <__ascii_wctomb>:
 8010fb4:	0003      	movs	r3, r0
 8010fb6:	1e08      	subs	r0, r1, #0
 8010fb8:	d005      	beq.n	8010fc6 <__ascii_wctomb+0x12>
 8010fba:	2aff      	cmp	r2, #255	@ 0xff
 8010fbc:	d904      	bls.n	8010fc8 <__ascii_wctomb+0x14>
 8010fbe:	228a      	movs	r2, #138	@ 0x8a
 8010fc0:	2001      	movs	r0, #1
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	4240      	negs	r0, r0
 8010fc6:	4770      	bx	lr
 8010fc8:	2001      	movs	r0, #1
 8010fca:	700a      	strb	r2, [r1, #0]
 8010fcc:	e7fb      	b.n	8010fc6 <__ascii_wctomb+0x12>
	...

08010fd0 <__ssputs_r>:
 8010fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fd2:	688e      	ldr	r6, [r1, #8]
 8010fd4:	b085      	sub	sp, #20
 8010fd6:	001f      	movs	r7, r3
 8010fd8:	000c      	movs	r4, r1
 8010fda:	680b      	ldr	r3, [r1, #0]
 8010fdc:	9002      	str	r0, [sp, #8]
 8010fde:	9203      	str	r2, [sp, #12]
 8010fe0:	42be      	cmp	r6, r7
 8010fe2:	d830      	bhi.n	8011046 <__ssputs_r+0x76>
 8010fe4:	210c      	movs	r1, #12
 8010fe6:	5e62      	ldrsh	r2, [r4, r1]
 8010fe8:	2190      	movs	r1, #144	@ 0x90
 8010fea:	00c9      	lsls	r1, r1, #3
 8010fec:	420a      	tst	r2, r1
 8010fee:	d028      	beq.n	8011042 <__ssputs_r+0x72>
 8010ff0:	2003      	movs	r0, #3
 8010ff2:	6921      	ldr	r1, [r4, #16]
 8010ff4:	1a5b      	subs	r3, r3, r1
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	6963      	ldr	r3, [r4, #20]
 8010ffa:	4343      	muls	r3, r0
 8010ffc:	9801      	ldr	r0, [sp, #4]
 8010ffe:	0fdd      	lsrs	r5, r3, #31
 8011000:	18ed      	adds	r5, r5, r3
 8011002:	1c7b      	adds	r3, r7, #1
 8011004:	181b      	adds	r3, r3, r0
 8011006:	106d      	asrs	r5, r5, #1
 8011008:	42ab      	cmp	r3, r5
 801100a:	d900      	bls.n	801100e <__ssputs_r+0x3e>
 801100c:	001d      	movs	r5, r3
 801100e:	0552      	lsls	r2, r2, #21
 8011010:	d528      	bpl.n	8011064 <__ssputs_r+0x94>
 8011012:	0029      	movs	r1, r5
 8011014:	9802      	ldr	r0, [sp, #8]
 8011016:	f7ff fa69 	bl	80104ec <_malloc_r>
 801101a:	1e06      	subs	r6, r0, #0
 801101c:	d02c      	beq.n	8011078 <__ssputs_r+0xa8>
 801101e:	9a01      	ldr	r2, [sp, #4]
 8011020:	6921      	ldr	r1, [r4, #16]
 8011022:	f7fe f80d 	bl	800f040 <memcpy>
 8011026:	89a2      	ldrh	r2, [r4, #12]
 8011028:	4b18      	ldr	r3, [pc, #96]	@ (801108c <__ssputs_r+0xbc>)
 801102a:	401a      	ands	r2, r3
 801102c:	2380      	movs	r3, #128	@ 0x80
 801102e:	4313      	orrs	r3, r2
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	9b01      	ldr	r3, [sp, #4]
 8011034:	6126      	str	r6, [r4, #16]
 8011036:	18f6      	adds	r6, r6, r3
 8011038:	6026      	str	r6, [r4, #0]
 801103a:	003e      	movs	r6, r7
 801103c:	6165      	str	r5, [r4, #20]
 801103e:	1aed      	subs	r5, r5, r3
 8011040:	60a5      	str	r5, [r4, #8]
 8011042:	42be      	cmp	r6, r7
 8011044:	d900      	bls.n	8011048 <__ssputs_r+0x78>
 8011046:	003e      	movs	r6, r7
 8011048:	0032      	movs	r2, r6
 801104a:	9903      	ldr	r1, [sp, #12]
 801104c:	6820      	ldr	r0, [r4, #0]
 801104e:	f000 f9ce 	bl	80113ee <memmove>
 8011052:	2000      	movs	r0, #0
 8011054:	68a3      	ldr	r3, [r4, #8]
 8011056:	1b9b      	subs	r3, r3, r6
 8011058:	60a3      	str	r3, [r4, #8]
 801105a:	6823      	ldr	r3, [r4, #0]
 801105c:	199b      	adds	r3, r3, r6
 801105e:	6023      	str	r3, [r4, #0]
 8011060:	b005      	add	sp, #20
 8011062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011064:	002a      	movs	r2, r5
 8011066:	9802      	ldr	r0, [sp, #8]
 8011068:	f000 fa31 	bl	80114ce <_realloc_r>
 801106c:	1e06      	subs	r6, r0, #0
 801106e:	d1e0      	bne.n	8011032 <__ssputs_r+0x62>
 8011070:	6921      	ldr	r1, [r4, #16]
 8011072:	9802      	ldr	r0, [sp, #8]
 8011074:	f7fe fe6a 	bl	800fd4c <_free_r>
 8011078:	230c      	movs	r3, #12
 801107a:	2001      	movs	r0, #1
 801107c:	9a02      	ldr	r2, [sp, #8]
 801107e:	4240      	negs	r0, r0
 8011080:	6013      	str	r3, [r2, #0]
 8011082:	89a2      	ldrh	r2, [r4, #12]
 8011084:	3334      	adds	r3, #52	@ 0x34
 8011086:	4313      	orrs	r3, r2
 8011088:	81a3      	strh	r3, [r4, #12]
 801108a:	e7e9      	b.n	8011060 <__ssputs_r+0x90>
 801108c:	fffffb7f 	.word	0xfffffb7f

08011090 <_svfiprintf_r>:
 8011090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011092:	b0a1      	sub	sp, #132	@ 0x84
 8011094:	9003      	str	r0, [sp, #12]
 8011096:	001d      	movs	r5, r3
 8011098:	898b      	ldrh	r3, [r1, #12]
 801109a:	000f      	movs	r7, r1
 801109c:	0016      	movs	r6, r2
 801109e:	061b      	lsls	r3, r3, #24
 80110a0:	d511      	bpl.n	80110c6 <_svfiprintf_r+0x36>
 80110a2:	690b      	ldr	r3, [r1, #16]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10e      	bne.n	80110c6 <_svfiprintf_r+0x36>
 80110a8:	2140      	movs	r1, #64	@ 0x40
 80110aa:	f7ff fa1f 	bl	80104ec <_malloc_r>
 80110ae:	6038      	str	r0, [r7, #0]
 80110b0:	6138      	str	r0, [r7, #16]
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d105      	bne.n	80110c2 <_svfiprintf_r+0x32>
 80110b6:	230c      	movs	r3, #12
 80110b8:	9a03      	ldr	r2, [sp, #12]
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	2001      	movs	r0, #1
 80110be:	4240      	negs	r0, r0
 80110c0:	e0cf      	b.n	8011262 <_svfiprintf_r+0x1d2>
 80110c2:	2340      	movs	r3, #64	@ 0x40
 80110c4:	617b      	str	r3, [r7, #20]
 80110c6:	2300      	movs	r3, #0
 80110c8:	ac08      	add	r4, sp, #32
 80110ca:	6163      	str	r3, [r4, #20]
 80110cc:	3320      	adds	r3, #32
 80110ce:	7663      	strb	r3, [r4, #25]
 80110d0:	3310      	adds	r3, #16
 80110d2:	76a3      	strb	r3, [r4, #26]
 80110d4:	9507      	str	r5, [sp, #28]
 80110d6:	0035      	movs	r5, r6
 80110d8:	782b      	ldrb	r3, [r5, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d001      	beq.n	80110e2 <_svfiprintf_r+0x52>
 80110de:	2b25      	cmp	r3, #37	@ 0x25
 80110e0:	d148      	bne.n	8011174 <_svfiprintf_r+0xe4>
 80110e2:	1bab      	subs	r3, r5, r6
 80110e4:	9305      	str	r3, [sp, #20]
 80110e6:	42b5      	cmp	r5, r6
 80110e8:	d00b      	beq.n	8011102 <_svfiprintf_r+0x72>
 80110ea:	0032      	movs	r2, r6
 80110ec:	0039      	movs	r1, r7
 80110ee:	9803      	ldr	r0, [sp, #12]
 80110f0:	f7ff ff6e 	bl	8010fd0 <__ssputs_r>
 80110f4:	3001      	adds	r0, #1
 80110f6:	d100      	bne.n	80110fa <_svfiprintf_r+0x6a>
 80110f8:	e0ae      	b.n	8011258 <_svfiprintf_r+0x1c8>
 80110fa:	6963      	ldr	r3, [r4, #20]
 80110fc:	9a05      	ldr	r2, [sp, #20]
 80110fe:	189b      	adds	r3, r3, r2
 8011100:	6163      	str	r3, [r4, #20]
 8011102:	782b      	ldrb	r3, [r5, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d100      	bne.n	801110a <_svfiprintf_r+0x7a>
 8011108:	e0a6      	b.n	8011258 <_svfiprintf_r+0x1c8>
 801110a:	2201      	movs	r2, #1
 801110c:	2300      	movs	r3, #0
 801110e:	4252      	negs	r2, r2
 8011110:	6062      	str	r2, [r4, #4]
 8011112:	a904      	add	r1, sp, #16
 8011114:	3254      	adds	r2, #84	@ 0x54
 8011116:	1852      	adds	r2, r2, r1
 8011118:	1c6e      	adds	r6, r5, #1
 801111a:	6023      	str	r3, [r4, #0]
 801111c:	60e3      	str	r3, [r4, #12]
 801111e:	60a3      	str	r3, [r4, #8]
 8011120:	7013      	strb	r3, [r2, #0]
 8011122:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011124:	4b54      	ldr	r3, [pc, #336]	@ (8011278 <_svfiprintf_r+0x1e8>)
 8011126:	2205      	movs	r2, #5
 8011128:	0018      	movs	r0, r3
 801112a:	7831      	ldrb	r1, [r6, #0]
 801112c:	9305      	str	r3, [sp, #20]
 801112e:	f7fd ff7c 	bl	800f02a <memchr>
 8011132:	1c75      	adds	r5, r6, #1
 8011134:	2800      	cmp	r0, #0
 8011136:	d11f      	bne.n	8011178 <_svfiprintf_r+0xe8>
 8011138:	6822      	ldr	r2, [r4, #0]
 801113a:	06d3      	lsls	r3, r2, #27
 801113c:	d504      	bpl.n	8011148 <_svfiprintf_r+0xb8>
 801113e:	2353      	movs	r3, #83	@ 0x53
 8011140:	a904      	add	r1, sp, #16
 8011142:	185b      	adds	r3, r3, r1
 8011144:	2120      	movs	r1, #32
 8011146:	7019      	strb	r1, [r3, #0]
 8011148:	0713      	lsls	r3, r2, #28
 801114a:	d504      	bpl.n	8011156 <_svfiprintf_r+0xc6>
 801114c:	2353      	movs	r3, #83	@ 0x53
 801114e:	a904      	add	r1, sp, #16
 8011150:	185b      	adds	r3, r3, r1
 8011152:	212b      	movs	r1, #43	@ 0x2b
 8011154:	7019      	strb	r1, [r3, #0]
 8011156:	7833      	ldrb	r3, [r6, #0]
 8011158:	2b2a      	cmp	r3, #42	@ 0x2a
 801115a:	d016      	beq.n	801118a <_svfiprintf_r+0xfa>
 801115c:	0035      	movs	r5, r6
 801115e:	2100      	movs	r1, #0
 8011160:	200a      	movs	r0, #10
 8011162:	68e3      	ldr	r3, [r4, #12]
 8011164:	782a      	ldrb	r2, [r5, #0]
 8011166:	1c6e      	adds	r6, r5, #1
 8011168:	3a30      	subs	r2, #48	@ 0x30
 801116a:	2a09      	cmp	r2, #9
 801116c:	d950      	bls.n	8011210 <_svfiprintf_r+0x180>
 801116e:	2900      	cmp	r1, #0
 8011170:	d111      	bne.n	8011196 <_svfiprintf_r+0x106>
 8011172:	e017      	b.n	80111a4 <_svfiprintf_r+0x114>
 8011174:	3501      	adds	r5, #1
 8011176:	e7af      	b.n	80110d8 <_svfiprintf_r+0x48>
 8011178:	9b05      	ldr	r3, [sp, #20]
 801117a:	6822      	ldr	r2, [r4, #0]
 801117c:	1ac0      	subs	r0, r0, r3
 801117e:	2301      	movs	r3, #1
 8011180:	4083      	lsls	r3, r0
 8011182:	4313      	orrs	r3, r2
 8011184:	002e      	movs	r6, r5
 8011186:	6023      	str	r3, [r4, #0]
 8011188:	e7cc      	b.n	8011124 <_svfiprintf_r+0x94>
 801118a:	9b07      	ldr	r3, [sp, #28]
 801118c:	1d19      	adds	r1, r3, #4
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	9107      	str	r1, [sp, #28]
 8011192:	2b00      	cmp	r3, #0
 8011194:	db01      	blt.n	801119a <_svfiprintf_r+0x10a>
 8011196:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011198:	e004      	b.n	80111a4 <_svfiprintf_r+0x114>
 801119a:	425b      	negs	r3, r3
 801119c:	60e3      	str	r3, [r4, #12]
 801119e:	2302      	movs	r3, #2
 80111a0:	4313      	orrs	r3, r2
 80111a2:	6023      	str	r3, [r4, #0]
 80111a4:	782b      	ldrb	r3, [r5, #0]
 80111a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80111a8:	d10c      	bne.n	80111c4 <_svfiprintf_r+0x134>
 80111aa:	786b      	ldrb	r3, [r5, #1]
 80111ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80111ae:	d134      	bne.n	801121a <_svfiprintf_r+0x18a>
 80111b0:	9b07      	ldr	r3, [sp, #28]
 80111b2:	3502      	adds	r5, #2
 80111b4:	1d1a      	adds	r2, r3, #4
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	9207      	str	r2, [sp, #28]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	da01      	bge.n	80111c2 <_svfiprintf_r+0x132>
 80111be:	2301      	movs	r3, #1
 80111c0:	425b      	negs	r3, r3
 80111c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80111c4:	4e2d      	ldr	r6, [pc, #180]	@ (801127c <_svfiprintf_r+0x1ec>)
 80111c6:	2203      	movs	r2, #3
 80111c8:	0030      	movs	r0, r6
 80111ca:	7829      	ldrb	r1, [r5, #0]
 80111cc:	f7fd ff2d 	bl	800f02a <memchr>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	d006      	beq.n	80111e2 <_svfiprintf_r+0x152>
 80111d4:	2340      	movs	r3, #64	@ 0x40
 80111d6:	1b80      	subs	r0, r0, r6
 80111d8:	4083      	lsls	r3, r0
 80111da:	6822      	ldr	r2, [r4, #0]
 80111dc:	3501      	adds	r5, #1
 80111de:	4313      	orrs	r3, r2
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	7829      	ldrb	r1, [r5, #0]
 80111e4:	2206      	movs	r2, #6
 80111e6:	4826      	ldr	r0, [pc, #152]	@ (8011280 <_svfiprintf_r+0x1f0>)
 80111e8:	1c6e      	adds	r6, r5, #1
 80111ea:	7621      	strb	r1, [r4, #24]
 80111ec:	f7fd ff1d 	bl	800f02a <memchr>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d038      	beq.n	8011266 <_svfiprintf_r+0x1d6>
 80111f4:	4b23      	ldr	r3, [pc, #140]	@ (8011284 <_svfiprintf_r+0x1f4>)
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d122      	bne.n	8011240 <_svfiprintf_r+0x1b0>
 80111fa:	2207      	movs	r2, #7
 80111fc:	9b07      	ldr	r3, [sp, #28]
 80111fe:	3307      	adds	r3, #7
 8011200:	4393      	bics	r3, r2
 8011202:	3308      	adds	r3, #8
 8011204:	9307      	str	r3, [sp, #28]
 8011206:	6963      	ldr	r3, [r4, #20]
 8011208:	9a04      	ldr	r2, [sp, #16]
 801120a:	189b      	adds	r3, r3, r2
 801120c:	6163      	str	r3, [r4, #20]
 801120e:	e762      	b.n	80110d6 <_svfiprintf_r+0x46>
 8011210:	4343      	muls	r3, r0
 8011212:	0035      	movs	r5, r6
 8011214:	2101      	movs	r1, #1
 8011216:	189b      	adds	r3, r3, r2
 8011218:	e7a4      	b.n	8011164 <_svfiprintf_r+0xd4>
 801121a:	2300      	movs	r3, #0
 801121c:	200a      	movs	r0, #10
 801121e:	0019      	movs	r1, r3
 8011220:	3501      	adds	r5, #1
 8011222:	6063      	str	r3, [r4, #4]
 8011224:	782a      	ldrb	r2, [r5, #0]
 8011226:	1c6e      	adds	r6, r5, #1
 8011228:	3a30      	subs	r2, #48	@ 0x30
 801122a:	2a09      	cmp	r2, #9
 801122c:	d903      	bls.n	8011236 <_svfiprintf_r+0x1a6>
 801122e:	2b00      	cmp	r3, #0
 8011230:	d0c8      	beq.n	80111c4 <_svfiprintf_r+0x134>
 8011232:	9109      	str	r1, [sp, #36]	@ 0x24
 8011234:	e7c6      	b.n	80111c4 <_svfiprintf_r+0x134>
 8011236:	4341      	muls	r1, r0
 8011238:	0035      	movs	r5, r6
 801123a:	2301      	movs	r3, #1
 801123c:	1889      	adds	r1, r1, r2
 801123e:	e7f1      	b.n	8011224 <_svfiprintf_r+0x194>
 8011240:	aa07      	add	r2, sp, #28
 8011242:	9200      	str	r2, [sp, #0]
 8011244:	0021      	movs	r1, r4
 8011246:	003a      	movs	r2, r7
 8011248:	4b0f      	ldr	r3, [pc, #60]	@ (8011288 <_svfiprintf_r+0x1f8>)
 801124a:	9803      	ldr	r0, [sp, #12]
 801124c:	f7fd f954 	bl	800e4f8 <_printf_float>
 8011250:	9004      	str	r0, [sp, #16]
 8011252:	9b04      	ldr	r3, [sp, #16]
 8011254:	3301      	adds	r3, #1
 8011256:	d1d6      	bne.n	8011206 <_svfiprintf_r+0x176>
 8011258:	89bb      	ldrh	r3, [r7, #12]
 801125a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801125c:	065b      	lsls	r3, r3, #25
 801125e:	d500      	bpl.n	8011262 <_svfiprintf_r+0x1d2>
 8011260:	e72c      	b.n	80110bc <_svfiprintf_r+0x2c>
 8011262:	b021      	add	sp, #132	@ 0x84
 8011264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011266:	aa07      	add	r2, sp, #28
 8011268:	9200      	str	r2, [sp, #0]
 801126a:	0021      	movs	r1, r4
 801126c:	003a      	movs	r2, r7
 801126e:	4b06      	ldr	r3, [pc, #24]	@ (8011288 <_svfiprintf_r+0x1f8>)
 8011270:	9803      	ldr	r0, [sp, #12]
 8011272:	f7fd fbef 	bl	800ea54 <_printf_i>
 8011276:	e7eb      	b.n	8011250 <_svfiprintf_r+0x1c0>
 8011278:	08011ecc 	.word	0x08011ecc
 801127c:	08011ed2 	.word	0x08011ed2
 8011280:	08011ed6 	.word	0x08011ed6
 8011284:	0800e4f9 	.word	0x0800e4f9
 8011288:	08010fd1 	.word	0x08010fd1

0801128c <__sflush_r>:
 801128c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801128e:	220c      	movs	r2, #12
 8011290:	5e8b      	ldrsh	r3, [r1, r2]
 8011292:	0005      	movs	r5, r0
 8011294:	000c      	movs	r4, r1
 8011296:	071a      	lsls	r2, r3, #28
 8011298:	d456      	bmi.n	8011348 <__sflush_r+0xbc>
 801129a:	684a      	ldr	r2, [r1, #4]
 801129c:	2a00      	cmp	r2, #0
 801129e:	dc02      	bgt.n	80112a6 <__sflush_r+0x1a>
 80112a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	dd4e      	ble.n	8011344 <__sflush_r+0xb8>
 80112a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80112a8:	2f00      	cmp	r7, #0
 80112aa:	d04b      	beq.n	8011344 <__sflush_r+0xb8>
 80112ac:	2200      	movs	r2, #0
 80112ae:	2080      	movs	r0, #128	@ 0x80
 80112b0:	682e      	ldr	r6, [r5, #0]
 80112b2:	602a      	str	r2, [r5, #0]
 80112b4:	001a      	movs	r2, r3
 80112b6:	0140      	lsls	r0, r0, #5
 80112b8:	6a21      	ldr	r1, [r4, #32]
 80112ba:	4002      	ands	r2, r0
 80112bc:	4203      	tst	r3, r0
 80112be:	d033      	beq.n	8011328 <__sflush_r+0x9c>
 80112c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112c2:	89a3      	ldrh	r3, [r4, #12]
 80112c4:	075b      	lsls	r3, r3, #29
 80112c6:	d506      	bpl.n	80112d6 <__sflush_r+0x4a>
 80112c8:	6863      	ldr	r3, [r4, #4]
 80112ca:	1ad2      	subs	r2, r2, r3
 80112cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d001      	beq.n	80112d6 <__sflush_r+0x4a>
 80112d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112d4:	1ad2      	subs	r2, r2, r3
 80112d6:	2300      	movs	r3, #0
 80112d8:	0028      	movs	r0, r5
 80112da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80112dc:	6a21      	ldr	r1, [r4, #32]
 80112de:	47b8      	blx	r7
 80112e0:	89a2      	ldrh	r2, [r4, #12]
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	d106      	bne.n	80112f4 <__sflush_r+0x68>
 80112e6:	6829      	ldr	r1, [r5, #0]
 80112e8:	291d      	cmp	r1, #29
 80112ea:	d846      	bhi.n	801137a <__sflush_r+0xee>
 80112ec:	4b29      	ldr	r3, [pc, #164]	@ (8011394 <__sflush_r+0x108>)
 80112ee:	40cb      	lsrs	r3, r1
 80112f0:	07db      	lsls	r3, r3, #31
 80112f2:	d542      	bpl.n	801137a <__sflush_r+0xee>
 80112f4:	2300      	movs	r3, #0
 80112f6:	6063      	str	r3, [r4, #4]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	6023      	str	r3, [r4, #0]
 80112fc:	04d2      	lsls	r2, r2, #19
 80112fe:	d505      	bpl.n	801130c <__sflush_r+0x80>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d102      	bne.n	801130a <__sflush_r+0x7e>
 8011304:	682b      	ldr	r3, [r5, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d100      	bne.n	801130c <__sflush_r+0x80>
 801130a:	6560      	str	r0, [r4, #84]	@ 0x54
 801130c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801130e:	602e      	str	r6, [r5, #0]
 8011310:	2900      	cmp	r1, #0
 8011312:	d017      	beq.n	8011344 <__sflush_r+0xb8>
 8011314:	0023      	movs	r3, r4
 8011316:	3344      	adds	r3, #68	@ 0x44
 8011318:	4299      	cmp	r1, r3
 801131a:	d002      	beq.n	8011322 <__sflush_r+0x96>
 801131c:	0028      	movs	r0, r5
 801131e:	f7fe fd15 	bl	800fd4c <_free_r>
 8011322:	2300      	movs	r3, #0
 8011324:	6363      	str	r3, [r4, #52]	@ 0x34
 8011326:	e00d      	b.n	8011344 <__sflush_r+0xb8>
 8011328:	2301      	movs	r3, #1
 801132a:	0028      	movs	r0, r5
 801132c:	47b8      	blx	r7
 801132e:	0002      	movs	r2, r0
 8011330:	1c43      	adds	r3, r0, #1
 8011332:	d1c6      	bne.n	80112c2 <__sflush_r+0x36>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0c3      	beq.n	80112c2 <__sflush_r+0x36>
 801133a:	2b1d      	cmp	r3, #29
 801133c:	d001      	beq.n	8011342 <__sflush_r+0xb6>
 801133e:	2b16      	cmp	r3, #22
 8011340:	d11a      	bne.n	8011378 <__sflush_r+0xec>
 8011342:	602e      	str	r6, [r5, #0]
 8011344:	2000      	movs	r0, #0
 8011346:	e01e      	b.n	8011386 <__sflush_r+0xfa>
 8011348:	690e      	ldr	r6, [r1, #16]
 801134a:	2e00      	cmp	r6, #0
 801134c:	d0fa      	beq.n	8011344 <__sflush_r+0xb8>
 801134e:	680f      	ldr	r7, [r1, #0]
 8011350:	600e      	str	r6, [r1, #0]
 8011352:	1bba      	subs	r2, r7, r6
 8011354:	9201      	str	r2, [sp, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	079b      	lsls	r3, r3, #30
 801135a:	d100      	bne.n	801135e <__sflush_r+0xd2>
 801135c:	694a      	ldr	r2, [r1, #20]
 801135e:	60a2      	str	r2, [r4, #8]
 8011360:	9b01      	ldr	r3, [sp, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	ddee      	ble.n	8011344 <__sflush_r+0xb8>
 8011366:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011368:	0032      	movs	r2, r6
 801136a:	001f      	movs	r7, r3
 801136c:	0028      	movs	r0, r5
 801136e:	9b01      	ldr	r3, [sp, #4]
 8011370:	6a21      	ldr	r1, [r4, #32]
 8011372:	47b8      	blx	r7
 8011374:	2800      	cmp	r0, #0
 8011376:	dc07      	bgt.n	8011388 <__sflush_r+0xfc>
 8011378:	89a2      	ldrh	r2, [r4, #12]
 801137a:	2340      	movs	r3, #64	@ 0x40
 801137c:	2001      	movs	r0, #1
 801137e:	4313      	orrs	r3, r2
 8011380:	b21b      	sxth	r3, r3
 8011382:	81a3      	strh	r3, [r4, #12]
 8011384:	4240      	negs	r0, r0
 8011386:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	1836      	adds	r6, r6, r0
 801138c:	1a1b      	subs	r3, r3, r0
 801138e:	9301      	str	r3, [sp, #4]
 8011390:	e7e6      	b.n	8011360 <__sflush_r+0xd4>
 8011392:	46c0      	nop			@ (mov r8, r8)
 8011394:	20400001 	.word	0x20400001

08011398 <_fflush_r>:
 8011398:	690b      	ldr	r3, [r1, #16]
 801139a:	b570      	push	{r4, r5, r6, lr}
 801139c:	0005      	movs	r5, r0
 801139e:	000c      	movs	r4, r1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d102      	bne.n	80113aa <_fflush_r+0x12>
 80113a4:	2500      	movs	r5, #0
 80113a6:	0028      	movs	r0, r5
 80113a8:	bd70      	pop	{r4, r5, r6, pc}
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d004      	beq.n	80113b8 <_fflush_r+0x20>
 80113ae:	6a03      	ldr	r3, [r0, #32]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d101      	bne.n	80113b8 <_fflush_r+0x20>
 80113b4:	f7fd fcea 	bl	800ed8c <__sinit>
 80113b8:	220c      	movs	r2, #12
 80113ba:	5ea3      	ldrsh	r3, [r4, r2]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d0f1      	beq.n	80113a4 <_fflush_r+0xc>
 80113c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113c2:	07d2      	lsls	r2, r2, #31
 80113c4:	d404      	bmi.n	80113d0 <_fflush_r+0x38>
 80113c6:	059b      	lsls	r3, r3, #22
 80113c8:	d402      	bmi.n	80113d0 <_fflush_r+0x38>
 80113ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113cc:	f7fd fe2b 	bl	800f026 <__retarget_lock_acquire_recursive>
 80113d0:	0028      	movs	r0, r5
 80113d2:	0021      	movs	r1, r4
 80113d4:	f7ff ff5a 	bl	801128c <__sflush_r>
 80113d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113da:	0005      	movs	r5, r0
 80113dc:	07db      	lsls	r3, r3, #31
 80113de:	d4e2      	bmi.n	80113a6 <_fflush_r+0xe>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	059b      	lsls	r3, r3, #22
 80113e4:	d4df      	bmi.n	80113a6 <_fflush_r+0xe>
 80113e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113e8:	f7fd fe1e 	bl	800f028 <__retarget_lock_release_recursive>
 80113ec:	e7db      	b.n	80113a6 <_fflush_r+0xe>

080113ee <memmove>:
 80113ee:	b510      	push	{r4, lr}
 80113f0:	4288      	cmp	r0, r1
 80113f2:	d902      	bls.n	80113fa <memmove+0xc>
 80113f4:	188b      	adds	r3, r1, r2
 80113f6:	4298      	cmp	r0, r3
 80113f8:	d308      	bcc.n	801140c <memmove+0x1e>
 80113fa:	2300      	movs	r3, #0
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d007      	beq.n	8011410 <memmove+0x22>
 8011400:	5ccc      	ldrb	r4, [r1, r3]
 8011402:	54c4      	strb	r4, [r0, r3]
 8011404:	3301      	adds	r3, #1
 8011406:	e7f9      	b.n	80113fc <memmove+0xe>
 8011408:	5c8b      	ldrb	r3, [r1, r2]
 801140a:	5483      	strb	r3, [r0, r2]
 801140c:	3a01      	subs	r2, #1
 801140e:	d2fb      	bcs.n	8011408 <memmove+0x1a>
 8011410:	bd10      	pop	{r4, pc}
	...

08011414 <_sbrk_r>:
 8011414:	2300      	movs	r3, #0
 8011416:	b570      	push	{r4, r5, r6, lr}
 8011418:	4d06      	ldr	r5, [pc, #24]	@ (8011434 <_sbrk_r+0x20>)
 801141a:	0004      	movs	r4, r0
 801141c:	0008      	movs	r0, r1
 801141e:	602b      	str	r3, [r5, #0]
 8011420:	f7f2 f9b0 	bl	8003784 <_sbrk>
 8011424:	1c43      	adds	r3, r0, #1
 8011426:	d103      	bne.n	8011430 <_sbrk_r+0x1c>
 8011428:	682b      	ldr	r3, [r5, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d000      	beq.n	8011430 <_sbrk_r+0x1c>
 801142e:	6023      	str	r3, [r4, #0]
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	46c0      	nop			@ (mov r8, r8)
 8011434:	20002040 	.word	0x20002040

08011438 <__assert_func>:
 8011438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801143a:	0014      	movs	r4, r2
 801143c:	001a      	movs	r2, r3
 801143e:	4b09      	ldr	r3, [pc, #36]	@ (8011464 <__assert_func+0x2c>)
 8011440:	0005      	movs	r5, r0
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	000e      	movs	r6, r1
 8011446:	68d8      	ldr	r0, [r3, #12]
 8011448:	4b07      	ldr	r3, [pc, #28]	@ (8011468 <__assert_func+0x30>)
 801144a:	2c00      	cmp	r4, #0
 801144c:	d101      	bne.n	8011452 <__assert_func+0x1a>
 801144e:	4b07      	ldr	r3, [pc, #28]	@ (801146c <__assert_func+0x34>)
 8011450:	001c      	movs	r4, r3
 8011452:	4907      	ldr	r1, [pc, #28]	@ (8011470 <__assert_func+0x38>)
 8011454:	9301      	str	r3, [sp, #4]
 8011456:	9402      	str	r4, [sp, #8]
 8011458:	002b      	movs	r3, r5
 801145a:	9600      	str	r6, [sp, #0]
 801145c:	f000 f868 	bl	8011530 <fiprintf>
 8011460:	f000 f876 	bl	8011550 <abort>
 8011464:	20000278 	.word	0x20000278
 8011468:	08011edd 	.word	0x08011edd
 801146c:	08011f18 	.word	0x08011f18
 8011470:	08011eea 	.word	0x08011eea

08011474 <_calloc_r>:
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	0c0b      	lsrs	r3, r1, #16
 8011478:	0c15      	lsrs	r5, r2, #16
 801147a:	2b00      	cmp	r3, #0
 801147c:	d11e      	bne.n	80114bc <_calloc_r+0x48>
 801147e:	2d00      	cmp	r5, #0
 8011480:	d10c      	bne.n	801149c <_calloc_r+0x28>
 8011482:	b289      	uxth	r1, r1
 8011484:	b294      	uxth	r4, r2
 8011486:	434c      	muls	r4, r1
 8011488:	0021      	movs	r1, r4
 801148a:	f7ff f82f 	bl	80104ec <_malloc_r>
 801148e:	1e05      	subs	r5, r0, #0
 8011490:	d01b      	beq.n	80114ca <_calloc_r+0x56>
 8011492:	0022      	movs	r2, r4
 8011494:	2100      	movs	r1, #0
 8011496:	f7fd fd2f 	bl	800eef8 <memset>
 801149a:	e016      	b.n	80114ca <_calloc_r+0x56>
 801149c:	1c2b      	adds	r3, r5, #0
 801149e:	1c0c      	adds	r4, r1, #0
 80114a0:	b289      	uxth	r1, r1
 80114a2:	b292      	uxth	r2, r2
 80114a4:	434a      	muls	r2, r1
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	b2a1      	uxth	r1, r4
 80114aa:	4359      	muls	r1, r3
 80114ac:	0c14      	lsrs	r4, r2, #16
 80114ae:	190c      	adds	r4, r1, r4
 80114b0:	0c23      	lsrs	r3, r4, #16
 80114b2:	d107      	bne.n	80114c4 <_calloc_r+0x50>
 80114b4:	0424      	lsls	r4, r4, #16
 80114b6:	b292      	uxth	r2, r2
 80114b8:	4314      	orrs	r4, r2
 80114ba:	e7e5      	b.n	8011488 <_calloc_r+0x14>
 80114bc:	2d00      	cmp	r5, #0
 80114be:	d101      	bne.n	80114c4 <_calloc_r+0x50>
 80114c0:	1c14      	adds	r4, r2, #0
 80114c2:	e7ed      	b.n	80114a0 <_calloc_r+0x2c>
 80114c4:	230c      	movs	r3, #12
 80114c6:	2500      	movs	r5, #0
 80114c8:	6003      	str	r3, [r0, #0]
 80114ca:	0028      	movs	r0, r5
 80114cc:	bd70      	pop	{r4, r5, r6, pc}

080114ce <_realloc_r>:
 80114ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114d0:	0006      	movs	r6, r0
 80114d2:	000c      	movs	r4, r1
 80114d4:	0015      	movs	r5, r2
 80114d6:	2900      	cmp	r1, #0
 80114d8:	d105      	bne.n	80114e6 <_realloc_r+0x18>
 80114da:	0011      	movs	r1, r2
 80114dc:	f7ff f806 	bl	80104ec <_malloc_r>
 80114e0:	0004      	movs	r4, r0
 80114e2:	0020      	movs	r0, r4
 80114e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114e6:	2a00      	cmp	r2, #0
 80114e8:	d103      	bne.n	80114f2 <_realloc_r+0x24>
 80114ea:	f7fe fc2f 	bl	800fd4c <_free_r>
 80114ee:	002c      	movs	r4, r5
 80114f0:	e7f7      	b.n	80114e2 <_realloc_r+0x14>
 80114f2:	f000 f834 	bl	801155e <_malloc_usable_size_r>
 80114f6:	0007      	movs	r7, r0
 80114f8:	4285      	cmp	r5, r0
 80114fa:	d802      	bhi.n	8011502 <_realloc_r+0x34>
 80114fc:	0843      	lsrs	r3, r0, #1
 80114fe:	42ab      	cmp	r3, r5
 8011500:	d3ef      	bcc.n	80114e2 <_realloc_r+0x14>
 8011502:	0029      	movs	r1, r5
 8011504:	0030      	movs	r0, r6
 8011506:	f7fe fff1 	bl	80104ec <_malloc_r>
 801150a:	9001      	str	r0, [sp, #4]
 801150c:	2800      	cmp	r0, #0
 801150e:	d101      	bne.n	8011514 <_realloc_r+0x46>
 8011510:	9c01      	ldr	r4, [sp, #4]
 8011512:	e7e6      	b.n	80114e2 <_realloc_r+0x14>
 8011514:	002a      	movs	r2, r5
 8011516:	42bd      	cmp	r5, r7
 8011518:	d900      	bls.n	801151c <_realloc_r+0x4e>
 801151a:	003a      	movs	r2, r7
 801151c:	0021      	movs	r1, r4
 801151e:	9801      	ldr	r0, [sp, #4]
 8011520:	f7fd fd8e 	bl	800f040 <memcpy>
 8011524:	0021      	movs	r1, r4
 8011526:	0030      	movs	r0, r6
 8011528:	f7fe fc10 	bl	800fd4c <_free_r>
 801152c:	e7f0      	b.n	8011510 <_realloc_r+0x42>
	...

08011530 <fiprintf>:
 8011530:	b40e      	push	{r1, r2, r3}
 8011532:	b517      	push	{r0, r1, r2, r4, lr}
 8011534:	4c05      	ldr	r4, [pc, #20]	@ (801154c <fiprintf+0x1c>)
 8011536:	ab05      	add	r3, sp, #20
 8011538:	cb04      	ldmia	r3!, {r2}
 801153a:	0001      	movs	r1, r0
 801153c:	6820      	ldr	r0, [r4, #0]
 801153e:	9301      	str	r3, [sp, #4]
 8011540:	f000 f83c 	bl	80115bc <_vfiprintf_r>
 8011544:	bc1e      	pop	{r1, r2, r3, r4}
 8011546:	bc08      	pop	{r3}
 8011548:	b003      	add	sp, #12
 801154a:	4718      	bx	r3
 801154c:	20000278 	.word	0x20000278

08011550 <abort>:
 8011550:	2006      	movs	r0, #6
 8011552:	b510      	push	{r4, lr}
 8011554:	f000 fa18 	bl	8011988 <raise>
 8011558:	2001      	movs	r0, #1
 801155a:	f7f2 f8a1 	bl	80036a0 <_exit>

0801155e <_malloc_usable_size_r>:
 801155e:	1f0b      	subs	r3, r1, #4
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	1f18      	subs	r0, r3, #4
 8011564:	2b00      	cmp	r3, #0
 8011566:	da01      	bge.n	801156c <_malloc_usable_size_r+0xe>
 8011568:	580b      	ldr	r3, [r1, r0]
 801156a:	18c0      	adds	r0, r0, r3
 801156c:	4770      	bx	lr

0801156e <__sfputc_r>:
 801156e:	6893      	ldr	r3, [r2, #8]
 8011570:	b510      	push	{r4, lr}
 8011572:	3b01      	subs	r3, #1
 8011574:	6093      	str	r3, [r2, #8]
 8011576:	2b00      	cmp	r3, #0
 8011578:	da04      	bge.n	8011584 <__sfputc_r+0x16>
 801157a:	6994      	ldr	r4, [r2, #24]
 801157c:	42a3      	cmp	r3, r4
 801157e:	db07      	blt.n	8011590 <__sfputc_r+0x22>
 8011580:	290a      	cmp	r1, #10
 8011582:	d005      	beq.n	8011590 <__sfputc_r+0x22>
 8011584:	6813      	ldr	r3, [r2, #0]
 8011586:	1c58      	adds	r0, r3, #1
 8011588:	6010      	str	r0, [r2, #0]
 801158a:	7019      	strb	r1, [r3, #0]
 801158c:	0008      	movs	r0, r1
 801158e:	bd10      	pop	{r4, pc}
 8011590:	f000 f930 	bl	80117f4 <__swbuf_r>
 8011594:	0001      	movs	r1, r0
 8011596:	e7f9      	b.n	801158c <__sfputc_r+0x1e>

08011598 <__sfputs_r>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	0006      	movs	r6, r0
 801159c:	000f      	movs	r7, r1
 801159e:	0014      	movs	r4, r2
 80115a0:	18d5      	adds	r5, r2, r3
 80115a2:	42ac      	cmp	r4, r5
 80115a4:	d101      	bne.n	80115aa <__sfputs_r+0x12>
 80115a6:	2000      	movs	r0, #0
 80115a8:	e007      	b.n	80115ba <__sfputs_r+0x22>
 80115aa:	7821      	ldrb	r1, [r4, #0]
 80115ac:	003a      	movs	r2, r7
 80115ae:	0030      	movs	r0, r6
 80115b0:	f7ff ffdd 	bl	801156e <__sfputc_r>
 80115b4:	3401      	adds	r4, #1
 80115b6:	1c43      	adds	r3, r0, #1
 80115b8:	d1f3      	bne.n	80115a2 <__sfputs_r+0xa>
 80115ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080115bc <_vfiprintf_r>:
 80115bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115be:	b0a1      	sub	sp, #132	@ 0x84
 80115c0:	000f      	movs	r7, r1
 80115c2:	0015      	movs	r5, r2
 80115c4:	001e      	movs	r6, r3
 80115c6:	9003      	str	r0, [sp, #12]
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d004      	beq.n	80115d6 <_vfiprintf_r+0x1a>
 80115cc:	6a03      	ldr	r3, [r0, #32]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d101      	bne.n	80115d6 <_vfiprintf_r+0x1a>
 80115d2:	f7fd fbdb 	bl	800ed8c <__sinit>
 80115d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80115d8:	07db      	lsls	r3, r3, #31
 80115da:	d405      	bmi.n	80115e8 <_vfiprintf_r+0x2c>
 80115dc:	89bb      	ldrh	r3, [r7, #12]
 80115de:	059b      	lsls	r3, r3, #22
 80115e0:	d402      	bmi.n	80115e8 <_vfiprintf_r+0x2c>
 80115e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80115e4:	f7fd fd1f 	bl	800f026 <__retarget_lock_acquire_recursive>
 80115e8:	89bb      	ldrh	r3, [r7, #12]
 80115ea:	071b      	lsls	r3, r3, #28
 80115ec:	d502      	bpl.n	80115f4 <_vfiprintf_r+0x38>
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d113      	bne.n	801161c <_vfiprintf_r+0x60>
 80115f4:	0039      	movs	r1, r7
 80115f6:	9803      	ldr	r0, [sp, #12]
 80115f8:	f000 f93e 	bl	8011878 <__swsetup_r>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d00d      	beq.n	801161c <_vfiprintf_r+0x60>
 8011600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011602:	07db      	lsls	r3, r3, #31
 8011604:	d503      	bpl.n	801160e <_vfiprintf_r+0x52>
 8011606:	2001      	movs	r0, #1
 8011608:	4240      	negs	r0, r0
 801160a:	b021      	add	sp, #132	@ 0x84
 801160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801160e:	89bb      	ldrh	r3, [r7, #12]
 8011610:	059b      	lsls	r3, r3, #22
 8011612:	d4f8      	bmi.n	8011606 <_vfiprintf_r+0x4a>
 8011614:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011616:	f7fd fd07 	bl	800f028 <__retarget_lock_release_recursive>
 801161a:	e7f4      	b.n	8011606 <_vfiprintf_r+0x4a>
 801161c:	2300      	movs	r3, #0
 801161e:	ac08      	add	r4, sp, #32
 8011620:	6163      	str	r3, [r4, #20]
 8011622:	3320      	adds	r3, #32
 8011624:	7663      	strb	r3, [r4, #25]
 8011626:	3310      	adds	r3, #16
 8011628:	76a3      	strb	r3, [r4, #26]
 801162a:	9607      	str	r6, [sp, #28]
 801162c:	002e      	movs	r6, r5
 801162e:	7833      	ldrb	r3, [r6, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <_vfiprintf_r+0x7c>
 8011634:	2b25      	cmp	r3, #37	@ 0x25
 8011636:	d148      	bne.n	80116ca <_vfiprintf_r+0x10e>
 8011638:	1b73      	subs	r3, r6, r5
 801163a:	9305      	str	r3, [sp, #20]
 801163c:	42ae      	cmp	r6, r5
 801163e:	d00b      	beq.n	8011658 <_vfiprintf_r+0x9c>
 8011640:	002a      	movs	r2, r5
 8011642:	0039      	movs	r1, r7
 8011644:	9803      	ldr	r0, [sp, #12]
 8011646:	f7ff ffa7 	bl	8011598 <__sfputs_r>
 801164a:	3001      	adds	r0, #1
 801164c:	d100      	bne.n	8011650 <_vfiprintf_r+0x94>
 801164e:	e0ae      	b.n	80117ae <_vfiprintf_r+0x1f2>
 8011650:	6963      	ldr	r3, [r4, #20]
 8011652:	9a05      	ldr	r2, [sp, #20]
 8011654:	189b      	adds	r3, r3, r2
 8011656:	6163      	str	r3, [r4, #20]
 8011658:	7833      	ldrb	r3, [r6, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d100      	bne.n	8011660 <_vfiprintf_r+0xa4>
 801165e:	e0a6      	b.n	80117ae <_vfiprintf_r+0x1f2>
 8011660:	2201      	movs	r2, #1
 8011662:	2300      	movs	r3, #0
 8011664:	4252      	negs	r2, r2
 8011666:	6062      	str	r2, [r4, #4]
 8011668:	a904      	add	r1, sp, #16
 801166a:	3254      	adds	r2, #84	@ 0x54
 801166c:	1852      	adds	r2, r2, r1
 801166e:	1c75      	adds	r5, r6, #1
 8011670:	6023      	str	r3, [r4, #0]
 8011672:	60e3      	str	r3, [r4, #12]
 8011674:	60a3      	str	r3, [r4, #8]
 8011676:	7013      	strb	r3, [r2, #0]
 8011678:	65a3      	str	r3, [r4, #88]	@ 0x58
 801167a:	4b59      	ldr	r3, [pc, #356]	@ (80117e0 <_vfiprintf_r+0x224>)
 801167c:	2205      	movs	r2, #5
 801167e:	0018      	movs	r0, r3
 8011680:	7829      	ldrb	r1, [r5, #0]
 8011682:	9305      	str	r3, [sp, #20]
 8011684:	f7fd fcd1 	bl	800f02a <memchr>
 8011688:	1c6e      	adds	r6, r5, #1
 801168a:	2800      	cmp	r0, #0
 801168c:	d11f      	bne.n	80116ce <_vfiprintf_r+0x112>
 801168e:	6822      	ldr	r2, [r4, #0]
 8011690:	06d3      	lsls	r3, r2, #27
 8011692:	d504      	bpl.n	801169e <_vfiprintf_r+0xe2>
 8011694:	2353      	movs	r3, #83	@ 0x53
 8011696:	a904      	add	r1, sp, #16
 8011698:	185b      	adds	r3, r3, r1
 801169a:	2120      	movs	r1, #32
 801169c:	7019      	strb	r1, [r3, #0]
 801169e:	0713      	lsls	r3, r2, #28
 80116a0:	d504      	bpl.n	80116ac <_vfiprintf_r+0xf0>
 80116a2:	2353      	movs	r3, #83	@ 0x53
 80116a4:	a904      	add	r1, sp, #16
 80116a6:	185b      	adds	r3, r3, r1
 80116a8:	212b      	movs	r1, #43	@ 0x2b
 80116aa:	7019      	strb	r1, [r3, #0]
 80116ac:	782b      	ldrb	r3, [r5, #0]
 80116ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80116b0:	d016      	beq.n	80116e0 <_vfiprintf_r+0x124>
 80116b2:	002e      	movs	r6, r5
 80116b4:	2100      	movs	r1, #0
 80116b6:	200a      	movs	r0, #10
 80116b8:	68e3      	ldr	r3, [r4, #12]
 80116ba:	7832      	ldrb	r2, [r6, #0]
 80116bc:	1c75      	adds	r5, r6, #1
 80116be:	3a30      	subs	r2, #48	@ 0x30
 80116c0:	2a09      	cmp	r2, #9
 80116c2:	d950      	bls.n	8011766 <_vfiprintf_r+0x1aa>
 80116c4:	2900      	cmp	r1, #0
 80116c6:	d111      	bne.n	80116ec <_vfiprintf_r+0x130>
 80116c8:	e017      	b.n	80116fa <_vfiprintf_r+0x13e>
 80116ca:	3601      	adds	r6, #1
 80116cc:	e7af      	b.n	801162e <_vfiprintf_r+0x72>
 80116ce:	9b05      	ldr	r3, [sp, #20]
 80116d0:	6822      	ldr	r2, [r4, #0]
 80116d2:	1ac0      	subs	r0, r0, r3
 80116d4:	2301      	movs	r3, #1
 80116d6:	4083      	lsls	r3, r0
 80116d8:	4313      	orrs	r3, r2
 80116da:	0035      	movs	r5, r6
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	e7cc      	b.n	801167a <_vfiprintf_r+0xbe>
 80116e0:	9b07      	ldr	r3, [sp, #28]
 80116e2:	1d19      	adds	r1, r3, #4
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	9107      	str	r1, [sp, #28]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	db01      	blt.n	80116f0 <_vfiprintf_r+0x134>
 80116ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80116ee:	e004      	b.n	80116fa <_vfiprintf_r+0x13e>
 80116f0:	425b      	negs	r3, r3
 80116f2:	60e3      	str	r3, [r4, #12]
 80116f4:	2302      	movs	r3, #2
 80116f6:	4313      	orrs	r3, r2
 80116f8:	6023      	str	r3, [r4, #0]
 80116fa:	7833      	ldrb	r3, [r6, #0]
 80116fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80116fe:	d10c      	bne.n	801171a <_vfiprintf_r+0x15e>
 8011700:	7873      	ldrb	r3, [r6, #1]
 8011702:	2b2a      	cmp	r3, #42	@ 0x2a
 8011704:	d134      	bne.n	8011770 <_vfiprintf_r+0x1b4>
 8011706:	9b07      	ldr	r3, [sp, #28]
 8011708:	3602      	adds	r6, #2
 801170a:	1d1a      	adds	r2, r3, #4
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	9207      	str	r2, [sp, #28]
 8011710:	2b00      	cmp	r3, #0
 8011712:	da01      	bge.n	8011718 <_vfiprintf_r+0x15c>
 8011714:	2301      	movs	r3, #1
 8011716:	425b      	negs	r3, r3
 8011718:	9309      	str	r3, [sp, #36]	@ 0x24
 801171a:	4d32      	ldr	r5, [pc, #200]	@ (80117e4 <_vfiprintf_r+0x228>)
 801171c:	2203      	movs	r2, #3
 801171e:	0028      	movs	r0, r5
 8011720:	7831      	ldrb	r1, [r6, #0]
 8011722:	f7fd fc82 	bl	800f02a <memchr>
 8011726:	2800      	cmp	r0, #0
 8011728:	d006      	beq.n	8011738 <_vfiprintf_r+0x17c>
 801172a:	2340      	movs	r3, #64	@ 0x40
 801172c:	1b40      	subs	r0, r0, r5
 801172e:	4083      	lsls	r3, r0
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	3601      	adds	r6, #1
 8011734:	4313      	orrs	r3, r2
 8011736:	6023      	str	r3, [r4, #0]
 8011738:	7831      	ldrb	r1, [r6, #0]
 801173a:	2206      	movs	r2, #6
 801173c:	482a      	ldr	r0, [pc, #168]	@ (80117e8 <_vfiprintf_r+0x22c>)
 801173e:	1c75      	adds	r5, r6, #1
 8011740:	7621      	strb	r1, [r4, #24]
 8011742:	f7fd fc72 	bl	800f02a <memchr>
 8011746:	2800      	cmp	r0, #0
 8011748:	d040      	beq.n	80117cc <_vfiprintf_r+0x210>
 801174a:	4b28      	ldr	r3, [pc, #160]	@ (80117ec <_vfiprintf_r+0x230>)
 801174c:	2b00      	cmp	r3, #0
 801174e:	d122      	bne.n	8011796 <_vfiprintf_r+0x1da>
 8011750:	2207      	movs	r2, #7
 8011752:	9b07      	ldr	r3, [sp, #28]
 8011754:	3307      	adds	r3, #7
 8011756:	4393      	bics	r3, r2
 8011758:	3308      	adds	r3, #8
 801175a:	9307      	str	r3, [sp, #28]
 801175c:	6963      	ldr	r3, [r4, #20]
 801175e:	9a04      	ldr	r2, [sp, #16]
 8011760:	189b      	adds	r3, r3, r2
 8011762:	6163      	str	r3, [r4, #20]
 8011764:	e762      	b.n	801162c <_vfiprintf_r+0x70>
 8011766:	4343      	muls	r3, r0
 8011768:	002e      	movs	r6, r5
 801176a:	2101      	movs	r1, #1
 801176c:	189b      	adds	r3, r3, r2
 801176e:	e7a4      	b.n	80116ba <_vfiprintf_r+0xfe>
 8011770:	2300      	movs	r3, #0
 8011772:	200a      	movs	r0, #10
 8011774:	0019      	movs	r1, r3
 8011776:	3601      	adds	r6, #1
 8011778:	6063      	str	r3, [r4, #4]
 801177a:	7832      	ldrb	r2, [r6, #0]
 801177c:	1c75      	adds	r5, r6, #1
 801177e:	3a30      	subs	r2, #48	@ 0x30
 8011780:	2a09      	cmp	r2, #9
 8011782:	d903      	bls.n	801178c <_vfiprintf_r+0x1d0>
 8011784:	2b00      	cmp	r3, #0
 8011786:	d0c8      	beq.n	801171a <_vfiprintf_r+0x15e>
 8011788:	9109      	str	r1, [sp, #36]	@ 0x24
 801178a:	e7c6      	b.n	801171a <_vfiprintf_r+0x15e>
 801178c:	4341      	muls	r1, r0
 801178e:	002e      	movs	r6, r5
 8011790:	2301      	movs	r3, #1
 8011792:	1889      	adds	r1, r1, r2
 8011794:	e7f1      	b.n	801177a <_vfiprintf_r+0x1be>
 8011796:	aa07      	add	r2, sp, #28
 8011798:	9200      	str	r2, [sp, #0]
 801179a:	0021      	movs	r1, r4
 801179c:	003a      	movs	r2, r7
 801179e:	4b14      	ldr	r3, [pc, #80]	@ (80117f0 <_vfiprintf_r+0x234>)
 80117a0:	9803      	ldr	r0, [sp, #12]
 80117a2:	f7fc fea9 	bl	800e4f8 <_printf_float>
 80117a6:	9004      	str	r0, [sp, #16]
 80117a8:	9b04      	ldr	r3, [sp, #16]
 80117aa:	3301      	adds	r3, #1
 80117ac:	d1d6      	bne.n	801175c <_vfiprintf_r+0x1a0>
 80117ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117b0:	07db      	lsls	r3, r3, #31
 80117b2:	d405      	bmi.n	80117c0 <_vfiprintf_r+0x204>
 80117b4:	89bb      	ldrh	r3, [r7, #12]
 80117b6:	059b      	lsls	r3, r3, #22
 80117b8:	d402      	bmi.n	80117c0 <_vfiprintf_r+0x204>
 80117ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80117bc:	f7fd fc34 	bl	800f028 <__retarget_lock_release_recursive>
 80117c0:	89bb      	ldrh	r3, [r7, #12]
 80117c2:	065b      	lsls	r3, r3, #25
 80117c4:	d500      	bpl.n	80117c8 <_vfiprintf_r+0x20c>
 80117c6:	e71e      	b.n	8011606 <_vfiprintf_r+0x4a>
 80117c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80117ca:	e71e      	b.n	801160a <_vfiprintf_r+0x4e>
 80117cc:	aa07      	add	r2, sp, #28
 80117ce:	9200      	str	r2, [sp, #0]
 80117d0:	0021      	movs	r1, r4
 80117d2:	003a      	movs	r2, r7
 80117d4:	4b06      	ldr	r3, [pc, #24]	@ (80117f0 <_vfiprintf_r+0x234>)
 80117d6:	9803      	ldr	r0, [sp, #12]
 80117d8:	f7fd f93c 	bl	800ea54 <_printf_i>
 80117dc:	e7e3      	b.n	80117a6 <_vfiprintf_r+0x1ea>
 80117de:	46c0      	nop			@ (mov r8, r8)
 80117e0:	08011ecc 	.word	0x08011ecc
 80117e4:	08011ed2 	.word	0x08011ed2
 80117e8:	08011ed6 	.word	0x08011ed6
 80117ec:	0800e4f9 	.word	0x0800e4f9
 80117f0:	08011599 	.word	0x08011599

080117f4 <__swbuf_r>:
 80117f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117f6:	0006      	movs	r6, r0
 80117f8:	000d      	movs	r5, r1
 80117fa:	0014      	movs	r4, r2
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d004      	beq.n	801180a <__swbuf_r+0x16>
 8011800:	6a03      	ldr	r3, [r0, #32]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <__swbuf_r+0x16>
 8011806:	f7fd fac1 	bl	800ed8c <__sinit>
 801180a:	69a3      	ldr	r3, [r4, #24]
 801180c:	60a3      	str	r3, [r4, #8]
 801180e:	89a3      	ldrh	r3, [r4, #12]
 8011810:	071b      	lsls	r3, r3, #28
 8011812:	d502      	bpl.n	801181a <__swbuf_r+0x26>
 8011814:	6923      	ldr	r3, [r4, #16]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d109      	bne.n	801182e <__swbuf_r+0x3a>
 801181a:	0021      	movs	r1, r4
 801181c:	0030      	movs	r0, r6
 801181e:	f000 f82b 	bl	8011878 <__swsetup_r>
 8011822:	2800      	cmp	r0, #0
 8011824:	d003      	beq.n	801182e <__swbuf_r+0x3a>
 8011826:	2501      	movs	r5, #1
 8011828:	426d      	negs	r5, r5
 801182a:	0028      	movs	r0, r5
 801182c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801182e:	6923      	ldr	r3, [r4, #16]
 8011830:	6820      	ldr	r0, [r4, #0]
 8011832:	b2ef      	uxtb	r7, r5
 8011834:	1ac0      	subs	r0, r0, r3
 8011836:	6963      	ldr	r3, [r4, #20]
 8011838:	b2ed      	uxtb	r5, r5
 801183a:	4283      	cmp	r3, r0
 801183c:	dc05      	bgt.n	801184a <__swbuf_r+0x56>
 801183e:	0021      	movs	r1, r4
 8011840:	0030      	movs	r0, r6
 8011842:	f7ff fda9 	bl	8011398 <_fflush_r>
 8011846:	2800      	cmp	r0, #0
 8011848:	d1ed      	bne.n	8011826 <__swbuf_r+0x32>
 801184a:	68a3      	ldr	r3, [r4, #8]
 801184c:	3001      	adds	r0, #1
 801184e:	3b01      	subs	r3, #1
 8011850:	60a3      	str	r3, [r4, #8]
 8011852:	6823      	ldr	r3, [r4, #0]
 8011854:	1c5a      	adds	r2, r3, #1
 8011856:	6022      	str	r2, [r4, #0]
 8011858:	701f      	strb	r7, [r3, #0]
 801185a:	6963      	ldr	r3, [r4, #20]
 801185c:	4283      	cmp	r3, r0
 801185e:	d004      	beq.n	801186a <__swbuf_r+0x76>
 8011860:	89a3      	ldrh	r3, [r4, #12]
 8011862:	07db      	lsls	r3, r3, #31
 8011864:	d5e1      	bpl.n	801182a <__swbuf_r+0x36>
 8011866:	2d0a      	cmp	r5, #10
 8011868:	d1df      	bne.n	801182a <__swbuf_r+0x36>
 801186a:	0021      	movs	r1, r4
 801186c:	0030      	movs	r0, r6
 801186e:	f7ff fd93 	bl	8011398 <_fflush_r>
 8011872:	2800      	cmp	r0, #0
 8011874:	d0d9      	beq.n	801182a <__swbuf_r+0x36>
 8011876:	e7d6      	b.n	8011826 <__swbuf_r+0x32>

08011878 <__swsetup_r>:
 8011878:	4b2d      	ldr	r3, [pc, #180]	@ (8011930 <__swsetup_r+0xb8>)
 801187a:	b570      	push	{r4, r5, r6, lr}
 801187c:	0005      	movs	r5, r0
 801187e:	6818      	ldr	r0, [r3, #0]
 8011880:	000c      	movs	r4, r1
 8011882:	2800      	cmp	r0, #0
 8011884:	d004      	beq.n	8011890 <__swsetup_r+0x18>
 8011886:	6a03      	ldr	r3, [r0, #32]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d101      	bne.n	8011890 <__swsetup_r+0x18>
 801188c:	f7fd fa7e 	bl	800ed8c <__sinit>
 8011890:	220c      	movs	r2, #12
 8011892:	5ea3      	ldrsh	r3, [r4, r2]
 8011894:	071a      	lsls	r2, r3, #28
 8011896:	d423      	bmi.n	80118e0 <__swsetup_r+0x68>
 8011898:	06da      	lsls	r2, r3, #27
 801189a:	d407      	bmi.n	80118ac <__swsetup_r+0x34>
 801189c:	2209      	movs	r2, #9
 801189e:	602a      	str	r2, [r5, #0]
 80118a0:	2240      	movs	r2, #64	@ 0x40
 80118a2:	2001      	movs	r0, #1
 80118a4:	4313      	orrs	r3, r2
 80118a6:	81a3      	strh	r3, [r4, #12]
 80118a8:	4240      	negs	r0, r0
 80118aa:	e03a      	b.n	8011922 <__swsetup_r+0xaa>
 80118ac:	075b      	lsls	r3, r3, #29
 80118ae:	d513      	bpl.n	80118d8 <__swsetup_r+0x60>
 80118b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118b2:	2900      	cmp	r1, #0
 80118b4:	d008      	beq.n	80118c8 <__swsetup_r+0x50>
 80118b6:	0023      	movs	r3, r4
 80118b8:	3344      	adds	r3, #68	@ 0x44
 80118ba:	4299      	cmp	r1, r3
 80118bc:	d002      	beq.n	80118c4 <__swsetup_r+0x4c>
 80118be:	0028      	movs	r0, r5
 80118c0:	f7fe fa44 	bl	800fd4c <_free_r>
 80118c4:	2300      	movs	r3, #0
 80118c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80118c8:	2224      	movs	r2, #36	@ 0x24
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	4393      	bics	r3, r2
 80118ce:	81a3      	strh	r3, [r4, #12]
 80118d0:	2300      	movs	r3, #0
 80118d2:	6063      	str	r3, [r4, #4]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	2308      	movs	r3, #8
 80118da:	89a2      	ldrh	r2, [r4, #12]
 80118dc:	4313      	orrs	r3, r2
 80118de:	81a3      	strh	r3, [r4, #12]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10b      	bne.n	80118fe <__swsetup_r+0x86>
 80118e6:	21a0      	movs	r1, #160	@ 0xa0
 80118e8:	2280      	movs	r2, #128	@ 0x80
 80118ea:	89a3      	ldrh	r3, [r4, #12]
 80118ec:	0089      	lsls	r1, r1, #2
 80118ee:	0092      	lsls	r2, r2, #2
 80118f0:	400b      	ands	r3, r1
 80118f2:	4293      	cmp	r3, r2
 80118f4:	d003      	beq.n	80118fe <__swsetup_r+0x86>
 80118f6:	0021      	movs	r1, r4
 80118f8:	0028      	movs	r0, r5
 80118fa:	f000 f88f 	bl	8011a1c <__smakebuf_r>
 80118fe:	220c      	movs	r2, #12
 8011900:	5ea3      	ldrsh	r3, [r4, r2]
 8011902:	2101      	movs	r1, #1
 8011904:	001a      	movs	r2, r3
 8011906:	400a      	ands	r2, r1
 8011908:	420b      	tst	r3, r1
 801190a:	d00b      	beq.n	8011924 <__swsetup_r+0xac>
 801190c:	2200      	movs	r2, #0
 801190e:	60a2      	str	r2, [r4, #8]
 8011910:	6962      	ldr	r2, [r4, #20]
 8011912:	4252      	negs	r2, r2
 8011914:	61a2      	str	r2, [r4, #24]
 8011916:	2000      	movs	r0, #0
 8011918:	6922      	ldr	r2, [r4, #16]
 801191a:	4282      	cmp	r2, r0
 801191c:	d101      	bne.n	8011922 <__swsetup_r+0xaa>
 801191e:	061a      	lsls	r2, r3, #24
 8011920:	d4be      	bmi.n	80118a0 <__swsetup_r+0x28>
 8011922:	bd70      	pop	{r4, r5, r6, pc}
 8011924:	0799      	lsls	r1, r3, #30
 8011926:	d400      	bmi.n	801192a <__swsetup_r+0xb2>
 8011928:	6962      	ldr	r2, [r4, #20]
 801192a:	60a2      	str	r2, [r4, #8]
 801192c:	e7f3      	b.n	8011916 <__swsetup_r+0x9e>
 801192e:	46c0      	nop			@ (mov r8, r8)
 8011930:	20000278 	.word	0x20000278

08011934 <_raise_r>:
 8011934:	b570      	push	{r4, r5, r6, lr}
 8011936:	0004      	movs	r4, r0
 8011938:	000d      	movs	r5, r1
 801193a:	291f      	cmp	r1, #31
 801193c:	d904      	bls.n	8011948 <_raise_r+0x14>
 801193e:	2316      	movs	r3, #22
 8011940:	6003      	str	r3, [r0, #0]
 8011942:	2001      	movs	r0, #1
 8011944:	4240      	negs	r0, r0
 8011946:	bd70      	pop	{r4, r5, r6, pc}
 8011948:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801194a:	2b00      	cmp	r3, #0
 801194c:	d004      	beq.n	8011958 <_raise_r+0x24>
 801194e:	008a      	lsls	r2, r1, #2
 8011950:	189b      	adds	r3, r3, r2
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	2a00      	cmp	r2, #0
 8011956:	d108      	bne.n	801196a <_raise_r+0x36>
 8011958:	0020      	movs	r0, r4
 801195a:	f000 f831 	bl	80119c0 <_getpid_r>
 801195e:	002a      	movs	r2, r5
 8011960:	0001      	movs	r1, r0
 8011962:	0020      	movs	r0, r4
 8011964:	f000 f81a 	bl	801199c <_kill_r>
 8011968:	e7ed      	b.n	8011946 <_raise_r+0x12>
 801196a:	2a01      	cmp	r2, #1
 801196c:	d009      	beq.n	8011982 <_raise_r+0x4e>
 801196e:	1c51      	adds	r1, r2, #1
 8011970:	d103      	bne.n	801197a <_raise_r+0x46>
 8011972:	2316      	movs	r3, #22
 8011974:	6003      	str	r3, [r0, #0]
 8011976:	2001      	movs	r0, #1
 8011978:	e7e5      	b.n	8011946 <_raise_r+0x12>
 801197a:	2100      	movs	r1, #0
 801197c:	0028      	movs	r0, r5
 801197e:	6019      	str	r1, [r3, #0]
 8011980:	4790      	blx	r2
 8011982:	2000      	movs	r0, #0
 8011984:	e7df      	b.n	8011946 <_raise_r+0x12>
	...

08011988 <raise>:
 8011988:	b510      	push	{r4, lr}
 801198a:	4b03      	ldr	r3, [pc, #12]	@ (8011998 <raise+0x10>)
 801198c:	0001      	movs	r1, r0
 801198e:	6818      	ldr	r0, [r3, #0]
 8011990:	f7ff ffd0 	bl	8011934 <_raise_r>
 8011994:	bd10      	pop	{r4, pc}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	20000278 	.word	0x20000278

0801199c <_kill_r>:
 801199c:	2300      	movs	r3, #0
 801199e:	b570      	push	{r4, r5, r6, lr}
 80119a0:	4d06      	ldr	r5, [pc, #24]	@ (80119bc <_kill_r+0x20>)
 80119a2:	0004      	movs	r4, r0
 80119a4:	0008      	movs	r0, r1
 80119a6:	0011      	movs	r1, r2
 80119a8:	602b      	str	r3, [r5, #0]
 80119aa:	f7f1 fe69 	bl	8003680 <_kill>
 80119ae:	1c43      	adds	r3, r0, #1
 80119b0:	d103      	bne.n	80119ba <_kill_r+0x1e>
 80119b2:	682b      	ldr	r3, [r5, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d000      	beq.n	80119ba <_kill_r+0x1e>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	20002040 	.word	0x20002040

080119c0 <_getpid_r>:
 80119c0:	b510      	push	{r4, lr}
 80119c2:	f7f1 fe57 	bl	8003674 <_getpid>
 80119c6:	bd10      	pop	{r4, pc}

080119c8 <__swhatbuf_r>:
 80119c8:	b570      	push	{r4, r5, r6, lr}
 80119ca:	000e      	movs	r6, r1
 80119cc:	001d      	movs	r5, r3
 80119ce:	230e      	movs	r3, #14
 80119d0:	5ec9      	ldrsh	r1, [r1, r3]
 80119d2:	0014      	movs	r4, r2
 80119d4:	b096      	sub	sp, #88	@ 0x58
 80119d6:	2900      	cmp	r1, #0
 80119d8:	da0c      	bge.n	80119f4 <__swhatbuf_r+0x2c>
 80119da:	89b2      	ldrh	r2, [r6, #12]
 80119dc:	2380      	movs	r3, #128	@ 0x80
 80119de:	0011      	movs	r1, r2
 80119e0:	4019      	ands	r1, r3
 80119e2:	421a      	tst	r2, r3
 80119e4:	d114      	bne.n	8011a10 <__swhatbuf_r+0x48>
 80119e6:	2380      	movs	r3, #128	@ 0x80
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	2000      	movs	r0, #0
 80119ec:	6029      	str	r1, [r5, #0]
 80119ee:	6023      	str	r3, [r4, #0]
 80119f0:	b016      	add	sp, #88	@ 0x58
 80119f2:	bd70      	pop	{r4, r5, r6, pc}
 80119f4:	466a      	mov	r2, sp
 80119f6:	f000 f853 	bl	8011aa0 <_fstat_r>
 80119fa:	2800      	cmp	r0, #0
 80119fc:	dbed      	blt.n	80119da <__swhatbuf_r+0x12>
 80119fe:	23f0      	movs	r3, #240	@ 0xf0
 8011a00:	9901      	ldr	r1, [sp, #4]
 8011a02:	021b      	lsls	r3, r3, #8
 8011a04:	4019      	ands	r1, r3
 8011a06:	4b04      	ldr	r3, [pc, #16]	@ (8011a18 <__swhatbuf_r+0x50>)
 8011a08:	18c9      	adds	r1, r1, r3
 8011a0a:	424b      	negs	r3, r1
 8011a0c:	4159      	adcs	r1, r3
 8011a0e:	e7ea      	b.n	80119e6 <__swhatbuf_r+0x1e>
 8011a10:	2100      	movs	r1, #0
 8011a12:	2340      	movs	r3, #64	@ 0x40
 8011a14:	e7e9      	b.n	80119ea <__swhatbuf_r+0x22>
 8011a16:	46c0      	nop			@ (mov r8, r8)
 8011a18:	ffffe000 	.word	0xffffe000

08011a1c <__smakebuf_r>:
 8011a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1e:	2602      	movs	r6, #2
 8011a20:	898b      	ldrh	r3, [r1, #12]
 8011a22:	0005      	movs	r5, r0
 8011a24:	000c      	movs	r4, r1
 8011a26:	b085      	sub	sp, #20
 8011a28:	4233      	tst	r3, r6
 8011a2a:	d007      	beq.n	8011a3c <__smakebuf_r+0x20>
 8011a2c:	0023      	movs	r3, r4
 8011a2e:	3347      	adds	r3, #71	@ 0x47
 8011a30:	6023      	str	r3, [r4, #0]
 8011a32:	6123      	str	r3, [r4, #16]
 8011a34:	2301      	movs	r3, #1
 8011a36:	6163      	str	r3, [r4, #20]
 8011a38:	b005      	add	sp, #20
 8011a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a3c:	ab03      	add	r3, sp, #12
 8011a3e:	aa02      	add	r2, sp, #8
 8011a40:	f7ff ffc2 	bl	80119c8 <__swhatbuf_r>
 8011a44:	9f02      	ldr	r7, [sp, #8]
 8011a46:	9001      	str	r0, [sp, #4]
 8011a48:	0039      	movs	r1, r7
 8011a4a:	0028      	movs	r0, r5
 8011a4c:	f7fe fd4e 	bl	80104ec <_malloc_r>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d108      	bne.n	8011a66 <__smakebuf_r+0x4a>
 8011a54:	220c      	movs	r2, #12
 8011a56:	5ea3      	ldrsh	r3, [r4, r2]
 8011a58:	059a      	lsls	r2, r3, #22
 8011a5a:	d4ed      	bmi.n	8011a38 <__smakebuf_r+0x1c>
 8011a5c:	2203      	movs	r2, #3
 8011a5e:	4393      	bics	r3, r2
 8011a60:	431e      	orrs	r6, r3
 8011a62:	81a6      	strh	r6, [r4, #12]
 8011a64:	e7e2      	b.n	8011a2c <__smakebuf_r+0x10>
 8011a66:	2380      	movs	r3, #128	@ 0x80
 8011a68:	89a2      	ldrh	r2, [r4, #12]
 8011a6a:	6020      	str	r0, [r4, #0]
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	9b03      	ldr	r3, [sp, #12]
 8011a72:	6120      	str	r0, [r4, #16]
 8011a74:	6167      	str	r7, [r4, #20]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00c      	beq.n	8011a94 <__smakebuf_r+0x78>
 8011a7a:	0028      	movs	r0, r5
 8011a7c:	230e      	movs	r3, #14
 8011a7e:	5ee1      	ldrsh	r1, [r4, r3]
 8011a80:	f000 f820 	bl	8011ac4 <_isatty_r>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d005      	beq.n	8011a94 <__smakebuf_r+0x78>
 8011a88:	2303      	movs	r3, #3
 8011a8a:	89a2      	ldrh	r2, [r4, #12]
 8011a8c:	439a      	bics	r2, r3
 8011a8e:	3b02      	subs	r3, #2
 8011a90:	4313      	orrs	r3, r2
 8011a92:	81a3      	strh	r3, [r4, #12]
 8011a94:	89a3      	ldrh	r3, [r4, #12]
 8011a96:	9a01      	ldr	r2, [sp, #4]
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	81a3      	strh	r3, [r4, #12]
 8011a9c:	e7cc      	b.n	8011a38 <__smakebuf_r+0x1c>
	...

08011aa0 <_fstat_r>:
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	b570      	push	{r4, r5, r6, lr}
 8011aa4:	4d06      	ldr	r5, [pc, #24]	@ (8011ac0 <_fstat_r+0x20>)
 8011aa6:	0004      	movs	r4, r0
 8011aa8:	0008      	movs	r0, r1
 8011aaa:	0011      	movs	r1, r2
 8011aac:	602b      	str	r3, [r5, #0]
 8011aae:	f7f1 fe47 	bl	8003740 <_fstat>
 8011ab2:	1c43      	adds	r3, r0, #1
 8011ab4:	d103      	bne.n	8011abe <_fstat_r+0x1e>
 8011ab6:	682b      	ldr	r3, [r5, #0]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d000      	beq.n	8011abe <_fstat_r+0x1e>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd70      	pop	{r4, r5, r6, pc}
 8011ac0:	20002040 	.word	0x20002040

08011ac4 <_isatty_r>:
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	b570      	push	{r4, r5, r6, lr}
 8011ac8:	4d06      	ldr	r5, [pc, #24]	@ (8011ae4 <_isatty_r+0x20>)
 8011aca:	0004      	movs	r4, r0
 8011acc:	0008      	movs	r0, r1
 8011ace:	602b      	str	r3, [r5, #0]
 8011ad0:	f7f1 fe44 	bl	800375c <_isatty>
 8011ad4:	1c43      	adds	r3, r0, #1
 8011ad6:	d103      	bne.n	8011ae0 <_isatty_r+0x1c>
 8011ad8:	682b      	ldr	r3, [r5, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d000      	beq.n	8011ae0 <_isatty_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	46c0      	nop			@ (mov r8, r8)
 8011ae4:	20002040 	.word	0x20002040

08011ae8 <_init>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	46c0      	nop			@ (mov r8, r8)
 8011aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aee:	bc08      	pop	{r3}
 8011af0:	469e      	mov	lr, r3
 8011af2:	4770      	bx	lr

08011af4 <_fini>:
 8011af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af6:	46c0      	nop			@ (mov r8, r8)
 8011af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011afa:	bc08      	pop	{r3}
 8011afc:	469e      	mov	lr, r3
 8011afe:	4770      	bx	lr
