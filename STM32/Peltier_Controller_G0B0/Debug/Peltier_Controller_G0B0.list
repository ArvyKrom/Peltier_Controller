
Peltier_Controller_G0B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131e0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  08013298  08013298  00014298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013934  08013934  00015358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08013934  08013934  00015358  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08013934  08013934  00015358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013934  08013934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013938  08013938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0801393c  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  20000358  08013c94  00015358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022a8  08013c94  000162a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e7df  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cb4  00000000  00000000  00033b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00038818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001556  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb2f  00000000  00000000  0003b93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002418d  00000000  00000000  0005b46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3c56  00000000  00000000  0007f5fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007810  00000000  00000000  00133294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0013aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000358 	.word	0x20000358
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08013280 	.word	0x08013280

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000035c 	.word	0x2000035c
 80000fc:	08013280 	.word	0x08013280

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f833 	bl	80014a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff77 	bl	8001338 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f825 	bl	80014a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f81b 	bl	80014a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffa1 	bl	80013c0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff97 	bl	80013c0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff73 	bl	80023a0 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fb40 	bl	8001b48 <__aeabi_dsub>
 80004c8:	f001 ff6a 	bl	80023a0 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb3 	bl	8000450 <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d108      	bne.n	8000500 <__aeabi_d2lz+0x24>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f000 f80f 	bl	8000514 <__aeabi_d2ulz>
 80004f6:	0002      	movs	r2, r0
 80004f8:	000b      	movs	r3, r1
 80004fa:	0010      	movs	r0, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	18e9      	adds	r1, r5, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f804 	bl	8000514 <__aeabi_d2ulz>
 800050c:	2300      	movs	r3, #0
 800050e:	4242      	negs	r2, r0
 8000510:	418b      	sbcs	r3, r1
 8000512:	e7f2      	b.n	80004fa <__aeabi_d2lz+0x1e>

08000514 <__aeabi_d2ulz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <__aeabi_d2ulz+0x34>)
 800051a:	000d      	movs	r5, r1
 800051c:	0004      	movs	r4, r0
 800051e:	f001 f82d 	bl	800157c <__aeabi_dmul>
 8000522:	f7ff ffbd 	bl	80004a0 <__aeabi_d2uiz>
 8000526:	0006      	movs	r6, r0
 8000528:	f001 ffa4 	bl	8002474 <__aeabi_ui2d>
 800052c:	2200      	movs	r2, #0
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <__aeabi_d2ulz+0x38>)
 8000530:	f001 f824 	bl	800157c <__aeabi_dmul>
 8000534:	0002      	movs	r2, r0
 8000536:	000b      	movs	r3, r1
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fb04 	bl	8001b48 <__aeabi_dsub>
 8000540:	f7ff ffae 	bl	80004a0 <__aeabi_d2uiz>
 8000544:	0031      	movs	r1, r6
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	3df00000 	.word	0x3df00000
 800054c:	41f00000 	.word	0x41f00000

08000550 <__aeabi_l2d>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0006      	movs	r6, r0
 8000554:	0008      	movs	r0, r1
 8000556:	f001 ff5f 	bl	8002418 <__aeabi_i2d>
 800055a:	2200      	movs	r2, #0
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <__aeabi_l2d+0x28>)
 800055e:	f001 f80d 	bl	800157c <__aeabi_dmul>
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	0030      	movs	r0, r6
 8000568:	f001 ff84 	bl	8002474 <__aeabi_ui2d>
 800056c:	002b      	movs	r3, r5
 800056e:	0022      	movs	r2, r4
 8000570:	f000 f804 	bl	800057c <__aeabi_dadd>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	41f00000 	.word	0x41f00000

0800057c <__aeabi_dadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	464f      	mov	r7, r9
 8000580:	4646      	mov	r6, r8
 8000582:	46d6      	mov	lr, sl
 8000584:	b5c0      	push	{r6, r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	030e      	lsls	r6, r1, #12
 800058e:	004c      	lsls	r4, r1, #1
 8000590:	0fcd      	lsrs	r5, r1, #31
 8000592:	0a71      	lsrs	r1, r6, #9
 8000594:	9e00      	ldr	r6, [sp, #0]
 8000596:	005f      	lsls	r7, r3, #1
 8000598:	0f76      	lsrs	r6, r6, #29
 800059a:	430e      	orrs	r6, r1
 800059c:	9900      	ldr	r1, [sp, #0]
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	00c9      	lsls	r1, r1, #3
 80005a4:	4689      	mov	r9, r1
 80005a6:	0319      	lsls	r1, r3, #12
 80005a8:	0d7b      	lsrs	r3, r7, #21
 80005aa:	4698      	mov	r8, r3
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	0a49      	lsrs	r1, r1, #9
 80005b0:	0fdb      	lsrs	r3, r3, #31
 80005b2:	469c      	mov	ip, r3
 80005b4:	9b00      	ldr	r3, [sp, #0]
 80005b6:	9a00      	ldr	r2, [sp, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	430b      	orrs	r3, r1
 80005bc:	4641      	mov	r1, r8
 80005be:	0d64      	lsrs	r4, r4, #21
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	1a61      	subs	r1, r4, r1
 80005c4:	4565      	cmp	r5, ip
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x4e>
 80005c8:	e0a6      	b.n	8000718 <__aeabi_dadd+0x19c>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	dd72      	ble.n	80006b4 <__aeabi_dadd+0x138>
 80005ce:	4647      	mov	r7, r8
 80005d0:	2f00      	cmp	r7, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x5a>
 80005d4:	e0dd      	b.n	8000792 <__aeabi_dadd+0x216>
 80005d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000908 <__aeabi_dadd+0x38c>)
 80005d8:	42bc      	cmp	r4, r7
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x62>
 80005dc:	e19a      	b.n	8000914 <__aeabi_dadd+0x398>
 80005de:	2701      	movs	r7, #1
 80005e0:	2938      	cmp	r1, #56	@ 0x38
 80005e2:	dc17      	bgt.n	8000614 <__aeabi_dadd+0x98>
 80005e4:	2780      	movs	r7, #128	@ 0x80
 80005e6:	043f      	lsls	r7, r7, #16
 80005e8:	433b      	orrs	r3, r7
 80005ea:	291f      	cmp	r1, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x74>
 80005ee:	e1dd      	b.n	80009ac <__aeabi_dadd+0x430>
 80005f0:	2720      	movs	r7, #32
 80005f2:	1a78      	subs	r0, r7, r1
 80005f4:	001f      	movs	r7, r3
 80005f6:	4087      	lsls	r7, r0
 80005f8:	46ba      	mov	sl, r7
 80005fa:	0017      	movs	r7, r2
 80005fc:	40cf      	lsrs	r7, r1
 80005fe:	4684      	mov	ip, r0
 8000600:	0038      	movs	r0, r7
 8000602:	4657      	mov	r7, sl
 8000604:	4307      	orrs	r7, r0
 8000606:	4660      	mov	r0, ip
 8000608:	4082      	lsls	r2, r0
 800060a:	40cb      	lsrs	r3, r1
 800060c:	1e50      	subs	r0, r2, #1
 800060e:	4182      	sbcs	r2, r0
 8000610:	1af6      	subs	r6, r6, r3
 8000612:	4317      	orrs	r7, r2
 8000614:	464b      	mov	r3, r9
 8000616:	1bdf      	subs	r7, r3, r7
 8000618:	45b9      	cmp	r9, r7
 800061a:	4180      	sbcs	r0, r0
 800061c:	4240      	negs	r0, r0
 800061e:	1a36      	subs	r6, r6, r0
 8000620:	0233      	lsls	r3, r6, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0xaa>
 8000624:	e0ff      	b.n	8000826 <__aeabi_dadd+0x2aa>
 8000626:	0276      	lsls	r6, r6, #9
 8000628:	0a76      	lsrs	r6, r6, #9
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0xb4>
 800062e:	e13c      	b.n	80008aa <__aeabi_dadd+0x32e>
 8000630:	0030      	movs	r0, r6
 8000632:	f001 ff43 	bl	80024bc <__clzsi2>
 8000636:	0003      	movs	r3, r0
 8000638:	3b08      	subs	r3, #8
 800063a:	2120      	movs	r1, #32
 800063c:	0038      	movs	r0, r7
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	40d0      	lsrs	r0, r2
 8000642:	409e      	lsls	r6, r3
 8000644:	0002      	movs	r2, r0
 8000646:	409f      	lsls	r7, r3
 8000648:	4332      	orrs	r2, r6
 800064a:	429c      	cmp	r4, r3
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0xd4>
 800064e:	e1a6      	b.n	800099e <__aeabi_dadd+0x422>
 8000650:	1b18      	subs	r0, r3, r4
 8000652:	3001      	adds	r0, #1
 8000654:	1a09      	subs	r1, r1, r0
 8000656:	003e      	movs	r6, r7
 8000658:	408f      	lsls	r7, r1
 800065a:	40c6      	lsrs	r6, r0
 800065c:	1e7b      	subs	r3, r7, #1
 800065e:	419f      	sbcs	r7, r3
 8000660:	0013      	movs	r3, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	4337      	orrs	r7, r6
 8000666:	431f      	orrs	r7, r3
 8000668:	40c2      	lsrs	r2, r0
 800066a:	003b      	movs	r3, r7
 800066c:	0016      	movs	r6, r2
 800066e:	2400      	movs	r4, #0
 8000670:	4313      	orrs	r3, r2
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0xfa>
 8000674:	e1df      	b.n	8000a36 <__aeabi_dadd+0x4ba>
 8000676:	077b      	lsls	r3, r7, #29
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x100>
 800067a:	e332      	b.n	8000ce2 <__aeabi_dadd+0x766>
 800067c:	230f      	movs	r3, #15
 800067e:	003a      	movs	r2, r7
 8000680:	403b      	ands	r3, r7
 8000682:	2b04      	cmp	r3, #4
 8000684:	d004      	beq.n	8000690 <__aeabi_dadd+0x114>
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	42ba      	cmp	r2, r7
 800068a:	41bf      	sbcs	r7, r7
 800068c:	427f      	negs	r7, r7
 800068e:	19f6      	adds	r6, r6, r7
 8000690:	0233      	lsls	r3, r6, #8
 8000692:	d400      	bmi.n	8000696 <__aeabi_dadd+0x11a>
 8000694:	e323      	b.n	8000cde <__aeabi_dadd+0x762>
 8000696:	4b9c      	ldr	r3, [pc, #624]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000698:	3401      	adds	r4, #1
 800069a:	429c      	cmp	r4, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x124>
 800069e:	e0b4      	b.n	800080a <__aeabi_dadd+0x28e>
 80006a0:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <__aeabi_dadd+0x390>)
 80006a2:	0564      	lsls	r4, r4, #21
 80006a4:	401e      	ands	r6, r3
 80006a6:	0d64      	lsrs	r4, r4, #21
 80006a8:	0777      	lsls	r7, r6, #29
 80006aa:	08d2      	lsrs	r2, r2, #3
 80006ac:	0276      	lsls	r6, r6, #9
 80006ae:	4317      	orrs	r7, r2
 80006b0:	0b36      	lsrs	r6, r6, #12
 80006b2:	e0ac      	b.n	800080e <__aeabi_dadd+0x292>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x13e>
 80006b8:	e07e      	b.n	80007b8 <__aeabi_dadd+0x23c>
 80006ba:	4641      	mov	r1, r8
 80006bc:	1b09      	subs	r1, r1, r4
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x148>
 80006c2:	e160      	b.n	8000986 <__aeabi_dadd+0x40a>
 80006c4:	0034      	movs	r4, r6
 80006c6:	4648      	mov	r0, r9
 80006c8:	4304      	orrs	r4, r0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x152>
 80006cc:	e1c9      	b.n	8000a62 <__aeabi_dadd+0x4e6>
 80006ce:	1e4c      	subs	r4, r1, #1
 80006d0:	2901      	cmp	r1, #1
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x15a>
 80006d4:	e22e      	b.n	8000b34 <__aeabi_dadd+0x5b8>
 80006d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000908 <__aeabi_dadd+0x38c>)
 80006d8:	42a9      	cmp	r1, r5
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x162>
 80006dc:	e224      	b.n	8000b28 <__aeabi_dadd+0x5ac>
 80006de:	2701      	movs	r7, #1
 80006e0:	2c38      	cmp	r4, #56	@ 0x38
 80006e2:	dc11      	bgt.n	8000708 <__aeabi_dadd+0x18c>
 80006e4:	0021      	movs	r1, r4
 80006e6:	291f      	cmp	r1, #31
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x170>
 80006ea:	e20b      	b.n	8000b04 <__aeabi_dadd+0x588>
 80006ec:	2420      	movs	r4, #32
 80006ee:	0037      	movs	r7, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	1a64      	subs	r4, r4, r1
 80006f4:	40a7      	lsls	r7, r4
 80006f6:	40c8      	lsrs	r0, r1
 80006f8:	4307      	orrs	r7, r0
 80006fa:	4648      	mov	r0, r9
 80006fc:	40a0      	lsls	r0, r4
 80006fe:	40ce      	lsrs	r6, r1
 8000700:	1e44      	subs	r4, r0, #1
 8000702:	41a0      	sbcs	r0, r4
 8000704:	1b9b      	subs	r3, r3, r6
 8000706:	4307      	orrs	r7, r0
 8000708:	1bd7      	subs	r7, r2, r7
 800070a:	42ba      	cmp	r2, r7
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	4665      	mov	r5, ip
 8000712:	4644      	mov	r4, r8
 8000714:	1a9e      	subs	r6, r3, r2
 8000716:	e783      	b.n	8000620 <__aeabi_dadd+0xa4>
 8000718:	2900      	cmp	r1, #0
 800071a:	dc00      	bgt.n	800071e <__aeabi_dadd+0x1a2>
 800071c:	e09c      	b.n	8000858 <__aeabi_dadd+0x2dc>
 800071e:	4647      	mov	r7, r8
 8000720:	2f00      	cmp	r7, #0
 8000722:	d167      	bne.n	80007f4 <__aeabi_dadd+0x278>
 8000724:	001f      	movs	r7, r3
 8000726:	4317      	orrs	r7, r2
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x1b0>
 800072a:	e0e4      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800072c:	1e48      	subs	r0, r1, #1
 800072e:	2901      	cmp	r1, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b8>
 8000732:	e19b      	b.n	8000a6c <__aeabi_dadd+0x4f0>
 8000734:	4f74      	ldr	r7, [pc, #464]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000736:	42b9      	cmp	r1, r7
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1c0>
 800073a:	e0eb      	b.n	8000914 <__aeabi_dadd+0x398>
 800073c:	2701      	movs	r7, #1
 800073e:	0001      	movs	r1, r0
 8000740:	2838      	cmp	r0, #56	@ 0x38
 8000742:	dc11      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000744:	291f      	cmp	r1, #31
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0x1ce>
 8000748:	e1c7      	b.n	8000ada <__aeabi_dadd+0x55e>
 800074a:	2720      	movs	r7, #32
 800074c:	1a78      	subs	r0, r7, r1
 800074e:	001f      	movs	r7, r3
 8000750:	4684      	mov	ip, r0
 8000752:	4087      	lsls	r7, r0
 8000754:	0010      	movs	r0, r2
 8000756:	40c8      	lsrs	r0, r1
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	18f6      	adds	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	444f      	add	r7, r9
 800076a:	454f      	cmp	r7, r9
 800076c:	4180      	sbcs	r0, r0
 800076e:	4240      	negs	r0, r0
 8000770:	1836      	adds	r6, r6, r0
 8000772:	0233      	lsls	r3, r6, #8
 8000774:	d557      	bpl.n	8000826 <__aeabi_dadd+0x2aa>
 8000776:	4b64      	ldr	r3, [pc, #400]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000778:	3401      	adds	r4, #1
 800077a:	429c      	cmp	r4, r3
 800077c:	d045      	beq.n	800080a <__aeabi_dadd+0x28e>
 800077e:	2101      	movs	r1, #1
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <__aeabi_dadd+0x390>)
 8000782:	087a      	lsrs	r2, r7, #1
 8000784:	401e      	ands	r6, r3
 8000786:	4039      	ands	r1, r7
 8000788:	430a      	orrs	r2, r1
 800078a:	07f7      	lsls	r7, r6, #31
 800078c:	4317      	orrs	r7, r2
 800078e:	0876      	lsrs	r6, r6, #1
 8000790:	e771      	b.n	8000676 <__aeabi_dadd+0xfa>
 8000792:	001f      	movs	r7, r3
 8000794:	4317      	orrs	r7, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x21e>
 8000798:	e0ad      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800079a:	1e4f      	subs	r7, r1, #1
 800079c:	46bc      	mov	ip, r7
 800079e:	2901      	cmp	r1, #1
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x228>
 80007a2:	e182      	b.n	8000aaa <__aeabi_dadd+0x52e>
 80007a4:	4f58      	ldr	r7, [pc, #352]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007a6:	42b9      	cmp	r1, r7
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x230>
 80007aa:	e190      	b.n	8000ace <__aeabi_dadd+0x552>
 80007ac:	4661      	mov	r1, ip
 80007ae:	2701      	movs	r7, #1
 80007b0:	2938      	cmp	r1, #56	@ 0x38
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x23a>
 80007b4:	e72e      	b.n	8000614 <__aeabi_dadd+0x98>
 80007b6:	e718      	b.n	80005ea <__aeabi_dadd+0x6e>
 80007b8:	4f55      	ldr	r7, [pc, #340]	@ (8000910 <__aeabi_dadd+0x394>)
 80007ba:	1c61      	adds	r1, r4, #1
 80007bc:	4239      	tst	r1, r7
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x246>
 80007c0:	e0d0      	b.n	8000964 <__aeabi_dadd+0x3e8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	4648      	mov	r0, r9
 80007c6:	001f      	movs	r7, r3
 80007c8:	4301      	orrs	r1, r0
 80007ca:	4317      	orrs	r7, r2
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x256>
 80007d0:	e13d      	b.n	8000a4e <__aeabi_dadd+0x4d2>
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x25c>
 80007d6:	e1bc      	b.n	8000b52 <__aeabi_dadd+0x5d6>
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d000      	beq.n	80007de <__aeabi_dadd+0x262>
 80007dc:	e1bf      	b.n	8000b5e <__aeabi_dadd+0x5e2>
 80007de:	464b      	mov	r3, r9
 80007e0:	2100      	movs	r1, #0
 80007e2:	08d8      	lsrs	r0, r3, #3
 80007e4:	0777      	lsls	r7, r6, #29
 80007e6:	4307      	orrs	r7, r0
 80007e8:	08f0      	lsrs	r0, r6, #3
 80007ea:	0306      	lsls	r6, r0, #12
 80007ec:	054c      	lsls	r4, r1, #21
 80007ee:	0b36      	lsrs	r6, r6, #12
 80007f0:	0d64      	lsrs	r4, r4, #21
 80007f2:	e00c      	b.n	800080e <__aeabi_dadd+0x292>
 80007f4:	4f44      	ldr	r7, [pc, #272]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007f6:	42bc      	cmp	r4, r7
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x280>
 80007fa:	e08b      	b.n	8000914 <__aeabi_dadd+0x398>
 80007fc:	2701      	movs	r7, #1
 80007fe:	2938      	cmp	r1, #56	@ 0x38
 8000800:	dcb2      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000802:	2780      	movs	r7, #128	@ 0x80
 8000804:	043f      	lsls	r7, r7, #16
 8000806:	433b      	orrs	r3, r7
 8000808:	e79c      	b.n	8000744 <__aeabi_dadd+0x1c8>
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
 800080e:	0524      	lsls	r4, r4, #20
 8000810:	4334      	orrs	r4, r6
 8000812:	07ed      	lsls	r5, r5, #31
 8000814:	432c      	orrs	r4, r5
 8000816:	0038      	movs	r0, r7
 8000818:	0021      	movs	r1, r4
 800081a:	b002      	add	sp, #8
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	077b      	lsls	r3, r7, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 800082a:	230f      	movs	r3, #15
 800082c:	403b      	ands	r3, r7
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 8000832:	e728      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000834:	08f8      	lsrs	r0, r7, #3
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000838:	0777      	lsls	r7, r6, #29
 800083a:	4307      	orrs	r7, r0
 800083c:	08f0      	lsrs	r0, r6, #3
 800083e:	429c      	cmp	r4, r3
 8000840:	d000      	beq.n	8000844 <__aeabi_dadd+0x2c8>
 8000842:	e24a      	b.n	8000cda <__aeabi_dadd+0x75e>
 8000844:	003b      	movs	r3, r7
 8000846:	4303      	orrs	r3, r0
 8000848:	d059      	beq.n	80008fe <__aeabi_dadd+0x382>
 800084a:	2680      	movs	r6, #128	@ 0x80
 800084c:	0336      	lsls	r6, r6, #12
 800084e:	4306      	orrs	r6, r0
 8000850:	0336      	lsls	r6, r6, #12
 8000852:	4c2d      	ldr	r4, [pc, #180]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000854:	0b36      	lsrs	r6, r6, #12
 8000856:	e7da      	b.n	800080e <__aeabi_dadd+0x292>
 8000858:	2900      	cmp	r1, #0
 800085a:	d061      	beq.n	8000920 <__aeabi_dadd+0x3a4>
 800085c:	4641      	mov	r1, r8
 800085e:	1b09      	subs	r1, r1, r4
 8000860:	2c00      	cmp	r4, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x2ea>
 8000864:	e0b9      	b.n	80009da <__aeabi_dadd+0x45e>
 8000866:	4c28      	ldr	r4, [pc, #160]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000868:	45a0      	cmp	r8, r4
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2f2>
 800086c:	e1a5      	b.n	8000bba <__aeabi_dadd+0x63e>
 800086e:	2701      	movs	r7, #1
 8000870:	2938      	cmp	r1, #56	@ 0x38
 8000872:	dc13      	bgt.n	800089c <__aeabi_dadd+0x320>
 8000874:	2480      	movs	r4, #128	@ 0x80
 8000876:	0424      	lsls	r4, r4, #16
 8000878:	4326      	orrs	r6, r4
 800087a:	291f      	cmp	r1, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x304>
 800087e:	e1c8      	b.n	8000c12 <__aeabi_dadd+0x696>
 8000880:	2420      	movs	r4, #32
 8000882:	0037      	movs	r7, r6
 8000884:	4648      	mov	r0, r9
 8000886:	1a64      	subs	r4, r4, r1
 8000888:	40a7      	lsls	r7, r4
 800088a:	40c8      	lsrs	r0, r1
 800088c:	4307      	orrs	r7, r0
 800088e:	4648      	mov	r0, r9
 8000890:	40a0      	lsls	r0, r4
 8000892:	40ce      	lsrs	r6, r1
 8000894:	1e44      	subs	r4, r0, #1
 8000896:	41a0      	sbcs	r0, r4
 8000898:	199b      	adds	r3, r3, r6
 800089a:	4307      	orrs	r7, r0
 800089c:	18bf      	adds	r7, r7, r2
 800089e:	4297      	cmp	r7, r2
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4252      	negs	r2, r2
 80008a4:	4644      	mov	r4, r8
 80008a6:	18d6      	adds	r6, r2, r3
 80008a8:	e763      	b.n	8000772 <__aeabi_dadd+0x1f6>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fe06 	bl	80024bc <__clzsi2>
 80008b0:	0003      	movs	r3, r0
 80008b2:	3318      	adds	r3, #24
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x33e>
 80008b8:	e6bf      	b.n	800063a <__aeabi_dadd+0xbe>
 80008ba:	003a      	movs	r2, r7
 80008bc:	3808      	subs	r0, #8
 80008be:	4082      	lsls	r2, r0
 80008c0:	429c      	cmp	r4, r3
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x34a>
 80008c4:	e083      	b.n	80009ce <__aeabi_dadd+0x452>
 80008c6:	1b1b      	subs	r3, r3, r4
 80008c8:	1c58      	adds	r0, r3, #1
 80008ca:	281f      	cmp	r0, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x354>
 80008ce:	e1b4      	b.n	8000c3a <__aeabi_dadd+0x6be>
 80008d0:	0017      	movs	r7, r2
 80008d2:	3b1f      	subs	r3, #31
 80008d4:	40df      	lsrs	r7, r3
 80008d6:	2820      	cmp	r0, #32
 80008d8:	d005      	beq.n	80008e6 <__aeabi_dadd+0x36a>
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	409a      	lsls	r2, r3
 80008e0:	1e53      	subs	r3, r2, #1
 80008e2:	419a      	sbcs	r2, r3
 80008e4:	4317      	orrs	r7, r2
 80008e6:	2400      	movs	r4, #0
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d00a      	beq.n	8000902 <__aeabi_dadd+0x386>
 80008ec:	077b      	lsls	r3, r7, #29
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x376>
 80008f0:	e6c4      	b.n	800067c <__aeabi_dadd+0x100>
 80008f2:	0026      	movs	r6, r4
 80008f4:	e79e      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80008f6:	464b      	mov	r3, r9
 80008f8:	000c      	movs	r4, r1
 80008fa:	08d8      	lsrs	r0, r3, #3
 80008fc:	e79b      	b.n	8000836 <__aeabi_dadd+0x2ba>
 80008fe:	2700      	movs	r7, #0
 8000900:	4c01      	ldr	r4, [pc, #4]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000902:	2600      	movs	r6, #0
 8000904:	e783      	b.n	800080e <__aeabi_dadd+0x292>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff
 8000910:	000007fe 	.word	0x000007fe
 8000914:	464b      	mov	r3, r9
 8000916:	0777      	lsls	r7, r6, #29
 8000918:	08d8      	lsrs	r0, r3, #3
 800091a:	4307      	orrs	r7, r0
 800091c:	08f0      	lsrs	r0, r6, #3
 800091e:	e791      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000920:	4fcd      	ldr	r7, [pc, #820]	@ (8000c58 <__aeabi_dadd+0x6dc>)
 8000922:	1c61      	adds	r1, r4, #1
 8000924:	4239      	tst	r1, r7
 8000926:	d16b      	bne.n	8000a00 <__aeabi_dadd+0x484>
 8000928:	0031      	movs	r1, r6
 800092a:	4648      	mov	r0, r9
 800092c:	4301      	orrs	r1, r0
 800092e:	2c00      	cmp	r4, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x3b8>
 8000932:	e14b      	b.n	8000bcc <__aeabi_dadd+0x650>
 8000934:	001f      	movs	r7, r3
 8000936:	4317      	orrs	r7, r2
 8000938:	2900      	cmp	r1, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x3c2>
 800093c:	e181      	b.n	8000c42 <__aeabi_dadd+0x6c6>
 800093e:	2f00      	cmp	r7, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x3c8>
 8000942:	e74c      	b.n	80007de <__aeabi_dadd+0x262>
 8000944:	444a      	add	r2, r9
 8000946:	454a      	cmp	r2, r9
 8000948:	4180      	sbcs	r0, r0
 800094a:	18f6      	adds	r6, r6, r3
 800094c:	4240      	negs	r0, r0
 800094e:	1836      	adds	r6, r6, r0
 8000950:	0233      	lsls	r3, r6, #8
 8000952:	d500      	bpl.n	8000956 <__aeabi_dadd+0x3da>
 8000954:	e1b0      	b.n	8000cb8 <__aeabi_dadd+0x73c>
 8000956:	0017      	movs	r7, r2
 8000958:	4691      	mov	r9, r2
 800095a:	4337      	orrs	r7, r6
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x3e4>
 800095e:	e73e      	b.n	80007de <__aeabi_dadd+0x262>
 8000960:	2600      	movs	r6, #0
 8000962:	e754      	b.n	800080e <__aeabi_dadd+0x292>
 8000964:	4649      	mov	r1, r9
 8000966:	1a89      	subs	r1, r1, r2
 8000968:	4688      	mov	r8, r1
 800096a:	45c1      	cmp	r9, r8
 800096c:	41bf      	sbcs	r7, r7
 800096e:	1af1      	subs	r1, r6, r3
 8000970:	427f      	negs	r7, r7
 8000972:	1bc9      	subs	r1, r1, r7
 8000974:	020f      	lsls	r7, r1, #8
 8000976:	d461      	bmi.n	8000a3c <__aeabi_dadd+0x4c0>
 8000978:	4647      	mov	r7, r8
 800097a:	430f      	orrs	r7, r1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x404>
 800097e:	e0bd      	b.n	8000afc <__aeabi_dadd+0x580>
 8000980:	000e      	movs	r6, r1
 8000982:	4647      	mov	r7, r8
 8000984:	e651      	b.n	800062a <__aeabi_dadd+0xae>
 8000986:	4cb5      	ldr	r4, [pc, #724]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000988:	45a0      	cmp	r8, r4
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x412>
 800098c:	e100      	b.n	8000b90 <__aeabi_dadd+0x614>
 800098e:	2701      	movs	r7, #1
 8000990:	2938      	cmp	r1, #56	@ 0x38
 8000992:	dd00      	ble.n	8000996 <__aeabi_dadd+0x41a>
 8000994:	e6b8      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	0424      	lsls	r4, r4, #16
 800099a:	4326      	orrs	r6, r4
 800099c:	e6a3      	b.n	80006e6 <__aeabi_dadd+0x16a>
 800099e:	4eb0      	ldr	r6, [pc, #704]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009a0:	1ae4      	subs	r4, r4, r3
 80009a2:	4016      	ands	r6, r2
 80009a4:	077b      	lsls	r3, r7, #29
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x42e>
 80009a8:	e73f      	b.n	800082a <__aeabi_dadd+0x2ae>
 80009aa:	e743      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80009ac:	000f      	movs	r7, r1
 80009ae:	0018      	movs	r0, r3
 80009b0:	3f20      	subs	r7, #32
 80009b2:	40f8      	lsrs	r0, r7
 80009b4:	4684      	mov	ip, r0
 80009b6:	2920      	cmp	r1, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x446>
 80009ba:	2740      	movs	r7, #64	@ 0x40
 80009bc:	1a79      	subs	r1, r7, r1
 80009be:	408b      	lsls	r3, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	1e53      	subs	r3, r2, #1
 80009c4:	419a      	sbcs	r2, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	0017      	movs	r7, r2
 80009ca:	431f      	orrs	r7, r3
 80009cc:	e622      	b.n	8000614 <__aeabi_dadd+0x98>
 80009ce:	48a4      	ldr	r0, [pc, #656]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009d0:	1ae1      	subs	r1, r4, r3
 80009d2:	4010      	ands	r0, r2
 80009d4:	0747      	lsls	r7, r0, #29
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	e707      	b.n	80007ea <__aeabi_dadd+0x26e>
 80009da:	0034      	movs	r4, r6
 80009dc:	4648      	mov	r0, r9
 80009de:	4304      	orrs	r4, r0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x468>
 80009e2:	e0fa      	b.n	8000bda <__aeabi_dadd+0x65e>
 80009e4:	1e4c      	subs	r4, r1, #1
 80009e6:	2901      	cmp	r1, #1
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x470>
 80009ea:	e0d7      	b.n	8000b9c <__aeabi_dadd+0x620>
 80009ec:	4f9b      	ldr	r7, [pc, #620]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 80009ee:	42b9      	cmp	r1, r7
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x478>
 80009f2:	e0e2      	b.n	8000bba <__aeabi_dadd+0x63e>
 80009f4:	2701      	movs	r7, #1
 80009f6:	2c38      	cmp	r4, #56	@ 0x38
 80009f8:	dd00      	ble.n	80009fc <__aeabi_dadd+0x480>
 80009fa:	e74f      	b.n	800089c <__aeabi_dadd+0x320>
 80009fc:	0021      	movs	r1, r4
 80009fe:	e73c      	b.n	800087a <__aeabi_dadd+0x2fe>
 8000a00:	4c96      	ldr	r4, [pc, #600]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x48c>
 8000a06:	e0dd      	b.n	8000bc4 <__aeabi_dadd+0x648>
 8000a08:	444a      	add	r2, r9
 8000a0a:	454a      	cmp	r2, r9
 8000a0c:	4180      	sbcs	r0, r0
 8000a0e:	18f3      	adds	r3, r6, r3
 8000a10:	4240      	negs	r0, r0
 8000a12:	1818      	adds	r0, r3, r0
 8000a14:	07c7      	lsls	r7, r0, #31
 8000a16:	0852      	lsrs	r2, r2, #1
 8000a18:	4317      	orrs	r7, r2
 8000a1a:	0846      	lsrs	r6, r0, #1
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	d005      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a20:	220f      	movs	r2, #15
 8000a22:	000c      	movs	r4, r1
 8000a24:	403a      	ands	r2, r7
 8000a26:	2a04      	cmp	r2, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a2a:	e62c      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000a2c:	0776      	lsls	r6, r6, #29
 8000a2e:	08ff      	lsrs	r7, r7, #3
 8000a30:	4337      	orrs	r7, r6
 8000a32:	0900      	lsrs	r0, r0, #4
 8000a34:	e6d9      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000a36:	2700      	movs	r7, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e6e8      	b.n	800080e <__aeabi_dadd+0x292>
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	1a57      	subs	r7, r2, r1
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	1b9e      	subs	r6, r3, r6
 8000a46:	4252      	negs	r2, r2
 8000a48:	4665      	mov	r5, ip
 8000a4a:	1ab6      	subs	r6, r6, r2
 8000a4c:	e5ed      	b.n	800062a <__aeabi_dadd+0xae>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x4d8>
 8000a52:	e0c6      	b.n	8000be2 <__aeabi_dadd+0x666>
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d167      	bne.n	8000b28 <__aeabi_dadd+0x5ac>
 8000a58:	2680      	movs	r6, #128	@ 0x80
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a5e:	0336      	lsls	r6, r6, #12
 8000a60:	e6d5      	b.n	800080e <__aeabi_dadd+0x292>
 8000a62:	4665      	mov	r5, ip
 8000a64:	000c      	movs	r4, r1
 8000a66:	001e      	movs	r6, r3
 8000a68:	08d0      	lsrs	r0, r2, #3
 8000a6a:	e6e4      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000a6c:	444a      	add	r2, r9
 8000a6e:	454a      	cmp	r2, r9
 8000a70:	4180      	sbcs	r0, r0
 8000a72:	18f3      	adds	r3, r6, r3
 8000a74:	4240      	negs	r0, r0
 8000a76:	1818      	adds	r0, r3, r0
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0203      	lsls	r3, r0, #8
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_dadd+0x504>
 8000a7e:	e096      	b.n	8000bae <__aeabi_dadd+0x632>
 8000a80:	4b77      	ldr	r3, [pc, #476]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 8000a82:	0849      	lsrs	r1, r1, #1
 8000a84:	4018      	ands	r0, r3
 8000a86:	07c3      	lsls	r3, r0, #31
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	0844      	lsrs	r4, r0, #1
 8000a8c:	0749      	lsls	r1, r1, #29
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x516>
 8000a90:	e129      	b.n	8000ce6 <__aeabi_dadd+0x76a>
 8000a92:	220f      	movs	r2, #15
 8000a94:	401a      	ands	r2, r3
 8000a96:	2a04      	cmp	r2, #4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x520>
 8000a9a:	e0ea      	b.n	8000c72 <__aeabi_dadd+0x6f6>
 8000a9c:	1d1f      	adds	r7, r3, #4
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	41b6      	sbcs	r6, r6
 8000aa2:	4276      	negs	r6, r6
 8000aa4:	1936      	adds	r6, r6, r4
 8000aa6:	2402      	movs	r4, #2
 8000aa8:	e6c4      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000aaa:	4649      	mov	r1, r9
 8000aac:	1a8f      	subs	r7, r1, r2
 8000aae:	45b9      	cmp	r9, r7
 8000ab0:	4180      	sbcs	r0, r0
 8000ab2:	1af6      	subs	r6, r6, r3
 8000ab4:	4240      	negs	r0, r0
 8000ab6:	1a36      	subs	r6, r6, r0
 8000ab8:	0233      	lsls	r3, r6, #8
 8000aba:	d406      	bmi.n	8000aca <__aeabi_dadd+0x54e>
 8000abc:	0773      	lsls	r3, r6, #29
 8000abe:	08ff      	lsrs	r7, r7, #3
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	431f      	orrs	r7, r3
 8000ac4:	08f0      	lsrs	r0, r6, #3
 8000ac6:	e690      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000ac8:	4665      	mov	r5, ip
 8000aca:	2401      	movs	r4, #1
 8000acc:	e5ab      	b.n	8000626 <__aeabi_dadd+0xaa>
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0777      	lsls	r7, r6, #29
 8000ad2:	08d8      	lsrs	r0, r3, #3
 8000ad4:	4307      	orrs	r7, r0
 8000ad6:	08f0      	lsrs	r0, r6, #3
 8000ad8:	e6b4      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000ada:	000f      	movs	r7, r1
 8000adc:	0018      	movs	r0, r3
 8000ade:	3f20      	subs	r7, #32
 8000ae0:	40f8      	lsrs	r0, r7
 8000ae2:	4684      	mov	ip, r0
 8000ae4:	2920      	cmp	r1, #32
 8000ae6:	d003      	beq.n	8000af0 <__aeabi_dadd+0x574>
 8000ae8:	2740      	movs	r7, #64	@ 0x40
 8000aea:	1a79      	subs	r1, r7, r1
 8000aec:	408b      	lsls	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	1e53      	subs	r3, r2, #1
 8000af2:	419a      	sbcs	r2, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	0017      	movs	r7, r2
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e635      	b.n	8000768 <__aeabi_dadd+0x1ec>
 8000afc:	2500      	movs	r5, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	2600      	movs	r6, #0
 8000b02:	e684      	b.n	800080e <__aeabi_dadd+0x292>
 8000b04:	000c      	movs	r4, r1
 8000b06:	0035      	movs	r5, r6
 8000b08:	3c20      	subs	r4, #32
 8000b0a:	40e5      	lsrs	r5, r4
 8000b0c:	2920      	cmp	r1, #32
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dadd+0x5a0>
 8000b10:	2440      	movs	r4, #64	@ 0x40
 8000b12:	1a61      	subs	r1, r4, r1
 8000b14:	408e      	lsls	r6, r1
 8000b16:	4649      	mov	r1, r9
 8000b18:	4331      	orrs	r1, r6
 8000b1a:	4689      	mov	r9, r1
 8000b1c:	4648      	mov	r0, r9
 8000b1e:	1e41      	subs	r1, r0, #1
 8000b20:	4188      	sbcs	r0, r1
 8000b22:	0007      	movs	r7, r0
 8000b24:	432f      	orrs	r7, r5
 8000b26:	e5ef      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000b28:	08d2      	lsrs	r2, r2, #3
 8000b2a:	075f      	lsls	r7, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	e687      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b34:	1a17      	subs	r7, r2, r0
 8000b36:	42ba      	cmp	r2, r7
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	1b9e      	subs	r6, r3, r6
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	0233      	lsls	r3, r6, #8
 8000b42:	d4c1      	bmi.n	8000ac8 <__aeabi_dadd+0x54c>
 8000b44:	0773      	lsls	r3, r6, #29
 8000b46:	08ff      	lsrs	r7, r7, #3
 8000b48:	4665      	mov	r5, ip
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	431f      	orrs	r7, r3
 8000b4e:	08f0      	lsrs	r0, r6, #3
 8000b50:	e64b      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d07b      	beq.n	8000c4e <__aeabi_dadd+0x6d2>
 8000b56:	4665      	mov	r5, ip
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	e63f      	b.n	80007de <__aeabi_dadd+0x262>
 8000b5e:	1a81      	subs	r1, r0, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	45c1      	cmp	r9, r8
 8000b64:	41a4      	sbcs	r4, r4
 8000b66:	1af1      	subs	r1, r6, r3
 8000b68:	4264      	negs	r4, r4
 8000b6a:	1b09      	subs	r1, r1, r4
 8000b6c:	2480      	movs	r4, #128	@ 0x80
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	4221      	tst	r1, r4
 8000b72:	d077      	beq.n	8000c64 <__aeabi_dadd+0x6e8>
 8000b74:	1a10      	subs	r0, r2, r0
 8000b76:	4282      	cmp	r2, r0
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	1b9e      	subs	r6, r3, r6
 8000b7e:	4252      	negs	r2, r2
 8000b80:	1ab6      	subs	r6, r6, r2
 8000b82:	4337      	orrs	r7, r6
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x60c>
 8000b86:	e0a0      	b.n	8000cca <__aeabi_dadd+0x74e>
 8000b88:	4665      	mov	r5, ip
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e63e      	b.n	800080e <__aeabi_dadd+0x292>
 8000b90:	075f      	lsls	r7, r3, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	4665      	mov	r5, ip
 8000b96:	4317      	orrs	r7, r2
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	e653      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b9c:	1881      	adds	r1, r0, r2
 8000b9e:	4291      	cmp	r1, r2
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	18f0      	adds	r0, r6, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	1880      	adds	r0, r0, r2
 8000ba8:	0203      	lsls	r3, r0, #8
 8000baa:	d500      	bpl.n	8000bae <__aeabi_dadd+0x632>
 8000bac:	e768      	b.n	8000a80 <__aeabi_dadd+0x504>
 8000bae:	0747      	lsls	r7, r0, #29
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	430f      	orrs	r7, r1
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	e617      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	075f      	lsls	r7, r3, #29
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	08d8      	lsrs	r0, r3, #3
 8000bc2:	e63f      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bc4:	000c      	movs	r4, r1
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e620      	b.n	800080e <__aeabi_dadd+0x292>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d156      	bne.n	8000c7e <__aeabi_dadd+0x702>
 8000bd0:	075f      	lsls	r7, r3, #29
 8000bd2:	08d2      	lsrs	r2, r2, #3
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	e634      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	001e      	movs	r6, r3
 8000bde:	08d0      	lsrs	r0, r2, #3
 8000be0:	e629      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000be2:	08c1      	lsrs	r1, r0, #3
 8000be4:	0770      	lsls	r0, r6, #29
 8000be6:	4301      	orrs	r1, r0
 8000be8:	08f0      	lsrs	r0, r6, #3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d062      	beq.n	8000cb4 <__aeabi_dadd+0x738>
 8000bee:	2480      	movs	r4, #128	@ 0x80
 8000bf0:	0324      	lsls	r4, r4, #12
 8000bf2:	4220      	tst	r0, r4
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x68a>
 8000bf6:	08de      	lsrs	r6, r3, #3
 8000bf8:	4226      	tst	r6, r4
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x68a>
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0030      	movs	r0, r6
 8000c00:	08d1      	lsrs	r1, r2, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4319      	orrs	r1, r3
 8000c06:	0f4f      	lsrs	r7, r1, #29
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	077f      	lsls	r7, r7, #29
 8000c0e:	430f      	orrs	r7, r1
 8000c10:	e618      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c12:	000c      	movs	r4, r1
 8000c14:	0030      	movs	r0, r6
 8000c16:	3c20      	subs	r4, #32
 8000c18:	40e0      	lsrs	r0, r4
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2920      	cmp	r1, #32
 8000c1e:	d005      	beq.n	8000c2c <__aeabi_dadd+0x6b0>
 8000c20:	2440      	movs	r4, #64	@ 0x40
 8000c22:	1a61      	subs	r1, r4, r1
 8000c24:	408e      	lsls	r6, r1
 8000c26:	4649      	mov	r1, r9
 8000c28:	4331      	orrs	r1, r6
 8000c2a:	4689      	mov	r9, r1
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1e41      	subs	r1, r0, #1
 8000c30:	4188      	sbcs	r0, r1
 8000c32:	4661      	mov	r1, ip
 8000c34:	0007      	movs	r7, r0
 8000c36:	430f      	orrs	r7, r1
 8000c38:	e630      	b.n	800089c <__aeabi_dadd+0x320>
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	1a09      	subs	r1, r1, r0
 8000c40:	e50e      	b.n	8000660 <__aeabi_dadd+0xe4>
 8000c42:	001e      	movs	r6, r3
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x6ce>
 8000c48:	e522      	b.n	8000690 <__aeabi_dadd+0x114>
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e758      	b.n	8000b00 <__aeabi_dadd+0x584>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	2400      	movs	r4, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	e5db      	b.n	800080e <__aeabi_dadd+0x292>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	000007fe 	.word	0x000007fe
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	ff7fffff 	.word	0xff7fffff
 8000c64:	4647      	mov	r7, r8
 8000c66:	430f      	orrs	r7, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x6f0>
 8000c6a:	e747      	b.n	8000afc <__aeabi_dadd+0x580>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	46c1      	mov	r9, r8
 8000c70:	e5b5      	b.n	80007de <__aeabi_dadd+0x262>
 8000c72:	08df      	lsrs	r7, r3, #3
 8000c74:	0764      	lsls	r4, r4, #29
 8000c76:	2102      	movs	r1, #2
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	0900      	lsrs	r0, r0, #4
 8000c7c:	e5b5      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000c7e:	0019      	movs	r1, r3
 8000c80:	08c0      	lsrs	r0, r0, #3
 8000c82:	0777      	lsls	r7, r6, #29
 8000c84:	4307      	orrs	r7, r0
 8000c86:	4311      	orrs	r1, r2
 8000c88:	08f0      	lsrs	r0, r6, #3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x714>
 8000c8e:	e5d9      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0309      	lsls	r1, r1, #12
 8000c94:	4208      	tst	r0, r1
 8000c96:	d007      	beq.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	420c      	tst	r4, r1
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c9e:	08d2      	lsrs	r2, r2, #3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	0017      	movs	r7, r2
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	0f7b      	lsrs	r3, r7, #29
 8000caa:	00ff      	lsls	r7, r7, #3
 8000cac:	08ff      	lsrs	r7, r7, #3
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	e5c7      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb4:	000f      	movs	r7, r1
 8000cb6:	e5c5      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	4033      	ands	r3, r6
 8000cbe:	075f      	lsls	r7, r3, #29
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	2401      	movs	r4, #1
 8000cc4:	4317      	orrs	r7, r2
 8000cc6:	0b1e      	lsrs	r6, r3, #12
 8000cc8:	e5a1      	b.n	800080e <__aeabi_dadd+0x292>
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d012      	beq.n	8000cf4 <__aeabi_dadd+0x778>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	2401      	movs	r4, #1
 8000cd6:	401e      	ands	r6, r3
 8000cd8:	e4e6      	b.n	80006a8 <__aeabi_dadd+0x12c>
 8000cda:	0021      	movs	r1, r4
 8000cdc:	e585      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cde:	0017      	movs	r7, r2
 8000ce0:	e5a8      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	e4d4      	b.n	8000690 <__aeabi_dadd+0x114>
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	0764      	lsls	r4, r4, #29
 8000cea:	431c      	orrs	r4, r3
 8000cec:	0027      	movs	r7, r4
 8000cee:	2102      	movs	r1, #2
 8000cf0:	0900      	lsrs	r0, r0, #4
 8000cf2:	e57a      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	0777      	lsls	r7, r6, #29
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	4665      	mov	r5, ip
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	08f0      	lsrs	r0, r6, #3
 8000d00:	e573      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	ff7fffff 	.word	0xff7fffff

08000d08 <__aeabi_ddiv>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	46de      	mov	lr, fp
 8000d0c:	4645      	mov	r5, r8
 8000d0e:	4657      	mov	r7, sl
 8000d10:	464e      	mov	r6, r9
 8000d12:	b5e0      	push	{r5, r6, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	030b      	lsls	r3, r1, #12
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	469b      	mov	fp, r3
 8000d20:	0fca      	lsrs	r2, r1, #31
 8000d22:	004b      	lsls	r3, r1, #1
 8000d24:	0004      	movs	r4, r0
 8000d26:	4680      	mov	r8, r0
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9202      	str	r2, [sp, #8]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x28>
 8000d2e:	e098      	b.n	8000e62 <__aeabi_ddiv+0x15a>
 8000d30:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d037      	beq.n	8000da6 <__aeabi_ddiv+0x9e>
 8000d36:	4659      	mov	r1, fp
 8000d38:	0f42      	lsrs	r2, r0, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	4311      	orrs	r1, r2
 8000d44:	00c2      	lsls	r2, r0, #3
 8000d46:	4690      	mov	r8, r2
 8000d48:	4a77      	ldr	r2, [pc, #476]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	449a      	add	sl, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9e00      	ldr	r6, [sp, #0]
 8000d58:	9f01      	ldr	r7, [sp, #4]
 8000d5a:	033b      	lsls	r3, r7, #12
 8000d5c:	0b1b      	lsrs	r3, r3, #12
 8000d5e:	469b      	mov	fp, r3
 8000d60:	007b      	lsls	r3, r7, #1
 8000d62:	0030      	movs	r0, r6
 8000d64:	0d5b      	lsrs	r3, r3, #21
 8000d66:	0ffd      	lsrs	r5, r7, #31
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <__aeabi_ddiv+0x118>
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d048      	beq.n	8000e04 <__aeabi_ddiv+0xfc>
 8000d72:	4659      	mov	r1, fp
 8000d74:	0f72      	lsrs	r2, r6, #29
 8000d76:	00c9      	lsls	r1, r1, #3
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	468b      	mov	fp, r1
 8000d82:	4969      	ldr	r1, [pc, #420]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d84:	00f2      	lsls	r2, r6, #3
 8000d86:	468c      	mov	ip, r1
 8000d88:	4651      	mov	r1, sl
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	469a      	mov	sl, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	9e02      	ldr	r6, [sp, #8]
 8000d94:	406e      	eors	r6, r5
 8000d96:	b2f6      	uxtb	r6, r6
 8000d98:	2c0f      	cmp	r4, #15
 8000d9a:	d900      	bls.n	8000d9e <__aeabi_ddiv+0x96>
 8000d9c:	e0ce      	b.n	8000f3c <__aeabi_ddiv+0x234>
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <__aeabi_ddiv+0x224>)
 8000da0:	00a4      	lsls	r4, r4, #2
 8000da2:	591b      	ldr	r3, [r3, r4]
 8000da4:	469f      	mov	pc, r3
 8000da6:	465a      	mov	r2, fp
 8000da8:	4302      	orrs	r2, r0
 8000daa:	4691      	mov	r9, r2
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xa8>
 8000dae:	e090      	b.n	8000ed2 <__aeabi_ddiv+0x1ca>
 8000db0:	469a      	mov	sl, r3
 8000db2:	2302      	movs	r3, #2
 8000db4:	4690      	mov	r8, r2
 8000db6:	2408      	movs	r4, #8
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	e7cc      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9d02      	ldr	r5, [sp, #8]
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	2902      	cmp	r1, #2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0xc2>
 8000dc8:	e1de      	b.n	8001188 <__aeabi_ddiv+0x480>
 8000dca:	2903      	cmp	r1, #3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0xc8>
 8000dce:	e08d      	b.n	8000eec <__aeabi_ddiv+0x1e4>
 8000dd0:	2901      	cmp	r1, #1
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_ddiv+0xce>
 8000dd4:	e179      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8000dd6:	002e      	movs	r6, r5
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2400      	movs	r4, #0
 8000dde:	4690      	mov	r8, r2
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07f6      	lsls	r6, r6, #31
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4640      	mov	r0, r8
 8000dea:	0019      	movs	r1, r3
 8000dec:	b007      	add	sp, #28
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000e02:	e7ed      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000e04:	465a      	mov	r2, fp
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <__aeabi_ddiv+0x228>)
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	44e2      	add	sl, ip
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d159      	bne.n	8000ec8 <__aeabi_ddiv+0x1c0>
 8000e14:	2302      	movs	r3, #2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	e7b8      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e20:	465a      	mov	r2, fp
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	d049      	beq.n	8000ebc <__aeabi_ddiv+0x1b4>
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x128>
 8000e2e:	e19c      	b.n	800116a <__aeabi_ddiv+0x462>
 8000e30:	4658      	mov	r0, fp
 8000e32:	f001 fb43 	bl	80024bc <__clzsi2>
 8000e36:	0002      	movs	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3a0b      	subs	r2, #11
 8000e3c:	271d      	movs	r7, #29
 8000e3e:	9e00      	ldr	r6, [sp, #0]
 8000e40:	1aba      	subs	r2, r7, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	4658      	mov	r0, fp
 8000e46:	40d6      	lsrs	r6, r2
 8000e48:	3908      	subs	r1, #8
 8000e4a:	4088      	lsls	r0, r1
 8000e4c:	0032      	movs	r2, r6
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	4693      	mov	fp, r2
 8000e52:	9a00      	ldr	r2, [sp, #0]
 8000e54:	408a      	lsls	r2, r1
 8000e56:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <__aeabi_ddiv+0x22c>)
 8000e58:	4453      	add	r3, sl
 8000e5a:	468a      	mov	sl, r1
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	449a      	add	sl, r3
 8000e60:	e797      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e62:	465b      	mov	r3, fp
 8000e64:	4303      	orrs	r3, r0
 8000e66:	4699      	mov	r9, r3
 8000e68:	d021      	beq.n	8000eae <__aeabi_ddiv+0x1a6>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x16a>
 8000e70:	e169      	b.n	8001146 <__aeabi_ddiv+0x43e>
 8000e72:	4658      	mov	r0, fp
 8000e74:	f001 fb22 	bl	80024bc <__clzsi2>
 8000e78:	230b      	movs	r3, #11
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	469c      	mov	ip, r3
 8000e7e:	0002      	movs	r2, r0
 8000e80:	4484      	add	ip, r0
 8000e82:	4666      	mov	r6, ip
 8000e84:	231d      	movs	r3, #29
 8000e86:	1b9b      	subs	r3, r3, r6
 8000e88:	0026      	movs	r6, r4
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	4658      	mov	r0, fp
 8000e8e:	40de      	lsrs	r6, r3
 8000e90:	3908      	subs	r1, #8
 8000e92:	4088      	lsls	r0, r1
 8000e94:	0033      	movs	r3, r6
 8000e96:	4303      	orrs	r3, r0
 8000e98:	4699      	mov	r9, r3
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <__aeabi_ddiv+0x230>)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	e753      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2404      	movs	r4, #4
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e74c      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e764      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	0032      	movs	r2, r6
 8000ecc:	2103      	movs	r1, #3
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	e75f      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	46d9      	mov	r9, fp
 8000ed8:	240c      	movs	r4, #12
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	e73b      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2480      	movs	r4, #128	@ 0x80
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	e779      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000eec:	2480      	movs	r4, #128	@ 0x80
 8000eee:	465b      	mov	r3, fp
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	0324      	lsls	r4, r4, #12
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	4690      	mov	r8, r2
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	e76f      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f00:	2480      	movs	r4, #128	@ 0x80
 8000f02:	464b      	mov	r3, r9
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	4223      	tst	r3, r4
 8000f08:	d002      	beq.n	8000f10 <__aeabi_ddiv+0x208>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4223      	tst	r3, r4
 8000f0e:	d0f0      	beq.n	8000ef2 <__aeabi_ddiv+0x1ea>
 8000f10:	2480      	movs	r4, #128	@ 0x80
 8000f12:	464b      	mov	r3, r9
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	431c      	orrs	r4, r3
 8000f18:	0324      	lsls	r4, r4, #12
 8000f1a:	9e02      	ldr	r6, [sp, #8]
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	e75e      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff
 8000f28:	fffffc01 	.word	0xfffffc01
 8000f2c:	0801337c 	.word	0x0801337c
 8000f30:	fffff801 	.word	0xfffff801
 8000f34:	000003f3 	.word	0x000003f3
 8000f38:	fffffc0d 	.word	0xfffffc0d
 8000f3c:	45cb      	cmp	fp, r9
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0x23a>
 8000f40:	e0f8      	b.n	8001134 <__aeabi_ddiv+0x42c>
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x23e>
 8000f44:	e0f3      	b.n	800112e <__aeabi_ddiv+0x426>
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4648      	mov	r0, r9
 8000f50:	2500      	movs	r5, #0
 8000f52:	44e2      	add	sl, ip
 8000f54:	465b      	mov	r3, fp
 8000f56:	0e17      	lsrs	r7, r2, #24
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c19      	lsrs	r1, r3, #16
 8000f5e:	043b      	lsls	r3, r7, #16
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	0c1f      	lsrs	r7, r3, #16
 8000f66:	4691      	mov	r9, r2
 8000f68:	9102      	str	r1, [sp, #8]
 8000f6a:	9703      	str	r7, [sp, #12]
 8000f6c:	f7ff f96a 	bl	8000244 <__aeabi_uidivmod>
 8000f70:	0002      	movs	r2, r0
 8000f72:	437a      	muls	r2, r7
 8000f74:	040b      	lsls	r3, r1, #16
 8000f76:	0c21      	lsrs	r1, r4, #16
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f80:	9f00      	ldr	r7, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	46bc      	mov	ip, r7
 8000f86:	425b      	negs	r3, r3
 8000f88:	4461      	add	r1, ip
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	44e0      	add	r8, ip
 8000f8e:	428f      	cmp	r7, r1
 8000f90:	d800      	bhi.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f92:	e15c      	b.n	800124e <__aeabi_ddiv+0x546>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f954 	bl	8000244 <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d906      	bls.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fae:	9900      	ldr	r1, [sp, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	4464      	add	r4, ip
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d800      	bhi.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fba:	e142      	b.n	8001242 <__aeabi_ddiv+0x53a>
 8000fbc:	1aa0      	subs	r0, r4, r2
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	0412      	lsls	r2, r2, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4659      	mov	r1, fp
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	001f      	movs	r7, r3
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	040b      	lsls	r3, r1, #16
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0c09      	lsrs	r1, r1, #16
 8000fd8:	000c      	movs	r4, r1
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	435c      	muls	r4, r3
 8000fde:	0c12      	lsrs	r2, r2, #16
 8000fe0:	437b      	muls	r3, r7
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4351      	muls	r1, r2
 8000fe6:	437a      	muls	r2, r7
 8000fe8:	0c27      	lsrs	r7, r4, #16
 8000fea:	46bc      	mov	ip, r7
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	4463      	add	r3, ip
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d903      	bls.n	8000ffc <__aeabi_ddiv+0x2f4>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	4462      	add	r2, ip
 8000ffc:	0c19      	lsrs	r1, r3, #16
 8000ffe:	0424      	lsls	r4, r4, #16
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c24      	lsrs	r4, r4, #16
 8001004:	188a      	adds	r2, r1, r2
 8001006:	191c      	adds	r4, r3, r4
 8001008:	4290      	cmp	r0, r2
 800100a:	d302      	bcc.n	8001012 <__aeabi_ddiv+0x30a>
 800100c:	d116      	bne.n	800103c <__aeabi_ddiv+0x334>
 800100e:	42a5      	cmp	r5, r4
 8001010:	d214      	bcs.n	800103c <__aeabi_ddiv+0x334>
 8001012:	465b      	mov	r3, fp
 8001014:	9f00      	ldr	r7, [sp, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	444d      	add	r5, r9
 800101a:	9305      	str	r3, [sp, #20]
 800101c:	454d      	cmp	r5, r9
 800101e:	419b      	sbcs	r3, r3
 8001020:	46bc      	mov	ip, r7
 8001022:	425b      	negs	r3, r3
 8001024:	4463      	add	r3, ip
 8001026:	18c0      	adds	r0, r0, r3
 8001028:	4287      	cmp	r7, r0
 800102a:	d300      	bcc.n	800102e <__aeabi_ddiv+0x326>
 800102c:	e102      	b.n	8001234 <__aeabi_ddiv+0x52c>
 800102e:	4282      	cmp	r2, r0
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x32c>
 8001032:	e129      	b.n	8001288 <__aeabi_ddiv+0x580>
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x330>
 8001036:	e124      	b.n	8001282 <__aeabi_ddiv+0x57a>
 8001038:	9b05      	ldr	r3, [sp, #20]
 800103a:	469b      	mov	fp, r3
 800103c:	1b2c      	subs	r4, r5, r4
 800103e:	42a5      	cmp	r5, r4
 8001040:	41ad      	sbcs	r5, r5
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4283      	cmp	r3, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x348>
 800104e:	e10f      	b.n	8001270 <__aeabi_ddiv+0x568>
 8001050:	9902      	ldr	r1, [sp, #8]
 8001052:	f7ff f8f7 	bl	8000244 <__aeabi_uidivmod>
 8001056:	9a03      	ldr	r2, [sp, #12]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c21      	lsrs	r1, r4, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x360>
 8001066:	e0cb      	b.n	8001200 <__aeabi_ddiv+0x4f8>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	9902      	ldr	r1, [sp, #8]
 800106c:	f7ff f8ea 	bl	8000244 <__aeabi_uidivmod>
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	0424      	lsls	r4, r4, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c24      	lsrs	r4, r4, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430c      	orrs	r4, r1
 800107e:	42a2      	cmp	r2, r4
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x37c>
 8001082:	e0ca      	b.n	800121a <__aeabi_ddiv+0x512>
 8001084:	4641      	mov	r1, r8
 8001086:	1aa4      	subs	r4, r4, r2
 8001088:	042a      	lsls	r2, r5, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	9f04      	ldr	r7, [sp, #16]
 800108e:	0413      	lsls	r3, r2, #16
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	4359      	muls	r1, r3
 8001094:	4640      	mov	r0, r8
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c15      	lsrs	r5, r2, #16
 800109c:	4368      	muls	r0, r5
 800109e:	0c0b      	lsrs	r3, r1, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	437d      	muls	r5, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x3aa>
 80010aa:	2080      	movs	r0, #128	@ 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4465      	add	r5, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c09      	lsrs	r1, r1, #16
 80010ba:	1940      	adds	r0, r0, r5
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	4284      	cmp	r4, r0
 80010c0:	d327      	bcc.n	8001112 <__aeabi_ddiv+0x40a>
 80010c2:	d023      	beq.n	800110c <__aeabi_ddiv+0x404>
 80010c4:	2301      	movs	r3, #1
 80010c6:	0035      	movs	r5, r6
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b94      	ldr	r3, [pc, #592]	@ (800131c <__aeabi_ddiv+0x614>)
 80010cc:	4453      	add	r3, sl
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd60      	ble.n	8001194 <__aeabi_ddiv+0x48c>
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3d0>
 80010d6:	e086      	b.n	80011e6 <__aeabi_ddiv+0x4de>
 80010d8:	002e      	movs	r6, r5
 80010da:	08d1      	lsrs	r1, r2, #3
 80010dc:	465a      	mov	r2, fp
 80010de:	01d2      	lsls	r2, r2, #7
 80010e0:	d506      	bpl.n	80010f0 <__aeabi_ddiv+0x3e8>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <__aeabi_ddiv+0x618>)
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	4693      	mov	fp, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4453      	add	r3, sl
 80010f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001324 <__aeabi_ddiv+0x61c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_ddiv+0x3f0>
 80010f6:	e680      	b.n	8000dfa <__aeabi_ddiv+0xf2>
 80010f8:	465a      	mov	r2, fp
 80010fa:	0752      	lsls	r2, r2, #29
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4690      	mov	r8, r2
 8001100:	465a      	mov	r2, fp
 8001102:	055b      	lsls	r3, r3, #21
 8001104:	0254      	lsls	r4, r2, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d5b      	lsrs	r3, r3, #21
 800110a:	e669      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 800110c:	0035      	movs	r5, r6
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0db      	beq.n	80010ca <__aeabi_ddiv+0x3c2>
 8001112:	9d00      	ldr	r5, [sp, #0]
 8001114:	1e51      	subs	r1, r2, #1
 8001116:	46ac      	mov	ip, r5
 8001118:	4464      	add	r4, ip
 800111a:	42ac      	cmp	r4, r5
 800111c:	d200      	bcs.n	8001120 <__aeabi_ddiv+0x418>
 800111e:	e09e      	b.n	800125e <__aeabi_ddiv+0x556>
 8001120:	4284      	cmp	r4, r0
 8001122:	d200      	bcs.n	8001126 <__aeabi_ddiv+0x41e>
 8001124:	e0e1      	b.n	80012ea <__aeabi_ddiv+0x5e2>
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x422>
 8001128:	e0ee      	b.n	8001308 <__aeabi_ddiv+0x600>
 800112a:	000a      	movs	r2, r1
 800112c:	e7ca      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800112e:	4542      	cmp	r2, r8
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x42c>
 8001132:	e708      	b.n	8000f46 <__aeabi_ddiv+0x23e>
 8001134:	464b      	mov	r3, r9
 8001136:	07dc      	lsls	r4, r3, #31
 8001138:	0858      	lsrs	r0, r3, #1
 800113a:	4643      	mov	r3, r8
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	431c      	orrs	r4, r3
 8001140:	4643      	mov	r3, r8
 8001142:	07dd      	lsls	r5, r3, #31
 8001144:	e706      	b.n	8000f54 <__aeabi_ddiv+0x24c>
 8001146:	f001 f9b9 	bl	80024bc <__clzsi2>
 800114a:	2315      	movs	r3, #21
 800114c:	469c      	mov	ip, r3
 800114e:	4484      	add	ip, r0
 8001150:	0002      	movs	r2, r0
 8001152:	4663      	mov	r3, ip
 8001154:	3220      	adds	r2, #32
 8001156:	2b1c      	cmp	r3, #28
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x454>
 800115a:	e692      	b.n	8000e82 <__aeabi_ddiv+0x17a>
 800115c:	0023      	movs	r3, r4
 800115e:	3808      	subs	r0, #8
 8001160:	4083      	lsls	r3, r0
 8001162:	4699      	mov	r9, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4698      	mov	r8, r3
 8001168:	e69a      	b.n	8000ea0 <__aeabi_ddiv+0x198>
 800116a:	f001 f9a7 	bl	80024bc <__clzsi2>
 800116e:	0002      	movs	r2, r0
 8001170:	0003      	movs	r3, r0
 8001172:	3215      	adds	r2, #21
 8001174:	3320      	adds	r3, #32
 8001176:	2a1c      	cmp	r2, #28
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x474>
 800117a:	e65f      	b.n	8000e3c <__aeabi_ddiv+0x134>
 800117c:	9900      	ldr	r1, [sp, #0]
 800117e:	3808      	subs	r0, #8
 8001180:	4081      	lsls	r1, r0
 8001182:	2200      	movs	r2, #0
 8001184:	468b      	mov	fp, r1
 8001186:	e666      	b.n	8000e56 <__aeabi_ddiv+0x14e>
 8001188:	2200      	movs	r2, #0
 800118a:	002e      	movs	r6, r5
 800118c:	2400      	movs	r4, #0
 800118e:	4690      	mov	r8, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <__aeabi_ddiv+0x620>)
 8001192:	e625      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8001194:	002e      	movs	r6, r5
 8001196:	2101      	movs	r1, #1
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	2938      	cmp	r1, #56	@ 0x38
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x498>
 800119e:	e61b      	b.n	8000dd8 <__aeabi_ddiv+0xd0>
 80011a0:	291f      	cmp	r1, #31
 80011a2:	dc7e      	bgt.n	80012a2 <__aeabi_ddiv+0x59a>
 80011a4:	4861      	ldr	r0, [pc, #388]	@ (800132c <__aeabi_ddiv+0x624>)
 80011a6:	0014      	movs	r4, r2
 80011a8:	4450      	add	r0, sl
 80011aa:	465b      	mov	r3, fp
 80011ac:	4082      	lsls	r2, r0
 80011ae:	4083      	lsls	r3, r0
 80011b0:	40cc      	lsrs	r4, r1
 80011b2:	1e50      	subs	r0, r2, #1
 80011b4:	4182      	sbcs	r2, r0
 80011b6:	4323      	orrs	r3, r4
 80011b8:	431a      	orrs	r2, r3
 80011ba:	465b      	mov	r3, fp
 80011bc:	40cb      	lsrs	r3, r1
 80011be:	0751      	lsls	r1, r2, #29
 80011c0:	d009      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011c2:	210f      	movs	r1, #15
 80011c4:	4011      	ands	r1, r2
 80011c6:	2904      	cmp	r1, #4
 80011c8:	d005      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011ca:	1d11      	adds	r1, r2, #4
 80011cc:	4291      	cmp	r1, r2
 80011ce:	4192      	sbcs	r2, r2
 80011d0:	4252      	negs	r2, r2
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	0219      	lsls	r1, r3, #8
 80011d8:	d400      	bmi.n	80011dc <__aeabi_ddiv+0x4d4>
 80011da:	e09b      	b.n	8001314 <__aeabi_ddiv+0x60c>
 80011dc:	2200      	movs	r2, #0
 80011de:	2301      	movs	r3, #1
 80011e0:	2400      	movs	r4, #0
 80011e2:	4690      	mov	r8, r2
 80011e4:	e5fc      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80011e6:	210f      	movs	r1, #15
 80011e8:	4011      	ands	r1, r2
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x4e8>
 80011ee:	e773      	b.n	80010d8 <__aeabi_ddiv+0x3d0>
 80011f0:	1d11      	adds	r1, r2, #4
 80011f2:	4291      	cmp	r1, r2
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4252      	negs	r2, r2
 80011f8:	002e      	movs	r6, r5
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	4493      	add	fp, r2
 80011fe:	e76d      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	3d01      	subs	r5, #1
 8001204:	469c      	mov	ip, r3
 8001206:	4461      	add	r1, ip
 8001208:	428b      	cmp	r3, r1
 800120a:	d900      	bls.n	800120e <__aeabi_ddiv+0x506>
 800120c:	e72c      	b.n	8001068 <__aeabi_ddiv+0x360>
 800120e:	428a      	cmp	r2, r1
 8001210:	d800      	bhi.n	8001214 <__aeabi_ddiv+0x50c>
 8001212:	e729      	b.n	8001068 <__aeabi_ddiv+0x360>
 8001214:	1e85      	subs	r5, r0, #2
 8001216:	4461      	add	r1, ip
 8001218:	e726      	b.n	8001068 <__aeabi_ddiv+0x360>
 800121a:	9900      	ldr	r1, [sp, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	468c      	mov	ip, r1
 8001220:	4464      	add	r4, ip
 8001222:	42a1      	cmp	r1, r4
 8001224:	d900      	bls.n	8001228 <__aeabi_ddiv+0x520>
 8001226:	e72d      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001228:	42a2      	cmp	r2, r4
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x526>
 800122c:	e72a      	b.n	8001084 <__aeabi_ddiv+0x37c>
 800122e:	1e83      	subs	r3, r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	e727      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001234:	4287      	cmp	r7, r0
 8001236:	d000      	beq.n	800123a <__aeabi_ddiv+0x532>
 8001238:	e6fe      	b.n	8001038 <__aeabi_ddiv+0x330>
 800123a:	45a9      	cmp	r9, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x538>
 800123e:	e6fb      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001240:	e6f5      	b.n	800102e <__aeabi_ddiv+0x326>
 8001242:	42a2      	cmp	r2, r4
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x540>
 8001246:	e6b9      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 8001248:	1e83      	subs	r3, r0, #2
 800124a:	4464      	add	r4, ip
 800124c:	e6b6      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 800124e:	428a      	cmp	r2, r1
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x54c>
 8001252:	e69f      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 8001254:	46bc      	mov	ip, r7
 8001256:	1e83      	subs	r3, r0, #2
 8001258:	4698      	mov	r8, r3
 800125a:	4461      	add	r1, ip
 800125c:	e69a      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 800125e:	000a      	movs	r2, r1
 8001260:	4284      	cmp	r4, r0
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x55e>
 8001264:	e72e      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 8001266:	454b      	cmp	r3, r9
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x564>
 800126a:	e72b      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800126c:	0035      	movs	r5, r6
 800126e:	e72c      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <__aeabi_ddiv+0x614>)
 8001272:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <__aeabi_ddiv+0x628>)
 8001274:	4453      	add	r3, sl
 8001276:	4592      	cmp	sl, r2
 8001278:	db43      	blt.n	8001302 <__aeabi_ddiv+0x5fa>
 800127a:	2201      	movs	r2, #1
 800127c:	2100      	movs	r1, #0
 800127e:	4493      	add	fp, r2
 8001280:	e72c      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001282:	42ac      	cmp	r4, r5
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x580>
 8001286:	e6d7      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001288:	2302      	movs	r3, #2
 800128a:	425b      	negs	r3, r3
 800128c:	469c      	mov	ip, r3
 800128e:	9900      	ldr	r1, [sp, #0]
 8001290:	444d      	add	r5, r9
 8001292:	454d      	cmp	r5, r9
 8001294:	419b      	sbcs	r3, r3
 8001296:	44e3      	add	fp, ip
 8001298:	468c      	mov	ip, r1
 800129a:	425b      	negs	r3, r3
 800129c:	4463      	add	r3, ip
 800129e:	18c0      	adds	r0, r0, r3
 80012a0:	e6cc      	b.n	800103c <__aeabi_ddiv+0x334>
 80012a2:	201f      	movs	r0, #31
 80012a4:	4240      	negs	r0, r0
 80012a6:	1ac3      	subs	r3, r0, r3
 80012a8:	4658      	mov	r0, fp
 80012aa:	40d8      	lsrs	r0, r3
 80012ac:	2920      	cmp	r1, #32
 80012ae:	d004      	beq.n	80012ba <__aeabi_ddiv+0x5b2>
 80012b0:	4659      	mov	r1, fp
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <__aeabi_ddiv+0x62c>)
 80012b4:	4453      	add	r3, sl
 80012b6:	4099      	lsls	r1, r3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	419a      	sbcs	r2, r3
 80012be:	2307      	movs	r3, #7
 80012c0:	0019      	movs	r1, r3
 80012c2:	4302      	orrs	r2, r0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4011      	ands	r1, r2
 80012c8:	4213      	tst	r3, r2
 80012ca:	d009      	beq.n	80012e0 <__aeabi_ddiv+0x5d8>
 80012cc:	3308      	adds	r3, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d01d      	beq.n	8001310 <__aeabi_ddiv+0x608>
 80012d4:	1d13      	adds	r3, r2, #4
 80012d6:	4293      	cmp	r3, r2
 80012d8:	4189      	sbcs	r1, r1
 80012da:	001a      	movs	r2, r3
 80012dc:	4249      	negs	r1, r1
 80012de:	0749      	lsls	r1, r1, #29
 80012e0:	08d2      	lsrs	r2, r2, #3
 80012e2:	430a      	orrs	r2, r1
 80012e4:	4690      	mov	r8, r2
 80012e6:	2300      	movs	r3, #0
 80012e8:	e57a      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80012ea:	4649      	mov	r1, r9
 80012ec:	9f00      	ldr	r7, [sp, #0]
 80012ee:	004d      	lsls	r5, r1, #1
 80012f0:	454d      	cmp	r5, r9
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	46bc      	mov	ip, r7
 80012f6:	4249      	negs	r1, r1
 80012f8:	4461      	add	r1, ip
 80012fa:	46a9      	mov	r9, r5
 80012fc:	3a02      	subs	r2, #2
 80012fe:	1864      	adds	r4, r4, r1
 8001300:	e7ae      	b.n	8001260 <__aeabi_ddiv+0x558>
 8001302:	2201      	movs	r2, #1
 8001304:	4252      	negs	r2, r2
 8001306:	e746      	b.n	8001196 <__aeabi_ddiv+0x48e>
 8001308:	4599      	cmp	r9, r3
 800130a:	d3ee      	bcc.n	80012ea <__aeabi_ddiv+0x5e2>
 800130c:	000a      	movs	r2, r1
 800130e:	e7aa      	b.n	8001266 <__aeabi_ddiv+0x55e>
 8001310:	2100      	movs	r1, #0
 8001312:	e7e5      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	0b1c      	lsrs	r4, r3, #12
 800131a:	e7e1      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff
 800132c:	0000041e 	.word	0x0000041e
 8001330:	fffffc02 	.word	0xfffffc02
 8001334:	0000043e 	.word	0x0000043e

08001338 <__eqdf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4657      	mov	r7, sl
 800133c:	46de      	mov	lr, fp
 800133e:	464e      	mov	r6, r9
 8001340:	4645      	mov	r5, r8
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	000d      	movs	r5, r1
 8001346:	0004      	movs	r4, r0
 8001348:	0fe8      	lsrs	r0, r5, #31
 800134a:	4683      	mov	fp, r0
 800134c:	0309      	lsls	r1, r1, #12
 800134e:	0fd8      	lsrs	r0, r3, #31
 8001350:	0b09      	lsrs	r1, r1, #12
 8001352:	4682      	mov	sl, r0
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <__eqdf2+0x84>)
 8001356:	468c      	mov	ip, r1
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	005e      	lsls	r6, r3, #1
 800135e:	0d49      	lsrs	r1, r1, #21
 8001360:	0b3f      	lsrs	r7, r7, #12
 8001362:	0d76      	lsrs	r6, r6, #21
 8001364:	4281      	cmp	r1, r0
 8001366:	d018      	beq.n	800139a <__eqdf2+0x62>
 8001368:	4286      	cmp	r6, r0
 800136a:	d00f      	beq.n	800138c <__eqdf2+0x54>
 800136c:	2001      	movs	r0, #1
 800136e:	42b1      	cmp	r1, r6
 8001370:	d10d      	bne.n	800138e <__eqdf2+0x56>
 8001372:	45bc      	cmp	ip, r7
 8001374:	d10b      	bne.n	800138e <__eqdf2+0x56>
 8001376:	4294      	cmp	r4, r2
 8001378:	d109      	bne.n	800138e <__eqdf2+0x56>
 800137a:	45d3      	cmp	fp, sl
 800137c:	d01c      	beq.n	80013b8 <__eqdf2+0x80>
 800137e:	2900      	cmp	r1, #0
 8001380:	d105      	bne.n	800138e <__eqdf2+0x56>
 8001382:	4660      	mov	r0, ip
 8001384:	4320      	orrs	r0, r4
 8001386:	1e43      	subs	r3, r0, #1
 8001388:	4198      	sbcs	r0, r3
 800138a:	e000      	b.n	800138e <__eqdf2+0x56>
 800138c:	2001      	movs	r0, #1
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2001      	movs	r0, #1
 800139c:	428e      	cmp	r6, r1
 800139e:	d1f6      	bne.n	800138e <__eqdf2+0x56>
 80013a0:	4661      	mov	r1, ip
 80013a2:	4339      	orrs	r1, r7
 80013a4:	000f      	movs	r7, r1
 80013a6:	4317      	orrs	r7, r2
 80013a8:	4327      	orrs	r7, r4
 80013aa:	d1f0      	bne.n	800138e <__eqdf2+0x56>
 80013ac:	465b      	mov	r3, fp
 80013ae:	4652      	mov	r2, sl
 80013b0:	1a98      	subs	r0, r3, r2
 80013b2:	1e43      	subs	r3, r0, #1
 80013b4:	4198      	sbcs	r0, r3
 80013b6:	e7ea      	b.n	800138e <__eqdf2+0x56>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e8      	b.n	800138e <__eqdf2+0x56>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	4645      	mov	r5, r8
 80013c8:	46de      	mov	lr, fp
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	000d      	movs	r5, r1
 80013ce:	030e      	lsls	r6, r1, #12
 80013d0:	0049      	lsls	r1, r1, #1
 80013d2:	0d49      	lsrs	r1, r1, #21
 80013d4:	468a      	mov	sl, r1
 80013d6:	0fdf      	lsrs	r7, r3, #31
 80013d8:	0fe9      	lsrs	r1, r5, #31
 80013da:	46bc      	mov	ip, r7
 80013dc:	b083      	sub	sp, #12
 80013de:	4f2f      	ldr	r7, [pc, #188]	@ (800149c <__gedf2+0xdc>)
 80013e0:	0004      	movs	r4, r0
 80013e2:	4680      	mov	r8, r0
 80013e4:	9101      	str	r1, [sp, #4]
 80013e6:	0058      	lsls	r0, r3, #1
 80013e8:	0319      	lsls	r1, r3, #12
 80013ea:	4691      	mov	r9, r2
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0b09      	lsrs	r1, r1, #12
 80013f0:	0d40      	lsrs	r0, r0, #21
 80013f2:	45ba      	cmp	sl, r7
 80013f4:	d01d      	beq.n	8001432 <__gedf2+0x72>
 80013f6:	42b8      	cmp	r0, r7
 80013f8:	d00d      	beq.n	8001416 <__gedf2+0x56>
 80013fa:	4657      	mov	r7, sl
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d12a      	bne.n	8001456 <__gedf2+0x96>
 8001400:	4334      	orrs	r4, r6
 8001402:	2800      	cmp	r0, #0
 8001404:	d124      	bne.n	8001450 <__gedf2+0x90>
 8001406:	430a      	orrs	r2, r1
 8001408:	d036      	beq.n	8001478 <__gedf2+0xb8>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d141      	bne.n	8001492 <__gedf2+0xd2>
 800140e:	4663      	mov	r3, ip
 8001410:	0058      	lsls	r0, r3, #1
 8001412:	3801      	subs	r0, #1
 8001414:	e015      	b.n	8001442 <__gedf2+0x82>
 8001416:	4311      	orrs	r1, r2
 8001418:	d138      	bne.n	800148c <__gedf2+0xcc>
 800141a:	4653      	mov	r3, sl
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <__gedf2+0x64>
 8001420:	4326      	orrs	r6, r4
 8001422:	d0f4      	beq.n	800140e <__gedf2+0x4e>
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	4563      	cmp	r3, ip
 8001428:	d107      	bne.n	800143a <__gedf2+0x7a>
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	0058      	lsls	r0, r3, #1
 800142e:	3801      	subs	r0, #1
 8001430:	e007      	b.n	8001442 <__gedf2+0x82>
 8001432:	4326      	orrs	r6, r4
 8001434:	d12a      	bne.n	800148c <__gedf2+0xcc>
 8001436:	4550      	cmp	r0, sl
 8001438:	d021      	beq.n	800147e <__gedf2+0xbe>
 800143a:	2001      	movs	r0, #1
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	425f      	negs	r7, r3
 8001440:	4338      	orrs	r0, r7
 8001442:	b003      	add	sp, #12
 8001444:	bcf0      	pop	{r4, r5, r6, r7}
 8001446:	46bb      	mov	fp, r7
 8001448:	46b2      	mov	sl, r6
 800144a:	46a9      	mov	r9, r5
 800144c:	46a0      	mov	r8, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	2c00      	cmp	r4, #0
 8001452:	d0dc      	beq.n	800140e <__gedf2+0x4e>
 8001454:	e7e6      	b.n	8001424 <__gedf2+0x64>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0ef      	beq.n	800143a <__gedf2+0x7a>
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	4563      	cmp	r3, ip
 800145e:	d1ec      	bne.n	800143a <__gedf2+0x7a>
 8001460:	4582      	cmp	sl, r0
 8001462:	dcea      	bgt.n	800143a <__gedf2+0x7a>
 8001464:	dbe1      	blt.n	800142a <__gedf2+0x6a>
 8001466:	428e      	cmp	r6, r1
 8001468:	d8e7      	bhi.n	800143a <__gedf2+0x7a>
 800146a:	d1de      	bne.n	800142a <__gedf2+0x6a>
 800146c:	45c8      	cmp	r8, r9
 800146e:	d8e4      	bhi.n	800143a <__gedf2+0x7a>
 8001470:	2000      	movs	r0, #0
 8001472:	45c8      	cmp	r8, r9
 8001474:	d2e5      	bcs.n	8001442 <__gedf2+0x82>
 8001476:	e7d8      	b.n	800142a <__gedf2+0x6a>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e2      	beq.n	8001442 <__gedf2+0x82>
 800147c:	e7dd      	b.n	800143a <__gedf2+0x7a>
 800147e:	4311      	orrs	r1, r2
 8001480:	d104      	bne.n	800148c <__gedf2+0xcc>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	4563      	cmp	r3, ip
 8001486:	d1d8      	bne.n	800143a <__gedf2+0x7a>
 8001488:	2000      	movs	r0, #0
 800148a:	e7da      	b.n	8001442 <__gedf2+0x82>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7d7      	b.n	8001442 <__gedf2+0x82>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	4563      	cmp	r3, ip
 8001496:	d0e6      	beq.n	8001466 <__gedf2+0xa6>
 8001498:	e7cf      	b.n	800143a <__gedf2+0x7a>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__ledf2>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	4645      	mov	r5, r8
 80014a8:	46de      	mov	lr, fp
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	000d      	movs	r5, r1
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	468a      	mov	sl, r1
 80014b6:	0fdf      	lsrs	r7, r3, #31
 80014b8:	0fe9      	lsrs	r1, r5, #31
 80014ba:	46bc      	mov	ip, r7
 80014bc:	b083      	sub	sp, #12
 80014be:	4f2e      	ldr	r7, [pc, #184]	@ (8001578 <__ledf2+0xd8>)
 80014c0:	0004      	movs	r4, r0
 80014c2:	4680      	mov	r8, r0
 80014c4:	9101      	str	r1, [sp, #4]
 80014c6:	0058      	lsls	r0, r3, #1
 80014c8:	0319      	lsls	r1, r3, #12
 80014ca:	4691      	mov	r9, r2
 80014cc:	0b36      	lsrs	r6, r6, #12
 80014ce:	0b09      	lsrs	r1, r1, #12
 80014d0:	0d40      	lsrs	r0, r0, #21
 80014d2:	45ba      	cmp	sl, r7
 80014d4:	d01e      	beq.n	8001514 <__ledf2+0x74>
 80014d6:	42b8      	cmp	r0, r7
 80014d8:	d00d      	beq.n	80014f6 <__ledf2+0x56>
 80014da:	4657      	mov	r7, sl
 80014dc:	2f00      	cmp	r7, #0
 80014de:	d127      	bne.n	8001530 <__ledf2+0x90>
 80014e0:	4334      	orrs	r4, r6
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d133      	bne.n	800154e <__ledf2+0xae>
 80014e6:	430a      	orrs	r2, r1
 80014e8:	d034      	beq.n	8001554 <__ledf2+0xb4>
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d140      	bne.n	8001570 <__ledf2+0xd0>
 80014ee:	4663      	mov	r3, ip
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e015      	b.n	8001522 <__ledf2+0x82>
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d112      	bne.n	8001520 <__ledf2+0x80>
 80014fa:	4653      	mov	r3, sl
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <__ledf2+0x64>
 8001500:	4326      	orrs	r6, r4
 8001502:	d0f4      	beq.n	80014ee <__ledf2+0x4e>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	4563      	cmp	r3, ip
 8001508:	d01d      	beq.n	8001546 <__ledf2+0xa6>
 800150a:	2001      	movs	r0, #1
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	425f      	negs	r7, r3
 8001510:	4338      	orrs	r0, r7
 8001512:	e006      	b.n	8001522 <__ledf2+0x82>
 8001514:	4326      	orrs	r6, r4
 8001516:	d103      	bne.n	8001520 <__ledf2+0x80>
 8001518:	4550      	cmp	r0, sl
 800151a:	d1f6      	bne.n	800150a <__ledf2+0x6a>
 800151c:	4311      	orrs	r1, r2
 800151e:	d01c      	beq.n	800155a <__ledf2+0xba>
 8001520:	2002      	movs	r0, #2
 8001522:	b003      	add	sp, #12
 8001524:	bcf0      	pop	{r4, r5, r6, r7}
 8001526:	46bb      	mov	fp, r7
 8001528:	46b2      	mov	sl, r6
 800152a:	46a9      	mov	r9, r5
 800152c:	46a0      	mov	r8, r4
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0ea      	beq.n	800150a <__ledf2+0x6a>
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	4563      	cmp	r3, ip
 8001538:	d1e7      	bne.n	800150a <__ledf2+0x6a>
 800153a:	4582      	cmp	sl, r0
 800153c:	dce5      	bgt.n	800150a <__ledf2+0x6a>
 800153e:	db02      	blt.n	8001546 <__ledf2+0xa6>
 8001540:	428e      	cmp	r6, r1
 8001542:	d8e2      	bhi.n	800150a <__ledf2+0x6a>
 8001544:	d00e      	beq.n	8001564 <__ledf2+0xc4>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	3801      	subs	r0, #1
 800154c:	e7e9      	b.n	8001522 <__ledf2+0x82>
 800154e:	2c00      	cmp	r4, #0
 8001550:	d0cd      	beq.n	80014ee <__ledf2+0x4e>
 8001552:	e7d7      	b.n	8001504 <__ledf2+0x64>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0e4      	beq.n	8001522 <__ledf2+0x82>
 8001558:	e7d7      	b.n	800150a <__ledf2+0x6a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	2000      	movs	r0, #0
 800155e:	4563      	cmp	r3, ip
 8001560:	d0df      	beq.n	8001522 <__ledf2+0x82>
 8001562:	e7d2      	b.n	800150a <__ledf2+0x6a>
 8001564:	45c8      	cmp	r8, r9
 8001566:	d8d0      	bhi.n	800150a <__ledf2+0x6a>
 8001568:	2000      	movs	r0, #0
 800156a:	45c8      	cmp	r8, r9
 800156c:	d2d9      	bcs.n	8001522 <__ledf2+0x82>
 800156e:	e7ea      	b.n	8001546 <__ledf2+0xa6>
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	4563      	cmp	r3, ip
 8001574:	d0e4      	beq.n	8001540 <__ledf2+0xa0>
 8001576:	e7c8      	b.n	800150a <__ledf2+0x6a>
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	46de      	mov	lr, fp
 8001584:	4645      	mov	r5, r8
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	001f      	movs	r7, r3
 800158a:	030b      	lsls	r3, r1, #12
 800158c:	0b1b      	lsrs	r3, r3, #12
 800158e:	0016      	movs	r6, r2
 8001590:	469a      	mov	sl, r3
 8001592:	0fca      	lsrs	r2, r1, #31
 8001594:	004b      	lsls	r3, r1, #1
 8001596:	0004      	movs	r4, r0
 8001598:	4691      	mov	r9, r2
 800159a:	b085      	sub	sp, #20
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x26>
 80015a0:	e1cf      	b.n	8001942 <__aeabi_dmul+0x3c6>
 80015a2:	4acd      	ldr	r2, [pc, #820]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d055      	beq.n	8001654 <__aeabi_dmul+0xd8>
 80015a8:	4651      	mov	r1, sl
 80015aa:	0f42      	lsrs	r2, r0, #29
 80015ac:	00c9      	lsls	r1, r1, #3
 80015ae:	430a      	orrs	r2, r1
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	4311      	orrs	r1, r2
 80015b6:	00c2      	lsls	r2, r0, #3
 80015b8:	4690      	mov	r8, r2
 80015ba:	4ac8      	ldr	r2, [pc, #800]	@ (80018dc <__aeabi_dmul+0x360>)
 80015bc:	468a      	mov	sl, r1
 80015be:	4693      	mov	fp, r2
 80015c0:	449b      	add	fp, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	033c      	lsls	r4, r7, #12
 80015ca:	007b      	lsls	r3, r7, #1
 80015cc:	0ffa      	lsrs	r2, r7, #31
 80015ce:	9601      	str	r6, [sp, #4]
 80015d0:	0b24      	lsrs	r4, r4, #12
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x5e>
 80015d8:	e188      	b.n	80018ec <__aeabi_dmul+0x370>
 80015da:	4abf      	ldr	r2, [pc, #764]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x66>
 80015e0:	e092      	b.n	8001708 <__aeabi_dmul+0x18c>
 80015e2:	4abe      	ldr	r2, [pc, #760]	@ (80018dc <__aeabi_dmul+0x360>)
 80015e4:	4694      	mov	ip, r2
 80015e6:	4463      	add	r3, ip
 80015e8:	449b      	add	fp, r3
 80015ea:	2d0a      	cmp	r5, #10
 80015ec:	dc42      	bgt.n	8001674 <__aeabi_dmul+0xf8>
 80015ee:	00e4      	lsls	r4, r4, #3
 80015f0:	0f73      	lsrs	r3, r6, #29
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2480      	movs	r4, #128	@ 0x80
 80015f6:	4649      	mov	r1, r9
 80015f8:	0424      	lsls	r4, r4, #16
 80015fa:	431c      	orrs	r4, r3
 80015fc:	00f3      	lsls	r3, r6, #3
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	2000      	movs	r0, #0
 8001604:	4059      	eors	r1, r3
 8001606:	b2cb      	uxtb	r3, r1
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	2d02      	cmp	r5, #2
 800160c:	dc00      	bgt.n	8001610 <__aeabi_dmul+0x94>
 800160e:	e094      	b.n	800173a <__aeabi_dmul+0x1be>
 8001610:	2301      	movs	r3, #1
 8001612:	40ab      	lsls	r3, r5
 8001614:	001d      	movs	r5, r3
 8001616:	23a6      	movs	r3, #166	@ 0xa6
 8001618:	002a      	movs	r2, r5
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	401a      	ands	r2, r3
 800161e:	421d      	tst	r5, r3
 8001620:	d000      	beq.n	8001624 <__aeabi_dmul+0xa8>
 8001622:	e229      	b.n	8001a78 <__aeabi_dmul+0x4fc>
 8001624:	2390      	movs	r3, #144	@ 0x90
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	421d      	tst	r5, r3
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0xb2>
 800162c:	e24d      	b.n	8001aca <__aeabi_dmul+0x54e>
 800162e:	2300      	movs	r3, #0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4699      	mov	r9, r3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4ba8      	ldr	r3, [pc, #672]	@ (80018d8 <__aeabi_dmul+0x35c>)
 8001638:	0010      	movs	r0, r2
 800163a:	464a      	mov	r2, r9
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	4323      	orrs	r3, r4
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	4313      	orrs	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	b005      	add	sp, #20
 8001648:	bcf0      	pop	{r4, r5, r6, r7}
 800164a:	46bb      	mov	fp, r7
 800164c:	46b2      	mov	sl, r6
 800164e:	46a9      	mov	r9, r5
 8001650:	46a0      	mov	r8, r4
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	4652      	mov	r2, sl
 8001656:	4302      	orrs	r2, r0
 8001658:	4690      	mov	r8, r2
 800165a:	d000      	beq.n	800165e <__aeabi_dmul+0xe2>
 800165c:	e1ac      	b.n	80019b8 <__aeabi_dmul+0x43c>
 800165e:	469b      	mov	fp, r3
 8001660:	2302      	movs	r3, #2
 8001662:	4692      	mov	sl, r2
 8001664:	2508      	movs	r5, #8
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	e7ae      	b.n	80015c8 <__aeabi_dmul+0x4c>
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	46a2      	mov	sl, r4
 800166e:	4699      	mov	r9, r3
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4698      	mov	r8, r3
 8001674:	9b02      	ldr	r3, [sp, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x100>
 800167a:	e1ca      	b.n	8001a12 <__aeabi_dmul+0x496>
 800167c:	2b03      	cmp	r3, #3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x106>
 8001680:	e192      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d110      	bne.n	80016a8 <__aeabi_dmul+0x12c>
 8001686:	2300      	movs	r3, #0
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	e7d4      	b.n	8001638 <__aeabi_dmul+0xbc>
 800168e:	2201      	movs	r2, #1
 8001690:	087b      	lsrs	r3, r7, #1
 8001692:	403a      	ands	r2, r7
 8001694:	4313      	orrs	r3, r2
 8001696:	4652      	mov	r2, sl
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	4313      	orrs	r3, r2
 800169c:	4698      	mov	r8, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	469a      	mov	sl, r3
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4699      	mov	r9, r3
 80016a8:	465b      	mov	r3, fp
 80016aa:	1c58      	adds	r0, r3, #1
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	445b      	add	r3, fp
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x13c>
 80016b6:	e1b1      	b.n	8001a1c <__aeabi_dmul+0x4a0>
 80016b8:	4642      	mov	r2, r8
 80016ba:	0752      	lsls	r2, r2, #29
 80016bc:	d00b      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016be:	220f      	movs	r2, #15
 80016c0:	4641      	mov	r1, r8
 80016c2:	400a      	ands	r2, r1
 80016c4:	2a04      	cmp	r2, #4
 80016c6:	d006      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016c8:	4642      	mov	r2, r8
 80016ca:	1d11      	adds	r1, r2, #4
 80016cc:	4541      	cmp	r1, r8
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	4688      	mov	r8, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	4492      	add	sl, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	01d2      	lsls	r2, r2, #7
 80016da:	d506      	bpl.n	80016ea <__aeabi_dmul+0x16e>
 80016dc:	4652      	mov	r2, sl
 80016de:	4b80      	ldr	r3, [pc, #512]	@ (80018e0 <__aeabi_dmul+0x364>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	4692      	mov	sl, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	18c3      	adds	r3, r0, r3
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <__aeabi_dmul+0x368>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x176>
 80016f0:	e18f      	b.n	8001a12 <__aeabi_dmul+0x496>
 80016f2:	4642      	mov	r2, r8
 80016f4:	08d1      	lsrs	r1, r2, #3
 80016f6:	4652      	mov	r2, sl
 80016f8:	0752      	lsls	r2, r2, #29
 80016fa:	430a      	orrs	r2, r1
 80016fc:	4651      	mov	r1, sl
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	024c      	lsls	r4, r1, #9
 8001702:	0b24      	lsrs	r4, r4, #12
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e797      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001708:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <__aeabi_dmul+0x35c>)
 800170a:	4326      	orrs	r6, r4
 800170c:	469c      	mov	ip, r3
 800170e:	44e3      	add	fp, ip
 8001710:	2e00      	cmp	r6, #0
 8001712:	d100      	bne.n	8001716 <__aeabi_dmul+0x19a>
 8001714:	e16f      	b.n	80019f6 <__aeabi_dmul+0x47a>
 8001716:	2303      	movs	r3, #3
 8001718:	4649      	mov	r1, r9
 800171a:	431d      	orrs	r5, r3
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	4059      	eors	r1, r3
 8001720:	b2cb      	uxtb	r3, r1
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	2d0a      	cmp	r5, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x1ae>
 8001728:	e133      	b.n	8001992 <__aeabi_dmul+0x416>
 800172a:	2301      	movs	r3, #1
 800172c:	40ab      	lsls	r3, r5
 800172e:	001d      	movs	r5, r3
 8001730:	2303      	movs	r3, #3
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2288      	movs	r2, #136	@ 0x88
 8001736:	422a      	tst	r2, r5
 8001738:	d197      	bne.n	800166a <__aeabi_dmul+0xee>
 800173a:	4642      	mov	r2, r8
 800173c:	4643      	mov	r3, r8
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	0c12      	lsrs	r2, r2, #16
 8001742:	0016      	movs	r6, r2
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	0c1d      	lsrs	r5, r3, #16
 8001748:	0c03      	lsrs	r3, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4346      	muls	r6, r0
 8001750:	46b4      	mov	ip, r6
 8001752:	001e      	movs	r6, r3
 8001754:	436e      	muls	r6, r5
 8001756:	9600      	str	r6, [sp, #0]
 8001758:	0016      	movs	r6, r2
 800175a:	0007      	movs	r7, r0
 800175c:	435e      	muls	r6, r3
 800175e:	4661      	mov	r1, ip
 8001760:	46b0      	mov	r8, r6
 8001762:	436f      	muls	r7, r5
 8001764:	0c0e      	lsrs	r6, r1, #16
 8001766:	44b8      	add	r8, r7
 8001768:	4446      	add	r6, r8
 800176a:	42b7      	cmp	r7, r6
 800176c:	d905      	bls.n	800177a <__aeabi_dmul+0x1fe>
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	4688      	mov	r8, r1
 8001774:	9f00      	ldr	r7, [sp, #0]
 8001776:	4447      	add	r7, r8
 8001778:	9700      	str	r7, [sp, #0]
 800177a:	4661      	mov	r1, ip
 800177c:	0409      	lsls	r1, r1, #16
 800177e:	0c09      	lsrs	r1, r1, #16
 8001780:	0c37      	lsrs	r7, r6, #16
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	468c      	mov	ip, r1
 8001786:	0031      	movs	r1, r6
 8001788:	4461      	add	r1, ip
 800178a:	9101      	str	r1, [sp, #4]
 800178c:	0011      	movs	r1, r2
 800178e:	0c26      	lsrs	r6, r4, #16
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	0c24      	lsrs	r4, r4, #16
 8001794:	4361      	muls	r1, r4
 8001796:	468c      	mov	ip, r1
 8001798:	0021      	movs	r1, r4
 800179a:	4369      	muls	r1, r5
 800179c:	4689      	mov	r9, r1
 800179e:	4661      	mov	r1, ip
 80017a0:	0c09      	lsrs	r1, r1, #16
 80017a2:	4688      	mov	r8, r1
 80017a4:	4372      	muls	r2, r6
 80017a6:	444a      	add	r2, r9
 80017a8:	4442      	add	r2, r8
 80017aa:	4375      	muls	r5, r6
 80017ac:	4591      	cmp	r9, r2
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x23c>
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	4688      	mov	r8, r1
 80017b6:	4445      	add	r5, r8
 80017b8:	0c11      	lsrs	r1, r2, #16
 80017ba:	4688      	mov	r8, r1
 80017bc:	4661      	mov	r1, ip
 80017be:	0409      	lsls	r1, r1, #16
 80017c0:	0c09      	lsrs	r1, r1, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	0412      	lsls	r2, r2, #16
 80017c6:	4462      	add	r2, ip
 80017c8:	18b9      	adds	r1, r7, r2
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	4651      	mov	r1, sl
 80017ce:	0c09      	lsrs	r1, r1, #16
 80017d0:	468c      	mov	ip, r1
 80017d2:	4651      	mov	r1, sl
 80017d4:	040f      	lsls	r7, r1, #16
 80017d6:	0c3f      	lsrs	r7, r7, #16
 80017d8:	0039      	movs	r1, r7
 80017da:	4341      	muls	r1, r0
 80017dc:	4445      	add	r5, r8
 80017de:	4688      	mov	r8, r1
 80017e0:	4661      	mov	r1, ip
 80017e2:	4341      	muls	r1, r0
 80017e4:	468a      	mov	sl, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	4660      	mov	r0, ip
 80017ea:	0c09      	lsrs	r1, r1, #16
 80017ec:	4689      	mov	r9, r1
 80017ee:	4358      	muls	r0, r3
 80017f0:	437b      	muls	r3, r7
 80017f2:	4453      	add	r3, sl
 80017f4:	444b      	add	r3, r9
 80017f6:	459a      	cmp	sl, r3
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x286>
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0249      	lsls	r1, r1, #9
 80017fe:	4689      	mov	r9, r1
 8001800:	4448      	add	r0, r9
 8001802:	0c19      	lsrs	r1, r3, #16
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	4688      	mov	r8, r1
 800180e:	0039      	movs	r1, r7
 8001810:	4361      	muls	r1, r4
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	4443      	add	r3, r8
 8001816:	4688      	mov	r8, r1
 8001818:	4661      	mov	r1, ip
 800181a:	434c      	muls	r4, r1
 800181c:	4371      	muls	r1, r6
 800181e:	468c      	mov	ip, r1
 8001820:	4641      	mov	r1, r8
 8001822:	4377      	muls	r7, r6
 8001824:	0c0e      	lsrs	r6, r1, #16
 8001826:	193f      	adds	r7, r7, r4
 8001828:	19f6      	adds	r6, r6, r7
 800182a:	4448      	add	r0, r9
 800182c:	42b4      	cmp	r4, r6
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x2bc>
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	4689      	mov	r9, r1
 8001836:	44cc      	add	ip, r9
 8001838:	9902      	ldr	r1, [sp, #8]
 800183a:	9f00      	ldr	r7, [sp, #0]
 800183c:	4689      	mov	r9, r1
 800183e:	0431      	lsls	r1, r6, #16
 8001840:	444f      	add	r7, r9
 8001842:	4689      	mov	r9, r1
 8001844:	4641      	mov	r1, r8
 8001846:	4297      	cmp	r7, r2
 8001848:	4192      	sbcs	r2, r2
 800184a:	040c      	lsls	r4, r1, #16
 800184c:	0c24      	lsrs	r4, r4, #16
 800184e:	444c      	add	r4, r9
 8001850:	18ff      	adds	r7, r7, r3
 8001852:	4252      	negs	r2, r2
 8001854:	1964      	adds	r4, r4, r5
 8001856:	18a1      	adds	r1, r4, r2
 8001858:	429f      	cmp	r7, r3
 800185a:	419b      	sbcs	r3, r3
 800185c:	4688      	mov	r8, r1
 800185e:	4682      	mov	sl, r0
 8001860:	425b      	negs	r3, r3
 8001862:	4699      	mov	r9, r3
 8001864:	4590      	cmp	r8, r2
 8001866:	4192      	sbcs	r2, r2
 8001868:	42ac      	cmp	r4, r5
 800186a:	41a4      	sbcs	r4, r4
 800186c:	44c2      	add	sl, r8
 800186e:	44d1      	add	r9, sl
 8001870:	4252      	negs	r2, r2
 8001872:	4264      	negs	r4, r4
 8001874:	4314      	orrs	r4, r2
 8001876:	4599      	cmp	r9, r3
 8001878:	419b      	sbcs	r3, r3
 800187a:	4582      	cmp	sl, r0
 800187c:	4192      	sbcs	r2, r2
 800187e:	425b      	negs	r3, r3
 8001880:	4252      	negs	r2, r2
 8001882:	4313      	orrs	r3, r2
 8001884:	464a      	mov	r2, r9
 8001886:	0c36      	lsrs	r6, r6, #16
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	4463      	add	r3, ip
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	0dd2      	lsrs	r2, r2, #23
 8001892:	431a      	orrs	r2, r3
 8001894:	9901      	ldr	r1, [sp, #4]
 8001896:	4692      	mov	sl, r2
 8001898:	027a      	lsls	r2, r7, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	1e50      	subs	r0, r2, #1
 800189e:	4182      	sbcs	r2, r0
 80018a0:	0dff      	lsrs	r7, r7, #23
 80018a2:	4317      	orrs	r7, r2
 80018a4:	464a      	mov	r2, r9
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4317      	orrs	r7, r2
 80018aa:	46b8      	mov	r8, r7
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	d500      	bpl.n	80018b2 <__aeabi_dmul+0x336>
 80018b0:	e6ed      	b.n	800168e <__aeabi_dmul+0x112>
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <__aeabi_dmul+0x36c>)
 80018b4:	9a03      	ldr	r2, [sp, #12]
 80018b6:	445b      	add	r3, fp
 80018b8:	4691      	mov	r9, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x344>
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dmul+0x49e>
 80018c0:	003a      	movs	r2, r7
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dmul+0x34c>
 80018c6:	e710      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018c8:	220f      	movs	r2, #15
 80018ca:	4658      	mov	r0, fp
 80018cc:	403a      	ands	r2, r7
 80018ce:	2a04      	cmp	r2, #4
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dmul+0x358>
 80018d2:	e6f9      	b.n	80016c8 <__aeabi_dmul+0x14c>
 80018d4:	e709      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	fffffc01 	.word	0xfffffc01
 80018e0:	feffffff 	.word	0xfeffffff
 80018e4:	000007fe 	.word	0x000007fe
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	0022      	movs	r2, r4
 80018ee:	4332      	orrs	r2, r6
 80018f0:	d06f      	beq.n	80019d2 <__aeabi_dmul+0x456>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0x37c>
 80018f6:	e0c2      	b.n	8001a7e <__aeabi_dmul+0x502>
 80018f8:	0020      	movs	r0, r4
 80018fa:	f000 fddf 	bl	80024bc <__clzsi2>
 80018fe:	0002      	movs	r2, r0
 8001900:	0003      	movs	r3, r0
 8001902:	3a0b      	subs	r2, #11
 8001904:	201d      	movs	r0, #29
 8001906:	1a82      	subs	r2, r0, r2
 8001908:	0030      	movs	r0, r6
 800190a:	0019      	movs	r1, r3
 800190c:	40d0      	lsrs	r0, r2
 800190e:	3908      	subs	r1, #8
 8001910:	408c      	lsls	r4, r1
 8001912:	0002      	movs	r2, r0
 8001914:	4322      	orrs	r2, r4
 8001916:	0034      	movs	r4, r6
 8001918:	408c      	lsls	r4, r1
 800191a:	4659      	mov	r1, fp
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	4986      	ldr	r1, [pc, #536]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001920:	468b      	mov	fp, r1
 8001922:	449b      	add	fp, r3
 8001924:	2d0a      	cmp	r5, #10
 8001926:	dd00      	ble.n	800192a <__aeabi_dmul+0x3ae>
 8001928:	e6a4      	b.n	8001674 <__aeabi_dmul+0xf8>
 800192a:	4649      	mov	r1, r9
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	9401      	str	r4, [sp, #4]
 8001930:	4059      	eors	r1, r3
 8001932:	b2cb      	uxtb	r3, r1
 8001934:	0014      	movs	r4, r2
 8001936:	2000      	movs	r0, #0
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	2d02      	cmp	r5, #2
 800193c:	dd00      	ble.n	8001940 <__aeabi_dmul+0x3c4>
 800193e:	e667      	b.n	8001610 <__aeabi_dmul+0x94>
 8001940:	e6fb      	b.n	800173a <__aeabi_dmul+0x1be>
 8001942:	4653      	mov	r3, sl
 8001944:	4303      	orrs	r3, r0
 8001946:	4698      	mov	r8, r3
 8001948:	d03c      	beq.n	80019c4 <__aeabi_dmul+0x448>
 800194a:	4653      	mov	r3, sl
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dmul+0x3d6>
 8001950:	e0a3      	b.n	8001a9a <__aeabi_dmul+0x51e>
 8001952:	4650      	mov	r0, sl
 8001954:	f000 fdb2 	bl	80024bc <__clzsi2>
 8001958:	230b      	movs	r3, #11
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	0002      	movs	r2, r0
 8001960:	4484      	add	ip, r0
 8001962:	0011      	movs	r1, r2
 8001964:	4650      	mov	r0, sl
 8001966:	3908      	subs	r1, #8
 8001968:	4088      	lsls	r0, r1
 800196a:	231d      	movs	r3, #29
 800196c:	4680      	mov	r8, r0
 800196e:	4660      	mov	r0, ip
 8001970:	1a1b      	subs	r3, r3, r0
 8001972:	0020      	movs	r0, r4
 8001974:	40d8      	lsrs	r0, r3
 8001976:	0003      	movs	r3, r0
 8001978:	4640      	mov	r0, r8
 800197a:	4303      	orrs	r3, r0
 800197c:	469a      	mov	sl, r3
 800197e:	0023      	movs	r3, r4
 8001980:	408b      	lsls	r3, r1
 8001982:	4698      	mov	r8, r3
 8001984:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001986:	2500      	movs	r5, #0
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	469b      	mov	fp, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	e61a      	b.n	80015c8 <__aeabi_dmul+0x4c>
 8001992:	2d0f      	cmp	r5, #15
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x41c>
 8001996:	e0c9      	b.n	8001b2c <__aeabi_dmul+0x5b0>
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	4652      	mov	r2, sl
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	421a      	tst	r2, r3
 80019a0:	d002      	beq.n	80019a8 <__aeabi_dmul+0x42c>
 80019a2:	421c      	tst	r4, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x42c>
 80019a6:	e092      	b.n	8001ace <__aeabi_dmul+0x552>
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	4642      	mov	r2, r8
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	e63e      	b.n	8001636 <__aeabi_dmul+0xba>
 80019b8:	469b      	mov	fp, r3
 80019ba:	2303      	movs	r3, #3
 80019bc:	4680      	mov	r8, r0
 80019be:	250c      	movs	r5, #12
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	e601      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019c4:	2300      	movs	r3, #0
 80019c6:	469a      	mov	sl, r3
 80019c8:	469b      	mov	fp, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	2504      	movs	r5, #4
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e5fa      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019d2:	2101      	movs	r1, #1
 80019d4:	430d      	orrs	r5, r1
 80019d6:	2d0a      	cmp	r5, #10
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dmul+0x460>
 80019da:	e64b      	b.n	8001674 <__aeabi_dmul+0xf8>
 80019dc:	4649      	mov	r1, r9
 80019de:	9800      	ldr	r0, [sp, #0]
 80019e0:	4041      	eors	r1, r0
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2d02      	cmp	r5, #2
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dmul+0x470>
 80019ea:	e096      	b.n	8001b1a <__aeabi_dmul+0x59e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e60c      	b.n	8001610 <__aeabi_dmul+0x94>
 80019f6:	4649      	mov	r1, r9
 80019f8:	2302      	movs	r3, #2
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	432b      	orrs	r3, r5
 80019fe:	4051      	eors	r1, r2
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	9203      	str	r2, [sp, #12]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dmul+0x48e>
 8001a08:	e634      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d157      	bne.n	8001abe <__aeabi_dmul+0x542>
 8001a0e:	9b03      	ldr	r3, [sp, #12]
 8001a10:	4699      	mov	r9, r3
 8001a12:	2400      	movs	r4, #0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4b49      	ldr	r3, [pc, #292]	@ (8001b3c <__aeabi_dmul+0x5c0>)
 8001a18:	e60e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a1a:	4658      	mov	r0, fp
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	1ac9      	subs	r1, r1, r3
 8001a20:	2938      	cmp	r1, #56	@ 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dmul+0x4aa>
 8001a24:	e62f      	b.n	8001686 <__aeabi_dmul+0x10a>
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd56      	ble.n	8001ad8 <__aeabi_dmul+0x55c>
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	4654      	mov	r4, sl
 8001a2e:	4252      	negs	r2, r2
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	40dc      	lsrs	r4, r3
 8001a34:	2920      	cmp	r1, #32
 8001a36:	d007      	beq.n	8001a48 <__aeabi_dmul+0x4cc>
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <__aeabi_dmul+0x5c4>)
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4460      	add	r0, ip
 8001a42:	4083      	lsls	r3, r0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	000b      	movs	r3, r1
 8001a52:	4322      	orrs	r2, r4
 8001a54:	4013      	ands	r3, r2
 8001a56:	2400      	movs	r4, #0
 8001a58:	4211      	tst	r1, r2
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_dmul+0x4f4>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d05d      	beq.n	8001b20 <__aeabi_dmul+0x5a4>
 8001a64:	1d11      	adds	r1, r2, #4
 8001a66:	4291      	cmp	r1, r2
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	08d2      	lsrs	r2, r2, #3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	e5df      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	e5fa      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a7e:	9801      	ldr	r0, [sp, #4]
 8001a80:	f000 fd1c 	bl	80024bc <__clzsi2>
 8001a84:	0002      	movs	r2, r0
 8001a86:	0003      	movs	r3, r0
 8001a88:	3215      	adds	r2, #21
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	2a1c      	cmp	r2, #28
 8001a8e:	dc00      	bgt.n	8001a92 <__aeabi_dmul+0x516>
 8001a90:	e738      	b.n	8001904 <__aeabi_dmul+0x388>
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3808      	subs	r0, #8
 8001a96:	4082      	lsls	r2, r0
 8001a98:	e73f      	b.n	800191a <__aeabi_dmul+0x39e>
 8001a9a:	f000 fd0f 	bl	80024bc <__clzsi2>
 8001a9e:	2315      	movs	r3, #21
 8001aa0:	469c      	mov	ip, r3
 8001aa2:	4484      	add	ip, r0
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	3220      	adds	r2, #32
 8001aaa:	2b1c      	cmp	r3, #28
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x534>
 8001aae:	e758      	b.n	8001962 <__aeabi_dmul+0x3e6>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	3808      	subs	r0, #8
 8001ab8:	4083      	lsls	r3, r0
 8001aba:	469a      	mov	sl, r3
 8001abc:	e762      	b.n	8001984 <__aeabi_dmul+0x408>
 8001abe:	001d      	movs	r5, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	e5a2      	b.n	8001610 <__aeabi_dmul+0x94>
 8001aca:	9002      	str	r0, [sp, #8]
 8001acc:	e632      	b.n	8001734 <__aeabi_dmul+0x1b8>
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	9a01      	ldr	r2, [sp, #4]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e5ae      	b.n	8001636 <__aeabi_dmul+0xba>
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <__aeabi_dmul+0x5c8>)
 8001ada:	4652      	mov	r2, sl
 8001adc:	18c3      	adds	r3, r0, r3
 8001ade:	4640      	mov	r0, r8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	40c8      	lsrs	r0, r1
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4098      	lsls	r0, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4183      	sbcs	r3, r0
 8001af0:	4654      	mov	r4, sl
 8001af2:	431a      	orrs	r2, r3
 8001af4:	40cc      	lsrs	r4, r1
 8001af6:	0753      	lsls	r3, r2, #29
 8001af8:	d009      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001afa:	230f      	movs	r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d005      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001b02:	1d13      	adds	r3, r2, #4
 8001b04:	4293      	cmp	r3, r2
 8001b06:	4192      	sbcs	r2, r2
 8001b08:	4252      	negs	r2, r2
 8001b0a:	18a4      	adds	r4, r4, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	0223      	lsls	r3, r4, #8
 8001b10:	d508      	bpl.n	8001b24 <__aeabi_dmul+0x5a8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	2400      	movs	r4, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	e58e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	e58b      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e7a5      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b24:	0763      	lsls	r3, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e7a1      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b2c:	9b00      	ldr	r3, [sp, #0]
 8001b2e:	46a2      	mov	sl, r4
 8001b30:	4699      	mov	r9, r3
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	4698      	mov	r8, r3
 8001b36:	e737      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001b38:	fffffc0d 	.word	0xfffffc0d
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	0000043e 	.word	0x0000043e
 8001b44:	0000041e 	.word	0x0000041e

08001b48 <__aeabi_dsub>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	4645      	mov	r5, r8
 8001b50:	46de      	mov	lr, fp
 8001b52:	b5e0      	push	{r5, r6, r7, lr}
 8001b54:	b083      	sub	sp, #12
 8001b56:	9000      	str	r0, [sp, #0]
 8001b58:	9101      	str	r1, [sp, #4]
 8001b5a:	030c      	lsls	r4, r1, #12
 8001b5c:	004d      	lsls	r5, r1, #1
 8001b5e:	0fce      	lsrs	r6, r1, #31
 8001b60:	0a61      	lsrs	r1, r4, #9
 8001b62:	9c00      	ldr	r4, [sp, #0]
 8001b64:	005f      	lsls	r7, r3, #1
 8001b66:	0f64      	lsrs	r4, r4, #29
 8001b68:	430c      	orrs	r4, r1
 8001b6a:	9900      	ldr	r1, [sp, #0]
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	00c8      	lsls	r0, r1, #3
 8001b72:	0319      	lsls	r1, r3, #12
 8001b74:	0d7b      	lsrs	r3, r7, #21
 8001b76:	4699      	mov	r9, r3
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001eac <__aeabi_dsub+0x364>)
 8001b7c:	0fdb      	lsrs	r3, r3, #31
 8001b7e:	469c      	mov	ip, r3
 8001b80:	0a4b      	lsrs	r3, r1, #9
 8001b82:	9900      	ldr	r1, [sp, #0]
 8001b84:	4680      	mov	r8, r0
 8001b86:	0f49      	lsrs	r1, r1, #29
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	468b      	mov	fp, r1
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4692      	mov	sl, r2
 8001b92:	0d6d      	lsrs	r5, r5, #21
 8001b94:	45b9      	cmp	r9, r7
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x52>
 8001b98:	e0bf      	b.n	8001d1a <__aeabi_dsub+0x1d2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	4059      	eors	r1, r3
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	1aeb      	subs	r3, r5, r3
 8001ba6:	428e      	cmp	r6, r1
 8001ba8:	d075      	beq.n	8001c96 <__aeabi_dsub+0x14e>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dsub+0x68>
 8001bae:	e2a3      	b.n	80020f8 <__aeabi_dsub+0x5b0>
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x70>
 8001bb6:	e0ce      	b.n	8001d56 <__aeabi_dsub+0x20e>
 8001bb8:	42bd      	cmp	r5, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x76>
 8001bbc:	e200      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001bbe:	2701      	movs	r7, #1
 8001bc0:	2b38      	cmp	r3, #56	@ 0x38
 8001bc2:	dc19      	bgt.n	8001bf8 <__aeabi_dsub+0xb0>
 8001bc4:	2780      	movs	r7, #128	@ 0x80
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	043f      	lsls	r7, r7, #16
 8001bca:	4339      	orrs	r1, r7
 8001bcc:	468b      	mov	fp, r1
 8001bce:	2b1f      	cmp	r3, #31
 8001bd0:	dd00      	ble.n	8001bd4 <__aeabi_dsub+0x8c>
 8001bd2:	e1fa      	b.n	8001fca <__aeabi_dsub+0x482>
 8001bd4:	2720      	movs	r7, #32
 8001bd6:	1af9      	subs	r1, r7, r3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	4667      	mov	r7, ip
 8001bde:	40b9      	lsls	r1, r7
 8001be0:	000f      	movs	r7, r1
 8001be2:	0011      	movs	r1, r2
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	430f      	orrs	r7, r1
 8001be8:	4661      	mov	r1, ip
 8001bea:	408a      	lsls	r2, r1
 8001bec:	1e51      	subs	r1, r2, #1
 8001bee:	418a      	sbcs	r2, r1
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	40d9      	lsrs	r1, r3
 8001bf4:	4317      	orrs	r7, r2
 8001bf6:	1a64      	subs	r4, r4, r1
 8001bf8:	1bc7      	subs	r7, r0, r7
 8001bfa:	42b8      	cmp	r0, r7
 8001bfc:	4180      	sbcs	r0, r0
 8001bfe:	4240      	negs	r0, r0
 8001c00:	1a24      	subs	r4, r4, r0
 8001c02:	0223      	lsls	r3, r4, #8
 8001c04:	d400      	bmi.n	8001c08 <__aeabi_dsub+0xc0>
 8001c06:	e140      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0a64      	lsrs	r4, r4, #9
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0xca>
 8001c10:	e154      	b.n	8001ebc <__aeabi_dsub+0x374>
 8001c12:	0020      	movs	r0, r4
 8001c14:	f000 fc52 	bl	80024bc <__clzsi2>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	0038      	movs	r0, r7
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	409c      	lsls	r4, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409f      	lsls	r7, r3
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xea>
 8001c30:	e1a6      	b.n	8001f80 <__aeabi_dsub+0x438>
 8001c32:	1b58      	subs	r0, r3, r5
 8001c34:	3001      	adds	r0, #1
 8001c36:	1a09      	subs	r1, r1, r0
 8001c38:	003c      	movs	r4, r7
 8001c3a:	408f      	lsls	r7, r1
 8001c3c:	40c4      	lsrs	r4, r0
 8001c3e:	1e7b      	subs	r3, r7, #1
 8001c40:	419f      	sbcs	r7, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	408b      	lsls	r3, r1
 8001c46:	4327      	orrs	r7, r4
 8001c48:	431f      	orrs	r7, r3
 8001c4a:	40c2      	lsrs	r2, r0
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	0014      	movs	r4, r2
 8001c50:	2500      	movs	r5, #0
 8001c52:	4313      	orrs	r3, r2
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x110>
 8001c56:	e1f7      	b.n	8002048 <__aeabi_dsub+0x500>
 8001c58:	077b      	lsls	r3, r7, #29
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x116>
 8001c5c:	e377      	b.n	800234e <__aeabi_dsub+0x806>
 8001c5e:	230f      	movs	r3, #15
 8001c60:	0038      	movs	r0, r7
 8001c62:	403b      	ands	r3, r7
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d004      	beq.n	8001c72 <__aeabi_dsub+0x12a>
 8001c68:	1d38      	adds	r0, r7, #4
 8001c6a:	42b8      	cmp	r0, r7
 8001c6c:	41bf      	sbcs	r7, r7
 8001c6e:	427f      	negs	r7, r7
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	0223      	lsls	r3, r4, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x130>
 8001c76:	e368      	b.n	800234a <__aeabi_dsub+0x802>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	@ (8001eac <__aeabi_dsub+0x364>)
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	429d      	cmp	r5, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13a>
 8001c80:	e0f4      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001c84:	056d      	lsls	r5, r5, #21
 8001c86:	401c      	ands	r4, r3
 8001c88:	0d6d      	lsrs	r5, r5, #21
 8001c8a:	0767      	lsls	r7, r4, #29
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	4307      	orrs	r7, r0
 8001c92:	0b24      	lsrs	r4, r4, #12
 8001c94:	e0ec      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x154>
 8001c9a:	e329      	b.n	80022f0 <__aeabi_dsub+0x7a8>
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x15c>
 8001ca2:	e0d6      	b.n	8001e52 <__aeabi_dsub+0x30a>
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x164>
 8001caa:	e12e      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x16c>
 8001cb2:	e1e6      	b.n	8002082 <__aeabi_dsub+0x53a>
 8001cb4:	42bb      	cmp	r3, r7
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x172>
 8001cb8:	e182      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001cba:	2701      	movs	r7, #1
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	2938      	cmp	r1, #56	@ 0x38
 8001cc0:	dc14      	bgt.n	8001cec <__aeabi_dsub+0x1a4>
 8001cc2:	2b1f      	cmp	r3, #31
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x180>
 8001cc6:	e23c      	b.n	8002142 <__aeabi_dsub+0x5fa>
 8001cc8:	2720      	movs	r7, #32
 8001cca:	1af9      	subs	r1, r7, r3
 8001ccc:	468c      	mov	ip, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	4667      	mov	r7, ip
 8001cd2:	40b9      	lsls	r1, r7
 8001cd4:	000f      	movs	r7, r1
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	430f      	orrs	r7, r1
 8001cdc:	4661      	mov	r1, ip
 8001cde:	408a      	lsls	r2, r1
 8001ce0:	1e51      	subs	r1, r2, #1
 8001ce2:	418a      	sbcs	r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	40d9      	lsrs	r1, r3
 8001ce8:	4317      	orrs	r7, r2
 8001cea:	1864      	adds	r4, r4, r1
 8001cec:	183f      	adds	r7, r7, r0
 8001cee:	4287      	cmp	r7, r0
 8001cf0:	4180      	sbcs	r0, r0
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	0223      	lsls	r3, r4, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_dsub+0x1b4>
 8001cfa:	e0c6      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <__aeabi_dsub+0x364>)
 8001cfe:	3501      	adds	r5, #1
 8001d00:	429d      	cmp	r5, r3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x1be>
 8001d04:	e0b2      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001d06:	2101      	movs	r1, #1
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001d0a:	087a      	lsrs	r2, r7, #1
 8001d0c:	401c      	ands	r4, r3
 8001d0e:	4039      	ands	r1, r7
 8001d10:	430a      	orrs	r2, r1
 8001d12:	07e7      	lsls	r7, r4, #31
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0864      	lsrs	r4, r4, #1
 8001d18:	e79e      	b.n	8001c58 <__aeabi_dsub+0x110>
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <__aeabi_dsub+0x36c>)
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	468a      	mov	sl, r1
 8001d20:	18eb      	adds	r3, r5, r3
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d028      	beq.n	8001d78 <__aeabi_dsub+0x230>
 8001d26:	4566      	cmp	r6, ip
 8001d28:	d02c      	beq.n	8001d84 <__aeabi_dsub+0x23c>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d05b      	beq.n	8001de6 <__aeabi_dsub+0x29e>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1ec>
 8001d32:	e12c      	b.n	8001f8e <__aeabi_dsub+0x446>
 8001d34:	465b      	mov	r3, fp
 8001d36:	4666      	mov	r6, ip
 8001d38:	075f      	lsls	r7, r3, #29
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4317      	orrs	r7, r2
 8001d3e:	08dd      	lsrs	r5, r3, #3
 8001d40:	003b      	movs	r3, r7
 8001d42:	432b      	orrs	r3, r5
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x200>
 8001d46:	e0e2      	b.n	8001f0e <__aeabi_dsub+0x3c6>
 8001d48:	2480      	movs	r4, #128	@ 0x80
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	432c      	orrs	r4, r5
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4d56      	ldr	r5, [pc, #344]	@ (8001eac <__aeabi_dsub+0x364>)
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	e08c      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001d56:	4659      	mov	r1, fp
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x216>
 8001d5c:	e0d5      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x21e>
 8001d64:	e1b9      	b.n	80020da <__aeabi_dsub+0x592>
 8001d66:	42bb      	cmp	r3, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x224>
 8001d6a:	e1b1      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001d6c:	2701      	movs	r7, #1
 8001d6e:	000b      	movs	r3, r1
 8001d70:	2938      	cmp	r1, #56	@ 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x22e>
 8001d74:	e740      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001d76:	e72a      	b.n	8001bce <__aeabi_dsub+0x86>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	2701      	movs	r7, #1
 8001d7c:	4079      	eors	r1, r7
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4566      	cmp	r6, ip
 8001d82:	d1d2      	bne.n	8001d2a <__aeabi_dsub+0x1e2>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x242>
 8001d88:	e0c5      	b.n	8001f16 <__aeabi_dsub+0x3ce>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x248>
 8001d8e:	e155      	b.n	800203c <__aeabi_dsub+0x4f4>
 8001d90:	464b      	mov	r3, r9
 8001d92:	0025      	movs	r5, r4
 8001d94:	4305      	orrs	r5, r0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x252>
 8001d98:	e212      	b.n	80021c0 <__aeabi_dsub+0x678>
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x25c>
 8001da2:	e249      	b.n	8002238 <__aeabi_dsub+0x6f0>
 8001da4:	4d41      	ldr	r5, [pc, #260]	@ (8001eac <__aeabi_dsub+0x364>)
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x264>
 8001daa:	e28f      	b.n	80022cc <__aeabi_dsub+0x784>
 8001dac:	2701      	movs	r7, #1
 8001dae:	2938      	cmp	r1, #56	@ 0x38
 8001db0:	dc11      	bgt.n	8001dd6 <__aeabi_dsub+0x28e>
 8001db2:	4663      	mov	r3, ip
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	dd00      	ble.n	8001dba <__aeabi_dsub+0x272>
 8001db8:	e25b      	b.n	8002272 <__aeabi_dsub+0x72a>
 8001dba:	4661      	mov	r1, ip
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	0027      	movs	r7, r4
 8001dc0:	1a5b      	subs	r3, r3, r1
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	4098      	lsls	r0, r3
 8001dc6:	409f      	lsls	r7, r3
 8001dc8:	40cd      	lsrs	r5, r1
 8001dca:	1e43      	subs	r3, r0, #1
 8001dcc:	4198      	sbcs	r0, r3
 8001dce:	40cc      	lsrs	r4, r1
 8001dd0:	432f      	orrs	r7, r5
 8001dd2:	4307      	orrs	r7, r0
 8001dd4:	44a3      	add	fp, r4
 8001dd6:	18bf      	adds	r7, r7, r2
 8001dd8:	4297      	cmp	r7, r2
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	4252      	negs	r2, r2
 8001dde:	445a      	add	r2, fp
 8001de0:	0014      	movs	r4, r2
 8001de2:	464d      	mov	r5, r9
 8001de4:	e787      	b.n	8001cf6 <__aeabi_dsub+0x1ae>
 8001de6:	4f34      	ldr	r7, [pc, #208]	@ (8001eb8 <__aeabi_dsub+0x370>)
 8001de8:	1c6b      	adds	r3, r5, #1
 8001dea:	423b      	tst	r3, r7
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x2a8>
 8001dee:	e0b6      	b.n	8001f5e <__aeabi_dsub+0x416>
 8001df0:	4659      	mov	r1, fp
 8001df2:	0023      	movs	r3, r4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	000f      	movs	r7, r1
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x2b8>
 8001dfe:	e126      	b.n	800204e <__aeabi_dsub+0x506>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x2be>
 8001e04:	e1c0      	b.n	8002188 <__aeabi_dsub+0x640>
 8001e06:	2900      	cmp	r1, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x2c4>
 8001e0a:	e0a1      	b.n	8001f50 <__aeabi_dsub+0x408>
 8001e0c:	1a83      	subs	r3, r0, r2
 8001e0e:	4698      	mov	r8, r3
 8001e10:	465b      	mov	r3, fp
 8001e12:	4540      	cmp	r0, r8
 8001e14:	41ad      	sbcs	r5, r5
 8001e16:	1ae3      	subs	r3, r4, r3
 8001e18:	426d      	negs	r5, r5
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	2580      	movs	r5, #128	@ 0x80
 8001e1e:	042d      	lsls	r5, r5, #16
 8001e20:	422b      	tst	r3, r5
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x2de>
 8001e24:	e14b      	b.n	80020be <__aeabi_dsub+0x576>
 8001e26:	465b      	mov	r3, fp
 8001e28:	1a10      	subs	r0, r2, r0
 8001e2a:	4282      	cmp	r2, r0
 8001e2c:	4192      	sbcs	r2, r2
 8001e2e:	1b1c      	subs	r4, r3, r4
 8001e30:	0007      	movs	r7, r0
 8001e32:	2601      	movs	r6, #1
 8001e34:	4663      	mov	r3, ip
 8001e36:	4252      	negs	r2, r2
 8001e38:	1aa4      	subs	r4, r4, r2
 8001e3a:	4327      	orrs	r7, r4
 8001e3c:	401e      	ands	r6, r3
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x2fc>
 8001e42:	e142      	b.n	80020ca <__aeabi_dsub+0x582>
 8001e44:	422c      	tst	r4, r5
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x302>
 8001e48:	e26d      	b.n	8002326 <__aeabi_dsub+0x7de>
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	401c      	ands	r4, r3
 8001e50:	e71b      	b.n	8001c8a <__aeabi_dsub+0x142>
 8001e52:	42bd      	cmp	r5, r7
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x310>
 8001e56:	e13b      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001e58:	2701      	movs	r7, #1
 8001e5a:	2b38      	cmp	r3, #56	@ 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x318>
 8001e5e:	e745      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8001e60:	2780      	movs	r7, #128	@ 0x80
 8001e62:	4659      	mov	r1, fp
 8001e64:	043f      	lsls	r7, r7, #16
 8001e66:	4339      	orrs	r1, r7
 8001e68:	468b      	mov	fp, r1
 8001e6a:	e72a      	b.n	8001cc2 <__aeabi_dsub+0x17a>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2700      	movs	r7, #0
 8001e70:	052d      	lsls	r5, r5, #20
 8001e72:	4325      	orrs	r5, r4
 8001e74:	07f6      	lsls	r6, r6, #31
 8001e76:	4335      	orrs	r5, r6
 8001e78:	0038      	movs	r0, r7
 8001e7a:	0029      	movs	r1, r5
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e80:	46bb      	mov	fp, r7
 8001e82:	46b2      	mov	sl, r6
 8001e84:	46a9      	mov	r9, r5
 8001e86:	46a0      	mov	r8, r4
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	d004      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	403b      	ands	r3, r7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x120>
 8001e98:	002b      	movs	r3, r5
 8001e9a:	08f8      	lsrs	r0, r7, #3
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <__aeabi_dsub+0x364>)
 8001e9e:	0767      	lsls	r7, r4, #29
 8001ea0:	4307      	orrs	r7, r0
 8001ea2:	08e5      	lsrs	r5, r4, #3
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x362>
 8001ea8:	e74a      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001eaa:	e0a5      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	0038      	movs	r0, r7
 8001ebe:	f000 fafd 	bl	80024bc <__clzsi2>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x384>
 8001eca:	e6a7      	b.n	8001c1c <__aeabi_dsub+0xd4>
 8001ecc:	003a      	movs	r2, r7
 8001ece:	3808      	subs	r0, #8
 8001ed0:	4082      	lsls	r2, r0
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x390>
 8001ed6:	e08a      	b.n	8001fee <__aeabi_dsub+0x4a6>
 8001ed8:	1b5b      	subs	r3, r3, r5
 8001eda:	1c58      	adds	r0, r3, #1
 8001edc:	281f      	cmp	r0, #31
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dsub+0x39a>
 8001ee0:	e1d8      	b.n	8002294 <__aeabi_dsub+0x74c>
 8001ee2:	0017      	movs	r7, r2
 8001ee4:	3b1f      	subs	r3, #31
 8001ee6:	40df      	lsrs	r7, r3
 8001ee8:	2820      	cmp	r0, #32
 8001eea:	d005      	beq.n	8001ef8 <__aeabi_dsub+0x3b0>
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	1e53      	subs	r3, r2, #1
 8001ef4:	419a      	sbcs	r2, r3
 8001ef6:	4317      	orrs	r7, r2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x3b8>
 8001efe:	e0e5      	b.n	80020cc <__aeabi_dsub+0x584>
 8001f00:	077b      	lsls	r3, r7, #29
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x3be>
 8001f04:	e6ab      	b.n	8001c5e <__aeabi_dsub+0x116>
 8001f06:	002c      	movs	r4, r5
 8001f08:	e7c6      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f0a:	08c0      	lsrs	r0, r0, #3
 8001f0c:	e7c6      	b.n	8001e9c <__aeabi_dsub+0x354>
 8001f0e:	2700      	movs	r7, #0
 8001f10:	2400      	movs	r4, #0
 8001f12:	4dd1      	ldr	r5, [pc, #836]	@ (8002258 <__aeabi_dsub+0x710>)
 8001f14:	e7ac      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001f16:	4fd1      	ldr	r7, [pc, #836]	@ (800225c <__aeabi_dsub+0x714>)
 8001f18:	1c6b      	adds	r3, r5, #1
 8001f1a:	423b      	tst	r3, r7
 8001f1c:	d171      	bne.n	8002002 <__aeabi_dsub+0x4ba>
 8001f1e:	0023      	movs	r3, r4
 8001f20:	4303      	orrs	r3, r0
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e0>
 8001f26:	e14e      	b.n	80021c6 <__aeabi_dsub+0x67e>
 8001f28:	4657      	mov	r7, sl
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x3e8>
 8001f2e:	e1b5      	b.n	800229c <__aeabi_dsub+0x754>
 8001f30:	2f00      	cmp	r7, #0
 8001f32:	d00d      	beq.n	8001f50 <__aeabi_dsub+0x408>
 8001f34:	1883      	adds	r3, r0, r2
 8001f36:	4283      	cmp	r3, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	445c      	add	r4, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1824      	adds	r4, r4, r0
 8001f40:	0222      	lsls	r2, r4, #8
 8001f42:	d500      	bpl.n	8001f46 <__aeabi_dsub+0x3fe>
 8001f44:	e1c8      	b.n	80022d8 <__aeabi_dsub+0x790>
 8001f46:	001f      	movs	r7, r3
 8001f48:	4698      	mov	r8, r3
 8001f4a:	4327      	orrs	r7, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x408>
 8001f4e:	e0bc      	b.n	80020ca <__aeabi_dsub+0x582>
 8001f50:	4643      	mov	r3, r8
 8001f52:	0767      	lsls	r7, r4, #29
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	431f      	orrs	r7, r3
 8001f58:	08e5      	lsrs	r5, r4, #3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e04c      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001f5e:	1a83      	subs	r3, r0, r2
 8001f60:	4698      	mov	r8, r3
 8001f62:	465b      	mov	r3, fp
 8001f64:	4540      	cmp	r0, r8
 8001f66:	41bf      	sbcs	r7, r7
 8001f68:	1ae3      	subs	r3, r4, r3
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1bdb      	subs	r3, r3, r7
 8001f6e:	021f      	lsls	r7, r3, #8
 8001f70:	d47c      	bmi.n	800206c <__aeabi_dsub+0x524>
 8001f72:	4647      	mov	r7, r8
 8001f74:	431f      	orrs	r7, r3
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x432>
 8001f78:	e0a6      	b.n	80020c8 <__aeabi_dsub+0x580>
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	e645      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8001f80:	4cb7      	ldr	r4, [pc, #732]	@ (8002260 <__aeabi_dsub+0x718>)
 8001f82:	1aed      	subs	r5, r5, r3
 8001f84:	4014      	ands	r4, r2
 8001f86:	077b      	lsls	r3, r7, #29
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x444>
 8001f8a:	e780      	b.n	8001e8e <__aeabi_dsub+0x346>
 8001f8c:	e784      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f8e:	464b      	mov	r3, r9
 8001f90:	0025      	movs	r5, r4
 8001f92:	4305      	orrs	r5, r0
 8001f94:	d066      	beq.n	8002064 <__aeabi_dsub+0x51c>
 8001f96:	1e5f      	subs	r7, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x456>
 8001f9c:	e0fc      	b.n	8002198 <__aeabi_dsub+0x650>
 8001f9e:	4dae      	ldr	r5, [pc, #696]	@ (8002258 <__aeabi_dsub+0x710>)
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x45e>
 8001fa4:	e15e      	b.n	8002264 <__aeabi_dsub+0x71c>
 8001fa6:	4666      	mov	r6, ip
 8001fa8:	2f38      	cmp	r7, #56	@ 0x38
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dsub+0x466>
 8001fac:	e0b4      	b.n	8002118 <__aeabi_dsub+0x5d0>
 8001fae:	2001      	movs	r0, #1
 8001fb0:	1a17      	subs	r7, r2, r0
 8001fb2:	42ba      	cmp	r2, r7
 8001fb4:	4192      	sbcs	r2, r2
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	4252      	negs	r2, r2
 8001fba:	464d      	mov	r5, r9
 8001fbc:	1a9c      	subs	r4, r3, r2
 8001fbe:	e620      	b.n	8001c02 <__aeabi_dsub+0xba>
 8001fc0:	0767      	lsls	r7, r4, #29
 8001fc2:	08c0      	lsrs	r0, r0, #3
 8001fc4:	4307      	orrs	r7, r0
 8001fc6:	08e5      	lsrs	r5, r4, #3
 8001fc8:	e6ba      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001fca:	001f      	movs	r7, r3
 8001fcc:	4659      	mov	r1, fp
 8001fce:	3f20      	subs	r7, #32
 8001fd0:	40f9      	lsrs	r1, r7
 8001fd2:	000f      	movs	r7, r1
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x49c>
 8001fd8:	2140      	movs	r1, #64	@ 0x40
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	4659      	mov	r1, fp
 8001fde:	4099      	lsls	r1, r3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	4193      	sbcs	r3, r2
 8001fea:	431f      	orrs	r7, r3
 8001fec:	e604      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001fee:	1aeb      	subs	r3, r5, r3
 8001ff0:	4d9b      	ldr	r5, [pc, #620]	@ (8002260 <__aeabi_dsub+0x718>)
 8001ff2:	4015      	ands	r5, r2
 8001ff4:	076f      	lsls	r7, r5, #29
 8001ff6:	08ed      	lsrs	r5, r5, #3
 8001ff8:	032c      	lsls	r4, r5, #12
 8001ffa:	055d      	lsls	r5, r3, #21
 8001ffc:	0b24      	lsrs	r4, r4, #12
 8001ffe:	0d6d      	lsrs	r5, r5, #21
 8002000:	e736      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002002:	4d95      	ldr	r5, [pc, #596]	@ (8002258 <__aeabi_dsub+0x710>)
 8002004:	42ab      	cmp	r3, r5
 8002006:	d100      	bne.n	800200a <__aeabi_dsub+0x4c2>
 8002008:	e0d6      	b.n	80021b8 <__aeabi_dsub+0x670>
 800200a:	1882      	adds	r2, r0, r2
 800200c:	0021      	movs	r1, r4
 800200e:	4282      	cmp	r2, r0
 8002010:	4180      	sbcs	r0, r0
 8002012:	4459      	add	r1, fp
 8002014:	4240      	negs	r0, r0
 8002016:	1808      	adds	r0, r1, r0
 8002018:	07c7      	lsls	r7, r0, #31
 800201a:	0852      	lsrs	r2, r2, #1
 800201c:	4317      	orrs	r7, r2
 800201e:	0844      	lsrs	r4, r0, #1
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x4de>
 8002024:	e185      	b.n	8002332 <__aeabi_dsub+0x7ea>
 8002026:	220f      	movs	r2, #15
 8002028:	001d      	movs	r5, r3
 800202a:	403a      	ands	r2, r7
 800202c:	2a04      	cmp	r2, #4
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x4ea>
 8002030:	e61a      	b.n	8001c68 <__aeabi_dsub+0x120>
 8002032:	08ff      	lsrs	r7, r7, #3
 8002034:	0764      	lsls	r4, r4, #29
 8002036:	4327      	orrs	r7, r4
 8002038:	0905      	lsrs	r5, r0, #4
 800203a:	e7dd      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800203c:	465b      	mov	r3, fp
 800203e:	08d2      	lsrs	r2, r2, #3
 8002040:	075f      	lsls	r7, r3, #29
 8002042:	4317      	orrs	r7, r2
 8002044:	08dd      	lsrs	r5, r3, #3
 8002046:	e67b      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002048:	2700      	movs	r7, #0
 800204a:	2400      	movs	r4, #0
 800204c:	e710      	b.n	8001e70 <__aeabi_dsub+0x328>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x50c>
 8002052:	e0d6      	b.n	8002202 <__aeabi_dsub+0x6ba>
 8002054:	2900      	cmp	r1, #0
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x512>
 8002058:	e12f      	b.n	80022ba <__aeabi_dsub+0x772>
 800205a:	2480      	movs	r4, #128	@ 0x80
 800205c:	2600      	movs	r6, #0
 800205e:	4d7e      	ldr	r5, [pc, #504]	@ (8002258 <__aeabi_dsub+0x710>)
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	e705      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002064:	4666      	mov	r6, ip
 8002066:	465c      	mov	r4, fp
 8002068:	08d0      	lsrs	r0, r2, #3
 800206a:	e717      	b.n	8001e9c <__aeabi_dsub+0x354>
 800206c:	465b      	mov	r3, fp
 800206e:	1a17      	subs	r7, r2, r0
 8002070:	42ba      	cmp	r2, r7
 8002072:	4192      	sbcs	r2, r2
 8002074:	1b1c      	subs	r4, r3, r4
 8002076:	2601      	movs	r6, #1
 8002078:	4663      	mov	r3, ip
 800207a:	4252      	negs	r2, r2
 800207c:	1aa4      	subs	r4, r4, r2
 800207e:	401e      	ands	r6, r3
 8002080:	e5c4      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8002082:	1883      	adds	r3, r0, r2
 8002084:	4283      	cmp	r3, r0
 8002086:	4180      	sbcs	r0, r0
 8002088:	445c      	add	r4, fp
 800208a:	4240      	negs	r0, r0
 800208c:	1825      	adds	r5, r4, r0
 800208e:	022a      	lsls	r2, r5, #8
 8002090:	d400      	bmi.n	8002094 <__aeabi_dsub+0x54c>
 8002092:	e0da      	b.n	800224a <__aeabi_dsub+0x702>
 8002094:	4a72      	ldr	r2, [pc, #456]	@ (8002260 <__aeabi_dsub+0x718>)
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	4015      	ands	r5, r2
 800209a:	07ea      	lsls	r2, r5, #31
 800209c:	431a      	orrs	r2, r3
 800209e:	0869      	lsrs	r1, r5, #1
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x55e>
 80020a4:	e14a      	b.n	800233c <__aeabi_dsub+0x7f4>
 80020a6:	230f      	movs	r3, #15
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x568>
 80020ae:	e0fc      	b.n	80022aa <__aeabi_dsub+0x762>
 80020b0:	1d17      	adds	r7, r2, #4
 80020b2:	4297      	cmp	r7, r2
 80020b4:	41a4      	sbcs	r4, r4
 80020b6:	4264      	negs	r4, r4
 80020b8:	2502      	movs	r5, #2
 80020ba:	1864      	adds	r4, r4, r1
 80020bc:	e6ec      	b.n	8001e98 <__aeabi_dsub+0x350>
 80020be:	4647      	mov	r7, r8
 80020c0:	001c      	movs	r4, r3
 80020c2:	431f      	orrs	r7, r3
 80020c4:	d000      	beq.n	80020c8 <__aeabi_dsub+0x580>
 80020c6:	e743      	b.n	8001f50 <__aeabi_dsub+0x408>
 80020c8:	2600      	movs	r6, #0
 80020ca:	2500      	movs	r5, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6cf      	b.n	8001e70 <__aeabi_dsub+0x328>
 80020d0:	08c0      	lsrs	r0, r0, #3
 80020d2:	0767      	lsls	r7, r4, #29
 80020d4:	4307      	orrs	r7, r0
 80020d6:	08e5      	lsrs	r5, r4, #3
 80020d8:	e632      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80020da:	1a87      	subs	r7, r0, r2
 80020dc:	465b      	mov	r3, fp
 80020de:	42b8      	cmp	r0, r7
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	1ae4      	subs	r4, r4, r3
 80020e4:	4240      	negs	r0, r0
 80020e6:	1a24      	subs	r4, r4, r0
 80020e8:	0223      	lsls	r3, r4, #8
 80020ea:	d428      	bmi.n	800213e <__aeabi_dsub+0x5f6>
 80020ec:	0763      	lsls	r3, r4, #29
 80020ee:	08ff      	lsrs	r7, r7, #3
 80020f0:	431f      	orrs	r7, r3
 80020f2:	08e5      	lsrs	r5, r4, #3
 80020f4:	2301      	movs	r3, #1
 80020f6:	e77f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x5b6>
 80020fc:	e673      	b.n	8001de6 <__aeabi_dsub+0x29e>
 80020fe:	464b      	mov	r3, r9
 8002100:	1b5f      	subs	r7, r3, r5
 8002102:	003b      	movs	r3, r7
 8002104:	2d00      	cmp	r5, #0
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x5c2>
 8002108:	e742      	b.n	8001f90 <__aeabi_dsub+0x448>
 800210a:	2f38      	cmp	r7, #56	@ 0x38
 800210c:	dd00      	ble.n	8002110 <__aeabi_dsub+0x5c8>
 800210e:	e0ec      	b.n	80022ea <__aeabi_dsub+0x7a2>
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	000e      	movs	r6, r1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431c      	orrs	r4, r3
 8002118:	2f1f      	cmp	r7, #31
 800211a:	dc25      	bgt.n	8002168 <__aeabi_dsub+0x620>
 800211c:	2520      	movs	r5, #32
 800211e:	0023      	movs	r3, r4
 8002120:	1bed      	subs	r5, r5, r7
 8002122:	0001      	movs	r1, r0
 8002124:	40a8      	lsls	r0, r5
 8002126:	40ab      	lsls	r3, r5
 8002128:	40f9      	lsrs	r1, r7
 800212a:	1e45      	subs	r5, r0, #1
 800212c:	41a8      	sbcs	r0, r5
 800212e:	430b      	orrs	r3, r1
 8002130:	40fc      	lsrs	r4, r7
 8002132:	4318      	orrs	r0, r3
 8002134:	465b      	mov	r3, fp
 8002136:	1b1b      	subs	r3, r3, r4
 8002138:	469b      	mov	fp, r3
 800213a:	e739      	b.n	8001fb0 <__aeabi_dsub+0x468>
 800213c:	4666      	mov	r6, ip
 800213e:	2501      	movs	r5, #1
 8002140:	e562      	b.n	8001c08 <__aeabi_dsub+0xc0>
 8002142:	001f      	movs	r7, r3
 8002144:	4659      	mov	r1, fp
 8002146:	3f20      	subs	r7, #32
 8002148:	40f9      	lsrs	r1, r7
 800214a:	468c      	mov	ip, r1
 800214c:	2b20      	cmp	r3, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x614>
 8002150:	2740      	movs	r7, #64	@ 0x40
 8002152:	4659      	mov	r1, fp
 8002154:	1afb      	subs	r3, r7, r3
 8002156:	4099      	lsls	r1, r3
 8002158:	430a      	orrs	r2, r1
 800215a:	4692      	mov	sl, r2
 800215c:	4657      	mov	r7, sl
 800215e:	1e7b      	subs	r3, r7, #1
 8002160:	419f      	sbcs	r7, r3
 8002162:	4663      	mov	r3, ip
 8002164:	431f      	orrs	r7, r3
 8002166:	e5c1      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8002168:	003b      	movs	r3, r7
 800216a:	0025      	movs	r5, r4
 800216c:	3b20      	subs	r3, #32
 800216e:	40dd      	lsrs	r5, r3
 8002170:	2f20      	cmp	r7, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x636>
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	1bdb      	subs	r3, r3, r7
 8002178:	409c      	lsls	r4, r3
 800217a:	4320      	orrs	r0, r4
 800217c:	4680      	mov	r8, r0
 800217e:	4640      	mov	r0, r8
 8002180:	1e43      	subs	r3, r0, #1
 8002182:	4198      	sbcs	r0, r3
 8002184:	4328      	orrs	r0, r5
 8002186:	e713      	b.n	8001fb0 <__aeabi_dsub+0x468>
 8002188:	2900      	cmp	r1, #0
 800218a:	d09d      	beq.n	80020c8 <__aeabi_dsub+0x580>
 800218c:	2601      	movs	r6, #1
 800218e:	4663      	mov	r3, ip
 8002190:	465c      	mov	r4, fp
 8002192:	4690      	mov	r8, r2
 8002194:	401e      	ands	r6, r3
 8002196:	e6db      	b.n	8001f50 <__aeabi_dsub+0x408>
 8002198:	1a17      	subs	r7, r2, r0
 800219a:	465b      	mov	r3, fp
 800219c:	42ba      	cmp	r2, r7
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1b1c      	subs	r4, r3, r4
 80021a2:	4252      	negs	r2, r2
 80021a4:	1aa4      	subs	r4, r4, r2
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	d4c8      	bmi.n	800213c <__aeabi_dsub+0x5f4>
 80021aa:	0763      	lsls	r3, r4, #29
 80021ac:	08ff      	lsrs	r7, r7, #3
 80021ae:	431f      	orrs	r7, r3
 80021b0:	4666      	mov	r6, ip
 80021b2:	2301      	movs	r3, #1
 80021b4:	08e5      	lsrs	r5, r4, #3
 80021b6:	e71f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80021b8:	001d      	movs	r5, r3
 80021ba:	2400      	movs	r4, #0
 80021bc:	2700      	movs	r7, #0
 80021be:	e657      	b.n	8001e70 <__aeabi_dsub+0x328>
 80021c0:	465c      	mov	r4, fp
 80021c2:	08d0      	lsrs	r0, r2, #3
 80021c4:	e66a      	b.n	8001e9c <__aeabi_dsub+0x354>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x684>
 80021ca:	e737      	b.n	800203c <__aeabi_dsub+0x4f4>
 80021cc:	4653      	mov	r3, sl
 80021ce:	08c0      	lsrs	r0, r0, #3
 80021d0:	0767      	lsls	r7, r4, #29
 80021d2:	4307      	orrs	r7, r0
 80021d4:	08e5      	lsrs	r5, r4, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x694>
 80021da:	e5b1      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	421d      	tst	r5, r3
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x6ae>
 80021e4:	4659      	mov	r1, fp
 80021e6:	08c8      	lsrs	r0, r1, #3
 80021e8:	4218      	tst	r0, r3
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x6ae>
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	0749      	lsls	r1, r1, #29
 80021f0:	430a      	orrs	r2, r1
 80021f2:	0017      	movs	r7, r2
 80021f4:	0005      	movs	r5, r0
 80021f6:	0f7b      	lsrs	r3, r7, #29
 80021f8:	00ff      	lsls	r7, r7, #3
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	075b      	lsls	r3, r3, #29
 80021fe:	431f      	orrs	r7, r3
 8002200:	e59e      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002202:	08c0      	lsrs	r0, r0, #3
 8002204:	0763      	lsls	r3, r4, #29
 8002206:	4318      	orrs	r0, r3
 8002208:	08e5      	lsrs	r5, r4, #3
 800220a:	2900      	cmp	r1, #0
 800220c:	d053      	beq.n	80022b6 <__aeabi_dsub+0x76e>
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	421d      	tst	r5, r3
 8002214:	d00a      	beq.n	800222c <__aeabi_dsub+0x6e4>
 8002216:	4659      	mov	r1, fp
 8002218:	08cc      	lsrs	r4, r1, #3
 800221a:	421c      	tst	r4, r3
 800221c:	d106      	bne.n	800222c <__aeabi_dsub+0x6e4>
 800221e:	2601      	movs	r6, #1
 8002220:	4663      	mov	r3, ip
 8002222:	0025      	movs	r5, r4
 8002224:	08d0      	lsrs	r0, r2, #3
 8002226:	0749      	lsls	r1, r1, #29
 8002228:	4308      	orrs	r0, r1
 800222a:	401e      	ands	r6, r3
 800222c:	0f47      	lsrs	r7, r0, #29
 800222e:	00c0      	lsls	r0, r0, #3
 8002230:	08c0      	lsrs	r0, r0, #3
 8002232:	077f      	lsls	r7, r7, #29
 8002234:	4307      	orrs	r7, r0
 8002236:	e583      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002238:	1883      	adds	r3, r0, r2
 800223a:	4293      	cmp	r3, r2
 800223c:	4192      	sbcs	r2, r2
 800223e:	445c      	add	r4, fp
 8002240:	4252      	negs	r2, r2
 8002242:	18a5      	adds	r5, r4, r2
 8002244:	022a      	lsls	r2, r5, #8
 8002246:	d500      	bpl.n	800224a <__aeabi_dsub+0x702>
 8002248:	e724      	b.n	8002094 <__aeabi_dsub+0x54c>
 800224a:	076f      	lsls	r7, r5, #29
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	431f      	orrs	r7, r3
 8002250:	08ed      	lsrs	r5, r5, #3
 8002252:	2301      	movs	r3, #1
 8002254:	e6d0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	000007fe 	.word	0x000007fe
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	465b      	mov	r3, fp
 8002266:	08d2      	lsrs	r2, r2, #3
 8002268:	075f      	lsls	r7, r3, #29
 800226a:	4666      	mov	r6, ip
 800226c:	4317      	orrs	r7, r2
 800226e:	08dd      	lsrs	r5, r3, #3
 8002270:	e566      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002272:	0025      	movs	r5, r4
 8002274:	3b20      	subs	r3, #32
 8002276:	40dd      	lsrs	r5, r3
 8002278:	4663      	mov	r3, ip
 800227a:	2b20      	cmp	r3, #32
 800227c:	d005      	beq.n	800228a <__aeabi_dsub+0x742>
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	4661      	mov	r1, ip
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	409c      	lsls	r4, r3
 8002286:	4320      	orrs	r0, r4
 8002288:	4680      	mov	r8, r0
 800228a:	4647      	mov	r7, r8
 800228c:	1e7b      	subs	r3, r7, #1
 800228e:	419f      	sbcs	r7, r3
 8002290:	432f      	orrs	r7, r5
 8002292:	e5a0      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002294:	2120      	movs	r1, #32
 8002296:	2700      	movs	r7, #0
 8002298:	1a09      	subs	r1, r1, r0
 800229a:	e4d2      	b.n	8001c42 <__aeabi_dsub+0xfa>
 800229c:	2f00      	cmp	r7, #0
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x75a>
 80022a0:	e713      	b.n	80020ca <__aeabi_dsub+0x582>
 80022a2:	465c      	mov	r4, fp
 80022a4:	0017      	movs	r7, r2
 80022a6:	2500      	movs	r5, #0
 80022a8:	e5f6      	b.n	8001e98 <__aeabi_dsub+0x350>
 80022aa:	08d7      	lsrs	r7, r2, #3
 80022ac:	0749      	lsls	r1, r1, #29
 80022ae:	2302      	movs	r3, #2
 80022b0:	430f      	orrs	r7, r1
 80022b2:	092d      	lsrs	r5, r5, #4
 80022b4:	e6a0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80022b6:	0007      	movs	r7, r0
 80022b8:	e542      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022ba:	465b      	mov	r3, fp
 80022bc:	2601      	movs	r6, #1
 80022be:	075f      	lsls	r7, r3, #29
 80022c0:	08dd      	lsrs	r5, r3, #3
 80022c2:	4663      	mov	r3, ip
 80022c4:	08d2      	lsrs	r2, r2, #3
 80022c6:	4317      	orrs	r7, r2
 80022c8:	401e      	ands	r6, r3
 80022ca:	e539      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022cc:	465b      	mov	r3, fp
 80022ce:	08d2      	lsrs	r2, r2, #3
 80022d0:	075f      	lsls	r7, r3, #29
 80022d2:	4317      	orrs	r7, r2
 80022d4:	08dd      	lsrs	r5, r3, #3
 80022d6:	e533      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002354 <__aeabi_dsub+0x80c>)
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	4022      	ands	r2, r4
 80022de:	0757      	lsls	r7, r2, #29
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	2501      	movs	r5, #1
 80022e4:	431f      	orrs	r7, r3
 80022e6:	0b14      	lsrs	r4, r2, #12
 80022e8:	e5c2      	b.n	8001e70 <__aeabi_dsub+0x328>
 80022ea:	000e      	movs	r6, r1
 80022ec:	2001      	movs	r0, #1
 80022ee:	e65f      	b.n	8001fb0 <__aeabi_dsub+0x468>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <__aeabi_dsub+0x7c8>
 80022f4:	464b      	mov	r3, r9
 80022f6:	1b5b      	subs	r3, r3, r5
 80022f8:	469c      	mov	ip, r3
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x7b8>
 80022fe:	e548      	b.n	8001d92 <__aeabi_dsub+0x24a>
 8002300:	2701      	movs	r7, #1
 8002302:	2b38      	cmp	r3, #56	@ 0x38
 8002304:	dd00      	ble.n	8002308 <__aeabi_dsub+0x7c0>
 8002306:	e566      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431c      	orrs	r4, r3
 800230e:	e550      	b.n	8001db2 <__aeabi_dsub+0x26a>
 8002310:	1c6b      	adds	r3, r5, #1
 8002312:	4d11      	ldr	r5, [pc, #68]	@ (8002358 <__aeabi_dsub+0x810>)
 8002314:	422b      	tst	r3, r5
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x7d2>
 8002318:	e673      	b.n	8002002 <__aeabi_dsub+0x4ba>
 800231a:	4659      	mov	r1, fp
 800231c:	0023      	movs	r3, r4
 800231e:	4311      	orrs	r1, r2
 8002320:	468a      	mov	sl, r1
 8002322:	4303      	orrs	r3, r0
 8002324:	e600      	b.n	8001f28 <__aeabi_dsub+0x3e0>
 8002326:	0767      	lsls	r7, r4, #29
 8002328:	08c0      	lsrs	r0, r0, #3
 800232a:	2300      	movs	r3, #0
 800232c:	4307      	orrs	r7, r0
 800232e:	08e5      	lsrs	r5, r4, #3
 8002330:	e662      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002332:	0764      	lsls	r4, r4, #29
 8002334:	08ff      	lsrs	r7, r7, #3
 8002336:	4327      	orrs	r7, r4
 8002338:	0905      	lsrs	r5, r0, #4
 800233a:	e65d      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800233c:	08d2      	lsrs	r2, r2, #3
 800233e:	0749      	lsls	r1, r1, #29
 8002340:	4311      	orrs	r1, r2
 8002342:	000f      	movs	r7, r1
 8002344:	2302      	movs	r3, #2
 8002346:	092d      	lsrs	r5, r5, #4
 8002348:	e656      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800234a:	0007      	movs	r7, r0
 800234c:	e5a4      	b.n	8001e98 <__aeabi_dsub+0x350>
 800234e:	0038      	movs	r0, r7
 8002350:	e48f      	b.n	8001c72 <__aeabi_dsub+0x12a>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	ff7fffff 	.word	0xff7fffff
 8002358:	000007fe 	.word	0x000007fe

0800235c <__aeabi_dcmpun>:
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	46c6      	mov	lr, r8
 8002360:	031e      	lsls	r6, r3, #12
 8002362:	0b36      	lsrs	r6, r6, #12
 8002364:	46b0      	mov	r8, r6
 8002366:	4e0d      	ldr	r6, [pc, #52]	@ (800239c <__aeabi_dcmpun+0x40>)
 8002368:	030c      	lsls	r4, r1, #12
 800236a:	004d      	lsls	r5, r1, #1
 800236c:	005f      	lsls	r7, r3, #1
 800236e:	b500      	push	{lr}
 8002370:	0b24      	lsrs	r4, r4, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	0d7f      	lsrs	r7, r7, #21
 8002376:	42b5      	cmp	r5, r6
 8002378:	d00b      	beq.n	8002392 <__aeabi_dcmpun+0x36>
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <__aeabi_dcmpun+0x40>)
 800237c:	2000      	movs	r0, #0
 800237e:	428f      	cmp	r7, r1
 8002380:	d104      	bne.n	800238c <__aeabi_dcmpun+0x30>
 8002382:	4646      	mov	r6, r8
 8002384:	4316      	orrs	r6, r2
 8002386:	0030      	movs	r0, r6
 8002388:	1e43      	subs	r3, r0, #1
 800238a:	4198      	sbcs	r0, r3
 800238c:	bc80      	pop	{r7}
 800238e:	46b8      	mov	r8, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002392:	4304      	orrs	r4, r0
 8002394:	2001      	movs	r0, #1
 8002396:	2c00      	cmp	r4, #0
 8002398:	d1f8      	bne.n	800238c <__aeabi_dcmpun+0x30>
 800239a:	e7ee      	b.n	800237a <__aeabi_dcmpun+0x1e>
 800239c:	000007ff 	.word	0x000007ff

080023a0 <__aeabi_d2iz>:
 80023a0:	000b      	movs	r3, r1
 80023a2:	0002      	movs	r2, r0
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d16      	ldr	r5, [pc, #88]	@ (8002400 <__aeabi_d2iz+0x60>)
 80023a8:	030c      	lsls	r4, r1, #12
 80023aa:	b082      	sub	sp, #8
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0fde      	lsrs	r6, r3, #31
 80023ba:	42a9      	cmp	r1, r5
 80023bc:	dd04      	ble.n	80023c8 <__aeabi_d2iz+0x28>
 80023be:	4811      	ldr	r0, [pc, #68]	@ (8002404 <__aeabi_d2iz+0x64>)
 80023c0:	4281      	cmp	r1, r0
 80023c2:	dd03      	ble.n	80023cc <__aeabi_d2iz+0x2c>
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <__aeabi_d2iz+0x68>)
 80023c6:	18f0      	adds	r0, r6, r3
 80023c8:	b002      	add	sp, #8
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	2080      	movs	r0, #128	@ 0x80
 80023ce:	0340      	lsls	r0, r0, #13
 80023d0:	4320      	orrs	r0, r4
 80023d2:	4c0e      	ldr	r4, [pc, #56]	@ (800240c <__aeabi_d2iz+0x6c>)
 80023d4:	1a64      	subs	r4, r4, r1
 80023d6:	2c1f      	cmp	r4, #31
 80023d8:	dd08      	ble.n	80023ec <__aeabi_d2iz+0x4c>
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <__aeabi_d2iz+0x70>)
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	40d8      	lsrs	r0, r3
 80023e0:	0003      	movs	r3, r0
 80023e2:	4258      	negs	r0, r3
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	d1ef      	bne.n	80023c8 <__aeabi_d2iz+0x28>
 80023e8:	0018      	movs	r0, r3
 80023ea:	e7ed      	b.n	80023c8 <__aeabi_d2iz+0x28>
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <__aeabi_d2iz+0x74>)
 80023ee:	9a00      	ldr	r2, [sp, #0]
 80023f0:	469c      	mov	ip, r3
 80023f2:	0003      	movs	r3, r0
 80023f4:	4461      	add	r1, ip
 80023f6:	408b      	lsls	r3, r1
 80023f8:	40e2      	lsrs	r2, r4
 80023fa:	4313      	orrs	r3, r2
 80023fc:	e7f1      	b.n	80023e2 <__aeabi_d2iz+0x42>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	000003fe 	.word	0x000003fe
 8002404:	0000041d 	.word	0x0000041d
 8002408:	7fffffff 	.word	0x7fffffff
 800240c:	00000433 	.word	0x00000433
 8002410:	00000413 	.word	0x00000413
 8002414:	fffffbed 	.word	0xfffffbed

08002418 <__aeabi_i2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2800      	cmp	r0, #0
 800241c:	d016      	beq.n	800244c <__aeabi_i2d+0x34>
 800241e:	17c3      	asrs	r3, r0, #31
 8002420:	18c5      	adds	r5, r0, r3
 8002422:	405d      	eors	r5, r3
 8002424:	0fc4      	lsrs	r4, r0, #31
 8002426:	0028      	movs	r0, r5
 8002428:	f000 f848 	bl	80024bc <__clzsi2>
 800242c:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <__aeabi_i2d+0x58>)
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	280a      	cmp	r0, #10
 8002436:	dc14      	bgt.n	8002462 <__aeabi_i2d+0x4a>
 8002438:	0002      	movs	r2, r0
 800243a:	002e      	movs	r6, r5
 800243c:	3215      	adds	r2, #21
 800243e:	4096      	lsls	r6, r2
 8002440:	220b      	movs	r2, #11
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d5      	lsrs	r5, r2
 8002446:	032d      	lsls	r5, r5, #12
 8002448:	0b2d      	lsrs	r5, r5, #12
 800244a:	e003      	b.n	8002454 <__aeabi_i2d+0x3c>
 800244c:	2400      	movs	r4, #0
 800244e:	2300      	movs	r3, #0
 8002450:	2500      	movs	r5, #0
 8002452:	2600      	movs	r6, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	432b      	orrs	r3, r5
 8002458:	07e4      	lsls	r4, r4, #31
 800245a:	4323      	orrs	r3, r4
 800245c:	0030      	movs	r0, r6
 800245e:	0019      	movs	r1, r3
 8002460:	bd70      	pop	{r4, r5, r6, pc}
 8002462:	380b      	subs	r0, #11
 8002464:	4085      	lsls	r5, r0
 8002466:	032d      	lsls	r5, r5, #12
 8002468:	2600      	movs	r6, #0
 800246a:	0b2d      	lsrs	r5, r5, #12
 800246c:	e7f2      	b.n	8002454 <__aeabi_i2d+0x3c>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	0000041e 	.word	0x0000041e

08002474 <__aeabi_ui2d>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e04      	subs	r4, r0, #0
 8002478:	d010      	beq.n	800249c <__aeabi_ui2d+0x28>
 800247a:	f000 f81f 	bl	80024bc <__clzsi2>
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <__aeabi_ui2d+0x44>)
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	280a      	cmp	r0, #10
 8002488:	dc0f      	bgt.n	80024aa <__aeabi_ui2d+0x36>
 800248a:	220b      	movs	r2, #11
 800248c:	0021      	movs	r1, r4
 800248e:	1a12      	subs	r2, r2, r0
 8002490:	40d1      	lsrs	r1, r2
 8002492:	3015      	adds	r0, #21
 8002494:	030a      	lsls	r2, r1, #12
 8002496:	4084      	lsls	r4, r0
 8002498:	0b12      	lsrs	r2, r2, #12
 800249a:	e001      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	4313      	orrs	r3, r2
 80024a4:	0020      	movs	r0, r4
 80024a6:	0019      	movs	r1, r3
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	0022      	movs	r2, r4
 80024ac:	380b      	subs	r0, #11
 80024ae:	4082      	lsls	r2, r0
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	2400      	movs	r4, #0
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	e7f3      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	@ (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <Oled_init>:
#include <stdio.h>
#include "OLED_WS0010.h"

Oled_HandleTypeDef Oled_init(GPIO_TypeDef* rs_port, uint16_t rs_pin,
		GPIO_TypeDef* en_port, uint16_t en_pin, GPIO_TypeDef* data_port[],
		uint16_t data_pin[]) {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
	Oled_HandleTypeDef oled;
	oled.rs_pin = rs_pin;
 8002508:	2110      	movs	r1, #16
 800250a:	187b      	adds	r3, r7, r1
 800250c:	1dba      	adds	r2, r7, #6
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	809a      	strh	r2, [r3, #4]
	oled.rs_port = rs_port;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
	oled.enable_pin = en_pin;
 8002518:	187a      	adds	r2, r7, r1
 800251a:	2338      	movs	r3, #56	@ 0x38
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	8193      	strh	r3, [r2, #12]
	oled.enable_port = en_port;
 8002522:	000c      	movs	r4, r1
 8002524:	193b      	adds	r3, r7, r4
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]
	oled.data_pin = data_pin;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800252e:	615a      	str	r2, [r3, #20]
	oled.data_port = data_port;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	611a      	str	r2, [r3, #16]

	Oled_writeCommand(&oled, 0x33);
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2133      	movs	r1, #51	@ 0x33
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f975 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x32);
 8002540:	193b      	adds	r3, r7, r4
 8002542:	2132      	movs	r1, #50	@ 0x32
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f970 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x28);
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2128      	movs	r1, #40	@ 0x28
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f96b 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002554:	193b      	adds	r3, r7, r4
 8002556:	2101      	movs	r1, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f966 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x08 | 0x04);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	210c      	movs	r1, #12
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f961 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x02);
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2106      	movs	r1, #6
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f95c 	bl	800282a <Oled_writeCommand>

	//WS0010
	Oled_writeCommand(&oled, 0x08);
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2108      	movs	r1, #8
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f957 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x17);
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2117      	movs	r1, #23
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f952 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2101      	movs	r1, #1
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f94d 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x08);
 8002590:	193b      	adds	r3, r7, r4
 8002592:	210c      	movs	r1, #12
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f948 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, OLED_CLEAR_DISPLAY);
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f943 	bl	800282a <Oled_writeCommand>

	return oled;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025aa:	c313      	stmia	r3!, {r0, r1, r4}
 80025ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ae:	c313      	stmia	r3!, {r0, r1, r4}
}
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00b      	add	sp, #44	@ 0x2c
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <refresh_displayed_info>:
void refresh_displayed_info( Oled_HandleTypeDef *oled, double set_temp_inside, double current_temp_inside){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b08d      	sub	sp, #52	@ 0x34
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	603a      	str	r2, [r7, #0]
 80025c2:	607b      	str	r3, [r7, #4]
	char set_temp_inside_string [8] = {0};
 80025c4:	2420      	movs	r4, #32
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00e f85e 	bl	8010690 <memset>
	char current_temp_inside_string [8] = {0};
 80025d4:	2518      	movs	r5, #24
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	0018      	movs	r0, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f00e f856 	bl	8010690 <memset>
	char celsius_unit[] = {223, 'C', '\0'}; // 223 stands for °
 80025e4:	2614      	movs	r6, #20
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <refresh_displayed_info+0xe4>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	8019      	strh	r1, [r3, #0]
 80025ee:	7892      	ldrb	r2, [r2, #2]
 80025f0:	709a      	strb	r2, [r3, #2]

	Oled_cursor(oled, 0, 0);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f869 	bl	80026d0 <Oled_cursor>
	memset(set_temp_inside_string, (int)' ', 8);
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	2208      	movs	r2, #8
 8002602:	2120      	movs	r1, #32
 8002604:	0018      	movs	r0, r3
 8002606:	f00e f843 	bl	8010690 <memset>
	snprintf(set_temp_inside_string,8,"%.1lf",set_temp_inside);
 800260a:	4925      	ldr	r1, [pc, #148]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800260c:	1938      	adds	r0, r7, r4
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	000a      	movs	r2, r1
 8002618:	2108      	movs	r1, #8
 800261a:	f00d ffb7 	bl	801058c <sniprintf>
	Oled_string(oled, set_temp_inside_string);
 800261e:	193a      	adds	r2, r7, r4
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f886 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 0,6);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2206      	movs	r2, #6
 800262e:	2100      	movs	r1, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f84d 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002636:	19ba      	adds	r2, r7, r6
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f87a 	bl	8002736 <Oled_string>

	Oled_cursor(oled, 1, 0);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f841 	bl	80026d0 <Oled_cursor>
	memset(current_temp_inside_string, (int)' ', 8);
 800264e:	197b      	adds	r3, r7, r5
 8002650:	2208      	movs	r2, #8
 8002652:	2120      	movs	r1, #32
 8002654:	0018      	movs	r0, r3
 8002656:	f00e f81b 	bl	8010690 <memset>
	snprintf(current_temp_inside_string,8,"%.1lf",current_temp_inside);
 800265a:	4911      	ldr	r1, [pc, #68]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800265c:	1978      	adds	r0, r7, r5
 800265e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	9200      	str	r2, [sp, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	000a      	movs	r2, r1
 8002668:	2108      	movs	r1, #8
 800266a:	f00d ff8f 	bl	801058c <sniprintf>
	Oled_string(oled, current_temp_inside_string);
 800266e:	197a      	adds	r2, r7, r5
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f85e 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 1,6);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2206      	movs	r2, #6
 800267e:	2101      	movs	r1, #1
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f825 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002686:	19ba      	adds	r2, r7, r6
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f852 	bl	8002736 <Oled_string>
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b00b      	add	sp, #44	@ 0x2c
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	080132a0 	.word	0x080132a0
 80026a0:	08013298 	.word	0x08013298

080026a4 <Oled_resupply_power>:

void Oled_resupply_power(Oled_HandleTypeDef *oled){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	uint8_t command = OLED_PWRDWN;
 80026ac:	210f      	movs	r1, #15
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2213      	movs	r2, #19
 80026b2:	701a      	strb	r2, [r3, #0]
	Oled_writeCommand(oled,command);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f8b4 	bl	800282a <Oled_writeCommand>
	HAL_Delay(100);
 80026c2:	2064      	movs	r0, #100	@ 0x64
 80026c4:	f002 f818 	bl	80046f8 <HAL_Delay>
//	command = OLED_PWRUP;
//	Oled_writeCommand(oled,command);

}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <Oled_cursor>:
	char buf[17];
	sprintf(buf, "%d", value);
	Oled_string(oled, buf);
}

void Oled_cursor(Oled_HandleTypeDef *oled, uint8_t row, uint8_t col) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	1cfb      	adds	r3, r7, #3
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c0a      	adds	r2, r1, #0
 80026e6:	701a      	strb	r2, [r3, #0]
	uint8_t ROW[] = { 0x00, 0x40, 0x10, 0x50 };
 80026e8:	210c      	movs	r1, #12
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <Oled_cursor+0x48>)
 80026ee:	601a      	str	r2, [r3, #0]
	Oled_writeCommand(oled, 0x80 + ROW[row] + col);
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	5cd2      	ldrb	r2, [r2, r3]
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b80      	subs	r3, #128	@ 0x80
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f88e 	bl	800282a <Oled_writeCommand>
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	50104000 	.word	0x50104000

0800271c <Oled_clear>:

void Oled_blink(Oled_HandleTypeDef *oled) {
	Oled_writeCommand(oled, 0x08 | 0x04 | 0x02 | 0x01);
}

void Oled_clear(Oled_HandleTypeDef *oled) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	Oled_writeCommand(oled, OLED_CLEAR_DISPLAY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2101      	movs	r1, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f87e 	bl	800282a <Oled_writeCommand>
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <Oled_string>:
	if (0 <= y && y <= 1) {
		Oled_writeCommand(oled, 0x80 | y);
	}
}

void Oled_string(Oled_HandleTypeDef *oled, char * string) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	char temp;
	while ((temp = *string++)) {
 8002740:	e007      	b.n	8002752 <Oled_string+0x1c>
		Oled_writeData(oled, temp);
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f892 	bl	8002876 <Oled_writeData>
	while ((temp = *string++)) {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	603a      	str	r2, [r7, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	187a      	adds	r2, r7, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	7013      	strb	r3, [r2, #0]
 8002760:	187b      	adds	r3, r7, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ec      	bne.n	8002742 <Oled_string+0xc>
	}
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <Oled_write>:

void Oled_write(Oled_HandleTypeDef *oled, uint8_t data) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	000a      	movs	r2, r1
 800277c:	1cfb      	adds	r3, r7, #3
 800277e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(oled->data_port[0], oled->data_pin[0], data & (1 << 0));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	8819      	ldrh	r1, [r3, #0]
 800278c:	1cfb      	adds	r3, r7, #3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	f003 fae5 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[1], oled->data_pin[1], data & (1 << 1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	3304      	adds	r3, #4
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	3302      	adds	r3, #2
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	1cfb      	adds	r3, r7, #3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	001a      	movs	r2, r3
 80027b8:	f003 fad5 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[2], oled->data_pin[2], data & (1 << 2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	3308      	adds	r3, #8
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	3304      	adds	r3, #4
 80027ca:	8819      	ldrh	r1, [r3, #0]
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	f003 fac5 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[3], oled->data_pin[3], data & (1 << 3));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	3306      	adds	r3, #6
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	1cfb      	adds	r3, r7, #3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	f003 fab5 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	899b      	ldrh	r3, [r3, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	0019      	movs	r1, r3
 8002808:	f003 faad 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f001 ff73 	bl	80046f8 <HAL_Delay>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	899b      	ldrh	r3, [r3, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	0019      	movs	r1, r3
 800281e:	f003 faa2 	bl	8005d66 <HAL_GPIO_WritePin>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b002      	add	sp, #8
 8002828:	bd80      	pop	{r7, pc}

0800282a <Oled_writeCommand>:

void Oled_writeCommand(Oled_HandleTypeDef *oled, uint8_t command) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	000a      	movs	r2, r1
 8002834:	1cfb      	adds	r3, r7, #3
 8002836:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f003 fa8f 	bl	8005d66 <HAL_GPIO_WritePin>
	Oled_write(oled, (command >> 4));
 8002848:	1cfb      	adds	r3, r7, #3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff8c 	bl	8002772 <Oled_write>
	Oled_write(oled, command & 0x0F);
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ff82 	bl	8002772 <Oled_write>

}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <Oled_writeData>:

void Oled_writeData(Oled_HandleTypeDef *oled, uint8_t data) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	000a      	movs	r2, r1
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	0019      	movs	r1, r3
 8002890:	f003 fa69 	bl	8005d66 <HAL_GPIO_WritePin>
	Oled_write(oled, data >> 4);
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff66 	bl	8002772 <Oled_write>
	Oled_write(oled, data & 0x0F);
 80028a6:	1cfb      	adds	r3, r7, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220f      	movs	r2, #15
 80028ac:	4013      	ands	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff5c 	bl	8002772 <Oled_write>

}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <LT8722_Init>:
#include <stdint.h>
#include "main.h"
#include "lt8722.h"

int LT8722_Init(SPI_HandleTypeDef *hspi){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	// Initialization is done based on LT8722 datasheet provided steps

	// --- Step #1 Enable_REQ bit to 1 ---

	// Take the default SPIS_REG value and add 1 to [0] place
	uint8_t data_to_send[4] = {0x00, 0x0A, 0xA2, 0x15};
 80028cc:	2110      	movs	r1, #16
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <LT8722_Init+0x128>)
 80028d2:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_Command_Reg_Addr;
 80028d4:	200f      	movs	r0, #15
 80028d6:	183b      	adds	r3, r7, r0
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	1839      	adds	r1, r7, r0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	2304      	movs	r3, #4
 80028e4:	f000 fa20 	bl	8002d28 <write_lt8722_reg>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <LT8722_Init+0x2c>
		return 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e078      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #2 Set SPIS_DAC register to 0xFF00 0000
	data_to_send[0] = 0xFF;
 80028f0:	2110      	movs	r1, #16
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x00;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0x00;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x00;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	70da      	strb	r2, [r3, #3]
	reg = SPIS_DAC_Reg_Addr;
 800290a:	200f      	movs	r0, #15
 800290c:	183b      	adds	r3, r7, r0
 800290e:	2208      	movs	r2, #8
 8002910:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002912:	187a      	adds	r2, r7, r1
 8002914:	1839      	adds	r1, r7, r0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	2304      	movs	r3, #4
 800291a:	f000 fa05 	bl	8002d28 <write_lt8722_reg>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d001      	beq.n	8002926 <LT8722_Init+0x62>
		return 1;
 8002922:	2301      	movs	r3, #1
 8002924:	e05d      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #3 Clear SPI_Status register

	data_to_send[0] = 0x00;
 8002926:	2110      	movs	r1, #16
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	reg = SPIS_Status_Reg_Addr;
 800292e:	200f      	movs	r0, #15
 8002930:	183b      	adds	r3, r7, r0
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002936:	187a      	adds	r2, r7, r1
 8002938:	1839      	adds	r1, r7, r0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	2304      	movs	r3, #4
 800293e:	f000 f9f3 	bl	8002d28 <write_lt8722_reg>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <LT8722_Init+0x86>
		return 1;
 8002946:	2301      	movs	r3, #1
 8002948:	e04b      	b.n	80029e2 <LT8722_Init+0x11e>

	HAL_Delay(1); //Waiting for prebiased output condition to dissipate
 800294a:	2001      	movs	r0, #1
 800294c:	f001 fed4 	bl	80046f8 <HAL_Delay>

	// --- Step #4 Slowly turn down SPIS_DAC code to 0x0000 0000
	// This should be done not quicker than in 5 ms.

	reg = SPIS_DAC_Reg_Addr;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2208      	movs	r2, #8
 8002956:	701a      	strb	r2, [r3, #0]

	for(int i=1; i <= 17;i++){
 8002958:	2301      	movs	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e01b      	b.n	8002996 <LT8722_Init+0xd2>
		data_to_send[0] = 255 - 15*i;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	1c1a      	adds	r2, r3, #0
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	2110      	movs	r1, #16
 8002970:	187b      	adds	r3, r7, r1
 8002972:	701a      	strb	r2, [r3, #0]
		if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002974:	187a      	adds	r2, r7, r1
 8002976:	230f      	movs	r3, #15
 8002978:	18f9      	adds	r1, r7, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	2304      	movs	r3, #4
 800297e:	f000 f9d3 	bl	8002d28 <write_lt8722_reg>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <LT8722_Init+0xc6>
			return 1;
 8002986:	2301      	movs	r3, #1
 8002988:	e02b      	b.n	80029e2 <LT8722_Init+0x11e>
		HAL_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f001 feb4 	bl	80046f8 <HAL_Delay>
	for(int i=1; i <= 17;i++){
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b11      	cmp	r3, #17
 800299a:	dde0      	ble.n	800295e <LT8722_Init+0x9a>
	}

	// --- Step #5 Enable PWM switching by raising the SWEN pin and writing SWEN_REQ bit 1

	HAL_GPIO_WritePin(LT8722_SWEN_GPIO_Port,LT8722_SWEN_Pin, SET);
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4813      	ldr	r0, [pc, #76]	@ (80029f0 <LT8722_Init+0x12c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	0019      	movs	r1, r3
 80029a6:	f003 f9de 	bl	8005d66 <HAL_GPIO_WritePin>

	data_to_send[0] = 0x00;
 80029aa:	2110      	movs	r1, #16
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x0A;
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	220a      	movs	r2, #10
 80029b6:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0xA2;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	22a2      	movs	r2, #162	@ 0xa2
 80029bc:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x17;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2217      	movs	r2, #23
 80029c2:	70da      	strb	r2, [r3, #3]
	reg = SPIS_Command_Reg_Addr;
 80029c4:	200f      	movs	r0, #15
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80029cc:	187a      	adds	r2, r7, r1
 80029ce:	1839      	adds	r1, r7, r0
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	2304      	movs	r3, #4
 80029d4:	f000 f9a8 	bl	8002d28 <write_lt8722_reg>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <LT8722_Init+0x11c>
		return 1;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LT8722_Init+0x11e>

	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	15a20a00 	.word	0x15a20a00
 80029f0:	50000400 	.word	0x50000400

080029f4 <is_load_connected>:

int is_load_connected(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	// First we put some voltage on the output
	if(set_vout(hspi, 6.0) != 0)
 80029fe:	2200      	movs	r2, #0
 8002a00:	4b4f      	ldr	r3, [pc, #316]	@ (8002b40 <is_load_connected+0x14c>)
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	0008      	movs	r0, r1
 8002a06:	f000 f8a7 	bl	8002b58 <set_vout>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d001      	beq.n	8002a12 <is_load_connected+0x1e>
		return 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e091      	b.n	8002b36 <is_load_connected+0x142>

	// Change AMUX so that AOUT gives out V1P65
	uint8_t reg = SPIS_AMUX_Reg_Addr;
 8002a12:	210f      	movs	r1, #15
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	220e      	movs	r2, #14
 8002a18:	701a      	strb	r2, [r3, #0]
	uint8_t data_to_send = SPIS_AMUX_Reg_To_Read_V1P65_Val;
 8002a1a:	200e      	movs	r0, #14
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	2247      	movs	r2, #71	@ 0x47
 8002a20:	701a      	strb	r2, [r3, #0]
	if(write_lt8722_reg(hspi, &reg, &data_to_send, 1)!=0)
 8002a22:	183a      	adds	r2, r7, r0
 8002a24:	1879      	adds	r1, r7, r1
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 f97d 	bl	8002d28 <write_lt8722_reg>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d001      	beq.n	8002a36 <is_load_connected+0x42>
		return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e07f      	b.n	8002b36 <is_load_connected+0x142>

	// Read the V1P65
	HAL_ADC_Start(hadc);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 f9b5 	bl	8004da8 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK){}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	2301      	movs	r3, #1
 8002a42:	425a      	negs	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f002 fa37 	bl	8004ebc <HAL_ADC_PollForConversion>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d1f6      	bne.n	8002a40 <is_load_connected+0x4c>
	double V1P65 = HAL_ADC_GetValue(hadc) * 3.3 / 4096;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 fac5 	bl	8004fe4 <HAL_ADC_GetValue>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fd09 	bl	8002474 <__aeabi_ui2d>
 8002a62:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <is_load_connected+0x150>)
 8002a64:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <is_load_connected+0x154>)
 8002a66:	f7fe fd89 	bl	800157c <__aeabi_dmul>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	000b      	movs	r3, r1
 8002a6e:	0010      	movs	r0, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	2200      	movs	r2, #0
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <is_load_connected+0x158>)
 8002a76:	f7fe f947 	bl	8000d08 <__aeabi_ddiv>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	623a      	str	r2, [r7, #32]
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_ADC_Stop(hadc);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f002 f9dd 	bl	8004e44 <HAL_ADC_Stop>

	// Change AMUX so that AOUT gives out VIout
	data_to_send = SPIS_AMUX_Reg_To_Read_Iout_Val;
 8002a8a:	210e      	movs	r1, #14
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2244      	movs	r2, #68	@ 0x44
 8002a90:	701a      	strb	r2, [r3, #0]
	if(write_lt8722_reg(hspi, &reg, &data_to_send, 1)!=0)
 8002a92:	187a      	adds	r2, r7, r1
 8002a94:	230f      	movs	r3, #15
 8002a96:	18f9      	adds	r1, r7, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f000 f944 	bl	8002d28 <write_lt8722_reg>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <is_load_connected+0xb4>
		return 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e046      	b.n	8002b36 <is_load_connected+0x142>

	// Read the VIout
	HAL_ADC_Start(hadc);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f002 f97c 	bl	8004da8 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK){}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	425a      	negs	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	0011      	movs	r1, r2
 8002aba:	0018      	movs	r0, r3
 8002abc:	f002 f9fe 	bl	8004ebc <HAL_ADC_PollForConversion>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d1f6      	bne.n	8002ab2 <is_load_connected+0xbe>
	double VIOut = HAL_ADC_GetValue(hadc) * 3.3 / 4096;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f002 fa8c 	bl	8004fe4 <HAL_ADC_GetValue>
 8002acc:	0003      	movs	r3, r0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fcd0 	bl	8002474 <__aeabi_ui2d>
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b44 <is_load_connected+0x150>)
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <is_load_connected+0x154>)
 8002ad8:	f7fe fd50 	bl	800157c <__aeabi_dmul>
 8002adc:	0002      	movs	r2, r0
 8002ade:	000b      	movs	r3, r1
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <is_load_connected+0x158>)
 8002ae8:	f7fe f90e 	bl	8000d08 <__aeabi_ddiv>
 8002aec:	0002      	movs	r2, r0
 8002aee:	000b      	movs	r3, r1
 8002af0:	61ba      	str	r2, [r7, #24]
 8002af2:	61fb      	str	r3, [r7, #28]
	HAL_ADC_Stop(hadc);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f002 f9a4 	bl	8004e44 <HAL_ADC_Stop>

	// Calculate the current

	double Iout = (V1P65 - VIOut) * 8;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	6a38      	ldr	r0, [r7, #32]
 8002b02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b04:	f7ff f820 	bl	8001b48 <__aeabi_dsub>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	000b      	movs	r3, r1
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <is_load_connected+0x15c>)
 8002b14:	f7fe fd32 	bl	800157c <__aeabi_dmul>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	000b      	movs	r3, r1
 8002b1c:	613a      	str	r2, [r7, #16]
 8002b1e:	617b      	str	r3, [r7, #20]

	if (Iout >= 0.5){
 8002b20:	2200      	movs	r2, #0
 8002b22:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <is_load_connected+0x160>)
 8002b24:	6938      	ldr	r0, [r7, #16]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	f7fd fcb0 	bl	800048c <__aeabi_dcmpge>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <is_load_connected+0x140>
		return 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <is_load_connected+0x142>
	}
	return 0;
 8002b34:	2300      	movs	r3, #0

}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b00a      	add	sp, #40	@ 0x28
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	40180000 	.word	0x40180000
 8002b44:	66666666 	.word	0x66666666
 8002b48:	400a6666 	.word	0x400a6666
 8002b4c:	40b00000 	.word	0x40b00000
 8002b50:	40200000 	.word	0x40200000
 8002b54:	3fe00000 	.word	0x3fe00000

08002b58 <set_vout>:
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);

	return 0;
}

int set_vout(SPI_HandleTypeDef *hspi, double vout){
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	603a      	str	r2, [r7, #0]
 8002b62:	607b      	str	r3, [r7, #4]
	uint8_t SPIS_DAC_Code[4] = {0};
 8002b64:	2418      	movs	r4, #24
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_DAC_Reg_Addr;
 8002b6c:	2517      	movs	r5, #23
 8002b6e:	197b      	adds	r3, r7, r5
 8002b70:	2208      	movs	r2, #8
 8002b72:	701a      	strb	r2, [r3, #0]
	uint32_t code = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]

	if(vout > MAX_POS_Vout){
 8002b78:	4a65      	ldr	r2, [pc, #404]	@ (8002d10 <set_vout+0x1b8>)
 8002b7a:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <set_vout+0x1bc>)
 8002b7c:	6838      	ldr	r0, [r7, #0]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	f7fd fc7a 	bl	8000478 <__aeabi_dcmpgt>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d014      	beq.n	8002bb2 <set_vout+0x5a>
		SPIS_DAC_Code[0] = 0xFF;
 8002b88:	0021      	movs	r1, r4
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	22ff      	movs	r2, #255	@ 0xff
 8002b8e:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	227a      	movs	r2, #122	@ 0x7a
 8002b94:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2200      	movs	r2, #0
 8002b9a:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x000000FF));
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002ba2:	187a      	adds	r2, r7, r1
 8002ba4:	1979      	adds	r1, r7, r5
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	2304      	movs	r3, #4
 8002baa:	f000 f8bd 	bl	8002d28 <write_lt8722_reg>
		return 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e0a9      	b.n	8002d06 <set_vout+0x1ae>
	}
	if(vout > 0){
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	6838      	ldr	r0, [r7, #0]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	f7fd fc5d 	bl	8000478 <__aeabi_dcmpgt>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d041      	beq.n	8002c46 <set_vout+0xee>
		code = (MIN_POS_SPIS_DAC_Code & 0xFFFFFF) + ((MAX_POS_Vout-vout)/MAX_POS_Vout) * (0xFFFFFF - (MIN_POS_SPIS_DAC_Code & 0xFFFFFF));
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4852      	ldr	r0, [pc, #328]	@ (8002d10 <set_vout+0x1b8>)
 8002bc8:	4952      	ldr	r1, [pc, #328]	@ (8002d14 <set_vout+0x1bc>)
 8002bca:	f7fe ffbd 	bl	8001b48 <__aeabi_dsub>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	000b      	movs	r3, r1
 8002bd2:	0010      	movs	r0, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8002d10 <set_vout+0x1b8>)
 8002bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <set_vout+0x1bc>)
 8002bda:	f7fe f895 	bl	8000d08 <__aeabi_ddiv>
 8002bde:	0002      	movs	r2, r0
 8002be0:	000b      	movs	r3, r1
 8002be2:	0010      	movs	r0, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	22e0      	movs	r2, #224	@ 0xe0
 8002be8:	0612      	lsls	r2, r2, #24
 8002bea:	4b4b      	ldr	r3, [pc, #300]	@ (8002d18 <set_vout+0x1c0>)
 8002bec:	f7fe fcc6 	bl	800157c <__aeabi_dmul>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	000b      	movs	r3, r1
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4b48      	ldr	r3, [pc, #288]	@ (8002d1c <set_vout+0x1c4>)
 8002bfc:	f7fd fcbe 	bl	800057c <__aeabi_dadd>
 8002c00:	0002      	movs	r2, r0
 8002c02:	000b      	movs	r3, r1
 8002c04:	0010      	movs	r0, r2
 8002c06:	0019      	movs	r1, r3
 8002c08:	f7fd fc4a 	bl	80004a0 <__aeabi_d2uiz>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0xFF;
 8002c10:	2118      	movs	r1, #24
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	22ff      	movs	r2, #255	@ 0xff
 8002c16:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	0c1b      	lsrs	r3, r3, #16
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002c34:	187a      	adds	r2, r7, r1
 8002c36:	2317      	movs	r3, #23
 8002c38:	18f9      	adds	r1, r7, r3
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	f000 f873 	bl	8002d28 <write_lt8722_reg>
		return 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e05f      	b.n	8002d06 <set_vout+0x1ae>
	}
	if(vout < MAX_NEG_Vout){
 8002c46:	2200      	movs	r2, #0
 8002c48:	4b35      	ldr	r3, [pc, #212]	@ (8002d20 <set_vout+0x1c8>)
 8002c4a:	6838      	ldr	r0, [r7, #0]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	f7fd fbff 	bl	8000450 <__aeabi_dcmplt>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d015      	beq.n	8002c82 <set_vout+0x12a>
		SPIS_DAC_Code[0] = 0x00;
 8002c56:	2118      	movs	r1, #24
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	228b      	movs	r2, #139	@ 0x8b
 8002c62:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2200      	movs	r2, #0
 8002c68:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x000000FF));
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002c70:	187a      	adds	r2, r7, r1
 8002c72:	2317      	movs	r3, #23
 8002c74:	18f9      	adds	r1, r7, r3
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f000 f855 	bl	8002d28 <write_lt8722_reg>
		return 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e041      	b.n	8002d06 <set_vout+0x1ae>
	}
	if(vout < 0){
 8002c82:	2200      	movs	r2, #0
 8002c84:	2300      	movs	r3, #0
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	f7fd fbe1 	bl	8000450 <__aeabi_dcmplt>
 8002c8e:	1e03      	subs	r3, r0, #0
 8002c90:	d030      	beq.n	8002cf4 <set_vout+0x19c>
		code = (vout/MAX_NEG_Vout) * (MAX_NEG_SPIS_DAC_Code & 0x00FFFFFF);
 8002c92:	2200      	movs	r2, #0
 8002c94:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <set_vout+0x1c8>)
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	f7fe f835 	bl	8000d08 <__aeabi_ddiv>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	000b      	movs	r3, r1
 8002ca2:	0010      	movs	r0, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <set_vout+0x1cc>)
 8002caa:	f7fe fc67 	bl	800157c <__aeabi_dmul>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	000b      	movs	r3, r1
 8002cb2:	0010      	movs	r0, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	f7fd fbf3 	bl	80004a0 <__aeabi_d2uiz>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0x00;
 8002cbe:	2118      	movs	r1, #24
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002ce2:	187a      	adds	r2, r7, r1
 8002ce4:	2317      	movs	r3, #23
 8002ce6:	18f9      	adds	r1, r7, r3
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	2304      	movs	r3, #4
 8002cec:	f000 f81c 	bl	8002d28 <write_lt8722_reg>
		return 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e008      	b.n	8002d06 <set_vout+0x1ae>
	}
	write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002cf4:	2318      	movs	r3, #24
 8002cf6:	18fa      	adds	r2, r7, r3
 8002cf8:	2317      	movs	r3, #23
 8002cfa:	18f9      	adds	r1, r7, r3
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f000 f812 	bl	8002d28 <write_lt8722_reg>
	return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b008      	add	sp, #32
 8002d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	147ae148 	.word	0x147ae148
 8002d14:	402447ae 	.word	0x402447ae
 8002d18:	4160bfff 	.word	0x4160bfff
 8002d1c:	415e8000 	.word	0x415e8000
 8002d20:	c0250000 	.word	0xc0250000
 8002d24:	41616000 	.word	0x41616000

08002d28 <write_lt8722_reg>:


int write_lt8722_reg(SPI_HandleTypeDef *hspi, uint8_t *reg_addr, uint8_t *data, uint8_t size){
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b08c      	sub	sp, #48	@ 0x30
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	001a      	movs	r2, r3
 8002d36:	1cfb      	adds	r3, r7, #3
 8002d38:	701a      	strb	r2, [r3, #0]

	if (size > 4)
 8002d3a:	1cfb      	adds	r3, r7, #3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d901      	bls.n	8002d46 <write_lt8722_reg+0x1e>
		return 1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e05c      	b.n	8002e00 <write_lt8722_reg+0xd8>

	uint8_t tx_data[8] = {Data_Write_Command,*reg_addr,0x00,0x00,0x00,0x00,0x00,0x00};
 8002d46:	211c      	movs	r1, #28
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	22f2      	movs	r2, #242	@ 0xf2
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	705a      	strb	r2, [r3, #1]
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	709a      	strb	r2, [r3, #2]
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2200      	movs	r2, #0
 8002d60:	70da      	strb	r2, [r3, #3]
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2200      	movs	r2, #0
 8002d66:	711a      	strb	r2, [r3, #4]
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	715a      	strb	r2, [r3, #5]
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2200      	movs	r2, #0
 8002d72:	719a      	strb	r2, [r3, #6]
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	2200      	movs	r2, #0
 8002d78:	71da      	strb	r2, [r3, #7]

	for (int i=0;i<size;i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7e:	e00b      	b.n	8002d98 <write_lt8722_reg+0x70>
		tx_data[i+2] = data[i];
 8002d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	18d2      	adds	r2, r2, r3
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	3302      	adds	r3, #2
 8002d8a:	7811      	ldrb	r1, [r2, #0]
 8002d8c:	221c      	movs	r2, #28
 8002d8e:	18ba      	adds	r2, r7, r2
 8002d90:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<size;i++){
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d98:	1cfb      	adds	r3, r7, #3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	dbee      	blt.n	8002d80 <write_lt8722_reg+0x58>
	}
	uint8_t rx_data[8] = {0};
 8002da2:	2414      	movs	r4, #20
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	0018      	movs	r0, r3
 8002da8:	2308      	movs	r3, #8
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f00d fc6f 	bl	8010690 <memset>

	tx_data[6] = get_CRC8(tx_data, 6);
 8002db2:	251c      	movs	r5, #28
 8002db4:	197b      	adds	r3, r7, r5
 8002db6:	2106      	movs	r1, #6
 8002db8:	0018      	movs	r0, r3
 8002dba:	f000 f825 	bl	8002e08 <get_CRC8>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	197b      	adds	r3, r7, r5
 8002dc4:	719a      	strb	r2, [r3, #6]

	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, RESET);
 8002dc6:	23a0      	movs	r3, #160	@ 0xa0
 8002dc8:	05db      	lsls	r3, r3, #23
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2140      	movs	r1, #64	@ 0x40
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f002 ffc9 	bl	8005d66 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 8, 100);
 8002dd4:	193a      	adds	r2, r7, r4
 8002dd6:	1979      	adds	r1, r7, r5
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	2364      	movs	r3, #100	@ 0x64
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2308      	movs	r3, #8
 8002de0:	f006 fb10 	bl	8009404 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
 8002de4:	23a0      	movs	r3, #160	@ 0xa0
 8002de6:	05db      	lsls	r3, r3, #23
 8002de8:	2201      	movs	r2, #1
 8002dea:	2140      	movs	r1, #64	@ 0x40
 8002dec:	0018      	movs	r0, r3
 8002dee:	f002 ffba 	bl	8005d66 <HAL_GPIO_WritePin>
	if(rx_data[7] != SLAVE_ACK)
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	79db      	ldrb	r3, [r3, #7]
 8002df6:	2ba5      	cmp	r3, #165	@ 0xa5
 8002df8:	d001      	beq.n	8002dfe <write_lt8722_reg+0xd6>
		return 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <write_lt8722_reg+0xd8>

	return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b00a      	add	sp, #40	@ 0x28
 8002e06:	bdb0      	pop	{r4, r5, r7, pc}

08002e08 <get_CRC8>:
		return 1;
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
	return 0;
}

uint8_t get_CRC8(const uint8_t *data, uint16_t length) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	000a      	movs	r2, r1
 8002e12:	1cbb      	adds	r3, r7, #2
 8002e14:	801a      	strh	r2, [r3, #0]
    uint8_t crc = 0x00;               // Initial value
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
    uint8_t polynomial = 0x07;        // CRC-8 polynomial
 8002e1e:	230a      	movs	r3, #10
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	2207      	movs	r2, #7
 8002e24:	701a      	strb	r2, [r3, #0]

    for (uint16_t i = 0; i < length; i++) {
 8002e26:	230c      	movs	r3, #12
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	e03b      	b.n	8002ea8 <get_CRC8+0xa0>
        crc ^= data[i];               // XOR-in byte into CRC
 8002e30:	230c      	movs	r3, #12
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	18d3      	adds	r3, r2, r3
 8002e3a:	7819      	ldrb	r1, [r3, #0]
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	18bb      	adds	r3, r7, r2
 8002e40:	18ba      	adds	r2, r7, r2
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	404a      	eors	r2, r1
 8002e46:	701a      	strb	r2, [r3, #0]

        for (uint8_t j = 0; j < 8; j++) {
 8002e48:	230b      	movs	r3, #11
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e01f      	b.n	8002e92 <get_CRC8+0x8a>
            if (crc & 0x80) {
 8002e52:	210f      	movs	r1, #15
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da0d      	bge.n	8002e7a <get_CRC8+0x72>
                crc = (crc << 1) ^ polynomial;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	18db      	adds	r3, r3, r3
 8002e66:	b25a      	sxtb	r2, r3
 8002e68:	230a      	movs	r3, #10
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	4053      	eors	r3, r2
 8002e72:	b25a      	sxtb	r2, r3
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e005      	b.n	8002e86 <get_CRC8+0x7e>
            } else {
                crc <<= 1;
 8002e7a:	230f      	movs	r3, #15
 8002e7c:	18fa      	adds	r2, r7, r3
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	18db      	adds	r3, r3, r3
 8002e84:	7013      	strb	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8002e86:	210b      	movs	r1, #11
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	3201      	adds	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	230b      	movs	r3, #11
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b07      	cmp	r3, #7
 8002e9a:	d9da      	bls.n	8002e52 <get_CRC8+0x4a>
    for (uint16_t i = 0; i < length; i++) {
 8002e9c:	210c      	movs	r1, #12
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	3201      	adds	r2, #1
 8002ea6:	801a      	strh	r2, [r3, #0]
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	18fa      	adds	r2, r7, r3
 8002eac:	1cbb      	adds	r3, r7, #2
 8002eae:	8812      	ldrh	r2, [r2, #0]
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d3bc      	bcc.n	8002e30 <get_CRC8+0x28>
            }
        }
    }

    return crc;
 8002eb6:	230f      	movs	r3, #15
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781b      	ldrb	r3, [r3, #0]
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b004      	add	sp, #16
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b099      	sub	sp, #100	@ 0x64
 8002ec8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eca:	f001 fb8f 	bl	80045ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ece:	f000 f95d 	bl	800318c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ed2:	f000 fb2d 	bl	8003530 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8002ed6:	f00b fa3f 	bl	800e358 <MX_USB_Device_Init>
  MX_I2C2_Init();
 8002eda:	f000 fa1b 	bl	8003314 <MX_I2C2_Init>
  MX_ADC1_Init();
 8002ede:	f000 f9ad 	bl	800323c <MX_ADC1_Init>
  MX_TIM17_Init();
 8002ee2:	f000 fafb 	bl	80034dc <MX_TIM17_Init>
  MX_SPI2_Init();
 8002ee6:	f000 fa55 	bl	8003394 <MX_SPI2_Init>
  MX_TIM16_Init();
 8002eea:	f000 facd 	bl	8003488 <MX_TIM16_Init>
  MX_TIM7_Init();
 8002eee:	f000 fa8f 	bl	8003410 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50); // Stabilize voltage for OLED
 8002ef2:	2032      	movs	r0, #50	@ 0x32
 8002ef4:	f001 fc00 	bl	80046f8 <HAL_Delay>
  GPIO_TypeDef *data_ports[] = {OLED_D04_GPIO_Port, OLED_D05_GPIO_Port, OLED_D06_GPIO_Port, OLED_D07_GPIO_Port};
 8002ef8:	2530      	movs	r5, #48	@ 0x30
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	4a8f      	ldr	r2, [pc, #572]	@ (800313c <main+0x278>)
 8002efe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f00:	c313      	stmia	r3!, {r0, r1, r4}
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	601a      	str	r2, [r3, #0]
  uint16_t data_pins[] = {OLED_D04_Pin, OLED_D05_Pin, OLED_D06_Pin, OLED_D07_Pin};
 8002f06:	2428      	movs	r4, #40	@ 0x28
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	4a8d      	ldr	r2, [pc, #564]	@ (8003140 <main+0x27c>)
 8002f0c:	ca03      	ldmia	r2!, {r0, r1}
 8002f0e:	c303      	stmia	r3!, {r0, r1}
  Oled_HandleTypeDef oled = Oled_init(OLED_RS_GPIO_Port, OLED_RS_Pin, OLED_EN_GPIO_Port, OLED_EN_Pin, data_ports, data_pins);
 8002f10:	2610      	movs	r6, #16
 8002f12:	19b8      	adds	r0, r7, r6
 8002f14:	4a8b      	ldr	r2, [pc, #556]	@ (8003144 <main+0x280>)
 8002f16:	498b      	ldr	r1, [pc, #556]	@ (8003144 <main+0x280>)
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	2310      	movs	r3, #16
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	0013      	movs	r3, r2
 8002f26:	2220      	movs	r2, #32
 8002f28:	f7ff fae6 	bl	80024f8 <Oled_init>
  Oled_resupply_power(&oled);
 8002f2c:	19bb      	adds	r3, r7, r6
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff fbb8 	bl	80026a4 <Oled_resupply_power>


  double current_temp_inside = 0;
 8002f34:	2200      	movs	r2, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	60fb      	str	r3, [r7, #12]
  double current_temp_outside = 0;
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2300      	movs	r3, #0
 8002f40:	603a      	str	r2, [r7, #0]
 8002f42:	607b      	str	r3, [r7, #4]
  // Check if Thermometers are connected
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002f44:	e01d      	b.n	8002f82 <main+0xbe>
	  Oled_cursor(&oled, 0, 0);
 8002f46:	2410      	movs	r4, #16
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff fbbe 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 8002f54:	4a7c      	ldr	r2, [pc, #496]	@ (8003148 <main+0x284>)
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	0011      	movs	r1, r2
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff fbeb 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	0018      	movs	r0, r3
 8002f68:	f7ff fbb2 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Thermo");
 8002f6c:	4a77      	ldr	r2, [pc, #476]	@ (800314c <main+0x288>)
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	0011      	movs	r1, r2
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff fbdf 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002f78:	23fa      	movs	r3, #250	@ 0xfa
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f001 fbbb 	bl	80046f8 <HAL_Delay>
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002f82:	003a      	movs	r2, r7
 8002f84:	4b72      	ldr	r3, [pc, #456]	@ (8003150 <main+0x28c>)
 8002f86:	2190      	movs	r1, #144	@ 0x90
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f001 f9d3 	bl	8004334 <read_temp>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d1d9      	bne.n	8002f46 <main+0x82>
 8002f92:	2308      	movs	r3, #8
 8002f94:	18fa      	adds	r2, r7, r3
 8002f96:	4b6e      	ldr	r3, [pc, #440]	@ (8003150 <main+0x28c>)
 8002f98:	2192      	movs	r1, #146	@ 0x92
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f001 f9ca 	bl	8004334 <read_temp>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d1d0      	bne.n	8002f46 <main+0x82>
  }

  Oled_clear(&oled);
 8002fa4:	2310      	movs	r3, #16
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fbb7 	bl	800271c <Oled_clear>

  while(LT8722_Init(&hspi2)!=0){
 8002fae:	e01d      	b.n	8002fec <main+0x128>
	  Oled_cursor(&oled, 0, 0);
 8002fb0:	2410      	movs	r4, #16
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7ff fb89 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Failed");
 8002fbe:	4a65      	ldr	r2, [pc, #404]	@ (8003154 <main+0x290>)
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fbb6 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff fb7d 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "init");
 8002fd6:	4a60      	ldr	r2, [pc, #384]	@ (8003158 <main+0x294>)
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff fbaa 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002fe2:	23fa      	movs	r3, #250	@ 0xfa
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f001 fb86 	bl	80046f8 <HAL_Delay>
  while(LT8722_Init(&hspi2)!=0){
 8002fec:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <main+0x298>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7ff fc68 	bl	80028c4 <LT8722_Init>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d1db      	bne.n	8002fb0 <main+0xec>
  }

  while(is_load_connected(&hspi2, &hadc1)!=1){
 8002ff8:	e01d      	b.n	8003036 <main+0x172>
	  Oled_cursor(&oled, 0, 0);
 8002ffa:	2410      	movs	r4, #16
 8002ffc:	193b      	adds	r3, r7, r4
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff fb64 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 8003008:	4a4f      	ldr	r2, [pc, #316]	@ (8003148 <main+0x284>)
 800300a:	193b      	adds	r3, r7, r4
 800300c:	0011      	movs	r1, r2
 800300e:	0018      	movs	r0, r3
 8003010:	f7ff fb91 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2200      	movs	r2, #0
 8003018:	2101      	movs	r1, #1
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff fb58 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Peltier");
 8003020:	4a4f      	ldr	r2, [pc, #316]	@ (8003160 <main+0x29c>)
 8003022:	193b      	adds	r3, r7, r4
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff fb85 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 800302c:	23fa      	movs	r3, #250	@ 0xfa
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	0018      	movs	r0, r3
 8003032:	f001 fb61 	bl	80046f8 <HAL_Delay>
  while(is_load_connected(&hspi2, &hadc1)!=1){
 8003036:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <main+0x2a0>)
 8003038:	4b48      	ldr	r3, [pc, #288]	@ (800315c <main+0x298>)
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fcd9 	bl	80029f4 <is_load_connected>
 8003042:	0003      	movs	r3, r0
 8003044:	2b01      	cmp	r3, #1
 8003046:	d1d8      	bne.n	8002ffa <main+0x136>
  }

  Oled_clear(&oled);
 8003048:	2310      	movs	r3, #16
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fb65 	bl	800271c <Oled_clear>

  while(read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0){}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	2308      	movs	r3, #8
 8003056:	18fa      	adds	r2, r7, r3
 8003058:	4b3d      	ldr	r3, [pc, #244]	@ (8003150 <main+0x28c>)
 800305a:	2192      	movs	r1, #146	@ 0x92
 800305c:	0018      	movs	r0, r3
 800305e:	f001 f969 	bl	8004334 <read_temp>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d1f6      	bne.n	8003054 <main+0x190>
  set_temp_inside = current_temp_inside;
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	493f      	ldr	r1, [pc, #252]	@ (8003168 <main+0x2a4>)
 800306c:	600a      	str	r2, [r1, #0]
 800306e:	604b      	str	r3, [r1, #4]
  double pid_output = 0;
 8003070:	2200      	movs	r2, #0
 8003072:	2300      	movs	r3, #0
 8003074:	643a      	str	r2, [r7, #64]	@ 0x40
 8003076:	647b      	str	r3, [r7, #68]	@ 0x44

  HAL_TIM_Base_Start_IT(&htim17); // Starting PID timer. Period 1 second.
 8003078:	4b3c      	ldr	r3, [pc, #240]	@ (800316c <main+0x2a8>)
 800307a:	0018      	movs	r0, r3
 800307c:	f006 fd72 	bl	8009b64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Starting OLED refreshing timer. Period 33 miliseconds.
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <main+0x2ac>)
 8003082:	0018      	movs	r0, r3
 8003084:	f006 fd6e 	bl	8009b64 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(time_to_rerun_PID_loop){
 8003088:	4b3a      	ldr	r3, [pc, #232]	@ (8003174 <main+0x2b0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d03f      	beq.n	8003110 <main+0x24c>
		read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside);
 8003090:	2308      	movs	r3, #8
 8003092:	18fa      	adds	r2, r7, r3
 8003094:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <main+0x28c>)
 8003096:	2192      	movs	r1, #146	@ 0x92
 8003098:	0018      	movs	r0, r3
 800309a:	f001 f94b 	bl	8004334 <read_temp>
		read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside);
 800309e:	003a      	movs	r2, r7
 80030a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <main+0x28c>)
 80030a2:	2190      	movs	r1, #144	@ 0x90
 80030a4:	0018      	movs	r0, r3
 80030a6:	f001 f945 	bl	8004334 <read_temp>
		pid_output = compute_pid_output(current_temp_inside, set_temp_inside, current_temp_outside, &Kp_Part, &Ki_Part, &Kd_Part);
 80030aa:	68b8      	ldr	r0, [r7, #8]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <main+0x2a4>)
 80030b0:	681c      	ldr	r4, [r3, #0]
 80030b2:	685d      	ldr	r5, [r3, #4]
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4e2f      	ldr	r6, [pc, #188]	@ (8003178 <main+0x2b4>)
 80030ba:	9604      	str	r6, [sp, #16]
 80030bc:	4e2f      	ldr	r6, [pc, #188]	@ (800317c <main+0x2b8>)
 80030be:	9603      	str	r6, [sp, #12]
 80030c0:	4e2f      	ldr	r6, [pc, #188]	@ (8003180 <main+0x2bc>)
 80030c2:	9602      	str	r6, [sp, #8]
 80030c4:	9200      	str	r2, [sp, #0]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	0022      	movs	r2, r4
 80030ca:	002b      	movs	r3, r5
 80030cc:	f000 fc40 	bl	8003950 <compute_pid_output>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80030d6:	647b      	str	r3, [r7, #68]	@ 0x44
		set_vout(&hspi2, pid_output);
 80030d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030dc:	491f      	ldr	r1, [pc, #124]	@ (800315c <main+0x298>)
 80030de:	0008      	movs	r0, r1
 80030e0:	f7ff fd3a 	bl	8002b58 <set_vout>

		send_temps_via_usb(current_temp_inside, current_temp_outside, set_temp_inside);
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	683c      	ldr	r4, [r7, #0]
 80030ea:	687d      	ldr	r5, [r7, #4]
 80030ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003168 <main+0x2a4>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	9200      	str	r2, [sp, #0]
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	0022      	movs	r2, r4
 80030f8:	002b      	movs	r3, r5
 80030fa:	f001 f986 	bl	800440a <send_temps_via_usb>
		listen_to_usb(&set_temp_inside, &is_following_profile);
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <main+0x2c0>)
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <main+0x2a4>)
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f001 f9c5 	bl	8004494 <listen_to_usb>

		time_to_rerun_PID_loop = 0;
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <main+0x2b0>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
	}
	if(time_to_refresh_OLED){
 8003110:	4b1d      	ldr	r3, [pc, #116]	@ (8003188 <main+0x2c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0b7      	beq.n	8003088 <main+0x1c4>
		refresh_displayed_info(&oled, set_temp_inside, current_temp_inside);
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <main+0x2a4>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2410      	movs	r4, #16
 8003124:	193c      	adds	r4, r7, r4
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	0002      	movs	r2, r0
 800312c:	000b      	movs	r3, r1
 800312e:	0020      	movs	r0, r4
 8003130:	f7ff fa42 	bl	80025b8 <refresh_displayed_info>
		time_to_refresh_OLED = 0;
 8003134:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <main+0x2c4>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
	if(time_to_rerun_PID_loop){
 800313a:	e7a5      	b.n	8003088 <main+0x1c4>
 800313c:	080132d8 	.word	0x080132d8
 8003140:	080132e8 	.word	0x080132e8
 8003144:	50000400 	.word	0x50000400
 8003148:	080132b0 	.word	0x080132b0
 800314c:	080132b8 	.word	0x080132b8
 8003150:	200003d8 	.word	0x200003d8
 8003154:	080132c0 	.word	0x080132c0
 8003158:	080132c8 	.word	0x080132c8
 800315c:	2000042c 	.word	0x2000042c
 8003160:	080132d0 	.word	0x080132d0
 8003164:	20000374 	.word	0x20000374
 8003168:	20000588 	.word	0x20000588
 800316c:	20000528 	.word	0x20000528
 8003170:	20000490 	.word	0x20000490
 8003174:	20000574 	.word	0x20000574
 8003178:	200005a0 	.word	0x200005a0
 800317c:	20000598 	.word	0x20000598
 8003180:	20000590 	.word	0x20000590
 8003184:	20000584 	.word	0x20000584
 8003188:	20000578 	.word	0x20000578

0800318c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b093      	sub	sp, #76	@ 0x4c
 8003190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003192:	2410      	movs	r4, #16
 8003194:	193b      	adds	r3, r7, r4
 8003196:	0018      	movs	r0, r3
 8003198:	2338      	movs	r3, #56	@ 0x38
 800319a:	001a      	movs	r2, r3
 800319c:	2100      	movs	r1, #0
 800319e:	f00d fa77 	bl	8010690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a2:	003b      	movs	r3, r7
 80031a4:	0018      	movs	r0, r3
 80031a6:	2310      	movs	r3, #16
 80031a8:	001a      	movs	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f00d fa70 	bl	8010690 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	0018      	movs	r0, r3
 80031b6:	f005 fa01 	bl	80085bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2280      	movs	r2, #128	@ 0x80
 80031c4:	0252      	lsls	r2, r2, #9
 80031c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c8:	0021      	movs	r1, r4
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2202      	movs	r2, #2
 80031ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2203      	movs	r2, #3
 80031d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2200      	movs	r2, #0
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	220c      	movs	r2, #12
 80031e0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2280      	movs	r2, #128	@ 0x80
 80031e6:	0292      	lsls	r2, r2, #10
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2280      	movs	r2, #128	@ 0x80
 80031ee:	0492      	lsls	r2, r2, #18
 80031f0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	0592      	lsls	r2, r2, #22
 80031f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	0018      	movs	r0, r3
 80031fe:	f005 fa1d 	bl	800863c <HAL_RCC_OscConfig>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003206:	f000 fb9d 	bl	8003944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800320a:	003b      	movs	r3, r7
 800320c:	2207      	movs	r2, #7
 800320e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003210:	003b      	movs	r3, r7
 8003212:	2202      	movs	r2, #2
 8003214:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003216:	003b      	movs	r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800321c:	003b      	movs	r3, r7
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003222:	003b      	movs	r3, r7
 8003224:	2101      	movs	r1, #1
 8003226:	0018      	movs	r0, r3
 8003228:	f005 fd22 	bl	8008c70 <HAL_RCC_ClockConfig>
 800322c:	1e03      	subs	r3, r0, #0
 800322e:	d001      	beq.n	8003234 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003230:	f000 fb88 	bl	8003944 <Error_Handler>
  }
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b013      	add	sp, #76	@ 0x4c
 800323a:	bd90      	pop	{r4, r7, pc}

0800323c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	0018      	movs	r0, r3
 8003246:	230c      	movs	r3, #12
 8003248:	001a      	movs	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f00d fa20 	bl	8010690 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003250:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003252:	4a2e      	ldr	r2, [pc, #184]	@ (800330c <MX_ADC1_Init+0xd0>)
 8003254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003256:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003258:	2280      	movs	r2, #128	@ 0x80
 800325a:	05d2      	lsls	r2, r2, #23
 800325c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003264:	4b28      	ldr	r3, [pc, #160]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800326a:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <MX_ADC1_Init+0xcc>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003270:	4b25      	ldr	r3, [pc, #148]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003272:	2204      	movs	r2, #4
 8003274:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003276:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003278:	2200      	movs	r2, #0
 800327a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <MX_ADC1_Init+0xcc>)
 800327e:	2200      	movs	r2, #0
 8003280:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003284:	2200      	movs	r2, #0
 8003286:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <MX_ADC1_Init+0xcc>)
 800328a:	2201      	movs	r2, #1
 800328c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003290:	2220      	movs	r2, #32
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <MX_ADC1_Init+0xcc>)
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800329c:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <MX_ADC1_Init+0xcc>)
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032a2:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032a4:	222c      	movs	r2, #44	@ 0x2c
 80032a6:	2100      	movs	r1, #0
 80032a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032aa:	4b17      	ldr	r3, [pc, #92]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80032b0:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032b2:	2205      	movs	r2, #5
 80032b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032b8:	2205      	movs	r2, #5
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80032bc:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032be:	223c      	movs	r2, #60	@ 0x3c
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80032c4:	4b10      	ldr	r3, [pc, #64]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f001 fbc3 	bl	8004a58 <HAL_ADC_Init>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80032d6:	f000 fb35 	bl	8003944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <MX_ADC1_Init+0xd4>)
 80032de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032ec:	1d3a      	adds	r2, r7, #4
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <MX_ADC1_Init+0xcc>)
 80032f0:	0011      	movs	r1, r2
 80032f2:	0018      	movs	r0, r3
 80032f4:	f001 ffb2 	bl	800525c <HAL_ADC_ConfigChannel>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80032fc:	f000 fb22 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000374 	.word	0x20000374
 800330c:	40012400 	.word	0x40012400
 8003310:	1c000080 	.word	0x1c000080

08003314 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003318:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <MX_I2C2_Init+0x74>)
 800331a:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <MX_I2C2_Init+0x78>)
 800331c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 800331e:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003320:	4a1b      	ldr	r2, [pc, #108]	@ (8003390 <MX_I2C2_Init+0x7c>)
 8003322:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003324:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800332a:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <MX_I2C2_Init+0x74>)
 800332c:	2201      	movs	r2, #1
 800332e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003330:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003336:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800333c:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <MX_I2C2_Init+0x74>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003344:	2200      	movs	r2, #0
 8003346:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <MX_I2C2_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800334e:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003350:	0018      	movs	r0, r3
 8003352:	f002 fd75 	bl	8005e40 <HAL_I2C_Init>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d001      	beq.n	800335e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800335a:	f000 faf3 	bl	8003944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003360:	2100      	movs	r1, #0
 8003362:	0018      	movs	r0, r3
 8003364:	f003 fb18 	bl	8006998 <HAL_I2CEx_ConfigAnalogFilter>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800336c:	f000 faea 	bl	8003944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <MX_I2C2_Init+0x74>)
 8003372:	2100      	movs	r1, #0
 8003374:	0018      	movs	r0, r3
 8003376:	f003 fb5b 	bl	8006a30 <HAL_I2CEx_ConfigDigitalFilter>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800337e:	f000 fae1 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200003d8 	.word	0x200003d8
 800338c:	40005800 	.word	0x40005800
 8003390:	0090194b 	.word	0x0090194b

08003394 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003398:	4b1b      	ldr	r3, [pc, #108]	@ (8003408 <MX_SPI2_Init+0x74>)
 800339a:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <MX_SPI2_Init+0x78>)
 800339c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033a0:	2282      	movs	r2, #130	@ 0x82
 80033a2:	0052      	lsls	r2, r2, #1
 80033a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033a6:	4b18      	ldr	r3, [pc, #96]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033ac:	4b16      	ldr	r3, [pc, #88]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033ae:	22e0      	movs	r2, #224	@ 0xe0
 80033b0:	00d2      	lsls	r2, r2, #3
 80033b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b4:	4b14      	ldr	r3, [pc, #80]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033ba:	4b13      	ldr	r3, [pc, #76]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033ca:	2210      	movs	r2, #16
 80033cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033da:	4b0b      	ldr	r3, [pc, #44]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033dc:	2200      	movs	r2, #0
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033e2:	2207      	movs	r2, #7
 80033e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033e6:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033ee:	2208      	movs	r2, #8
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <MX_SPI2_Init+0x74>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f005 ff4d 	bl	8009294 <HAL_SPI_Init>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d001      	beq.n	8003402 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80033fe:	f000 faa1 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003402:	46c0      	nop			@ (mov r8, r8)
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	2000042c 	.word	0x2000042c
 800340c:	40003800 	.word	0x40003800

08003410 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	0018      	movs	r0, r3
 800341a:	230c      	movs	r3, #12
 800341c:	001a      	movs	r2, r3
 800341e:	2100      	movs	r1, #0
 8003420:	f00d f936 	bl	8010690 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003424:	4b15      	ldr	r3, [pc, #84]	@ (800347c <MX_TIM7_Init+0x6c>)
 8003426:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <MX_TIM7_Init+0x70>)
 8003428:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000-1;
 800342a:	4b14      	ldr	r3, [pc, #80]	@ (800347c <MX_TIM7_Init+0x6c>)
 800342c:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <MX_TIM7_Init+0x74>)
 800342e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003430:	4b12      	ldr	r3, [pc, #72]	@ (800347c <MX_TIM7_Init+0x6c>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33-1;
 8003436:	4b11      	ldr	r3, [pc, #68]	@ (800347c <MX_TIM7_Init+0x6c>)
 8003438:	2220      	movs	r2, #32
 800343a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <MX_TIM7_Init+0x6c>)
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <MX_TIM7_Init+0x6c>)
 8003444:	0018      	movs	r0, r3
 8003446:	f006 fb35 	bl	8009ab4 <HAL_TIM_Base_Init>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800344e:	f000 fa79 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800345e:	1d3a      	adds	r2, r7, #4
 8003460:	4b06      	ldr	r3, [pc, #24]	@ (800347c <MX_TIM7_Init+0x6c>)
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f006 fdbd 	bl	8009fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800346e:	f000 fa69 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	20000490 	.word	0x20000490
 8003480:	40001400 	.word	0x40001400
 8003484:	0000bb7f 	.word	0x0000bb7f

08003488 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800348c:	4b0f      	ldr	r3, [pc, #60]	@ (80034cc <MX_TIM16_Init+0x44>)
 800348e:	4a10      	ldr	r2, [pc, #64]	@ (80034d0 <MX_TIM16_Init+0x48>)
 8003490:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8003492:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <MX_TIM16_Init+0x44>)
 8003494:	4a0f      	ldr	r2, [pc, #60]	@ (80034d4 <MX_TIM16_Init+0x4c>)
 8003496:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b0c      	ldr	r3, [pc, #48]	@ (80034cc <MX_TIM16_Init+0x44>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <MX_TIM16_Init+0x44>)
 80034a0:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <MX_TIM16_Init+0x50>)
 80034a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <MX_TIM16_Init+0x44>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80034aa:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <MX_TIM16_Init+0x44>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b0:	4b06      	ldr	r3, [pc, #24]	@ (80034cc <MX_TIM16_Init+0x44>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80034b6:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <MX_TIM16_Init+0x44>)
 80034b8:	0018      	movs	r0, r3
 80034ba:	f006 fafb 	bl	8009ab4 <HAL_TIM_Base_Init>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80034c2:	f000 fa3f 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200004dc 	.word	0x200004dc
 80034d0:	40014400 	.word	0x40014400
 80034d4:	0000bb7f 	.word	0x0000bb7f
 80034d8:	000003e7 	.word	0x000003e7

080034dc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <MX_TIM17_Init+0x44>)
 80034e2:	4a10      	ldr	r2, [pc, #64]	@ (8003524 <MX_TIM17_Init+0x48>)
 80034e4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 80034e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <MX_TIM17_Init+0x44>)
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <MX_TIM17_Init+0x4c>)
 80034ea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <MX_TIM17_Init+0x44>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80034f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003520 <MX_TIM17_Init+0x44>)
 80034f4:	4a0d      	ldr	r2, [pc, #52]	@ (800352c <MX_TIM17_Init+0x50>)
 80034f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <MX_TIM17_Init+0x44>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80034fe:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <MX_TIM17_Init+0x44>)
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <MX_TIM17_Init+0x44>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800350a:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <MX_TIM17_Init+0x44>)
 800350c:	0018      	movs	r0, r3
 800350e:	f006 fad1 	bl	8009ab4 <HAL_TIM_Base_Init>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003516:	f000 fa15 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000528 	.word	0x20000528
 8003524:	40014800 	.word	0x40014800
 8003528:	0000bb7f 	.word	0x0000bb7f
 800352c:	000003e7 	.word	0x000003e7

08003530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b08b      	sub	sp, #44	@ 0x2c
 8003534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	2414      	movs	r4, #20
 8003538:	193b      	adds	r3, r7, r4
 800353a:	0018      	movs	r0, r3
 800353c:	2314      	movs	r3, #20
 800353e:	001a      	movs	r2, r3
 8003540:	2100      	movs	r1, #0
 8003542:	f00d f8a5 	bl	8010690 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003546:	4b6d      	ldr	r3, [pc, #436]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800354a:	4b6c      	ldr	r3, [pc, #432]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 800354c:	2120      	movs	r1, #32
 800354e:	430a      	orrs	r2, r1
 8003550:	635a      	str	r2, [r3, #52]	@ 0x34
 8003552:	4b6a      	ldr	r3, [pc, #424]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	2220      	movs	r2, #32
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	4b66      	ldr	r3, [pc, #408]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003564:	2101      	movs	r1, #1
 8003566:	430a      	orrs	r2, r1
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
 800356a:	4b64      	ldr	r3, [pc, #400]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	2201      	movs	r2, #1
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	4b61      	ldr	r3, [pc, #388]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003578:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800357a:	4b60      	ldr	r3, [pc, #384]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 800357c:	2102      	movs	r1, #2
 800357e:	430a      	orrs	r2, r1
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34
 8003582:	4b5e      	ldr	r3, [pc, #376]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800358e:	4b5b      	ldr	r3, [pc, #364]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003592:	4b5a      	ldr	r3, [pc, #360]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 8003594:	2104      	movs	r1, #4
 8003596:	430a      	orrs	r2, r1
 8003598:	635a      	str	r2, [r3, #52]	@ 0x34
 800359a:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 80035a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035aa:	4b54      	ldr	r3, [pc, #336]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 80035ac:	2108      	movs	r1, #8
 80035ae:	430a      	orrs	r2, r1
 80035b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035b2:	4b52      	ldr	r3, [pc, #328]	@ (80036fc <MX_GPIO_Init+0x1cc>)
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	2208      	movs	r2, #8
 80035b8:	4013      	ands	r3, r2
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, GPIO_PIN_RESET);
 80035be:	23a0      	movs	r3, #160	@ 0xa0
 80035c0:	05db      	lsls	r3, r3, #23
 80035c2:	2200      	movs	r2, #0
 80035c4:	2140      	movs	r1, #64	@ 0x40
 80035c6:	0018      	movs	r0, r3
 80035c8:	f002 fbcd 	bl	8005d66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin, GPIO_PIN_RESET);
 80035cc:	2387      	movs	r3, #135	@ 0x87
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	484b      	ldr	r0, [pc, #300]	@ (8003700 <MX_GPIO_Init+0x1d0>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	0019      	movs	r1, r3
 80035d6:	f002 fbc6 	bl	8005d66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80035da:	4b4a      	ldr	r3, [pc, #296]	@ (8003704 <MX_GPIO_Init+0x1d4>)
 80035dc:	2200      	movs	r2, #0
 80035de:	2140      	movs	r1, #64	@ 0x40
 80035e0:	0018      	movs	r0, r3
 80035e2:	f002 fbc0 	bl	8005d66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin, GPIO_PIN_RESET);
 80035e6:	4b48      	ldr	r3, [pc, #288]	@ (8003708 <MX_GPIO_Init+0x1d8>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	210f      	movs	r1, #15
 80035ec:	0018      	movs	r0, r3
 80035ee:	f002 fbba 	bl	8005d66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Temp_Down_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Down_Btn_Pin;
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	2202      	movs	r2, #2
 80035f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	2284      	movs	r2, #132	@ 0x84
 80035fc:	0392      	lsls	r2, r2, #14
 80035fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	193b      	adds	r3, r7, r4
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Down_Btn_GPIO_Port, &GPIO_InitStruct);
 8003606:	193a      	adds	r2, r7, r4
 8003608:	23a0      	movs	r3, #160	@ 0xa0
 800360a:	05db      	lsls	r3, r3, #23
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f002 fa20 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LT8722_CS_Pin */
  GPIO_InitStruct.Pin = LT8722_CS_Pin;
 8003614:	193b      	adds	r3, r7, r4
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361a:	193b      	adds	r3, r7, r4
 800361c:	2201      	movs	r2, #1
 800361e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	193b      	adds	r3, r7, r4
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LT8722_CS_GPIO_Port, &GPIO_InitStruct);
 800362c:	193a      	adds	r2, r7, r4
 800362e:	23a0      	movs	r3, #160	@ 0xa0
 8003630:	05db      	lsls	r3, r3, #23
 8003632:	0011      	movs	r1, r2
 8003634:	0018      	movs	r0, r3
 8003636:	f002 fa0d 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LT8722_SWEN_Pin OLED_RW_Pin OLED_EN_Pin OLED_RS_Pin */
  GPIO_InitStruct.Pin = LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin;
 800363a:	0021      	movs	r1, r4
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2287      	movs	r2, #135	@ 0x87
 8003640:	00d2      	lsls	r2, r2, #3
 8003642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003644:	000c      	movs	r4, r1
 8003646:	193b      	adds	r3, r7, r4
 8003648:	2201      	movs	r2, #1
 800364a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	193b      	adds	r3, r7, r4
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	193b      	adds	r3, r7, r4
 800365a:	4a29      	ldr	r2, [pc, #164]	@ (8003700 <MX_GPIO_Init+0x1d0>)
 800365c:	0019      	movs	r1, r3
 800365e:	0010      	movs	r0, r2
 8003660:	f002 f9f8 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Up_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Up_Btn_Pin;
 8003664:	0021      	movs	r1, r4
 8003666:	187b      	adds	r3, r7, r1
 8003668:	2280      	movs	r2, #128	@ 0x80
 800366a:	0152      	lsls	r2, r2, #5
 800366c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800366e:	187b      	adds	r3, r7, r1
 8003670:	2284      	movs	r2, #132	@ 0x84
 8003672:	0392      	lsls	r2, r2, #14
 8003674:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	000c      	movs	r4, r1
 8003678:	193b      	adds	r3, r7, r4
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Up_Btn_GPIO_Port, &GPIO_InitStruct);
 800367e:	193b      	adds	r3, r7, r4
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <MX_GPIO_Init+0x1d0>)
 8003682:	0019      	movs	r1, r3
 8003684:	0010      	movs	r0, r2
 8003686:	f002 f9e5 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800368a:	193b      	adds	r3, r7, r4
 800368c:	2240      	movs	r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003690:	193b      	adds	r3, r7, r4
 8003692:	2201      	movs	r2, #1
 8003694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	193b      	adds	r3, r7, r4
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <MX_GPIO_Init+0x1d4>)
 80036a6:	0019      	movs	r1, r3
 80036a8:	0010      	movs	r0, r2
 80036aa:	f002 f9d3 	bl	8005a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_D07_Pin OLED_D06_Pin OLED_D04_Pin OLED_D05_Pin */
  GPIO_InitStruct.Pin = OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin;
 80036ae:	0021      	movs	r1, r4
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	220f      	movs	r2, #15
 80036b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2201      	movs	r2, #1
 80036ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	2200      	movs	r2, #0
 80036c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c8:	187b      	adds	r3, r7, r1
 80036ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003708 <MX_GPIO_Init+0x1d8>)
 80036cc:	0019      	movs	r1, r3
 80036ce:	0010      	movs	r0, r2
 80036d0:	f002 f9c0 	bl	8005a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2005      	movs	r0, #5
 80036da:	f002 f989 	bl	80059f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80036de:	2005      	movs	r0, #5
 80036e0:	f002 f99b 	bl	8005a1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	2007      	movs	r0, #7
 80036ea:	f002 f981 	bl	80059f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80036ee:	2007      	movs	r0, #7
 80036f0:	f002 f993 	bl	8005a1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b00b      	add	sp, #44	@ 0x2c
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	50000400 	.word	0x50000400
 8003704:	50000800 	.word	0x50000800
 8003708:	50000c00 	.word	0x50000c00

0800370c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b08b      	sub	sp, #44	@ 0x2c
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) { //PID and USB timer
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a51      	ldr	r2, [pc, #324]	@ (8003860 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d107      	bne.n	800372e <HAL_TIM_PeriodElapsedCallback+0x22>
    	time_to_rerun_PID_loop = 1;
 800371e:	4b51      	ldr	r3, [pc, #324]	@ (8003864 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8003724:	4b50      	ldr	r3, [pc, #320]	@ (8003868 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003726:	2140      	movs	r1, #64	@ 0x40
 8003728:	0018      	movs	r0, r3
 800372a:	f002 fb39 	bl	8005da0 <HAL_GPIO_TogglePin>
    }

    if (htim->Instance == TIM16) { //Button pressed time counting timer
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d000      	beq.n	800373a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8003738:	e086      	b.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x13c>

    	// ----------- REVISIT THIS. SPEED CARRIES OVER IF DIFFERENT BUTTON IS PRESSED RIGHT AFTER ANOTHER IS RELEASED -----------------

    	double temp_change_speeds[] = {0.5, 1, 2, 5};
 800373a:	2408      	movs	r4, #8
 800373c:	193a      	adds	r2, r7, r4
 800373e:	4b4c      	ldr	r3, [pc, #304]	@ (8003870 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003740:	0010      	movs	r0, r2
 8003742:	0019      	movs	r1, r3
 8003744:	2320      	movs	r3, #32
 8003746:	001a      	movs	r2, r3
 8003748:	f00d f846 	bl	80107d8 <memcpy>
    	static int speed_index = 0;
    	static int period_counter = 0;
    	if(temp_down_btn_is_pressed_down){
 800374c:	4b49      	ldr	r3, [pc, #292]	@ (8003874 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d039      	beq.n	80037c8 <HAL_TIM_PeriodElapsedCallback+0xbc>
			if(HAL_GPIO_ReadPin(Temp_Down_Btn_GPIO_Port, Temp_Down_Btn_Pin) == 0){
 8003754:	23a0      	movs	r3, #160	@ 0xa0
 8003756:	05db      	lsls	r3, r3, #23
 8003758:	2102      	movs	r1, #2
 800375a:	0018      	movs	r0, r3
 800375c:	f002 fae6 	bl	8005d2c <HAL_GPIO_ReadPin>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d124      	bne.n	80037ae <HAL_TIM_PeriodElapsedCallback+0xa2>
				set_temp_inside -= temp_change_speeds[speed_index];
 8003764:	4b44      	ldr	r3, [pc, #272]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	4b44      	ldr	r3, [pc, #272]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	193a      	adds	r2, r7, r4
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f7fe f9e6 	bl	8001b48 <__aeabi_dsub>
 800377c:	0002      	movs	r2, r0
 800377e:	000b      	movs	r3, r1
 8003780:	493d      	ldr	r1, [pc, #244]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003782:	600a      	str	r2, [r1, #0]
 8003784:	604b      	str	r3, [r1, #4]
				period_counter++;
 8003786:	4b3e      	ldr	r3, [pc, #248]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	4b3c      	ldr	r3, [pc, #240]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800378e:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 8003790:	4b3a      	ldr	r3, [pc, #232]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d017      	beq.n	80037c8 <HAL_TIM_PeriodElapsedCallback+0xbc>
					speed_index = period_counter/3;
 8003798:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2103      	movs	r1, #3
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fc fd54 	bl	800024c <__divsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e00c      	b.n	80037c8 <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else{
				temp_down_btn_is_pressed_down = 0;
 80037ae:	4b31      	ldr	r3, [pc, #196]	@ (8003874 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 80037b4:	4b33      	ldr	r3, [pc, #204]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f006 fa30 	bl	8009c1c <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 80037bc:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 80037c2:	4b2e      	ldr	r3, [pc, #184]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
			}
    	}
    	if(temp_up_btn_is_pressed_down){
 80037c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003888 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03b      	beq.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x13c>
			if(HAL_GPIO_ReadPin(Temp_Up_Btn_GPIO_Port, Temp_Up_Btn_Pin) == 0){
 80037d0:	2380      	movs	r3, #128	@ 0x80
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	0010      	movs	r0, r2
 80037da:	f002 faa7 	bl	8005d2c <HAL_GPIO_ReadPin>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d125      	bne.n	800382e <HAL_TIM_PeriodElapsedCallback+0x122>
				set_temp_inside += temp_change_speeds[speed_index];;
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2208      	movs	r2, #8
 80037e8:	18ba      	adds	r2, r7, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f7fc fec0 	bl	800057c <__aeabi_dadd>
 80037fc:	0002      	movs	r2, r0
 80037fe:	000b      	movs	r3, r1
 8003800:	491d      	ldr	r1, [pc, #116]	@ (8003878 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003802:	600a      	str	r2, [r1, #0]
 8003804:	604b      	str	r3, [r1, #4]
				period_counter++;
 8003806:	4b1e      	ldr	r3, [pc, #120]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800380e:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 8003810:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d017      	beq.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x13c>
					speed_index = period_counter/3;
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2103      	movs	r1, #3
 800381e:	0018      	movs	r0, r3
 8003820:	f7fc fd14 	bl	800024c <__divsi3>
 8003824:	0003      	movs	r3, r0
 8003826:	001a      	movs	r2, r3
 8003828:	4b14      	ldr	r3, [pc, #80]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e00c      	b.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x13c>
			}
			else{
				temp_up_btn_is_pressed_down = 0;
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f006 f9f0 	bl	8009c1c <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 800383c:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 8003842:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
			}
    	}

    }

    if (htim->Instance == TIM7) { //Display refresh timer
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a10      	ldr	r2, [pc, #64]	@ (8003890 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d102      	bne.n	8003858 <HAL_TIM_PeriodElapsedCallback+0x14c>
    	time_to_refresh_OLED = 1;
 8003852:	4b10      	ldr	r3, [pc, #64]	@ (8003894 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    }


}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b00b      	add	sp, #44	@ 0x2c
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	40014800 	.word	0x40014800
 8003864:	20000574 	.word	0x20000574
 8003868:	50000800 	.word	0x50000800
 800386c:	40014400 	.word	0x40014400
 8003870:	080132f0 	.word	0x080132f0
 8003874:	2000057c 	.word	0x2000057c
 8003878:	20000588 	.word	0x20000588
 800387c:	200005a8 	.word	0x200005a8
 8003880:	200005ac 	.word	0x200005ac
 8003884:	200004dc 	.word	0x200004dc
 8003888:	20000580 	.word	0x20000580
 800388c:	50000400 	.word	0x50000400
 8003890:	40001400 	.word	0x40001400
 8003894:	20000578 	.word	0x20000578

08003898 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	0002      	movs	r2, r0
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == Temp_Down_Btn_Pin) {
 80038a4:	1dbb      	adds	r3, r7, #6
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d10e      	bne.n	80038ca <HAL_GPIO_EXTI_Falling_Callback+0x32>
    	set_temp_inside -= 0.1 ;
 80038ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003928 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80038b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80038b6:	f7fe f947 	bl	8001b48 <__aeabi_dsub>
 80038ba:	0002      	movs	r2, r0
 80038bc:	000b      	movs	r3, r1
 80038be:	491a      	ldr	r1, [pc, #104]	@ (8003928 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80038c0:	600a      	str	r2, [r1, #0]
 80038c2:	604b      	str	r3, [r1, #4]
    	temp_down_btn_is_pressed_down = 1;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003934 <HAL_GPIO_EXTI_Falling_Callback+0x9c>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == Temp_Up_Btn_Pin) {
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	015b      	lsls	r3, r3, #5
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d10e      	bne.n	80038f4 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
    	set_temp_inside += 0.1 ;
 80038d6:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_GPIO_EXTI_Falling_Callback+0x98>)
 80038e0:	f7fc fe4c 	bl	800057c <__aeabi_dadd>
 80038e4:	0002      	movs	r2, r0
 80038e6:	000b      	movs	r3, r1
 80038e8:	490f      	ldr	r1, [pc, #60]	@ (8003928 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80038ea:	600a      	str	r2, [r1, #0]
 80038ec:	604b      	str	r3, [r1, #4]
    	temp_up_btn_is_pressed_down = 1;
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_GPIO_EXTI_Falling_Callback+0xa0>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    }

    if(is_following_profile){
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_GPIO_EXTI_Falling_Callback+0x6e>
    	send_stop_following_profile();
 80038fc:	f000 fdae 	bl	800445c <send_stop_following_profile>
    	is_following_profile = 0;
 8003900:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    }

    htim16.Instance->CNT = 0;
 8003906:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE); // So that timer ran for the first time does not immediately raise an interrupt
 800390e:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2202      	movs	r2, #2
 8003914:	4252      	negs	r2, r2
 8003916:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim16);
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 800391a:	0018      	movs	r0, r3
 800391c:	f006 f922 	bl	8009b64 <HAL_TIM_Base_Start_IT>
}
 8003920:	46c0      	nop			@ (mov r8, r8)
 8003922:	46bd      	mov	sp, r7
 8003924:	b002      	add	sp, #8
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000588 	.word	0x20000588
 800392c:	9999999a 	.word	0x9999999a
 8003930:	3fb99999 	.word	0x3fb99999
 8003934:	2000057c 	.word	0x2000057c
 8003938:	20000580 	.word	0x20000580
 800393c:	20000584 	.word	0x20000584
 8003940:	200004dc 	.word	0x200004dc

08003944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003948:	b672      	cpsid	i
}
 800394a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800394c:	46c0      	nop			@ (mov r8, r8)
 800394e:	e7fd      	b.n	800394c <Error_Handler+0x8>

08003950 <compute_pid_output>:
// Temp points (realtive to room temperature) where we'll estimate PID integral part values
static int Integral_Temp_Table[] = {-15,-10,-5,0,5,10,15,20,25,30,35,40};
// These values have not been found experimentally but rather are assigned logically and roughly making asssumptionns
static double Integral_Part_Table[] = {-12,-8,-4,0,1.5,3,4.5,6,7.5,9,10.5,12};

double compute_pid_output(double current_temp, double set_temp, double outside_temp, double *Kp_part, double *Ki_part, double *Kd_part){
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60b8      	str	r0, [r7, #8]
 8003958:	60f9      	str	r1, [r7, #12]
 800395a:	603a      	str	r2, [r7, #0]
 800395c:	607b      	str	r3, [r7, #4]
	static double integral = 0;
	static double previous_error[Number_Of_points_For_Kd_calc] = {0};
	static double previous_set_temp = 0;
	static int points_collected_since_set_temp_reset = 0;
	static double integral_estimate = 0;
	double error = 0;
 800395e:	2200      	movs	r2, #0
 8003960:	2300      	movs	r3, #0
 8003962:	613a      	str	r2, [r7, #16]
 8003964:	617b      	str	r3, [r7, #20]

	if(set_temp != previous_set_temp){
 8003966:	4b84      	ldr	r3, [pc, #528]	@ (8003b78 <compute_pid_output+0x228>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	6838      	ldr	r0, [r7, #0]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	f7fc fd68 	bl	8000444 <__aeabi_dcmpeq>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d111      	bne.n	800399c <compute_pid_output+0x4c>
		memset(previous_error, 0, Number_Of_points_For_Kd_calc*sizeof(double));
 8003978:	23c8      	movs	r3, #200	@ 0xc8
 800397a:	005a      	lsls	r2, r3, #1
 800397c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b7c <compute_pid_output+0x22c>)
 800397e:	2100      	movs	r1, #0
 8003980:	0018      	movs	r0, r3
 8003982:	f00c fe85 	bl	8010690 <memset>
		points_collected_since_set_temp_reset = 0;
 8003986:	4b7e      	ldr	r3, [pc, #504]	@ (8003b80 <compute_pid_output+0x230>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
		integral_on = 0;
 800398c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b84 <compute_pid_output+0x234>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
		integral = 0;
 8003992:	497d      	ldr	r1, [pc, #500]	@ (8003b88 <compute_pid_output+0x238>)
 8003994:	2200      	movs	r2, #0
 8003996:	2300      	movs	r3, #0
 8003998:	600a      	str	r2, [r1, #0]
 800399a:	604b      	str	r3, [r1, #4]
	}

	previous_set_temp = set_temp;
 800399c:	4976      	ldr	r1, [pc, #472]	@ (8003b78 <compute_pid_output+0x228>)
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	600a      	str	r2, [r1, #0]
 80039a4:	604b      	str	r3, [r1, #4]
	error = set_temp - current_temp;
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	f7fe f8cb 	bl	8001b48 <__aeabi_dsub>
 80039b2:	0002      	movs	r2, r0
 80039b4:	000b      	movs	r3, r1
 80039b6:	613a      	str	r2, [r7, #16]
 80039b8:	617b      	str	r3, [r7, #20]

	if( (abs(current_temp - set_temp) / set_temp) <= 1 - Ki_introduction_point && integral_on == 0){
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68b8      	ldr	r0, [r7, #8]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	f7fe f8c1 	bl	8001b48 <__aeabi_dsub>
 80039c6:	0002      	movs	r2, r0
 80039c8:	000b      	movs	r3, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	f7fe fce7 	bl	80023a0 <__aeabi_d2iz>
 80039d2:	0003      	movs	r3, r0
 80039d4:	17da      	asrs	r2, r3, #31
 80039d6:	189b      	adds	r3, r3, r2
 80039d8:	4053      	eors	r3, r2
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fe fd1c 	bl	8002418 <__aeabi_i2d>
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f7fd f990 	bl	8000d08 <__aeabi_ddiv>
 80039e8:	0002      	movs	r2, r0
 80039ea:	000b      	movs	r3, r1
 80039ec:	0010      	movs	r0, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	4a66      	ldr	r2, [pc, #408]	@ (8003b8c <compute_pid_output+0x23c>)
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <compute_pid_output+0x240>)
 80039f4:	f7fc fd36 	bl	8000464 <__aeabi_dcmple>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d017      	beq.n	8003a2c <compute_pid_output+0xdc>
 80039fc:	4b61      	ldr	r3, [pc, #388]	@ (8003b84 <compute_pid_output+0x234>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d113      	bne.n	8003a2c <compute_pid_output+0xdc>
		integral_estimate = assign_integral_value(set_temp, outside_temp);
 8003a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	f000 f8cc 	bl	8003ba8 <assign_integral_value>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	495f      	ldr	r1, [pc, #380]	@ (8003b94 <compute_pid_output+0x244>)
 8003a16:	600a      	str	r2, [r1, #0]
 8003a18:	604b      	str	r3, [r1, #4]
		integral = integral_estimate;
 8003a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003b94 <compute_pid_output+0x244>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4959      	ldr	r1, [pc, #356]	@ (8003b88 <compute_pid_output+0x238>)
 8003a22:	600a      	str	r2, [r1, #0]
 8003a24:	604b      	str	r3, [r1, #4]
		integral_on = 1;
 8003a26:	4b57      	ldr	r3, [pc, #348]	@ (8003b84 <compute_pid_output+0x234>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
	}

	if(integral_on && abs(Ki*integral_estimate - (Ki*(integral + error * dT))) <= Integral_max_deviation ){
 8003a2c:	4b55      	ldr	r3, [pc, #340]	@ (8003b84 <compute_pid_output+0x234>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05d      	beq.n	8003af0 <compute_pid_output+0x1a0>
 8003a34:	4b57      	ldr	r3, [pc, #348]	@ (8003b94 <compute_pid_output+0x244>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	4a57      	ldr	r2, [pc, #348]	@ (8003b98 <compute_pid_output+0x248>)
 8003a3c:	4b57      	ldr	r3, [pc, #348]	@ (8003b9c <compute_pid_output+0x24c>)
 8003a3e:	f7fd fd9d 	bl	800157c <__aeabi_dmul>
 8003a42:	0002      	movs	r2, r0
 8003a44:	000b      	movs	r3, r1
 8003a46:	0014      	movs	r4, r2
 8003a48:	001d      	movs	r5, r3
 8003a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b88 <compute_pid_output+0x238>)
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f7fc fd92 	bl	800057c <__aeabi_dadd>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	000b      	movs	r3, r1
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4a4d      	ldr	r2, [pc, #308]	@ (8003b98 <compute_pid_output+0x248>)
 8003a62:	4b4e      	ldr	r3, [pc, #312]	@ (8003b9c <compute_pid_output+0x24c>)
 8003a64:	f7fd fd8a 	bl	800157c <__aeabi_dmul>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	000b      	movs	r3, r1
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	0029      	movs	r1, r5
 8003a70:	f7fe f86a 	bl	8001b48 <__aeabi_dsub>
 8003a74:	0002      	movs	r2, r0
 8003a76:	000b      	movs	r3, r1
 8003a78:	0010      	movs	r0, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	f7fe fc90 	bl	80023a0 <__aeabi_d2iz>
 8003a80:	0003      	movs	r3, r0
 8003a82:	3302      	adds	r3, #2
 8003a84:	db34      	blt.n	8003af0 <compute_pid_output+0x1a0>
 8003a86:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <compute_pid_output+0x244>)
 8003a88:	6818      	ldr	r0, [r3, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <compute_pid_output+0x248>)
 8003a8e:	4b43      	ldr	r3, [pc, #268]	@ (8003b9c <compute_pid_output+0x24c>)
 8003a90:	f7fd fd74 	bl	800157c <__aeabi_dmul>
 8003a94:	0002      	movs	r2, r0
 8003a96:	000b      	movs	r3, r1
 8003a98:	0014      	movs	r4, r2
 8003a9a:	001d      	movs	r5, r3
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <compute_pid_output+0x238>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f7fc fd69 	bl	800057c <__aeabi_dadd>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	000b      	movs	r3, r1
 8003aae:	0010      	movs	r0, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	4a39      	ldr	r2, [pc, #228]	@ (8003b98 <compute_pid_output+0x248>)
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <compute_pid_output+0x24c>)
 8003ab6:	f7fd fd61 	bl	800157c <__aeabi_dmul>
 8003aba:	0002      	movs	r2, r0
 8003abc:	000b      	movs	r3, r1
 8003abe:	0020      	movs	r0, r4
 8003ac0:	0029      	movs	r1, r5
 8003ac2:	f7fe f841 	bl	8001b48 <__aeabi_dsub>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	000b      	movs	r3, r1
 8003aca:	0010      	movs	r0, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	f7fe fc67 	bl	80023a0 <__aeabi_d2iz>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	dc0b      	bgt.n	8003af0 <compute_pid_output+0x1a0>
		integral += error * dT;
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <compute_pid_output+0x238>)
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f7fc fd4b 	bl	800057c <__aeabi_dadd>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	000b      	movs	r3, r1
 8003aea:	4927      	ldr	r1, [pc, #156]	@ (8003b88 <compute_pid_output+0x238>)
 8003aec:	600a      	str	r2, [r1, #0]
 8003aee:	604b      	str	r3, [r1, #4]
	}

	(*Kp_part) = Kp * error;
 8003af0:	2200      	movs	r2, #0
 8003af2:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba0 <compute_pid_output+0x250>)
 8003af4:	6938      	ldr	r0, [r7, #16]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	f7fd fd40 	bl	800157c <__aeabi_dmul>
 8003afc:	0002      	movs	r2, r0
 8003afe:	000b      	movs	r3, r1
 8003b00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b02:	600a      	str	r2, [r1, #0]
 8003b04:	604b      	str	r3, [r1, #4]
	(*Ki_part) = Ki * integral;
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <compute_pid_output+0x238>)
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <compute_pid_output+0x248>)
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <compute_pid_output+0x24c>)
 8003b10:	f7fd fd34 	bl	800157c <__aeabi_dmul>
 8003b14:	0002      	movs	r2, r0
 8003b16:	000b      	movs	r3, r1
 8003b18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b1a:	600a      	str	r2, [r1, #0]
 8003b1c:	604b      	str	r3, [r1, #4]
	(*Kd_part) = Kd * compute_derivative_part(error, previous_error, points_collected_since_set_temp_reset);
 8003b1e:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <compute_pid_output+0x230>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <compute_pid_output+0x22c>)
 8003b24:	6938      	ldr	r0, [r7, #16]
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	f000 f8bc 	bl	8003ca4 <compute_derivative_part>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <compute_pid_output+0x254>)
 8003b30:	f7fd fd24 	bl	800157c <__aeabi_dmul>
 8003b34:	0002      	movs	r2, r0
 8003b36:	000b      	movs	r3, r1
 8003b38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b3a:	600a      	str	r2, [r1, #0]
 8003b3c:	604b      	str	r3, [r1, #4]
	points_collected_since_set_temp_reset++;
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <compute_pid_output+0x230>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	4b0e      	ldr	r3, [pc, #56]	@ (8003b80 <compute_pid_output+0x230>)
 8003b46:	601a      	str	r2, [r3, #0]

	return (*Kp_part) + (*Ki_part) + (*Kd_part);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f7fc fd12 	bl	800057c <__aeabi_dadd>
 8003b58:	0002      	movs	r2, r0
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f7fc fd09 	bl	800057c <__aeabi_dadd>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	000b      	movs	r3, r1
}
 8003b6e:	0010      	movs	r0, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bdb0      	pop	{r4, r5, r7, pc}
 8003b78:	200005b0 	.word	0x200005b0
 8003b7c:	200005b8 	.word	0x200005b8
 8003b80:	20000748 	.word	0x20000748
 8003b84:	2000074c 	.word	0x2000074c
 8003b88:	20000750 	.word	0x20000750
 8003b8c:	99999998 	.word	0x99999998
 8003b90:	3fb99999 	.word	0x3fb99999
 8003b94:	20000758 	.word	0x20000758
 8003b98:	47ae147b 	.word	0x47ae147b
 8003b9c:	3f847ae1 	.word	0x3f847ae1
 8003ba0:	40120000 	.word	0x40120000
 8003ba4:	40813000 	.word	0x40813000

08003ba8 <assign_integral_value>:

double assign_integral_value(double set_temp, double outside_temp){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60b8      	str	r0, [r7, #8]
 8003bb0:	60f9      	str	r1, [r7, #12]
 8003bb2:	603a      	str	r2, [r7, #0]
 8003bb4:	607b      	str	r3, [r7, #4]
	double temp_diff = set_temp - outside_temp;
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68b8      	ldr	r0, [r7, #8]
 8003bbc:	68f9      	ldr	r1, [r7, #12]
 8003bbe:	f7fd ffc3 	bl	8001b48 <__aeabi_dsub>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	000b      	movs	r3, r1
 8003bc6:	613a      	str	r2, [r7, #16]
 8003bc8:	617b      	str	r3, [r7, #20]
	double previous_closeness = 999;
 8003bca:	2200      	movs	r2, #0
 8003bcc:	4b30      	ldr	r3, [pc, #192]	@ (8003c90 <assign_integral_value+0xe8>)
 8003bce:	623a      	str	r2, [r7, #32]
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < 12; i++){
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	e051      	b.n	8003c7c <assign_integral_value+0xd4>
		if (abs(temp_diff - Integral_Temp_Table[i]) < previous_closeness){
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c94 <assign_integral_value+0xec>)
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	58d3      	ldr	r3, [r2, r3]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7fe fc19 	bl	8002418 <__aeabi_i2d>
 8003be6:	0002      	movs	r2, r0
 8003be8:	000b      	movs	r3, r1
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	f7fd ffab 	bl	8001b48 <__aeabi_dsub>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	000b      	movs	r3, r1
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	f7fe fbd1 	bl	80023a0 <__aeabi_d2iz>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	17da      	asrs	r2, r3, #31
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	4053      	eors	r3, r2
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fe fc06 	bl	8002418 <__aeabi_i2d>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	000b      	movs	r3, r1
 8003c10:	6a38      	ldr	r0, [r7, #32]
 8003c12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c14:	f7fc fc30 	bl	8000478 <__aeabi_dcmpgt>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d01e      	beq.n	8003c5a <assign_integral_value+0xb2>
			previous_closeness = abs(temp_diff - Integral_Temp_Table[i]);
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <assign_integral_value+0xec>)
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	0092      	lsls	r2, r2, #2
 8003c22:	58d3      	ldr	r3, [r2, r3]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fe fbf7 	bl	8002418 <__aeabi_i2d>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	000b      	movs	r3, r1
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	6979      	ldr	r1, [r7, #20]
 8003c32:	f7fd ff89 	bl	8001b48 <__aeabi_dsub>
 8003c36:	0002      	movs	r2, r0
 8003c38:	000b      	movs	r3, r1
 8003c3a:	0010      	movs	r0, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	f7fe fbaf 	bl	80023a0 <__aeabi_d2iz>
 8003c42:	0003      	movs	r3, r0
 8003c44:	17da      	asrs	r2, r3, #31
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	4053      	eors	r3, r2
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fe fbe4 	bl	8002418 <__aeabi_i2d>
 8003c50:	0002      	movs	r2, r0
 8003c52:	000b      	movs	r3, r1
 8003c54:	623a      	str	r2, [r7, #32]
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c58:	e00d      	b.n	8003c76 <assign_integral_value+0xce>
		}
		else{
			return Integral_Part_Table[i-1] / Ki;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c98 <assign_integral_value+0xf0>)
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	4a0c      	ldr	r2, [pc, #48]	@ (8003c9c <assign_integral_value+0xf4>)
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <assign_integral_value+0xf8>)
 8003c6c:	f7fd f84c 	bl	8000d08 <__aeabi_ddiv>
 8003c70:	0002      	movs	r2, r0
 8003c72:	000b      	movs	r3, r1
 8003c74:	e007      	b.n	8003c86 <assign_integral_value+0xde>
	for(int i = 0; i < 12; i++){
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b0b      	cmp	r3, #11
 8003c80:	ddaa      	ble.n	8003bd8 <assign_integral_value+0x30>
		}
	}
	return 0;
 8003c82:	2200      	movs	r2, #0
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0010      	movs	r0, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b00a      	add	sp, #40	@ 0x28
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	408f3800 	.word	0x408f3800
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000030 	.word	0x20000030
 8003c9c:	47ae147b 	.word	0x47ae147b
 8003ca0:	3f847ae1 	.word	0x3f847ae1

08003ca4 <compute_derivative_part>:

double compute_derivative_part(double current_error, double *error_history, int points_collected_since_set_temp_reset){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60b8      	str	r0, [r7, #8]
 8003cac:	60f9      	str	r1, [r7, #12]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	double avg_speed = 0;
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613a      	str	r2, [r7, #16]
 8003cb8:	617b      	str	r3, [r7, #20]

	// Push every element to the left and add to the right
	for(int i = 0; i < Number_Of_points_For_Kd_calc -1; i++){
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbe:	e00f      	b.n	8003ce0 <compute_derivative_part+0x3c>
		error_history[i] = error_history[i+1];
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	18d3      	adds	r3, r2, r3
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	00d2      	lsls	r2, r2, #3
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	1889      	adds	r1, r1, r2
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	600a      	str	r2, [r1, #0]
 8003cd8:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < Number_Of_points_For_Kd_calc -1; i++){
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	3301      	adds	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	2b30      	cmp	r3, #48	@ 0x30
 8003ce4:	ddec      	ble.n	8003cc0 <compute_derivative_part+0x1c>
	}
	error_history[Number_Of_points_For_Kd_calc-1] = current_error;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3389      	adds	r3, #137	@ 0x89
 8003cea:	33ff      	adds	r3, #255	@ 0xff
 8003cec:	0019      	movs	r1, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	600a      	str	r2, [r1, #0]
 8003cf4:	604b      	str	r3, [r1, #4]

	// Calc the avg speed
	double earliest_error = 0;
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61ba      	str	r2, [r7, #24]
 8003cfc:	61fb      	str	r3, [r7, #28]
	if (points_collected_since_set_temp_reset < Number_Of_points_For_Kd_calc){
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b31      	cmp	r3, #49	@ 0x31
 8003d02:	dc0a      	bgt.n	8003d1a <compute_derivative_part+0x76>
		earliest_error = error_history[Number_Of_points_For_Kd_calc - 1 - points_collected_since_set_temp_reset];
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2231      	movs	r2, #49	@ 0x31
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	18d3      	adds	r3, r2, r3
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	61ba      	str	r2, [r7, #24]
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	e004      	b.n	8003d24 <compute_derivative_part+0x80>
	}
	else{
		earliest_error = error_history[0];
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	61ba      	str	r2, [r7, #24]
 8003d22:	61fb      	str	r3, [r7, #28]
	}
	avg_speed = (error_history[Number_Of_points_For_Kd_calc-1] - earliest_error) / (Number_Of_points_For_Kd_calc*dT);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3389      	adds	r3, #137	@ 0x89
 8003d28:	33ff      	adds	r3, #255	@ 0xff
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f7fd ff09 	bl	8001b48 <__aeabi_dsub>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	0010      	movs	r0, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	2200      	movs	r2, #0
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <compute_derivative_part+0xb8>)
 8003d42:	f7fc ffe1 	bl	8000d08 <__aeabi_ddiv>
 8003d46:	0002      	movs	r2, r0
 8003d48:	000b      	movs	r3, r1
 8003d4a:	613a      	str	r2, [r7, #16]
 8003d4c:	617b      	str	r3, [r7, #20]
	return avg_speed;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	0010      	movs	r0, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b00a      	add	sp, #40	@ 0x28
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40490000 	.word	0x40490000

08003d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d66:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d72:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	2201      	movs	r2, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	0549      	lsls	r1, r1, #21
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d8c:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <HAL_MspInit+0x4c>)
 8003d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	055b      	lsls	r3, r3, #21
 8003d94:	4013      	ands	r3, r2
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003d9a:	23c0      	movs	r3, #192	@ 0xc0
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 fcce 	bl	8004740 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b08b      	sub	sp, #44	@ 0x2c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	2414      	movs	r4, #20
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	2314      	movs	r3, #20
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	f00c fc64 	bl	8010690 <memset>
  if(hadc->Instance==ADC1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003e40 <HAL_ADC_MspInit+0x90>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d131      	bne.n	8003e36 <HAL_ADC_MspInit+0x86>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003dd8:	2180      	movs	r1, #128	@ 0x80
 8003dda:	0349      	lsls	r1, r1, #13
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003de0:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	035b      	lsls	r3, r3, #13
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003df2:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dfa:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_ADC_MspInit+0x94>)
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	2203      	movs	r2, #3
 8003e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e18:	193a      	adds	r2, r7, r4
 8003e1a:	23a0      	movs	r3, #160	@ 0xa0
 8003e1c:	05db      	lsls	r3, r3, #23
 8003e1e:	0011      	movs	r1, r2
 8003e20:	0018      	movs	r0, r3
 8003e22:	f001 fe17 	bl	8005a54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	200c      	movs	r0, #12
 8003e2c:	f001 fde0 	bl	80059f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003e30:	200c      	movs	r0, #12
 8003e32:	f001 fdf2 	bl	8005a1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b00b      	add	sp, #44	@ 0x2c
 8003e3c:	bd90      	pop	{r4, r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	40012400 	.word	0x40012400
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e48:	b590      	push	{r4, r7, lr}
 8003e4a:	b097      	sub	sp, #92	@ 0x5c
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	2344      	movs	r3, #68	@ 0x44
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	0018      	movs	r0, r3
 8003e56:	2314      	movs	r3, #20
 8003e58:	001a      	movs	r2, r3
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f00c fc18 	bl	8010690 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e60:	2418      	movs	r4, #24
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	0018      	movs	r0, r3
 8003e66:	232c      	movs	r3, #44	@ 0x2c
 8003e68:	001a      	movs	r2, r3
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f00c fc10 	bl	8010690 <memset>
  if(hi2c->Instance==I2C2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a35      	ldr	r2, [pc, #212]	@ (8003f4c <HAL_I2C_MspInit+0x104>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d163      	bne.n	8003f42 <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003e7a:	193b      	adds	r3, r7, r4
 8003e7c:	2240      	movs	r2, #64	@ 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003e80:	193b      	adds	r3, r7, r4
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e86:	193b      	adds	r3, r7, r4
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f005 f87b 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003e92:	f7ff fd57 	bl	8003944 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e96:	4b2e      	ldr	r3, [pc, #184]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eb2:	4b27      	ldr	r3, [pc, #156]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003eba:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ec6:	2144      	movs	r1, #68	@ 0x44
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	01d2      	lsls	r2, r2, #7
 8003ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ed0:	000c      	movs	r4, r1
 8003ed2:	193b      	adds	r3, r7, r4
 8003ed4:	2212      	movs	r2, #18
 8003ed6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	2201      	movs	r2, #1
 8003edc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	2206      	movs	r2, #6
 8003ee8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_I2C_MspInit+0x10c>)
 8003eee:	0019      	movs	r1, r3
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	f001 fdaf 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ef6:	0021      	movs	r1, r4
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	2280      	movs	r2, #128	@ 0x80
 8003efc:	0092      	lsls	r2, r2, #2
 8003efe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2212      	movs	r2, #18
 8003f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2201      	movs	r2, #1
 8003f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2208      	movs	r2, #8
 8003f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f18:	187a      	adds	r2, r7, r1
 8003f1a:	23a0      	movs	r3, #160	@ 0xa0
 8003f1c:	05db      	lsls	r3, r3, #23
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f001 fd97 	bl	8005a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f26:	4b0a      	ldr	r3, [pc, #40]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003f28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003f2c:	2180      	movs	r1, #128	@ 0x80
 8003f2e:	03c9      	lsls	r1, r1, #15
 8003f30:	430a      	orrs	r2, r1
 8003f32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_I2C_MspInit+0x108>)
 8003f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f38:	2380      	movs	r3, #128	@ 0x80
 8003f3a:	03db      	lsls	r3, r3, #15
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b017      	add	sp, #92	@ 0x5c
 8003f48:	bd90      	pop	{r4, r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	40005800 	.word	0x40005800
 8003f50:	40021000 	.word	0x40021000
 8003f54:	50000400 	.word	0x50000400

08003f58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b08b      	sub	sp, #44	@ 0x2c
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	2414      	movs	r4, #20
 8003f62:	193b      	adds	r3, r7, r4
 8003f64:	0018      	movs	r0, r3
 8003f66:	2314      	movs	r3, #20
 8003f68:	001a      	movs	r2, r3
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	f00c fb90 	bl	8010690 <memset>
  if(hspi->Instance==SPI2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a26      	ldr	r2, [pc, #152]	@ (8004010 <HAL_SPI_MspInit+0xb8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d146      	bne.n	8004008 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f7e:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003f80:	2180      	movs	r1, #128	@ 0x80
 8003f82:	01c9      	lsls	r1, r1, #7
 8003f84:	430a      	orrs	r2, r1
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f88:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b1f      	ldr	r3, [pc, #124]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8004014 <HAL_SPI_MspInit+0xbc>)
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	2209      	movs	r2, #9
 8003fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	193b      	adds	r3, r7, r4
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fcc:	193a      	adds	r2, r7, r4
 8003fce:	23a0      	movs	r3, #160	@ 0xa0
 8003fd0:	05db      	lsls	r3, r3, #23
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f001 fd3d 	bl	8005a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fda:	0021      	movs	r1, r4
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2210      	movs	r2, #16
 8003fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffa:	187a      	adds	r2, r7, r1
 8003ffc:	23a0      	movs	r3, #160	@ 0xa0
 8003ffe:	05db      	lsls	r3, r3, #23
 8004000:	0011      	movs	r1, r2
 8004002:	0018      	movs	r0, r3
 8004004:	f001 fd26 	bl	8005a54 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b00b      	add	sp, #44	@ 0x2c
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	40003800 	.word	0x40003800
 8004014:	40021000 	.word	0x40021000

08004018 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a29      	ldr	r2, [pc, #164]	@ (80040cc <HAL_TIM_Base_MspInit+0xb4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d114      	bne.n	8004054 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800402a:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 800402c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402e:	4b28      	ldr	r3, [pc, #160]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004030:	2120      	movs	r1, #32
 8004032:	430a      	orrs	r2, r1
 8004034:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2012      	movs	r0, #18
 8004048:	f001 fcd2 	bl	80059f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800404c:	2012      	movs	r0, #18
 800404e:	f001 fce4 	bl	8005a1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004052:	e036      	b.n	80040c2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM16)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_TIM_Base_MspInit+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d116      	bne.n	800408c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800405e:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004060:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004062:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004064:	2180      	movs	r1, #128	@ 0x80
 8004066:	0289      	lsls	r1, r1, #10
 8004068:	430a      	orrs	r2, r1
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 800406e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2015      	movs	r0, #21
 8004080:	f001 fcb6 	bl	80059f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004084:	2015      	movs	r0, #21
 8004086:	f001 fcc8 	bl	8005a1a <HAL_NVIC_EnableIRQ>
}
 800408a:	e01a      	b.n	80040c2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM17)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a11      	ldr	r2, [pc, #68]	@ (80040d8 <HAL_TIM_Base_MspInit+0xc0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d115      	bne.n	80040c2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004096:	4b0e      	ldr	r3, [pc, #56]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 8004098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	02c9      	lsls	r1, r1, #11
 80040a0:	430a      	orrs	r2, r1
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80040a4:	4b0a      	ldr	r3, [pc, #40]	@ (80040d0 <HAL_TIM_Base_MspInit+0xb8>)
 80040a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a8:	2380      	movs	r3, #128	@ 0x80
 80040aa:	02db      	lsls	r3, r3, #11
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80040b2:	2200      	movs	r2, #0
 80040b4:	2100      	movs	r1, #0
 80040b6:	2016      	movs	r0, #22
 80040b8:	f001 fc9a 	bl	80059f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80040bc:	2016      	movs	r0, #22
 80040be:	f001 fcac 	bl	8005a1a <HAL_NVIC_EnableIRQ>
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b006      	add	sp, #24
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	40001400 	.word	0x40001400
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	e7fd      	b.n	80040e0 <NMI_Handler+0x4>

080040e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040e8:	46c0      	nop			@ (mov r8, r8)
 80040ea:	e7fd      	b.n	80040e8 <HardFault_Handler+0x4>

080040ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004104:	f000 fadc 	bl	80046c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004108:	46c0      	nop			@ (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Down_Btn_Pin);
 8004112:	2002      	movs	r0, #2
 8004114:	f001 fe60 	bl	8005dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Up_Btn_Pin);
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	015b      	lsls	r3, r3, #5
 8004126:	0018      	movs	r0, r3
 8004128:	f001 fe56 	bl	8005dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800412c:	46c0      	nop			@ (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <USB_IRQHandler>:

/**
  * @brief This function handles USB interrupt.
  */
void USB_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8004138:	4b03      	ldr	r3, [pc, #12]	@ (8004148 <USB_IRQHandler+0x14>)
 800413a:	0018      	movs	r0, r3
 800413c:	f002 fe4a 	bl	8006dd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004140:	46c0      	nop			@ (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	20001c5c 	.word	0x20001c5c

0800414c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 Interrupt.
  */
void ADC1_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <ADC1_IRQHandler+0x14>)
 8004152:	0018      	movs	r0, r3
 8004154:	f000 ff52 	bl	8004ffc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	20000374 	.word	0x20000374

08004164 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global Interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004168:	4b03      	ldr	r3, [pc, #12]	@ (8004178 <TIM7_IRQHandler+0x14>)
 800416a:	0018      	movs	r0, r3
 800416c:	f005 fd84 	bl	8009c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	20000490 	.word	0x20000490

0800417c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <TIM16_IRQHandler+0x14>)
 8004182:	0018      	movs	r0, r3
 8004184:	f005 fd78 	bl	8009c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004188:	46c0      	nop			@ (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	200004dc 	.word	0x200004dc

08004194 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <TIM17_IRQHandler+0x14>)
 800419a:	0018      	movs	r0, r3
 800419c:	f005 fd6c 	bl	8009c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	20000528 	.word	0x20000528

080041ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  return 1;
 80041b0:	2301      	movs	r3, #1
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_kill>:

int _kill(int pid, int sig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041c2:	f00c fad1 	bl	8010768 <__errno>
 80041c6:	0003      	movs	r3, r0
 80041c8:	2216      	movs	r2, #22
 80041ca:	601a      	str	r2, [r3, #0]
  return -1;
 80041cc:	2301      	movs	r3, #1
 80041ce:	425b      	negs	r3, r3
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_exit>:

void _exit (int status)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041e0:	2301      	movs	r3, #1
 80041e2:	425a      	negs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0011      	movs	r1, r2
 80041e8:	0018      	movs	r0, r3
 80041ea:	f7ff ffe5 	bl	80041b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	e7fd      	b.n	80041ee <_exit+0x16>

080041f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e00a      	b.n	800421a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004204:	e000      	b.n	8004208 <_read+0x16>
 8004206:	bf00      	nop
 8004208:	0001      	movs	r1, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	60ba      	str	r2, [r7, #8]
 8004210:	b2ca      	uxtb	r2, r1
 8004212:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	3301      	adds	r3, #1
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	dbf0      	blt.n	8004204 <_read+0x12>
  }

  return len;
 8004222:	687b      	ldr	r3, [r7, #4]
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b006      	add	sp, #24
 800422a:	bd80      	pop	{r7, pc}

0800422c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	e009      	b.n	8004252 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	60ba      	str	r2, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	0018      	movs	r0, r3
 8004248:	e000      	b.n	800424c <_write+0x20>
 800424a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3301      	adds	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	dbf1      	blt.n	800423e <_write+0x12>
  }
  return len;
 800425a:	687b      	ldr	r3, [r7, #4]
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b006      	add	sp, #24
 8004262:	bd80      	pop	{r7, pc}

08004264 <_close>:

int _close(int file)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800426c:	2301      	movs	r3, #1
 800426e:	425b      	negs	r3, r3
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2280      	movs	r2, #128	@ 0x80
 8004286:	0192      	lsls	r2, r2, #6
 8004288:	605a      	str	r2, [r3, #4]
  return 0;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <_isatty>:

int _isatty(int file)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800429c:	2301      	movs	r3, #1
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	0018      	movs	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}

080042bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c4:	4a14      	ldr	r2, [pc, #80]	@ (8004318 <_sbrk+0x5c>)
 80042c6:	4b15      	ldr	r3, [pc, #84]	@ (800431c <_sbrk+0x60>)
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042d0:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <_sbrk+0x64>)
 80042da:	4a12      	ldr	r2, [pc, #72]	@ (8004324 <_sbrk+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042de:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <_sbrk+0x64>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d207      	bcs.n	80042fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042ec:	f00c fa3c 	bl	8010768 <__errno>
 80042f0:	0003      	movs	r3, r0
 80042f2:	220c      	movs	r2, #12
 80042f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	425b      	negs	r3, r3
 80042fa:	e009      	b.n	8004310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042fc:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <_sbrk+0x64>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004302:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <_sbrk+0x64>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	18d2      	adds	r2, r2, r3
 800430a:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <_sbrk+0x64>)
 800430c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20024000 	.word	0x20024000
 800431c:	00000400 	.word	0x00000400
 8004320:	20000760 	.word	0x20000760
 8004324:	200022a8 	.word	0x200022a8

08004328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800432c:	46c0      	nop			@ (mov r8, r8)
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <read_temp>:
#include "main.h"
#include "tmp1075.h"

int read_temp(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, double *temp){
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b089      	sub	sp, #36	@ 0x24
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	200b      	movs	r0, #11
 8004340:	183b      	adds	r3, r7, r0
 8004342:	1c0a      	adds	r2, r1, #0
 8004344:	701a      	strb	r2, [r3, #0]
	uint8_t raw_data[2] = {0};
 8004346:	2414      	movs	r4, #20
 8004348:	193b      	adds	r3, r7, r4
 800434a:	2200      	movs	r2, #0
 800434c:	801a      	strh	r2, [r3, #0]
	if(read_reg(hi2c,dev_addr,TEMP_reg_addr,raw_data,2) != 0)
 800434e:	183b      	adds	r3, r7, r0
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b299      	uxth	r1, r3
 8004354:	193b      	adds	r3, r7, r4
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	2202      	movs	r2, #2
 800435a:	9200      	str	r2, [sp, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	f000 f821 	bl	80043a4 <read_reg>
 8004362:	1e03      	subs	r3, r0, #0
 8004364:	d001      	beq.n	800436a <read_temp+0x36>
		return 1;
 8004366:	2301      	movs	r3, #1
 8004368:	e015      	b.n	8004396 <read_temp+0x62>
	*temp = ((raw_data[0] << 4) | (raw_data[1]) >> 4) * 0.0625; //0.0625C per LSB
 800436a:	2214      	movs	r2, #20
 800436c:	18bb      	adds	r3, r7, r2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	18ba      	adds	r2, r7, r2
 8004374:	7852      	ldrb	r2, [r2, #1]
 8004376:	0912      	lsrs	r2, r2, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	4313      	orrs	r3, r2
 800437c:	0018      	movs	r0, r3
 800437e:	f7fe f84b 	bl	8002418 <__aeabi_i2d>
 8004382:	2200      	movs	r2, #0
 8004384:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <read_temp+0x6c>)
 8004386:	f7fd f8f9 	bl	800157c <__aeabi_dmul>
 800438a:	0002      	movs	r2, r0
 800438c:	000b      	movs	r3, r1
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	600a      	str	r2, [r1, #0]
 8004392:	604b      	str	r3, [r1, #4]
	return 0;
 8004394:	2300      	movs	r3, #0
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b007      	add	sp, #28
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	3fb00000 	.word	0x3fb00000

080043a4 <read_reg>:

int read_reg(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint8_t reg_addr, uint8_t *rx_data, uint8_t size){
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	0008      	movs	r0, r1
 80043ae:	0011      	movs	r1, r2
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	240a      	movs	r4, #10
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	2009      	movs	r0, #9
 80043bc:	183b      	adds	r3, r7, r0
 80043be:	1c0a      	adds	r2, r1, #0
 80043c0:	701a      	strb	r2, [r3, #0]

	if(HAL_I2C_Master_Transmit(hi2c, dev_addr, &reg_addr, 1, 100) != HAL_OK)
 80043c2:	183a      	adds	r2, r7, r0
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	8819      	ldrh	r1, [r3, #0]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	2364      	movs	r3, #100	@ 0x64
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2301      	movs	r3, #1
 80043d0:	f001 fddc 	bl	8005f8c <HAL_I2C_Master_Transmit>
 80043d4:	1e03      	subs	r3, r0, #0
 80043d6:	d001      	beq.n	80043dc <read_reg+0x38>
		return 1;
 80043d8:	2301      	movs	r3, #1
 80043da:	e012      	b.n	8004402 <read_reg+0x5e>

	if(HAL_I2C_Master_Receive(hi2c, dev_addr, rx_data, size, 100) != HAL_OK)
 80043dc:	2320      	movs	r3, #32
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b29c      	uxth	r4, r3
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	230a      	movs	r3, #10
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	8819      	ldrh	r1, [r3, #0]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	2364      	movs	r3, #100	@ 0x64
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	0023      	movs	r3, r4
 80043f4:	f001 fef4 	bl	80061e0 <HAL_I2C_Master_Receive>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <read_reg+0x5c>
		return 1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <read_reg+0x5e>

	return 0;
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b005      	add	sp, #20
 8004408:	bd90      	pop	{r4, r7, pc}

0800440a <send_temps_via_usb>:
#include <string.h>
#include "usb_helpers.h"
#include "usbd_cdc_if.h"


void send_temps_via_usb(double current_temp_inside, double current_temp_outside, double set_temp_inside){
 800440a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440c:	b091      	sub	sp, #68	@ 0x44
 800440e:	af04      	add	r7, sp, #16
 8004410:	60b8      	str	r0, [r7, #8]
 8004412:	60f9      	str	r1, [r7, #12]
 8004414:	603a      	str	r2, [r7, #0]
 8004416:	607b      	str	r3, [r7, #4]
	uint8_t usb_tx_data[25] = {0};
 8004418:	2614      	movs	r6, #20
 800441a:	19bb      	adds	r3, r7, r6
 800441c:	0018      	movs	r0, r3
 800441e:	2319      	movs	r3, #25
 8004420:	001a      	movs	r2, r3
 8004422:	2100      	movs	r1, #0
 8004424:	f00c f934 	bl	8010690 <memset>
	put_temps_into_char_array(current_temp_inside, current_temp_outside, set_temp_inside, usb_tx_data, 25);
 8004428:	683c      	ldr	r4, [r7, #0]
 800442a:	687d      	ldr	r5, [r7, #4]
 800442c:	68b8      	ldr	r0, [r7, #8]
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	2319      	movs	r3, #25
 8004432:	9303      	str	r3, [sp, #12]
 8004434:	19bb      	adds	r3, r7, r6
 8004436:	9302      	str	r3, [sp, #8]
 8004438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800443a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800443c:	9200      	str	r2, [sp, #0]
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	0022      	movs	r2, r4
 8004442:	002b      	movs	r3, r5
 8004444:	f000 f87e 	bl	8004544 <put_temps_into_char_array>
	CDC_Transmit_FS(usb_tx_data, 25);
 8004448:	19bb      	adds	r3, r7, r6
 800444a:	2119      	movs	r1, #25
 800444c:	0018      	movs	r0, r3
 800444e:	f00a f817 	bl	800e480 <CDC_Transmit_FS>
}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b00d      	add	sp, #52	@ 0x34
 8004458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800445c <send_stop_following_profile>:

void send_stop_following_profile(){
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
	uint8_t usb_tx_data[10] = {'S','T','O','P','\n'};
 8004462:	1d39      	adds	r1, r7, #4
 8004464:	4a0a      	ldr	r2, [pc, #40]	@ (8004490 <send_stop_following_profile+0x34>)
 8004466:	000b      	movs	r3, r1
 8004468:	6810      	ldr	r0, [r2, #0]
 800446a:	6018      	str	r0, [r3, #0]
 800446c:	8892      	ldrh	r2, [r2, #4]
 800446e:	809a      	strh	r2, [r3, #4]
 8004470:	2306      	movs	r3, #6
 8004472:	18cb      	adds	r3, r1, r3
 8004474:	2204      	movs	r2, #4
 8004476:	2100      	movs	r1, #0
 8004478:	0018      	movs	r0, r3
 800447a:	f00c f909 	bl	8010690 <memset>
	CDC_Transmit_FS(usb_tx_data, 10);
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	210a      	movs	r1, #10
 8004482:	0018      	movs	r0, r3
 8004484:	f009 fffc 	bl	800e480 <CDC_Transmit_FS>
}
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b004      	add	sp, #16
 800448e:	bd80      	pop	{r7, pc}
 8004490:	08013310 	.word	0x08013310

08004494 <listen_to_usb>:

void listen_to_usb(double *set_temp_inside, int *is_following_profile){
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
	uint32_t len = 20;
 800449e:	2314      	movs	r3, #20
 80044a0:	60fb      	str	r3, [r7, #12]
	static uint8_t usb_rx_data[20] = {0};
	CDC_Receive(usb_rx_data, &len);
 80044a2:	230c      	movs	r3, #12
 80044a4:	18fa      	adds	r2, r7, r3
 80044a6:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <listen_to_usb+0x58>)
 80044a8:	0011      	movs	r1, r2
 80044aa:	0018      	movs	r0, r3
 80044ac:	f009 ff88 	bl	800e3c0 <CDC_Receive>

	if(usb_rx_data[0] == 'P') // Stands for Profile
 80044b0:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <listen_to_usb+0x58>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b50      	cmp	r3, #80	@ 0x50
 80044b6:	d102      	bne.n	80044be <listen_to_usb+0x2a>
		*is_following_profile = 1;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

	if(usb_rx_data[0] != '\0' && string_to_double(usb_rx_data, 20, set_temp_inside) != 1)
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <listen_to_usb+0x58>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <listen_to_usb+0x50>
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <listen_to_usb+0x58>)
 80044ca:	2114      	movs	r1, #20
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 f80f 	bl	80044f0 <string_to_double>
 80044d2:	0003      	movs	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d005      	beq.n	80044e4 <listen_to_usb+0x50>
		memset(usb_rx_data, 0, 20);
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <listen_to_usb+0x58>)
 80044da:	2214      	movs	r2, #20
 80044dc:	2100      	movs	r1, #0
 80044de:	0018      	movs	r0, r3
 80044e0:	f00c f8d6 	bl	8010690 <memset>
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b004      	add	sp, #16
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000764 	.word	0x20000764

080044f0 <string_to_double>:


int string_to_double(uint8_t *data, uint8_t size, double *result){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	607a      	str	r2, [r7, #4]
 80044fa:	230b      	movs	r3, #11
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	1c0a      	adds	r2, r1, #0
 8004500:	701a      	strb	r2, [r3, #0]
	char *endptr = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
	double temp = strtod((const char*)data, &endptr);
 8004506:	2314      	movs	r3, #20
 8004508:	18fa      	adds	r2, r7, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0011      	movs	r1, r2
 800450e:	0018      	movs	r0, r3
 8004510:	f00b fb0a 	bl	800fb28 <strtod>
 8004514:	0002      	movs	r2, r0
 8004516:	000b      	movs	r3, r1
 8004518:	61ba      	str	r2, [r7, #24]
 800451a:	61fb      	str	r3, [r7, #28]

	if (*endptr != '\0' && *endptr != '\n')
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <string_to_double+0x40>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b0a      	cmp	r3, #10
 800452a:	d001      	beq.n	8004530 <string_to_double+0x40>
		return 1;
 800452c:	2301      	movs	r3, #1
 800452e:	e005      	b.n	800453c <string_to_double+0x4c>

	*result = temp;
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	600a      	str	r2, [r1, #0]
 8004538:	604b      	str	r3, [r1, #4]
	return 0;
 800453a:	2300      	movs	r3, #0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b008      	add	sp, #32
 8004542:	bd80      	pop	{r7, pc}

08004544 <put_temps_into_char_array>:

int put_temps_into_char_array(double temp1, double temp2, double temp3, uint8_t *char_array, uint8_t size){
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b08b      	sub	sp, #44	@ 0x2c
 8004548:	af06      	add	r7, sp, #24
 800454a:	60b8      	str	r0, [r7, #8]
 800454c:	60f9      	str	r1, [r7, #12]
 800454e:	603a      	str	r2, [r7, #0]
 8004550:	607b      	str	r3, [r7, #4]
	memset(char_array,0, size);
 8004552:	242c      	movs	r4, #44	@ 0x2c
 8004554:	193b      	adds	r3, r7, r4
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2100      	movs	r1, #0
 800455c:	0018      	movs	r0, r3
 800455e:	f00c f897 	bl	8010690 <memset>
	snprintf((char*)char_array, size, "%.1lf, %.1lf, %.1lf\n\r", temp1, temp2, temp3);
 8004562:	193b      	adds	r3, r7, r4
 8004564:	7819      	ldrb	r1, [r3, #0]
 8004566:	4c0b      	ldr	r4, [pc, #44]	@ (8004594 <put_temps_into_char_array+0x50>)
 8004568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800456a:	6a3a      	ldr	r2, [r7, #32]
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	9204      	str	r2, [sp, #16]
 8004570:	9305      	str	r3, [sp, #20]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	9303      	str	r3, [sp, #12]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	9200      	str	r2, [sp, #0]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	0022      	movs	r2, r4
 8004584:	f00c f802 	bl	801058c <sniprintf>
	return 0;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b005      	add	sp, #20
 8004590:	bd90      	pop	{r4, r7, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	0801331c 	.word	0x0801331c

08004598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004598:	480d      	ldr	r0, [pc, #52]	@ (80045d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800459a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800459c:	f7ff fec4 	bl	8004328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045a0:	480c      	ldr	r0, [pc, #48]	@ (80045d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80045a2:	490d      	ldr	r1, [pc, #52]	@ (80045d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045a4:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <LoopForever+0xe>)
  movs r3, #0
 80045a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a8:	e002      	b.n	80045b0 <LoopCopyDataInit>

080045aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ae:	3304      	adds	r3, #4

080045b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b4:	d3f9      	bcc.n	80045aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045b6:	4a0a      	ldr	r2, [pc, #40]	@ (80045e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045b8:	4c0a      	ldr	r4, [pc, #40]	@ (80045e4 <LoopForever+0x16>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045bc:	e001      	b.n	80045c2 <LoopFillZerobss>

080045be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c0:	3204      	adds	r2, #4

080045c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c4:	d3fb      	bcc.n	80045be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80045c6:	f00c f8d5 	bl	8010774 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80045ca:	f7fe fc7b 	bl	8002ec4 <main>

080045ce <LoopForever>:

LoopForever:
  b LoopForever
 80045ce:	e7fe      	b.n	80045ce <LoopForever>
  ldr   r0, =_estack
 80045d0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045d8:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80045dc:	0801393c 	.word	0x0801393c
  ldr r2, =_sbss
 80045e0:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80045e4:	200022a8 	.word	0x200022a8

080045e8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045e8:	e7fe      	b.n	80045e8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>
	...

080045ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_Init+0x3c>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <HAL_Init+0x3c>)
 80045fe:	2180      	movs	r1, #128	@ 0x80
 8004600:	0049      	lsls	r1, r1, #1
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004606:	2003      	movs	r0, #3
 8004608:	f000 f810 	bl	800462c <HAL_InitTick>
 800460c:	1e03      	subs	r3, r0, #0
 800460e:	d003      	beq.n	8004618 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004610:	1dfb      	adds	r3, r7, #7
 8004612:	2201      	movs	r2, #1
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e001      	b.n	800461c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004618:	f7ff fba2 	bl	8003d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	781b      	ldrb	r3, [r3, #0]
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b002      	add	sp, #8
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40022000 	.word	0x40022000

0800462c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <HAL_InitTick+0x88>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02b      	beq.n	800469c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004644:	4b1c      	ldr	r3, [pc, #112]	@ (80046b8 <HAL_InitTick+0x8c>)
 8004646:	681c      	ldr	r4, [r3, #0]
 8004648:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <HAL_InitTick+0x88>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	0019      	movs	r1, r3
 800464e:	23fa      	movs	r3, #250	@ 0xfa
 8004650:	0098      	lsls	r0, r3, #2
 8004652:	f7fb fd71 	bl	8000138 <__udivsi3>
 8004656:	0003      	movs	r3, r0
 8004658:	0019      	movs	r1, r3
 800465a:	0020      	movs	r0, r4
 800465c:	f7fb fd6c 	bl	8000138 <__udivsi3>
 8004660:	0003      	movs	r3, r0
 8004662:	0018      	movs	r0, r3
 8004664:	f001 f9e9 	bl	8005a3a <HAL_SYSTICK_Config>
 8004668:	1e03      	subs	r3, r0, #0
 800466a:	d112      	bne.n	8004692 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d80a      	bhi.n	8004688 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	2301      	movs	r3, #1
 8004676:	425b      	negs	r3, r3
 8004678:	2200      	movs	r2, #0
 800467a:	0018      	movs	r0, r3
 800467c:	f001 f9b8 	bl	80059f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004680:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <HAL_InitTick+0x90>)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00d      	b.n	80046a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004688:	230f      	movs	r3, #15
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e008      	b.n	80046a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004692:	230f      	movs	r3, #15
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e003      	b.n	80046a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80046a4:	230f      	movs	r3, #15
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b005      	add	sp, #20
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	20000098 	.word	0x20000098
 80046b8:	20000090 	.word	0x20000090
 80046bc:	20000094 	.word	0x20000094

080046c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_IncTick+0x1c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	001a      	movs	r2, r3
 80046ca:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <HAL_IncTick+0x20>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	18d2      	adds	r2, r2, r3
 80046d0:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <HAL_IncTick+0x20>)
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	46c0      	nop			@ (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	20000098 	.word	0x20000098
 80046e0:	20000778 	.word	0x20000778

080046e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b02      	ldr	r3, [pc, #8]	@ (80046f4 <HAL_GetTick+0x10>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	20000778 	.word	0x20000778

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff fff0 	bl	80046e4 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	3301      	adds	r3, #1
 8004710:	d005      	beq.n	800471e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_Delay+0x44>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	001a      	movs	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	189b      	adds	r3, r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	f7ff ffe0 	bl	80046e4 <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d8f7      	bhi.n	8004720 <HAL_Delay+0x28>
  {
  }
}
 8004730:	46c0      	nop			@ (mov r8, r8)
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	20000098 	.word	0x20000098

08004740 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a06      	ldr	r2, [pc, #24]	@ (8004768 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800474e:	4013      	ands	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
}
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b002      	add	sp, #8
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	40010000 	.word	0x40010000
 8004768:	fffff9ff 	.word	0xfffff9ff

0800476c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a05      	ldr	r2, [pc, #20]	@ (8004790 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800477c:	401a      	ands	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b002      	add	sp, #8
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	fe3fffff 	.word	0xfe3fffff

08004794 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	23e0      	movs	r3, #224	@ 0xe0
 80047a2:	045b      	lsls	r3, r3, #17
 80047a4:	4013      	ands	r3, r2
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}

080047ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	2104      	movs	r1, #4
 80047c2:	400a      	ands	r2, r1
 80047c4:	2107      	movs	r1, #7
 80047c6:	4091      	lsls	r1, r2
 80047c8:	000a      	movs	r2, r1
 80047ca:	43d2      	mvns	r2, r2
 80047cc:	401a      	ands	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2104      	movs	r1, #4
 80047d2:	400b      	ands	r3, r1
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4099      	lsls	r1, r3
 80047d8:	000b      	movs	r3, r1
 80047da:	431a      	orrs	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	2104      	movs	r1, #4
 80047fa:	400a      	ands	r2, r1
 80047fc:	2107      	movs	r1, #7
 80047fe:	4091      	lsls	r1, r2
 8004800:	000a      	movs	r2, r1
 8004802:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2104      	movs	r1, #4
 8004808:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800480a:	40da      	lsrs	r2, r3
 800480c:	0013      	movs	r3, r2
}
 800480e:	0018      	movs	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}

08004816 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	23c0      	movs	r3, #192	@ 0xc0
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4013      	ands	r3, r2
 8004828:	d101      	bne.n	800482e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800482e:	2300      	movs	r3, #0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}

08004838 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	211f      	movs	r1, #31
 800484c:	400a      	ands	r2, r1
 800484e:	210f      	movs	r1, #15
 8004850:	4091      	lsls	r1, r2
 8004852:	000a      	movs	r2, r1
 8004854:	43d2      	mvns	r2, r2
 8004856:	401a      	ands	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0e9b      	lsrs	r3, r3, #26
 800485c:	210f      	movs	r1, #15
 800485e:	4019      	ands	r1, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	201f      	movs	r0, #31
 8004864:	4003      	ands	r3, r0
 8004866:	4099      	lsls	r1, r3
 8004868:	000b      	movs	r3, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}

08004878 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	035b      	lsls	r3, r3, #13
 800488a:	0b5b      	lsrs	r3, r3, #13
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004892:	46c0      	nop			@ (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b002      	add	sp, #8
 8004898:	bd80      	pop	{r7, pc}

0800489a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	0352      	lsls	r2, r2, #13
 80048ac:	0b52      	lsrs	r2, r2, #13
 80048ae:	43d2      	mvns	r2, r2
 80048b0:	401a      	ands	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}

080048be <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2203      	movs	r2, #3
 80048cc:	4013      	ands	r3, r2
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b002      	add	sp, #8
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	0212      	lsls	r2, r2, #8
 80048ec:	43d2      	mvns	r2, r2
 80048ee:	401a      	ands	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	400b      	ands	r3, r1
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <LL_ADC_SetChannelSamplingTime+0x34>)
 80048fa:	400b      	ands	r3, r1
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	46bd      	mov	sp, r7
 8004906:	b004      	add	sp, #16
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	07ffff00 	.word	0x07ffff00

08004910 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a05      	ldr	r2, [pc, #20]	@ (8004934 <LL_ADC_EnableInternalRegulator+0x24>)
 800491e:	4013      	ands	r3, r2
 8004920:	2280      	movs	r2, #128	@ 0x80
 8004922:	0552      	lsls	r2, r2, #21
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b002      	add	sp, #8
 8004930:	bd80      	pop	{r7, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	6fffffe8 	.word	0x6fffffe8

08004938 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	2380      	movs	r3, #128	@ 0x80
 8004946:	055b      	lsls	r3, r3, #21
 8004948:	401a      	ands	r2, r3
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	055b      	lsls	r3, r3, #21
 800494e:	429a      	cmp	r2, r3
 8004950:	d101      	bne.n	8004956 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004956:	2300      	movs	r3, #0
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <LL_ADC_Enable+0x20>)
 800496e:	4013      	ands	r3, r2
 8004970:	2201      	movs	r2, #1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004978:	46c0      	nop			@ (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}
 8004980:	7fffffe8 	.word	0x7fffffe8

08004984 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a04      	ldr	r2, [pc, #16]	@ (80049a4 <LL_ADC_Disable+0x20>)
 8004992:	4013      	ands	r3, r2
 8004994:	2202      	movs	r2, #2
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	7fffffe8 	.word	0x7fffffe8

080049a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <LL_ADC_IsEnabled+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_ADC_IsEnabled+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}

080049ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2202      	movs	r2, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d101      	bne.n	80049e2 <LL_ADC_IsDisableOngoing+0x18>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <LL_ADC_IsDisableOngoing+0x1a>
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	0018      	movs	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b002      	add	sp, #8
 80049ea:	bd80      	pop	{r7, pc}

080049ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <LL_ADC_REG_StartConversion+0x20>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	2204      	movs	r2, #4
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a04:	46c0      	nop			@ (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b002      	add	sp, #8
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	7fffffe8 	.word	0x7fffffe8

08004a10 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <LL_ADC_REG_StopConversion+0x20>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2210      	movs	r2, #16
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004a28:	46c0      	nop			@ (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	7fffffe8 	.word	0x7fffffe8

08004a34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2204      	movs	r2, #4
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d101      	bne.n	8004a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b002      	add	sp, #8
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a60:	231f      	movs	r3, #31
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e17f      	b.n	8004d7e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7ff f991 	bl	8003db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2254      	movs	r2, #84	@ 0x54
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff ff49 	bl	8004938 <LL_ADC_IsInternalRegulatorEnabled>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d115      	bne.n	8004ad6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7ff ff2e 	bl	8004910 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ab4:	4bb4      	ldr	r3, [pc, #720]	@ (8004d88 <HAL_ADC_Init+0x330>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	49b4      	ldr	r1, [pc, #720]	@ (8004d8c <HAL_ADC_Init+0x334>)
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fb fb3c 	bl	8000138 <__udivsi3>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ac8:	e002      	b.n	8004ad0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f9      	bne.n	8004aca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff ff2c 	bl	8004938 <LL_ADC_IsInternalRegulatorEnabled>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae8:	2210      	movs	r2, #16
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	2201      	movs	r2, #1
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004afc:	231f      	movs	r3, #31
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff ff93 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b16:	2210      	movs	r2, #16
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d000      	beq.n	8004b1e <HAL_ADC_Init+0xc6>
 8004b1c:	e122      	b.n	8004d64 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d000      	beq.n	8004b26 <HAL_ADC_Init+0xce>
 8004b24:	e11e      	b.n	8004d64 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2a:	4a99      	ldr	r2, [pc, #612]	@ (8004d90 <HAL_ADC_Init+0x338>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2202      	movs	r2, #2
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f7ff ff34 	bl	80049a8 <LL_ADC_IsEnabled>
 8004b40:	1e03      	subs	r3, r0, #0
 8004b42:	d000      	beq.n	8004b46 <HAL_ADC_Init+0xee>
 8004b44:	e0ad      	b.n	8004ca2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7e1b      	ldrb	r3, [r3, #24]
 8004b4e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004b50:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7e5b      	ldrb	r3, [r3, #25]
 8004b56:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004b58:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7e9b      	ldrb	r3, [r3, #26]
 8004b5e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004b60:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_ADC_Init+0x118>
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	e000      	b.n	8004b72 <HAL_ADC_Init+0x11a>
 8004b70:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004b72:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004b78:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da04      	bge.n	8004b8c <HAL_ADC_Init+0x134>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	e001      	b.n	8004b90 <HAL_ADC_Init+0x138>
 8004b8c:	2380      	movs	r3, #128	@ 0x80
 8004b8e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004b90:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	212c      	movs	r1, #44	@ 0x2c
 8004b96:	5c5b      	ldrb	r3, [r3, r1]
 8004b98:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004b9a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	5c9b      	ldrb	r3, [r3, r2]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d115      	bne.n	8004bd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	7e9b      	ldrb	r3, [r3, #26]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d105      	bne.n	8004bc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2280      	movs	r2, #128	@ 0x80
 8004bb8:	0252      	lsls	r2, r2, #9
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e00b      	b.n	8004bd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be4:	23e0      	movs	r3, #224	@ 0xe0
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4a65      	ldr	r2, [pc, #404]	@ (8004d94 <HAL_ADC_Init+0x33c>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0f9b      	lsrs	r3, r3, #30
 8004c12:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	223c      	movs	r2, #60	@ 0x3c
 8004c24:	5c9b      	ldrb	r3, [r3, r2]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d111      	bne.n	8004c4e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0f9b      	lsrs	r3, r3, #30
 8004c30:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c36:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004c3c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004c42:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a50      	ldr	r2, [pc, #320]	@ (8004d98 <HAL_ADC_Init+0x340>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	23c0      	movs	r3, #192	@ 0xc0
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d018      	beq.n	8004ca2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	05db      	lsls	r3, r3, #23
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d012      	beq.n	8004ca2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c80:	2380      	movs	r3, #128	@ 0x80
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d00c      	beq.n	8004ca2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004c88:	4b44      	ldr	r3, [pc, #272]	@ (8004d9c <HAL_ADC_Init+0x344>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a44      	ldr	r2, [pc, #272]	@ (8004da0 <HAL_ADC_Init+0x348>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	23f0      	movs	r3, #240	@ 0xf0
 8004c98:	039b      	lsls	r3, r3, #14
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <HAL_ADC_Init+0x344>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004caa:	001a      	movs	r2, r3
 8004cac:	2100      	movs	r1, #0
 8004cae:	f7ff fd7e 	bl	80047ae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	493a      	ldr	r1, [pc, #232]	@ (8004da4 <HAL_ADC_Init+0x34c>)
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	f7ff fd76 	bl	80047ae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	4249      	negs	r1, r1
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cdc:	e018      	b.n	8004d10 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	039b      	lsls	r3, r3, #14
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d112      	bne.n	8004d10 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	221c      	movs	r2, #28
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2210      	movs	r2, #16
 8004cfe:	4252      	negs	r2, r2
 8004d00:	409a      	lsls	r2, r3
 8004d02:	0011      	movs	r1, r2
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7ff fd66 	bl	80047e8 <LL_ADC_GetSamplingTimeCommonChannels>
 8004d1c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10b      	bne.n	8004d3e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	2203      	movs	r2, #3
 8004d32:	4393      	bics	r3, r2
 8004d34:	2201      	movs	r2, #1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d3c:	e01c      	b.n	8004d78 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	2212      	movs	r2, #18
 8004d44:	4393      	bics	r3, r2
 8004d46:	2210      	movs	r2, #16
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d52:	2201      	movs	r2, #1
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004d5a:	231f      	movs	r3, #31
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004d62:	e009      	b.n	8004d78 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	2210      	movs	r2, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004d70:	231f      	movs	r3, #31
 8004d72:	18fb      	adds	r3, r7, r3
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004d78:	231f      	movs	r3, #31
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b008      	add	sp, #32
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	20000090 	.word	0x20000090
 8004d8c:	00030d40 	.word	0x00030d40
 8004d90:	fffffefd 	.word	0xfffffefd
 8004d94:	ffde0201 	.word	0xffde0201
 8004d98:	1ffffc02 	.word	0x1ffffc02
 8004d9c:	40012708 	.word	0x40012708
 8004da0:	ffc3ffff 	.word	0xffc3ffff
 8004da4:	07ffff04 	.word	0x07ffff04

08004da8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004da8:	b5b0      	push	{r4, r5, r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff fe3d 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 8004dba:	1e03      	subs	r3, r0, #0
 8004dbc:	d135      	bne.n	8004e2a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2254      	movs	r2, #84	@ 0x54
 8004dc2:	5c9b      	ldrb	r3, [r3, r2]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_Start+0x24>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e035      	b.n	8004e38 <HAL_ADC_Start+0x90>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2254      	movs	r2, #84	@ 0x54
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dd4:	250f      	movs	r5, #15
 8004dd6:	197c      	adds	r4, r7, r5
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 fc58 	bl	8005690 <ADC_Enable>
 8004de0:	0003      	movs	r3, r0
 8004de2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004de4:	197b      	adds	r3, r7, r5
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d119      	bne.n	8004e20 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df0:	4a13      	ldr	r2, [pc, #76]	@ (8004e40 <HAL_ADC_Start+0x98>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	0052      	lsls	r2, r2, #1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	221c      	movs	r2, #28
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2254      	movs	r2, #84	@ 0x54
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff fde7 	bl	80049ec <LL_ADC_REG_StartConversion>
 8004e1e:	e008      	b.n	8004e32 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2254      	movs	r2, #84	@ 0x54
 8004e24:	2100      	movs	r1, #0
 8004e26:	5499      	strb	r1, [r3, r2]
 8004e28:	e003      	b.n	8004e32 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e2a:	230f      	movs	r3, #15
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	2202      	movs	r2, #2
 8004e30:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004e32:	230f      	movs	r3, #15
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	781b      	ldrb	r3, [r3, #0]
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e40:	fffff0fe 	.word	0xfffff0fe

08004e44 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004e44:	b5b0      	push	{r4, r5, r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2254      	movs	r2, #84	@ 0x54
 8004e50:	5c9b      	ldrb	r3, [r3, r2]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_Stop+0x16>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e029      	b.n	8004eae <HAL_ADC_Stop+0x6a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2254      	movs	r2, #84	@ 0x54
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004e62:	250f      	movs	r5, #15
 8004e64:	197c      	adds	r4, r7, r5
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 fbcf 	bl	800560c <ADC_ConversionStop>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e72:	197b      	adds	r3, r7, r5
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d112      	bne.n	8004ea0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e7a:	197c      	adds	r4, r7, r5
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 fc8c 	bl	800579c <ADC_Disable>
 8004e84:	0003      	movs	r3, r0
 8004e86:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e88:	197b      	adds	r3, r7, r5
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d107      	bne.n	8004ea0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	4a08      	ldr	r2, [pc, #32]	@ (8004eb8 <HAL_ADC_Stop+0x74>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	2201      	movs	r2, #1
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2254      	movs	r2, #84	@ 0x54
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	fffffefe 	.word	0xfffffefe

08004ebc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d102      	bne.n	8004ed4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004ece:	2308      	movs	r3, #8
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e00f      	b.n	8004ef4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e072      	b.n	8004fd6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004ef4:	f7ff fbf6 	bl	80046e4 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004efc:	e01f      	b.n	8004f3e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	d01c      	beq.n	8004f3e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004f04:	f7ff fbee 	bl	80046e4 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <HAL_ADC_PollForConversion+0x5e>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d111      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4013      	ands	r3, r2
 8004f24:	d10b      	bne.n	8004f3e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	2204      	movs	r2, #4
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2254      	movs	r2, #84	@ 0x54
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e04b      	b.n	8004fd6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4013      	ands	r3, r2
 8004f48:	d0d9      	beq.n	8004efe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f7ff fc5a 	bl	8004816 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f62:	1e03      	subs	r3, r0, #0
 8004f64:	d02e      	beq.n	8004fc4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	7e9b      	ldrb	r3, [r3, #26]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d12a      	bne.n	8004fc4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d123      	bne.n	8004fc4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff fd57 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 8004f86:	1e03      	subs	r3, r0, #0
 8004f88:	d110      	bne.n	8004fac <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	210c      	movs	r1, #12
 8004f96:	438a      	bics	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9e:	4a10      	ldr	r2, [pc, #64]	@ (8004fe0 <HAL_ADC_PollForConversion+0x124>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004faa:	e00b      	b.n	8004fc4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	7e1b      	ldrb	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	220c      	movs	r2, #12
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b004      	add	sp, #16
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	fffffefe 	.word	0xfffffefe

08004fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d017      	beq.n	8005050 <HAL_ADC_IRQHandler+0x54>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502c:	2210      	movs	r2, #16
 800502e:	4013      	ands	r3, r2
 8005030:	d106      	bne.n	8005040 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	2280      	movs	r2, #128	@ 0x80
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	0018      	movs	r0, r3
 8005044:	f000 fc18 	bl	8005878 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2202      	movs	r2, #2
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	d003      	beq.n	8005060 <HAL_ADC_IRQHandler+0x64>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	d107      	bne.n	8005070 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2208      	movs	r2, #8
 8005064:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005066:	d04d      	beq.n	8005104 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2208      	movs	r2, #8
 800506c:	4013      	ands	r3, r2
 800506e:	d049      	beq.n	8005104 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d106      	bne.n	8005088 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff fbc2 	bl	8004816 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d02e      	beq.n	80050f4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7e9b      	ldrb	r3, [r3, #26]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d12a      	bne.n	80050f4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2208      	movs	r2, #8
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d123      	bne.n	80050f4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff fcbf 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d110      	bne.n	80050dc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	210c      	movs	r1, #12
 80050c6:	438a      	bics	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ce:	4a56      	ldr	r2, [pc, #344]	@ (8005228 <HAL_ADC_IRQHandler+0x22c>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	2201      	movs	r2, #1
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80050da:	e00b      	b.n	80050f4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	2220      	movs	r2, #32
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ec:	2201      	movs	r2, #1
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f000 f898 	bl	800522c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	220c      	movs	r2, #12
 8005102:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2280      	movs	r2, #128	@ 0x80
 8005108:	4013      	ands	r3, r2
 800510a:	d012      	beq.n	8005132 <HAL_ADC_IRQHandler+0x136>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2280      	movs	r2, #128	@ 0x80
 8005110:	4013      	ands	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005118:	2280      	movs	r2, #128	@ 0x80
 800511a:	0252      	lsls	r2, r2, #9
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	0018      	movs	r0, r3
 8005126:	f000 f889 	bl	800523c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2280      	movs	r2, #128	@ 0x80
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	2380      	movs	r3, #128	@ 0x80
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	4013      	ands	r3, r2
 800513a:	d014      	beq.n	8005166 <HAL_ADC_IRQHandler+0x16a>
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4013      	ands	r3, r2
 8005144:	d00f      	beq.n	8005166 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	2280      	movs	r2, #128	@ 0x80
 800514c:	0292      	lsls	r2, r2, #10
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0018      	movs	r0, r3
 8005158:	f000 fb7e 	bl	8005858 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2280      	movs	r2, #128	@ 0x80
 8005162:	0052      	lsls	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4013      	ands	r3, r2
 800516e:	d014      	beq.n	800519a <HAL_ADC_IRQHandler+0x19e>
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d00f      	beq.n	800519a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	2280      	movs	r2, #128	@ 0x80
 8005180:	02d2      	lsls	r2, r2, #11
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 fb6c 	bl	8005868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2280      	movs	r2, #128	@ 0x80
 8005196:	0092      	lsls	r2, r2, #2
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2210      	movs	r2, #16
 800519e:	4013      	ands	r3, r2
 80051a0:	d02b      	beq.n	80051fa <HAL_ADC_IRQHandler+0x1fe>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4013      	ands	r3, r2
 80051a8:	d027      	beq.n	80051fa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e008      	b.n	80051ca <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	0018      	movs	r0, r3
 80051be:	f7ff fb7e 	bl	80048be <LL_ADC_REG_GetDMATransfer>
 80051c2:	1e03      	subs	r3, r0, #0
 80051c4:	d001      	beq.n	80051ca <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d110      	bne.n	80051f2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	2280      	movs	r2, #128	@ 0x80
 80051d6:	00d2      	lsls	r2, r2, #3
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e2:	2202      	movs	r2, #2
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	0018      	movs	r0, r3
 80051ee:	f000 f82d 	bl	800524c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2210      	movs	r2, #16
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	019b      	lsls	r3, r3, #6
 8005200:	4013      	ands	r3, r2
 8005202:	d00d      	beq.n	8005220 <HAL_ADC_IRQHandler+0x224>
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	4013      	ands	r3, r2
 800520c:	d008      	beq.n	8005220 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	0018      	movs	r0, r3
 8005212:	f000 fb39 	bl	8005888 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2280      	movs	r2, #128	@ 0x80
 800521c:	0192      	lsls	r2, r2, #6
 800521e:	601a      	str	r2, [r3, #0]
  }
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b006      	add	sp, #24
 8005226:	bd80      	pop	{r7, pc}
 8005228:	fffffefe 	.word	0xfffffefe

0800522c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005234:	46c0      	nop			@ (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005244:	46c0      	nop			@ (mov r8, r8)
 8005246:	46bd      	mov	sp, r7
 8005248:	b002      	add	sp, #8
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005254:	46c0      	nop			@ (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b002      	add	sp, #8
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005266:	2317      	movs	r3, #23
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2254      	movs	r2, #84	@ 0x54
 8005276:	5c9b      	ldrb	r3, [r3, r2]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x24>
 800527c:	2302      	movs	r3, #2
 800527e:	e1c0      	b.n	8005602 <HAL_ADC_ConfigChannel+0x3a6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2254      	movs	r2, #84	@ 0x54
 8005284:	2101      	movs	r1, #1
 8005286:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	0018      	movs	r0, r3
 800528e:	f7ff fbd1 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d000      	beq.n	8005298 <HAL_ADC_ConfigChannel+0x3c>
 8005296:	e1a3      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d100      	bne.n	80052a2 <HAL_ADC_ConfigChannel+0x46>
 80052a0:	e143      	b.n	800552a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	2380      	movs	r3, #128	@ 0x80
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d004      	beq.n	80052b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80052b2:	4ac1      	ldr	r2, [pc, #772]	@ (80055b8 <HAL_ADC_ConfigChannel+0x35c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	0019      	movs	r1, r3
 80052c2:	0010      	movs	r0, r2
 80052c4:	f7ff fad8 	bl	8004878 <LL_ADC_REG_SetSequencerChAdd>
 80052c8:	e0c9      	b.n	800545e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	211f      	movs	r1, #31
 80052d4:	400b      	ands	r3, r1
 80052d6:	210f      	movs	r1, #15
 80052d8:	4099      	lsls	r1, r3
 80052da:	000b      	movs	r3, r1
 80052dc:	43db      	mvns	r3, r3
 80052de:	4013      	ands	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	035b      	lsls	r3, r3, #13
 80052e8:	0b5b      	lsrs	r3, r3, #13
 80052ea:	d105      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x9c>
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	0e9b      	lsrs	r3, r3, #26
 80052f2:	221f      	movs	r2, #31
 80052f4:	4013      	ands	r3, r2
 80052f6:	e098      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2201      	movs	r2, #1
 80052fe:	4013      	ands	r3, r2
 8005300:	d000      	beq.n	8005304 <HAL_ADC_ConfigChannel+0xa8>
 8005302:	e091      	b.n	8005428 <HAL_ADC_ConfigChannel+0x1cc>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2202      	movs	r2, #2
 800530a:	4013      	ands	r3, r2
 800530c:	d000      	beq.n	8005310 <HAL_ADC_ConfigChannel+0xb4>
 800530e:	e089      	b.n	8005424 <HAL_ADC_ConfigChannel+0x1c8>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2204      	movs	r2, #4
 8005316:	4013      	ands	r3, r2
 8005318:	d000      	beq.n	800531c <HAL_ADC_ConfigChannel+0xc0>
 800531a:	e081      	b.n	8005420 <HAL_ADC_ConfigChannel+0x1c4>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2208      	movs	r2, #8
 8005322:	4013      	ands	r3, r2
 8005324:	d000      	beq.n	8005328 <HAL_ADC_ConfigChannel+0xcc>
 8005326:	e079      	b.n	800541c <HAL_ADC_ConfigChannel+0x1c0>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2210      	movs	r2, #16
 800532e:	4013      	ands	r3, r2
 8005330:	d000      	beq.n	8005334 <HAL_ADC_ConfigChannel+0xd8>
 8005332:	e071      	b.n	8005418 <HAL_ADC_ConfigChannel+0x1bc>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2220      	movs	r2, #32
 800533a:	4013      	ands	r3, r2
 800533c:	d000      	beq.n	8005340 <HAL_ADC_ConfigChannel+0xe4>
 800533e:	e069      	b.n	8005414 <HAL_ADC_ConfigChannel+0x1b8>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	4013      	ands	r3, r2
 8005348:	d000      	beq.n	800534c <HAL_ADC_ConfigChannel+0xf0>
 800534a:	e061      	b.n	8005410 <HAL_ADC_ConfigChannel+0x1b4>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2280      	movs	r2, #128	@ 0x80
 8005352:	4013      	ands	r3, r2
 8005354:	d000      	beq.n	8005358 <HAL_ADC_ConfigChannel+0xfc>
 8005356:	e059      	b.n	800540c <HAL_ADC_ConfigChannel+0x1b0>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4013      	ands	r3, r2
 8005362:	d151      	bne.n	8005408 <HAL_ADC_ConfigChannel+0x1ac>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4013      	ands	r3, r2
 800536e:	d149      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x1a8>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	@ 0x80
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4013      	ands	r3, r2
 800537a:	d141      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x1a4>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4013      	ands	r3, r2
 8005386:	d139      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x1a0>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	@ 0x80
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	4013      	ands	r3, r2
 8005392:	d131      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x19c>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	019b      	lsls	r3, r3, #6
 800539c:	4013      	ands	r3, r2
 800539e:	d129      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x198>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	01db      	lsls	r3, r3, #7
 80053a8:	4013      	ands	r3, r2
 80053aa:	d121      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x194>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	4013      	ands	r3, r2
 80053b6:	d119      	bne.n	80053ec <HAL_ADC_ConfigChannel+0x190>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	025b      	lsls	r3, r3, #9
 80053c0:	4013      	ands	r3, r2
 80053c2:	d111      	bne.n	80053e8 <HAL_ADC_ConfigChannel+0x18c>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	4013      	ands	r3, r2
 80053ce:	d109      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x188>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	02db      	lsls	r3, r3, #11
 80053d8:	4013      	ands	r3, r2
 80053da:	d001      	beq.n	80053e0 <HAL_ADC_ConfigChannel+0x184>
 80053dc:	2312      	movs	r3, #18
 80053de:	e024      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053e0:	2300      	movs	r3, #0
 80053e2:	e022      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053e4:	2311      	movs	r3, #17
 80053e6:	e020      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053e8:	2310      	movs	r3, #16
 80053ea:	e01e      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053ec:	230f      	movs	r3, #15
 80053ee:	e01c      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053f0:	230e      	movs	r3, #14
 80053f2:	e01a      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053f4:	230d      	movs	r3, #13
 80053f6:	e018      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053f8:	230c      	movs	r3, #12
 80053fa:	e016      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 80053fc:	230b      	movs	r3, #11
 80053fe:	e014      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005400:	230a      	movs	r3, #10
 8005402:	e012      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005404:	2309      	movs	r3, #9
 8005406:	e010      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005408:	2308      	movs	r3, #8
 800540a:	e00e      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 800540c:	2307      	movs	r3, #7
 800540e:	e00c      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005410:	2306      	movs	r3, #6
 8005412:	e00a      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005414:	2305      	movs	r3, #5
 8005416:	e008      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005418:	2304      	movs	r3, #4
 800541a:	e006      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 800541c:	2303      	movs	r3, #3
 800541e:	e004      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005420:	2302      	movs	r3, #2
 8005422:	e002      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_ADC_ConfigChannel+0x1ce>
 8005428:	2300      	movs	r3, #0
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	6852      	ldr	r2, [r2, #4]
 800542e:	201f      	movs	r0, #31
 8005430:	4002      	ands	r2, r0
 8005432:	4093      	lsls	r3, r2
 8005434:	000a      	movs	r2, r1
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d808      	bhi.n	800545e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	001a      	movs	r2, r3
 800545a:	f7ff f9ed 	bl	8004838 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	001a      	movs	r2, r3
 800546c:	f7ff fa34 	bl	80048d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	db00      	blt.n	800547a <HAL_ADC_ConfigChannel+0x21e>
 8005478:	e0bc      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800547a:	4b50      	ldr	r3, [pc, #320]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 800547c:	0018      	movs	r0, r3
 800547e:	f7ff f989 	bl	8004794 <LL_ADC_GetCommonPathInternalCh>
 8005482:	0003      	movs	r3, r0
 8005484:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4d      	ldr	r2, [pc, #308]	@ (80055c0 <HAL_ADC_ConfigChannel+0x364>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d122      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005498:	d11d      	bne.n	80054d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2280      	movs	r2, #128	@ 0x80
 800549e:	0412      	lsls	r2, r2, #16
 80054a0:	4313      	orrs	r3, r2
 80054a2:	4a46      	ldr	r2, [pc, #280]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 80054a4:	0019      	movs	r1, r3
 80054a6:	0010      	movs	r0, r2
 80054a8:	f7ff f960 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054ac:	4b45      	ldr	r3, [pc, #276]	@ (80055c4 <HAL_ADC_ConfigChannel+0x368>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4945      	ldr	r1, [pc, #276]	@ (80055c8 <HAL_ADC_ConfigChannel+0x36c>)
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fa fe40 	bl	8000138 <__udivsi3>
 80054b8:	0003      	movs	r3, r0
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	0013      	movs	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054c6:	e002      	b.n	80054ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1f9      	bne.n	80054c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80054d4:	e08e      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <HAL_ADC_ConfigChannel+0x370>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10e      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	045b      	lsls	r3, r3, #17
 80054e6:	4013      	ands	r3, r2
 80054e8:	d109      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	0452      	lsls	r2, r2, #17
 80054f0:	4313      	orrs	r3, r2
 80054f2:	4a32      	ldr	r2, [pc, #200]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 80054f4:	0019      	movs	r1, r3
 80054f6:	0010      	movs	r0, r2
 80054f8:	f7ff f938 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
 80054fc:	e07a      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a33      	ldr	r2, [pc, #204]	@ (80055d0 <HAL_ADC_ConfigChannel+0x374>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d000      	beq.n	800550a <HAL_ADC_ConfigChannel+0x2ae>
 8005508:	e074      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	03db      	lsls	r3, r3, #15
 8005510:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005512:	d000      	beq.n	8005516 <HAL_ADC_ConfigChannel+0x2ba>
 8005514:	e06e      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	03d2      	lsls	r2, r2, #15
 800551c:	4313      	orrs	r3, r2
 800551e:	4a27      	ldr	r2, [pc, #156]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 8005520:	0019      	movs	r1, r3
 8005522:	0010      	movs	r0, r2
 8005524:	f7ff f922 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
 8005528:	e064      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	2380      	movs	r3, #128	@ 0x80
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	429a      	cmp	r2, r3
 8005534:	d004      	beq.n	8005540 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800553a:	4a1f      	ldr	r2, [pc, #124]	@ (80055b8 <HAL_ADC_ConfigChannel+0x35c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d107      	bne.n	8005550 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f7ff f9a5 	bl	800489a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	da4d      	bge.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005558:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 800555a:	0018      	movs	r0, r3
 800555c:	f7ff f91a 	bl	8004794 <LL_ADC_GetCommonPathInternalCh>
 8005560:	0003      	movs	r3, r0
 8005562:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <HAL_ADC_ConfigChannel+0x364>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d108      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4a18      	ldr	r2, [pc, #96]	@ (80055d4 <HAL_ADC_ConfigChannel+0x378>)
 8005572:	4013      	ands	r3, r2
 8005574:	4a11      	ldr	r2, [pc, #68]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 8005576:	0019      	movs	r1, r3
 8005578:	0010      	movs	r0, r2
 800557a:	f7ff f8f7 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
 800557e:	e039      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a11      	ldr	r2, [pc, #68]	@ (80055cc <HAL_ADC_ConfigChannel+0x370>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <HAL_ADC_ConfigChannel+0x37c>)
 800558e:	4013      	ands	r3, r2
 8005590:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 8005592:	0019      	movs	r1, r3
 8005594:	0010      	movs	r0, r2
 8005596:	f7ff f8e9 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
 800559a:	e02b      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a0b      	ldr	r2, [pc, #44]	@ (80055d0 <HAL_ADC_ConfigChannel+0x374>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d126      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <HAL_ADC_ConfigChannel+0x380>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	4a03      	ldr	r2, [pc, #12]	@ (80055bc <HAL_ADC_ConfigChannel+0x360>)
 80055ae:	0019      	movs	r1, r3
 80055b0:	0010      	movs	r0, r2
 80055b2:	f7ff f8db 	bl	800476c <LL_ADC_SetCommonPathInternalCh>
 80055b6:	e01d      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x398>
 80055b8:	80000004 	.word	0x80000004
 80055bc:	40012708 	.word	0x40012708
 80055c0:	b0001000 	.word	0xb0001000
 80055c4:	20000090 	.word	0x20000090
 80055c8:	00030d40 	.word	0x00030d40
 80055cc:	b8004000 	.word	0xb8004000
 80055d0:	b4002000 	.word	0xb4002000
 80055d4:	ff7fffff 	.word	0xff7fffff
 80055d8:	feffffff 	.word	0xfeffffff
 80055dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e4:	2220      	movs	r2, #32
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80055ec:	2317      	movs	r3, #23
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2254      	movs	r2, #84	@ 0x54
 80055f8:	2100      	movs	r1, #0
 80055fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80055fc:	2317      	movs	r3, #23
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	781b      	ldrb	r3, [r3, #0]
}
 8005602:	0018      	movs	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	b006      	add	sp, #24
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			@ (mov r8, r8)

0800560c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff fa0b 	bl	8004a34 <LL_ADC_REG_IsConversionOngoing>
 800561e:	1e03      	subs	r3, r0, #0
 8005620:	d031      	beq.n	8005686 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	0018      	movs	r0, r3
 8005628:	f7ff f9cf 	bl	80049ca <LL_ADC_IsDisableOngoing>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d104      	bne.n	800563a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0018      	movs	r0, r3
 8005636:	f7ff f9eb 	bl	8004a10 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800563a:	f7ff f853 	bl	80046e4 <HAL_GetTick>
 800563e:	0003      	movs	r3, r0
 8005640:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005642:	e01a      	b.n	800567a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005644:	f7ff f84e 	bl	80046e4 <HAL_GetTick>
 8005648:	0002      	movs	r2, r0
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d913      	bls.n	800567a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2204      	movs	r2, #4
 800565a:	4013      	ands	r3, r2
 800565c:	d00d      	beq.n	800567a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005662:	2210      	movs	r2, #16
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566e:	2201      	movs	r2, #1
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e006      	b.n	8005688 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2204      	movs	r2, #4
 8005682:	4013      	ands	r3, r2
 8005684:	d1de      	bne.n	8005644 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b004      	add	sp, #16
 800568e:	bd80      	pop	{r7, pc}

08005690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7ff f981 	bl	80049a8 <LL_ADC_IsEnabled>
 80056a6:	1e03      	subs	r3, r0, #0
 80056a8:	d000      	beq.n	80056ac <ADC_Enable+0x1c>
 80056aa:	e069      	b.n	8005780 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4a36      	ldr	r2, [pc, #216]	@ (800578c <ADC_Enable+0xfc>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	d00d      	beq.n	80056d4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056bc:	2210      	movs	r2, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c8:	2201      	movs	r2, #1
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e056      	b.n	8005782 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	0018      	movs	r0, r3
 80056da:	f7ff f941 	bl	8004960 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80056de:	4b2c      	ldr	r3, [pc, #176]	@ (8005790 <ADC_Enable+0x100>)
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff f857 	bl	8004794 <LL_ADC_GetCommonPathInternalCh>
 80056e6:	0002      	movs	r2, r0
 80056e8:	2380      	movs	r3, #128	@ 0x80
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	4013      	ands	r3, r2
 80056ee:	d00f      	beq.n	8005710 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056f0:	4b28      	ldr	r3, [pc, #160]	@ (8005794 <ADC_Enable+0x104>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4928      	ldr	r1, [pc, #160]	@ (8005798 <ADC_Enable+0x108>)
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7fa fd1e 	bl	8000138 <__udivsi3>
 80056fc:	0003      	movs	r3, r0
 80056fe:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8005700:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005702:	e002      	b.n	800570a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3b01      	subs	r3, #1
 8005708:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f9      	bne.n	8005704 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7e5b      	ldrb	r3, [r3, #25]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d033      	beq.n	8005780 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005718:	f7fe ffe4 	bl	80046e4 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005720:	e027      	b.n	8005772 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff f93e 	bl	80049a8 <LL_ADC_IsEnabled>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d104      	bne.n	800573a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0018      	movs	r0, r3
 8005736:	f7ff f913 	bl	8004960 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800573a:	f7fe ffd3 	bl	80046e4 <HAL_GetTick>
 800573e:	0002      	movs	r2, r0
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d914      	bls.n	8005772 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2201      	movs	r2, #1
 8005750:	4013      	ands	r3, r2
 8005752:	2b01      	cmp	r3, #1
 8005754:	d00d      	beq.n	8005772 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	2210      	movs	r2, #16
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	2201      	movs	r2, #1
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e007      	b.n	8005782 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	4013      	ands	r3, r2
 800577c:	2b01      	cmp	r3, #1
 800577e:	d1d0      	bne.n	8005722 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	0018      	movs	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	b004      	add	sp, #16
 8005788:	bd80      	pop	{r7, pc}
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	80000017 	.word	0x80000017
 8005790:	40012708 	.word	0x40012708
 8005794:	20000090 	.word	0x20000090
 8005798:	00030d40 	.word	0x00030d40

0800579c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	0018      	movs	r0, r3
 80057aa:	f7ff f90e 	bl	80049ca <LL_ADC_IsDisableOngoing>
 80057ae:	0003      	movs	r3, r0
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff f8f6 	bl	80049a8 <LL_ADC_IsEnabled>
 80057bc:	1e03      	subs	r3, r0, #0
 80057be:	d046      	beq.n	800584e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d143      	bne.n	800584e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2205      	movs	r2, #5
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10d      	bne.n	80057f0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0018      	movs	r0, r3
 80057da:	f7ff f8d3 	bl	8004984 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2203      	movs	r2, #3
 80057e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057e6:	f7fe ff7d 	bl	80046e4 <HAL_GetTick>
 80057ea:	0003      	movs	r3, r0
 80057ec:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057ee:	e028      	b.n	8005842 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f4:	2210      	movs	r2, #16
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2201      	movs	r2, #1
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e021      	b.n	8005850 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800580c:	f7fe ff6a 	bl	80046e4 <HAL_GetTick>
 8005810:	0002      	movs	r2, r0
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d913      	bls.n	8005842 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2201      	movs	r2, #1
 8005822:	4013      	ands	r3, r2
 8005824:	d00d      	beq.n	8005842 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582a:	2210      	movs	r2, #16
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2201      	movs	r2, #1
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e006      	b.n	8005850 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d1de      	bne.n	800580c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b004      	add	sp, #16
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005860:	46c0      	nop			@ (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005870:	46c0      	nop			@ (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005880:	46c0      	nop			@ (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8005890:	46c0      	nop			@ (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	b002      	add	sp, #8
 8005896:	bd80      	pop	{r7, pc}

08005898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	0002      	movs	r2, r0
 80058a0:	1dfb      	adds	r3, r7, #7
 80058a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80058a4:	1dfb      	adds	r3, r7, #7
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058aa:	d809      	bhi.n	80058c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ac:	1dfb      	adds	r3, r7, #7
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	001a      	movs	r2, r3
 80058b2:	231f      	movs	r3, #31
 80058b4:	401a      	ands	r2, r3
 80058b6:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <__NVIC_EnableIRQ+0x30>)
 80058b8:	2101      	movs	r1, #1
 80058ba:	4091      	lsls	r1, r2
 80058bc:	000a      	movs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b002      	add	sp, #8
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	e000e100 	.word	0xe000e100

080058cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058cc:	b590      	push	{r4, r7, lr}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	0002      	movs	r2, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	1dfb      	adds	r3, r7, #7
 80058d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80058da:	1dfb      	adds	r3, r7, #7
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e0:	d828      	bhi.n	8005934 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058e2:	4a2f      	ldr	r2, [pc, #188]	@ (80059a0 <__NVIC_SetPriority+0xd4>)
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	089b      	lsrs	r3, r3, #2
 80058ec:	33c0      	adds	r3, #192	@ 0xc0
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	589b      	ldr	r3, [r3, r2]
 80058f2:	1dfa      	adds	r2, r7, #7
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	0011      	movs	r1, r2
 80058f8:	2203      	movs	r2, #3
 80058fa:	400a      	ands	r2, r1
 80058fc:	00d2      	lsls	r2, r2, #3
 80058fe:	21ff      	movs	r1, #255	@ 0xff
 8005900:	4091      	lsls	r1, r2
 8005902:	000a      	movs	r2, r1
 8005904:	43d2      	mvns	r2, r2
 8005906:	401a      	ands	r2, r3
 8005908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	401a      	ands	r2, r3
 8005912:	1dfb      	adds	r3, r7, #7
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	0018      	movs	r0, r3
 8005918:	2303      	movs	r3, #3
 800591a:	4003      	ands	r3, r0
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005920:	481f      	ldr	r0, [pc, #124]	@ (80059a0 <__NVIC_SetPriority+0xd4>)
 8005922:	1dfb      	adds	r3, r7, #7
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b25b      	sxtb	r3, r3
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	430a      	orrs	r2, r1
 800592c:	33c0      	adds	r3, #192	@ 0xc0
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005932:	e031      	b.n	8005998 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <__NVIC_SetPriority+0xd8>)
 8005936:	1dfb      	adds	r3, r7, #7
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	0019      	movs	r1, r3
 800593c:	230f      	movs	r3, #15
 800593e:	400b      	ands	r3, r1
 8005940:	3b08      	subs	r3, #8
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3306      	adds	r3, #6
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	3304      	adds	r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	1dfa      	adds	r2, r7, #7
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	0011      	movs	r1, r2
 8005954:	2203      	movs	r2, #3
 8005956:	400a      	ands	r2, r1
 8005958:	00d2      	lsls	r2, r2, #3
 800595a:	21ff      	movs	r1, #255	@ 0xff
 800595c:	4091      	lsls	r1, r2
 800595e:	000a      	movs	r2, r1
 8005960:	43d2      	mvns	r2, r2
 8005962:	401a      	ands	r2, r3
 8005964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	22ff      	movs	r2, #255	@ 0xff
 800596c:	401a      	ands	r2, r3
 800596e:	1dfb      	adds	r3, r7, #7
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	0018      	movs	r0, r3
 8005974:	2303      	movs	r3, #3
 8005976:	4003      	ands	r3, r0
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800597c:	4809      	ldr	r0, [pc, #36]	@ (80059a4 <__NVIC_SetPriority+0xd8>)
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	001c      	movs	r4, r3
 8005984:	230f      	movs	r3, #15
 8005986:	4023      	ands	r3, r4
 8005988:	3b08      	subs	r3, #8
 800598a:	089b      	lsrs	r3, r3, #2
 800598c:	430a      	orrs	r2, r1
 800598e:	3306      	adds	r3, #6
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	18c3      	adds	r3, r0, r3
 8005994:	3304      	adds	r3, #4
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b003      	add	sp, #12
 800599e:	bd90      	pop	{r4, r7, pc}
 80059a0:	e000e100 	.word	0xe000e100
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1e5a      	subs	r2, r3, #1
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	045b      	lsls	r3, r3, #17
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d301      	bcc.n	80059c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059bc:	2301      	movs	r3, #1
 80059be:	e010      	b.n	80059e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059c0:	4b0a      	ldr	r3, [pc, #40]	@ (80059ec <SysTick_Config+0x44>)
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	3a01      	subs	r2, #1
 80059c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059c8:	2301      	movs	r3, #1
 80059ca:	425b      	negs	r3, r3
 80059cc:	2103      	movs	r1, #3
 80059ce:	0018      	movs	r0, r3
 80059d0:	f7ff ff7c 	bl	80058cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <SysTick_Config+0x44>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059da:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <SysTick_Config+0x44>)
 80059dc:	2207      	movs	r2, #7
 80059de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b002      	add	sp, #8
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	e000e010 	.word	0xe000e010

080059f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	210f      	movs	r1, #15
 80059fc:	187b      	adds	r3, r7, r1
 80059fe:	1c02      	adds	r2, r0, #0
 8005a00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff ff5d 	bl	80058cc <__NVIC_SetPriority>
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b004      	add	sp, #16
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	0002      	movs	r2, r0
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a26:	1dfb      	adds	r3, r7, #7
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7ff ff33 	bl	8005898 <__NVIC_EnableIRQ>
}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b002      	add	sp, #8
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff ffaf 	bl	80059a8 <SysTick_Config>
 8005a4a:	0003      	movs	r3, r0
}
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b002      	add	sp, #8
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a62:	e14d      	b.n	8005d00 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2101      	movs	r1, #1
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4091      	lsls	r1, r2
 8005a6e:	000a      	movs	r2, r1
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d100      	bne.n	8005a7c <HAL_GPIO_Init+0x28>
 8005a7a:	e13e      	b.n	8005cfa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2203      	movs	r2, #3
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d005      	beq.n	8005a94 <HAL_GPIO_Init+0x40>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d130      	bne.n	8005af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	2203      	movs	r2, #3
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	0013      	movs	r3, r2
 8005aa4:	43da      	mvns	r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	0013      	movs	r3, r2
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005aca:	2201      	movs	r2, #1
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	0013      	movs	r3, r2
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	091b      	lsrs	r3, r3, #4
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	0013      	movs	r3, r2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2203      	movs	r2, #3
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b03      	cmp	r3, #3
 8005b00:	d017      	beq.n	8005b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	409a      	lsls	r2, r3
 8005b10:	0013      	movs	r3, r2
 8005b12:	43da      	mvns	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4013      	ands	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	409a      	lsls	r2, r3
 8005b24:	0013      	movs	r3, r2
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d123      	bne.n	8005b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	08da      	lsrs	r2, r3, #3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3208      	adds	r2, #8
 8005b46:	0092      	lsls	r2, r2, #2
 8005b48:	58d3      	ldr	r3, [r2, r3]
 8005b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2207      	movs	r2, #7
 8005b50:	4013      	ands	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	220f      	movs	r2, #15
 8005b56:	409a      	lsls	r2, r3
 8005b58:	0013      	movs	r3, r2
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2107      	movs	r1, #7
 8005b6a:	400b      	ands	r3, r1
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	0013      	movs	r3, r2
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	08da      	lsrs	r2, r3, #3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3208      	adds	r2, #8
 8005b80:	0092      	lsls	r2, r2, #2
 8005b82:	6939      	ldr	r1, [r7, #16]
 8005b84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	2203      	movs	r2, #3
 8005b92:	409a      	lsls	r2, r3
 8005b94:	0013      	movs	r3, r2
 8005b96:	43da      	mvns	r2, r3
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	401a      	ands	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	409a      	lsls	r2, r3
 8005bac:	0013      	movs	r3, r2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	23c0      	movs	r3, #192	@ 0xc0
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d100      	bne.n	8005bc8 <HAL_GPIO_Init+0x174>
 8005bc6:	e098      	b.n	8005cfa <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005bc8:	4a53      	ldr	r2, [pc, #332]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3318      	adds	r3, #24
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	589b      	ldr	r3, [r3, r2]
 8005bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	4013      	ands	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	220f      	movs	r2, #15
 8005be0:	409a      	lsls	r2, r3
 8005be2:	0013      	movs	r3, r2
 8005be4:	43da      	mvns	r2, r3
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	23a0      	movs	r3, #160	@ 0xa0
 8005bf0:	05db      	lsls	r3, r3, #23
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d019      	beq.n	8005c2a <HAL_GPIO_Init+0x1d6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a48      	ldr	r2, [pc, #288]	@ (8005d1c <HAL_GPIO_Init+0x2c8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_GPIO_Init+0x1d2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a47      	ldr	r2, [pc, #284]	@ (8005d20 <HAL_GPIO_Init+0x2cc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00d      	beq.n	8005c22 <HAL_GPIO_Init+0x1ce>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a46      	ldr	r2, [pc, #280]	@ (8005d24 <HAL_GPIO_Init+0x2d0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <HAL_GPIO_Init+0x1ca>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a45      	ldr	r2, [pc, #276]	@ (8005d28 <HAL_GPIO_Init+0x2d4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d101      	bne.n	8005c1a <HAL_GPIO_Init+0x1c6>
 8005c16:	2304      	movs	r3, #4
 8005c18:	e008      	b.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c1a:	2305      	movs	r3, #5
 8005c1c:	e006      	b.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e004      	b.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e002      	b.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_GPIO_Init+0x1d8>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	2103      	movs	r1, #3
 8005c30:	400a      	ands	r2, r1
 8005c32:	00d2      	lsls	r2, r2, #3
 8005c34:	4093      	lsls	r3, r2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005c3c:	4936      	ldr	r1, [pc, #216]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	3318      	adds	r3, #24
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c4a:	4b33      	ldr	r3, [pc, #204]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	43da      	mvns	r2, r3
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4013      	ands	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	2380      	movs	r3, #128	@ 0x80
 8005c60:	035b      	lsls	r3, r3, #13
 8005c62:	4013      	ands	r3, r2
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005c74:	4b28      	ldr	r3, [pc, #160]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	43da      	mvns	r2, r3
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	2380      	movs	r3, #128	@ 0x80
 8005c8a:	039b      	lsls	r3, r3, #14
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c98:	4b1f      	ldr	r3, [pc, #124]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005ca0:	2384      	movs	r3, #132	@ 0x84
 8005ca2:	58d3      	ldr	r3, [r2, r3]
 8005ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	43da      	mvns	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4013      	ands	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	029b      	lsls	r3, r3, #10
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cc4:	4914      	ldr	r1, [pc, #80]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005cc6:	2284      	movs	r2, #132	@ 0x84
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005ccc:	4a12      	ldr	r2, [pc, #72]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	58d3      	ldr	r3, [r2, r3]
 8005cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	025b      	lsls	r3, r3, #9
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005cf2:	4909      	ldr	r1, [pc, #36]	@ (8005d18 <HAL_GPIO_Init+0x2c4>)
 8005cf4:	2280      	movs	r2, #128	@ 0x80
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	40da      	lsrs	r2, r3
 8005d08:	1e13      	subs	r3, r2, #0
 8005d0a:	d000      	beq.n	8005d0e <HAL_GPIO_Init+0x2ba>
 8005d0c:	e6aa      	b.n	8005a64 <HAL_GPIO_Init+0x10>
  }
}
 8005d0e:	46c0      	nop			@ (mov r8, r8)
 8005d10:	46c0      	nop			@ (mov r8, r8)
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b006      	add	sp, #24
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021800 	.word	0x40021800
 8005d1c:	50000400 	.word	0x50000400
 8005d20:	50000800 	.word	0x50000800
 8005d24:	50000c00 	.word	0x50000c00
 8005d28:	50001000 	.word	0x50001000

08005d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	000a      	movs	r2, r1
 8005d36:	1cbb      	adds	r3, r7, #2
 8005d38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	1cba      	adds	r2, r7, #2
 8005d40:	8812      	ldrh	r2, [r2, #0]
 8005d42:	4013      	ands	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005d46:	230f      	movs	r3, #15
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e003      	b.n	8005d58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d50:	230f      	movs	r3, #15
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005d58:	230f      	movs	r3, #15
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	781b      	ldrb	r3, [r3, #0]
}
 8005d5e:	0018      	movs	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b004      	add	sp, #16
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	0008      	movs	r0, r1
 8005d70:	0011      	movs	r1, r2
 8005d72:	1cbb      	adds	r3, r7, #2
 8005d74:	1c02      	adds	r2, r0, #0
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	1c7b      	adds	r3, r7, #1
 8005d7a:	1c0a      	adds	r2, r1, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d7e:	1c7b      	adds	r3, r7, #1
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d86:	1cbb      	adds	r3, r7, #2
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d8e:	e003      	b.n	8005d98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d90:	1cbb      	adds	r3, r7, #2
 8005d92:	881a      	ldrh	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d98:	46c0      	nop			@ (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	000a      	movs	r2, r1
 8005daa:	1cbb      	adds	r3, r7, #2
 8005dac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005db4:	1cbb      	adds	r3, r7, #2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	041a      	lsls	r2, r3, #16
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	1cb9      	adds	r1, r7, #2
 8005dc4:	8809      	ldrh	r1, [r1, #0]
 8005dc6:	400b      	ands	r3, r1
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b004      	add	sp, #16
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	0002      	movs	r2, r0
 8005de0:	1dbb      	adds	r3, r7, #6
 8005de2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005de4:	4b10      	ldr	r3, [pc, #64]	@ (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	1dba      	adds	r2, r7, #6
 8005dea:	8812      	ldrh	r2, [r2, #0]
 8005dec:	4013      	ands	r3, r2
 8005dee:	d008      	beq.n	8005e02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005df0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005df2:	1dba      	adds	r2, r7, #6
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 f815 	bl	8005e2c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005e02:	4b09      	ldr	r3, [pc, #36]	@ (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	1dba      	adds	r2, r7, #6
 8005e08:	8812      	ldrh	r2, [r2, #0]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d008      	beq.n	8005e20 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005e10:	1dba      	adds	r2, r7, #6
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f7fd fd3c 	bl	8003898 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005e20:	46c0      	nop			@ (mov r8, r8)
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b002      	add	sp, #8
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40021800 	.word	0x40021800

08005e2c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	0002      	movs	r2, r0
 8005e34:	1dbb      	adds	r3, r7, #6
 8005e36:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005e38:	46c0      	nop			@ (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e08f      	b.n	8005f72 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2241      	movs	r2, #65	@ 0x41
 8005e56:	5c9b      	ldrb	r3, [r3, r2]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2240      	movs	r2, #64	@ 0x40
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f7fd ffed 	bl	8003e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2241      	movs	r2, #65	@ 0x41
 8005e72:	2124      	movs	r1, #36	@ 0x24
 8005e74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	438a      	bics	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	493b      	ldr	r1, [pc, #236]	@ (8005f7c <HAL_I2C_Init+0x13c>)
 8005e90:	400a      	ands	r2, r1
 8005e92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4938      	ldr	r1, [pc, #224]	@ (8005f80 <HAL_I2C_Init+0x140>)
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d108      	bne.n	8005ebe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2180      	movs	r1, #128	@ 0x80
 8005eb6:	0209      	lsls	r1, r1, #8
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	e007      	b.n	8005ece <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2184      	movs	r1, #132	@ 0x84
 8005ec8:	0209      	lsls	r1, r1, #8
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d109      	bne.n	8005eea <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2180      	movs	r1, #128	@ 0x80
 8005ee2:	0109      	lsls	r1, r1, #4
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	e007      	b.n	8005efa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4923      	ldr	r1, [pc, #140]	@ (8005f84 <HAL_I2C_Init+0x144>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4920      	ldr	r1, [pc, #128]	@ (8005f88 <HAL_I2C_Init+0x148>)
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	491a      	ldr	r1, [pc, #104]	@ (8005f80 <HAL_I2C_Init+0x140>)
 8005f16:	400a      	ands	r2, r1
 8005f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2101      	movs	r1, #1
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2241      	movs	r2, #65	@ 0x41
 8005f5e:	2120      	movs	r1, #32
 8005f60:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2242      	movs	r2, #66	@ 0x42
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b002      	add	sp, #8
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	f0ffffff 	.word	0xf0ffffff
 8005f80:	ffff7fff 	.word	0xffff7fff
 8005f84:	fffff7ff 	.word	0xfffff7ff
 8005f88:	02008000 	.word	0x02008000

08005f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f8c:	b590      	push	{r4, r7, lr}
 8005f8e:	b089      	sub	sp, #36	@ 0x24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	0008      	movs	r0, r1
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	0019      	movs	r1, r3
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	18fb      	adds	r3, r7, r3
 8005f9e:	1c02      	adds	r2, r0, #0
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	1c0a      	adds	r2, r1, #0
 8005fa8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2241      	movs	r2, #65	@ 0x41
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d000      	beq.n	8005fb8 <HAL_I2C_Master_Transmit+0x2c>
 8005fb6:	e10a      	b.n	80061ce <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2240      	movs	r2, #64	@ 0x40
 8005fbc:	5c9b      	ldrb	r3, [r3, r2]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2C_Master_Transmit+0x3a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e104      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2240      	movs	r2, #64	@ 0x40
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fce:	f7fe fb89 	bl	80046e4 <HAL_GetTick>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	0219      	lsls	r1, r3, #8
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2319      	movs	r3, #25
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f000 fa26 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8005fe8:	1e03      	subs	r3, r0, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0ef      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2241      	movs	r2, #65	@ 0x41
 8005ff4:	2121      	movs	r1, #33	@ 0x21
 8005ff6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2242      	movs	r2, #66	@ 0x42
 8005ffc:	2110      	movs	r1, #16
 8005ffe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2208      	movs	r2, #8
 8006010:	18ba      	adds	r2, r7, r2
 8006012:	8812      	ldrh	r2, [r2, #0]
 8006014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2bff      	cmp	r3, #255	@ 0xff
 8006024:	d906      	bls.n	8006034 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	@ 0xff
 800602a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	045b      	lsls	r3, r3, #17
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e007      	b.n	8006044 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800603e:	2380      	movs	r3, #128	@ 0x80
 8006040:	049b      	lsls	r3, r3, #18
 8006042:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d027      	beq.n	800609c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006080:	b2db      	uxtb	r3, r3
 8006082:	3301      	adds	r3, #1
 8006084:	b2da      	uxtb	r2, r3
 8006086:	697c      	ldr	r4, [r7, #20]
 8006088:	230a      	movs	r3, #10
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	8819      	ldrh	r1, [r3, #0]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	4b51      	ldr	r3, [pc, #324]	@ (80061d8 <HAL_I2C_Master_Transmit+0x24c>)
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	0023      	movs	r3, r4
 8006096:	f000 fc45 	bl	8006924 <I2C_TransferConfig>
 800609a:	e06f      	b.n	800617c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	697c      	ldr	r4, [r7, #20]
 80060a4:	230a      	movs	r3, #10
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	8819      	ldrh	r1, [r3, #0]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	4b4a      	ldr	r3, [pc, #296]	@ (80061d8 <HAL_I2C_Master_Transmit+0x24c>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	0023      	movs	r3, r4
 80060b2:	f000 fc37 	bl	8006924 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060b6:	e061      	b.n	800617c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	0018      	movs	r0, r3
 80060c0:	f000 fa10 	bl	80064e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80060c4:	1e03      	subs	r3, r0, #0
 80060c6:	d001      	beq.n	80060cc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e081      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d03a      	beq.n	800617c <HAL_I2C_Master_Transmit+0x1f0>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d136      	bne.n	800617c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800610e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	0013      	movs	r3, r2
 8006118:	2200      	movs	r2, #0
 800611a:	2180      	movs	r1, #128	@ 0x80
 800611c:	f000 f98a 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8006120:	1e03      	subs	r3, r0, #0
 8006122:	d001      	beq.n	8006128 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e053      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2bff      	cmp	r3, #255	@ 0xff
 8006130:	d911      	bls.n	8006156 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	@ 0xff
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613c:	b2da      	uxtb	r2, r3
 800613e:	2380      	movs	r3, #128	@ 0x80
 8006140:	045c      	lsls	r4, r3, #17
 8006142:	230a      	movs	r3, #10
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	8819      	ldrh	r1, [r3, #0]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	2300      	movs	r3, #0
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	0023      	movs	r3, r4
 8006150:	f000 fbe8 	bl	8006924 <I2C_TransferConfig>
 8006154:	e012      	b.n	800617c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	b2da      	uxtb	r2, r3
 8006166:	2380      	movs	r3, #128	@ 0x80
 8006168:	049c      	lsls	r4, r3, #18
 800616a:	230a      	movs	r3, #10
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	8819      	ldrh	r1, [r3, #0]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	2300      	movs	r3, #0
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	0023      	movs	r3, r4
 8006178:	f000 fbd4 	bl	8006924 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d198      	bne.n	80060b8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	0018      	movs	r0, r3
 800618e:	f000 f9ef 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006192:	1e03      	subs	r3, r0, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01a      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	490b      	ldr	r1, [pc, #44]	@ (80061dc <HAL_I2C_Master_Transmit+0x250>)
 80061ae:	400a      	ands	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2241      	movs	r2, #65	@ 0x41
 80061b6:	2120      	movs	r1, #32
 80061b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2242      	movs	r2, #66	@ 0x42
 80061be:	2100      	movs	r1, #0
 80061c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2240      	movs	r2, #64	@ 0x40
 80061c6:	2100      	movs	r1, #0
 80061c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	0018      	movs	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b007      	add	sp, #28
 80061d6:	bd90      	pop	{r4, r7, pc}
 80061d8:	80002000 	.word	0x80002000
 80061dc:	fe00e800 	.word	0xfe00e800

080061e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b089      	sub	sp, #36	@ 0x24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	0008      	movs	r0, r1
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	0019      	movs	r1, r3
 80061ee:	230a      	movs	r3, #10
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	1c02      	adds	r2, r0, #0
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	2308      	movs	r3, #8
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	1c0a      	adds	r2, r1, #0
 80061fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2241      	movs	r2, #65	@ 0x41
 8006202:	5c9b      	ldrb	r3, [r3, r2]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b20      	cmp	r3, #32
 8006208:	d000      	beq.n	800620c <HAL_I2C_Master_Receive+0x2c>
 800620a:	e0e8      	b.n	80063de <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2240      	movs	r2, #64	@ 0x40
 8006210:	5c9b      	ldrb	r3, [r3, r2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_I2C_Master_Receive+0x3a>
 8006216:	2302      	movs	r3, #2
 8006218:	e0e2      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2240      	movs	r2, #64	@ 0x40
 800621e:	2101      	movs	r1, #1
 8006220:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006222:	f7fe fa5f 	bl	80046e4 <HAL_GetTick>
 8006226:	0003      	movs	r3, r0
 8006228:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800622a:	2380      	movs	r3, #128	@ 0x80
 800622c:	0219      	lsls	r1, r3, #8
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2319      	movs	r3, #25
 8006236:	2201      	movs	r2, #1
 8006238:	f000 f8fc 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0cd      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2241      	movs	r2, #65	@ 0x41
 8006248:	2122      	movs	r1, #34	@ 0x22
 800624a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2242      	movs	r2, #66	@ 0x42
 8006250:	2110      	movs	r1, #16
 8006252:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2208      	movs	r2, #8
 8006264:	18ba      	adds	r2, r7, r2
 8006266:	8812      	ldrh	r2, [r2, #0]
 8006268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	2bff      	cmp	r3, #255	@ 0xff
 8006278:	d911      	bls.n	800629e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22ff      	movs	r2, #255	@ 0xff
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006284:	b2da      	uxtb	r2, r3
 8006286:	2380      	movs	r3, #128	@ 0x80
 8006288:	045c      	lsls	r4, r3, #17
 800628a:	230a      	movs	r3, #10
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	8819      	ldrh	r1, [r3, #0]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	4b55      	ldr	r3, [pc, #340]	@ (80063e8 <HAL_I2C_Master_Receive+0x208>)
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	0023      	movs	r3, r4
 8006298:	f000 fb44 	bl	8006924 <I2C_TransferConfig>
 800629c:	e076      	b.n	800638c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	2380      	movs	r3, #128	@ 0x80
 80062b0:	049c      	lsls	r4, r3, #18
 80062b2:	230a      	movs	r3, #10
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	8819      	ldrh	r1, [r3, #0]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	4b4b      	ldr	r3, [pc, #300]	@ (80063e8 <HAL_I2C_Master_Receive+0x208>)
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	0023      	movs	r3, r4
 80062c0:	f000 fb30 	bl	8006924 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80062c4:	e062      	b.n	800638c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 f993 	bl	80065f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062d2:	1e03      	subs	r3, r0, #0
 80062d4:	d001      	beq.n	80062da <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e082      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d03a      	beq.n	800638c <HAL_I2C_Master_Receive+0x1ac>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d136      	bne.n	800638c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800631e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	0013      	movs	r3, r2
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	@ 0x80
 800632c:	f000 f882 	bl	8006434 <I2C_WaitOnFlagUntilTimeout>
 8006330:	1e03      	subs	r3, r0, #0
 8006332:	d001      	beq.n	8006338 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e053      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2bff      	cmp	r3, #255	@ 0xff
 8006340:	d911      	bls.n	8006366 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	22ff      	movs	r2, #255	@ 0xff
 8006346:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634c:	b2da      	uxtb	r2, r3
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	045c      	lsls	r4, r3, #17
 8006352:	230a      	movs	r3, #10
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	8819      	ldrh	r1, [r3, #0]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	2300      	movs	r3, #0
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	0023      	movs	r3, r4
 8006360:	f000 fae0 	bl	8006924 <I2C_TransferConfig>
 8006364:	e012      	b.n	800638c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006374:	b2da      	uxtb	r2, r3
 8006376:	2380      	movs	r3, #128	@ 0x80
 8006378:	049c      	lsls	r4, r3, #18
 800637a:	230a      	movs	r3, #10
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	8819      	ldrh	r1, [r3, #0]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	2300      	movs	r3, #0
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	0023      	movs	r3, r4
 8006388:	f000 facc 	bl	8006924 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d197      	bne.n	80062c6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	0018      	movs	r0, r3
 800639e:	f000 f8e7 	bl	8006570 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063a2:	1e03      	subs	r3, r0, #0
 80063a4:	d001      	beq.n	80063aa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e01a      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2220      	movs	r2, #32
 80063b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	490b      	ldr	r1, [pc, #44]	@ (80063ec <HAL_I2C_Master_Receive+0x20c>)
 80063be:	400a      	ands	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2241      	movs	r2, #65	@ 0x41
 80063c6:	2120      	movs	r1, #32
 80063c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2242      	movs	r2, #66	@ 0x42
 80063ce:	2100      	movs	r1, #0
 80063d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2240      	movs	r2, #64	@ 0x40
 80063d6:	2100      	movs	r1, #0
 80063d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80063de:	2302      	movs	r3, #2
  }
}
 80063e0:	0018      	movs	r0, r3
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b007      	add	sp, #28
 80063e6:	bd90      	pop	{r4, r7, pc}
 80063e8:	80002400 	.word	0x80002400
 80063ec:	fe00e800 	.word	0xfe00e800

080063f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2202      	movs	r2, #2
 8006400:	4013      	ands	r3, r2
 8006402:	2b02      	cmp	r3, #2
 8006404:	d103      	bne.n	800640e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2201      	movs	r2, #1
 8006416:	4013      	ands	r3, r2
 8006418:	2b01      	cmp	r3, #1
 800641a:	d007      	beq.n	800642c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2101      	movs	r1, #1
 8006428:	430a      	orrs	r2, r1
 800642a:	619a      	str	r2, [r3, #24]
  }
}
 800642c:	46c0      	nop			@ (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	b002      	add	sp, #8
 8006432:	bd80      	pop	{r7, pc}

08006434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	1dfb      	adds	r3, r7, #7
 8006442:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006444:	e03a      	b.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 f971 	bl	8006734 <I2C_IsErrorOccurred>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d001      	beq.n	800645a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e040      	b.n	80064dc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	d02d      	beq.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006460:	f7fe f940 	bl	80046e4 <HAL_GetTick>
 8006464:	0002      	movs	r2, r0
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d302      	bcc.n	8006476 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d122      	bne.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	425a      	negs	r2, r3
 8006486:	4153      	adcs	r3, r2
 8006488:	b2db      	uxtb	r3, r3
 800648a:	001a      	movs	r2, r3
 800648c:	1dfb      	adds	r3, r7, #7
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d113      	bne.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006498:	2220      	movs	r2, #32
 800649a:	431a      	orrs	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2241      	movs	r2, #65	@ 0x41
 80064a4:	2120      	movs	r1, #32
 80064a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2242      	movs	r2, #66	@ 0x42
 80064ac:	2100      	movs	r1, #0
 80064ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2240      	movs	r2, #64	@ 0x40
 80064b4:	2100      	movs	r1, #0
 80064b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e00f      	b.n	80064dc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	425a      	negs	r2, r3
 80064cc:	4153      	adcs	r3, r2
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	001a      	movs	r2, r3
 80064d2:	1dfb      	adds	r3, r7, #7
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d0b5      	beq.n	8006446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	0018      	movs	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	b004      	add	sp, #16
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064f0:	e032      	b.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f000 f91b 	bl	8006734 <I2C_IsErrorOccurred>
 80064fe:	1e03      	subs	r3, r0, #0
 8006500:	d001      	beq.n	8006506 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e030      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	d025      	beq.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650c:	f7fe f8ea 	bl	80046e4 <HAL_GetTick>
 8006510:	0002      	movs	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	d302      	bcc.n	8006522 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d11a      	bne.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2202      	movs	r2, #2
 800652a:	4013      	ands	r3, r2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d013      	beq.n	8006558 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006534:	2220      	movs	r2, #32
 8006536:	431a      	orrs	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2241      	movs	r2, #65	@ 0x41
 8006540:	2120      	movs	r1, #32
 8006542:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2242      	movs	r2, #66	@ 0x42
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2240      	movs	r2, #64	@ 0x40
 8006550:	2100      	movs	r1, #0
 8006552:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e007      	b.n	8006568 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2202      	movs	r2, #2
 8006560:	4013      	ands	r3, r2
 8006562:	2b02      	cmp	r3, #2
 8006564:	d1c5      	bne.n	80064f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b004      	add	sp, #16
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800657c:	e02f      	b.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 f8d5 	bl	8006734 <I2C_IsErrorOccurred>
 800658a:	1e03      	subs	r3, r0, #0
 800658c:	d001      	beq.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e02d      	b.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fe f8a7 	bl	80046e4 <HAL_GetTick>
 8006596:	0002      	movs	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11a      	bne.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2220      	movs	r2, #32
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d013      	beq.n	80065de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	2220      	movs	r2, #32
 80065bc:	431a      	orrs	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2241      	movs	r2, #65	@ 0x41
 80065c6:	2120      	movs	r1, #32
 80065c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2242      	movs	r2, #66	@ 0x42
 80065ce:	2100      	movs	r1, #0
 80065d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2240      	movs	r2, #64	@ 0x40
 80065d6:	2100      	movs	r1, #0
 80065d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e007      	b.n	80065ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2220      	movs	r2, #32
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d1c8      	bne.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b004      	add	sp, #16
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006604:	2317      	movs	r3, #23
 8006606:	18fb      	adds	r3, r7, r3
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800660c:	e07b      	b.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f88d 	bl	8006734 <I2C_IsErrorOccurred>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d003      	beq.n	8006626 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800661e:	2317      	movs	r3, #23
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	2201      	movs	r2, #1
 8006624:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2220      	movs	r2, #32
 800662e:	4013      	ands	r3, r2
 8006630:	2b20      	cmp	r3, #32
 8006632:	d140      	bne.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006634:	2117      	movs	r1, #23
 8006636:	187b      	adds	r3, r7, r1
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d13b      	bne.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	2204      	movs	r2, #4
 8006646:	4013      	ands	r3, r2
 8006648:	2b04      	cmp	r3, #4
 800664a:	d106      	bne.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006654:	187b      	adds	r3, r7, r1
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2210      	movs	r2, #16
 8006662:	4013      	ands	r3, r2
 8006664:	2b10      	cmp	r3, #16
 8006666:	d123      	bne.n	80066b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2210      	movs	r2, #16
 800666e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2204      	movs	r2, #4
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2220      	movs	r2, #32
 800667c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4929      	ldr	r1, [pc, #164]	@ (8006730 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800668a:	400a      	ands	r2, r1
 800668c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2241      	movs	r2, #65	@ 0x41
 8006692:	2120      	movs	r1, #32
 8006694:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2242      	movs	r2, #66	@ 0x42
 800669a:	2100      	movs	r1, #0
 800669c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2240      	movs	r2, #64	@ 0x40
 80066a2:	2100      	movs	r1, #0
 80066a4:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80066a6:	2317      	movs	r3, #23
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e002      	b.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80066b6:	f7fe f815 	bl	80046e4 <HAL_GetTick>
 80066ba:	0002      	movs	r2, r0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11c      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80066cc:	2017      	movs	r0, #23
 80066ce:	183b      	adds	r3, r7, r0
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d117      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2204      	movs	r2, #4
 80066de:	4013      	ands	r3, r2
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d010      	beq.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e8:	2220      	movs	r2, #32
 80066ea:	431a      	orrs	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2241      	movs	r2, #65	@ 0x41
 80066f4:	2120      	movs	r1, #32
 80066f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2240      	movs	r2, #64	@ 0x40
 80066fc:	2100      	movs	r1, #0
 80066fe:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006700:	183b      	adds	r3, r7, r0
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2204      	movs	r2, #4
 800670e:	4013      	ands	r3, r2
 8006710:	2b04      	cmp	r3, #4
 8006712:	d005      	beq.n	8006720 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006714:	2317      	movs	r3, #23
 8006716:	18fb      	adds	r3, r7, r3
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d100      	bne.n	8006720 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800671e:	e776      	b.n	800660e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8006720:	2317      	movs	r3, #23
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	781b      	ldrb	r3, [r3, #0]
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b006      	add	sp, #24
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			@ (mov r8, r8)
 8006730:	fe00e800 	.word	0xfe00e800

08006734 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	@ 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006740:	2327      	movs	r3, #39	@ 0x27
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2210      	movs	r2, #16
 800675c:	4013      	ands	r3, r2
 800675e:	d100      	bne.n	8006762 <I2C_IsErrorOccurred+0x2e>
 8006760:	e079      	b.n	8006856 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2210      	movs	r2, #16
 8006768:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800676a:	e057      	b.n	800681c <I2C_IsErrorOccurred+0xe8>
 800676c:	2227      	movs	r2, #39	@ 0x27
 800676e:	18bb      	adds	r3, r7, r2
 8006770:	18ba      	adds	r2, r7, r2
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	3301      	adds	r3, #1
 800677a:	d04f      	beq.n	800681c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800677c:	f7fd ffb2 	bl	80046e4 <HAL_GetTick>
 8006780:	0002      	movs	r2, r0
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	429a      	cmp	r2, r3
 800678a:	d302      	bcc.n	8006792 <I2C_IsErrorOccurred+0x5e>
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d144      	bne.n	800681c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	2380      	movs	r3, #128	@ 0x80
 800679a:	01db      	lsls	r3, r3, #7
 800679c:	4013      	ands	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80067a0:	2013      	movs	r0, #19
 80067a2:	183b      	adds	r3, r7, r0
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	2142      	movs	r1, #66	@ 0x42
 80067a8:	5c52      	ldrb	r2, [r2, r1]
 80067aa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	401a      	ands	r2, r3
 80067b8:	2380      	movs	r3, #128	@ 0x80
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	429a      	cmp	r2, r3
 80067be:	d126      	bne.n	800680e <I2C_IsErrorOccurred+0xda>
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	2380      	movs	r3, #128	@ 0x80
 80067c4:	01db      	lsls	r3, r3, #7
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d021      	beq.n	800680e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80067ca:	183b      	adds	r3, r7, r0
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d01d      	beq.n	800680e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2180      	movs	r1, #128	@ 0x80
 80067de:	01c9      	lsls	r1, r1, #7
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80067e4:	f7fd ff7e 	bl	80046e4 <HAL_GetTick>
 80067e8:	0003      	movs	r3, r0
 80067ea:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ec:	e00f      	b.n	800680e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80067ee:	f7fd ff79 	bl	80046e4 <HAL_GetTick>
 80067f2:	0002      	movs	r2, r0
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b19      	cmp	r3, #25
 80067fa:	d908      	bls.n	800680e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	2220      	movs	r2, #32
 8006800:	4313      	orrs	r3, r2
 8006802:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006804:	2327      	movs	r3, #39	@ 0x27
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	2201      	movs	r2, #1
 800680a:	701a      	strb	r2, [r3, #0]

              break;
 800680c:	e006      	b.n	800681c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	2220      	movs	r2, #32
 8006816:	4013      	ands	r3, r2
 8006818:	2b20      	cmp	r3, #32
 800681a:	d1e8      	bne.n	80067ee <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2220      	movs	r2, #32
 8006824:	4013      	ands	r3, r2
 8006826:	2b20      	cmp	r3, #32
 8006828:	d004      	beq.n	8006834 <I2C_IsErrorOccurred+0x100>
 800682a:	2327      	movs	r3, #39	@ 0x27
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d09b      	beq.n	800676c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006834:	2327      	movs	r3, #39	@ 0x27
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2220      	movs	r2, #32
 8006844:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2204      	movs	r2, #4
 800684a:	4313      	orrs	r3, r2
 800684c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800684e:	2327      	movs	r3, #39	@ 0x27
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	2380      	movs	r3, #128	@ 0x80
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4013      	ands	r3, r2
 8006866:	d00c      	beq.n	8006882 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2201      	movs	r2, #1
 800686c:	4313      	orrs	r3, r2
 800686e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2280      	movs	r2, #128	@ 0x80
 8006876:	0052      	lsls	r2, r2, #1
 8006878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800687a:	2327      	movs	r3, #39	@ 0x27
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	2380      	movs	r3, #128	@ 0x80
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4013      	ands	r3, r2
 800688a:	d00c      	beq.n	80068a6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2208      	movs	r2, #8
 8006890:	4313      	orrs	r3, r2
 8006892:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2280      	movs	r2, #128	@ 0x80
 800689a:	00d2      	lsls	r2, r2, #3
 800689c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800689e:	2327      	movs	r3, #39	@ 0x27
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	2201      	movs	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	2380      	movs	r3, #128	@ 0x80
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4013      	ands	r3, r2
 80068ae:	d00c      	beq.n	80068ca <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2202      	movs	r2, #2
 80068b4:	4313      	orrs	r3, r2
 80068b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2280      	movs	r2, #128	@ 0x80
 80068be:	0092      	lsls	r2, r2, #2
 80068c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80068c2:	2327      	movs	r3, #39	@ 0x27
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80068ca:	2327      	movs	r3, #39	@ 0x27
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01d      	beq.n	8006910 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	0018      	movs	r0, r3
 80068d8:	f7ff fd8a 	bl	80063f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	490e      	ldr	r1, [pc, #56]	@ (8006920 <I2C_IsErrorOccurred+0x1ec>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2241      	movs	r2, #65	@ 0x41
 80068fc:	2120      	movs	r1, #32
 80068fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2242      	movs	r2, #66	@ 0x42
 8006904:	2100      	movs	r1, #0
 8006906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2240      	movs	r2, #64	@ 0x40
 800690c:	2100      	movs	r1, #0
 800690e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006910:	2327      	movs	r3, #39	@ 0x27
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	781b      	ldrb	r3, [r3, #0]
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b00a      	add	sp, #40	@ 0x28
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	fe00e800 	.word	0xfe00e800

08006924 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006924:	b590      	push	{r4, r7, lr}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	0008      	movs	r0, r1
 800692e:	0011      	movs	r1, r2
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	240a      	movs	r4, #10
 8006934:	193b      	adds	r3, r7, r4
 8006936:	1c02      	adds	r2, r0, #0
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	2009      	movs	r0, #9
 800693c:	183b      	adds	r3, r7, r0
 800693e:	1c0a      	adds	r2, r1, #0
 8006940:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006942:	193b      	adds	r3, r7, r4
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	059b      	lsls	r3, r3, #22
 8006948:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800694a:	183b      	adds	r3, r7, r0
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	0419      	lsls	r1, r3, #16
 8006950:	23ff      	movs	r3, #255	@ 0xff
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006956:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	4313      	orrs	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800696e:	0d51      	lsrs	r1, r2, #21
 8006970:	2280      	movs	r2, #128	@ 0x80
 8006972:	00d2      	lsls	r2, r2, #3
 8006974:	400a      	ands	r2, r1
 8006976:	4907      	ldr	r1, [pc, #28]	@ (8006994 <I2C_TransferConfig+0x70>)
 8006978:	430a      	orrs	r2, r1
 800697a:	43d2      	mvns	r2, r2
 800697c:	401a      	ands	r2, r3
 800697e:	0011      	movs	r1, r2
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800698a:	46c0      	nop			@ (mov r8, r8)
 800698c:	46bd      	mov	sp, r7
 800698e:	b007      	add	sp, #28
 8006990:	bd90      	pop	{r4, r7, pc}
 8006992:	46c0      	nop			@ (mov r8, r8)
 8006994:	03ff63ff 	.word	0x03ff63ff

08006998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2241      	movs	r2, #65	@ 0x41
 80069a6:	5c9b      	ldrb	r3, [r3, r2]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d138      	bne.n	8006a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2240      	movs	r2, #64	@ 0x40
 80069b2:	5c9b      	ldrb	r3, [r3, r2]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e032      	b.n	8006a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2240      	movs	r2, #64	@ 0x40
 80069c0:	2101      	movs	r1, #1
 80069c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2241      	movs	r2, #65	@ 0x41
 80069c8:	2124      	movs	r1, #36	@ 0x24
 80069ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2101      	movs	r1, #1
 80069d8:	438a      	bics	r2, r1
 80069da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4911      	ldr	r1, [pc, #68]	@ (8006a2c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80069e8:	400a      	ands	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2101      	movs	r1, #1
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2241      	movs	r2, #65	@ 0x41
 8006a10:	2120      	movs	r1, #32
 8006a12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e000      	b.n	8006a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
  }
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b002      	add	sp, #8
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	ffffefff 	.word	0xffffefff

08006a30 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2241      	movs	r2, #65	@ 0x41
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d139      	bne.n	8006aba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2240      	movs	r2, #64	@ 0x40
 8006a4a:	5c9b      	ldrb	r3, [r3, r2]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e033      	b.n	8006abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2240      	movs	r2, #64	@ 0x40
 8006a58:	2101      	movs	r1, #1
 8006a5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2241      	movs	r2, #65	@ 0x41
 8006a60:	2124      	movs	r1, #36	@ 0x24
 8006a62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2101      	movs	r1, #1
 8006a70:	438a      	bics	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2241      	movs	r2, #65	@ 0x41
 8006aaa:	2120      	movs	r1, #32
 8006aac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2240      	movs	r2, #64	@ 0x40
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b004      	add	sp, #16
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	fffff0ff 	.word	0xfffff0ff

08006ac8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	000a      	movs	r2, r1
 8006ad2:	1cbb      	adds	r3, r7, #2
 8006ad4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006ad6:	230a      	movs	r3, #10
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8006ada:	e002      	b.n	8006ae2 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1f9      	bne.n	8006adc <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8006ae8:	1cbb      	adds	r3, r7, #2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4a06      	ldr	r2, [pc, #24]	@ (8006b08 <PCD_GET_EP_RX_CNT+0x40>)
 8006af0:	4694      	mov	ip, r2
 8006af2:	4463      	add	r3, ip
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	059b      	lsls	r3, r3, #22
 8006afc:	0d9b      	lsrs	r3, r3, #22
 8006afe:	b29b      	uxth	r3, r3
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b004      	add	sp, #16
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40009800 	.word	0x40009800

08006b0c <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	000a      	movs	r2, r1
 8006b16:	1cbb      	adds	r3, r7, #2
 8006b18:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006b1a:	230a      	movs	r3, #10
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8006b1e:	e002      	b.n	8006b26 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f9      	bne.n	8006b20 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8006b2c:	1cbb      	adds	r3, r7, #2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4a06      	ldr	r2, [pc, #24]	@ (8006b4c <PCD_GET_EP_DBUF0_CNT+0x40>)
 8006b34:	4694      	mov	ip, r2
 8006b36:	4463      	add	r3, ip
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	059b      	lsls	r3, r3, #22
 8006b40:	0d9b      	lsrs	r3, r3, #22
 8006b42:	b29b      	uxth	r3, r3
}
 8006b44:	0018      	movs	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b004      	add	sp, #16
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40009800 	.word	0x40009800

08006b50 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	000a      	movs	r2, r1
 8006b5a:	1cbb      	adds	r3, r7, #2
 8006b5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006b5e:	230a      	movs	r3, #10
 8006b60:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8006b62:	e002      	b.n	8006b6a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f9      	bne.n	8006b64 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8006b70:	1cbb      	adds	r3, r7, #2
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4a06      	ldr	r2, [pc, #24]	@ (8006b90 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8006b78:	4694      	mov	ip, r2
 8006b7a:	4463      	add	r3, ip
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	059b      	lsls	r3, r3, #22
 8006b84:	0d9b      	lsrs	r3, r3, #22
 8006b86:	b29b      	uxth	r3, r3
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b004      	add	sp, #16
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40009800 	.word	0x40009800

08006b94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e0ea      	b.n	8006d7c <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a76      	ldr	r2, [pc, #472]	@ (8006d84 <HAL_PCD_Init+0x1f0>)
 8006baa:	5c9b      	ldrb	r3, [r3, r2]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	23a5      	movs	r3, #165	@ 0xa5
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	2100      	movs	r1, #0
 8006bba:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f007 fdce 	bl	800e760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8006d84 <HAL_PCD_Init+0x1f0>)
 8006bc8:	2103      	movs	r1, #3
 8006bca:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f003 faa3 	bl	800a11c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bd6:	230f      	movs	r3, #15
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e049      	b.n	8006c74 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006be0:	200f      	movs	r0, #15
 8006be2:	183b      	adds	r3, r7, r0
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	0013      	movs	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	189b      	adds	r3, r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	18cb      	adds	r3, r1, r3
 8006bf2:	3315      	adds	r3, #21
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bf8:	183b      	adds	r3, r7, r0
 8006bfa:	781a      	ldrb	r2, [r3, #0]
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	0013      	movs	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	189b      	adds	r3, r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	18cb      	adds	r3, r1, r3
 8006c08:	3314      	adds	r3, #20
 8006c0a:	183a      	adds	r2, r7, r0
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c10:	183b      	adds	r3, r7, r0
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	0013      	movs	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	189b      	adds	r3, r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	18cb      	adds	r3, r1, r3
 8006c20:	3317      	adds	r3, #23
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c26:	183b      	adds	r3, r7, r0
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	0013      	movs	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	189b      	adds	r3, r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	18cb      	adds	r3, r1, r3
 8006c36:	3324      	adds	r3, #36	@ 0x24
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c3c:	183b      	adds	r3, r7, r0
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	0013      	movs	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	189b      	adds	r3, r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	18cb      	adds	r3, r1, r3
 8006c4c:	3328      	adds	r3, #40	@ 0x28
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c52:	183b      	adds	r3, r7, r0
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	189b      	adds	r3, r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	18cb      	adds	r3, r1, r3
 8006c64:	3304      	adds	r3, #4
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	781a      	ldrb	r2, [r3, #0]
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	3201      	adds	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	791b      	ldrb	r3, [r3, #4]
 8006c78:	210f      	movs	r1, #15
 8006c7a:	187a      	adds	r2, r7, r1
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d3ae      	bcc.n	8006be0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e056      	b.n	8006d38 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c8a:	240f      	movs	r4, #15
 8006c8c:	193b      	adds	r3, r7, r4
 8006c8e:	781a      	ldrb	r2, [r3, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	2356      	movs	r3, #86	@ 0x56
 8006c94:	33ff      	adds	r3, #255	@ 0xff
 8006c96:	0019      	movs	r1, r3
 8006c98:	0013      	movs	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	189b      	adds	r3, r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	18c3      	adds	r3, r0, r3
 8006ca2:	185b      	adds	r3, r3, r1
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ca8:	193b      	adds	r3, r7, r4
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	23aa      	movs	r3, #170	@ 0xaa
 8006cb0:	0059      	lsls	r1, r3, #1
 8006cb2:	0013      	movs	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	189b      	adds	r3, r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	18c3      	adds	r3, r0, r3
 8006cbc:	185b      	adds	r3, r3, r1
 8006cbe:	193a      	adds	r2, r7, r4
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cc4:	193b      	adds	r3, r7, r4
 8006cc6:	781a      	ldrb	r2, [r3, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	2358      	movs	r3, #88	@ 0x58
 8006ccc:	33ff      	adds	r3, #255	@ 0xff
 8006cce:	0019      	movs	r1, r3
 8006cd0:	0013      	movs	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	18c3      	adds	r3, r0, r3
 8006cda:	185b      	adds	r3, r3, r1
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ce0:	193b      	adds	r3, r7, r4
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	23b2      	movs	r3, #178	@ 0xb2
 8006ce8:	0059      	lsls	r1, r3, #1
 8006cea:	0013      	movs	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	189b      	adds	r3, r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	18c3      	adds	r3, r0, r3
 8006cf4:	185b      	adds	r3, r3, r1
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	23b4      	movs	r3, #180	@ 0xb4
 8006d02:	0059      	lsls	r1, r3, #1
 8006d04:	0013      	movs	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	189b      	adds	r3, r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	18c3      	adds	r3, r0, r3
 8006d0e:	185b      	adds	r3, r3, r1
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d14:	193b      	adds	r3, r7, r4
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	23b6      	movs	r3, #182	@ 0xb6
 8006d1c:	0059      	lsls	r1, r3, #1
 8006d1e:	0013      	movs	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	18c3      	adds	r3, r0, r3
 8006d28:	185b      	adds	r3, r3, r1
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d2e:	193b      	adds	r3, r7, r4
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	193b      	adds	r3, r7, r4
 8006d34:	3201      	adds	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	791b      	ldrb	r3, [r3, #4]
 8006d3c:	220f      	movs	r2, #15
 8006d3e:	18ba      	adds	r2, r7, r2
 8006d40:	7812      	ldrb	r2, [r2, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3a1      	bcc.n	8006c8a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	466a      	mov	r2, sp
 8006d4e:	7c19      	ldrb	r1, [r3, #16]
 8006d50:	7011      	strb	r1, [r2, #0]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 fa19 	bl	800a18e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a07      	ldr	r2, [pc, #28]	@ (8006d84 <HAL_PCD_Init+0x1f0>)
 8006d66:	2101      	movs	r1, #1
 8006d68:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7b1b      	ldrb	r3, [r3, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d103      	bne.n	8006d7a <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0018      	movs	r0, r3
 8006d76:	f001 fbf1 	bl	800855c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b005      	add	sp, #20
 8006d82:	bd90      	pop	{r4, r7, pc}
 8006d84:	00000295 	.word	0x00000295

08006d88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	23a5      	movs	r3, #165	@ 0xa5
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	5cd3      	ldrb	r3, [r2, r3]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_PCD_Start+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e014      	b.n	8006dca <HAL_PCD_Start+0x42>
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	23a5      	movs	r3, #165	@ 0xa5
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	2101      	movs	r1, #1
 8006da8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f003 f9a0 	bl	800a0f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f004 ffaa 	bl	800bd12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	23a5      	movs	r3, #165	@ 0xa5
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	0018      	movs	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	b002      	add	sp, #8
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f004 ffa6 	bl	800bd32 <USB_ReadInterrupts>
 8006de6:	0003      	movs	r3, r0
 8006de8:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8006dea:	4a7c      	ldr	r2, [pc, #496]	@ (8006fdc <HAL_PCD_IRQHandler+0x208>)
 8006dec:	23a0      	movs	r3, #160	@ 0xa0
 8006dee:	58d3      	ldr	r3, [r2, r3]
 8006df0:	2204      	movs	r2, #4
 8006df2:	4013      	ands	r3, r2
 8006df4:	d100      	bne.n	8006df8 <HAL_PCD_IRQHandler+0x24>
 8006df6:	e0ed      	b.n	8006fd4 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 fb35 	bl	8007474 <PCD_EP_ISR_Handler>

    return;
 8006e0a:	e0e4      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4013      	ands	r3, r2
 8006e14:	d011      	beq.n	8006e3a <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	496f      	ldr	r1, [pc, #444]	@ (8006fe0 <HAL_PCD_IRQHandler+0x20c>)
 8006e22:	400a      	ands	r2, r1
 8006e24:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f007 fd5c 	bl	800e8e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2100      	movs	r1, #0
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 f8e4 	bl	8007000 <HAL_PCD_SetAddress>

    return;
 8006e38:	e0cd      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	2380      	movs	r3, #128	@ 0x80
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	4013      	ands	r3, r2
 8006e42:	d008      	beq.n	8006e56 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4965      	ldr	r1, [pc, #404]	@ (8006fe4 <HAL_PCD_IRQHandler+0x210>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006e54:	e0bf      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	2380      	movs	r3, #128	@ 0x80
 8006e5a:	019b      	lsls	r3, r3, #6
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d008      	beq.n	8006e72 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	495f      	ldr	r1, [pc, #380]	@ (8006fe8 <HAL_PCD_IRQHandler+0x214>)
 8006e6c:	400a      	ands	r2, r1
 8006e6e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006e70:	e0b1      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	2380      	movs	r3, #128	@ 0x80
 8006e76:	015b      	lsls	r3, r3, #5
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2104      	movs	r1, #4
 8006e88:	438a      	bics	r2, r1
 8006e8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2108      	movs	r1, #8
 8006e98:	438a      	bics	r2, r1
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	23b3      	movs	r3, #179	@ 0xb3
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	5cd3      	ldrb	r3, [r2, r3]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d109      	bne.n	8006ebc <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	23b3      	movs	r3, #179	@ 0xb3
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	2100      	movs	r1, #0
 8006eb0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f007 ff94 	bl	800ede4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f007 fd52 	bl	800e968 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4947      	ldr	r1, [pc, #284]	@ (8006fec <HAL_PCD_IRQHandler+0x218>)
 8006ed0:	400a      	ands	r2, r1
 8006ed2:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006ed4:	e07f      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	2380      	movs	r3, #128	@ 0x80
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4013      	ands	r3, r2
 8006ede:	d01c      	beq.n	8006f1a <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2108      	movs	r1, #8
 8006eec:	430a      	orrs	r2, r1
 8006eee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	493d      	ldr	r1, [pc, #244]	@ (8006ff0 <HAL_PCD_IRQHandler+0x21c>)
 8006efc:	400a      	ands	r2, r1
 8006efe:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	0018      	movs	r0, r3
 8006f14:	f007 fd0c 	bl	800e930 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f18:	e05d      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2280      	movs	r2, #128	@ 0x80
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d038      	beq.n	8006f94 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4931      	ldr	r1, [pc, #196]	@ (8006ff4 <HAL_PCD_IRQHandler+0x220>)
 8006f2e:	400a      	ands	r2, r1
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	23b3      	movs	r3, #179	@ 0xb3
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d125      	bne.n	8006f8a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2104      	movs	r1, #4
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2108      	movs	r1, #8
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	23b3      	movs	r3, #179	@ 0xb3
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	2101      	movs	r1, #1
 8006f66:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	223c      	movs	r2, #60	@ 0x3c
 8006f72:	4013      	ands	r3, r2
 8006f74:	0019      	movs	r1, r3
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	23b4      	movs	r3, #180	@ 0xb4
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2101      	movs	r1, #1
 8006f82:	0018      	movs	r0, r3
 8006f84:	f007 ff2e 	bl	800ede4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006f88:	e025      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f007 fccf 	bl	800e930 <HAL_PCD_SuspendCallback>
    return;
 8006f92:	e020      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d00c      	beq.n	8006fb8 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4913      	ldr	r1, [pc, #76]	@ (8006ff8 <HAL_PCD_IRQHandler+0x224>)
 8006faa:	400a      	ands	r2, r1
 8006fac:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f007 fc89 	bl	800e8c8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006fb6:	e00e      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	2380      	movs	r3, #128	@ 0x80
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	490b      	ldr	r1, [pc, #44]	@ (8006ffc <HAL_PCD_IRQHandler+0x228>)
 8006fce:	400a      	ands	r2, r1
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006fd2:	e000      	b.n	8006fd6 <HAL_PCD_IRQHandler+0x202>
    return;
 8006fd4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b004      	add	sp, #16
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	0000fbff 	.word	0x0000fbff
 8006fe4:	0000bfff 	.word	0x0000bfff
 8006fe8:	0000dfff 	.word	0x0000dfff
 8006fec:	0000efff 	.word	0x0000efff
 8006ff0:	0000f7ff 	.word	0x0000f7ff
 8006ff4:	0000ff7f 	.word	0x0000ff7f
 8006ff8:	0000fdff 	.word	0x0000fdff
 8006ffc:	0000feff 	.word	0x0000feff

08007000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	000a      	movs	r2, r1
 800700a:	1cfb      	adds	r3, r7, #3
 800700c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	23a5      	movs	r3, #165	@ 0xa5
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	5cd3      	ldrb	r3, [r2, r3]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_PCD_SetAddress+0x1e>
 800701a:	2302      	movs	r3, #2
 800701c:	e016      	b.n	800704c <HAL_PCD_SetAddress+0x4c>
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	23a5      	movs	r3, #165	@ 0xa5
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	2101      	movs	r1, #1
 8007026:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	1cfa      	adds	r2, r7, #3
 800702c:	7812      	ldrb	r2, [r2, #0]
 800702e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	1cfb      	adds	r3, r7, #3
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	0019      	movs	r1, r3
 800703a:	0010      	movs	r0, r2
 800703c:	f004 fe56 	bl	800bcec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	23a5      	movs	r3, #165	@ 0xa5
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	2100      	movs	r1, #0
 8007048:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	000c      	movs	r4, r1
 800705e:	0010      	movs	r0, r2
 8007060:	0019      	movs	r1, r3
 8007062:	1cfb      	adds	r3, r7, #3
 8007064:	1c22      	adds	r2, r4, #0
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	003b      	movs	r3, r7
 800706a:	1c02      	adds	r2, r0, #0
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	1cbb      	adds	r3, r7, #2
 8007070:	1c0a      	adds	r2, r1, #0
 8007072:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007074:	230b      	movs	r3, #11
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800707c:	1cfb      	adds	r3, r7, #3
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	da10      	bge.n	80070a8 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007086:	1cfb      	adds	r3, r7, #3
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2207      	movs	r2, #7
 800708c:	401a      	ands	r2, r3
 800708e:	0013      	movs	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	189b      	adds	r3, r3, r2
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	3310      	adds	r3, #16
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	18d3      	adds	r3, r2, r3
 800709c:	3304      	adds	r3, #4
 800709e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	705a      	strb	r2, [r3, #1]
 80070a6:	e010      	b.n	80070ca <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070a8:	1cfb      	adds	r3, r7, #3
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2207      	movs	r2, #7
 80070ae:	401a      	ands	r2, r3
 80070b0:	0013      	movs	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	189b      	adds	r3, r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	3351      	adds	r3, #81	@ 0x51
 80070ba:	33ff      	adds	r3, #255	@ 0xff
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	18d3      	adds	r3, r2, r3
 80070c0:	3304      	adds	r3, #4
 80070c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80070ca:	1cfb      	adds	r3, r7, #3
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2207      	movs	r2, #7
 80070d0:	4013      	ands	r3, r2
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80070d8:	003b      	movs	r3, r7
 80070da:	881a      	ldrh	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1cba      	adds	r2, r7, #2
 80070e4:	7812      	ldrb	r2, [r2, #0]
 80070e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070e8:	1cbb      	adds	r3, r7, #2
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d102      	bne.n	80070f6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	23a5      	movs	r3, #165	@ 0xa5
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	5cd3      	ldrb	r3, [r2, r3]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_PCD_EP_Open+0xb2>
 8007102:	2302      	movs	r3, #2
 8007104:	e013      	b.n	800712e <HAL_PCD_EP_Open+0xda>
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	23a5      	movs	r3, #165	@ 0xa5
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	2101      	movs	r1, #1
 800710e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f003 f863 	bl	800a1e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	23a5      	movs	r3, #165	@ 0xa5
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	2100      	movs	r1, #0
 8007126:	54d1      	strb	r1, [r2, r3]

  return ret;
 8007128:	230b      	movs	r3, #11
 800712a:	18fb      	adds	r3, r7, r3
 800712c:	781b      	ldrb	r3, [r3, #0]
}
 800712e:	0018      	movs	r0, r3
 8007130:	46bd      	mov	sp, r7
 8007132:	b005      	add	sp, #20
 8007134:	bd90      	pop	{r4, r7, pc}

08007136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	000a      	movs	r2, r1
 8007140:	1cfb      	adds	r3, r7, #3
 8007142:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007144:	1cfb      	adds	r3, r7, #3
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	b25b      	sxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	da10      	bge.n	8007170 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800714e:	1cfb      	adds	r3, r7, #3
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2207      	movs	r2, #7
 8007154:	401a      	ands	r2, r3
 8007156:	0013      	movs	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	189b      	adds	r3, r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	3310      	adds	r3, #16
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	18d3      	adds	r3, r2, r3
 8007164:	3304      	adds	r3, #4
 8007166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	705a      	strb	r2, [r3, #1]
 800716e:	e010      	b.n	8007192 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007170:	1cfb      	adds	r3, r7, #3
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2207      	movs	r2, #7
 8007176:	401a      	ands	r2, r3
 8007178:	0013      	movs	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	189b      	adds	r3, r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3351      	adds	r3, #81	@ 0x51
 8007182:	33ff      	adds	r3, #255	@ 0xff
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	18d3      	adds	r3, r2, r3
 8007188:	3304      	adds	r3, #4
 800718a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007192:	1cfb      	adds	r3, r7, #3
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2207      	movs	r2, #7
 8007198:	4013      	ands	r3, r2
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	23a5      	movs	r3, #165	@ 0xa5
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	5cd3      	ldrb	r3, [r2, r3]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_PCD_EP_Close+0x7a>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e011      	b.n	80071d4 <HAL_PCD_EP_Close+0x9e>
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	23a5      	movs	r3, #165	@ 0xa5
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	2101      	movs	r1, #1
 80071b8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	0011      	movs	r1, r2
 80071c2:	0018      	movs	r0, r3
 80071c4:	f003 fb42 	bl	800a84c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	23a5      	movs	r3, #165	@ 0xa5
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	2100      	movs	r1, #0
 80071d0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b004      	add	sp, #16
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	200b      	movs	r0, #11
 80071ea:	183b      	adds	r3, r7, r0
 80071ec:	1c0a      	adds	r2, r1, #0
 80071ee:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071f0:	0001      	movs	r1, r0
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2207      	movs	r2, #7
 80071f8:	401a      	ands	r2, r3
 80071fa:	0013      	movs	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	3351      	adds	r3, #81	@ 0x51
 8007204:	33ff      	adds	r3, #255	@ 0xff
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	18d3      	adds	r3, r2, r3
 800720a:	3304      	adds	r3, #4
 800720c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007226:	187b      	adds	r3, r7, r1
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2207      	movs	r2, #7
 800722c:	4013      	ands	r3, r2
 800722e:	b2da      	uxtb	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f003 fc6b 	bl	800ab18 <USB_EPStartXfer>

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	0018      	movs	r0, r3
 8007246:	46bd      	mov	sp, r7
 8007248:	b006      	add	sp, #24
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	000a      	movs	r2, r1
 8007256:	1cfb      	adds	r3, r7, #3
 8007258:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800725a:	1cfb      	adds	r3, r7, #3
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2207      	movs	r2, #7
 8007260:	401a      	ands	r2, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	23b8      	movs	r3, #184	@ 0xb8
 8007266:	0059      	lsls	r1, r3, #1
 8007268:	0013      	movs	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	189b      	adds	r3, r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	18c3      	adds	r3, r0, r3
 8007272:	185b      	adds	r3, r3, r1
 8007274:	681b      	ldr	r3, [r3, #0]
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b002      	add	sp, #8
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
 800728a:	200b      	movs	r0, #11
 800728c:	183b      	adds	r3, r7, r0
 800728e:	1c0a      	adds	r2, r1, #0
 8007290:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007292:	183b      	adds	r3, r7, r0
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2207      	movs	r2, #7
 8007298:	401a      	ands	r2, r3
 800729a:	0013      	movs	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	3310      	adds	r3, #16
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	18d3      	adds	r3, r2, r3
 80072a8:	3304      	adds	r3, #4
 80072aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2224      	movs	r2, #36	@ 0x24
 80072bc:	2101      	movs	r1, #1
 80072be:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2201      	movs	r2, #1
 80072d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072d2:	183b      	adds	r3, r7, r0
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2207      	movs	r2, #7
 80072d8:	4013      	ands	r3, r2
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	0011      	movs	r1, r2
 80072e8:	0018      	movs	r0, r3
 80072ea:	f003 fc15 	bl	800ab18 <USB_EPStartXfer>

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b006      	add	sp, #24
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	000a      	movs	r2, r1
 8007302:	1cfb      	adds	r3, r7, #3
 8007304:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007306:	1cfb      	adds	r3, r7, #3
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2207      	movs	r2, #7
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	7912      	ldrb	r2, [r2, #4]
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e048      	b.n	80073ac <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800731a:	1cfb      	adds	r3, r7, #3
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b25b      	sxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	da10      	bge.n	8007346 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007324:	1cfb      	adds	r3, r7, #3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2207      	movs	r2, #7
 800732a:	401a      	ands	r2, r3
 800732c:	0013      	movs	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	189b      	adds	r3, r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	3310      	adds	r3, #16
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	18d3      	adds	r3, r2, r3
 800733a:	3304      	adds	r3, #4
 800733c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	705a      	strb	r2, [r3, #1]
 8007344:	e00e      	b.n	8007364 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007346:	1cfb      	adds	r3, r7, #3
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	0013      	movs	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	189b      	adds	r3, r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	3351      	adds	r3, #81	@ 0x51
 8007354:	33ff      	adds	r3, #255	@ 0xff
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	18d3      	adds	r3, r2, r3
 800735a:	3304      	adds	r3, #4
 800735c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800736a:	1cfb      	adds	r3, r7, #3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2207      	movs	r2, #7
 8007370:	4013      	ands	r3, r2
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	23a5      	movs	r3, #165	@ 0xa5
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_PCD_EP_SetStall+0x90>
 8007384:	2302      	movs	r3, #2
 8007386:	e011      	b.n	80073ac <HAL_PCD_EP_SetStall+0xb4>
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	23a5      	movs	r3, #165	@ 0xa5
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	2101      	movs	r1, #1
 8007390:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f004 fbd2 	bl	800bb44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	23a5      	movs	r3, #165	@ 0xa5
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	2100      	movs	r1, #0
 80073a8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	0018      	movs	r0, r3
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	000a      	movs	r2, r1
 80073be:	1cfb      	adds	r3, r7, #3
 80073c0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073c2:	1cfb      	adds	r3, r7, #3
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	220f      	movs	r2, #15
 80073c8:	4013      	ands	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	7912      	ldrb	r2, [r2, #4]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e04a      	b.n	800746c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073d6:	1cfb      	adds	r3, r7, #3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	da10      	bge.n	8007402 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073e0:	1cfb      	adds	r3, r7, #3
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2207      	movs	r2, #7
 80073e6:	401a      	ands	r2, r3
 80073e8:	0013      	movs	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	189b      	adds	r3, r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	3310      	adds	r3, #16
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	18d3      	adds	r3, r2, r3
 80073f6:	3304      	adds	r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	705a      	strb	r2, [r3, #1]
 8007400:	e010      	b.n	8007424 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007402:	1cfb      	adds	r3, r7, #3
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2207      	movs	r2, #7
 8007408:	401a      	ands	r2, r3
 800740a:	0013      	movs	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	189b      	adds	r3, r3, r2
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	3351      	adds	r3, #81	@ 0x51
 8007414:	33ff      	adds	r3, #255	@ 0xff
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	3304      	adds	r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800742a:	1cfb      	adds	r3, r7, #3
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2207      	movs	r2, #7
 8007430:	4013      	ands	r3, r2
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	23a5      	movs	r3, #165	@ 0xa5
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	5cd3      	ldrb	r3, [r2, r3]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_PCD_EP_ClrStall+0x94>
 8007444:	2302      	movs	r3, #2
 8007446:	e011      	b.n	800746c <HAL_PCD_EP_ClrStall+0xb8>
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	23a5      	movs	r3, #165	@ 0xa5
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	2101      	movs	r1, #1
 8007450:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f004 fbb4 	bl	800bbc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	23a5      	movs	r3, #165	@ 0xa5
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	2100      	movs	r1, #0
 8007468:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	b004      	add	sp, #16
 8007472:	bd80      	pop	{r7, pc}

08007474 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007474:	b5b0      	push	{r4, r5, r7, lr}
 8007476:	b08e      	sub	sp, #56	@ 0x38
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800747c:	e355      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007484:	2022      	movs	r0, #34	@ 0x22
 8007486:	183b      	adds	r3, r7, r0
 8007488:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800748a:	183b      	adds	r3, r7, r0
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	2421      	movs	r4, #33	@ 0x21
 8007492:	193b      	adds	r3, r7, r4
 8007494:	210f      	movs	r1, #15
 8007496:	400a      	ands	r2, r1
 8007498:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800749a:	193b      	adds	r3, r7, r4
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d000      	beq.n	80074a4 <PCD_EP_ISR_Handler+0x30>
 80074a2:	e12b      	b.n	80076fc <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80074a4:	183b      	adds	r3, r7, r0
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	2210      	movs	r2, #16
 80074aa:	4013      	ands	r3, r2
 80074ac:	d140      	bne.n	8007530 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4ac5      	ldr	r2, [pc, #788]	@ (80077cc <PCD_EP_ISR_Handler+0x358>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	60bb      	str	r3, [r7, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	2180      	movs	r1, #128	@ 0x80
 80074c2:	0209      	lsls	r1, r1, #8
 80074c4:	430a      	orrs	r2, r1
 80074c6:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3314      	adds	r3, #20
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	4abe      	ldr	r2, [pc, #760]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 80074d6:	4694      	mov	ip, r2
 80074d8:	4463      	add	r3, ip
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	0c1b      	lsrs	r3, r3, #16
 80074de:	059b      	lsls	r3, r3, #22
 80074e0:	0d9a      	lsrs	r2, r3, #22
 80074e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80074e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	18d2      	adds	r2, r2, r3
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2100      	movs	r1, #0
 80074f8:	0018      	movs	r0, r3
 80074fa:	f007 f9c7 	bl	800e88c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7c5b      	ldrb	r3, [r3, #17]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d100      	bne.n	800750a <PCD_EP_ISR_Handler+0x96>
 8007508:	e30f      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
 800750a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d000      	beq.n	8007514 <PCD_EP_ISR_Handler+0xa0>
 8007512:	e30a      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	7c5b      	ldrb	r3, [r3, #17]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2280      	movs	r2, #128	@ 0x80
 800751c:	4252      	negs	r2, r2
 800751e:	4313      	orrs	r3, r2
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	745a      	strb	r2, [r3, #17]
 800752e:	e2fc      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3355      	adds	r3, #85	@ 0x55
 8007534:	33ff      	adds	r3, #255	@ 0xff
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	2132      	movs	r1, #50	@ 0x32
 8007540:	187b      	adds	r3, r7, r1
 8007542:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007544:	187b      	adds	r3, r7, r1
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	2380      	movs	r3, #128	@ 0x80
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	4013      	ands	r3, r2
 800754e:	d029      	beq.n	80075a4 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	0019      	movs	r1, r3
 800755a:	0010      	movs	r0, r2
 800755c:	f7ff fab4 	bl	8006ac8 <PCD_GET_EP_RX_CNT>
 8007560:	0003      	movs	r3, r0
 8007562:	001a      	movs	r2, r3
 8007564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007566:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6818      	ldr	r0, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	22a7      	movs	r2, #167	@ 0xa7
 8007570:	0092      	lsls	r2, r2, #2
 8007572:	1899      	adds	r1, r3, r2
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800757c:	b29b      	uxth	r3, r3
 800757e:	f004 fc5b 	bl	800be38 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a92      	ldr	r2, [pc, #584]	@ (80077d4 <PCD_EP_ISR_Handler+0x360>)
 800758a:	4013      	ands	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	2180      	movs	r1, #128	@ 0x80
 8007596:	430a      	orrs	r2, r1
 8007598:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f007 f93f 	bl	800e820 <HAL_PCD_SetupStageCallback>
 80075a2:	e2c2      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80075a4:	2332      	movs	r3, #50	@ 0x32
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2200      	movs	r2, #0
 80075aa:	5e9b      	ldrsh	r3, [r3, r2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	db00      	blt.n	80075b2 <PCD_EP_ISR_Handler+0x13e>
 80075b0:	e2bb      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a86      	ldr	r2, [pc, #536]	@ (80077d4 <PCD_EP_ISR_Handler+0x360>)
 80075ba:	4013      	ands	r3, r2
 80075bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075c4:	2180      	movs	r1, #128	@ 0x80
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	0019      	movs	r1, r3
 80075d4:	0010      	movs	r0, r2
 80075d6:	f7ff fa77 	bl	8006ac8 <PCD_GET_EP_RX_CNT>
 80075da:	0003      	movs	r3, r0
 80075dc:	001a      	movs	r2, r3
 80075de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80075e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01a      	beq.n	8007620 <PCD_EP_ISR_Handler+0x1ac>
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d016      	beq.n	8007620 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f8:	6959      	ldr	r1, [r3, #20]
 80075fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007602:	b29b      	uxth	r3, r3
 8007604:	f004 fc18 	bl	800be38 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	18d2      	adds	r2, r2, r3
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2100      	movs	r1, #0
 800761a:	0018      	movs	r0, r3
 800761c:	f007 f915 	bl	800e84a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	2132      	movs	r1, #50	@ 0x32
 8007628:	187b      	adds	r3, r7, r1
 800762a:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800762c:	187b      	adds	r3, r7, r1
 800762e:	881a      	ldrh	r2, [r3, #0]
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4013      	ands	r3, r2
 8007636:	d000      	beq.n	800763a <PCD_EP_ISR_Handler+0x1c6>
 8007638:	e277      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
 800763a:	187b      	adds	r3, r7, r1
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	23c0      	movs	r3, #192	@ 0xc0
 8007640:	019b      	lsls	r3, r3, #6
 8007642:	401a      	ands	r2, r3
 8007644:	23c0      	movs	r3, #192	@ 0xc0
 8007646:	019b      	lsls	r3, r3, #6
 8007648:	429a      	cmp	r2, r3
 800764a:	d100      	bne.n	800764e <PCD_EP_ISR_Handler+0x1da>
 800764c:	e26d      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800764e:	4b60      	ldr	r3, [pc, #384]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4b5f      	ldr	r3, [pc, #380]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 8007654:	0192      	lsls	r2, r2, #6
 8007656:	0992      	lsrs	r2, r2, #6
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007660:	d916      	bls.n	8007690 <PCD_EP_ISR_Handler+0x21c>
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	221f      	movs	r2, #31
 8007670:	4013      	ands	r3, r2
 8007672:	d102      	bne.n	800767a <PCD_EP_ISR_Handler+0x206>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	3b01      	subs	r3, #1
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	4b55      	ldr	r3, [pc, #340]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	069b      	lsls	r3, r3, #26
 8007682:	431a      	orrs	r2, r3
 8007684:	4b52      	ldr	r3, [pc, #328]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	0609      	lsls	r1, r1, #24
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	e01e      	b.n	80076ce <PCD_EP_ISR_Handler+0x25a>
 8007690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <PCD_EP_ISR_Handler+0x234>
 8007698:	4b4d      	ldr	r3, [pc, #308]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	4b4c      	ldr	r3, [pc, #304]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 800769e:	2180      	movs	r1, #128	@ 0x80
 80076a0:	0609      	lsls	r1, r1, #24
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
 80076a6:	e012      	b.n	80076ce <PCD_EP_ISR_Handler+0x25a>
 80076a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2201      	movs	r2, #1
 80076b6:	4013      	ands	r3, r2
 80076b8:	d002      	beq.n	80076c0 <PCD_EP_ISR_Handler+0x24c>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	3301      	adds	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	4b43      	ldr	r3, [pc, #268]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 80076c2:	6859      	ldr	r1, [r3, #4]
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	069a      	lsls	r2, r3, #26
 80076c8:	4b41      	ldr	r3, [pc, #260]	@ (80077d0 <PCD_EP_ISR_Handler+0x35c>)
 80076ca:	430a      	orrs	r2, r1
 80076cc:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a40      	ldr	r2, [pc, #256]	@ (80077d8 <PCD_EP_ISR_Handler+0x364>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2280      	movs	r2, #128	@ 0x80
 80076de:	0152      	lsls	r2, r2, #5
 80076e0:	4053      	eors	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2280      	movs	r2, #128	@ 0x80
 80076e8:	0192      	lsls	r2, r2, #6
 80076ea:	4053      	eors	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4939      	ldr	r1, [pc, #228]	@ (80077dc <PCD_EP_ISR_Handler+0x368>)
 80076f6:	430a      	orrs	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	e216      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	001a      	movs	r2, r3
 8007702:	2121      	movs	r1, #33	@ 0x21
 8007704:	187b      	adds	r3, r7, r1
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	2032      	movs	r0, #50	@ 0x32
 8007710:	183b      	adds	r3, r7, r0
 8007712:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8007714:	183b      	adds	r3, r7, r0
 8007716:	2200      	movs	r2, #0
 8007718:	5e9b      	ldrsh	r3, [r3, r2]
 800771a:	2b00      	cmp	r3, #0
 800771c:	db00      	blt.n	8007720 <PCD_EP_ISR_Handler+0x2ac>
 800771e:	e0e0      	b.n	80078e2 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	001a      	movs	r2, r3
 8007726:	187b      	adds	r3, r7, r1
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	18d3      	adds	r3, r2, r3
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a28      	ldr	r2, [pc, #160]	@ (80077d4 <PCD_EP_ISR_Handler+0x360>)
 8007732:	4013      	ands	r3, r2
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	001a      	movs	r2, r3
 800773c:	0008      	movs	r0, r1
 800773e:	187b      	adds	r3, r7, r1
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	18d3      	adds	r3, r2, r3
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	2180      	movs	r1, #128	@ 0x80
 800774a:	430a      	orrs	r2, r1
 800774c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800774e:	183b      	adds	r3, r7, r0
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	0013      	movs	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	189b      	adds	r3, r3, r2
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	3351      	adds	r3, #81	@ 0x51
 800775c:	33ff      	adds	r3, #255	@ 0xff
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	18d3      	adds	r3, r2, r3
 8007762:	3304      	adds	r3, #4
 8007764:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007768:	7b1b      	ldrb	r3, [r3, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d11c      	bne.n	80077a8 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2524      	movs	r5, #36	@ 0x24
 8007778:	197c      	adds	r4, r7, r5
 800777a:	0019      	movs	r1, r3
 800777c:	0010      	movs	r0, r2
 800777e:	f7ff f9a3 	bl	8006ac8 <PCD_GET_EP_RX_CNT>
 8007782:	0003      	movs	r3, r0
 8007784:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8007786:	002c      	movs	r4, r5
 8007788:	193b      	adds	r3, r7, r4
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d100      	bne.n	8007792 <PCD_EP_ISR_Handler+0x31e>
 8007790:	e07f      	b.n	8007892 <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6818      	ldr	r0, [r3, #0]
 8007796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007798:	6959      	ldr	r1, [r3, #20]
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779c:	88da      	ldrh	r2, [r3, #6]
 800779e:	193b      	adds	r3, r7, r4
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	f004 fb49 	bl	800be38 <USB_ReadPMA>
 80077a6:	e074      	b.n	8007892 <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80077a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077aa:	78db      	ldrb	r3, [r3, #3]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d117      	bne.n	80077e0 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80077b0:	2324      	movs	r3, #36	@ 0x24
 80077b2:	18fc      	adds	r4, r7, r3
 80077b4:	2332      	movs	r3, #50	@ 0x32
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	881a      	ldrh	r2, [r3, #0]
 80077ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	0018      	movs	r0, r3
 80077c0:	f000 f9c8 	bl	8007b54 <HAL_PCD_EP_DB_Receive>
 80077c4:	0003      	movs	r3, r0
 80077c6:	8023      	strh	r3, [r4, #0]
 80077c8:	e063      	b.n	8007892 <PCD_EP_ISR_Handler+0x41e>
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	07ff8f0f 	.word	0x07ff8f0f
 80077d0:	40009800 	.word	0x40009800
 80077d4:	07ff0f8f 	.word	0x07ff0f8f
 80077d8:	07ffbf8f 	.word	0x07ffbf8f
 80077dc:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	001a      	movs	r2, r3
 80077e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	18d3      	adds	r3, r2, r3
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4ad4      	ldr	r2, [pc, #848]	@ (8007b44 <PCD_EP_ISR_Handler+0x6d0>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	001a      	movs	r2, r3
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	18d3      	adds	r3, r2, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	49d0      	ldr	r1, [pc, #832]	@ (8007b48 <PCD_EP_ISR_Handler+0x6d4>)
 8007808:	430a      	orrs	r2, r1
 800780a:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	001a      	movs	r2, r3
 8007812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	18d3      	adds	r3, r2, r3
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	2380      	movs	r3, #128	@ 0x80
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	4013      	ands	r3, r2
 8007822:	d01b      	beq.n	800785c <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2524      	movs	r5, #36	@ 0x24
 800782e:	197c      	adds	r4, r7, r5
 8007830:	0019      	movs	r1, r3
 8007832:	0010      	movs	r0, r2
 8007834:	f7ff f96a 	bl	8006b0c <PCD_GET_EP_DBUF0_CNT>
 8007838:	0003      	movs	r3, r0
 800783a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800783c:	002c      	movs	r4, r5
 800783e:	193b      	adds	r3, r7, r4
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d025      	beq.n	8007892 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784c:	6959      	ldr	r1, [r3, #20]
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	891a      	ldrh	r2, [r3, #8]
 8007852:	193b      	adds	r3, r7, r4
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	f004 faef 	bl	800be38 <USB_ReadPMA>
 800785a:	e01a      	b.n	8007892 <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2524      	movs	r5, #36	@ 0x24
 8007866:	197c      	adds	r4, r7, r5
 8007868:	0019      	movs	r1, r3
 800786a:	0010      	movs	r0, r2
 800786c:	f7ff f970 	bl	8006b50 <PCD_GET_EP_DBUF1_CNT>
 8007870:	0003      	movs	r3, r0
 8007872:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8007874:	002c      	movs	r4, r5
 8007876:	193b      	adds	r3, r7, r4
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007884:	6959      	ldr	r1, [r3, #20]
 8007886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007888:	895a      	ldrh	r2, [r3, #10]
 800788a:	193b      	adds	r3, r7, r4
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	f004 fad3 	bl	800be38 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007894:	69da      	ldr	r2, [r3, #28]
 8007896:	2124      	movs	r1, #36	@ 0x24
 8007898:	187b      	adds	r3, r7, r1
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	18d2      	adds	r2, r2, r3
 800789e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80078a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	187b      	adds	r3, r7, r1
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	18d2      	adds	r2, r2, r3
 80078ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <PCD_EP_ISR_Handler+0x450>
 80078b8:	187b      	adds	r3, r7, r1
 80078ba:	881a      	ldrh	r2, [r3, #0]
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d207      	bcs.n	80078d4 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c6:	781a      	ldrb	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	0011      	movs	r1, r2
 80078cc:	0018      	movs	r0, r3
 80078ce:	f006 ffbc 	bl	800e84a <HAL_PCD_DataOutStageCallback>
 80078d2:	e006      	b.n	80078e2 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078da:	0011      	movs	r1, r2
 80078dc:	0018      	movs	r0, r3
 80078de:	f003 f91b 	bl	800ab18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80078e2:	2032      	movs	r0, #50	@ 0x32
 80078e4:	183b      	adds	r3, r7, r0
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	2280      	movs	r2, #128	@ 0x80
 80078ea:	4013      	ands	r3, r2
 80078ec:	d100      	bne.n	80078f0 <PCD_EP_ISR_Handler+0x47c>
 80078ee:	e11c      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 80078f0:	2121      	movs	r1, #33	@ 0x21
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	0013      	movs	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	189b      	adds	r3, r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	3310      	adds	r3, #16
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	18d3      	adds	r3, r2, r3
 8007904:	3304      	adds	r3, #4
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	001a      	movs	r2, r3
 800790e:	187b      	adds	r3, r7, r1
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	18d3      	adds	r3, r2, r3
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a8c      	ldr	r2, [pc, #560]	@ (8007b4c <PCD_EP_ISR_Handler+0x6d8>)
 800791a:	4013      	ands	r3, r2
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	001a      	movs	r2, r3
 8007924:	187b      	adds	r3, r7, r1
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	18d3      	adds	r3, r2, r3
 800792c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792e:	2180      	movs	r1, #128	@ 0x80
 8007930:	0209      	lsls	r1, r1, #8
 8007932:	430a      	orrs	r2, r1
 8007934:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007938:	78db      	ldrb	r3, [r3, #3]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d000      	beq.n	8007940 <PCD_EP_ISR_Handler+0x4cc>
 800793e:	e0a3      	b.n	8007a88 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 8007940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007942:	2200      	movs	r2, #0
 8007944:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007948:	7b1b      	ldrb	r3, [r3, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d100      	bne.n	8007950 <PCD_EP_ISR_Handler+0x4dc>
 800794e:	e093      	b.n	8007a78 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007950:	183b      	adds	r3, r7, r0
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	2240      	movs	r2, #64	@ 0x40
 8007956:	4013      	ands	r3, r2
 8007958:	d047      	beq.n	80079ea <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d121      	bne.n	80079a6 <PCD_EP_ISR_Handler+0x532>
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4a79      	ldr	r2, [pc, #484]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 800796a:	4694      	mov	ip, r2
 800796c:	4463      	add	r3, ip
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	4976      	ldr	r1, [pc, #472]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007978:	468c      	mov	ip, r1
 800797a:	4463      	add	r3, ip
 800797c:	0192      	lsls	r2, r2, #6
 800797e:	0992      	lsrs	r2, r2, #6
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4a71      	ldr	r2, [pc, #452]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 800798a:	4694      	mov	ip, r2
 800798c:	4463      	add	r3, ip
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	496e      	ldr	r1, [pc, #440]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007998:	468c      	mov	ip, r1
 800799a:	4463      	add	r3, ip
 800799c:	2180      	movs	r1, #128	@ 0x80
 800799e:	0609      	lsls	r1, r1, #24
 80079a0:	430a      	orrs	r2, r1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e068      	b.n	8007a78 <PCD_EP_ISR_Handler+0x604>
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d164      	bne.n	8007a78 <PCD_EP_ISR_Handler+0x604>
 80079ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4a66      	ldr	r2, [pc, #408]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 80079b6:	4694      	mov	ip, r2
 80079b8:	4463      	add	r3, ip
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4963      	ldr	r1, [pc, #396]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 80079c4:	468c      	mov	ip, r1
 80079c6:	4463      	add	r3, ip
 80079c8:	0412      	lsls	r2, r2, #16
 80079ca:	0c12      	lsrs	r2, r2, #16
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 80079d6:	189a      	adds	r2, r3, r2
 80079d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	495c      	ldr	r1, [pc, #368]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 80079e0:	468c      	mov	ip, r1
 80079e2:	4463      	add	r3, ip
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	e046      	b.n	8007a78 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d121      	bne.n	8007a36 <PCD_EP_ISR_Handler+0x5c2>
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4a55      	ldr	r2, [pc, #340]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 80079fa:	4694      	mov	ip, r2
 80079fc:	4463      	add	r3, ip
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	4952      	ldr	r1, [pc, #328]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a08:	468c      	mov	ip, r1
 8007a0a:	4463      	add	r3, ip
 8007a0c:	0192      	lsls	r2, r2, #6
 8007a0e:	0992      	lsrs	r2, r2, #6
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4a4d      	ldr	r2, [pc, #308]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a1a:	4694      	mov	ip, r2
 8007a1c:	4463      	add	r3, ip
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	494a      	ldr	r1, [pc, #296]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a28:	468c      	mov	ip, r1
 8007a2a:	4463      	add	r3, ip
 8007a2c:	2180      	movs	r1, #128	@ 0x80
 8007a2e:	0609      	lsls	r1, r1, #24
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
 8007a34:	e020      	b.n	8007a78 <PCD_EP_ISR_Handler+0x604>
 8007a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d11c      	bne.n	8007a78 <PCD_EP_ISR_Handler+0x604>
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	4a42      	ldr	r2, [pc, #264]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a46:	4694      	mov	ip, r2
 8007a48:	4463      	add	r3, ip
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	493f      	ldr	r1, [pc, #252]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a54:	468c      	mov	ip, r1
 8007a56:	4463      	add	r3, ip
 8007a58:	0412      	lsls	r2, r2, #16
 8007a5a:	0c12      	lsrs	r2, r2, #16
 8007a5c:	605a      	str	r2, [r3, #4]
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4a3a      	ldr	r2, [pc, #232]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a66:	189a      	adds	r2, r3, r2
 8007a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4938      	ldr	r1, [pc, #224]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a70:	468c      	mov	ip, r1
 8007a72:	4463      	add	r3, ip
 8007a74:	6852      	ldr	r2, [r2, #4]
 8007a76:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	0011      	movs	r1, r2
 8007a80:	0018      	movs	r0, r3
 8007a82:	f006 ff03 	bl	800e88c <HAL_PCD_DataInStageCallback>
 8007a86:	e050      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a88:	2332      	movs	r3, #50	@ 0x32
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	881a      	ldrh	r2, [r3, #0]
 8007a8e:	2380      	movs	r3, #128	@ 0x80
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4013      	ands	r3, r2
 8007a94:	d141      	bne.n	8007b1a <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b50 <PCD_EP_ISR_Handler+0x6dc>)
 8007a9e:	4694      	mov	ip, r2
 8007aa0:	4463      	add	r3, ip
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0c1b      	lsrs	r3, r3, #16
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	2126      	movs	r1, #38	@ 0x26
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	0592      	lsls	r2, r2, #22
 8007aae:	0d92      	lsrs	r2, r2, #22
 8007ab0:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d907      	bls.n	8007ace <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 8007abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	187b      	adds	r3, r7, r1
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aca:	619a      	str	r2, [r3, #24]
 8007acc:	e002      	b.n	8007ad4 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 8007ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ade:	781a      	ldrb	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	0011      	movs	r1, r2
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f006 fed1 	bl	800e88c <HAL_PCD_DataInStageCallback>
 8007aea:	e01e      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	2126      	movs	r1, #38	@ 0x26
 8007af2:	187b      	adds	r3, r7, r1
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	18d2      	adds	r2, r2, r3
 8007af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	187b      	adds	r3, r7, r1
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	18d2      	adds	r2, r2, r3
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b10:	0011      	movs	r1, r2
 8007b12:	0018      	movs	r0, r3
 8007b14:	f003 f800 	bl	800ab18 <USB_EPStartXfer>
 8007b18:	e007      	b.n	8007b2a <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b1a:	2332      	movs	r3, #50	@ 0x32
 8007b1c:	18fb      	adds	r3, r7, r3
 8007b1e:	881a      	ldrh	r2, [r3, #0]
 8007b20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	0018      	movs	r0, r3
 8007b26:	f000 f8ff 	bl	8007d28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b30:	2380      	movs	r3, #128	@ 0x80
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	4013      	ands	r3, r2
 8007b36:	d000      	beq.n	8007b3a <PCD_EP_ISR_Handler+0x6c6>
 8007b38:	e4a1      	b.n	800747e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	b00e      	add	sp, #56	@ 0x38
 8007b42:	bdb0      	pop	{r4, r5, r7, pc}
 8007b44:	07ff8f8f 	.word	0x07ff8f8f
 8007b48:	000080c0 	.word	0x000080c0
 8007b4c:	07ff8f0f 	.word	0x07ff8f0f
 8007b50:	40009800 	.word	0x40009800

08007b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b54:	b5b0      	push	{r4, r5, r7, lr}
 8007b56:	b08a      	sub	sp, #40	@ 0x28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	1dbb      	adds	r3, r7, #6
 8007b60:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b62:	1dbb      	adds	r3, r7, #6
 8007b64:	881a      	ldrh	r2, [r3, #0]
 8007b66:	2380      	movs	r3, #128	@ 0x80
 8007b68:	01db      	lsls	r3, r3, #7
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d067      	beq.n	8007c3e <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	251e      	movs	r5, #30
 8007b78:	197c      	adds	r4, r7, r5
 8007b7a:	0019      	movs	r1, r3
 8007b7c:	0010      	movs	r0, r2
 8007b7e:	f7fe ffc5 	bl	8006b0c <PCD_GET_EP_DBUF0_CNT>
 8007b82:	0003      	movs	r3, r0
 8007b84:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	197b      	adds	r3, r7, r5
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d307      	bcc.n	8007ba2 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	197b      	adds	r3, r7, r5
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	619a      	str	r2, [r3, #24]
 8007ba0:	e002      	b.n	8007ba8 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11a      	bne.n	8007be6 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	001a      	movs	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	18d3      	adds	r3, r2, r3
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a55      	ldr	r2, [pc, #340]	@ (8007d18 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2280      	movs	r2, #128	@ 0x80
 8007bca:	0192      	lsls	r2, r2, #6
 8007bcc:	4053      	eors	r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	494e      	ldr	r1, [pc, #312]	@ (8007d1c <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007be2:	430a      	orrs	r2, r1
 8007be4:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007be6:	1dbb      	adds	r3, r7, #6
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	2240      	movs	r2, #64	@ 0x40
 8007bec:	4013      	ands	r3, r2
 8007bee:	d015      	beq.n	8007c1c <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	001a      	movs	r2, r3
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	18d3      	adds	r3, r2, r3
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a47      	ldr	r2, [pc, #284]	@ (8007d20 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4943      	ldr	r1, [pc, #268]	@ (8007d24 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007c1c:	241e      	movs	r4, #30
 8007c1e:	193b      	adds	r3, r7, r4
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d100      	bne.n	8007c28 <HAL_PCD_EP_DB_Receive+0xd4>
 8007c26:	e070      	b.n	8007d0a <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	6959      	ldr	r1, [r3, #20]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	891a      	ldrh	r2, [r3, #8]
 8007c34:	193b      	adds	r3, r7, r4
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	f004 f8fe 	bl	800be38 <USB_ReadPMA>
 8007c3c:	e065      	b.n	8007d0a <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	251e      	movs	r5, #30
 8007c48:	197c      	adds	r4, r7, r5
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	0010      	movs	r0, r2
 8007c4e:	f7fe ff7f 	bl	8006b50 <PCD_GET_EP_DBUF1_CNT>
 8007c52:	0003      	movs	r3, r0
 8007c54:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	197b      	adds	r3, r7, r5
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d307      	bcc.n	8007c72 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	197b      	adds	r3, r7, r5
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	1ad2      	subs	r2, r2, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	619a      	str	r2, [r3, #24]
 8007c70:	e002      	b.n	8007c78 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d11a      	bne.n	8007cb6 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	001a      	movs	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	18d3      	adds	r3, r2, r3
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a21      	ldr	r2, [pc, #132]	@ (8007d18 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	2280      	movs	r2, #128	@ 0x80
 8007c9a:	0192      	lsls	r2, r2, #6
 8007c9c:	4053      	eors	r3, r2
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	001a      	movs	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	18d3      	adds	r3, r2, r3
 8007cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb0:	491a      	ldr	r1, [pc, #104]	@ (8007d1c <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007cb6:	1dbb      	adds	r3, r7, #6
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	2240      	movs	r2, #64	@ 0x40
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	d115      	bne.n	8007cec <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	001a      	movs	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	18d3      	adds	r3, r2, r3
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	623b      	str	r3, [r7, #32]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	001a      	movs	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	18d3      	adds	r3, r2, r3
 8007ce4:	6a3a      	ldr	r2, [r7, #32]
 8007ce6:	490f      	ldr	r1, [pc, #60]	@ (8007d24 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007cec:	241e      	movs	r4, #30
 8007cee:	193b      	adds	r3, r7, r4
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6959      	ldr	r1, [r3, #20]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	895a      	ldrh	r2, [r3, #10]
 8007d02:	193b      	adds	r3, r7, r4
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	f004 f897 	bl	800be38 <USB_ReadPMA>
    }
  }

  return count;
 8007d0a:	231e      	movs	r3, #30
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	881b      	ldrh	r3, [r3, #0]
}
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b00a      	add	sp, #40	@ 0x28
 8007d16:	bdb0      	pop	{r4, r5, r7, pc}
 8007d18:	07ffbf8f 	.word	0x07ffbf8f
 8007d1c:	00008080 	.word	0x00008080
 8007d20:	07ff8f8f 	.word	0x07ff8f8f
 8007d24:	000080c0 	.word	0x000080c0

08007d28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d28:	b5b0      	push	{r4, r5, r7, lr}
 8007d2a:	b08e      	sub	sp, #56	@ 0x38
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	1dbb      	adds	r3, r7, #6
 8007d34:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d36:	1dbb      	adds	r3, r7, #6
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	2240      	movs	r2, #64	@ 0x40
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d100      	bne.n	8007d42 <HAL_PCD_EP_DB_Transmit+0x1a>
 8007d40:	e1c3      	b.n	80080ca <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	251e      	movs	r5, #30
 8007d4c:	197c      	adds	r4, r7, r5
 8007d4e:	0019      	movs	r1, r3
 8007d50:	0010      	movs	r0, r2
 8007d52:	f7fe fedb 	bl	8006b0c <PCD_GET_EP_DBUF0_CNT>
 8007d56:	0003      	movs	r3, r0
 8007d58:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	197b      	adds	r3, r7, r5
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d907      	bls.n	8007d76 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	197b      	adds	r3, r7, r5
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	619a      	str	r2, [r3, #24]
 8007d74:	e002      	b.n	8007d7c <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d000      	beq.n	8007d86 <HAL_PCD_EP_DB_Transmit+0x5e>
 8007d84:	e0b2      	b.n	8007eec <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d121      	bne.n	8007dd2 <HAL_PCD_EP_DB_Transmit+0xaa>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	4ada      	ldr	r2, [pc, #872]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d96:	4694      	mov	ip, r2
 8007d98:	4463      	add	r3, ip
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	49d7      	ldr	r1, [pc, #860]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007da4:	468c      	mov	ip, r1
 8007da6:	4463      	add	r3, ip
 8007da8:	0192      	lsls	r2, r2, #6
 8007daa:	0992      	lsrs	r2, r2, #6
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4ad2      	ldr	r2, [pc, #840]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007db6:	4694      	mov	ip, r2
 8007db8:	4463      	add	r3, ip
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	49cf      	ldr	r1, [pc, #828]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007dc4:	468c      	mov	ip, r1
 8007dc6:	4463      	add	r3, ip
 8007dc8:	2180      	movs	r1, #128	@ 0x80
 8007dca:	0609      	lsls	r1, r1, #24
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e020      	b.n	8007e14 <HAL_PCD_EP_DB_Transmit+0xec>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	785b      	ldrb	r3, [r3, #1]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d11c      	bne.n	8007e14 <HAL_PCD_EP_DB_Transmit+0xec>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4ac7      	ldr	r2, [pc, #796]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007de2:	4694      	mov	ip, r2
 8007de4:	4463      	add	r3, ip
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	49c4      	ldr	r1, [pc, #784]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007df0:	468c      	mov	ip, r1
 8007df2:	4463      	add	r3, ip
 8007df4:	0412      	lsls	r2, r2, #16
 8007df6:	0c12      	lsrs	r2, r2, #16
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4abf      	ldr	r2, [pc, #764]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e02:	189a      	adds	r2, r3, r2
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	49bd      	ldr	r1, [pc, #756]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e0c:	468c      	mov	ip, r1
 8007e0e:	4463      	add	r3, ip
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d121      	bne.n	8007e60 <HAL_PCD_EP_DB_Transmit+0x138>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	4ab7      	ldr	r2, [pc, #732]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e24:	4694      	mov	ip, r2
 8007e26:	4463      	add	r3, ip
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	49b3      	ldr	r1, [pc, #716]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e32:	468c      	mov	ip, r1
 8007e34:	4463      	add	r3, ip
 8007e36:	0192      	lsls	r2, r2, #6
 8007e38:	0992      	lsrs	r2, r2, #6
 8007e3a:	605a      	str	r2, [r3, #4]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4aaf      	ldr	r2, [pc, #700]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e44:	4694      	mov	ip, r2
 8007e46:	4463      	add	r3, ip
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	49ab      	ldr	r1, [pc, #684]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e52:	468c      	mov	ip, r1
 8007e54:	4463      	add	r3, ip
 8007e56:	2180      	movs	r1, #128	@ 0x80
 8007e58:	0609      	lsls	r1, r1, #24
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	e020      	b.n	8007ea2 <HAL_PCD_EP_DB_Transmit+0x17a>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	785b      	ldrb	r3, [r3, #1]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d11c      	bne.n	8007ea2 <HAL_PCD_EP_DB_Transmit+0x17a>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4aa4      	ldr	r2, [pc, #656]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e70:	4694      	mov	ip, r2
 8007e72:	4463      	add	r3, ip
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	49a0      	ldr	r1, [pc, #640]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e7e:	468c      	mov	ip, r1
 8007e80:	4463      	add	r3, ip
 8007e82:	0412      	lsls	r2, r2, #16
 8007e84:	0c12      	lsrs	r2, r2, #16
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	4a9c      	ldr	r2, [pc, #624]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e90:	189a      	adds	r2, r3, r2
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	4999      	ldr	r1, [pc, #612]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007e9a:	468c      	mov	ip, r1
 8007e9c:	4463      	add	r3, ip
 8007e9e:	6852      	ldr	r2, [r2, #4]
 8007ea0:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	0011      	movs	r1, r2
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f006 fcee 	bl	800e88c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007eb0:	1dbb      	adds	r3, r7, #6
 8007eb2:	881a      	ldrh	r2, [r3, #0]
 8007eb4:	2380      	movs	r3, #128	@ 0x80
 8007eb6:	01db      	lsls	r3, r3, #7
 8007eb8:	4013      	ands	r3, r2
 8007eba:	d100      	bne.n	8007ebe <HAL_PCD_EP_DB_Transmit+0x196>
 8007ebc:	e2d5      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	18d3      	adds	r3, r2, r3
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a8d      	ldr	r2, [pc, #564]	@ (8008104 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	001a      	movs	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	18d3      	adds	r3, r2, r3
 8007ee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ee4:	4988      	ldr	r1, [pc, #544]	@ (8008108 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e2be      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007eec:	1dbb      	adds	r3, r7, #6
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	2380      	movs	r3, #128	@ 0x80
 8007ef2:	01db      	lsls	r3, r3, #7
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d015      	beq.n	8007f24 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	001a      	movs	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	18d3      	adds	r3, r2, r3
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a7e      	ldr	r2, [pc, #504]	@ (8008104 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	001a      	movs	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f1e:	497a      	ldr	r1, [pc, #488]	@ (8008108 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007f20:	430a      	orrs	r2, r1
 8007f22:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2224      	movs	r2, #36	@ 0x24
 8007f28:	5c9b      	ldrb	r3, [r3, r2]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d000      	beq.n	8007f30 <HAL_PCD_EP_DB_Transmit+0x208>
 8007f2e:	e29c      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	211e      	movs	r1, #30
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	18d2      	adds	r2, r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	187b      	adds	r3, r7, r1
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	18d2      	adds	r2, r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	6a1a      	ldr	r2, [r3, #32]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d309      	bcc.n	8007f6e <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	1ad2      	subs	r2, r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	621a      	str	r2, [r3, #32]
 8007f6c:	e016      	b.n	8007f9c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d108      	bne.n	8007f88 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 8007f76:	231e      	movs	r3, #30
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2224      	movs	r2, #36	@ 0x24
 8007f82:	2100      	movs	r1, #0
 8007f84:	5499      	strb	r1, [r3, r2]
 8007f86:	e009      	b.n	8007f9c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2224      	movs	r2, #36	@ 0x24
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d162      	bne.n	800806a <HAL_PCD_EP_DB_Transmit+0x342>
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	4a55      	ldr	r2, [pc, #340]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007fac:	4694      	mov	ip, r2
 8007fae:	4463      	add	r3, ip
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	4951      	ldr	r1, [pc, #324]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007fba:	468c      	mov	ip, r1
 8007fbc:	4463      	add	r3, ip
 8007fbe:	0192      	lsls	r2, r2, #6
 8007fc0:	0992      	lsrs	r2, r2, #6
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fc8:	d91e      	bls.n	8008008 <HAL_PCD_EP_DB_Transmit+0x2e0>
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	221f      	movs	r2, #31
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d102      	bne.n	8007fde <HAL_PCD_EP_DB_Transmit+0x2b6>
 8007fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	4a46      	ldr	r2, [pc, #280]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007fe6:	4694      	mov	ip, r2
 8007fe8:	4463      	add	r3, ip
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	069b      	lsls	r3, r3, #26
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4941      	ldr	r1, [pc, #260]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007ffa:	468c      	mov	ip, r1
 8007ffc:	4463      	add	r3, ip
 8007ffe:	2180      	movs	r1, #128	@ 0x80
 8008000:	0609      	lsls	r1, r1, #24
 8008002:	430a      	orrs	r2, r1
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e055      	b.n	80080b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d111      	bne.n	8008032 <HAL_PCD_EP_DB_Transmit+0x30a>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4a3a      	ldr	r2, [pc, #232]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8008016:	4694      	mov	ip, r2
 8008018:	4463      	add	r3, ip
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	4937      	ldr	r1, [pc, #220]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8008024:	468c      	mov	ip, r1
 8008026:	4463      	add	r3, ip
 8008028:	2180      	movs	r1, #128	@ 0x80
 800802a:	0609      	lsls	r1, r1, #24
 800802c:	430a      	orrs	r2, r1
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e040      	b.n	80080b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2201      	movs	r2, #1
 800803c:	4013      	ands	r3, r2
 800803e:	d002      	beq.n	8008046 <HAL_PCD_EP_DB_Transmit+0x31e>
 8008040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008042:	3301      	adds	r3, #1
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4a2c      	ldr	r2, [pc, #176]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800804e:	4694      	mov	ip, r2
 8008050:	4463      	add	r3, ip
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008056:	069a      	lsls	r2, r3, #26
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4828      	ldr	r0, [pc, #160]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8008060:	4684      	mov	ip, r0
 8008062:	4463      	add	r3, ip
 8008064:	430a      	orrs	r2, r1
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e024      	b.n	80080b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d120      	bne.n	80080b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4a21      	ldr	r2, [pc, #132]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800807a:	4694      	mov	ip, r2
 800807c:	4463      	add	r3, ip
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	491e      	ldr	r1, [pc, #120]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8008088:	468c      	mov	ip, r1
 800808a:	4463      	add	r3, ip
 800808c:	0412      	lsls	r2, r2, #16
 800808e:	0c12      	lsrs	r2, r2, #16
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4a19      	ldr	r2, [pc, #100]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800809a:	4694      	mov	ip, r2
 800809c:	4463      	add	r3, ip
 800809e:	6819      	ldr	r1, [r3, #0]
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	041a      	lsls	r2, r3, #16
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	4815      	ldr	r0, [pc, #84]	@ (8008100 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80080ac:	4684      	mov	ip, r0
 80080ae:	4463      	add	r3, ip
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6959      	ldr	r1, [r3, #20]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	891a      	ldrh	r2, [r3, #8]
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	f003 fe42 	bl	800bd4c <USB_WritePMA>
 80080c8:	e1cf      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	251e      	movs	r5, #30
 80080d4:	197c      	adds	r4, r7, r5
 80080d6:	0019      	movs	r1, r3
 80080d8:	0010      	movs	r0, r2
 80080da:	f7fe fd39 	bl	8006b50 <PCD_GET_EP_DBUF1_CNT>
 80080de:	0003      	movs	r3, r0
 80080e0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	699a      	ldr	r2, [r3, #24]
 80080e6:	197b      	adds	r3, r7, r5
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d30e      	bcc.n	800810c <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	197b      	adds	r3, r7, r5
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	619a      	str	r2, [r3, #24]
 80080fc:	e009      	b.n	8008112 <HAL_PCD_EP_DB_Transmit+0x3ea>
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	40009800 	.word	0x40009800
 8008104:	07ff8f8f 	.word	0x07ff8f8f
 8008108:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d000      	beq.n	800811c <HAL_PCD_EP_DB_Transmit+0x3f4>
 800811a:	e0b2      	b.n	8008282 <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d121      	bne.n	8008168 <HAL_PCD_EP_DB_Transmit+0x440>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4ab5      	ldr	r2, [pc, #724]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800812c:	4694      	mov	ip, r2
 800812e:	4463      	add	r3, ip
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	49b1      	ldr	r1, [pc, #708]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800813a:	468c      	mov	ip, r1
 800813c:	4463      	add	r3, ip
 800813e:	0192      	lsls	r2, r2, #6
 8008140:	0992      	lsrs	r2, r2, #6
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	4aad      	ldr	r2, [pc, #692]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800814c:	4694      	mov	ip, r2
 800814e:	4463      	add	r3, ip
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	49a9      	ldr	r1, [pc, #676]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800815a:	468c      	mov	ip, r1
 800815c:	4463      	add	r3, ip
 800815e:	2180      	movs	r1, #128	@ 0x80
 8008160:	0609      	lsls	r1, r1, #24
 8008162:	430a      	orrs	r2, r1
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	e020      	b.n	80081aa <HAL_PCD_EP_DB_Transmit+0x482>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d11c      	bne.n	80081aa <HAL_PCD_EP_DB_Transmit+0x482>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	4aa2      	ldr	r2, [pc, #648]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008178:	4694      	mov	ip, r2
 800817a:	4463      	add	r3, ip
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	499e      	ldr	r1, [pc, #632]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008186:	468c      	mov	ip, r1
 8008188:	4463      	add	r3, ip
 800818a:	0412      	lsls	r2, r2, #16
 800818c:	0c12      	lsrs	r2, r2, #16
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	4a9a      	ldr	r2, [pc, #616]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008198:	189a      	adds	r2, r3, r2
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	4997      	ldr	r1, [pc, #604]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80081a2:	468c      	mov	ip, r1
 80081a4:	4463      	add	r3, ip
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d121      	bne.n	80081f6 <HAL_PCD_EP_DB_Transmit+0x4ce>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4a91      	ldr	r2, [pc, #580]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80081ba:	4694      	mov	ip, r2
 80081bc:	4463      	add	r3, ip
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	498e      	ldr	r1, [pc, #568]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80081c8:	468c      	mov	ip, r1
 80081ca:	4463      	add	r3, ip
 80081cc:	0192      	lsls	r2, r2, #6
 80081ce:	0992      	lsrs	r2, r2, #6
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4a89      	ldr	r2, [pc, #548]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80081da:	4694      	mov	ip, r2
 80081dc:	4463      	add	r3, ip
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4986      	ldr	r1, [pc, #536]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80081e8:	468c      	mov	ip, r1
 80081ea:	4463      	add	r3, ip
 80081ec:	2180      	movs	r1, #128	@ 0x80
 80081ee:	0609      	lsls	r1, r1, #24
 80081f0:	430a      	orrs	r2, r1
 80081f2:	605a      	str	r2, [r3, #4]
 80081f4:	e020      	b.n	8008238 <HAL_PCD_EP_DB_Transmit+0x510>
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d11c      	bne.n	8008238 <HAL_PCD_EP_DB_Transmit+0x510>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4a7e      	ldr	r2, [pc, #504]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008206:	4694      	mov	ip, r2
 8008208:	4463      	add	r3, ip
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	497b      	ldr	r1, [pc, #492]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008214:	468c      	mov	ip, r1
 8008216:	4463      	add	r3, ip
 8008218:	0412      	lsls	r2, r2, #16
 800821a:	0c12      	lsrs	r2, r2, #16
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4a76      	ldr	r2, [pc, #472]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008226:	189a      	adds	r2, r3, r2
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4974      	ldr	r1, [pc, #464]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008230:	468c      	mov	ip, r1
 8008232:	4463      	add	r3, ip
 8008234:	6852      	ldr	r2, [r2, #4]
 8008236:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	781a      	ldrb	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	0011      	movs	r1, r2
 8008240:	0018      	movs	r0, r3
 8008242:	f006 fb23 	bl	800e88c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008246:	1dbb      	adds	r3, r7, #6
 8008248:	881a      	ldrh	r2, [r3, #0]
 800824a:	2380      	movs	r3, #128	@ 0x80
 800824c:	01db      	lsls	r3, r3, #7
 800824e:	4013      	ands	r3, r2
 8008250:	d000      	beq.n	8008254 <HAL_PCD_EP_DB_Transmit+0x52c>
 8008252:	e10a      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	001a      	movs	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	18d3      	adds	r3, r2, r3
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a67      	ldr	r2, [pc, #412]	@ (8008404 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8008266:	4013      	ands	r3, r2
 8008268:	623b      	str	r3, [r7, #32]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	001a      	movs	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	18d3      	adds	r3, r2, r3
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	4963      	ldr	r1, [pc, #396]	@ (8008408 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800827c:	430a      	orrs	r2, r1
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	e0f3      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008282:	1dbb      	adds	r3, r7, #6
 8008284:	881a      	ldrh	r2, [r3, #0]
 8008286:	2380      	movs	r3, #128	@ 0x80
 8008288:	01db      	lsls	r3, r3, #7
 800828a:	4013      	ands	r3, r2
 800828c:	d115      	bne.n	80082ba <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	001a      	movs	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	18d3      	adds	r3, r2, r3
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a59      	ldr	r2, [pc, #356]	@ (8008404 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	001a      	movs	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	18d3      	adds	r3, r2, r3
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4954      	ldr	r1, [pc, #336]	@ (8008408 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 80082b6:	430a      	orrs	r2, r1
 80082b8:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2224      	movs	r2, #36	@ 0x24
 80082be:	5c9b      	ldrb	r3, [r3, r2]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d000      	beq.n	80082c6 <HAL_PCD_EP_DB_Transmit+0x59e>
 80082c4:	e0d1      	b.n	800846a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	695a      	ldr	r2, [r3, #20]
 80082ca:	211e      	movs	r1, #30
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	18d2      	adds	r2, r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	69da      	ldr	r2, [r3, #28]
 80082da:	187b      	adds	r3, r7, r1
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	18d2      	adds	r2, r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6a1a      	ldr	r2, [r3, #32]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d309      	bcc.n	8008304 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a1a      	ldr	r2, [r3, #32]
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	1ad2      	subs	r2, r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	621a      	str	r2, [r3, #32]
 8008302:	e016      	b.n	8008332 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 800830c:	231e      	movs	r3, #30
 800830e:	18fb      	adds	r3, r7, r3
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2224      	movs	r2, #36	@ 0x24
 8008318:	2100      	movs	r1, #0
 800831a:	5499      	strb	r1, [r3, r2]
 800831c:	e009      	b.n	8008332 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2200      	movs	r2, #0
 8008328:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2224      	movs	r2, #36	@ 0x24
 800832e:	2100      	movs	r1, #0
 8008330:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d168      	bne.n	800840c <HAL_PCD_EP_DB_Transmit+0x6e4>
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4a2f      	ldr	r2, [pc, #188]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008342:	4694      	mov	ip, r2
 8008344:	4463      	add	r3, ip
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	492c      	ldr	r1, [pc, #176]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008350:	468c      	mov	ip, r1
 8008352:	4463      	add	r3, ip
 8008354:	0192      	lsls	r2, r2, #6
 8008356:	0992      	lsrs	r2, r2, #6
 8008358:	605a      	str	r2, [r3, #4]
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	2b3e      	cmp	r3, #62	@ 0x3e
 800835e:	d91e      	bls.n	800839e <HAL_PCD_EP_DB_Transmit+0x676>
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	221f      	movs	r2, #31
 800836a:	4013      	ands	r3, r2
 800836c:	d102      	bne.n	8008374 <HAL_PCD_EP_DB_Transmit+0x64c>
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	3b01      	subs	r3, #1
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	4a21      	ldr	r2, [pc, #132]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800837c:	4694      	mov	ip, r2
 800837e:	4463      	add	r3, ip
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	069b      	lsls	r3, r3, #26
 8008386:	431a      	orrs	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	491c      	ldr	r1, [pc, #112]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008390:	468c      	mov	ip, r1
 8008392:	4463      	add	r3, ip
 8008394:	2180      	movs	r1, #128	@ 0x80
 8008396:	0609      	lsls	r1, r1, #24
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	e05b      	b.n	8008456 <HAL_PCD_EP_DB_Transmit+0x72e>
 800839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d111      	bne.n	80083c8 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80083ac:	4694      	mov	ip, r2
 80083ae:	4463      	add	r3, ip
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4911      	ldr	r1, [pc, #68]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80083ba:	468c      	mov	ip, r1
 80083bc:	4463      	add	r3, ip
 80083be:	2180      	movs	r1, #128	@ 0x80
 80083c0:	0609      	lsls	r1, r1, #24
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	e046      	b.n	8008456 <HAL_PCD_EP_DB_Transmit+0x72e>
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	085b      	lsrs	r3, r3, #1
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	2201      	movs	r2, #1
 80083d2:	4013      	ands	r3, r2
 80083d4:	d002      	beq.n	80083dc <HAL_PCD_EP_DB_Transmit+0x6b4>
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	3301      	adds	r3, #1
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	4a07      	ldr	r2, [pc, #28]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80083e4:	4694      	mov	ip, r2
 80083e6:	4463      	add	r3, ip
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	069a      	lsls	r2, r3, #26
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4802      	ldr	r0, [pc, #8]	@ (8008400 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80083f6:	4684      	mov	ip, r0
 80083f8:	4463      	add	r3, ip
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	e02a      	b.n	8008456 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008400:	40009800 	.word	0x40009800
 8008404:	07ff8f8f 	.word	0x07ff8f8f
 8008408:	0000c080 	.word	0x0000c080
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	785b      	ldrb	r3, [r3, #1]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d120      	bne.n	8008456 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	4a25      	ldr	r2, [pc, #148]	@ (80084b0 <HAL_PCD_EP_DB_Transmit+0x788>)
 800841c:	4694      	mov	ip, r2
 800841e:	4463      	add	r3, ip
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	4921      	ldr	r1, [pc, #132]	@ (80084b0 <HAL_PCD_EP_DB_Transmit+0x788>)
 800842a:	468c      	mov	ip, r1
 800842c:	4463      	add	r3, ip
 800842e:	0412      	lsls	r2, r2, #16
 8008430:	0c12      	lsrs	r2, r2, #16
 8008432:	605a      	str	r2, [r3, #4]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4a1d      	ldr	r2, [pc, #116]	@ (80084b0 <HAL_PCD_EP_DB_Transmit+0x788>)
 800843c:	4694      	mov	ip, r2
 800843e:	4463      	add	r3, ip
 8008440:	6859      	ldr	r1, [r3, #4]
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	041a      	lsls	r2, r3, #16
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	4818      	ldr	r0, [pc, #96]	@ (80084b0 <HAL_PCD_EP_DB_Transmit+0x788>)
 800844e:	4684      	mov	ip, r0
 8008450:	4463      	add	r3, ip
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6959      	ldr	r1, [r3, #20]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	895a      	ldrh	r2, [r3, #10]
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	b29b      	uxth	r3, r3
 8008466:	f003 fc71 	bl	800bd4c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	001a      	movs	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	18d3      	adds	r3, r2, r3
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a0e      	ldr	r2, [pc, #56]	@ (80084b4 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800847c:	4013      	ands	r3, r2
 800847e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	2210      	movs	r2, #16
 8008484:	4053      	eors	r3, r2
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	2220      	movs	r2, #32
 800848c:	4053      	eors	r3, r2
 800848e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	001a      	movs	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084a0:	4905      	ldr	r1, [pc, #20]	@ (80084b8 <HAL_PCD_EP_DB_Transmit+0x790>)
 80084a2:	430a      	orrs	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	0018      	movs	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b00e      	add	sp, #56	@ 0x38
 80084ae:	bdb0      	pop	{r4, r5, r7, pc}
 80084b0:	40009800 	.word	0x40009800
 80084b4:	07ff8fbf 	.word	0x07ff8fbf
 80084b8:	00008080 	.word	0x00008080

080084bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	0008      	movs	r0, r1
 80084c6:	0011      	movs	r1, r2
 80084c8:	607b      	str	r3, [r7, #4]
 80084ca:	240a      	movs	r4, #10
 80084cc:	193b      	adds	r3, r7, r4
 80084ce:	1c02      	adds	r2, r0, #0
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	2308      	movs	r3, #8
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	1c0a      	adds	r2, r1, #0
 80084d8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80084da:	0021      	movs	r1, r4
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	2280      	movs	r2, #128	@ 0x80
 80084e2:	4013      	ands	r3, r2
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00d      	beq.n	8008506 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084ea:	187b      	adds	r3, r7, r1
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	2207      	movs	r2, #7
 80084f0:	401a      	ands	r2, r3
 80084f2:	0013      	movs	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	3310      	adds	r3, #16
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	3304      	adds	r3, #4
 8008502:	617b      	str	r3, [r7, #20]
 8008504:	e00c      	b.n	8008520 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008506:	230a      	movs	r3, #10
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	0013      	movs	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	189b      	adds	r3, r3, r2
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	3351      	adds	r3, #81	@ 0x51
 8008516:	33ff      	adds	r3, #255	@ 0xff
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	18d3      	adds	r3, r2, r3
 800851c:	3304      	adds	r3, #4
 800851e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008520:	2308      	movs	r3, #8
 8008522:	18fb      	adds	r3, r7, r3
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d107      	bne.n	800853a <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	b29a      	uxth	r2, r3
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	80da      	strh	r2, [r3, #6]
 8008538:	e00b      	b.n	8008552 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2201      	movs	r2, #1
 800853e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	b29a      	uxth	r2, r3
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	b29a      	uxth	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b007      	add	sp, #28
 800855a:	bd90      	pop	{r4, r7, pc}

0800855c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	23b5      	movs	r3, #181	@ 0xb5
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	2101      	movs	r1, #1
 8008572:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	23b3      	movs	r3, #179	@ 0xb3
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	2100      	movs	r1, #0
 800857c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008582:	2201      	movs	r2, #1
 8008584:	431a      	orrs	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858e:	2202      	movs	r2, #2
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	0018      	movs	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	b004      	add	sp, #16
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80085a4:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <HAL_PWREx_EnableVddUSB+0x18>)
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	4b03      	ldr	r3, [pc, #12]	@ (80085b8 <HAL_PWREx_EnableVddUSB+0x18>)
 80085aa:	2180      	movs	r1, #128	@ 0x80
 80085ac:	00c9      	lsls	r1, r1, #3
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40007000 	.word	0x40007000

080085bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80085c4:	4b19      	ldr	r3, [pc, #100]	@ (800862c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a19      	ldr	r2, [pc, #100]	@ (8008630 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	0019      	movs	r1, r3
 80085ce:	4b17      	ldr	r3, [pc, #92]	@ (800862c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	2380      	movs	r3, #128	@ 0x80
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	429a      	cmp	r2, r3
 80085de:	d11f      	bne.n	8008620 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80085e0:	4b14      	ldr	r3, [pc, #80]	@ (8008634 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	0013      	movs	r3, r2
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	4912      	ldr	r1, [pc, #72]	@ (8008638 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80085ee:	0018      	movs	r0, r3
 80085f0:	f7f7 fda2 	bl	8000138 <__udivsi3>
 80085f4:	0003      	movs	r3, r0
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80085fa:	e008      	b.n	800860e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3b01      	subs	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e001      	b.n	800860e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e009      	b.n	8008622 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800860e:	4b07      	ldr	r3, [pc, #28]	@ (800862c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	2380      	movs	r3, #128	@ 0x80
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	401a      	ands	r2, r3
 8008618:	2380      	movs	r3, #128	@ 0x80
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	429a      	cmp	r2, r3
 800861e:	d0ed      	beq.n	80085fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	0018      	movs	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	b004      	add	sp, #16
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	40007000 	.word	0x40007000
 8008630:	fffff9ff 	.word	0xfffff9ff
 8008634:	20000090 	.word	0x20000090
 8008638:	000f4240 	.word	0x000f4240

0800863c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b088      	sub	sp, #32
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e2fe      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2201      	movs	r2, #1
 8008654:	4013      	ands	r3, r2
 8008656:	d100      	bne.n	800865a <HAL_RCC_OscConfig+0x1e>
 8008658:	e07c      	b.n	8008754 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800865a:	4bc3      	ldr	r3, [pc, #780]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	2238      	movs	r2, #56	@ 0x38
 8008660:	4013      	ands	r3, r2
 8008662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008664:	4bc0      	ldr	r3, [pc, #768]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2203      	movs	r2, #3
 800866a:	4013      	ands	r3, r2
 800866c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b10      	cmp	r3, #16
 8008672:	d102      	bne.n	800867a <HAL_RCC_OscConfig+0x3e>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d002      	beq.n	8008680 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d10b      	bne.n	8008698 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008680:	4bb9      	ldr	r3, [pc, #740]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	2380      	movs	r3, #128	@ 0x80
 8008686:	029b      	lsls	r3, r3, #10
 8008688:	4013      	ands	r3, r2
 800868a:	d062      	beq.n	8008752 <HAL_RCC_OscConfig+0x116>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d15e      	bne.n	8008752 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e2d9      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	2380      	movs	r3, #128	@ 0x80
 800869e:	025b      	lsls	r3, r3, #9
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d107      	bne.n	80086b4 <HAL_RCC_OscConfig+0x78>
 80086a4:	4bb0      	ldr	r3, [pc, #704]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4baf      	ldr	r3, [pc, #700]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086aa:	2180      	movs	r1, #128	@ 0x80
 80086ac:	0249      	lsls	r1, r1, #9
 80086ae:	430a      	orrs	r2, r1
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	e020      	b.n	80086f6 <HAL_RCC_OscConfig+0xba>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	23a0      	movs	r3, #160	@ 0xa0
 80086ba:	02db      	lsls	r3, r3, #11
 80086bc:	429a      	cmp	r2, r3
 80086be:	d10e      	bne.n	80086de <HAL_RCC_OscConfig+0xa2>
 80086c0:	4ba9      	ldr	r3, [pc, #676]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	4ba8      	ldr	r3, [pc, #672]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086c6:	2180      	movs	r1, #128	@ 0x80
 80086c8:	02c9      	lsls	r1, r1, #11
 80086ca:	430a      	orrs	r2, r1
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	4ba6      	ldr	r3, [pc, #664]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4ba5      	ldr	r3, [pc, #660]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086d4:	2180      	movs	r1, #128	@ 0x80
 80086d6:	0249      	lsls	r1, r1, #9
 80086d8:	430a      	orrs	r2, r1
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e00b      	b.n	80086f6 <HAL_RCC_OscConfig+0xba>
 80086de:	4ba2      	ldr	r3, [pc, #648]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	4ba1      	ldr	r3, [pc, #644]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086e4:	49a1      	ldr	r1, [pc, #644]	@ (800896c <HAL_RCC_OscConfig+0x330>)
 80086e6:	400a      	ands	r2, r1
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	4b9f      	ldr	r3, [pc, #636]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b9e      	ldr	r3, [pc, #632]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80086f0:	499f      	ldr	r1, [pc, #636]	@ (8008970 <HAL_RCC_OscConfig+0x334>)
 80086f2:	400a      	ands	r2, r1
 80086f4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d014      	beq.n	8008728 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fe:	f7fb fff1 	bl	80046e4 <HAL_GetTick>
 8008702:	0003      	movs	r3, r0
 8008704:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008708:	f7fb ffec 	bl	80046e4 <HAL_GetTick>
 800870c:	0002      	movs	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b64      	cmp	r3, #100	@ 0x64
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e298      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800871a:	4b93      	ldr	r3, [pc, #588]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	2380      	movs	r3, #128	@ 0x80
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	4013      	ands	r3, r2
 8008724:	d0f0      	beq.n	8008708 <HAL_RCC_OscConfig+0xcc>
 8008726:	e015      	b.n	8008754 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008728:	f7fb ffdc 	bl	80046e4 <HAL_GetTick>
 800872c:	0003      	movs	r3, r0
 800872e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008732:	f7fb ffd7 	bl	80046e4 <HAL_GetTick>
 8008736:	0002      	movs	r2, r0
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b64      	cmp	r3, #100	@ 0x64
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e283      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008744:	4b88      	ldr	r3, [pc, #544]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	2380      	movs	r3, #128	@ 0x80
 800874a:	029b      	lsls	r3, r3, #10
 800874c:	4013      	ands	r3, r2
 800874e:	d1f0      	bne.n	8008732 <HAL_RCC_OscConfig+0xf6>
 8008750:	e000      	b.n	8008754 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008752:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2202      	movs	r2, #2
 800875a:	4013      	ands	r3, r2
 800875c:	d100      	bne.n	8008760 <HAL_RCC_OscConfig+0x124>
 800875e:	e099      	b.n	8008894 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008760:	4b81      	ldr	r3, [pc, #516]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	2238      	movs	r2, #56	@ 0x38
 8008766:	4013      	ands	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800876a:	4b7f      	ldr	r3, [pc, #508]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	2203      	movs	r2, #3
 8008770:	4013      	ands	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b10      	cmp	r3, #16
 8008778:	d102      	bne.n	8008780 <HAL_RCC_OscConfig+0x144>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d002      	beq.n	8008786 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d135      	bne.n	80087f2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008786:	4b78      	ldr	r3, [pc, #480]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	2380      	movs	r3, #128	@ 0x80
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	4013      	ands	r3, r2
 8008790:	d005      	beq.n	800879e <HAL_RCC_OscConfig+0x162>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e256      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800879e:	4b72      	ldr	r3, [pc, #456]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4a74      	ldr	r2, [pc, #464]	@ (8008974 <HAL_RCC_OscConfig+0x338>)
 80087a4:	4013      	ands	r3, r2
 80087a6:	0019      	movs	r1, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	021a      	lsls	r2, r3, #8
 80087ae:	4b6e      	ldr	r3, [pc, #440]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087b0:	430a      	orrs	r2, r1
 80087b2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d112      	bne.n	80087e0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80087ba:	4b6b      	ldr	r3, [pc, #428]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a6e      	ldr	r2, [pc, #440]	@ (8008978 <HAL_RCC_OscConfig+0x33c>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	0019      	movs	r1, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691a      	ldr	r2, [r3, #16]
 80087c8:	4b67      	ldr	r3, [pc, #412]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087ca:	430a      	orrs	r2, r1
 80087cc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80087ce:	4b66      	ldr	r3, [pc, #408]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	0adb      	lsrs	r3, r3, #11
 80087d4:	2207      	movs	r2, #7
 80087d6:	4013      	ands	r3, r2
 80087d8:	4a68      	ldr	r2, [pc, #416]	@ (800897c <HAL_RCC_OscConfig+0x340>)
 80087da:	40da      	lsrs	r2, r3
 80087dc:	4b68      	ldr	r3, [pc, #416]	@ (8008980 <HAL_RCC_OscConfig+0x344>)
 80087de:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80087e0:	4b68      	ldr	r3, [pc, #416]	@ (8008984 <HAL_RCC_OscConfig+0x348>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fb ff21 	bl	800462c <HAL_InitTick>
 80087ea:	1e03      	subs	r3, r0, #0
 80087ec:	d051      	beq.n	8008892 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e22c      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d030      	beq.n	800885c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80087fa:	4b5b      	ldr	r3, [pc, #364]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a5e      	ldr	r2, [pc, #376]	@ (8008978 <HAL_RCC_OscConfig+0x33c>)
 8008800:	4013      	ands	r3, r2
 8008802:	0019      	movs	r1, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	4b57      	ldr	r3, [pc, #348]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800880a:	430a      	orrs	r2, r1
 800880c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800880e:	4b56      	ldr	r3, [pc, #344]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b55      	ldr	r3, [pc, #340]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008814:	2180      	movs	r1, #128	@ 0x80
 8008816:	0049      	lsls	r1, r1, #1
 8008818:	430a      	orrs	r2, r1
 800881a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881c:	f7fb ff62 	bl	80046e4 <HAL_GetTick>
 8008820:	0003      	movs	r3, r0
 8008822:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008824:	e008      	b.n	8008838 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008826:	f7fb ff5d 	bl	80046e4 <HAL_GetTick>
 800882a:	0002      	movs	r2, r0
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e209      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008838:	4b4b      	ldr	r3, [pc, #300]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	2380      	movs	r3, #128	@ 0x80
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4013      	ands	r3, r2
 8008842:	d0f0      	beq.n	8008826 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008844:	4b48      	ldr	r3, [pc, #288]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4a4a      	ldr	r2, [pc, #296]	@ (8008974 <HAL_RCC_OscConfig+0x338>)
 800884a:	4013      	ands	r3, r2
 800884c:	0019      	movs	r1, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	021a      	lsls	r2, r3, #8
 8008854:	4b44      	ldr	r3, [pc, #272]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
 800885a:	e01b      	b.n	8008894 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800885c:	4b42      	ldr	r3, [pc, #264]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	4b41      	ldr	r3, [pc, #260]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008862:	4949      	ldr	r1, [pc, #292]	@ (8008988 <HAL_RCC_OscConfig+0x34c>)
 8008864:	400a      	ands	r2, r1
 8008866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008868:	f7fb ff3c 	bl	80046e4 <HAL_GetTick>
 800886c:	0003      	movs	r3, r0
 800886e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008872:	f7fb ff37 	bl	80046e4 <HAL_GetTick>
 8008876:	0002      	movs	r2, r0
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e1e3      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008884:	4b38      	ldr	r3, [pc, #224]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	2380      	movs	r3, #128	@ 0x80
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4013      	ands	r3, r2
 800888e:	d1f0      	bne.n	8008872 <HAL_RCC_OscConfig+0x236>
 8008890:	e000      	b.n	8008894 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008892:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2208      	movs	r2, #8
 800889a:	4013      	ands	r3, r2
 800889c:	d047      	beq.n	800892e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800889e:	4b32      	ldr	r3, [pc, #200]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2238      	movs	r2, #56	@ 0x38
 80088a4:	4013      	ands	r3, r2
 80088a6:	2b18      	cmp	r3, #24
 80088a8:	d10a      	bne.n	80088c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80088aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ae:	2202      	movs	r2, #2
 80088b0:	4013      	ands	r3, r2
 80088b2:	d03c      	beq.n	800892e <HAL_RCC_OscConfig+0x2f2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d138      	bne.n	800892e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e1c5      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d019      	beq.n	80088fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80088c8:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80088cc:	4b26      	ldr	r3, [pc, #152]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088ce:	2101      	movs	r1, #1
 80088d0:	430a      	orrs	r2, r1
 80088d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d4:	f7fb ff06 	bl	80046e4 <HAL_GetTick>
 80088d8:	0003      	movs	r3, r0
 80088da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088dc:	e008      	b.n	80088f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088de:	f7fb ff01 	bl	80046e4 <HAL_GetTick>
 80088e2:	0002      	movs	r2, r0
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d901      	bls.n	80088f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e1ad      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f4:	2202      	movs	r2, #2
 80088f6:	4013      	ands	r3, r2
 80088f8:	d0f1      	beq.n	80088de <HAL_RCC_OscConfig+0x2a2>
 80088fa:	e018      	b.n	800892e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80088fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 80088fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008900:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008902:	2101      	movs	r1, #1
 8008904:	438a      	bics	r2, r1
 8008906:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008908:	f7fb feec 	bl	80046e4 <HAL_GetTick>
 800890c:	0003      	movs	r3, r0
 800890e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008912:	f7fb fee7 	bl	80046e4 <HAL_GetTick>
 8008916:	0002      	movs	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e193      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008924:	4b10      	ldr	r3, [pc, #64]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008928:	2202      	movs	r2, #2
 800892a:	4013      	ands	r3, r2
 800892c:	d1f1      	bne.n	8008912 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2204      	movs	r2, #4
 8008934:	4013      	ands	r3, r2
 8008936:	d100      	bne.n	800893a <HAL_RCC_OscConfig+0x2fe>
 8008938:	e0c6      	b.n	8008ac8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800893a:	231f      	movs	r3, #31
 800893c:	18fb      	adds	r3, r7, r3
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008942:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2238      	movs	r2, #56	@ 0x38
 8008948:	4013      	ands	r3, r2
 800894a:	2b20      	cmp	r3, #32
 800894c:	d11e      	bne.n	800898c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800894e:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <HAL_RCC_OscConfig+0x32c>)
 8008950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008952:	2202      	movs	r2, #2
 8008954:	4013      	ands	r3, r2
 8008956:	d100      	bne.n	800895a <HAL_RCC_OscConfig+0x31e>
 8008958:	e0b6      	b.n	8008ac8 <HAL_RCC_OscConfig+0x48c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d000      	beq.n	8008964 <HAL_RCC_OscConfig+0x328>
 8008962:	e0b1      	b.n	8008ac8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e171      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
 8008968:	40021000 	.word	0x40021000
 800896c:	fffeffff 	.word	0xfffeffff
 8008970:	fffbffff 	.word	0xfffbffff
 8008974:	ffff80ff 	.word	0xffff80ff
 8008978:	ffffc7ff 	.word	0xffffc7ff
 800897c:	00f42400 	.word	0x00f42400
 8008980:	20000090 	.word	0x20000090
 8008984:	20000094 	.word	0x20000094
 8008988:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800898c:	4bb1      	ldr	r3, [pc, #708]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 800898e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	055b      	lsls	r3, r3, #21
 8008994:	4013      	ands	r3, r2
 8008996:	d101      	bne.n	800899c <HAL_RCC_OscConfig+0x360>
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <HAL_RCC_OscConfig+0x362>
 800899c:	2300      	movs	r3, #0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d011      	beq.n	80089c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80089a2:	4bac      	ldr	r3, [pc, #688]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 80089a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089a6:	4bab      	ldr	r3, [pc, #684]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 80089a8:	2180      	movs	r1, #128	@ 0x80
 80089aa:	0549      	lsls	r1, r1, #21
 80089ac:	430a      	orrs	r2, r1
 80089ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80089b0:	4ba8      	ldr	r3, [pc, #672]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 80089b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	055b      	lsls	r3, r3, #21
 80089b8:	4013      	ands	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80089be:	231f      	movs	r3, #31
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c6:	4ba4      	ldr	r3, [pc, #656]	@ (8008c58 <HAL_RCC_OscConfig+0x61c>)
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	2380      	movs	r3, #128	@ 0x80
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	4013      	ands	r3, r2
 80089d0:	d11a      	bne.n	8008a08 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089d2:	4ba1      	ldr	r3, [pc, #644]	@ (8008c58 <HAL_RCC_OscConfig+0x61c>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	4ba0      	ldr	r3, [pc, #640]	@ (8008c58 <HAL_RCC_OscConfig+0x61c>)
 80089d8:	2180      	movs	r1, #128	@ 0x80
 80089da:	0049      	lsls	r1, r1, #1
 80089dc:	430a      	orrs	r2, r1
 80089de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80089e0:	f7fb fe80 	bl	80046e4 <HAL_GetTick>
 80089e4:	0003      	movs	r3, r0
 80089e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089e8:	e008      	b.n	80089fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ea:	f7fb fe7b 	bl	80046e4 <HAL_GetTick>
 80089ee:	0002      	movs	r2, r0
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e127      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089fc:	4b96      	ldr	r3, [pc, #600]	@ (8008c58 <HAL_RCC_OscConfig+0x61c>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	2380      	movs	r3, #128	@ 0x80
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4013      	ands	r3, r2
 8008a06:	d0f0      	beq.n	80089ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d106      	bne.n	8008a1e <HAL_RCC_OscConfig+0x3e2>
 8008a10:	4b90      	ldr	r3, [pc, #576]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a14:	4b8f      	ldr	r3, [pc, #572]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a16:	2101      	movs	r1, #1
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a1c:	e01c      	b.n	8008a58 <HAL_RCC_OscConfig+0x41c>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d10c      	bne.n	8008a40 <HAL_RCC_OscConfig+0x404>
 8008a26:	4b8b      	ldr	r3, [pc, #556]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a2a:	4b8a      	ldr	r3, [pc, #552]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a2c:	2104      	movs	r1, #4
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a32:	4b88      	ldr	r3, [pc, #544]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a36:	4b87      	ldr	r3, [pc, #540]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a38:	2101      	movs	r1, #1
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a3e:	e00b      	b.n	8008a58 <HAL_RCC_OscConfig+0x41c>
 8008a40:	4b84      	ldr	r3, [pc, #528]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a44:	4b83      	ldr	r3, [pc, #524]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a46:	2101      	movs	r1, #1
 8008a48:	438a      	bics	r2, r1
 8008a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a4c:	4b81      	ldr	r3, [pc, #516]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a50:	4b80      	ldr	r3, [pc, #512]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a52:	2104      	movs	r1, #4
 8008a54:	438a      	bics	r2, r1
 8008a56:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d014      	beq.n	8008a8a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a60:	f7fb fe40 	bl	80046e4 <HAL_GetTick>
 8008a64:	0003      	movs	r3, r0
 8008a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a68:	e009      	b.n	8008a7e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fb fe3b 	bl	80046e4 <HAL_GetTick>
 8008a6e:	0002      	movs	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	4a79      	ldr	r2, [pc, #484]	@ (8008c5c <HAL_RCC_OscConfig+0x620>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e0e6      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a7e:	4b75      	ldr	r3, [pc, #468]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a82:	2202      	movs	r2, #2
 8008a84:	4013      	ands	r3, r2
 8008a86:	d0f0      	beq.n	8008a6a <HAL_RCC_OscConfig+0x42e>
 8008a88:	e013      	b.n	8008ab2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8a:	f7fb fe2b 	bl	80046e4 <HAL_GetTick>
 8008a8e:	0003      	movs	r3, r0
 8008a90:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a92:	e009      	b.n	8008aa8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a94:	f7fb fe26 	bl	80046e4 <HAL_GetTick>
 8008a98:	0002      	movs	r2, r0
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8008c5c <HAL_RCC_OscConfig+0x620>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e0d1      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aac:	2202      	movs	r2, #2
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d1f0      	bne.n	8008a94 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008ab2:	231f      	movs	r3, #31
 8008ab4:	18fb      	adds	r3, r7, r3
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d105      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008abc:	4b65      	ldr	r3, [pc, #404]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ac0:	4b64      	ldr	r3, [pc, #400]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008ac2:	4967      	ldr	r1, [pc, #412]	@ (8008c60 <HAL_RCC_OscConfig+0x624>)
 8008ac4:	400a      	ands	r2, r1
 8008ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d100      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x496>
 8008ad0:	e0bb      	b.n	8008c4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ad2:	4b60      	ldr	r3, [pc, #384]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	2238      	movs	r2, #56	@ 0x38
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b10      	cmp	r3, #16
 8008adc:	d100      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x4a4>
 8008ade:	e07b      	b.n	8008bd8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d156      	bne.n	8008b96 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b59      	ldr	r3, [pc, #356]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008aee:	495d      	ldr	r1, [pc, #372]	@ (8008c64 <HAL_RCC_OscConfig+0x628>)
 8008af0:	400a      	ands	r2, r1
 8008af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af4:	f7fb fdf6 	bl	80046e4 <HAL_GetTick>
 8008af8:	0003      	movs	r3, r0
 8008afa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afe:	f7fb fdf1 	bl	80046e4 <HAL_GetTick>
 8008b02:	0002      	movs	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e09d      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b10:	4b50      	ldr	r3, [pc, #320]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	2380      	movs	r3, #128	@ 0x80
 8008b16:	049b      	lsls	r3, r3, #18
 8008b18:	4013      	ands	r3, r2
 8008b1a:	d1f0      	bne.n	8008afe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	4a51      	ldr	r2, [pc, #324]	@ (8008c68 <HAL_RCC_OscConfig+0x62c>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	0019      	movs	r1, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1a      	ldr	r2, [r3, #32]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	4b42      	ldr	r3, [pc, #264]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b50:	4b40      	ldr	r3, [pc, #256]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	4b3f      	ldr	r3, [pc, #252]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b56:	2180      	movs	r1, #128	@ 0x80
 8008b58:	0449      	lsls	r1, r1, #17
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	4b3c      	ldr	r3, [pc, #240]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b64:	2180      	movs	r1, #128	@ 0x80
 8008b66:	0549      	lsls	r1, r1, #21
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7fb fdba 	bl	80046e4 <HAL_GetTick>
 8008b70:	0003      	movs	r3, r0
 8008b72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b74:	e008      	b.n	8008b88 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b76:	f7fb fdb5 	bl	80046e4 <HAL_GetTick>
 8008b7a:	0002      	movs	r2, r0
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e061      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b88:	4b32      	ldr	r3, [pc, #200]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	049b      	lsls	r3, r3, #18
 8008b90:	4013      	ands	r3, r2
 8008b92:	d0f0      	beq.n	8008b76 <HAL_RCC_OscConfig+0x53a>
 8008b94:	e059      	b.n	8008c4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b96:	4b2f      	ldr	r3, [pc, #188]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008b9c:	4931      	ldr	r1, [pc, #196]	@ (8008c64 <HAL_RCC_OscConfig+0x628>)
 8008b9e:	400a      	ands	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba2:	f7fb fd9f 	bl	80046e4 <HAL_GetTick>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bac:	f7fb fd9a 	bl	80046e4 <HAL_GetTick>
 8008bb0:	0002      	movs	r2, r0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e046      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bbe:	4b25      	ldr	r3, [pc, #148]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	2380      	movs	r3, #128	@ 0x80
 8008bc4:	049b      	lsls	r3, r3, #18
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	d1f0      	bne.n	8008bac <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008bca:	4b22      	ldr	r3, [pc, #136]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	4b21      	ldr	r3, [pc, #132]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008bd0:	4926      	ldr	r1, [pc, #152]	@ (8008c6c <HAL_RCC_OscConfig+0x630>)
 8008bd2:	400a      	ands	r2, r1
 8008bd4:	60da      	str	r2, [r3, #12]
 8008bd6:	e038      	b.n	8008c4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e033      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008be4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c54 <HAL_RCC_OscConfig+0x618>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2203      	movs	r2, #3
 8008bee:	401a      	ands	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d126      	bne.n	8008c46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2270      	movs	r2, #112	@ 0x70
 8008bfc:	401a      	ands	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d11f      	bne.n	8008c46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	23fe      	movs	r3, #254	@ 0xfe
 8008c0a:	01db      	lsls	r3, r3, #7
 8008c0c:	401a      	ands	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d116      	bne.n	8008c46 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	23f8      	movs	r3, #248	@ 0xf8
 8008c1c:	039b      	lsls	r3, r3, #14
 8008c1e:	401a      	ands	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d10e      	bne.n	8008c46 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	23e0      	movs	r3, #224	@ 0xe0
 8008c2c:	051b      	lsls	r3, r3, #20
 8008c2e:	401a      	ands	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d106      	bne.n	8008c46 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	0f5b      	lsrs	r3, r3, #29
 8008c3c:	075a      	lsls	r2, r3, #29
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d001      	beq.n	8008c4a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b008      	add	sp, #32
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	40021000 	.word	0x40021000
 8008c58:	40007000 	.word	0x40007000
 8008c5c:	00001388 	.word	0x00001388
 8008c60:	efffffff 	.word	0xefffffff
 8008c64:	feffffff 	.word	0xfeffffff
 8008c68:	11c1808c 	.word	0x11c1808c
 8008c6c:	eefefffc 	.word	0xeefefffc

08008c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0e9      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c84:	4b76      	ldr	r3, [pc, #472]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2207      	movs	r2, #7
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d91e      	bls.n	8008cd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c92:	4b73      	ldr	r3, [pc, #460]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2207      	movs	r2, #7
 8008c98:	4393      	bics	r3, r2
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	4b70      	ldr	r3, [pc, #448]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ca4:	f7fb fd1e 	bl	80046e4 <HAL_GetTick>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cac:	e009      	b.n	8008cc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cae:	f7fb fd19 	bl	80046e4 <HAL_GetTick>
 8008cb2:	0002      	movs	r2, r0
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8008e64 <HAL_RCC_ClockConfig+0x1f4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e0ca      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008cc2:	4b67      	ldr	r3, [pc, #412]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2207      	movs	r2, #7
 8008cc8:	4013      	ands	r3, r2
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d1ee      	bne.n	8008cae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d015      	beq.n	8008d06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2204      	movs	r2, #4
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d006      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008ce4:	4b60      	ldr	r3, [pc, #384]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008cea:	21e0      	movs	r1, #224	@ 0xe0
 8008cec:	01c9      	lsls	r1, r1, #7
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	4a5d      	ldr	r2, [pc, #372]	@ (8008e6c <HAL_RCC_ClockConfig+0x1fc>)
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	0019      	movs	r1, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	4b59      	ldr	r3, [pc, #356]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d02:	430a      	orrs	r2, r1
 8008d04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	d057      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d107      	bne.n	8008d28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d18:	4b53      	ldr	r3, [pc, #332]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	2380      	movs	r3, #128	@ 0x80
 8008d1e:	029b      	lsls	r3, r3, #10
 8008d20:	4013      	ands	r3, r2
 8008d22:	d12b      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e097      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d30:	4b4d      	ldr	r3, [pc, #308]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	2380      	movs	r3, #128	@ 0x80
 8008d36:	049b      	lsls	r3, r3, #18
 8008d38:	4013      	ands	r3, r2
 8008d3a:	d11f      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e08b      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d107      	bne.n	8008d58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d48:	4b47      	ldr	r3, [pc, #284]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	2380      	movs	r3, #128	@ 0x80
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	4013      	ands	r3, r2
 8008d52:	d113      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e07f      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d106      	bne.n	8008d6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d60:	4b41      	ldr	r3, [pc, #260]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d64:	2202      	movs	r2, #2
 8008d66:	4013      	ands	r3, r2
 8008d68:	d108      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e074      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d72:	2202      	movs	r2, #2
 8008d74:	4013      	ands	r3, r2
 8008d76:	d101      	bne.n	8008d7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e06d      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2207      	movs	r2, #7
 8008d82:	4393      	bics	r3, r2
 8008d84:	0019      	movs	r1, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	4b37      	ldr	r3, [pc, #220]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d90:	f7fb fca8 	bl	80046e4 <HAL_GetTick>
 8008d94:	0003      	movs	r3, r0
 8008d96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d98:	e009      	b.n	8008dae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d9a:	f7fb fca3 	bl	80046e4 <HAL_GetTick>
 8008d9e:	0002      	movs	r2, r0
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	4a2f      	ldr	r2, [pc, #188]	@ (8008e64 <HAL_RCC_ClockConfig+0x1f4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d901      	bls.n	8008dae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e054      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dae:	4b2e      	ldr	r3, [pc, #184]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	2238      	movs	r2, #56	@ 0x38
 8008db4:	401a      	ands	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d1ec      	bne.n	8008d9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dc0:	4b27      	ldr	r3, [pc, #156]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2207      	movs	r2, #7
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d21e      	bcs.n	8008e0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dce:	4b24      	ldr	r3, [pc, #144]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2207      	movs	r2, #7
 8008dd4:	4393      	bics	r3, r2
 8008dd6:	0019      	movs	r1, r3
 8008dd8:	4b21      	ldr	r3, [pc, #132]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008de0:	f7fb fc80 	bl	80046e4 <HAL_GetTick>
 8008de4:	0003      	movs	r3, r0
 8008de6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008de8:	e009      	b.n	8008dfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dea:	f7fb fc7b 	bl	80046e4 <HAL_GetTick>
 8008dee:	0002      	movs	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e64 <HAL_RCC_ClockConfig+0x1f4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d901      	bls.n	8008dfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e02c      	b.n	8008e58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008dfe:	4b18      	ldr	r3, [pc, #96]	@ (8008e60 <HAL_RCC_ClockConfig+0x1f0>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2207      	movs	r2, #7
 8008e04:	4013      	ands	r3, r2
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d1ee      	bne.n	8008dea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2204      	movs	r2, #4
 8008e12:	4013      	ands	r3, r2
 8008e14:	d009      	beq.n	8008e2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008e16:	4b14      	ldr	r3, [pc, #80]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	4a15      	ldr	r2, [pc, #84]	@ (8008e70 <HAL_RCC_ClockConfig+0x200>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	0019      	movs	r1, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68da      	ldr	r2, [r3, #12]
 8008e24:	4b10      	ldr	r3, [pc, #64]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008e26:	430a      	orrs	r2, r1
 8008e28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008e2a:	f000 f829 	bl	8008e80 <HAL_RCC_GetSysClockFreq>
 8008e2e:	0001      	movs	r1, r0
 8008e30:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <HAL_RCC_ClockConfig+0x1f8>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	0a1b      	lsrs	r3, r3, #8
 8008e36:	220f      	movs	r2, #15
 8008e38:	401a      	ands	r2, r3
 8008e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e74 <HAL_RCC_ClockConfig+0x204>)
 8008e3c:	0092      	lsls	r2, r2, #2
 8008e3e:	58d3      	ldr	r3, [r2, r3]
 8008e40:	221f      	movs	r2, #31
 8008e42:	4013      	ands	r3, r2
 8008e44:	000a      	movs	r2, r1
 8008e46:	40da      	lsrs	r2, r3
 8008e48:	4b0b      	ldr	r3, [pc, #44]	@ (8008e78 <HAL_RCC_ClockConfig+0x208>)
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <HAL_RCC_ClockConfig+0x20c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7fb fbeb 	bl	800462c <HAL_InitTick>
 8008e56:	0003      	movs	r3, r0
}
 8008e58:	0018      	movs	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b004      	add	sp, #16
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40022000 	.word	0x40022000
 8008e64:	00001388 	.word	0x00001388
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	fffff0ff 	.word	0xfffff0ff
 8008e70:	ffff8fff 	.word	0xffff8fff
 8008e74:	080133bc 	.word	0x080133bc
 8008e78:	20000090 	.word	0x20000090
 8008e7c:	20000094 	.word	0x20000094

08008e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e86:	4b3c      	ldr	r3, [pc, #240]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	2238      	movs	r2, #56	@ 0x38
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	d10f      	bne.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008e90:	4b39      	ldr	r3, [pc, #228]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	0adb      	lsrs	r3, r3, #11
 8008e96:	2207      	movs	r2, #7
 8008e98:	4013      	ands	r3, r2
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	409a      	lsls	r2, r3
 8008e9e:	0013      	movs	r3, r2
 8008ea0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	4835      	ldr	r0, [pc, #212]	@ (8008f7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008ea6:	f7f7 f947 	bl	8000138 <__udivsi3>
 8008eaa:	0003      	movs	r3, r0
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	e05d      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008eb0:	4b31      	ldr	r3, [pc, #196]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2238      	movs	r2, #56	@ 0x38
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d102      	bne.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ebc:	4b30      	ldr	r3, [pc, #192]	@ (8008f80 <HAL_RCC_GetSysClockFreq+0x100>)
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	e054      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	2238      	movs	r2, #56	@ 0x38
 8008ec8:	4013      	ands	r3, r2
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d138      	bne.n	8008f40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008ece:	4b2a      	ldr	r3, [pc, #168]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ed8:	4b27      	ldr	r3, [pc, #156]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	2207      	movs	r2, #7
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d10d      	bne.n	8008f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	4824      	ldr	r0, [pc, #144]	@ (8008f80 <HAL_RCC_GetSysClockFreq+0x100>)
 8008ef0:	f7f7 f922 	bl	8000138 <__udivsi3>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	0019      	movs	r1, r3
 8008ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	227f      	movs	r2, #127	@ 0x7f
 8008f00:	4013      	ands	r3, r2
 8008f02:	434b      	muls	r3, r1
 8008f04:	617b      	str	r3, [r7, #20]
        break;
 8008f06:	e00d      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	481c      	ldr	r0, [pc, #112]	@ (8008f7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008f0c:	f7f7 f914 	bl	8000138 <__udivsi3>
 8008f10:	0003      	movs	r3, r0
 8008f12:	0019      	movs	r1, r3
 8008f14:	4b18      	ldr	r3, [pc, #96]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	227f      	movs	r2, #127	@ 0x7f
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	434b      	muls	r3, r1
 8008f20:	617b      	str	r3, [r7, #20]
        break;
 8008f22:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008f24:	4b14      	ldr	r3, [pc, #80]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	0f5b      	lsrs	r3, r3, #29
 8008f2a:	2207      	movs	r2, #7
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	3301      	adds	r3, #1
 8008f30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	6978      	ldr	r0, [r7, #20]
 8008f36:	f7f7 f8ff 	bl	8000138 <__udivsi3>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	e015      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008f40:	4b0d      	ldr	r3, [pc, #52]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2238      	movs	r2, #56	@ 0x38
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	d103      	bne.n	8008f54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008f4c:	2380      	movs	r3, #128	@ 0x80
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	e00b      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008f54:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	2238      	movs	r2, #56	@ 0x38
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	2b18      	cmp	r3, #24
 8008f5e:	d103      	bne.n	8008f68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008f60:	23fa      	movs	r3, #250	@ 0xfa
 8008f62:	01db      	lsls	r3, r3, #7
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	e001      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008f6c:	693b      	ldr	r3, [r7, #16]
}
 8008f6e:	0018      	movs	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	b006      	add	sp, #24
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	46c0      	nop			@ (mov r8, r8)
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	00f42400 	.word	0x00f42400
 8008f80:	007a1200 	.word	0x007a1200

08008f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008f8c:	2313      	movs	r3, #19
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f94:	2312      	movs	r3, #18
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	2380      	movs	r3, #128	@ 0x80
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	d100      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008fa8:	e0a3      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008faa:	2011      	movs	r0, #17
 8008fac:	183b      	adds	r3, r7, r0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fb2:	4bb0      	ldr	r3, [pc, #704]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fb6:	2380      	movs	r3, #128	@ 0x80
 8008fb8:	055b      	lsls	r3, r3, #21
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d110      	bne.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fbe:	4bad      	ldr	r3, [pc, #692]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fc2:	4bac      	ldr	r3, [pc, #688]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fc4:	2180      	movs	r1, #128	@ 0x80
 8008fc6:	0549      	lsls	r1, r1, #21
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008fcc:	4ba9      	ldr	r3, [pc, #676]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fd0:	2380      	movs	r3, #128	@ 0x80
 8008fd2:	055b      	lsls	r3, r3, #21
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fda:	183b      	adds	r3, r7, r0
 8008fdc:	2201      	movs	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fe0:	4ba5      	ldr	r3, [pc, #660]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4ba4      	ldr	r3, [pc, #656]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fe6:	2180      	movs	r1, #128	@ 0x80
 8008fe8:	0049      	lsls	r1, r1, #1
 8008fea:	430a      	orrs	r2, r1
 8008fec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fee:	f7fb fb79 	bl	80046e4 <HAL_GetTick>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ff6:	e00b      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff8:	f7fb fb74 	bl	80046e4 <HAL_GetTick>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d904      	bls.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009006:	2313      	movs	r3, #19
 8009008:	18fb      	adds	r3, r7, r3
 800900a:	2203      	movs	r2, #3
 800900c:	701a      	strb	r2, [r3, #0]
        break;
 800900e:	e005      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009010:	4b99      	ldr	r3, [pc, #612]	@ (8009278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	2380      	movs	r3, #128	@ 0x80
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	4013      	ands	r3, r2
 800901a:	d0ed      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800901c:	2313      	movs	r3, #19
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d154      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009026:	4b93      	ldr	r3, [pc, #588]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009028:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800902a:	23c0      	movs	r3, #192	@ 0xc0
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4013      	ands	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d019      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	429a      	cmp	r2, r3
 8009040:	d014      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009042:	4b8c      	ldr	r3, [pc, #560]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009046:	4a8d      	ldr	r2, [pc, #564]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009048:	4013      	ands	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800904c:	4b89      	ldr	r3, [pc, #548]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800904e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009050:	4b88      	ldr	r3, [pc, #544]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009052:	2180      	movs	r1, #128	@ 0x80
 8009054:	0249      	lsls	r1, r1, #9
 8009056:	430a      	orrs	r2, r1
 8009058:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800905a:	4b86      	ldr	r3, [pc, #536]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800905c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800905e:	4b85      	ldr	r3, [pc, #532]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009060:	4987      	ldr	r1, [pc, #540]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009062:	400a      	ands	r2, r1
 8009064:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009066:	4b83      	ldr	r3, [pc, #524]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2201      	movs	r2, #1
 8009070:	4013      	ands	r3, r2
 8009072:	d016      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009074:	f7fb fb36 	bl	80046e4 <HAL_GetTick>
 8009078:	0003      	movs	r3, r0
 800907a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800907c:	e00c      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907e:	f7fb fb31 	bl	80046e4 <HAL_GetTick>
 8009082:	0002      	movs	r2, r0
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	4a7e      	ldr	r2, [pc, #504]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d904      	bls.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800908e:	2313      	movs	r3, #19
 8009090:	18fb      	adds	r3, r7, r3
 8009092:	2203      	movs	r2, #3
 8009094:	701a      	strb	r2, [r3, #0]
            break;
 8009096:	e004      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009098:	4b76      	ldr	r3, [pc, #472]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800909a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800909c:	2202      	movs	r2, #2
 800909e:	4013      	ands	r3, r2
 80090a0:	d0ed      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80090a2:	2313      	movs	r3, #19
 80090a4:	18fb      	adds	r3, r7, r3
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10a      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ac:	4b71      	ldr	r3, [pc, #452]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b0:	4a72      	ldr	r2, [pc, #456]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	0019      	movs	r1, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090bc:	430a      	orrs	r2, r1
 80090be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80090c0:	e00c      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090c2:	2312      	movs	r3, #18
 80090c4:	18fb      	adds	r3, r7, r3
 80090c6:	2213      	movs	r2, #19
 80090c8:	18ba      	adds	r2, r7, r2
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e005      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	2312      	movs	r3, #18
 80090d2:	18fb      	adds	r3, r7, r3
 80090d4:	2213      	movs	r2, #19
 80090d6:	18ba      	adds	r2, r7, r2
 80090d8:	7812      	ldrb	r2, [r2, #0]
 80090da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090dc:	2311      	movs	r3, #17
 80090de:	18fb      	adds	r3, r7, r3
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d105      	bne.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090e6:	4b63      	ldr	r3, [pc, #396]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090ea:	4b62      	ldr	r3, [pc, #392]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090ec:	4966      	ldr	r1, [pc, #408]	@ (8009288 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ee:	400a      	ands	r2, r1
 80090f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2201      	movs	r2, #1
 80090f8:	4013      	ands	r3, r2
 80090fa:	d009      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090fc:	4b5d      	ldr	r3, [pc, #372]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80090fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009100:	2203      	movs	r2, #3
 8009102:	4393      	bics	r3, r2
 8009104:	0019      	movs	r1, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	4b5a      	ldr	r3, [pc, #360]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800910c:	430a      	orrs	r2, r1
 800910e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2202      	movs	r2, #2
 8009116:	4013      	ands	r3, r2
 8009118:	d009      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800911a:	4b56      	ldr	r3, [pc, #344]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	220c      	movs	r2, #12
 8009120:	4393      	bics	r3, r2
 8009122:	0019      	movs	r1, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	4b52      	ldr	r3, [pc, #328]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800912a:	430a      	orrs	r2, r1
 800912c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2204      	movs	r2, #4
 8009134:	4013      	ands	r3, r2
 8009136:	d009      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009138:	4b4e      	ldr	r3, [pc, #312]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800913a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913c:	2230      	movs	r2, #48	@ 0x30
 800913e:	4393      	bics	r3, r2
 8009140:	0019      	movs	r1, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	4b4b      	ldr	r3, [pc, #300]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009148:	430a      	orrs	r2, r1
 800914a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2220      	movs	r2, #32
 8009152:	4013      	ands	r3, r2
 8009154:	d009      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009156:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915a:	4a4c      	ldr	r2, [pc, #304]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800915c:	4013      	ands	r3, r2
 800915e:	0019      	movs	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	4b43      	ldr	r3, [pc, #268]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009166:	430a      	orrs	r2, r1
 8009168:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	4013      	ands	r3, r2
 8009172:	d009      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009174:	4b3f      	ldr	r3, [pc, #252]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009178:	4a45      	ldr	r2, [pc, #276]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800917a:	4013      	ands	r3, r2
 800917c:	0019      	movs	r1, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695a      	ldr	r2, [r3, #20]
 8009182:	4b3c      	ldr	r3, [pc, #240]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009184:	430a      	orrs	r2, r1
 8009186:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	01db      	lsls	r3, r3, #7
 8009190:	4013      	ands	r3, r2
 8009192:	d015      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009194:	4b37      	ldr	r3, [pc, #220]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	0899      	lsrs	r1, r3, #2
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1a      	ldr	r2, [r3, #32]
 80091a0:	4b34      	ldr	r3, [pc, #208]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091a2:	430a      	orrs	r2, r1
 80091a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	2380      	movs	r3, #128	@ 0x80
 80091ac:	05db      	lsls	r3, r3, #23
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d106      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80091b2:	4b30      	ldr	r3, [pc, #192]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091b8:	2180      	movs	r1, #128	@ 0x80
 80091ba:	0249      	lsls	r1, r1, #9
 80091bc:	430a      	orrs	r2, r1
 80091be:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	2380      	movs	r3, #128	@ 0x80
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	4013      	ands	r3, r2
 80091ca:	d014      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80091cc:	4b29      	ldr	r3, [pc, #164]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d0:	2203      	movs	r2, #3
 80091d2:	4393      	bics	r3, r2
 80091d4:	0019      	movs	r1, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	4b26      	ldr	r3, [pc, #152]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091dc:	430a      	orrs	r2, r1
 80091de:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d106      	bne.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80091e8:	4b22      	ldr	r3, [pc, #136]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ea:	68da      	ldr	r2, [r3, #12]
 80091ec:	4b21      	ldr	r3, [pc, #132]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80091ee:	2180      	movs	r1, #128	@ 0x80
 80091f0:	0249      	lsls	r1, r1, #9
 80091f2:	430a      	orrs	r2, r1
 80091f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	2380      	movs	r3, #128	@ 0x80
 80091fc:	019b      	lsls	r3, r3, #6
 80091fe:	4013      	ands	r3, r2
 8009200:	d014      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009202:	4b1c      	ldr	r3, [pc, #112]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009206:	220c      	movs	r2, #12
 8009208:	4393      	bics	r3, r2
 800920a:	0019      	movs	r1, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	69da      	ldr	r2, [r3, #28]
 8009210:	4b18      	ldr	r3, [pc, #96]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009212:	430a      	orrs	r2, r1
 8009214:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	2b04      	cmp	r3, #4
 800921c:	d106      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800921e:	4b15      	ldr	r3, [pc, #84]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009224:	2180      	movs	r1, #128	@ 0x80
 8009226:	0249      	lsls	r1, r1, #9
 8009228:	430a      	orrs	r2, r1
 800922a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	2380      	movs	r3, #128	@ 0x80
 8009232:	045b      	lsls	r3, r3, #17
 8009234:	4013      	ands	r3, r2
 8009236:	d016      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800923a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923c:	4a13      	ldr	r2, [pc, #76]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800923e:	4013      	ands	r3, r2
 8009240:	0019      	movs	r1, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009246:	4b0b      	ldr	r3, [pc, #44]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009248:	430a      	orrs	r2, r1
 800924a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009250:	2380      	movs	r3, #128	@ 0x80
 8009252:	019b      	lsls	r3, r3, #6
 8009254:	429a      	cmp	r2, r3
 8009256:	d106      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009258:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800925e:	2180      	movs	r1, #128	@ 0x80
 8009260:	0449      	lsls	r1, r1, #17
 8009262:	430a      	orrs	r2, r1
 8009264:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009266:	2312      	movs	r3, #18
 8009268:	18fb      	adds	r3, r7, r3
 800926a:	781b      	ldrb	r3, [r3, #0]
}
 800926c:	0018      	movs	r0, r3
 800926e:	46bd      	mov	sp, r7
 8009270:	b006      	add	sp, #24
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40021000 	.word	0x40021000
 8009278:	40007000 	.word	0x40007000
 800927c:	fffffcff 	.word	0xfffffcff
 8009280:	fffeffff 	.word	0xfffeffff
 8009284:	00001388 	.word	0x00001388
 8009288:	efffffff 	.word	0xefffffff
 800928c:	ffffcfff 	.word	0xffffcfff
 8009290:	ffff3fff 	.word	0xffff3fff

08009294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e0a8      	b.n	80093f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d109      	bne.n	80092c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	2382      	movs	r3, #130	@ 0x82
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d009      	beq.n	80092ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	61da      	str	r2, [r3, #28]
 80092c0:	e005      	b.n	80092ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	225d      	movs	r2, #93	@ 0x5d
 80092d8:	5c9b      	ldrb	r3, [r3, r2]
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d107      	bne.n	80092f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	225c      	movs	r2, #92	@ 0x5c
 80092e4:	2100      	movs	r1, #0
 80092e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	0018      	movs	r0, r3
 80092ec:	f7fa fe34 	bl	8003f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	225d      	movs	r2, #93	@ 0x5d
 80092f4:	2102      	movs	r1, #2
 80092f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2140      	movs	r1, #64	@ 0x40
 8009304:	438a      	bics	r2, r1
 8009306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	23e0      	movs	r3, #224	@ 0xe0
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	429a      	cmp	r2, r3
 8009312:	d902      	bls.n	800931a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	e002      	b.n	8009320 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800931a:	2380      	movs	r3, #128	@ 0x80
 800931c:	015b      	lsls	r3, r3, #5
 800931e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	23f0      	movs	r3, #240	@ 0xf0
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	429a      	cmp	r2, r3
 800932a:	d008      	beq.n	800933e <HAL_SPI_Init+0xaa>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	23e0      	movs	r3, #224	@ 0xe0
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	429a      	cmp	r2, r3
 8009336:	d002      	beq.n	800933e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	2382      	movs	r3, #130	@ 0x82
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	401a      	ands	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6899      	ldr	r1, [r3, #8]
 800934c:	2384      	movs	r3, #132	@ 0x84
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	400b      	ands	r3, r1
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2102      	movs	r1, #2
 800935a:	400b      	ands	r3, r1
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	2101      	movs	r1, #1
 8009364:	400b      	ands	r3, r1
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6999      	ldr	r1, [r3, #24]
 800936c:	2380      	movs	r3, #128	@ 0x80
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	400b      	ands	r3, r1
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	2138      	movs	r1, #56	@ 0x38
 800937a:	400b      	ands	r3, r1
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	2180      	movs	r1, #128	@ 0x80
 8009384:	400b      	ands	r3, r1
 8009386:	431a      	orrs	r2, r3
 8009388:	0011      	movs	r1, r2
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800938e:	2380      	movs	r3, #128	@ 0x80
 8009390:	019b      	lsls	r3, r3, #6
 8009392:	401a      	ands	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	0c1b      	lsrs	r3, r3, #16
 80093a2:	2204      	movs	r2, #4
 80093a4:	401a      	ands	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093aa:	2110      	movs	r1, #16
 80093ac:	400b      	ands	r3, r1
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b4:	2108      	movs	r1, #8
 80093b6:	400b      	ands	r3, r1
 80093b8:	431a      	orrs	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68d9      	ldr	r1, [r3, #12]
 80093be:	23f0      	movs	r3, #240	@ 0xf0
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	400b      	ands	r3, r1
 80093c4:	431a      	orrs	r2, r3
 80093c6:	0011      	movs	r1, r2
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	2380      	movs	r3, #128	@ 0x80
 80093cc:	015b      	lsls	r3, r3, #5
 80093ce:	401a      	ands	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69da      	ldr	r2, [r3, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4907      	ldr	r1, [pc, #28]	@ (8009400 <HAL_SPI_Init+0x16c>)
 80093e4:	400a      	ands	r2, r1
 80093e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	225d      	movs	r2, #93	@ 0x5d
 80093f2:	2101      	movs	r1, #1
 80093f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	b004      	add	sp, #16
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	fffff7ff 	.word	0xfffff7ff

08009404 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08a      	sub	sp, #40	@ 0x28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	001a      	movs	r2, r3
 8009412:	1cbb      	adds	r3, r7, #2
 8009414:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009416:	2301      	movs	r3, #1
 8009418:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800941a:	2323      	movs	r3, #35	@ 0x23
 800941c:	18fb      	adds	r3, r7, r3
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	225c      	movs	r2, #92	@ 0x5c
 8009426:	5c9b      	ldrb	r3, [r3, r2]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_SPI_TransmitReceive+0x2c>
 800942c:	2302      	movs	r3, #2
 800942e:	e1c4      	b.n	80097ba <HAL_SPI_TransmitReceive+0x3b6>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	225c      	movs	r2, #92	@ 0x5c
 8009434:	2101      	movs	r1, #1
 8009436:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009438:	f7fb f954 	bl	80046e4 <HAL_GetTick>
 800943c:	0003      	movs	r3, r0
 800943e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009440:	201b      	movs	r0, #27
 8009442:	183b      	adds	r3, r7, r0
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	215d      	movs	r1, #93	@ 0x5d
 8009448:	5c52      	ldrb	r2, [r2, r1]
 800944a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009452:	2312      	movs	r3, #18
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	1cba      	adds	r2, r7, #2
 8009458:	8812      	ldrh	r2, [r2, #0]
 800945a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800945c:	183b      	adds	r3, r7, r0
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d011      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x84>
 8009464:	697a      	ldr	r2, [r7, #20]
 8009466:	2382      	movs	r3, #130	@ 0x82
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	429a      	cmp	r2, r3
 800946c:	d107      	bne.n	800947e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <HAL_SPI_TransmitReceive+0x7a>
 8009476:	183b      	adds	r3, r7, r0
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b04      	cmp	r3, #4
 800947c:	d004      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800947e:	2323      	movs	r3, #35	@ 0x23
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	2202      	movs	r2, #2
 8009484:	701a      	strb	r2, [r3, #0]
    goto error;
 8009486:	e191      	b.n	80097ac <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d006      	beq.n	800949c <HAL_SPI_TransmitReceive+0x98>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <HAL_SPI_TransmitReceive+0x98>
 8009494:	1cbb      	adds	r3, r7, #2
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800949c:	2323      	movs	r3, #35	@ 0x23
 800949e:	18fb      	adds	r3, r7, r3
 80094a0:	2201      	movs	r2, #1
 80094a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80094a4:	e182      	b.n	80097ac <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	225d      	movs	r2, #93	@ 0x5d
 80094aa:	5c9b      	ldrb	r3, [r3, r2]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d003      	beq.n	80094ba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	225d      	movs	r2, #93	@ 0x5d
 80094b6:	2105      	movs	r1, #5
 80094b8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	1cba      	adds	r2, r7, #2
 80094ca:	2146      	movs	r1, #70	@ 0x46
 80094cc:	8812      	ldrh	r2, [r2, #0]
 80094ce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	1cba      	adds	r2, r7, #2
 80094d4:	2144      	movs	r1, #68	@ 0x44
 80094d6:	8812      	ldrh	r2, [r2, #0]
 80094d8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	1cba      	adds	r2, r7, #2
 80094e4:	8812      	ldrh	r2, [r2, #0]
 80094e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	1cba      	adds	r2, r7, #2
 80094ec:	8812      	ldrh	r2, [r2, #0]
 80094ee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	23e0      	movs	r3, #224	@ 0xe0
 8009502:	00db      	lsls	r3, r3, #3
 8009504:	429a      	cmp	r2, r3
 8009506:	d908      	bls.n	800951a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	49ac      	ldr	r1, [pc, #688]	@ (80097c4 <HAL_SPI_TransmitReceive+0x3c0>)
 8009514:	400a      	ands	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
 8009518:	e008      	b.n	800952c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2180      	movs	r1, #128	@ 0x80
 8009526:	0149      	lsls	r1, r1, #5
 8009528:	430a      	orrs	r2, r1
 800952a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2240      	movs	r2, #64	@ 0x40
 8009534:	4013      	ands	r3, r2
 8009536:	2b40      	cmp	r3, #64	@ 0x40
 8009538:	d007      	beq.n	800954a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2140      	movs	r1, #64	@ 0x40
 8009546:	430a      	orrs	r2, r1
 8009548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	23e0      	movs	r3, #224	@ 0xe0
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	429a      	cmp	r2, r3
 8009554:	d800      	bhi.n	8009558 <HAL_SPI_TransmitReceive+0x154>
 8009556:	e083      	b.n	8009660 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d005      	beq.n	800956c <HAL_SPI_TransmitReceive+0x168>
 8009560:	2312      	movs	r3, #18
 8009562:	18fb      	adds	r3, r7, r3
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d000      	beq.n	800956c <HAL_SPI_TransmitReceive+0x168>
 800956a:	e06d      	b.n	8009648 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009570:	881a      	ldrh	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957c:	1c9a      	adds	r2, r3, #2
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009586:	b29b      	uxth	r3, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009590:	e05a      	b.n	8009648 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	2202      	movs	r2, #2
 800959a:	4013      	ands	r3, r2
 800959c:	2b02      	cmp	r3, #2
 800959e:	d11b      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x1d4>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d016      	beq.n	80095d8 <HAL_SPI_TransmitReceive+0x1d4>
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d113      	bne.n	80095d8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b4:	881a      	ldrh	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c0:	1c9a      	adds	r2, r3, #2
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2201      	movs	r2, #1
 80095e0:	4013      	ands	r3, r2
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d11c      	bne.n	8009620 <HAL_SPI_TransmitReceive+0x21c>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2246      	movs	r2, #70	@ 0x46
 80095ea:	5a9b      	ldrh	r3, [r3, r2]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d016      	beq.n	8009620 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095fc:	b292      	uxth	r2, r2
 80095fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009604:	1c9a      	adds	r2, r3, #2
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2246      	movs	r2, #70	@ 0x46
 800960e:	5a9b      	ldrh	r3, [r3, r2]
 8009610:	b29b      	uxth	r3, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	b299      	uxth	r1, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2246      	movs	r2, #70	@ 0x46
 800961a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800961c:	2301      	movs	r3, #1
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009620:	f7fb f860 	bl	80046e4 <HAL_GetTick>
 8009624:	0002      	movs	r2, r0
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800962c:	429a      	cmp	r2, r3
 800962e:	d80b      	bhi.n	8009648 <HAL_SPI_TransmitReceive+0x244>
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	3301      	adds	r3, #1
 8009634:	d008      	beq.n	8009648 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009636:	2323      	movs	r3, #35	@ 0x23
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	2203      	movs	r2, #3
 800963c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	225d      	movs	r2, #93	@ 0x5d
 8009642:	2101      	movs	r1, #1
 8009644:	5499      	strb	r1, [r3, r2]
        goto error;
 8009646:	e0b1      	b.n	80097ac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d19f      	bne.n	8009592 <HAL_SPI_TransmitReceive+0x18e>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2246      	movs	r2, #70	@ 0x46
 8009656:	5a9b      	ldrh	r3, [r3, r2]
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d199      	bne.n	8009592 <HAL_SPI_TransmitReceive+0x18e>
 800965e:	e089      	b.n	8009774 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_SPI_TransmitReceive+0x270>
 8009668:	2312      	movs	r3, #18
 800966a:	18fb      	adds	r3, r7, r3
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d000      	beq.n	8009674 <HAL_SPI_TransmitReceive+0x270>
 8009672:	e074      	b.n	800975e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	330c      	adds	r3, #12
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800969a:	e060      	b.n	800975e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	2202      	movs	r2, #2
 80096a4:	4013      	ands	r3, r2
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d11c      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x2e0>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d017      	beq.n	80096e4 <HAL_SPI_TransmitReceive+0x2e0>
 80096b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d114      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	330c      	adds	r3, #12
 80096c4:	7812      	ldrb	r2, [r2, #0]
 80096c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2201      	movs	r2, #1
 80096ec:	4013      	ands	r3, r2
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d11e      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x32c>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2246      	movs	r2, #70	@ 0x46
 80096f6:	5a9b      	ldrh	r3, [r3, r2]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d018      	beq.n	8009730 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	330c      	adds	r3, #12
 8009704:	001a      	movs	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800970a:	7812      	ldrb	r2, [r2, #0]
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2246      	movs	r2, #70	@ 0x46
 800971e:	5a9b      	ldrh	r3, [r3, r2]
 8009720:	b29b      	uxth	r3, r3
 8009722:	3b01      	subs	r3, #1
 8009724:	b299      	uxth	r1, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2246      	movs	r2, #70	@ 0x46
 800972a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009730:	f7fa ffd8 	bl	80046e4 <HAL_GetTick>
 8009734:	0002      	movs	r2, r0
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973c:	429a      	cmp	r2, r3
 800973e:	d802      	bhi.n	8009746 <HAL_SPI_TransmitReceive+0x342>
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	3301      	adds	r3, #1
 8009744:	d102      	bne.n	800974c <HAL_SPI_TransmitReceive+0x348>
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	2b00      	cmp	r3, #0
 800974a:	d108      	bne.n	800975e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800974c:	2323      	movs	r3, #35	@ 0x23
 800974e:	18fb      	adds	r3, r7, r3
 8009750:	2203      	movs	r2, #3
 8009752:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	225d      	movs	r2, #93	@ 0x5d
 8009758:	2101      	movs	r1, #1
 800975a:	5499      	strb	r1, [r3, r2]
        goto error;
 800975c:	e026      	b.n	80097ac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d199      	bne.n	800969c <HAL_SPI_TransmitReceive+0x298>
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2246      	movs	r2, #70	@ 0x46
 800976c:	5a9b      	ldrh	r3, [r3, r2]
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d193      	bne.n	800969c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009774:	69fa      	ldr	r2, [r7, #28]
 8009776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	0018      	movs	r0, r3
 800977c:	f000 f954 	bl	8009a28 <SPI_EndRxTxTransaction>
 8009780:	1e03      	subs	r3, r0, #0
 8009782:	d006      	beq.n	8009792 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009784:	2323      	movs	r3, #35	@ 0x23
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	2201      	movs	r2, #1
 800978a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800979a:	2323      	movs	r3, #35	@ 0x23
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2201      	movs	r2, #1
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	e003      	b.n	80097ac <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	225d      	movs	r2, #93	@ 0x5d
 80097a8:	2101      	movs	r1, #1
 80097aa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	225c      	movs	r2, #92	@ 0x5c
 80097b0:	2100      	movs	r1, #0
 80097b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80097b4:	2323      	movs	r3, #35	@ 0x23
 80097b6:	18fb      	adds	r3, r7, r3
 80097b8:	781b      	ldrb	r3, [r3, #0]
}
 80097ba:	0018      	movs	r0, r3
 80097bc:	46bd      	mov	sp, r7
 80097be:	b00a      	add	sp, #40	@ 0x28
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	ffffefff 	.word	0xffffefff

080097c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	1dfb      	adds	r3, r7, #7
 80097d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097d8:	f7fa ff84 	bl	80046e4 <HAL_GetTick>
 80097dc:	0002      	movs	r2, r0
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	1a9b      	subs	r3, r3, r2
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	18d3      	adds	r3, r2, r3
 80097e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097e8:	f7fa ff7c 	bl	80046e4 <HAL_GetTick>
 80097ec:	0003      	movs	r3, r0
 80097ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097f0:	4b3a      	ldr	r3, [pc, #232]	@ (80098dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	015b      	lsls	r3, r3, #5
 80097f6:	0d1b      	lsrs	r3, r3, #20
 80097f8:	69fa      	ldr	r2, [r7, #28]
 80097fa:	4353      	muls	r3, r2
 80097fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097fe:	e058      	b.n	80098b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	d055      	beq.n	80098b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009806:	f7fa ff6d 	bl	80046e4 <HAL_GetTick>
 800980a:	0002      	movs	r2, r0
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	69fa      	ldr	r2, [r7, #28]
 8009812:	429a      	cmp	r2, r3
 8009814:	d902      	bls.n	800981c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d142      	bne.n	80098a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	21e0      	movs	r1, #224	@ 0xe0
 8009828:	438a      	bics	r2, r1
 800982a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	2382      	movs	r3, #130	@ 0x82
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	429a      	cmp	r2, r3
 8009836:	d113      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	2380      	movs	r3, #128	@ 0x80
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	429a      	cmp	r2, r3
 8009842:	d005      	beq.n	8009850 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	429a      	cmp	r2, r3
 800984e:	d107      	bne.n	8009860 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2140      	movs	r1, #64	@ 0x40
 800985c:	438a      	bics	r2, r1
 800985e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009864:	2380      	movs	r3, #128	@ 0x80
 8009866:	019b      	lsls	r3, r3, #6
 8009868:	429a      	cmp	r2, r3
 800986a:	d110      	bne.n	800988e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	491a      	ldr	r1, [pc, #104]	@ (80098e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009878:	400a      	ands	r2, r1
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2180      	movs	r1, #128	@ 0x80
 8009888:	0189      	lsls	r1, r1, #6
 800988a:	430a      	orrs	r2, r1
 800988c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	225d      	movs	r2, #93	@ 0x5d
 8009892:	2101      	movs	r1, #1
 8009894:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	225c      	movs	r2, #92	@ 0x5c
 800989a:	2100      	movs	r1, #0
 800989c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e017      	b.n	80098d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	3b01      	subs	r3, #1
 80098b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	425a      	negs	r2, r3
 80098c2:	4153      	adcs	r3, r2
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	001a      	movs	r2, r3
 80098c8:	1dfb      	adds	r3, r7, #7
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d197      	bne.n	8009800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	0018      	movs	r0, r3
 80098d4:	46bd      	mov	sp, r7
 80098d6:	b008      	add	sp, #32
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	46c0      	nop			@ (mov r8, r8)
 80098dc:	20000090 	.word	0x20000090
 80098e0:	ffffdfff 	.word	0xffffdfff

080098e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	@ 0x28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098f2:	2317      	movs	r3, #23
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80098fa:	f7fa fef3 	bl	80046e4 <HAL_GetTick>
 80098fe:	0002      	movs	r2, r0
 8009900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	18d3      	adds	r3, r2, r3
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800990a:	f7fa feeb 	bl	80046e4 <HAL_GetTick>
 800990e:	0003      	movs	r3, r0
 8009910:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	330c      	adds	r3, #12
 8009918:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800991a:	4b41      	ldr	r3, [pc, #260]	@ (8009a20 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	0013      	movs	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	189b      	adds	r3, r3, r2
 8009924:	00da      	lsls	r2, r3, #3
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	0d1b      	lsrs	r3, r3, #20
 800992a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800992c:	4353      	muls	r3, r2
 800992e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009930:	e068      	b.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	23c0      	movs	r3, #192	@ 0xc0
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	429a      	cmp	r2, r3
 800993a:	d10a      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d107      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	2117      	movs	r1, #23
 800994a:	187b      	adds	r3, r7, r1
 800994c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800994e:	187b      	adds	r3, r7, r1
 8009950:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	d055      	beq.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009958:	f7fa fec4 	bl	80046e4 <HAL_GetTick>
 800995c:	0002      	movs	r2, r0
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009964:	429a      	cmp	r2, r3
 8009966:	d902      	bls.n	800996e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d142      	bne.n	80099f4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	21e0      	movs	r1, #224	@ 0xe0
 800997a:	438a      	bics	r2, r1
 800997c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	2382      	movs	r3, #130	@ 0x82
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	429a      	cmp	r2, r3
 8009988:	d113      	bne.n	80099b2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689a      	ldr	r2, [r3, #8]
 800998e:	2380      	movs	r3, #128	@ 0x80
 8009990:	021b      	lsls	r3, r3, #8
 8009992:	429a      	cmp	r2, r3
 8009994:	d005      	beq.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	2380      	movs	r3, #128	@ 0x80
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	429a      	cmp	r2, r3
 80099a0:	d107      	bne.n	80099b2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2140      	movs	r1, #64	@ 0x40
 80099ae:	438a      	bics	r2, r1
 80099b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099b6:	2380      	movs	r3, #128	@ 0x80
 80099b8:	019b      	lsls	r3, r3, #6
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d110      	bne.n	80099e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4916      	ldr	r1, [pc, #88]	@ (8009a24 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80099ca:	400a      	ands	r2, r1
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2180      	movs	r1, #128	@ 0x80
 80099da:	0189      	lsls	r1, r1, #6
 80099dc:	430a      	orrs	r2, r1
 80099de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	225d      	movs	r2, #93	@ 0x5d
 80099e4:	2101      	movs	r1, #1
 80099e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	225c      	movs	r2, #92	@ 0x5c
 80099ec:	2100      	movs	r1, #0
 80099ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e010      	b.n	8009a16 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	3b01      	subs	r3, #1
 8009a02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d18e      	bne.n	8009932 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	0018      	movs	r0, r3
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b00a      	add	sp, #40	@ 0x28
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	46c0      	nop			@ (mov r8, r8)
 8009a20:	20000090 	.word	0x20000090
 8009a24:	ffffdfff 	.word	0xffffdfff

08009a28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	23c0      	movs	r3, #192	@ 0xc0
 8009a38:	0159      	lsls	r1, r3, #5
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	0013      	movs	r3, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	f7ff ff4e 	bl	80098e4 <SPI_WaitFifoStateUntilTimeout>
 8009a48:	1e03      	subs	r3, r0, #0
 8009a4a:	d007      	beq.n	8009a5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a50:	2220      	movs	r2, #32
 8009a52:	431a      	orrs	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e027      	b.n	8009aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	0013      	movs	r3, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	2180      	movs	r1, #128	@ 0x80
 8009a6a:	f7ff fead 	bl	80097c8 <SPI_WaitFlagStateUntilTimeout>
 8009a6e:	1e03      	subs	r3, r0, #0
 8009a70:	d007      	beq.n	8009a82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a76:	2220      	movs	r2, #32
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e014      	b.n	8009aac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	23c0      	movs	r3, #192	@ 0xc0
 8009a86:	00d9      	lsls	r1, r3, #3
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	0013      	movs	r3, r2
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7ff ff27 	bl	80098e4 <SPI_WaitFifoStateUntilTimeout>
 8009a96:	1e03      	subs	r3, r0, #0
 8009a98:	d007      	beq.n	8009aaa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a9e:	2220      	movs	r2, #32
 8009aa0:	431a      	orrs	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e000      	b.n	8009aac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	0018      	movs	r0, r3
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	b004      	add	sp, #16
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e04a      	b.n	8009b5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	223d      	movs	r2, #61	@ 0x3d
 8009aca:	5c9b      	ldrb	r3, [r3, r2]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d107      	bne.n	8009ae2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	223c      	movs	r2, #60	@ 0x3c
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	0018      	movs	r0, r3
 8009ade:	f7fa fa9b 	bl	8004018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	223d      	movs	r2, #61	@ 0x3d
 8009ae6:	2102      	movs	r1, #2
 8009ae8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3304      	adds	r3, #4
 8009af2:	0019      	movs	r1, r3
 8009af4:	0010      	movs	r0, r2
 8009af6:	f000 f9e7 	bl	8009ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2248      	movs	r2, #72	@ 0x48
 8009afe:	2101      	movs	r1, #1
 8009b00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	223e      	movs	r2, #62	@ 0x3e
 8009b06:	2101      	movs	r1, #1
 8009b08:	5499      	strb	r1, [r3, r2]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	223f      	movs	r2, #63	@ 0x3f
 8009b0e:	2101      	movs	r1, #1
 8009b10:	5499      	strb	r1, [r3, r2]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2240      	movs	r2, #64	@ 0x40
 8009b16:	2101      	movs	r1, #1
 8009b18:	5499      	strb	r1, [r3, r2]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2241      	movs	r2, #65	@ 0x41
 8009b1e:	2101      	movs	r1, #1
 8009b20:	5499      	strb	r1, [r3, r2]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2242      	movs	r2, #66	@ 0x42
 8009b26:	2101      	movs	r1, #1
 8009b28:	5499      	strb	r1, [r3, r2]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2243      	movs	r2, #67	@ 0x43
 8009b2e:	2101      	movs	r1, #1
 8009b30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2244      	movs	r2, #68	@ 0x44
 8009b36:	2101      	movs	r1, #1
 8009b38:	5499      	strb	r1, [r3, r2]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2245      	movs	r2, #69	@ 0x45
 8009b3e:	2101      	movs	r1, #1
 8009b40:	5499      	strb	r1, [r3, r2]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2246      	movs	r2, #70	@ 0x46
 8009b46:	2101      	movs	r1, #1
 8009b48:	5499      	strb	r1, [r3, r2]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2247      	movs	r2, #71	@ 0x47
 8009b4e:	2101      	movs	r1, #1
 8009b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	223d      	movs	r2, #61	@ 0x3d
 8009b56:	2101      	movs	r1, #1
 8009b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	b002      	add	sp, #8
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	223d      	movs	r2, #61	@ 0x3d
 8009b70:	5c9b      	ldrb	r3, [r3, r2]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d001      	beq.n	8009b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e041      	b.n	8009c00 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	223d      	movs	r2, #61	@ 0x3d
 8009b80:	2102      	movs	r1, #2
 8009b82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2101      	movs	r1, #1
 8009b90:	430a      	orrs	r2, r1
 8009b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1b      	ldr	r2, [pc, #108]	@ (8009c08 <HAL_TIM_Base_Start_IT+0xa4>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00e      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x58>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8009c0c <HAL_TIM_Base_Start_IT+0xa8>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x58>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a18      	ldr	r2, [pc, #96]	@ (8009c10 <HAL_TIM_Base_Start_IT+0xac>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d004      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x58>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a17      	ldr	r2, [pc, #92]	@ (8009c14 <HAL_TIM_Base_Start_IT+0xb0>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d116      	bne.n	8009bea <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4a15      	ldr	r2, [pc, #84]	@ (8009c18 <HAL_TIM_Base_Start_IT+0xb4>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	d016      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x98>
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	2380      	movs	r3, #128	@ 0x80
 8009bd2:	025b      	lsls	r3, r3, #9
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d011      	beq.n	8009bfc <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2101      	movs	r1, #1
 8009be4:	430a      	orrs	r2, r1
 8009be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be8:	e008      	b.n	8009bfc <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e000      	b.n	8009bfe <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	0018      	movs	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	b004      	add	sp, #16
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	40012c00 	.word	0x40012c00
 8009c0c:	40000400 	.word	0x40000400
 8009c10:	40000800 	.word	0x40000800
 8009c14:	40014000 	.word	0x40014000
 8009c18:	00010007 	.word	0x00010007

08009c1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2101      	movs	r1, #1
 8009c30:	438a      	bics	r2, r1
 8009c32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009c70 <HAL_TIM_Base_Stop_IT+0x54>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d10d      	bne.n	8009c5c <HAL_TIM_Base_Stop_IT+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	4a0b      	ldr	r2, [pc, #44]	@ (8009c74 <HAL_TIM_Base_Stop_IT+0x58>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d107      	bne.n	8009c5c <HAL_TIM_Base_Stop_IT+0x40>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2101      	movs	r1, #1
 8009c58:	438a      	bics	r2, r1
 8009c5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	223d      	movs	r2, #61	@ 0x3d
 8009c60:	2101      	movs	r1, #1
 8009c62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	0018      	movs	r0, r3
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	b002      	add	sp, #8
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	46c0      	nop			@ (mov r8, r8)
 8009c70:	00001111 	.word	0x00001111
 8009c74:	00000444 	.word	0x00000444

08009c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2202      	movs	r2, #2
 8009c94:	4013      	ands	r3, r2
 8009c96:	d021      	beq.n	8009cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	d01d      	beq.n	8009cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	4252      	negs	r2, r2
 8009ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	4013      	ands	r3, r2
 8009cba:	d004      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	f000 f8ea 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009cc4:	e007      	b.n	8009cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	0018      	movs	r0, r3
 8009cca:	f000 f8dd 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f000 f8e9 	bl	8009ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2204      	movs	r2, #4
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d022      	beq.n	8009d2a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d01e      	beq.n	8009d2a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2205      	movs	r2, #5
 8009cf2:	4252      	negs	r2, r2
 8009cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	23c0      	movs	r3, #192	@ 0xc0
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	4013      	ands	r3, r2
 8009d08:	d004      	beq.n	8009d14 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f000 f8c3 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009d12:	e007      	b.n	8009d24 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 f8b6 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f000 f8c2 	bl	8009ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	4013      	ands	r3, r2
 8009d30:	d021      	beq.n	8009d76 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2208      	movs	r2, #8
 8009d36:	4013      	ands	r3, r2
 8009d38:	d01d      	beq.n	8009d76 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2209      	movs	r2, #9
 8009d40:	4252      	negs	r2, r2
 8009d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2204      	movs	r2, #4
 8009d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	2203      	movs	r2, #3
 8009d52:	4013      	ands	r3, r2
 8009d54:	d004      	beq.n	8009d60 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f000 f89d 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009d5e:	e007      	b.n	8009d70 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	0018      	movs	r0, r3
 8009d64:	f000 f890 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f000 f89c 	bl	8009ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2210      	movs	r2, #16
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	d022      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2210      	movs	r2, #16
 8009d82:	4013      	ands	r3, r2
 8009d84:	d01e      	beq.n	8009dc4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2211      	movs	r2, #17
 8009d8c:	4252      	negs	r2, r2
 8009d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2208      	movs	r2, #8
 8009d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	69da      	ldr	r2, [r3, #28]
 8009d9c:	23c0      	movs	r3, #192	@ 0xc0
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4013      	ands	r3, r2
 8009da2:	d004      	beq.n	8009dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	0018      	movs	r0, r3
 8009da8:	f000 f876 	bl	8009e98 <HAL_TIM_IC_CaptureCallback>
 8009dac:	e007      	b.n	8009dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	0018      	movs	r0, r3
 8009db2:	f000 f869 	bl	8009e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	0018      	movs	r0, r3
 8009dba:	f000 f875 	bl	8009ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d00c      	beq.n	8009de6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	d008      	beq.n	8009de6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	4252      	negs	r2, r2
 8009ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	0018      	movs	r0, r3
 8009de2:	f7f9 fc93 	bl	800370c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2280      	movs	r2, #128	@ 0x80
 8009dea:	4013      	ands	r3, r2
 8009dec:	d104      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	2380      	movs	r3, #128	@ 0x80
 8009df2:	019b      	lsls	r3, r3, #6
 8009df4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009df6:	d00b      	beq.n	8009e10 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2280      	movs	r2, #128	@ 0x80
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d007      	beq.n	8009e10 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a1e      	ldr	r2, [pc, #120]	@ (8009e80 <HAL_TIM_IRQHandler+0x208>)
 8009e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f000 f962 	bl	800a0d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	2380      	movs	r3, #128	@ 0x80
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	4013      	ands	r3, r2
 8009e18:	d00b      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2280      	movs	r2, #128	@ 0x80
 8009e1e:	4013      	ands	r3, r2
 8009e20:	d007      	beq.n	8009e32 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a17      	ldr	r2, [pc, #92]	@ (8009e84 <HAL_TIM_IRQHandler+0x20c>)
 8009e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f000 f959 	bl	800a0e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2240      	movs	r2, #64	@ 0x40
 8009e36:	4013      	ands	r3, r2
 8009e38:	d00c      	beq.n	8009e54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2240      	movs	r2, #64	@ 0x40
 8009e3e:	4013      	ands	r3, r2
 8009e40:	d008      	beq.n	8009e54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2241      	movs	r2, #65	@ 0x41
 8009e48:	4252      	negs	r2, r2
 8009e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f000 f832 	bl	8009eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2220      	movs	r2, #32
 8009e58:	4013      	ands	r3, r2
 8009e5a:	d00c      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	4013      	ands	r3, r2
 8009e62:	d008      	beq.n	8009e76 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2221      	movs	r2, #33	@ 0x21
 8009e6a:	4252      	negs	r2, r2
 8009e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	0018      	movs	r0, r3
 8009e72:	f000 f927 	bl	800a0c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e76:	46c0      	nop			@ (mov r8, r8)
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b004      	add	sp, #16
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	46c0      	nop			@ (mov r8, r8)
 8009e80:	ffffdf7f 	.word	0xffffdf7f
 8009e84:	fffffeff 	.word	0xfffffeff

08009e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e90:	46c0      	nop			@ (mov r8, r8)
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b002      	add	sp, #8
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ea0:	46c0      	nop			@ (mov r8, r8)
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	b002      	add	sp, #8
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eb0:	46c0      	nop			@ (mov r8, r8)
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	b002      	add	sp, #8
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ec0:	46c0      	nop			@ (mov r8, r8)
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b002      	add	sp, #8
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3a      	ldr	r2, [pc, #232]	@ (8009fc4 <TIM_Base_SetConfig+0xfc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_Base_SetConfig+0x28>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a39      	ldr	r2, [pc, #228]	@ (8009fc8 <TIM_Base_SetConfig+0x100>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0x28>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a38      	ldr	r2, [pc, #224]	@ (8009fcc <TIM_Base_SetConfig+0x104>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d108      	bne.n	8009f02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2270      	movs	r2, #112	@ 0x70
 8009ef4:	4393      	bics	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a2f      	ldr	r2, [pc, #188]	@ (8009fc4 <TIM_Base_SetConfig+0xfc>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d017      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8009fc8 <TIM_Base_SetConfig+0x100>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d013      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2d      	ldr	r2, [pc, #180]	@ (8009fcc <TIM_Base_SetConfig+0x104>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00f      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8009fd0 <TIM_Base_SetConfig+0x108>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00b      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2b      	ldr	r2, [pc, #172]	@ (8009fd4 <TIM_Base_SetConfig+0x10c>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d007      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8009fd8 <TIM_Base_SetConfig+0x110>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_Base_SetConfig+0x72>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a29      	ldr	r2, [pc, #164]	@ (8009fdc <TIM_Base_SetConfig+0x114>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d108      	bne.n	8009f4c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4a28      	ldr	r2, [pc, #160]	@ (8009fe0 <TIM_Base_SetConfig+0x118>)
 8009f3e:	4013      	ands	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2280      	movs	r2, #128	@ 0x80
 8009f50:	4393      	bics	r3, r2
 8009f52:	001a      	movs	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	689a      	ldr	r2, [r3, #8]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a13      	ldr	r2, [pc, #76]	@ (8009fc4 <TIM_Base_SetConfig+0xfc>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00b      	beq.n	8009f92 <TIM_Base_SetConfig+0xca>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <TIM_Base_SetConfig+0x10c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d007      	beq.n	8009f92 <TIM_Base_SetConfig+0xca>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a14      	ldr	r2, [pc, #80]	@ (8009fd8 <TIM_Base_SetConfig+0x110>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d003      	beq.n	8009f92 <TIM_Base_SetConfig+0xca>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a13      	ldr	r2, [pc, #76]	@ (8009fdc <TIM_Base_SetConfig+0x114>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d103      	bne.n	8009f9a <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d106      	bne.n	8009fba <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	4393      	bics	r3, r2
 8009fb4:	001a      	movs	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	611a      	str	r2, [r3, #16]
  }
}
 8009fba:	46c0      	nop			@ (mov r8, r8)
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	46c0      	nop			@ (mov r8, r8)
 8009fc4:	40012c00 	.word	0x40012c00
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800
 8009fd0:	40002000 	.word	0x40002000
 8009fd4:	40014000 	.word	0x40014000
 8009fd8:	40014400 	.word	0x40014400
 8009fdc:	40014800 	.word	0x40014800
 8009fe0:	fffffcff 	.word	0xfffffcff

08009fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	223c      	movs	r2, #60	@ 0x3c
 8009ff2:	5c9b      	ldrb	r3, [r3, r2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d101      	bne.n	8009ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	e054      	b.n	800a0a6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	223c      	movs	r2, #60	@ 0x3c
 800a000:	2101      	movs	r1, #1
 800a002:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	223d      	movs	r2, #61	@ 0x3d
 800a008:	2102      	movs	r1, #2
 800a00a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a23      	ldr	r2, [pc, #140]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d108      	bne.n	800a038 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4a22      	ldr	r2, [pc, #136]	@ (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a02a:	4013      	ands	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4313      	orrs	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2270      	movs	r2, #112	@ 0x70
 800a03c:	4393      	bics	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a16      	ldr	r2, [pc, #88]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00e      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a15      	ldr	r2, [pc, #84]	@ (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d009      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a14      	ldr	r2, [pc, #80]	@ (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d004      	beq.n	800a07a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a12      	ldr	r2, [pc, #72]	@ (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d10c      	bne.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2280      	movs	r2, #128	@ 0x80
 800a07e:	4393      	bics	r3, r2
 800a080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4313      	orrs	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	223d      	movs	r2, #61	@ 0x3d
 800a098:	2101      	movs	r1, #1
 800a09a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	223c      	movs	r2, #60	@ 0x3c
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b004      	add	sp, #16
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	46c0      	nop			@ (mov r8, r8)
 800a0b0:	40012c00 	.word	0x40012c00
 800a0b4:	ff0fffff 	.word	0xff0fffff
 800a0b8:	40000400 	.word	0x40000400
 800a0bc:	40000800 	.word	0x40000800
 800a0c0:	40014000 	.word	0x40014000

0800a0c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0cc:	46c0      	nop			@ (mov r8, r8)
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b002      	add	sp, #8
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0dc:	46c0      	nop			@ (mov r8, r8)
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	b002      	add	sp, #8
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0ec:	46c0      	nop			@ (mov r8, r8)
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	b002      	add	sp, #8
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a102:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <USB_EnableGlobalInt+0x24>)
 800a104:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b004      	add	sp, #16
 800a114:	bd80      	pop	{r7, pc}
 800a116:	46c0      	nop			@ (mov r8, r8)
 800a118:	0000bf80 	.word	0x0000bf80

0800a11c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a124:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <USB_DisableGlobalInt+0x24>)
 800a126:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	43d2      	mvns	r2, r2
 800a130:	401a      	ands	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b004      	add	sp, #16
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	0000bf80 	.word	0x0000bf80

0800a144 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	000a      	movs	r2, r1
 800a14e:	1cfb      	adds	r3, r7, #3
 800a150:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800a152:	1cfb      	adds	r3, r7, #3
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d106      	bne.n	800a168 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	085a      	lsrs	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	641a      	str	r2, [r3, #64]	@ 0x40
 800a166:	e00d      	b.n	800a184 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800a168:	1cfb      	adds	r3, r7, #3
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d107      	bne.n	800a180 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a174:	2280      	movs	r2, #128	@ 0x80
 800a176:	0612      	lsls	r2, r2, #24
 800a178:	431a      	orrs	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	641a      	str	r2, [r3, #64]	@ 0x40
 800a17e:	e001      	b.n	800a184 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b002      	add	sp, #8
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a18e:	b084      	sub	sp, #16
 800a190:	b5b0      	push	{r4, r5, r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	2004      	movs	r0, #4
 800a19a:	2420      	movs	r4, #32
 800a19c:	1900      	adds	r0, r0, r4
 800a19e:	19c0      	adds	r0, r0, r7
 800a1a0:	6001      	str	r1, [r0, #0]
 800a1a2:	6042      	str	r2, [r0, #4]
 800a1a4:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	4393      	bics	r3, r2
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800a1ba:	250f      	movs	r5, #15
 800a1bc:	197c      	adds	r4, r7, r5
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7ff ffbe 	bl	800a144 <USB_SetCurrentMode>
 800a1c8:	0003      	movs	r3, r0
 800a1ca:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800a1d2:	197b      	adds	r3, r7, r5
 800a1d4:	781b      	ldrb	r3, [r3, #0]
}
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	b004      	add	sp, #16
 800a1dc:	bcb0      	pop	{r4, r5, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	b004      	add	sp, #16
 800a1e2:	4718      	bx	r3

0800a1e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b09e      	sub	sp, #120	@ 0x78
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1ee:	2377      	movs	r3, #119	@ 0x77
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	18d3      	adds	r3, r2, r3
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4adc      	ldr	r2, [pc, #880]	@ (800a574 <USB_ActivateEndpoint+0x390>)
 800a204:	4013      	ands	r3, r2
 800a206:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	78db      	ldrb	r3, [r3, #3]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d00e      	beq.n	800a22e <USB_ActivateEndpoint+0x4a>
 800a210:	dc19      	bgt.n	800a246 <USB_ActivateEndpoint+0x62>
 800a212:	2b02      	cmp	r3, #2
 800a214:	d01c      	beq.n	800a250 <USB_ActivateEndpoint+0x6c>
 800a216:	dc16      	bgt.n	800a246 <USB_ActivateEndpoint+0x62>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <USB_ActivateEndpoint+0x3e>
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d00c      	beq.n	800a23a <USB_ActivateEndpoint+0x56>
 800a220:	e011      	b.n	800a246 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a224:	2280      	movs	r2, #128	@ 0x80
 800a226:	0092      	lsls	r2, r2, #2
 800a228:	4313      	orrs	r3, r2
 800a22a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800a22c:	e011      	b.n	800a252 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a22e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a230:	22c0      	movs	r2, #192	@ 0xc0
 800a232:	00d2      	lsls	r2, r2, #3
 800a234:	4313      	orrs	r3, r2
 800a236:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800a238:	e00b      	b.n	800a252 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a23a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a23c:	2280      	movs	r2, #128	@ 0x80
 800a23e:	00d2      	lsls	r2, r2, #3
 800a240:	4313      	orrs	r3, r2
 800a242:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800a244:	e005      	b.n	800a252 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800a246:	2377      	movs	r3, #119	@ 0x77
 800a248:	18fb      	adds	r3, r7, r3
 800a24a:	2201      	movs	r2, #1
 800a24c:	701a      	strb	r2, [r3, #0]
      break;
 800a24e:	e000      	b.n	800a252 <USB_ActivateEndpoint+0x6e>
      break;
 800a250:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	18d3      	adds	r3, r2, r3
 800a25c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a25e:	49c6      	ldr	r1, [pc, #792]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4ac2      	ldr	r2, [pc, #776]	@ (800a57c <USB_ActivateEndpoint+0x398>)
 800a272:	4013      	ands	r3, r2
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	7812      	ldrb	r2, [r2, #0]
 800a278:	4313      	orrs	r3, r2
 800a27a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	18d3      	adds	r3, r2, r3
 800a286:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a288:	49bb      	ldr	r1, [pc, #748]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a28a:	430a      	orrs	r2, r1
 800a28c:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	7b1b      	ldrb	r3, [r3, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d000      	beq.n	800a298 <USB_ActivateEndpoint+0xb4>
 800a296:	e155      	b.n	800a544 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d06e      	beq.n	800a37e <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4ab6      	ldr	r2, [pc, #728]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a2a8:	4694      	mov	ip, r2
 800a2aa:	4463      	add	r3, ip
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	49b2      	ldr	r1, [pc, #712]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a2b6:	468c      	mov	ip, r1
 800a2b8:	4463      	add	r3, ip
 800a2ba:	0c12      	lsrs	r2, r2, #16
 800a2bc:	0412      	lsls	r2, r2, #16
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4aae      	ldr	r2, [pc, #696]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a2c8:	4694      	mov	ip, r2
 800a2ca:	4463      	add	r3, ip
 800a2cc:	6819      	ldr	r1, [r3, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88db      	ldrh	r3, [r3, #6]
 800a2d2:	089b      	lsrs	r3, r3, #2
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	009a      	lsls	r2, r3, #2
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	48a8      	ldr	r0, [pc, #672]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a2e0:	4684      	mov	ip, r0
 800a2e2:	4463      	add	r3, ip
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	18d3      	adds	r3, r2, r3
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2240      	movs	r2, #64	@ 0x40
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d011      	beq.n	800a322 <USB_ActivateEndpoint+0x13e>
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	18d3      	adds	r3, r2, r3
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a9c      	ldr	r2, [pc, #624]	@ (800a57c <USB_ActivateEndpoint+0x398>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	18d3      	adds	r3, r2, r3
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	4999      	ldr	r1, [pc, #612]	@ (800a584 <USB_ActivateEndpoint+0x3a0>)
 800a31e:	430a      	orrs	r2, r1
 800a320:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	78db      	ldrb	r3, [r3, #3]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d016      	beq.n	800a358 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	18d3      	adds	r3, r2, r3
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a94      	ldr	r2, [pc, #592]	@ (800a588 <USB_ActivateEndpoint+0x3a4>)
 800a338:	4013      	ands	r3, r2
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2220      	movs	r2, #32
 800a340:	4053      	eors	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4989      	ldr	r1, [pc, #548]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a352:	430a      	orrs	r2, r1
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	e261      	b.n	800a81c <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	18d3      	adds	r3, r2, r3
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a88      	ldr	r2, [pc, #544]	@ (800a588 <USB_ActivateEndpoint+0x3a4>)
 800a366:	4013      	ands	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	18d3      	adds	r3, r2, r3
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4980      	ldr	r1, [pc, #512]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a378:	430a      	orrs	r2, r1
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e24e      	b.n	800a81c <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	4a7e      	ldr	r2, [pc, #504]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a386:	4694      	mov	ip, r2
 800a388:	4463      	add	r3, ip
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	497b      	ldr	r1, [pc, #492]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a394:	468c      	mov	ip, r1
 800a396:	4463      	add	r3, ip
 800a398:	0c12      	lsrs	r2, r2, #16
 800a39a:	0412      	lsls	r2, r2, #16
 800a39c:	605a      	str	r2, [r3, #4]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	4a76      	ldr	r2, [pc, #472]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a3a6:	4694      	mov	ip, r2
 800a3a8:	4463      	add	r3, ip
 800a3aa:	6859      	ldr	r1, [r3, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88db      	ldrh	r3, [r3, #6]
 800a3b0:	089b      	lsrs	r3, r3, #2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	009a      	lsls	r2, r3, #2
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	00db      	lsls	r3, r3, #3
 800a3bc:	4870      	ldr	r0, [pc, #448]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a3be:	4684      	mov	ip, r0
 800a3c0:	4463      	add	r3, ip
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4a6c      	ldr	r2, [pc, #432]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a3ce:	4694      	mov	ip, r2
 800a3d0:	4463      	add	r3, ip
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	00db      	lsls	r3, r3, #3
 800a3da:	4969      	ldr	r1, [pc, #420]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a3dc:	468c      	mov	ip, r1
 800a3de:	4463      	add	r3, ip
 800a3e0:	0192      	lsls	r2, r2, #6
 800a3e2:	0992      	lsrs	r2, r2, #6
 800a3e4:	605a      	str	r2, [r3, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3ec:	d920      	bls.n	800a430 <USB_ActivateEndpoint+0x24c>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	095b      	lsrs	r3, r3, #5
 800a3f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	221f      	movs	r2, #31
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	d102      	bne.n	800a406 <USB_ActivateEndpoint+0x222>
 800a400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a402:	3b01      	subs	r3, #1
 800a404:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	4a5c      	ldr	r2, [pc, #368]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a40e:	4694      	mov	ip, r2
 800a410:	4463      	add	r3, ip
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a416:	069b      	lsls	r3, r3, #26
 800a418:	431a      	orrs	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	4957      	ldr	r1, [pc, #348]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a422:	468c      	mov	ip, r1
 800a424:	4463      	add	r3, ip
 800a426:	2180      	movs	r1, #128	@ 0x80
 800a428:	0609      	lsls	r1, r1, #24
 800a42a:	430a      	orrs	r2, r1
 800a42c:	605a      	str	r2, [r3, #4]
 800a42e:	e032      	b.n	800a496 <USB_ActivateEndpoint+0x2b2>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d111      	bne.n	800a45c <USB_ActivateEndpoint+0x278>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	4a50      	ldr	r2, [pc, #320]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a440:	4694      	mov	ip, r2
 800a442:	4463      	add	r3, ip
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	494c      	ldr	r1, [pc, #304]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a44e:	468c      	mov	ip, r1
 800a450:	4463      	add	r3, ip
 800a452:	2180      	movs	r1, #128	@ 0x80
 800a454:	0609      	lsls	r1, r1, #24
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
 800a45a:	e01c      	b.n	800a496 <USB_ActivateEndpoint+0x2b2>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	2201      	movs	r2, #1
 800a46a:	4013      	ands	r3, r2
 800a46c:	d002      	beq.n	800a474 <USB_ActivateEndpoint+0x290>
 800a46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a470:	3301      	adds	r3, #1
 800a472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	4a41      	ldr	r2, [pc, #260]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a47c:	4694      	mov	ip, r2
 800a47e:	4463      	add	r3, ip
 800a480:	6859      	ldr	r1, [r3, #4]
 800a482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a484:	069a      	lsls	r2, r3, #26
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	00db      	lsls	r3, r3, #3
 800a48c:	483c      	ldr	r0, [pc, #240]	@ (800a580 <USB_ActivateEndpoint+0x39c>)
 800a48e:	4684      	mov	ip, r0
 800a490:	4463      	add	r3, ip
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	18d3      	adds	r3, r2, r3
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4a6:	2380      	movs	r3, #128	@ 0x80
 800a4a8:	01db      	lsls	r3, r3, #7
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	d011      	beq.n	800a4d2 <USB_ActivateEndpoint+0x2ee>
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	18d3      	adds	r3, r2, r3
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a30      	ldr	r2, [pc, #192]	@ (800a57c <USB_ActivateEndpoint+0x398>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	18d3      	adds	r3, r2, r3
 800a4ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4cc:	492f      	ldr	r1, [pc, #188]	@ (800a58c <USB_ActivateEndpoint+0x3a8>)
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d11c      	bne.n	800a514 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	18d3      	adds	r3, r2, r3
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a590 <USB_ActivateEndpoint+0x3ac>)
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	61fb      	str	r3, [r7, #28]
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	2280      	movs	r2, #128	@ 0x80
 800a4f0:	0152      	lsls	r2, r2, #5
 800a4f2:	4053      	eors	r3, r2
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	2280      	movs	r2, #128	@ 0x80
 800a4fa:	0192      	lsls	r2, r2, #6
 800a4fc:	4053      	eors	r3, r2
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	18d3      	adds	r3, r2, r3
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	491a      	ldr	r1, [pc, #104]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a50e:	430a      	orrs	r2, r1
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	e183      	b.n	800a81c <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	18d3      	adds	r3, r2, r3
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a1b      	ldr	r2, [pc, #108]	@ (800a590 <USB_ActivateEndpoint+0x3ac>)
 800a522:	4013      	ands	r3, r2
 800a524:	623b      	str	r3, [r7, #32]
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	2280      	movs	r2, #128	@ 0x80
 800a52a:	0192      	lsls	r2, r2, #6
 800a52c:	4053      	eors	r3, r2
 800a52e:	623b      	str	r3, [r7, #32]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	18d3      	adds	r3, r2, r3
 800a53a:	6a3a      	ldr	r2, [r7, #32]
 800a53c:	490e      	ldr	r1, [pc, #56]	@ (800a578 <USB_ActivateEndpoint+0x394>)
 800a53e:	430a      	orrs	r2, r1
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	e16b      	b.n	800a81c <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	78db      	ldrb	r3, [r3, #3]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d125      	bne.n	800a598 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	18d3      	adds	r3, r2, r3
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a08      	ldr	r2, [pc, #32]	@ (800a57c <USB_ActivateEndpoint+0x398>)
 800a55a:	4013      	ands	r3, r2
 800a55c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	18d3      	adds	r3, r2, r3
 800a568:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a56a:	490a      	ldr	r1, [pc, #40]	@ (800a594 <USB_ActivateEndpoint+0x3b0>)
 800a56c:	430a      	orrs	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e024      	b.n	800a5bc <USB_ActivateEndpoint+0x3d8>
 800a572:	46c0      	nop			@ (mov r8, r8)
 800a574:	07ff898f 	.word	0x07ff898f
 800a578:	00008080 	.word	0x00008080
 800a57c:	07ff8f8f 	.word	0x07ff8f8f
 800a580:	40009800 	.word	0x40009800
 800a584:	000080c0 	.word	0x000080c0
 800a588:	07ff8fbf 	.word	0x07ff8fbf
 800a58c:	0000c080 	.word	0x0000c080
 800a590:	07ffbf8f 	.word	0x07ffbf8f
 800a594:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	18d3      	adds	r3, r2, r3
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4aa1      	ldr	r2, [pc, #644]	@ (800a82c <USB_ActivateEndpoint+0x648>)
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	18d3      	adds	r3, r2, r3
 800a5b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5b6:	499e      	ldr	r1, [pc, #632]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	4a9c      	ldr	r2, [pc, #624]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a5c4:	4694      	mov	ip, r2
 800a5c6:	4463      	add	r3, ip
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	4998      	ldr	r1, [pc, #608]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a5d2:	468c      	mov	ip, r1
 800a5d4:	4463      	add	r3, ip
 800a5d6:	0c12      	lsrs	r2, r2, #16
 800a5d8:	0412      	lsls	r2, r2, #16
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	00db      	lsls	r3, r3, #3
 800a5e2:	4a94      	ldr	r2, [pc, #592]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a5e4:	4694      	mov	ip, r2
 800a5e6:	4463      	add	r3, ip
 800a5e8:	6819      	ldr	r1, [r3, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	891b      	ldrh	r3, [r3, #8]
 800a5ee:	089b      	lsrs	r3, r3, #2
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	009a      	lsls	r2, r3, #2
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	488e      	ldr	r0, [pc, #568]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a5fc:	4684      	mov	ip, r0
 800a5fe:	4463      	add	r3, ip
 800a600:	430a      	orrs	r2, r1
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	4a8a      	ldr	r2, [pc, #552]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a60c:	4694      	mov	ip, r2
 800a60e:	4463      	add	r3, ip
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	4986      	ldr	r1, [pc, #536]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a61a:	468c      	mov	ip, r1
 800a61c:	4463      	add	r3, ip
 800a61e:	0c12      	lsrs	r2, r2, #16
 800a620:	0412      	lsls	r2, r2, #16
 800a622:	605a      	str	r2, [r3, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4a82      	ldr	r2, [pc, #520]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a62c:	4694      	mov	ip, r2
 800a62e:	4463      	add	r3, ip
 800a630:	6859      	ldr	r1, [r3, #4]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	895b      	ldrh	r3, [r3, #10]
 800a636:	089b      	lsrs	r3, r3, #2
 800a638:	b29b      	uxth	r3, r3
 800a63a:	009a      	lsls	r2, r3, #2
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	487c      	ldr	r0, [pc, #496]	@ (800a834 <USB_ActivateEndpoint+0x650>)
 800a644:	4684      	mov	ip, r0
 800a646:	4463      	add	r3, ip
 800a648:	430a      	orrs	r2, r1
 800a64a:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	785b      	ldrb	r3, [r3, #1]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d169      	bne.n	800a728 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	18d3      	adds	r3, r2, r3
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	643b      	str	r3, [r7, #64]	@ 0x40
 800a662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	01db      	lsls	r3, r3, #7
 800a668:	4013      	ands	r3, r2
 800a66a:	d011      	beq.n	800a690 <USB_ActivateEndpoint+0x4ac>
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	18d3      	adds	r3, r2, r3
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a6f      	ldr	r2, [pc, #444]	@ (800a838 <USB_ActivateEndpoint+0x654>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	18d3      	adds	r3, r2, r3
 800a688:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a68a:	496c      	ldr	r1, [pc, #432]	@ (800a83c <USB_ActivateEndpoint+0x658>)
 800a68c:	430a      	orrs	r2, r1
 800a68e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	18d3      	adds	r3, r2, r3
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a0:	2240      	movs	r2, #64	@ 0x40
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	d011      	beq.n	800a6ca <USB_ActivateEndpoint+0x4e6>
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	18d3      	adds	r3, r2, r3
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a61      	ldr	r2, [pc, #388]	@ (800a838 <USB_ActivateEndpoint+0x654>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	18d3      	adds	r3, r2, r3
 800a6c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6c4:	495e      	ldr	r1, [pc, #376]	@ (800a840 <USB_ActivateEndpoint+0x65c>)
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	18d3      	adds	r3, r2, r3
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a5b      	ldr	r2, [pc, #364]	@ (800a844 <USB_ActivateEndpoint+0x660>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6de:	2280      	movs	r2, #128	@ 0x80
 800a6e0:	0152      	lsls	r2, r2, #5
 800a6e2:	4053      	eors	r3, r2
 800a6e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	2280      	movs	r2, #128	@ 0x80
 800a6ea:	0192      	lsls	r2, r2, #6
 800a6ec:	4053      	eors	r3, r2
 800a6ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	18d3      	adds	r3, r2, r3
 800a6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6fc:	494c      	ldr	r1, [pc, #304]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a6fe:	430a      	orrs	r2, r1
 800a700:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	18d3      	adds	r3, r2, r3
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a4e      	ldr	r2, [pc, #312]	@ (800a848 <USB_ActivateEndpoint+0x664>)
 800a710:	4013      	ands	r3, r2
 800a712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	18d3      	adds	r3, r2, r3
 800a71e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a720:	4943      	ldr	r1, [pc, #268]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a722:	430a      	orrs	r2, r1
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	e079      	b.n	800a81c <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	18d3      	adds	r3, r2, r3
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a736:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a738:	2380      	movs	r3, #128	@ 0x80
 800a73a:	01db      	lsls	r3, r3, #7
 800a73c:	4013      	ands	r3, r2
 800a73e:	d011      	beq.n	800a764 <USB_ActivateEndpoint+0x580>
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	18d3      	adds	r3, r2, r3
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a3a      	ldr	r2, [pc, #232]	@ (800a838 <USB_ActivateEndpoint+0x654>)
 800a74e:	4013      	ands	r3, r2
 800a750:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	18d3      	adds	r3, r2, r3
 800a75c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a75e:	4937      	ldr	r1, [pc, #220]	@ (800a83c <USB_ActivateEndpoint+0x658>)
 800a760:	430a      	orrs	r2, r1
 800a762:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	18d3      	adds	r3, r2, r3
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	657b      	str	r3, [r7, #84]	@ 0x54
 800a772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a774:	2240      	movs	r2, #64	@ 0x40
 800a776:	4013      	ands	r3, r2
 800a778:	d011      	beq.n	800a79e <USB_ActivateEndpoint+0x5ba>
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a2c      	ldr	r2, [pc, #176]	@ (800a838 <USB_ActivateEndpoint+0x654>)
 800a788:	4013      	ands	r3, r2
 800a78a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	18d3      	adds	r3, r2, r3
 800a796:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a798:	4929      	ldr	r1, [pc, #164]	@ (800a840 <USB_ActivateEndpoint+0x65c>)
 800a79a:	430a      	orrs	r2, r1
 800a79c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	78db      	ldrb	r3, [r3, #3]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d016      	beq.n	800a7d4 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	18d3      	adds	r3, r2, r3
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a25      	ldr	r2, [pc, #148]	@ (800a848 <USB_ActivateEndpoint+0x664>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	4053      	eors	r3, r2
 800a7be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	18d3      	adds	r3, r2, r3
 800a7ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7cc:	4918      	ldr	r1, [pc, #96]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	e011      	b.n	800a7f8 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a19      	ldr	r2, [pc, #100]	@ (800a848 <USB_ActivateEndpoint+0x664>)
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	18d3      	adds	r3, r2, r3
 800a7f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7f2:	490f      	ldr	r1, [pc, #60]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	18d3      	adds	r3, r2, r3
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a0f      	ldr	r2, [pc, #60]	@ (800a844 <USB_ActivateEndpoint+0x660>)
 800a806:	4013      	ands	r3, r2
 800a808:	647b      	str	r3, [r7, #68]	@ 0x44
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	18d3      	adds	r3, r2, r3
 800a814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a816:	4906      	ldr	r1, [pc, #24]	@ (800a830 <USB_ActivateEndpoint+0x64c>)
 800a818:	430a      	orrs	r2, r1
 800a81a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a81c:	2377      	movs	r3, #119	@ 0x77
 800a81e:	18fb      	adds	r3, r7, r3
 800a820:	781b      	ldrb	r3, [r3, #0]
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	b01e      	add	sp, #120	@ 0x78
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	46c0      	nop			@ (mov r8, r8)
 800a82c:	07ff8e8f 	.word	0x07ff8e8f
 800a830:	00008080 	.word	0x00008080
 800a834:	40009800 	.word	0x40009800
 800a838:	07ff8f8f 	.word	0x07ff8f8f
 800a83c:	0000c080 	.word	0x0000c080
 800a840:	000080c0 	.word	0x000080c0
 800a844:	07ffbf8f 	.word	0x07ffbf8f
 800a848:	07ff8fbf 	.word	0x07ff8fbf

0800a84c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b096      	sub	sp, #88	@ 0x58
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	7b1b      	ldrb	r3, [r3, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d164      	bne.n	800a928 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d02f      	beq.n	800a8c6 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	18d3      	adds	r3, r2, r3
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2240      	movs	r2, #64	@ 0x40
 800a878:	4013      	ands	r3, r2
 800a87a:	d011      	beq.n	800a8a0 <USB_DeactivateEndpoint+0x54>
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	18d3      	adds	r3, r2, r3
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a9d      	ldr	r2, [pc, #628]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	18d3      	adds	r3, r2, r3
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	499a      	ldr	r1, [pc, #616]	@ (800ab04 <USB_DeactivateEndpoint+0x2b8>)
 800a89c:	430a      	orrs	r2, r1
 800a89e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	18d3      	adds	r3, r2, r3
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a96      	ldr	r2, [pc, #600]	@ (800ab08 <USB_DeactivateEndpoint+0x2bc>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	60bb      	str	r3, [r7, #8]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	18d3      	adds	r3, r2, r3
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	4993      	ldr	r1, [pc, #588]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	e117      	b.n	800aaf6 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	18d3      	adds	r3, r2, r3
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	69fa      	ldr	r2, [r7, #28]
 800a8d6:	2380      	movs	r3, #128	@ 0x80
 800a8d8:	01db      	lsls	r3, r3, #7
 800a8da:	4013      	ands	r3, r2
 800a8dc:	d011      	beq.n	800a902 <USB_DeactivateEndpoint+0xb6>
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	18d3      	adds	r3, r2, r3
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a85      	ldr	r2, [pc, #532]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	61bb      	str	r3, [r7, #24]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	18d3      	adds	r3, r2, r3
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	4984      	ldr	r1, [pc, #528]	@ (800ab10 <USB_DeactivateEndpoint+0x2c4>)
 800a8fe:	430a      	orrs	r2, r1
 800a900:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	18d3      	adds	r3, r2, r3
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a81      	ldr	r2, [pc, #516]	@ (800ab14 <USB_DeactivateEndpoint+0x2c8>)
 800a910:	4013      	ands	r3, r2
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	18d3      	adds	r3, r2, r3
 800a91e:	697a      	ldr	r2, [r7, #20]
 800a920:	497a      	ldr	r1, [pc, #488]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800a922:	430a      	orrs	r2, r1
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	e0e6      	b.n	800aaf6 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d171      	bne.n	800aa14 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	18d3      	adds	r3, r2, r3
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a93e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a940:	2380      	movs	r3, #128	@ 0x80
 800a942:	01db      	lsls	r3, r3, #7
 800a944:	4013      	ands	r3, r2
 800a946:	d011      	beq.n	800a96c <USB_DeactivateEndpoint+0x120>
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	18d3      	adds	r3, r2, r3
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a6a      	ldr	r2, [pc, #424]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800a956:	4013      	ands	r3, r2
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	18d3      	adds	r3, r2, r3
 800a964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a966:	496a      	ldr	r1, [pc, #424]	@ (800ab10 <USB_DeactivateEndpoint+0x2c4>)
 800a968:	430a      	orrs	r2, r1
 800a96a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	633b      	str	r3, [r7, #48]	@ 0x30
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	2240      	movs	r2, #64	@ 0x40
 800a97e:	4013      	ands	r3, r2
 800a980:	d011      	beq.n	800a9a6 <USB_DeactivateEndpoint+0x15a>
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	18d3      	adds	r3, r2, r3
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a5c      	ldr	r2, [pc, #368]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800a990:	4013      	ands	r3, r2
 800a992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	18d3      	adds	r3, r2, r3
 800a99e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9a0:	4958      	ldr	r1, [pc, #352]	@ (800ab04 <USB_DeactivateEndpoint+0x2b8>)
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	18d3      	adds	r3, r2, r3
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a53      	ldr	r2, [pc, #332]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	18d3      	adds	r3, r2, r3
 800a9c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9c4:	494f      	ldr	r1, [pc, #316]	@ (800ab04 <USB_DeactivateEndpoint+0x2b8>)
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	18d3      	adds	r3, r2, r3
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a4f      	ldr	r2, [pc, #316]	@ (800ab14 <USB_DeactivateEndpoint+0x2c8>)
 800a9d8:	4013      	ands	r3, r2
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	18d3      	adds	r3, r2, r3
 800a9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9e8:	4948      	ldr	r1, [pc, #288]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	18d3      	adds	r3, r2, r3
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a43      	ldr	r2, [pc, #268]	@ (800ab08 <USB_DeactivateEndpoint+0x2bc>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	623b      	str	r3, [r7, #32]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	18d3      	adds	r3, r2, r3
 800aa0a:	6a3a      	ldr	r2, [r7, #32]
 800aa0c:	493f      	ldr	r1, [pc, #252]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	601a      	str	r2, [r3, #0]
 800aa12:	e070      	b.n	800aaf6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	18d3      	adds	r3, r2, r3
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa24:	2380      	movs	r3, #128	@ 0x80
 800aa26:	01db      	lsls	r3, r3, #7
 800aa28:	4013      	ands	r3, r2
 800aa2a:	d011      	beq.n	800aa50 <USB_DeactivateEndpoint+0x204>
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	18d3      	adds	r3, r2, r3
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a31      	ldr	r2, [pc, #196]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	18d3      	adds	r3, r2, r3
 800aa48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa4a:	4931      	ldr	r1, [pc, #196]	@ (800ab10 <USB_DeactivateEndpoint+0x2c4>)
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	18d3      	adds	r3, r2, r3
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa60:	2240      	movs	r2, #64	@ 0x40
 800aa62:	4013      	ands	r3, r2
 800aa64:	d011      	beq.n	800aa8a <USB_DeactivateEndpoint+0x23e>
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	18d3      	adds	r3, r2, r3
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a23      	ldr	r2, [pc, #140]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	18d3      	adds	r3, r2, r3
 800aa82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa84:	491f      	ldr	r1, [pc, #124]	@ (800ab04 <USB_DeactivateEndpoint+0x2b8>)
 800aa86:	430a      	orrs	r2, r1
 800aa88:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	18d3      	adds	r3, r2, r3
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a1a      	ldr	r2, [pc, #104]	@ (800ab00 <USB_DeactivateEndpoint+0x2b4>)
 800aa98:	4013      	ands	r3, r2
 800aa9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	18d3      	adds	r3, r2, r3
 800aaa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaa8:	4919      	ldr	r1, [pc, #100]	@ (800ab10 <USB_DeactivateEndpoint+0x2c4>)
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a13      	ldr	r2, [pc, #76]	@ (800ab08 <USB_DeactivateEndpoint+0x2bc>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	18d3      	adds	r3, r2, r3
 800aaca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aacc:	490f      	ldr	r1, [pc, #60]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800aace:	430a      	orrs	r2, r1
 800aad0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	18d3      	adds	r3, r2, r3
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a0d      	ldr	r2, [pc, #52]	@ (800ab14 <USB_DeactivateEndpoint+0x2c8>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	18d3      	adds	r3, r2, r3
 800aaee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aaf0:	4906      	ldr	r1, [pc, #24]	@ (800ab0c <USB_DeactivateEndpoint+0x2c0>)
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b016      	add	sp, #88	@ 0x58
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	07ff8f8f 	.word	0x07ff8f8f
 800ab04:	000080c0 	.word	0x000080c0
 800ab08:	07ff8fbf 	.word	0x07ff8fbf
 800ab0c:	00008080 	.word	0x00008080
 800ab10:	0000c080 	.word	0x0000c080
 800ab14:	07ffbf8f 	.word	0x07ffbf8f

0800ab18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ab18:	b590      	push	{r4, r7, lr}
 800ab1a:	b097      	sub	sp, #92	@ 0x5c
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d001      	beq.n	800ab2e <USB_EPStartXfer+0x16>
 800ab2a:	f000 fcbf 	bl	800b4ac <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d903      	bls.n	800ab42 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab40:	e002      	b.n	800ab48 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	7b1b      	ldrb	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d12b      	bne.n	800aba8 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6959      	ldr	r1, [r3, #20]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	88da      	ldrh	r2, [r3, #6]
 800ab58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 f8f5 	bl	800bd4c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	4ace      	ldr	r2, [pc, #824]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ab6a:	4694      	mov	ip, r2
 800ab6c:	4463      	add	r3, ip
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	49cb      	ldr	r1, [pc, #812]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ab78:	468c      	mov	ip, r1
 800ab7a:	4463      	add	r3, ip
 800ab7c:	0412      	lsls	r2, r2, #16
 800ab7e:	0c12      	lsrs	r2, r2, #16
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	4ac6      	ldr	r2, [pc, #792]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ab8a:	4694      	mov	ip, r2
 800ab8c:	4463      	add	r3, ip
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab92:	041a      	lsls	r2, r3, #16
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	48c2      	ldr	r0, [pc, #776]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ab9c:	4684      	mov	ip, r0
 800ab9e:	4463      	add	r3, ip
 800aba0:	430a      	orrs	r2, r1
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f000 fc67 	bl	800b476 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	78db      	ldrb	r3, [r3, #3]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d000      	beq.n	800abb2 <USB_EPStartXfer+0x9a>
 800abb0:	e31a      	b.n	800b1e8 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	6a1a      	ldr	r2, [r3, #32]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d800      	bhi.n	800abc0 <USB_EPStartXfer+0xa8>
 800abbe:	e2c7      	b.n	800b150 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	18d3      	adds	r3, r2, r3
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4ab6      	ldr	r2, [pc, #728]	@ (800aea8 <USB_EPStartXfer+0x390>)
 800abce:	4013      	ands	r3, r2
 800abd0:	613b      	str	r3, [r7, #16]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	18d3      	adds	r3, r2, r3
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	49b3      	ldr	r1, [pc, #716]	@ (800aeac <USB_EPStartXfer+0x394>)
 800abe0:	430a      	orrs	r2, r1
 800abe2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	6a1a      	ldr	r2, [r3, #32]
 800abe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	18d3      	adds	r3, r2, r3
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2240      	movs	r2, #64	@ 0x40
 800abfe:	4013      	ands	r3, r2
 800ac00:	d100      	bne.n	800ac04 <USB_EPStartXfer+0xec>
 800ac02:	e155      	b.n	800aeb0 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	785b      	ldrb	r3, [r3, #1]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d162      	bne.n	800acd2 <USB_EPStartXfer+0x1ba>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	4aa4      	ldr	r2, [pc, #656]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac14:	4694      	mov	ip, r2
 800ac16:	4463      	add	r3, ip
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	49a0      	ldr	r1, [pc, #640]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac22:	468c      	mov	ip, r1
 800ac24:	4463      	add	r3, ip
 800ac26:	0192      	lsls	r2, r2, #6
 800ac28:	0992      	lsrs	r2, r2, #6
 800ac2a:	605a      	str	r2, [r3, #4]
 800ac2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac30:	d91e      	bls.n	800ac70 <USB_EPStartXfer+0x158>
 800ac32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac34:	095b      	lsrs	r3, r3, #5
 800ac36:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac3a:	221f      	movs	r2, #31
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	d102      	bne.n	800ac46 <USB_EPStartXfer+0x12e>
 800ac40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac42:	3b01      	subs	r3, #1
 800ac44:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4a95      	ldr	r2, [pc, #596]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac4e:	4694      	mov	ip, r2
 800ac50:	4463      	add	r3, ip
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac56:	069b      	lsls	r3, r3, #26
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4990      	ldr	r1, [pc, #576]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac62:	468c      	mov	ip, r1
 800ac64:	4463      	add	r3, ip
 800ac66:	2180      	movs	r1, #128	@ 0x80
 800ac68:	0609      	lsls	r1, r1, #24
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	e055      	b.n	800ad1c <USB_EPStartXfer+0x204>
 800ac70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d111      	bne.n	800ac9a <USB_EPStartXfer+0x182>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	4a89      	ldr	r2, [pc, #548]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac7e:	4694      	mov	ip, r2
 800ac80:	4463      	add	r3, ip
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	4986      	ldr	r1, [pc, #536]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ac8c:	468c      	mov	ip, r1
 800ac8e:	4463      	add	r3, ip
 800ac90:	2180      	movs	r1, #128	@ 0x80
 800ac92:	0609      	lsls	r1, r1, #24
 800ac94:	430a      	orrs	r2, r1
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	e040      	b.n	800ad1c <USB_EPStartXfer+0x204>
 800ac9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac9c:	085b      	lsrs	r3, r3, #1
 800ac9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800aca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aca2:	2201      	movs	r2, #1
 800aca4:	4013      	ands	r3, r2
 800aca6:	d002      	beq.n	800acae <USB_EPStartXfer+0x196>
 800aca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acaa:	3301      	adds	r3, #1
 800acac:	653b      	str	r3, [r7, #80]	@ 0x50
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	4a7b      	ldr	r2, [pc, #492]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800acb6:	4694      	mov	ip, r2
 800acb8:	4463      	add	r3, ip
 800acba:	6859      	ldr	r1, [r3, #4]
 800acbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acbe:	069a      	lsls	r2, r3, #26
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	00db      	lsls	r3, r3, #3
 800acc6:	4877      	ldr	r0, [pc, #476]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800acc8:	4684      	mov	ip, r0
 800acca:	4463      	add	r3, ip
 800accc:	430a      	orrs	r2, r1
 800acce:	605a      	str	r2, [r3, #4]
 800acd0:	e024      	b.n	800ad1c <USB_EPStartXfer+0x204>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d120      	bne.n	800ad1c <USB_EPStartXfer+0x204>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	00db      	lsls	r3, r3, #3
 800ace0:	4a70      	ldr	r2, [pc, #448]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ace2:	4694      	mov	ip, r2
 800ace4:	4463      	add	r3, ip
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	00db      	lsls	r3, r3, #3
 800acee:	496d      	ldr	r1, [pc, #436]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800acf0:	468c      	mov	ip, r1
 800acf2:	4463      	add	r3, ip
 800acf4:	0412      	lsls	r2, r2, #16
 800acf6:	0c12      	lsrs	r2, r2, #16
 800acf8:	605a      	str	r2, [r3, #4]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	4a68      	ldr	r2, [pc, #416]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ad02:	4694      	mov	ip, r2
 800ad04:	4463      	add	r3, ip
 800ad06:	6859      	ldr	r1, [r3, #4]
 800ad08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad0a:	041a      	lsls	r2, r3, #16
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4864      	ldr	r0, [pc, #400]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ad14:	4684      	mov	ip, r0
 800ad16:	4463      	add	r3, ip
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ad1c:	201a      	movs	r0, #26
 800ad1e:	183b      	adds	r3, r7, r0
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	8952      	ldrh	r2, [r2, #10]
 800ad24:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	6959      	ldr	r1, [r3, #20]
 800ad2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad2c:	b29c      	uxth	r4, r3
 800ad2e:	183b      	adds	r3, r7, r0
 800ad30:	881a      	ldrh	r2, [r3, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	0023      	movs	r3, r4
 800ad36:	f001 f809 	bl	800bd4c <USB_WritePMA>
            ep->xfer_buff += len;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	695a      	ldr	r2, [r3, #20]
 800ad3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad40:	18d2      	adds	r2, r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	6a1a      	ldr	r2, [r3, #32]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d906      	bls.n	800ad60 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6a1a      	ldr	r2, [r3, #32]
 800ad56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	621a      	str	r2, [r3, #32]
 800ad5e:	e005      	b.n	800ad6c <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	6a1b      	ldr	r3, [r3, #32]
 800ad64:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	785b      	ldrb	r3, [r3, #1]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d162      	bne.n	800ae3a <USB_EPStartXfer+0x322>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	4a4a      	ldr	r2, [pc, #296]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ad7c:	4694      	mov	ip, r2
 800ad7e:	4463      	add	r3, ip
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4946      	ldr	r1, [pc, #280]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ad8a:	468c      	mov	ip, r1
 800ad8c:	4463      	add	r3, ip
 800ad8e:	0192      	lsls	r2, r2, #6
 800ad90:	0992      	lsrs	r2, r2, #6
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad96:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad98:	d91e      	bls.n	800add8 <USB_EPStartXfer+0x2c0>
 800ad9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ada0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ada2:	221f      	movs	r2, #31
 800ada4:	4013      	ands	r3, r2
 800ada6:	d102      	bne.n	800adae <USB_EPStartXfer+0x296>
 800ada8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adaa:	3b01      	subs	r3, #1
 800adac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	4a3b      	ldr	r2, [pc, #236]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800adb6:	4694      	mov	ip, r2
 800adb8:	4463      	add	r3, ip
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adbe:	069b      	lsls	r3, r3, #26
 800adc0:	431a      	orrs	r2, r3
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	4936      	ldr	r1, [pc, #216]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800adca:	468c      	mov	ip, r1
 800adcc:	4463      	add	r3, ip
 800adce:	2180      	movs	r1, #128	@ 0x80
 800add0:	0609      	lsls	r1, r1, #24
 800add2:	430a      	orrs	r2, r1
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	e055      	b.n	800ae84 <USB_EPStartXfer+0x36c>
 800add8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adda:	2b00      	cmp	r3, #0
 800addc:	d111      	bne.n	800ae02 <USB_EPStartXfer+0x2ea>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4a2f      	ldr	r2, [pc, #188]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ade6:	4694      	mov	ip, r2
 800ade8:	4463      	add	r3, ip
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	492c      	ldr	r1, [pc, #176]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800adf4:	468c      	mov	ip, r1
 800adf6:	4463      	add	r3, ip
 800adf8:	2180      	movs	r1, #128	@ 0x80
 800adfa:	0609      	lsls	r1, r1, #24
 800adfc:	430a      	orrs	r2, r1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e040      	b.n	800ae84 <USB_EPStartXfer+0x36c>
 800ae02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	d002      	beq.n	800ae16 <USB_EPStartXfer+0x2fe>
 800ae10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae12:	3301      	adds	r3, #1
 800ae14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	4a21      	ldr	r2, [pc, #132]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae1e:	4694      	mov	ip, r2
 800ae20:	4463      	add	r3, ip
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae26:	069a      	lsls	r2, r3, #26
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	481d      	ldr	r0, [pc, #116]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae30:	4684      	mov	ip, r0
 800ae32:	4463      	add	r3, ip
 800ae34:	430a      	orrs	r2, r1
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	e024      	b.n	800ae84 <USB_EPStartXfer+0x36c>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d120      	bne.n	800ae84 <USB_EPStartXfer+0x36c>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	4a16      	ldr	r2, [pc, #88]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae4a:	4694      	mov	ip, r2
 800ae4c:	4463      	add	r3, ip
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	4913      	ldr	r1, [pc, #76]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae58:	468c      	mov	ip, r1
 800ae5a:	4463      	add	r3, ip
 800ae5c:	0412      	lsls	r2, r2, #16
 800ae5e:	0c12      	lsrs	r2, r2, #16
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4a0e      	ldr	r2, [pc, #56]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae6a:	4694      	mov	ip, r2
 800ae6c:	4463      	add	r3, ip
 800ae6e:	6819      	ldr	r1, [r3, #0]
 800ae70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae72:	041a      	lsls	r2, r3, #16
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	480a      	ldr	r0, [pc, #40]	@ (800aea4 <USB_EPStartXfer+0x38c>)
 800ae7c:	4684      	mov	ip, r0
 800ae7e:	4463      	add	r3, ip
 800ae80:	430a      	orrs	r2, r1
 800ae82:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae84:	201a      	movs	r0, #26
 800ae86:	183b      	adds	r3, r7, r0
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	8912      	ldrh	r2, [r2, #8]
 800ae8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	6959      	ldr	r1, [r3, #20]
 800ae92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae94:	b29c      	uxth	r4, r3
 800ae96:	183b      	adds	r3, r7, r0
 800ae98:	881a      	ldrh	r2, [r3, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	0023      	movs	r3, r4
 800ae9e:	f000 ff55 	bl	800bd4c <USB_WritePMA>
 800aea2:	e2e8      	b.n	800b476 <USB_EPStartXfer+0x95e>
 800aea4:	40009800 	.word	0x40009800
 800aea8:	07ff8f8f 	.word	0x07ff8f8f
 800aeac:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	785b      	ldrb	r3, [r3, #1]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d162      	bne.n	800af7e <USB_EPStartXfer+0x466>
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	4ac7      	ldr	r2, [pc, #796]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800aec0:	4694      	mov	ip, r2
 800aec2:	4463      	add	r3, ip
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	49c3      	ldr	r1, [pc, #780]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800aece:	468c      	mov	ip, r1
 800aed0:	4463      	add	r3, ip
 800aed2:	0192      	lsls	r2, r2, #6
 800aed4:	0992      	lsrs	r2, r2, #6
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeda:	2b3e      	cmp	r3, #62	@ 0x3e
 800aedc:	d91e      	bls.n	800af1c <USB_EPStartXfer+0x404>
 800aede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee0:	095b      	lsrs	r3, r3, #5
 800aee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee6:	221f      	movs	r2, #31
 800aee8:	4013      	ands	r3, r2
 800aeea:	d102      	bne.n	800aef2 <USB_EPStartXfer+0x3da>
 800aeec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeee:	3b01      	subs	r3, #1
 800aef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	4ab8      	ldr	r2, [pc, #736]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800aefa:	4694      	mov	ip, r2
 800aefc:	4463      	add	r3, ip
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af02:	069b      	lsls	r3, r3, #26
 800af04:	431a      	orrs	r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	49b3      	ldr	r1, [pc, #716]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af0e:	468c      	mov	ip, r1
 800af10:	4463      	add	r3, ip
 800af12:	2180      	movs	r1, #128	@ 0x80
 800af14:	0609      	lsls	r1, r1, #24
 800af16:	430a      	orrs	r2, r1
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e055      	b.n	800afc8 <USB_EPStartXfer+0x4b0>
 800af1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d111      	bne.n	800af46 <USB_EPStartXfer+0x42e>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	4aac      	ldr	r2, [pc, #688]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af2a:	4694      	mov	ip, r2
 800af2c:	4463      	add	r3, ip
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	00db      	lsls	r3, r3, #3
 800af36:	49a9      	ldr	r1, [pc, #676]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af38:	468c      	mov	ip, r1
 800af3a:	4463      	add	r3, ip
 800af3c:	2180      	movs	r1, #128	@ 0x80
 800af3e:	0609      	lsls	r1, r1, #24
 800af40:	430a      	orrs	r2, r1
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e040      	b.n	800afc8 <USB_EPStartXfer+0x4b0>
 800af46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af4e:	2201      	movs	r2, #1
 800af50:	4013      	ands	r3, r2
 800af52:	d002      	beq.n	800af5a <USB_EPStartXfer+0x442>
 800af54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af56:	3301      	adds	r3, #1
 800af58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	4a9e      	ldr	r2, [pc, #632]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af62:	4694      	mov	ip, r2
 800af64:	4463      	add	r3, ip
 800af66:	6819      	ldr	r1, [r3, #0]
 800af68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af6a:	069a      	lsls	r2, r3, #26
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	00db      	lsls	r3, r3, #3
 800af72:	489a      	ldr	r0, [pc, #616]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af74:	4684      	mov	ip, r0
 800af76:	4463      	add	r3, ip
 800af78:	430a      	orrs	r2, r1
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	e024      	b.n	800afc8 <USB_EPStartXfer+0x4b0>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	785b      	ldrb	r3, [r3, #1]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d120      	bne.n	800afc8 <USB_EPStartXfer+0x4b0>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	4a93      	ldr	r2, [pc, #588]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af8e:	4694      	mov	ip, r2
 800af90:	4463      	add	r3, ip
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	00db      	lsls	r3, r3, #3
 800af9a:	4990      	ldr	r1, [pc, #576]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800af9c:	468c      	mov	ip, r1
 800af9e:	4463      	add	r3, ip
 800afa0:	0412      	lsls	r2, r2, #16
 800afa2:	0c12      	lsrs	r2, r2, #16
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	4a8b      	ldr	r2, [pc, #556]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800afae:	4694      	mov	ip, r2
 800afb0:	4463      	add	r3, ip
 800afb2:	6819      	ldr	r1, [r3, #0]
 800afb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb6:	041a      	lsls	r2, r3, #16
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	4887      	ldr	r0, [pc, #540]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800afc0:	4684      	mov	ip, r0
 800afc2:	4463      	add	r3, ip
 800afc4:	430a      	orrs	r2, r1
 800afc6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800afc8:	201a      	movs	r0, #26
 800afca:	183b      	adds	r3, r7, r0
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	8912      	ldrh	r2, [r2, #8]
 800afd0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	6959      	ldr	r1, [r3, #20]
 800afd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd8:	b29c      	uxth	r4, r3
 800afda:	183b      	adds	r3, r7, r0
 800afdc:	881a      	ldrh	r2, [r3, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	0023      	movs	r3, r4
 800afe2:	f000 feb3 	bl	800bd4c <USB_WritePMA>
            ep->xfer_buff += len;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695a      	ldr	r2, [r3, #20]
 800afea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afec:	18d2      	adds	r2, r2, r3
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	6a1a      	ldr	r2, [r3, #32]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	429a      	cmp	r2, r3
 800affc:	d906      	bls.n	800b00c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6a1a      	ldr	r2, [r3, #32]
 800b002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	621a      	str	r2, [r3, #32]
 800b00a:	e005      	b.n	800b018 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	6a1b      	ldr	r3, [r3, #32]
 800b010:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2200      	movs	r2, #0
 800b016:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	785b      	ldrb	r3, [r3, #1]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d162      	bne.n	800b0e6 <USB_EPStartXfer+0x5ce>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	4a6d      	ldr	r2, [pc, #436]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b028:	4694      	mov	ip, r2
 800b02a:	4463      	add	r3, ip
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	4969      	ldr	r1, [pc, #420]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b036:	468c      	mov	ip, r1
 800b038:	4463      	add	r3, ip
 800b03a:	0192      	lsls	r2, r2, #6
 800b03c:	0992      	lsrs	r2, r2, #6
 800b03e:	605a      	str	r2, [r3, #4]
 800b040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b042:	2b3e      	cmp	r3, #62	@ 0x3e
 800b044:	d91e      	bls.n	800b084 <USB_EPStartXfer+0x56c>
 800b046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b048:	095b      	lsrs	r3, r3, #5
 800b04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b04e:	221f      	movs	r2, #31
 800b050:	4013      	ands	r3, r2
 800b052:	d102      	bne.n	800b05a <USB_EPStartXfer+0x542>
 800b054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b056:	3b01      	subs	r3, #1
 800b058:	647b      	str	r3, [r7, #68]	@ 0x44
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4a5e      	ldr	r2, [pc, #376]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b062:	4694      	mov	ip, r2
 800b064:	4463      	add	r3, ip
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b06a:	069b      	lsls	r3, r3, #26
 800b06c:	431a      	orrs	r2, r3
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	4959      	ldr	r1, [pc, #356]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b076:	468c      	mov	ip, r1
 800b078:	4463      	add	r3, ip
 800b07a:	2180      	movs	r1, #128	@ 0x80
 800b07c:	0609      	lsls	r1, r1, #24
 800b07e:	430a      	orrs	r2, r1
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	e055      	b.n	800b130 <USB_EPStartXfer+0x618>
 800b084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b086:	2b00      	cmp	r3, #0
 800b088:	d111      	bne.n	800b0ae <USB_EPStartXfer+0x596>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4a52      	ldr	r2, [pc, #328]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b092:	4694      	mov	ip, r2
 800b094:	4463      	add	r3, ip
 800b096:	685a      	ldr	r2, [r3, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	494f      	ldr	r1, [pc, #316]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b0a0:	468c      	mov	ip, r1
 800b0a2:	4463      	add	r3, ip
 800b0a4:	2180      	movs	r1, #128	@ 0x80
 800b0a6:	0609      	lsls	r1, r1, #24
 800b0a8:	430a      	orrs	r2, r1
 800b0aa:	605a      	str	r2, [r3, #4]
 800b0ac:	e040      	b.n	800b130 <USB_EPStartXfer+0x618>
 800b0ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0b0:	085b      	lsrs	r3, r3, #1
 800b0b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	d002      	beq.n	800b0c2 <USB_EPStartXfer+0x5aa>
 800b0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0be:	3301      	adds	r3, #1
 800b0c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	4a44      	ldr	r2, [pc, #272]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b0ca:	4694      	mov	ip, r2
 800b0cc:	4463      	add	r3, ip
 800b0ce:	6859      	ldr	r1, [r3, #4]
 800b0d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0d2:	069a      	lsls	r2, r3, #26
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	4840      	ldr	r0, [pc, #256]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b0dc:	4684      	mov	ip, r0
 800b0de:	4463      	add	r3, ip
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	605a      	str	r2, [r3, #4]
 800b0e4:	e024      	b.n	800b130 <USB_EPStartXfer+0x618>
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d120      	bne.n	800b130 <USB_EPStartXfer+0x618>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	4a39      	ldr	r2, [pc, #228]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b0f6:	4694      	mov	ip, r2
 800b0f8:	4463      	add	r3, ip
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	4936      	ldr	r1, [pc, #216]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b104:	468c      	mov	ip, r1
 800b106:	4463      	add	r3, ip
 800b108:	0412      	lsls	r2, r2, #16
 800b10a:	0c12      	lsrs	r2, r2, #16
 800b10c:	605a      	str	r2, [r3, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	00db      	lsls	r3, r3, #3
 800b114:	4a31      	ldr	r2, [pc, #196]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b116:	4694      	mov	ip, r2
 800b118:	4463      	add	r3, ip
 800b11a:	6859      	ldr	r1, [r3, #4]
 800b11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b11e:	041a      	lsls	r2, r3, #16
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	00db      	lsls	r3, r3, #3
 800b126:	482d      	ldr	r0, [pc, #180]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b128:	4684      	mov	ip, r0
 800b12a:	4463      	add	r3, ip
 800b12c:	430a      	orrs	r2, r1
 800b12e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800b130:	201a      	movs	r0, #26
 800b132:	183b      	adds	r3, r7, r0
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	8952      	ldrh	r2, [r2, #10]
 800b138:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	6959      	ldr	r1, [r3, #20]
 800b13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b140:	b29c      	uxth	r4, r3
 800b142:	183b      	adds	r3, r7, r0
 800b144:	881a      	ldrh	r2, [r3, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	0023      	movs	r3, r4
 800b14a:	f000 fdff 	bl	800bd4c <USB_WritePMA>
 800b14e:	e192      	b.n	800b476 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	18d3      	adds	r3, r2, r3
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a1f      	ldr	r2, [pc, #124]	@ (800b1e0 <USB_EPStartXfer+0x6c8>)
 800b164:	4013      	ands	r3, r2
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	18d3      	adds	r3, r2, r3
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	491b      	ldr	r1, [pc, #108]	@ (800b1e4 <USB_EPStartXfer+0x6cc>)
 800b176:	430a      	orrs	r2, r1
 800b178:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	4a16      	ldr	r2, [pc, #88]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b182:	4694      	mov	ip, r2
 800b184:	4463      	add	r3, ip
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	4913      	ldr	r1, [pc, #76]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b190:	468c      	mov	ip, r1
 800b192:	4463      	add	r3, ip
 800b194:	0412      	lsls	r2, r2, #16
 800b196:	0c12      	lsrs	r2, r2, #16
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	4a0e      	ldr	r2, [pc, #56]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b1a2:	4694      	mov	ip, r2
 800b1a4:	4463      	add	r3, ip
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1aa:	041a      	lsls	r2, r3, #16
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	480a      	ldr	r0, [pc, #40]	@ (800b1dc <USB_EPStartXfer+0x6c4>)
 800b1b4:	4684      	mov	ip, r0
 800b1b6:	4463      	add	r3, ip
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1bc:	201a      	movs	r0, #26
 800b1be:	183b      	adds	r3, r7, r0
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	8912      	ldrh	r2, [r2, #8]
 800b1c4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	6959      	ldr	r1, [r3, #20]
 800b1ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1cc:	b29c      	uxth	r4, r3
 800b1ce:	183b      	adds	r3, r7, r0
 800b1d0:	881a      	ldrh	r2, [r3, #0]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	0023      	movs	r3, r4
 800b1d6:	f000 fdb9 	bl	800bd4c <USB_WritePMA>
 800b1da:	e14c      	b.n	800b476 <USB_EPStartXfer+0x95e>
 800b1dc:	40009800 	.word	0x40009800
 800b1e0:	07ff8e8f 	.word	0x07ff8e8f
 800b1e4:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	6a1a      	ldr	r2, [r3, #32]
 800b1ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	18d3      	adds	r3, r2, r3
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2240      	movs	r2, #64	@ 0x40
 800b202:	4013      	ands	r3, r2
 800b204:	d100      	bne.n	800b208 <USB_EPStartXfer+0x6f0>
 800b206:	e09b      	b.n	800b340 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	785b      	ldrb	r3, [r3, #1]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d162      	bne.n	800b2d6 <USB_EPStartXfer+0x7be>
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	4ad6      	ldr	r2, [pc, #856]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b218:	4694      	mov	ip, r2
 800b21a:	4463      	add	r3, ip
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	49d2      	ldr	r1, [pc, #840]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b226:	468c      	mov	ip, r1
 800b228:	4463      	add	r3, ip
 800b22a:	0192      	lsls	r2, r2, #6
 800b22c:	0992      	lsrs	r2, r2, #6
 800b22e:	605a      	str	r2, [r3, #4]
 800b230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b232:	2b3e      	cmp	r3, #62	@ 0x3e
 800b234:	d91e      	bls.n	800b274 <USB_EPStartXfer+0x75c>
 800b236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b23c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b23e:	221f      	movs	r2, #31
 800b240:	4013      	ands	r3, r2
 800b242:	d102      	bne.n	800b24a <USB_EPStartXfer+0x732>
 800b244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b246:	3b01      	subs	r3, #1
 800b248:	643b      	str	r3, [r7, #64]	@ 0x40
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	4ac7      	ldr	r2, [pc, #796]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b252:	4694      	mov	ip, r2
 800b254:	4463      	add	r3, ip
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b25a:	069b      	lsls	r3, r3, #26
 800b25c:	431a      	orrs	r2, r3
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	49c2      	ldr	r1, [pc, #776]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b266:	468c      	mov	ip, r1
 800b268:	4463      	add	r3, ip
 800b26a:	2180      	movs	r1, #128	@ 0x80
 800b26c:	0609      	lsls	r1, r1, #24
 800b26e:	430a      	orrs	r2, r1
 800b270:	605a      	str	r2, [r3, #4]
 800b272:	e055      	b.n	800b320 <USB_EPStartXfer+0x808>
 800b274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b276:	2b00      	cmp	r3, #0
 800b278:	d111      	bne.n	800b29e <USB_EPStartXfer+0x786>
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	00db      	lsls	r3, r3, #3
 800b280:	4abb      	ldr	r2, [pc, #748]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b282:	4694      	mov	ip, r2
 800b284:	4463      	add	r3, ip
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	00db      	lsls	r3, r3, #3
 800b28e:	49b8      	ldr	r1, [pc, #736]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b290:	468c      	mov	ip, r1
 800b292:	4463      	add	r3, ip
 800b294:	2180      	movs	r1, #128	@ 0x80
 800b296:	0609      	lsls	r1, r1, #24
 800b298:	430a      	orrs	r2, r1
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	e040      	b.n	800b320 <USB_EPStartXfer+0x808>
 800b29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2a0:	085b      	lsrs	r3, r3, #1
 800b2a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	d002      	beq.n	800b2b2 <USB_EPStartXfer+0x79a>
 800b2ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	4aad      	ldr	r2, [pc, #692]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b2ba:	4694      	mov	ip, r2
 800b2bc:	4463      	add	r3, ip
 800b2be:	6859      	ldr	r1, [r3, #4]
 800b2c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2c2:	069a      	lsls	r2, r3, #26
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	48a9      	ldr	r0, [pc, #676]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b2cc:	4684      	mov	ip, r0
 800b2ce:	4463      	add	r3, ip
 800b2d0:	430a      	orrs	r2, r1
 800b2d2:	605a      	str	r2, [r3, #4]
 800b2d4:	e024      	b.n	800b320 <USB_EPStartXfer+0x808>
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	785b      	ldrb	r3, [r3, #1]
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d120      	bne.n	800b320 <USB_EPStartXfer+0x808>
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	4aa2      	ldr	r2, [pc, #648]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b2e6:	4694      	mov	ip, r2
 800b2e8:	4463      	add	r3, ip
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	499f      	ldr	r1, [pc, #636]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b2f4:	468c      	mov	ip, r1
 800b2f6:	4463      	add	r3, ip
 800b2f8:	0412      	lsls	r2, r2, #16
 800b2fa:	0c12      	lsrs	r2, r2, #16
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	4a9a      	ldr	r2, [pc, #616]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b306:	4694      	mov	ip, r2
 800b308:	4463      	add	r3, ip
 800b30a:	6859      	ldr	r1, [r3, #4]
 800b30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b30e:	041a      	lsls	r2, r3, #16
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	4896      	ldr	r0, [pc, #600]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b318:	4684      	mov	ip, r0
 800b31a:	4463      	add	r3, ip
 800b31c:	430a      	orrs	r2, r1
 800b31e:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800b320:	201a      	movs	r0, #26
 800b322:	183b      	adds	r3, r7, r0
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	8952      	ldrh	r2, [r2, #10]
 800b328:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	6959      	ldr	r1, [r3, #20]
 800b32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b330:	b29c      	uxth	r4, r3
 800b332:	183b      	adds	r3, r7, r0
 800b334:	881a      	ldrh	r2, [r3, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	0023      	movs	r3, r4
 800b33a:	f000 fd07 	bl	800bd4c <USB_WritePMA>
 800b33e:	e09a      	b.n	800b476 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	785b      	ldrb	r3, [r3, #1]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d162      	bne.n	800b40e <USB_EPStartXfer+0x8f6>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	4a88      	ldr	r2, [pc, #544]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b350:	4694      	mov	ip, r2
 800b352:	4463      	add	r3, ip
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	4984      	ldr	r1, [pc, #528]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b35e:	468c      	mov	ip, r1
 800b360:	4463      	add	r3, ip
 800b362:	0192      	lsls	r2, r2, #6
 800b364:	0992      	lsrs	r2, r2, #6
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b36a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b36c:	d91e      	bls.n	800b3ac <USB_EPStartXfer+0x894>
 800b36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b370:	095b      	lsrs	r3, r3, #5
 800b372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b376:	221f      	movs	r2, #31
 800b378:	4013      	ands	r3, r2
 800b37a:	d102      	bne.n	800b382 <USB_EPStartXfer+0x86a>
 800b37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b37e:	3b01      	subs	r3, #1
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4a79      	ldr	r2, [pc, #484]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b38a:	4694      	mov	ip, r2
 800b38c:	4463      	add	r3, ip
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b392:	069b      	lsls	r3, r3, #26
 800b394:	431a      	orrs	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	00db      	lsls	r3, r3, #3
 800b39c:	4974      	ldr	r1, [pc, #464]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b39e:	468c      	mov	ip, r1
 800b3a0:	4463      	add	r3, ip
 800b3a2:	2180      	movs	r1, #128	@ 0x80
 800b3a4:	0609      	lsls	r1, r1, #24
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	e055      	b.n	800b458 <USB_EPStartXfer+0x940>
 800b3ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d111      	bne.n	800b3d6 <USB_EPStartXfer+0x8be>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	4a6d      	ldr	r2, [pc, #436]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b3ba:	4694      	mov	ip, r2
 800b3bc:	4463      	add	r3, ip
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	00db      	lsls	r3, r3, #3
 800b3c6:	496a      	ldr	r1, [pc, #424]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b3c8:	468c      	mov	ip, r1
 800b3ca:	4463      	add	r3, ip
 800b3cc:	2180      	movs	r1, #128	@ 0x80
 800b3ce:	0609      	lsls	r1, r1, #24
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	e040      	b.n	800b458 <USB_EPStartXfer+0x940>
 800b3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3d8:	085b      	lsrs	r3, r3, #1
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	d002      	beq.n	800b3ea <USB_EPStartXfer+0x8d2>
 800b3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	4a5f      	ldr	r2, [pc, #380]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b3f2:	4694      	mov	ip, r2
 800b3f4:	4463      	add	r3, ip
 800b3f6:	6819      	ldr	r1, [r3, #0]
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fa:	069a      	lsls	r2, r3, #26
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	485b      	ldr	r0, [pc, #364]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b404:	4684      	mov	ip, r0
 800b406:	4463      	add	r3, ip
 800b408:	430a      	orrs	r2, r1
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e024      	b.n	800b458 <USB_EPStartXfer+0x940>
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	785b      	ldrb	r3, [r3, #1]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d120      	bne.n	800b458 <USB_EPStartXfer+0x940>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	4a54      	ldr	r2, [pc, #336]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b41e:	4694      	mov	ip, r2
 800b420:	4463      	add	r3, ip
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	4951      	ldr	r1, [pc, #324]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b42c:	468c      	mov	ip, r1
 800b42e:	4463      	add	r3, ip
 800b430:	0412      	lsls	r2, r2, #16
 800b432:	0c12      	lsrs	r2, r2, #16
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	4a4c      	ldr	r2, [pc, #304]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b43e:	4694      	mov	ip, r2
 800b440:	4463      	add	r3, ip
 800b442:	6819      	ldr	r1, [r3, #0]
 800b444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b446:	041a      	lsls	r2, r3, #16
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	00db      	lsls	r3, r3, #3
 800b44e:	4848      	ldr	r0, [pc, #288]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b450:	4684      	mov	ip, r0
 800b452:	4463      	add	r3, ip
 800b454:	430a      	orrs	r2, r1
 800b456:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b458:	201a      	movs	r0, #26
 800b45a:	183b      	adds	r3, r7, r0
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	8912      	ldrh	r2, [r2, #8]
 800b460:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6959      	ldr	r1, [r3, #20]
 800b466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b468:	b29c      	uxth	r4, r3
 800b46a:	183b      	adds	r3, r7, r0
 800b46c:	881a      	ldrh	r2, [r3, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	0023      	movs	r3, r4
 800b472:	f000 fc6b 	bl	800bd4c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	18d3      	adds	r3, r2, r3
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a3c      	ldr	r2, [pc, #240]	@ (800b574 <USB_EPStartXfer+0xa5c>)
 800b484:	4013      	ands	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2210      	movs	r2, #16
 800b48c:	4053      	eors	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2220      	movs	r2, #32
 800b494:	4053      	eors	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	18d3      	adds	r3, r2, r3
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	4934      	ldr	r1, [pc, #208]	@ (800b578 <USB_EPStartXfer+0xa60>)
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	e340      	b.n	800bb2e <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	7b1b      	ldrb	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d000      	beq.n	800b4b6 <USB_EPStartXfer+0x99e>
 800b4b4:	e07e      	b.n	800b5b4 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d909      	bls.n	800b4d6 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	699a      	ldr	r2, [r3, #24]
 800b4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	619a      	str	r2, [r3, #24]
 800b4d4:	e005      	b.n	800b4e2 <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	4a21      	ldr	r2, [pc, #132]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b4ea:	4694      	mov	ip, r2
 800b4ec:	4463      	add	r3, ip
 800b4ee:	685a      	ldr	r2, [r3, #4]
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	00db      	lsls	r3, r3, #3
 800b4f6:	491e      	ldr	r1, [pc, #120]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b4f8:	468c      	mov	ip, r1
 800b4fa:	4463      	add	r3, ip
 800b4fc:	0192      	lsls	r2, r2, #6
 800b4fe:	0992      	lsrs	r2, r2, #6
 800b500:	605a      	str	r2, [r3, #4]
 800b502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b504:	2b3e      	cmp	r3, #62	@ 0x3e
 800b506:	d91e      	bls.n	800b546 <USB_EPStartXfer+0xa2e>
 800b508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b50a:	095b      	lsrs	r3, r3, #5
 800b50c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b510:	221f      	movs	r2, #31
 800b512:	4013      	ands	r3, r2
 800b514:	d102      	bne.n	800b51c <USB_EPStartXfer+0xa04>
 800b516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b518:	3b01      	subs	r3, #1
 800b51a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4a13      	ldr	r2, [pc, #76]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b524:	4694      	mov	ip, r2
 800b526:	4463      	add	r3, ip
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52c:	069b      	lsls	r3, r3, #26
 800b52e:	431a      	orrs	r2, r3
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	490e      	ldr	r1, [pc, #56]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b538:	468c      	mov	ip, r1
 800b53a:	4463      	add	r3, ip
 800b53c:	2180      	movs	r1, #128	@ 0x80
 800b53e:	0609      	lsls	r1, r1, #24
 800b540:	430a      	orrs	r2, r1
 800b542:	605a      	str	r2, [r3, #4]
 800b544:	e2d7      	b.n	800baf6 <USB_EPStartXfer+0xfde>
 800b546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d117      	bne.n	800b57c <USB_EPStartXfer+0xa64>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	4a07      	ldr	r2, [pc, #28]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b554:	4694      	mov	ip, r2
 800b556:	4463      	add	r3, ip
 800b558:	685a      	ldr	r2, [r3, #4]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	00db      	lsls	r3, r3, #3
 800b560:	4903      	ldr	r1, [pc, #12]	@ (800b570 <USB_EPStartXfer+0xa58>)
 800b562:	468c      	mov	ip, r1
 800b564:	4463      	add	r3, ip
 800b566:	2180      	movs	r1, #128	@ 0x80
 800b568:	0609      	lsls	r1, r1, #24
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
 800b56e:	e2c2      	b.n	800baf6 <USB_EPStartXfer+0xfde>
 800b570:	40009800 	.word	0x40009800
 800b574:	07ff8fbf 	.word	0x07ff8fbf
 800b578:	00008080 	.word	0x00008080
 800b57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b57e:	085b      	lsrs	r3, r3, #1
 800b580:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b584:	2201      	movs	r2, #1
 800b586:	4013      	ands	r3, r2
 800b588:	d002      	beq.n	800b590 <USB_EPStartXfer+0xa78>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	3301      	adds	r3, #1
 800b58e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	4ac4      	ldr	r2, [pc, #784]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b598:	4694      	mov	ip, r2
 800b59a:	4463      	add	r3, ip
 800b59c:	6859      	ldr	r1, [r3, #4]
 800b59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a0:	069a      	lsls	r2, r3, #26
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	48bf      	ldr	r0, [pc, #764]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b5aa:	4684      	mov	ip, r0
 800b5ac:	4463      	add	r3, ip
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	605a      	str	r2, [r3, #4]
 800b5b2:	e2a0      	b.n	800baf6 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	78db      	ldrb	r3, [r3, #3]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d000      	beq.n	800b5be <USB_EPStartXfer+0xaa6>
 800b5bc:	e15f      	b.n	800b87e <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d168      	bne.n	800b698 <USB_EPStartXfer+0xb80>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	4ab6      	ldr	r2, [pc, #728]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b5ce:	4694      	mov	ip, r2
 800b5d0:	4463      	add	r3, ip
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	00db      	lsls	r3, r3, #3
 800b5da:	49b3      	ldr	r1, [pc, #716]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b5dc:	468c      	mov	ip, r1
 800b5de:	4463      	add	r3, ip
 800b5e0:	0192      	lsls	r2, r2, #6
 800b5e2:	0992      	lsrs	r2, r2, #6
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5ec:	d920      	bls.n	800b630 <USB_EPStartXfer+0xb18>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	095b      	lsrs	r3, r3, #5
 800b5f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	221f      	movs	r2, #31
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	d102      	bne.n	800b606 <USB_EPStartXfer+0xaee>
 800b600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b602:	3b01      	subs	r3, #1
 800b604:	637b      	str	r3, [r7, #52]	@ 0x34
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	4aa6      	ldr	r2, [pc, #664]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b60e:	4694      	mov	ip, r2
 800b610:	4463      	add	r3, ip
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b616:	069b      	lsls	r3, r3, #26
 800b618:	431a      	orrs	r2, r3
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	49a1      	ldr	r1, [pc, #644]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b622:	468c      	mov	ip, r1
 800b624:	4463      	add	r3, ip
 800b626:	2180      	movs	r1, #128	@ 0x80
 800b628:	0609      	lsls	r1, r1, #24
 800b62a:	430a      	orrs	r2, r1
 800b62c:	601a      	str	r2, [r3, #0]
 800b62e:	e059      	b.n	800b6e4 <USB_EPStartXfer+0xbcc>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d111      	bne.n	800b65c <USB_EPStartXfer+0xb44>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	4a9a      	ldr	r2, [pc, #616]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b640:	4694      	mov	ip, r2
 800b642:	4463      	add	r3, ip
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	4996      	ldr	r1, [pc, #600]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b64e:	468c      	mov	ip, r1
 800b650:	4463      	add	r3, ip
 800b652:	2180      	movs	r1, #128	@ 0x80
 800b654:	0609      	lsls	r1, r1, #24
 800b656:	430a      	orrs	r2, r1
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e043      	b.n	800b6e4 <USB_EPStartXfer+0xbcc>
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	085b      	lsrs	r3, r3, #1
 800b662:	637b      	str	r3, [r7, #52]	@ 0x34
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2201      	movs	r2, #1
 800b66a:	4013      	ands	r3, r2
 800b66c:	d002      	beq.n	800b674 <USB_EPStartXfer+0xb5c>
 800b66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b670:	3301      	adds	r3, #1
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	4a8b      	ldr	r2, [pc, #556]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b67c:	4694      	mov	ip, r2
 800b67e:	4463      	add	r3, ip
 800b680:	6819      	ldr	r1, [r3, #0]
 800b682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b684:	069a      	lsls	r2, r3, #26
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	4886      	ldr	r0, [pc, #536]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b68e:	4684      	mov	ip, r0
 800b690:	4463      	add	r3, ip
 800b692:	430a      	orrs	r2, r1
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	e025      	b.n	800b6e4 <USB_EPStartXfer+0xbcc>
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	785b      	ldrb	r3, [r3, #1]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d121      	bne.n	800b6e4 <USB_EPStartXfer+0xbcc>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	4a80      	ldr	r2, [pc, #512]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b6a8:	4694      	mov	ip, r2
 800b6aa:	4463      	add	r3, ip
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	497c      	ldr	r1, [pc, #496]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b6b6:	468c      	mov	ip, r1
 800b6b8:	4463      	add	r3, ip
 800b6ba:	0412      	lsls	r2, r2, #16
 800b6bc:	0c12      	lsrs	r2, r2, #16
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	4a78      	ldr	r2, [pc, #480]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b6c8:	4694      	mov	ip, r2
 800b6ca:	4463      	add	r3, ip
 800b6cc:	6819      	ldr	r1, [r3, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	041a      	lsls	r2, r3, #16
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4873      	ldr	r0, [pc, #460]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b6dc:	4684      	mov	ip, r0
 800b6de:	4463      	add	r3, ip
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	785b      	ldrb	r3, [r3, #1]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d168      	bne.n	800b7be <USB_EPStartXfer+0xca6>
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4a6d      	ldr	r2, [pc, #436]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b6f4:	4694      	mov	ip, r2
 800b6f6:	4463      	add	r3, ip
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	4969      	ldr	r1, [pc, #420]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b702:	468c      	mov	ip, r1
 800b704:	4463      	add	r3, ip
 800b706:	0192      	lsls	r2, r2, #6
 800b708:	0992      	lsrs	r2, r2, #6
 800b70a:	605a      	str	r2, [r3, #4]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b3e      	cmp	r3, #62	@ 0x3e
 800b712:	d920      	bls.n	800b756 <USB_EPStartXfer+0xc3e>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	095b      	lsrs	r3, r3, #5
 800b71a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	221f      	movs	r2, #31
 800b722:	4013      	ands	r3, r2
 800b724:	d102      	bne.n	800b72c <USB_EPStartXfer+0xc14>
 800b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b728:	3b01      	subs	r3, #1
 800b72a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	00db      	lsls	r3, r3, #3
 800b732:	4a5d      	ldr	r2, [pc, #372]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b734:	4694      	mov	ip, r2
 800b736:	4463      	add	r3, ip
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b73c:	069b      	lsls	r3, r3, #26
 800b73e:	431a      	orrs	r2, r3
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	00db      	lsls	r3, r3, #3
 800b746:	4958      	ldr	r1, [pc, #352]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b748:	468c      	mov	ip, r1
 800b74a:	4463      	add	r3, ip
 800b74c:	2180      	movs	r1, #128	@ 0x80
 800b74e:	0609      	lsls	r1, r1, #24
 800b750:	430a      	orrs	r2, r1
 800b752:	605a      	str	r2, [r3, #4]
 800b754:	e059      	b.n	800b80a <USB_EPStartXfer+0xcf2>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d111      	bne.n	800b782 <USB_EPStartXfer+0xc6a>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	4a50      	ldr	r2, [pc, #320]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b766:	4694      	mov	ip, r2
 800b768:	4463      	add	r3, ip
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	494d      	ldr	r1, [pc, #308]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b774:	468c      	mov	ip, r1
 800b776:	4463      	add	r3, ip
 800b778:	2180      	movs	r1, #128	@ 0x80
 800b77a:	0609      	lsls	r1, r1, #24
 800b77c:	430a      	orrs	r2, r1
 800b77e:	605a      	str	r2, [r3, #4]
 800b780:	e043      	b.n	800b80a <USB_EPStartXfer+0xcf2>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	085b      	lsrs	r3, r3, #1
 800b788:	633b      	str	r3, [r7, #48]	@ 0x30
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2201      	movs	r2, #1
 800b790:	4013      	ands	r3, r2
 800b792:	d002      	beq.n	800b79a <USB_EPStartXfer+0xc82>
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	3301      	adds	r3, #1
 800b798:	633b      	str	r3, [r7, #48]	@ 0x30
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	4a41      	ldr	r2, [pc, #260]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b7a2:	4694      	mov	ip, r2
 800b7a4:	4463      	add	r3, ip
 800b7a6:	6859      	ldr	r1, [r3, #4]
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7aa:	069a      	lsls	r2, r3, #26
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	00db      	lsls	r3, r3, #3
 800b7b2:	483d      	ldr	r0, [pc, #244]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b7b4:	4684      	mov	ip, r0
 800b7b6:	4463      	add	r3, ip
 800b7b8:	430a      	orrs	r2, r1
 800b7ba:	605a      	str	r2, [r3, #4]
 800b7bc:	e025      	b.n	800b80a <USB_EPStartXfer+0xcf2>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d121      	bne.n	800b80a <USB_EPStartXfer+0xcf2>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4a36      	ldr	r2, [pc, #216]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b7ce:	4694      	mov	ip, r2
 800b7d0:	4463      	add	r3, ip
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4933      	ldr	r1, [pc, #204]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b7dc:	468c      	mov	ip, r1
 800b7de:	4463      	add	r3, ip
 800b7e0:	0412      	lsls	r2, r2, #16
 800b7e2:	0c12      	lsrs	r2, r2, #16
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	00db      	lsls	r3, r3, #3
 800b7ec:	4a2e      	ldr	r2, [pc, #184]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b7ee:	4694      	mov	ip, r2
 800b7f0:	4463      	add	r3, ip
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	041a      	lsls	r2, r3, #16
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4829      	ldr	r0, [pc, #164]	@ (800b8a8 <USB_EPStartXfer+0xd90>)
 800b802:	4684      	mov	ip, r0
 800b804:	4463      	add	r3, ip
 800b806:	430a      	orrs	r2, r1
 800b808:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d100      	bne.n	800b814 <USB_EPStartXfer+0xcfc>
 800b812:	e170      	b.n	800baf6 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	18d3      	adds	r3, r2, r3
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	2126      	movs	r1, #38	@ 0x26
 800b822:	187b      	adds	r3, r7, r1
 800b824:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b826:	187b      	adds	r3, r7, r1
 800b828:	881a      	ldrh	r2, [r3, #0]
 800b82a:	2380      	movs	r3, #128	@ 0x80
 800b82c:	01db      	lsls	r3, r3, #7
 800b82e:	4013      	ands	r3, r2
 800b830:	d004      	beq.n	800b83c <USB_EPStartXfer+0xd24>
 800b832:	187b      	adds	r3, r7, r1
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	2240      	movs	r2, #64	@ 0x40
 800b838:	4013      	ands	r3, r2
 800b83a:	d10d      	bne.n	800b858 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b83c:	2126      	movs	r1, #38	@ 0x26
 800b83e:	187b      	adds	r3, r7, r1
 800b840:	881a      	ldrh	r2, [r3, #0]
 800b842:	2380      	movs	r3, #128	@ 0x80
 800b844:	01db      	lsls	r3, r3, #7
 800b846:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b848:	d000      	beq.n	800b84c <USB_EPStartXfer+0xd34>
 800b84a:	e154      	b.n	800baf6 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b84c:	187b      	adds	r3, r7, r1
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	2240      	movs	r2, #64	@ 0x40
 800b852:	4013      	ands	r3, r2
 800b854:	d000      	beq.n	800b858 <USB_EPStartXfer+0xd40>
 800b856:	e14e      	b.n	800baf6 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	18d3      	adds	r3, r2, r3
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a11      	ldr	r2, [pc, #68]	@ (800b8ac <USB_EPStartXfer+0xd94>)
 800b866:	4013      	ands	r3, r2
 800b868:	623b      	str	r3, [r7, #32]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	18d3      	adds	r3, r2, r3
 800b874:	6a3a      	ldr	r2, [r7, #32]
 800b876:	490e      	ldr	r1, [pc, #56]	@ (800b8b0 <USB_EPStartXfer+0xd98>)
 800b878:	430a      	orrs	r2, r1
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e13b      	b.n	800baf6 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	78db      	ldrb	r3, [r3, #3]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d000      	beq.n	800b888 <USB_EPStartXfer+0xd70>
 800b886:	e134      	b.n	800baf2 <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	699a      	ldr	r2, [r3, #24]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	429a      	cmp	r2, r3
 800b892:	d90f      	bls.n	800b8b4 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	699a      	ldr	r2, [r3, #24]
 800b89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	619a      	str	r2, [r3, #24]
 800b8a6:	e00b      	b.n	800b8c0 <USB_EPStartXfer+0xda8>
 800b8a8:	40009800 	.word	0x40009800
 800b8ac:	07ff8f8f 	.word	0x07ff8f8f
 800b8b0:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	785b      	ldrb	r3, [r3, #1]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d162      	bne.n	800b98e <USB_EPStartXfer+0xe76>
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	4a9a      	ldr	r2, [pc, #616]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b8d0:	4694      	mov	ip, r2
 800b8d2:	4463      	add	r3, ip
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	4996      	ldr	r1, [pc, #600]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b8de:	468c      	mov	ip, r1
 800b8e0:	4463      	add	r3, ip
 800b8e2:	0192      	lsls	r2, r2, #6
 800b8e4:	0992      	lsrs	r2, r2, #6
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8ec:	d91e      	bls.n	800b92c <USB_EPStartXfer+0xe14>
 800b8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f0:	095b      	lsrs	r3, r3, #5
 800b8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f6:	221f      	movs	r2, #31
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	d102      	bne.n	800b902 <USB_EPStartXfer+0xdea>
 800b8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fe:	3b01      	subs	r3, #1
 800b900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	4a8b      	ldr	r2, [pc, #556]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b90a:	4694      	mov	ip, r2
 800b90c:	4463      	add	r3, ip
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b912:	069b      	lsls	r3, r3, #26
 800b914:	431a      	orrs	r2, r3
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	4986      	ldr	r1, [pc, #536]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b91e:	468c      	mov	ip, r1
 800b920:	4463      	add	r3, ip
 800b922:	2180      	movs	r1, #128	@ 0x80
 800b924:	0609      	lsls	r1, r1, #24
 800b926:	430a      	orrs	r2, r1
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	e055      	b.n	800b9d8 <USB_EPStartXfer+0xec0>
 800b92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d111      	bne.n	800b956 <USB_EPStartXfer+0xe3e>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	4a7f      	ldr	r2, [pc, #508]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b93a:	4694      	mov	ip, r2
 800b93c:	4463      	add	r3, ip
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	497c      	ldr	r1, [pc, #496]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b948:	468c      	mov	ip, r1
 800b94a:	4463      	add	r3, ip
 800b94c:	2180      	movs	r1, #128	@ 0x80
 800b94e:	0609      	lsls	r1, r1, #24
 800b950:	430a      	orrs	r2, r1
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	e040      	b.n	800b9d8 <USB_EPStartXfer+0xec0>
 800b956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b95e:	2201      	movs	r2, #1
 800b960:	4013      	ands	r3, r2
 800b962:	d002      	beq.n	800b96a <USB_EPStartXfer+0xe52>
 800b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b966:	3301      	adds	r3, #1
 800b968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	4a71      	ldr	r2, [pc, #452]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b972:	4694      	mov	ip, r2
 800b974:	4463      	add	r3, ip
 800b976:	6819      	ldr	r1, [r3, #0]
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	069a      	lsls	r2, r3, #26
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	486d      	ldr	r0, [pc, #436]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b984:	4684      	mov	ip, r0
 800b986:	4463      	add	r3, ip
 800b988:	430a      	orrs	r2, r1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e024      	b.n	800b9d8 <USB_EPStartXfer+0xec0>
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	785b      	ldrb	r3, [r3, #1]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d120      	bne.n	800b9d8 <USB_EPStartXfer+0xec0>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	4a66      	ldr	r2, [pc, #408]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b99e:	4694      	mov	ip, r2
 800b9a0:	4463      	add	r3, ip
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	00db      	lsls	r3, r3, #3
 800b9aa:	4963      	ldr	r1, [pc, #396]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b9ac:	468c      	mov	ip, r1
 800b9ae:	4463      	add	r3, ip
 800b9b0:	0412      	lsls	r2, r2, #16
 800b9b2:	0c12      	lsrs	r2, r2, #16
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	00db      	lsls	r3, r3, #3
 800b9bc:	4a5e      	ldr	r2, [pc, #376]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b9be:	4694      	mov	ip, r2
 800b9c0:	4463      	add	r3, ip
 800b9c2:	6819      	ldr	r1, [r3, #0]
 800b9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9c6:	041a      	lsls	r2, r3, #16
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	485a      	ldr	r0, [pc, #360]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b9d0:	4684      	mov	ip, r0
 800b9d2:	4463      	add	r3, ip
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	785b      	ldrb	r3, [r3, #1]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d162      	bne.n	800baa6 <USB_EPStartXfer+0xf8e>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	4a54      	ldr	r2, [pc, #336]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b9e8:	4694      	mov	ip, r2
 800b9ea:	4463      	add	r3, ip
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	00db      	lsls	r3, r3, #3
 800b9f4:	4950      	ldr	r1, [pc, #320]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800b9f6:	468c      	mov	ip, r1
 800b9f8:	4463      	add	r3, ip
 800b9fa:	0192      	lsls	r2, r2, #6
 800b9fc:	0992      	lsrs	r2, r2, #6
 800b9fe:	605a      	str	r2, [r3, #4]
 800ba00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba02:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba04:	d91e      	bls.n	800ba44 <USB_EPStartXfer+0xf2c>
 800ba06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba0e:	221f      	movs	r2, #31
 800ba10:	4013      	ands	r3, r2
 800ba12:	d102      	bne.n	800ba1a <USB_EPStartXfer+0xf02>
 800ba14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba16:	3b01      	subs	r3, #1
 800ba18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	4a45      	ldr	r2, [pc, #276]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba22:	4694      	mov	ip, r2
 800ba24:	4463      	add	r3, ip
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2a:	069b      	lsls	r3, r3, #26
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	4940      	ldr	r1, [pc, #256]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba36:	468c      	mov	ip, r1
 800ba38:	4463      	add	r3, ip
 800ba3a:	2180      	movs	r1, #128	@ 0x80
 800ba3c:	0609      	lsls	r1, r1, #24
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	605a      	str	r2, [r3, #4]
 800ba42:	e058      	b.n	800baf6 <USB_EPStartXfer+0xfde>
 800ba44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d111      	bne.n	800ba6e <USB_EPStartXfer+0xf56>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	4a39      	ldr	r2, [pc, #228]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba52:	4694      	mov	ip, r2
 800ba54:	4463      	add	r3, ip
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	4936      	ldr	r1, [pc, #216]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba60:	468c      	mov	ip, r1
 800ba62:	4463      	add	r3, ip
 800ba64:	2180      	movs	r1, #128	@ 0x80
 800ba66:	0609      	lsls	r1, r1, #24
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	605a      	str	r2, [r3, #4]
 800ba6c:	e043      	b.n	800baf6 <USB_EPStartXfer+0xfde>
 800ba6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba70:	085b      	lsrs	r3, r3, #1
 800ba72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba76:	2201      	movs	r2, #1
 800ba78:	4013      	ands	r3, r2
 800ba7a:	d002      	beq.n	800ba82 <USB_EPStartXfer+0xf6a>
 800ba7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7e:	3301      	adds	r3, #1
 800ba80:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	4a2b      	ldr	r2, [pc, #172]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba8a:	4694      	mov	ip, r2
 800ba8c:	4463      	add	r3, ip
 800ba8e:	6859      	ldr	r1, [r3, #4]
 800ba90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba92:	069a      	lsls	r2, r3, #26
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	4827      	ldr	r0, [pc, #156]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800ba9c:	4684      	mov	ip, r0
 800ba9e:	4463      	add	r3, ip
 800baa0:	430a      	orrs	r2, r1
 800baa2:	605a      	str	r2, [r3, #4]
 800baa4:	e027      	b.n	800baf6 <USB_EPStartXfer+0xfde>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	785b      	ldrb	r3, [r3, #1]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d123      	bne.n	800baf6 <USB_EPStartXfer+0xfde>
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4a20      	ldr	r2, [pc, #128]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800bab6:	4694      	mov	ip, r2
 800bab8:	4463      	add	r3, ip
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	00db      	lsls	r3, r3, #3
 800bac2:	491d      	ldr	r1, [pc, #116]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800bac4:	468c      	mov	ip, r1
 800bac6:	4463      	add	r3, ip
 800bac8:	0412      	lsls	r2, r2, #16
 800baca:	0c12      	lsrs	r2, r2, #16
 800bacc:	605a      	str	r2, [r3, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	4a18      	ldr	r2, [pc, #96]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800bad6:	4694      	mov	ip, r2
 800bad8:	4463      	add	r3, ip
 800bada:	6859      	ldr	r1, [r3, #4]
 800badc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bade:	041a      	lsls	r2, r3, #16
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	4814      	ldr	r0, [pc, #80]	@ (800bb38 <USB_EPStartXfer+0x1020>)
 800bae8:	4684      	mov	ip, r0
 800baea:	4463      	add	r3, ip
 800baec:	430a      	orrs	r2, r1
 800baee:	605a      	str	r2, [r3, #4]
 800baf0:	e001      	b.n	800baf6 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e01c      	b.n	800bb30 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	18d3      	adds	r3, r2, r3
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a0e      	ldr	r2, [pc, #56]	@ (800bb3c <USB_EPStartXfer+0x1024>)
 800bb04:	4013      	ands	r3, r2
 800bb06:	61fb      	str	r3, [r7, #28]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	2280      	movs	r2, #128	@ 0x80
 800bb0c:	0152      	lsls	r2, r2, #5
 800bb0e:	4053      	eors	r3, r2
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	2280      	movs	r2, #128	@ 0x80
 800bb16:	0192      	lsls	r2, r2, #6
 800bb18:	4053      	eors	r3, r2
 800bb1a:	61fb      	str	r3, [r7, #28]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	18d3      	adds	r3, r2, r3
 800bb26:	69fa      	ldr	r2, [r7, #28]
 800bb28:	4905      	ldr	r1, [pc, #20]	@ (800bb40 <USB_EPStartXfer+0x1028>)
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	0018      	movs	r0, r3
 800bb32:	46bd      	mov	sp, r7
 800bb34:	b017      	add	sp, #92	@ 0x5c
 800bb36:	bd90      	pop	{r4, r7, pc}
 800bb38:	40009800 	.word	0x40009800
 800bb3c:	07ffbf8f 	.word	0x07ffbf8f
 800bb40:	00008080 	.word	0x00008080

0800bb44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	785b      	ldrb	r3, [r3, #1]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	18d3      	adds	r3, r2, r3
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a16      	ldr	r2, [pc, #88]	@ (800bbbc <USB_EPSetStall+0x78>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	60bb      	str	r3, [r7, #8]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2210      	movs	r2, #16
 800bb6c:	4053      	eors	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	18d3      	adds	r3, r2, r3
 800bb7a:	68ba      	ldr	r2, [r7, #8]
 800bb7c:	4910      	ldr	r1, [pc, #64]	@ (800bbc0 <USB_EPSetStall+0x7c>)
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	e016      	b.n	800bbb2 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	18d3      	adds	r3, r2, r3
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a0c      	ldr	r2, [pc, #48]	@ (800bbc4 <USB_EPSetStall+0x80>)
 800bb92:	4013      	ands	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2280      	movs	r2, #128	@ 0x80
 800bb9a:	0152      	lsls	r2, r2, #5
 800bb9c:	4053      	eors	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	18d3      	adds	r3, r2, r3
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4904      	ldr	r1, [pc, #16]	@ (800bbc0 <USB_EPSetStall+0x7c>)
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	b004      	add	sp, #16
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	07ff8fbf 	.word	0x07ff8fbf
 800bbc0:	00008080 	.word	0x00008080
 800bbc4:	07ffbf8f 	.word	0x07ffbf8f

0800bbc8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	7b1b      	ldrb	r3, [r3, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d000      	beq.n	800bbdc <USB_EPClearStall+0x14>
 800bbda:	e075      	b.n	800bcc8 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	785b      	ldrb	r3, [r3, #1]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d037      	beq.n	800bc54 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	18d3      	adds	r3, r2, r3
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	613b      	str	r3, [r7, #16]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2240      	movs	r2, #64	@ 0x40
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d011      	beq.n	800bc1e <USB_EPClearStall+0x56>
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	18d3      	adds	r3, r2, r3
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a33      	ldr	r2, [pc, #204]	@ (800bcd4 <USB_EPClearStall+0x10c>)
 800bc08:	4013      	ands	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	18d3      	adds	r3, r2, r3
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	492f      	ldr	r1, [pc, #188]	@ (800bcd8 <USB_EPClearStall+0x110>)
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	78db      	ldrb	r3, [r3, #3]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d050      	beq.n	800bcc8 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	18d3      	adds	r3, r2, r3
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a2a      	ldr	r2, [pc, #168]	@ (800bcdc <USB_EPClearStall+0x114>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	60bb      	str	r3, [r7, #8]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	4053      	eors	r3, r2
 800bc3e:	60bb      	str	r3, [r7, #8]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	18d3      	adds	r3, r2, r3
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	4924      	ldr	r1, [pc, #144]	@ (800bce0 <USB_EPClearStall+0x118>)
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	e039      	b.n	800bcc8 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	18d3      	adds	r3, r2, r3
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	61fb      	str	r3, [r7, #28]
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	2380      	movs	r3, #128	@ 0x80
 800bc66:	01db      	lsls	r3, r3, #7
 800bc68:	4013      	ands	r3, r2
 800bc6a:	d011      	beq.n	800bc90 <USB_EPClearStall+0xc8>
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	18d3      	adds	r3, r2, r3
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a16      	ldr	r2, [pc, #88]	@ (800bcd4 <USB_EPClearStall+0x10c>)
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	18d3      	adds	r3, r2, r3
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	4916      	ldr	r1, [pc, #88]	@ (800bce4 <USB_EPClearStall+0x11c>)
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	18d3      	adds	r3, r2, r3
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a12      	ldr	r2, [pc, #72]	@ (800bce8 <USB_EPClearStall+0x120>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2280      	movs	r2, #128	@ 0x80
 800bca6:	0152      	lsls	r2, r2, #5
 800bca8:	4053      	eors	r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2280      	movs	r2, #128	@ 0x80
 800bcb0:	0192      	lsls	r2, r2, #6
 800bcb2:	4053      	eors	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	18d3      	adds	r3, r2, r3
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	4907      	ldr	r1, [pc, #28]	@ (800bce0 <USB_EPClearStall+0x118>)
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	0018      	movs	r0, r3
 800bccc:	46bd      	mov	sp, r7
 800bcce:	b008      	add	sp, #32
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	46c0      	nop			@ (mov r8, r8)
 800bcd4:	07ff8f8f 	.word	0x07ff8f8f
 800bcd8:	000080c0 	.word	0x000080c0
 800bcdc:	07ff8fbf 	.word	0x07ff8fbf
 800bce0:	00008080 	.word	0x00008080
 800bce4:	0000c080 	.word	0x0000c080
 800bce8:	07ffbf8f 	.word	0x07ffbf8f

0800bcec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	000a      	movs	r2, r1
 800bcf6:	1cfb      	adds	r3, r7, #3
 800bcf8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800bcfa:	1cfb      	adds	r3, r7, #3
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2280      	movs	r2, #128	@ 0x80
 800bd06:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	0018      	movs	r0, r3
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd1e:	2280      	movs	r2, #128	@ 0x80
 800bd20:	0212      	lsls	r2, r2, #8
 800bd22:	431a      	orrs	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	b002      	add	sp, #8
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd40:	68fb      	ldr	r3, [r7, #12]
}
 800bd42:	0018      	movs	r0, r3
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b004      	add	sp, #16
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	@ 0x28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	0019      	movs	r1, r3
 800bd58:	1dbb      	adds	r3, r7, #6
 800bd5a:	801a      	strh	r2, [r3, #0]
 800bd5c:	1d3b      	adds	r3, r7, #4
 800bd5e:	1c0a      	adds	r2, r1, #0
 800bd60:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800bd62:	1d3b      	adds	r3, r7, #4
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	3303      	adds	r3, #3
 800bd68:	089b      	lsrs	r3, r3, #2
 800bd6a:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800bd6c:	2016      	movs	r0, #22
 800bd6e:	183b      	adds	r3, r7, r0
 800bd70:	1d3a      	adds	r2, r7, #4
 800bd72:	8812      	ldrh	r2, [r2, #0]
 800bd74:	2103      	movs	r1, #3
 800bd76:	400a      	ands	r2, r1
 800bd78:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800bd7e:	183b      	adds	r3, r7, r0
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <USB_WritePMA+0x40>
  {
    NbWords--;
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800bd8c:	1dbb      	adds	r3, r7, #6
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	4a28      	ldr	r2, [pc, #160]	@ (800be34 <USB_WritePMA+0xe8>)
 800bd92:	4694      	mov	ip, r2
 800bd94:	4463      	add	r3, ip
 800bd96:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	623b      	str	r3, [r7, #32]
 800bd9c:	e01f      	b.n	800bdde <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	7859      	ldrb	r1, [r3, #1]
 800bda4:	0209      	lsls	r1, r1, #8
 800bda6:	430a      	orrs	r2, r1
 800bda8:	7899      	ldrb	r1, [r3, #2]
 800bdaa:	0409      	lsls	r1, r1, #16
 800bdac:	430a      	orrs	r2, r1
 800bdae:	78db      	ldrb	r3, [r3, #3]
 800bdb0:	061b      	lsls	r3, r3, #24
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	001a      	movs	r2, r3
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	623b      	str	r3, [r7, #32]
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1dc      	bne.n	800bd9e <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800bde4:	2316      	movs	r3, #22
 800bde6:	18fb      	adds	r3, r7, r3
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01e      	beq.n	800be2c <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	001a      	movs	r2, r3
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	409a      	lsls	r2, r3
 800bdfe:	0013      	movs	r3, r2
 800be00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be02:	4313      	orrs	r3, r2
 800be04:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	3301      	adds	r3, #1
 800be0a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	3301      	adds	r3, #1
 800be10:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800be12:	2116      	movs	r1, #22
 800be14:	187b      	adds	r3, r7, r1
 800be16:	881a      	ldrh	r2, [r3, #0]
 800be18:	187b      	adds	r3, r7, r1
 800be1a:	3a01      	subs	r2, #1
 800be1c:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800be1e:	187b      	adds	r3, r7, r1
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e5      	bne.n	800bdf2 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be2a:	601a      	str	r2, [r3, #0]
  }
}
 800be2c:	46c0      	nop			@ (mov r8, r8)
 800be2e:	46bd      	mov	sp, r7
 800be30:	b00a      	add	sp, #40	@ 0x28
 800be32:	bd80      	pop	{r7, pc}
 800be34:	40009800 	.word	0x40009800

0800be38 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be38:	b590      	push	{r4, r7, lr}
 800be3a:	b08b      	sub	sp, #44	@ 0x2c
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	0019      	movs	r1, r3
 800be44:	1dbb      	adds	r3, r7, #6
 800be46:	801a      	strh	r2, [r3, #0]
 800be48:	1d3b      	adds	r3, r7, #4
 800be4a:	1c0a      	adds	r2, r1, #0
 800be4c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800be4e:	1d3b      	adds	r3, r7, #4
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	3303      	adds	r3, #3
 800be54:	089b      	lsrs	r3, r3, #2
 800be56:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800be58:	201a      	movs	r0, #26
 800be5a:	183b      	adds	r3, r7, r0
 800be5c:	1d3a      	adds	r2, r7, #4
 800be5e:	8812      	ldrh	r2, [r2, #0]
 800be60:	2103      	movs	r1, #3
 800be62:	400a      	ands	r2, r1
 800be64:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800be6a:	1dbb      	adds	r3, r7, #6
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	4a39      	ldr	r2, [pc, #228]	@ (800bf54 <USB_ReadPMA+0x11c>)
 800be70:	4694      	mov	ip, r2
 800be72:	4463      	add	r3, ip
 800be74:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800be76:	183b      	adds	r3, r7, r0
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	3b01      	subs	r3, #1
 800be82:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	627b      	str	r3, [r7, #36]	@ 0x24
 800be88:	e03c      	b.n	800bf04 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	21ff      	movs	r1, #255	@ 0xff
 800be92:	4011      	ands	r1, r2
 800be94:	000c      	movs	r4, r1
 800be96:	7819      	ldrb	r1, [r3, #0]
 800be98:	2000      	movs	r0, #0
 800be9a:	4001      	ands	r1, r0
 800be9c:	1c08      	adds	r0, r1, #0
 800be9e:	1c21      	adds	r1, r4, #0
 800bea0:	4301      	orrs	r1, r0
 800bea2:	7019      	strb	r1, [r3, #0]
 800bea4:	0a11      	lsrs	r1, r2, #8
 800bea6:	20ff      	movs	r0, #255	@ 0xff
 800bea8:	4001      	ands	r1, r0
 800beaa:	000c      	movs	r4, r1
 800beac:	7859      	ldrb	r1, [r3, #1]
 800beae:	2000      	movs	r0, #0
 800beb0:	4001      	ands	r1, r0
 800beb2:	1c08      	adds	r0, r1, #0
 800beb4:	1c21      	adds	r1, r4, #0
 800beb6:	4301      	orrs	r1, r0
 800beb8:	7059      	strb	r1, [r3, #1]
 800beba:	0c11      	lsrs	r1, r2, #16
 800bebc:	20ff      	movs	r0, #255	@ 0xff
 800bebe:	4001      	ands	r1, r0
 800bec0:	000c      	movs	r4, r1
 800bec2:	7899      	ldrb	r1, [r3, #2]
 800bec4:	2000      	movs	r0, #0
 800bec6:	4001      	ands	r1, r0
 800bec8:	1c08      	adds	r0, r1, #0
 800beca:	1c21      	adds	r1, r4, #0
 800becc:	4301      	orrs	r1, r0
 800bece:	7099      	strb	r1, [r3, #2]
 800bed0:	0e10      	lsrs	r0, r2, #24
 800bed2:	78da      	ldrb	r2, [r3, #3]
 800bed4:	2100      	movs	r1, #0
 800bed6:	400a      	ands	r2, r1
 800bed8:	1c11      	adds	r1, r2, #0
 800beda:	1c02      	adds	r2, r0, #0
 800bedc:	430a      	orrs	r2, r1
 800bede:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800bee0:	6a3b      	ldr	r3, [r7, #32]
 800bee2:	3304      	adds	r3, #4
 800bee4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	3301      	adds	r3, #1
 800beea:	617b      	str	r3, [r7, #20]
    pBuf++;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	3301      	adds	r3, #1
 800bef0:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	3301      	adds	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3301      	adds	r3, #1
 800befc:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800befe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf00:	3b01      	subs	r3, #1
 800bf02:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1bf      	bne.n	800be8a <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800bf0a:	231a      	movs	r3, #26
 800bf0c:	18fb      	adds	r3, r7, r3
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01b      	beq.n	800bf4c <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	40da      	lsrs	r2, r3
 800bf24:	0013      	movs	r3, r2
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	701a      	strb	r2, [r3, #0]
      count++;
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	3301      	adds	r3, #1
 800bf30:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	3301      	adds	r3, #1
 800bf36:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800bf38:	211a      	movs	r1, #26
 800bf3a:	187b      	adds	r3, r7, r1
 800bf3c:	881a      	ldrh	r2, [r3, #0]
 800bf3e:	187b      	adds	r3, r7, r1
 800bf40:	3a01      	subs	r2, #1
 800bf42:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800bf44:	187b      	adds	r3, r7, r1
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1e6      	bne.n	800bf1a <USB_ReadPMA+0xe2>
  }
}
 800bf4c:	46c0      	nop			@ (mov r8, r8)
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b00b      	add	sp, #44	@ 0x2c
 800bf52:	bd90      	pop	{r4, r7, pc}
 800bf54:	40009800 	.word	0x40009800

0800bf58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	000a      	movs	r2, r1
 800bf62:	1cfb      	adds	r3, r7, #3
 800bf64:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf66:	2387      	movs	r3, #135	@ 0x87
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	0018      	movs	r0, r3
 800bf6c:	f002 ff74 	bl	800ee58 <USBD_static_malloc>
 800bf70:	0003      	movs	r3, r0
 800bf72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	23b5      	movs	r3, #181	@ 0xb5
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	58d2      	ldr	r2, [r2, r3]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	32b0      	adds	r2, #176	@ 0xb0
 800bf86:	0092      	lsls	r2, r2, #2
 800bf88:	2100      	movs	r1, #0
 800bf8a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	e0e9      	b.n	800c164 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bf90:	2387      	movs	r3, #135	@ 0x87
 800bf92:	009a      	lsls	r2, r3, #2
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2100      	movs	r1, #0
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f004 fb79 	bl	8010690 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	23b5      	movs	r3, #181	@ 0xb5
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	58d2      	ldr	r2, [r2, r3]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	32b0      	adds	r2, #176	@ 0xb0
 800bfaa:	0092      	lsls	r2, r2, #2
 800bfac:	68f9      	ldr	r1, [r7, #12]
 800bfae:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	23b5      	movs	r3, #181	@ 0xb5
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	58d2      	ldr	r2, [r2, r3]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	32b0      	adds	r2, #176	@ 0xb0
 800bfbc:	0092      	lsls	r2, r2, #2
 800bfbe:	58d1      	ldr	r1, [r2, r3]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	23af      	movs	r3, #175	@ 0xaf
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7c1b      	ldrb	r3, [r3, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d13c      	bne.n	800c04a <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfd0:	4b66      	ldr	r3, [pc, #408]	@ (800c16c <USBD_CDC_Init+0x214>)
 800bfd2:	7819      	ldrb	r1, [r3, #0]
 800bfd4:	2380      	movs	r3, #128	@ 0x80
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f002 fd79 	bl	800ead2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bfe0:	4b62      	ldr	r3, [pc, #392]	@ (800c16c <USBD_CDC_Init+0x214>)
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	001a      	movs	r2, r3
 800bfe6:	230f      	movs	r3, #15
 800bfe8:	401a      	ands	r2, r3
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	0013      	movs	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	189b      	adds	r3, r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	18cb      	adds	r3, r1, r3
 800bff6:	3324      	adds	r3, #36	@ 0x24
 800bff8:	2201      	movs	r2, #1
 800bffa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bffc:	4b5c      	ldr	r3, [pc, #368]	@ (800c170 <USBD_CDC_Init+0x218>)
 800bffe:	7819      	ldrb	r1, [r3, #0]
 800c000:	2380      	movs	r3, #128	@ 0x80
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	2202      	movs	r2, #2
 800c008:	f002 fd63 	bl	800ead2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c00c:	4b58      	ldr	r3, [pc, #352]	@ (800c170 <USBD_CDC_Init+0x218>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	001a      	movs	r2, r3
 800c012:	230f      	movs	r3, #15
 800c014:	401a      	ands	r2, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	23b2      	movs	r3, #178	@ 0xb2
 800c01a:	0059      	lsls	r1, r3, #1
 800c01c:	0013      	movs	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	189b      	adds	r3, r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	18c3      	adds	r3, r0, r3
 800c026:	185b      	adds	r3, r3, r1
 800c028:	2201      	movs	r2, #1
 800c02a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c02c:	4b51      	ldr	r3, [pc, #324]	@ (800c174 <USBD_CDC_Init+0x21c>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	001a      	movs	r2, r3
 800c032:	230f      	movs	r3, #15
 800c034:	401a      	ands	r2, r3
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	0013      	movs	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	189b      	adds	r3, r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	18cb      	adds	r3, r1, r3
 800c042:	3326      	adds	r3, #38	@ 0x26
 800c044:	2210      	movs	r2, #16
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	e039      	b.n	800c0be <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c04a:	4b48      	ldr	r3, [pc, #288]	@ (800c16c <USBD_CDC_Init+0x214>)
 800c04c:	7819      	ldrb	r1, [r3, #0]
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	2340      	movs	r3, #64	@ 0x40
 800c052:	2202      	movs	r2, #2
 800c054:	f002 fd3d 	bl	800ead2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c058:	4b44      	ldr	r3, [pc, #272]	@ (800c16c <USBD_CDC_Init+0x214>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	001a      	movs	r2, r3
 800c05e:	230f      	movs	r3, #15
 800c060:	401a      	ands	r2, r3
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	0013      	movs	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	189b      	adds	r3, r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	18cb      	adds	r3, r1, r3
 800c06e:	3324      	adds	r3, #36	@ 0x24
 800c070:	2201      	movs	r2, #1
 800c072:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c074:	4b3e      	ldr	r3, [pc, #248]	@ (800c170 <USBD_CDC_Init+0x218>)
 800c076:	7819      	ldrb	r1, [r3, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	2340      	movs	r3, #64	@ 0x40
 800c07c:	2202      	movs	r2, #2
 800c07e:	f002 fd28 	bl	800ead2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c082:	4b3b      	ldr	r3, [pc, #236]	@ (800c170 <USBD_CDC_Init+0x218>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	001a      	movs	r2, r3
 800c088:	230f      	movs	r3, #15
 800c08a:	401a      	ands	r2, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	23b2      	movs	r3, #178	@ 0xb2
 800c090:	0059      	lsls	r1, r3, #1
 800c092:	0013      	movs	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	189b      	adds	r3, r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	18c3      	adds	r3, r0, r3
 800c09c:	185b      	adds	r3, r3, r1
 800c09e:	2201      	movs	r2, #1
 800c0a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0a2:	4b34      	ldr	r3, [pc, #208]	@ (800c174 <USBD_CDC_Init+0x21c>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	001a      	movs	r2, r3
 800c0a8:	230f      	movs	r3, #15
 800c0aa:	401a      	ands	r2, r3
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	0013      	movs	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	189b      	adds	r3, r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	18cb      	adds	r3, r1, r3
 800c0b8:	3326      	adds	r3, #38	@ 0x26
 800c0ba:	2210      	movs	r2, #16
 800c0bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0be:	4b2d      	ldr	r3, [pc, #180]	@ (800c174 <USBD_CDC_Init+0x21c>)
 800c0c0:	7819      	ldrb	r1, [r3, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	2308      	movs	r3, #8
 800c0c6:	2203      	movs	r2, #3
 800c0c8:	f002 fd03 	bl	800ead2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0cc:	4b29      	ldr	r3, [pc, #164]	@ (800c174 <USBD_CDC_Init+0x21c>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	001a      	movs	r2, r3
 800c0d2:	230f      	movs	r3, #15
 800c0d4:	401a      	ands	r2, r3
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	0013      	movs	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	189b      	adds	r3, r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	18cb      	adds	r3, r1, r3
 800c0e2:	3324      	adds	r3, #36	@ 0x24
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	2381      	movs	r3, #129	@ 0x81
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	23b5      	movs	r3, #181	@ 0xb5
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	58d3      	ldr	r3, [r2, r3]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	33b0      	adds	r3, #176	@ 0xb0
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	18d3      	adds	r3, r2, r3
 800c102:	3304      	adds	r3, #4
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	2385      	movs	r3, #133	@ 0x85
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	2100      	movs	r1, #0
 800c112:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	2386      	movs	r3, #134	@ 0x86
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	2100      	movs	r1, #0
 800c11c:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	2381      	movs	r3, #129	@ 0x81
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	58d3      	ldr	r3, [r2, r3]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 800c12a:	2302      	movs	r3, #2
 800c12c:	e01a      	b.n	800c164 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	7c1b      	ldrb	r3, [r3, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10b      	bne.n	800c14e <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c136:	4b0e      	ldr	r3, [pc, #56]	@ (800c170 <USBD_CDC_Init+0x218>)
 800c138:	7819      	ldrb	r1, [r3, #0]
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	2381      	movs	r3, #129	@ 0x81
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	58d2      	ldr	r2, [r2, r3]
 800c142:	2380      	movs	r3, #128	@ 0x80
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f002 fe06 	bl	800ed58 <USBD_LL_PrepareReceive>
 800c14c:	e009      	b.n	800c162 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c14e:	4b08      	ldr	r3, [pc, #32]	@ (800c170 <USBD_CDC_Init+0x218>)
 800c150:	7819      	ldrb	r1, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	2381      	movs	r3, #129	@ 0x81
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	58d2      	ldr	r2, [r2, r3]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	2340      	movs	r3, #64	@ 0x40
 800c15e:	f002 fdfb 	bl	800ed58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	0018      	movs	r0, r3
 800c166:	46bd      	mov	sp, r7
 800c168:	b004      	add	sp, #16
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	20000123 	.word	0x20000123
 800c170:	20000124 	.word	0x20000124
 800c174:	20000125 	.word	0x20000125

0800c178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	000a      	movs	r2, r1
 800c182:	1cfb      	adds	r3, r7, #3
 800c184:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c186:	4b41      	ldr	r3, [pc, #260]	@ (800c28c <USBD_CDC_DeInit+0x114>)
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	0011      	movs	r1, r2
 800c18e:	0018      	movs	r0, r3
 800c190:	f002 fcd6 	bl	800eb40 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c194:	4b3d      	ldr	r3, [pc, #244]	@ (800c28c <USBD_CDC_DeInit+0x114>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	001a      	movs	r2, r3
 800c19a:	230f      	movs	r3, #15
 800c19c:	401a      	ands	r2, r3
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	0013      	movs	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	189b      	adds	r3, r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	18cb      	adds	r3, r1, r3
 800c1aa:	3324      	adds	r3, #36	@ 0x24
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c1b0:	4b37      	ldr	r3, [pc, #220]	@ (800c290 <USBD_CDC_DeInit+0x118>)
 800c1b2:	781a      	ldrb	r2, [r3, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	0011      	movs	r1, r2
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f002 fcc1 	bl	800eb40 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c1be:	4b34      	ldr	r3, [pc, #208]	@ (800c290 <USBD_CDC_DeInit+0x118>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	001a      	movs	r2, r3
 800c1c4:	230f      	movs	r3, #15
 800c1c6:	401a      	ands	r2, r3
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	23b2      	movs	r3, #178	@ 0xb2
 800c1cc:	0059      	lsls	r1, r3, #1
 800c1ce:	0013      	movs	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	189b      	adds	r3, r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	18c3      	adds	r3, r0, r3
 800c1d8:	185b      	adds	r3, r3, r1
 800c1da:	2200      	movs	r2, #0
 800c1dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1de:	4b2d      	ldr	r3, [pc, #180]	@ (800c294 <USBD_CDC_DeInit+0x11c>)
 800c1e0:	781a      	ldrb	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	0011      	movs	r1, r2
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f002 fcaa 	bl	800eb40 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1ec:	4b29      	ldr	r3, [pc, #164]	@ (800c294 <USBD_CDC_DeInit+0x11c>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	001a      	movs	r2, r3
 800c1f2:	230f      	movs	r3, #15
 800c1f4:	401a      	ands	r2, r3
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	0013      	movs	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	189b      	adds	r3, r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	18cb      	adds	r3, r1, r3
 800c202:	3324      	adds	r3, #36	@ 0x24
 800c204:	2200      	movs	r2, #0
 800c206:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c208:	4b22      	ldr	r3, [pc, #136]	@ (800c294 <USBD_CDC_DeInit+0x11c>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	001a      	movs	r2, r3
 800c20e:	230f      	movs	r3, #15
 800c210:	401a      	ands	r2, r3
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	0013      	movs	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	189b      	adds	r3, r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	18cb      	adds	r3, r1, r3
 800c21e:	3326      	adds	r3, #38	@ 0x26
 800c220:	2200      	movs	r2, #0
 800c222:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	23b5      	movs	r3, #181	@ 0xb5
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	58d2      	ldr	r2, [r2, r3]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	32b0      	adds	r2, #176	@ 0xb0
 800c230:	0092      	lsls	r2, r2, #2
 800c232:	58d3      	ldr	r3, [r2, r3]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d024      	beq.n	800c282 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	23b5      	movs	r3, #181	@ 0xb5
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	58d3      	ldr	r3, [r2, r3]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	33b0      	adds	r3, #176	@ 0xb0
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	18d3      	adds	r3, r2, r3
 800c248:	3304      	adds	r3, #4
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	23b5      	movs	r3, #181	@ 0xb5
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	58d2      	ldr	r2, [r2, r3]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32b0      	adds	r2, #176	@ 0xb0
 800c25c:	0092      	lsls	r2, r2, #2
 800c25e:	58d3      	ldr	r3, [r2, r3]
 800c260:	0018      	movs	r0, r3
 800c262:	f002 fe05 	bl	800ee70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	23b5      	movs	r3, #181	@ 0xb5
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	58d2      	ldr	r2, [r2, r3]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	32b0      	adds	r2, #176	@ 0xb0
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	2100      	movs	r1, #0
 800c276:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	23af      	movs	r3, #175	@ 0xaf
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	2100      	movs	r1, #0
 800c280:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	0018      	movs	r0, r3
 800c286:	46bd      	mov	sp, r7
 800c288:	b002      	add	sp, #8
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20000123 	.word	0x20000123
 800c290:	20000124 	.word	0x20000124
 800c294:	20000125 	.word	0x20000125

0800c298 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	23b5      	movs	r3, #181	@ 0xb5
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	58d2      	ldr	r2, [r2, r3]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	32b0      	adds	r2, #176	@ 0xb0
 800c2ae:	0092      	lsls	r2, r2, #2
 800c2b0:	58d3      	ldr	r3, [r2, r3]
 800c2b2:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c2b4:	230d      	movs	r3, #13
 800c2b6:	18fb      	adds	r3, r7, r3
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800c2bc:	230a      	movs	r3, #10
 800c2be:	18fb      	adds	r3, r7, r3
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c4:	2317      	movs	r3, #23
 800c2c6:	18fb      	adds	r3, r7, r3
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e0d1      	b.n	800c47a <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	001a      	movs	r2, r3
 800c2dc:	2360      	movs	r3, #96	@ 0x60
 800c2de:	4013      	ands	r3, r2
 800c2e0:	d05b      	beq.n	800c39a <USBD_CDC_Setup+0x102>
 800c2e2:	2b20      	cmp	r3, #32
 800c2e4:	d000      	beq.n	800c2e8 <USBD_CDC_Setup+0x50>
 800c2e6:	e0ba      	b.n	800c45e <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	88db      	ldrh	r3, [r3, #6]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d043      	beq.n	800c378 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	b25b      	sxtb	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da22      	bge.n	800c340 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	23b5      	movs	r3, #181	@ 0xb5
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	58d3      	ldr	r3, [r2, r3]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	33b0      	adds	r3, #176	@ 0xb0
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	18d3      	adds	r3, r2, r3
 800c30a:	3304      	adds	r3, #4
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c314:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	88d2      	ldrh	r2, [r2, #6]
 800c31a:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	88db      	ldrh	r3, [r3, #6]
 800c320:	220e      	movs	r2, #14
 800c322:	18ba      	adds	r2, r7, r2
 800c324:	b299      	uxth	r1, r3
 800c326:	2907      	cmp	r1, #7
 800c328:	d900      	bls.n	800c32c <USBD_CDC_Setup+0x94>
 800c32a:	2307      	movs	r3, #7
 800c32c:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c32e:	6939      	ldr	r1, [r7, #16]
 800c330:	230e      	movs	r3, #14
 800c332:	18fb      	adds	r3, r7, r3
 800c334:	881a      	ldrh	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	0018      	movs	r0, r3
 800c33a:	f001 ff87 	bl	800e24c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c33e:	e099      	b.n	800c474 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	7859      	ldrb	r1, [r3, #1]
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	2380      	movs	r3, #128	@ 0x80
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	88db      	ldrh	r3, [r3, #6]
 800c350:	2b3f      	cmp	r3, #63	@ 0x3f
 800c352:	d803      	bhi.n	800c35c <USBD_CDC_Setup+0xc4>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	88db      	ldrh	r3, [r3, #6]
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	e000      	b.n	800c35e <USBD_CDC_Setup+0xc6>
 800c35c:	2240      	movs	r2, #64	@ 0x40
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	4948      	ldr	r1, [pc, #288]	@ (800c484 <USBD_CDC_Setup+0x1ec>)
 800c362:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c364:	6939      	ldr	r1, [r7, #16]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	4a46      	ldr	r2, [pc, #280]	@ (800c484 <USBD_CDC_Setup+0x1ec>)
 800c36a:	5c9b      	ldrb	r3, [r3, r2]
 800c36c:	001a      	movs	r2, r3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	0018      	movs	r0, r3
 800c372:	f001 ff98 	bl	800e2a6 <USBD_CtlPrepareRx>
      break;
 800c376:	e07d      	b.n	800c474 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	23b5      	movs	r3, #181	@ 0xb5
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	58d3      	ldr	r3, [r2, r3]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	33b0      	adds	r3, #176	@ 0xb0
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	18d3      	adds	r3, r2, r3
 800c388:	3304      	adds	r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	7850      	ldrb	r0, [r2, #1]
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	2200      	movs	r2, #0
 800c396:	4798      	blx	r3
      break;
 800c398:	e06c      	b.n	800c474 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	785b      	ldrb	r3, [r3, #1]
 800c39e:	2b0b      	cmp	r3, #11
 800c3a0:	d03c      	beq.n	800c41c <USBD_CDC_Setup+0x184>
 800c3a2:	dc4d      	bgt.n	800c440 <USBD_CDC_Setup+0x1a8>
 800c3a4:	2b0a      	cmp	r3, #10
 800c3a6:	d01f      	beq.n	800c3e8 <USBD_CDC_Setup+0x150>
 800c3a8:	dc4a      	bgt.n	800c440 <USBD_CDC_Setup+0x1a8>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <USBD_CDC_Setup+0x11c>
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d051      	beq.n	800c456 <USBD_CDC_Setup+0x1be>
 800c3b2:	e045      	b.n	800c440 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	23a7      	movs	r3, #167	@ 0xa7
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	5cd3      	ldrb	r3, [r2, r3]
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d107      	bne.n	800c3d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3c2:	230a      	movs	r3, #10
 800c3c4:	18f9      	adds	r1, r7, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	f001 ff3e 	bl	800e24c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3d0:	e044      	b.n	800c45c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	0011      	movs	r1, r2
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f001 feaf 	bl	800e13c <USBD_CtlError>
            ret = USBD_FAIL;
 800c3de:	2317      	movs	r3, #23
 800c3e0:	18fb      	adds	r3, r7, r3
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	701a      	strb	r2, [r3, #0]
          break;
 800c3e6:	e039      	b.n	800c45c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	23a7      	movs	r3, #167	@ 0xa7
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	5cd3      	ldrb	r3, [r2, r3]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d107      	bne.n	800c406 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3f6:	230d      	movs	r3, #13
 800c3f8:	18f9      	adds	r1, r7, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	0018      	movs	r0, r3
 800c400:	f001 ff24 	bl	800e24c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c404:	e02a      	b.n	800c45c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	0011      	movs	r1, r2
 800c40c:	0018      	movs	r0, r3
 800c40e:	f001 fe95 	bl	800e13c <USBD_CtlError>
            ret = USBD_FAIL;
 800c412:	2317      	movs	r3, #23
 800c414:	18fb      	adds	r3, r7, r3
 800c416:	2203      	movs	r2, #3
 800c418:	701a      	strb	r2, [r3, #0]
          break;
 800c41a:	e01f      	b.n	800c45c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	23a7      	movs	r3, #167	@ 0xa7
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	5cd3      	ldrb	r3, [r2, r3]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b03      	cmp	r3, #3
 800c428:	d017      	beq.n	800c45a <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	0011      	movs	r1, r2
 800c430:	0018      	movs	r0, r3
 800c432:	f001 fe83 	bl	800e13c <USBD_CtlError>
            ret = USBD_FAIL;
 800c436:	2317      	movs	r3, #23
 800c438:	18fb      	adds	r3, r7, r3
 800c43a:	2203      	movs	r2, #3
 800c43c:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c43e:	e00c      	b.n	800c45a <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	0011      	movs	r1, r2
 800c446:	0018      	movs	r0, r3
 800c448:	f001 fe78 	bl	800e13c <USBD_CtlError>
          ret = USBD_FAIL;
 800c44c:	2317      	movs	r3, #23
 800c44e:	18fb      	adds	r3, r7, r3
 800c450:	2203      	movs	r2, #3
 800c452:	701a      	strb	r2, [r3, #0]
          break;
 800c454:	e002      	b.n	800c45c <USBD_CDC_Setup+0x1c4>
          break;
 800c456:	46c0      	nop			@ (mov r8, r8)
 800c458:	e00c      	b.n	800c474 <USBD_CDC_Setup+0x1dc>
          break;
 800c45a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c45c:	e00a      	b.n	800c474 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	0011      	movs	r1, r2
 800c464:	0018      	movs	r0, r3
 800c466:	f001 fe69 	bl	800e13c <USBD_CtlError>
      ret = USBD_FAIL;
 800c46a:	2317      	movs	r3, #23
 800c46c:	18fb      	adds	r3, r7, r3
 800c46e:	2203      	movs	r2, #3
 800c470:	701a      	strb	r2, [r3, #0]
      break;
 800c472:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 800c474:	2317      	movs	r3, #23
 800c476:	18fb      	adds	r3, r7, r3
 800c478:	781b      	ldrb	r3, [r3, #0]
}
 800c47a:	0018      	movs	r0, r3
 800c47c:	46bd      	mov	sp, r7
 800c47e:	b006      	add	sp, #24
 800c480:	bd80      	pop	{r7, pc}
 800c482:	46c0      	nop			@ (mov r8, r8)
 800c484:	00000201 	.word	0x00000201

0800c488 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c488:	b590      	push	{r4, r7, lr}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	000a      	movs	r2, r1
 800c492:	1cfb      	adds	r3, r7, #3
 800c494:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	23b2      	movs	r3, #178	@ 0xb2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	58d3      	ldr	r3, [r2, r3]
 800c49e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	23b5      	movs	r3, #181	@ 0xb5
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	58d2      	ldr	r2, [r2, r3]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	32b0      	adds	r2, #176	@ 0xb0
 800c4ac:	0092      	lsls	r2, r2, #2
 800c4ae:	58d3      	ldr	r3, [r2, r3]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e072      	b.n	800c59e <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	23b5      	movs	r3, #181	@ 0xb5
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	58d2      	ldr	r2, [r2, r3]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	32b0      	adds	r2, #176	@ 0xb0
 800c4c4:	0092      	lsls	r2, r2, #2
 800c4c6:	58d3      	ldr	r3, [r2, r3]
 800c4c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4ca:	1cfb      	adds	r3, r7, #3
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	220f      	movs	r2, #15
 800c4d0:	401a      	ands	r2, r3
 800c4d2:	6879      	ldr	r1, [r7, #4]
 800c4d4:	0013      	movs	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	189b      	adds	r3, r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	18cb      	adds	r3, r1, r3
 800c4de:	3318      	adds	r3, #24
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d031      	beq.n	800c54a <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c4e6:	1cfb      	adds	r3, r7, #3
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	220f      	movs	r2, #15
 800c4ec:	401a      	ands	r2, r3
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	0013      	movs	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	189b      	adds	r3, r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	18cb      	adds	r3, r1, r3
 800c4fa:	3318      	adds	r3, #24
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	1cfb      	adds	r3, r7, #3
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	220f      	movs	r2, #15
 800c504:	401a      	ands	r2, r3
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	0013      	movs	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	189b      	adds	r3, r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	18cb      	adds	r3, r1, r3
 800c512:	3324      	adds	r3, #36	@ 0x24
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	0019      	movs	r1, r3
 800c518:	f7f3 fe94 	bl	8000244 <__aeabi_uidivmod>
 800c51c:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c51e:	d114      	bne.n	800c54a <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c520:	1cfb      	adds	r3, r7, #3
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	220f      	movs	r2, #15
 800c526:	401a      	ands	r2, r3
 800c528:	6879      	ldr	r1, [r7, #4]
 800c52a:	0013      	movs	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	189b      	adds	r3, r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	18cb      	adds	r3, r1, r3
 800c534:	3318      	adds	r3, #24
 800c536:	2200      	movs	r2, #0
 800c538:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c53a:	1cfb      	adds	r3, r7, #3
 800c53c:	7819      	ldrb	r1, [r3, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	2300      	movs	r3, #0
 800c542:	2200      	movs	r2, #0
 800c544:	f002 fbd8 	bl	800ecf8 <USBD_LL_Transmit>
 800c548:	e028      	b.n	800c59c <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	2385      	movs	r3, #133	@ 0x85
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	2100      	movs	r1, #0
 800c552:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	23b5      	movs	r3, #181	@ 0xb5
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	58d3      	ldr	r3, [r2, r3]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	33b0      	adds	r3, #176	@ 0xb0
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	18d3      	adds	r3, r2, r3
 800c564:	3304      	adds	r3, #4
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	691b      	ldr	r3, [r3, #16]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d016      	beq.n	800c59c <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	23b5      	movs	r3, #181	@ 0xb5
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	58d3      	ldr	r3, [r2, r3]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	33b0      	adds	r3, #176	@ 0xb0
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	18d3      	adds	r3, r2, r3
 800c57e:	3304      	adds	r3, #4
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	691c      	ldr	r4, [r3, #16]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	2382      	movs	r3, #130	@ 0x82
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	58d0      	ldr	r0, [r2, r3]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	2284      	movs	r2, #132	@ 0x84
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	1899      	adds	r1, r3, r2
 800c594:	1cfb      	adds	r3, r7, #3
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	001a      	movs	r2, r3
 800c59a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	0018      	movs	r0, r3
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	b005      	add	sp, #20
 800c5a4:	bd90      	pop	{r4, r7, pc}

0800c5a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	000a      	movs	r2, r1
 800c5b0:	1cfb      	adds	r3, r7, #3
 800c5b2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	23b5      	movs	r3, #181	@ 0xb5
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	58d2      	ldr	r2, [r2, r3]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	32b0      	adds	r2, #176	@ 0xb0
 800c5c0:	0092      	lsls	r2, r2, #2
 800c5c2:	58d3      	ldr	r3, [r2, r3]
 800c5c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	23b5      	movs	r3, #181	@ 0xb5
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	58d2      	ldr	r2, [r2, r3]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	32b0      	adds	r2, #176	@ 0xb0
 800c5d2:	0092      	lsls	r2, r2, #2
 800c5d4:	58d3      	ldr	r3, [r2, r3]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e022      	b.n	800c624 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c5de:	1cfb      	adds	r3, r7, #3
 800c5e0:	781a      	ldrb	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	0011      	movs	r1, r2
 800c5e6:	0018      	movs	r0, r3
 800c5e8:	f002 fbe6 	bl	800edb8 <USBD_LL_GetRxDataSize>
 800c5ec:	0001      	movs	r1, r0
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	2383      	movs	r3, #131	@ 0x83
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	23b5      	movs	r3, #181	@ 0xb5
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	58d3      	ldr	r3, [r2, r3]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	33b0      	adds	r3, #176	@ 0xb0
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	18d3      	adds	r3, r2, r3
 800c606:	3304      	adds	r3, #4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	68f9      	ldr	r1, [r7, #12]
 800c60e:	2381      	movs	r3, #129	@ 0x81
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	58c8      	ldr	r0, [r1, r3]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2183      	movs	r1, #131	@ 0x83
 800c618:	0089      	lsls	r1, r1, #2
 800c61a:	468c      	mov	ip, r1
 800c61c:	4463      	add	r3, ip
 800c61e:	0019      	movs	r1, r3
 800c620:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	0018      	movs	r0, r3
 800c626:	46bd      	mov	sp, r7
 800c628:	b004      	add	sp, #16
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	23b5      	movs	r3, #181	@ 0xb5
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	58d2      	ldr	r2, [r2, r3]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	32b0      	adds	r2, #176	@ 0xb0
 800c640:	0092      	lsls	r2, r2, #2
 800c642:	58d3      	ldr	r3, [r2, r3]
 800c644:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e02b      	b.n	800c6a8 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	23b5      	movs	r3, #181	@ 0xb5
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	58d3      	ldr	r3, [r2, r3]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	33b0      	adds	r3, #176	@ 0xb0
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	18d3      	adds	r3, r2, r3
 800c660:	3304      	adds	r3, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01e      	beq.n	800c6a6 <USBD_CDC_EP0_RxReady+0x7a>
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	2380      	movs	r3, #128	@ 0x80
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	5cd3      	ldrb	r3, [r2, r3]
 800c670:	2bff      	cmp	r3, #255	@ 0xff
 800c672:	d018      	beq.n	800c6a6 <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	23b5      	movs	r3, #181	@ 0xb5
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	58d3      	ldr	r3, [r2, r3]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	33b0      	adds	r3, #176	@ 0xb0
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	18d3      	adds	r3, r2, r3
 800c684:	3304      	adds	r3, #4
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	68f9      	ldr	r1, [r7, #12]
 800c68c:	2280      	movs	r2, #128	@ 0x80
 800c68e:	0092      	lsls	r2, r2, #2
 800c690:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800c692:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4c06      	ldr	r4, [pc, #24]	@ (800c6b0 <USBD_CDC_EP0_RxReady+0x84>)
 800c698:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c69a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	2380      	movs	r3, #128	@ 0x80
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	21ff      	movs	r1, #255	@ 0xff
 800c6a4:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b005      	add	sp, #20
 800c6ae:	bd90      	pop	{r4, r7, pc}
 800c6b0:	00000201 	.word	0x00000201

0800c6b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6bc:	4b20      	ldr	r3, [pc, #128]	@ (800c740 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c6be:	2182      	movs	r1, #130	@ 0x82
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f000 fd9c 	bl	800d1fe <USBD_GetEpDesc>
 800c6c6:	0003      	movs	r3, r0
 800c6c8:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6ca:	4b1d      	ldr	r3, [pc, #116]	@ (800c740 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f000 fd95 	bl	800d1fe <USBD_GetEpDesc>
 800c6d4:	0003      	movs	r3, r0
 800c6d6:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6d8:	4b19      	ldr	r3, [pc, #100]	@ (800c740 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c6da:	2181      	movs	r1, #129	@ 0x81
 800c6dc:	0018      	movs	r0, r3
 800c6de:	f000 fd8e 	bl	800d1fe <USBD_GetEpDesc>
 800c6e2:	0003      	movs	r3, r0
 800c6e4:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2210      	movs	r2, #16
 800c6f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	791a      	ldrb	r2, [r3, #4]
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	400a      	ands	r2, r1
 800c700:	1c11      	adds	r1, r2, #0
 800c702:	2240      	movs	r2, #64	@ 0x40
 800c704:	430a      	orrs	r2, r1
 800c706:	711a      	strb	r2, [r3, #4]
 800c708:	795a      	ldrb	r2, [r3, #5]
 800c70a:	2100      	movs	r1, #0
 800c70c:	400a      	ands	r2, r1
 800c70e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	791a      	ldrb	r2, [r3, #4]
 800c71a:	2100      	movs	r1, #0
 800c71c:	400a      	ands	r2, r1
 800c71e:	1c11      	adds	r1, r2, #0
 800c720:	2240      	movs	r2, #64	@ 0x40
 800c722:	430a      	orrs	r2, r1
 800c724:	711a      	strb	r2, [r3, #4]
 800c726:	795a      	ldrb	r2, [r3, #5]
 800c728:	2100      	movs	r1, #0
 800c72a:	400a      	ands	r2, r1
 800c72c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2243      	movs	r2, #67	@ 0x43
 800c732:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c734:	4b02      	ldr	r3, [pc, #8]	@ (800c740 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800c736:	0018      	movs	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	b006      	add	sp, #24
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	200000e0 	.word	0x200000e0

0800c744 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c74c:	4b20      	ldr	r3, [pc, #128]	@ (800c7d0 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c74e:	2182      	movs	r1, #130	@ 0x82
 800c750:	0018      	movs	r0, r3
 800c752:	f000 fd54 	bl	800d1fe <USBD_GetEpDesc>
 800c756:	0003      	movs	r3, r0
 800c758:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c75a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d0 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c75c:	2101      	movs	r1, #1
 800c75e:	0018      	movs	r0, r3
 800c760:	f000 fd4d 	bl	800d1fe <USBD_GetEpDesc>
 800c764:	0003      	movs	r3, r0
 800c766:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c768:	4b19      	ldr	r3, [pc, #100]	@ (800c7d0 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c76a:	2181      	movs	r1, #129	@ 0x81
 800c76c:	0018      	movs	r0, r3
 800c76e:	f000 fd46 	bl	800d1fe <USBD_GetEpDesc>
 800c772:	0003      	movs	r3, r0
 800c774:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d002      	beq.n	800c782 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	2210      	movs	r2, #16
 800c780:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	791a      	ldrb	r2, [r3, #4]
 800c78c:	2100      	movs	r1, #0
 800c78e:	400a      	ands	r2, r1
 800c790:	711a      	strb	r2, [r3, #4]
 800c792:	795a      	ldrb	r2, [r3, #5]
 800c794:	2100      	movs	r1, #0
 800c796:	400a      	ands	r2, r1
 800c798:	1c11      	adds	r1, r2, #0
 800c79a:	2202      	movs	r2, #2
 800c79c:	430a      	orrs	r2, r1
 800c79e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00b      	beq.n	800c7be <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	791a      	ldrb	r2, [r3, #4]
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	400a      	ands	r2, r1
 800c7ae:	711a      	strb	r2, [r3, #4]
 800c7b0:	795a      	ldrb	r2, [r3, #5]
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	400a      	ands	r2, r1
 800c7b6:	1c11      	adds	r1, r2, #0
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2243      	movs	r2, #67	@ 0x43
 800c7c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800c7c6:	0018      	movs	r0, r3
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	b006      	add	sp, #24
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	46c0      	nop			@ (mov r8, r8)
 800c7d0:	200000e0 	.word	0x200000e0

0800c7d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c7dc:	4b20      	ldr	r3, [pc, #128]	@ (800c860 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c7de:	2182      	movs	r1, #130	@ 0x82
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	f000 fd0c 	bl	800d1fe <USBD_GetEpDesc>
 800c7e6:	0003      	movs	r3, r0
 800c7e8:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c860 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	f000 fd05 	bl	800d1fe <USBD_GetEpDesc>
 800c7f4:	0003      	movs	r3, r0
 800c7f6:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c7f8:	4b19      	ldr	r3, [pc, #100]	@ (800c860 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c7fa:	2181      	movs	r1, #129	@ 0x81
 800c7fc:	0018      	movs	r0, r3
 800c7fe:	f000 fcfe 	bl	800d1fe <USBD_GetEpDesc>
 800c802:	0003      	movs	r3, r0
 800c804:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2210      	movs	r2, #16
 800c810:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00b      	beq.n	800c830 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	791a      	ldrb	r2, [r3, #4]
 800c81c:	2100      	movs	r1, #0
 800c81e:	400a      	ands	r2, r1
 800c820:	1c11      	adds	r1, r2, #0
 800c822:	2240      	movs	r2, #64	@ 0x40
 800c824:	430a      	orrs	r2, r1
 800c826:	711a      	strb	r2, [r3, #4]
 800c828:	795a      	ldrb	r2, [r3, #5]
 800c82a:	2100      	movs	r1, #0
 800c82c:	400a      	ands	r2, r1
 800c82e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00b      	beq.n	800c84e <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	791a      	ldrb	r2, [r3, #4]
 800c83a:	2100      	movs	r1, #0
 800c83c:	400a      	ands	r2, r1
 800c83e:	1c11      	adds	r1, r2, #0
 800c840:	2240      	movs	r2, #64	@ 0x40
 800c842:	430a      	orrs	r2, r1
 800c844:	711a      	strb	r2, [r3, #4]
 800c846:	795a      	ldrb	r2, [r3, #5]
 800c848:	2100      	movs	r1, #0
 800c84a:	400a      	ands	r2, r1
 800c84c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2243      	movs	r2, #67	@ 0x43
 800c852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c854:	4b02      	ldr	r3, [pc, #8]	@ (800c860 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800c856:	0018      	movs	r0, r3
 800c858:	46bd      	mov	sp, r7
 800c85a:	b006      	add	sp, #24
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	200000e0 	.word	0x200000e0

0800c864 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	220a      	movs	r2, #10
 800c870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c872:	4b02      	ldr	r3, [pc, #8]	@ (800c87c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c874:	0018      	movs	r0, r3
 800c876:	46bd      	mov	sp, r7
 800c878:	b002      	add	sp, #8
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	2000009c 	.word	0x2000009c

0800c880 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b082      	sub	sp, #8
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c890:	2303      	movs	r3, #3
 800c892:	e00b      	b.n	800c8ac <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	23b5      	movs	r3, #181	@ 0xb5
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	58d3      	ldr	r3, [r2, r3]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	33b0      	adds	r3, #176	@ 0xb0
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	18d3      	adds	r3, r2, r3
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	0018      	movs	r0, r3
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	b002      	add	sp, #8
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	23b5      	movs	r3, #181	@ 0xb5
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	58d2      	ldr	r2, [r2, r3]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	32b0      	adds	r2, #176	@ 0xb0
 800c8cc:	0092      	lsls	r2, r2, #2
 800c8ce:	58d3      	ldr	r3, [r2, r3]
 800c8d0:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e00a      	b.n	800c8f2 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	2382      	movs	r3, #130	@ 0x82
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	68b9      	ldr	r1, [r7, #8]
 800c8e4:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	2384      	movs	r3, #132	@ 0x84
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b006      	add	sp, #24
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	23b5      	movs	r3, #181	@ 0xb5
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	58d2      	ldr	r2, [r2, r3]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	32b0      	adds	r2, #176	@ 0xb0
 800c910:	0092      	lsls	r2, r2, #2
 800c912:	58d3      	ldr	r3, [r2, r3]
 800c914:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c91c:	2303      	movs	r3, #3
 800c91e:	e005      	b.n	800c92c <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	2381      	movs	r3, #129	@ 0x81
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	0018      	movs	r0, r3
 800c92e:	46bd      	mov	sp, r7
 800c930:	b004      	add	sp, #16
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c934:	b590      	push	{r4, r7, lr}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	23b5      	movs	r3, #181	@ 0xb5
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	58d2      	ldr	r2, [r2, r3]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	32b0      	adds	r2, #176	@ 0xb0
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	58d3      	ldr	r3, [r2, r3]
 800c94c:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c94e:	230f      	movs	r3, #15
 800c950:	18fb      	adds	r3, r7, r3
 800c952:	2201      	movs	r2, #1
 800c954:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e030      	b.n	800c9c2 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	2385      	movs	r3, #133	@ 0x85
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	58d3      	ldr	r3, [r2, r3]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d127      	bne.n	800c9bc <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2385      	movs	r3, #133	@ 0x85
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	2101      	movs	r1, #1
 800c974:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c976:	4b15      	ldr	r3, [pc, #84]	@ (800c9cc <USBD_CDC_TransmitPacket+0x98>)
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	001a      	movs	r2, r3
 800c97c:	230f      	movs	r3, #15
 800c97e:	401a      	ands	r2, r3
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	2384      	movs	r3, #132	@ 0x84
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	58c9      	ldr	r1, [r1, r3]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	0013      	movs	r3, r2
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	189b      	adds	r3, r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	18c3      	adds	r3, r0, r3
 800c994:	3318      	adds	r3, #24
 800c996:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c998:	4b0c      	ldr	r3, [pc, #48]	@ (800c9cc <USBD_CDC_TransmitPacket+0x98>)
 800c99a:	7819      	ldrb	r1, [r3, #0]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	2382      	movs	r3, #130	@ 0x82
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	58d4      	ldr	r4, [r2, r3]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	2384      	movs	r3, #132	@ 0x84
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	58d3      	ldr	r3, [r2, r3]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	0022      	movs	r2, r4
 800c9b0:	f002 f9a2 	bl	800ecf8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c9b4:	230f      	movs	r3, #15
 800c9b6:	18fb      	adds	r3, r7, r3
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 800c9bc:	230f      	movs	r3, #15
 800c9be:	18fb      	adds	r3, r7, r3
 800c9c0:	781b      	ldrb	r3, [r3, #0]
}
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b005      	add	sp, #20
 800c9c8:	bd90      	pop	{r4, r7, pc}
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	20000123 	.word	0x20000123

0800c9d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	23b5      	movs	r3, #181	@ 0xb5
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	58d2      	ldr	r2, [r2, r3]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	32b0      	adds	r2, #176	@ 0xb0
 800c9e4:	0092      	lsls	r2, r2, #2
 800c9e6:	58d3      	ldr	r3, [r2, r3]
 800c9e8:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	23b5      	movs	r3, #181	@ 0xb5
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	58d2      	ldr	r2, [r2, r3]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	32b0      	adds	r2, #176	@ 0xb0
 800c9f6:	0092      	lsls	r2, r2, #2
 800c9f8:	58d3      	ldr	r3, [r2, r3]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e01a      	b.n	800ca38 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7c1b      	ldrb	r3, [r3, #16]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10b      	bne.n	800ca22 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <USBD_CDC_ReceivePacket+0x70>)
 800ca0c:	7819      	ldrb	r1, [r3, #0]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	2381      	movs	r3, #129	@ 0x81
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	58d2      	ldr	r2, [r2, r3]
 800ca16:	2380      	movs	r3, #128	@ 0x80
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f002 f99c 	bl	800ed58 <USBD_LL_PrepareReceive>
 800ca20:	e009      	b.n	800ca36 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca22:	4b07      	ldr	r3, [pc, #28]	@ (800ca40 <USBD_CDC_ReceivePacket+0x70>)
 800ca24:	7819      	ldrb	r1, [r3, #0]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	2381      	movs	r3, #129	@ 0x81
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	58d2      	ldr	r2, [r2, r3]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	2340      	movs	r3, #64	@ 0x40
 800ca32:	f002 f991 	bl	800ed58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	0018      	movs	r0, r3
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	b004      	add	sp, #16
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20000124 	.word	0x20000124

0800ca44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ca44:	b5b0      	push	{r4, r5, r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	1dfb      	adds	r3, r7, #7
 800ca50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e029      	b.n	800cab0 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	23ae      	movs	r3, #174	@ 0xae
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	2100      	movs	r1, #0
 800ca64:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	23b1      	movs	r3, #177	@ 0xb1
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	23b4      	movs	r3, #180	@ 0xb4
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	2100      	movs	r1, #0
 800ca78:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d004      	beq.n	800ca8a <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	23ad      	movs	r3, #173	@ 0xad
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	23a7      	movs	r3, #167	@ 0xa7
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	2101      	movs	r1, #1
 800ca92:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	1dfa      	adds	r2, r7, #7
 800ca98:	7812      	ldrb	r2, [r2, #0]
 800ca9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ca9c:	2517      	movs	r5, #23
 800ca9e:	197c      	adds	r4, r7, r5
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	0018      	movs	r0, r3
 800caa4:	f001 ff7e 	bl	800e9a4 <USBD_LL_Init>
 800caa8:	0003      	movs	r3, r0
 800caaa:	7023      	strb	r3, [r4, #0]

  return ret;
 800caac:	197b      	adds	r3, r7, r5
 800caae:	781b      	ldrb	r3, [r3, #0]
}
 800cab0:	0018      	movs	r0, r3
 800cab2:	46bd      	mov	sp, r7
 800cab4:	b006      	add	sp, #24
 800cab6:	bdb0      	pop	{r4, r5, r7, pc}

0800cab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cac2:	230e      	movs	r3, #14
 800cac4:	18fb      	adds	r3, r7, r3
 800cac6:	2200      	movs	r2, #0
 800cac8:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d101      	bne.n	800cad4 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cad0:	2303      	movs	r3, #3
 800cad2:	e02b      	b.n	800cb2c <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	23ae      	movs	r3, #174	@ 0xae
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	23b5      	movs	r3, #181	@ 0xb5
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	58d2      	ldr	r2, [r2, r3]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	32ae      	adds	r2, #174	@ 0xae
 800caea:	0092      	lsls	r2, r2, #2
 800caec:	58d3      	ldr	r3, [r2, r3]
 800caee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d011      	beq.n	800cb18 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	23b5      	movs	r3, #181	@ 0xb5
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	58d2      	ldr	r2, [r2, r3]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	32ae      	adds	r2, #174	@ 0xae
 800cb00:	0092      	lsls	r2, r2, #2
 800cb02:	58d3      	ldr	r3, [r2, r3]
 800cb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb06:	220e      	movs	r2, #14
 800cb08:	18ba      	adds	r2, r7, r2
 800cb0a:	0010      	movs	r0, r2
 800cb0c:	4798      	blx	r3
 800cb0e:	0001      	movs	r1, r0
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	23b4      	movs	r3, #180	@ 0xb4
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	23b6      	movs	r3, #182	@ 0xb6
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	58d3      	ldr	r3, [r2, r3]
 800cb20:	1c59      	adds	r1, r3, #1
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	23b6      	movs	r3, #182	@ 0xb6
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	b004      	add	sp, #16
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	0018      	movs	r0, r3
 800cb40:	f001 ffa2 	bl	800ea88 <USBD_LL_Start>
 800cb44:	0003      	movs	r3, r0
}
 800cb46:	0018      	movs	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	b002      	add	sp, #8
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b082      	sub	sp, #8
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb56:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cb58:	0018      	movs	r0, r3
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	b002      	add	sp, #8
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	000a      	movs	r2, r1
 800cb6a:	1cfb      	adds	r3, r7, #3
 800cb6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb6e:	210f      	movs	r1, #15
 800cb70:	187b      	adds	r3, r7, r1
 800cb72:	2200      	movs	r2, #0
 800cb74:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	23ae      	movs	r3, #174	@ 0xae
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	58d3      	ldr	r3, [r2, r3]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00c      	beq.n	800cb9c <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	23ae      	movs	r3, #174	@ 0xae
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	58d3      	ldr	r3, [r2, r3]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	187c      	adds	r4, r7, r1
 800cb8e:	1cfa      	adds	r2, r7, #3
 800cb90:	7811      	ldrb	r1, [r2, #0]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	0010      	movs	r0, r2
 800cb96:	4798      	blx	r3
 800cb98:	0003      	movs	r3, r0
 800cb9a:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb9c:	230f      	movs	r3, #15
 800cb9e:	18fb      	adds	r3, r7, r3
 800cba0:	781b      	ldrb	r3, [r3, #0]
}
 800cba2:	0018      	movs	r0, r3
 800cba4:	46bd      	mov	sp, r7
 800cba6:	b005      	add	sp, #20
 800cba8:	bd90      	pop	{r4, r7, pc}

0800cbaa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbaa:	b590      	push	{r4, r7, lr}
 800cbac:	b085      	sub	sp, #20
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	000a      	movs	r2, r1
 800cbb4:	1cfb      	adds	r3, r7, #3
 800cbb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb8:	240f      	movs	r4, #15
 800cbba:	193b      	adds	r3, r7, r4
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	23ae      	movs	r3, #174	@ 0xae
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	58d3      	ldr	r3, [r2, r3]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	1cfa      	adds	r2, r7, #3
 800cbcc:	7811      	ldrb	r1, [r2, #0]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	0010      	movs	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	1e03      	subs	r3, r0, #0
 800cbd6:	d002      	beq.n	800cbde <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 800cbd8:	193b      	adds	r3, r7, r4
 800cbda:	2203      	movs	r2, #3
 800cbdc:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbde:	230f      	movs	r3, #15
 800cbe0:	18fb      	adds	r3, r7, r3
 800cbe2:	781b      	ldrb	r3, [r3, #0]
}
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b005      	add	sp, #20
 800cbea:	bd90      	pop	{r4, r7, pc}

0800cbec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a30      	ldr	r2, [pc, #192]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cbfa:	4694      	mov	ip, r2
 800cbfc:	4463      	add	r3, ip
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	0011      	movs	r1, r2
 800cc02:	0018      	movs	r0, r3
 800cc04:	f001 fa5d 	bl	800e0c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	23a5      	movs	r3, #165	@ 0xa5
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	2101      	movs	r1, #1
 800cc10:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	23ac      	movs	r3, #172	@ 0xac
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	5ad3      	ldrh	r3, [r2, r3]
 800cc1a:	0019      	movs	r1, r3
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	23a6      	movs	r3, #166	@ 0xa6
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a25      	ldr	r2, [pc, #148]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cc28:	5c9b      	ldrb	r3, [r3, r2]
 800cc2a:	001a      	movs	r2, r3
 800cc2c:	231f      	movs	r3, #31
 800cc2e:	4013      	ands	r3, r2
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d01f      	beq.n	800cc74 <USBD_LL_SetupStage+0x88>
 800cc34:	d82b      	bhi.n	800cc8e <USBD_LL_SetupStage+0xa2>
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <USBD_LL_SetupStage+0x54>
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d00d      	beq.n	800cc5a <USBD_LL_SetupStage+0x6e>
 800cc3e:	e026      	b.n	800cc8e <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a1e      	ldr	r2, [pc, #120]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cc44:	189a      	adds	r2, r3, r2
 800cc46:	230f      	movs	r3, #15
 800cc48:	18fc      	adds	r4, r7, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	0011      	movs	r1, r2
 800cc4e:	0018      	movs	r0, r3
 800cc50:	f000 fb5c 	bl	800d30c <USBD_StdDevReq>
 800cc54:	0003      	movs	r3, r0
 800cc56:	7023      	strb	r3, [r4, #0]
      break;
 800cc58:	e029      	b.n	800ccae <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4a17      	ldr	r2, [pc, #92]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cc5e:	189a      	adds	r2, r3, r2
 800cc60:	230f      	movs	r3, #15
 800cc62:	18fc      	adds	r4, r7, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	0011      	movs	r1, r2
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f000 fbcd 	bl	800d408 <USBD_StdItfReq>
 800cc6e:	0003      	movs	r3, r0
 800cc70:	7023      	strb	r3, [r4, #0]
      break;
 800cc72:	e01c      	b.n	800ccae <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a11      	ldr	r2, [pc, #68]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cc78:	189a      	adds	r2, r3, r2
 800cc7a:	230f      	movs	r3, #15
 800cc7c:	18fc      	adds	r4, r7, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	0011      	movs	r1, r2
 800cc82:	0018      	movs	r0, r3
 800cc84:	f000 fc4d 	bl	800d522 <USBD_StdEPReq>
 800cc88:	0003      	movs	r3, r0
 800cc8a:	7023      	strb	r3, [r4, #0]
      break;
 800cc8c:	e00f      	b.n	800ccae <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a0a      	ldr	r2, [pc, #40]	@ (800ccbc <USBD_LL_SetupStage+0xd0>)
 800cc92:	5c9b      	ldrb	r3, [r3, r2]
 800cc94:	227f      	movs	r2, #127	@ 0x7f
 800cc96:	4393      	bics	r3, r2
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	230f      	movs	r3, #15
 800cc9c:	18fc      	adds	r4, r7, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0011      	movs	r1, r2
 800cca2:	0018      	movs	r0, r3
 800cca4:	f001 ff77 	bl	800eb96 <USBD_LL_StallEP>
 800cca8:	0003      	movs	r3, r0
 800ccaa:	7023      	strb	r3, [r4, #0]
      break;
 800ccac:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800ccae:	230f      	movs	r3, #15
 800ccb0:	18fb      	adds	r3, r7, r3
 800ccb2:	781b      	ldrb	r3, [r3, #0]
}
 800ccb4:	0018      	movs	r0, r3
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	b005      	add	sp, #20
 800ccba:	bd90      	pop	{r4, r7, pc}
 800ccbc:	000002aa 	.word	0x000002aa

0800ccc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	200b      	movs	r0, #11
 800cccc:	183b      	adds	r3, r7, r0
 800ccce:	1c0a      	adds	r2, r1, #0
 800ccd0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccd2:	2317      	movs	r3, #23
 800ccd4:	18fb      	adds	r3, r7, r3
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 800ccda:	183b      	adds	r3, r7, r0
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d000      	beq.n	800cce4 <USBD_LL_DataOutStage+0x24>
 800cce2:	e084      	b.n	800cdee <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3355      	adds	r3, #85	@ 0x55
 800cce8:	33ff      	adds	r3, #255	@ 0xff
 800ccea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	23a5      	movs	r3, #165	@ 0xa5
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	58d3      	ldr	r3, [r2, r3]
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d000      	beq.n	800ccfa <USBD_LL_DataOutStage+0x3a>
 800ccf8:	e0c0      	b.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	689a      	ldr	r2, [r3, #8]
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d914      	bls.n	800cd30 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	68d9      	ldr	r1, [r3, #12]
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	689a      	ldr	r2, [r3, #8]
 800cd1c:	000b      	movs	r3, r1
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d900      	bls.n	800cd24 <USBD_LL_DataOutStage+0x64>
 800cd22:	0013      	movs	r3, r2
 800cd24:	6879      	ldr	r1, [r7, #4]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	001a      	movs	r2, r3
 800cd2a:	f001 fadc 	bl	800e2e6 <USBD_CtlContinueRx>
 800cd2e:	e0a5      	b.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4a55      	ldr	r2, [pc, #340]	@ (800ce88 <USBD_LL_DataOutStage+0x1c8>)
 800cd34:	5c9b      	ldrb	r3, [r3, r2]
 800cd36:	001a      	movs	r2, r3
 800cd38:	231f      	movs	r3, #31
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d018      	beq.n	800cd72 <USBD_LL_DataOutStage+0xb2>
 800cd40:	d825      	bhi.n	800cd8e <USBD_LL_DataOutStage+0xce>
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d002      	beq.n	800cd4c <USBD_LL_DataOutStage+0x8c>
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d005      	beq.n	800cd56 <USBD_LL_DataOutStage+0x96>
 800cd4a:	e020      	b.n	800cd8e <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cd4c:	2316      	movs	r3, #22
 800cd4e:	18fb      	adds	r3, r7, r3
 800cd50:	2200      	movs	r2, #0
 800cd52:	701a      	strb	r2, [r3, #0]
            break;
 800cd54:	e020      	b.n	800cd98 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	4a4c      	ldr	r2, [pc, #304]	@ (800ce8c <USBD_LL_DataOutStage+0x1cc>)
 800cd5a:	5a9b      	ldrh	r3, [r3, r2]
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	2316      	movs	r3, #22
 800cd60:	18fc      	adds	r4, r7, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	0011      	movs	r1, r2
 800cd66:	0018      	movs	r0, r3
 800cd68:	f000 fa31 	bl	800d1ce <USBD_CoreFindIF>
 800cd6c:	0003      	movs	r3, r0
 800cd6e:	7023      	strb	r3, [r4, #0]
            break;
 800cd70:	e012      	b.n	800cd98 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4a45      	ldr	r2, [pc, #276]	@ (800ce8c <USBD_LL_DataOutStage+0x1cc>)
 800cd76:	5a9b      	ldrh	r3, [r3, r2]
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	2316      	movs	r3, #22
 800cd7c:	18fc      	adds	r4, r7, r3
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	0011      	movs	r1, r2
 800cd82:	0018      	movs	r0, r3
 800cd84:	f000 fa2f 	bl	800d1e6 <USBD_CoreFindEP>
 800cd88:	0003      	movs	r3, r0
 800cd8a:	7023      	strb	r3, [r4, #0]
            break;
 800cd8c:	e004      	b.n	800cd98 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cd8e:	2316      	movs	r3, #22
 800cd90:	18fb      	adds	r3, r7, r3
 800cd92:	2200      	movs	r2, #0
 800cd94:	701a      	strb	r2, [r3, #0]
            break;
 800cd96:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cd98:	2116      	movs	r1, #22
 800cd9a:	187b      	adds	r3, r7, r1
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d120      	bne.n	800cde4 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	23a7      	movs	r3, #167	@ 0xa7
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	5cd3      	ldrb	r3, [r2, r3]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b03      	cmp	r3, #3
 800cdae:	d119      	bne.n	800cde4 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cdb0:	187b      	adds	r3, r7, r1
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	32ae      	adds	r2, #174	@ 0xae
 800cdb8:	0092      	lsls	r2, r2, #2
 800cdba:	58d3      	ldr	r3, [r2, r3]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d010      	beq.n	800cde4 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 800cdc2:	0008      	movs	r0, r1
 800cdc4:	187b      	adds	r3, r7, r1
 800cdc6:	7819      	ldrb	r1, [r3, #0]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	23b5      	movs	r3, #181	@ 0xb5
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cdd0:	183b      	adds	r3, r7, r0
 800cdd2:	781a      	ldrb	r2, [r3, #0]
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	32ae      	adds	r2, #174	@ 0xae
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	58d3      	ldr	r3, [r2, r3]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	0010      	movs	r0, r2
 800cde2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	0018      	movs	r0, r3
 800cde8:	f001 fa8e 	bl	800e308 <USBD_CtlSendStatus>
 800cdec:	e046      	b.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cdee:	260b      	movs	r6, #11
 800cdf0:	19bb      	adds	r3, r7, r6
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	227f      	movs	r2, #127	@ 0x7f
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	2516      	movs	r5, #22
 800cdfc:	197c      	adds	r4, r7, r5
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	0011      	movs	r1, r2
 800ce02:	0018      	movs	r0, r3
 800ce04:	f000 f9ef 	bl	800d1e6 <USBD_CoreFindEP>
 800ce08:	0003      	movs	r3, r0
 800ce0a:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce0c:	0029      	movs	r1, r5
 800ce0e:	187b      	adds	r3, r7, r1
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	2bff      	cmp	r3, #255	@ 0xff
 800ce14:	d032      	beq.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d12e      	bne.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	23a7      	movs	r3, #167	@ 0xa7
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	5cd3      	ldrb	r3, [r2, r3]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b03      	cmp	r3, #3
 800ce2a:	d11f      	bne.n	800ce6c <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ce2c:	187b      	adds	r3, r7, r1
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	32ae      	adds	r2, #174	@ 0xae
 800ce34:	0092      	lsls	r2, r2, #2
 800ce36:	58d3      	ldr	r3, [r2, r3]
 800ce38:	699b      	ldr	r3, [r3, #24]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d016      	beq.n	800ce6c <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 800ce3e:	0008      	movs	r0, r1
 800ce40:	187b      	adds	r3, r7, r1
 800ce42:	7819      	ldrb	r1, [r3, #0]
 800ce44:	68fa      	ldr	r2, [r7, #12]
 800ce46:	23b5      	movs	r3, #181	@ 0xb5
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ce4c:	183b      	adds	r3, r7, r0
 800ce4e:	781a      	ldrb	r2, [r3, #0]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	32ae      	adds	r2, #174	@ 0xae
 800ce54:	0092      	lsls	r2, r2, #2
 800ce56:	58d3      	ldr	r3, [r2, r3]
 800ce58:	699b      	ldr	r3, [r3, #24]
 800ce5a:	2217      	movs	r2, #23
 800ce5c:	18bc      	adds	r4, r7, r2
 800ce5e:	19ba      	adds	r2, r7, r6
 800ce60:	7811      	ldrb	r1, [r2, #0]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	0010      	movs	r0, r2
 800ce66:	4798      	blx	r3
 800ce68:	0003      	movs	r3, r0
 800ce6a:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 800ce6c:	2217      	movs	r2, #23
 800ce6e:	18bb      	adds	r3, r7, r2
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 800ce76:	18bb      	adds	r3, r7, r2
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	e000      	b.n	800ce7e <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	0018      	movs	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	b007      	add	sp, #28
 800ce84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce86:	46c0      	nop			@ (mov r8, r8)
 800ce88:	000002aa 	.word	0x000002aa
 800ce8c:	000002ae 	.word	0x000002ae

0800ce90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce92:	b087      	sub	sp, #28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	200b      	movs	r0, #11
 800ce9c:	183b      	adds	r3, r7, r0
 800ce9e:	1c0a      	adds	r2, r1, #0
 800cea0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cea2:	183b      	adds	r3, r7, r0
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d000      	beq.n	800ceac <USBD_LL_DataInStage+0x1c>
 800ceaa:	e07d      	b.n	800cfa8 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3314      	adds	r3, #20
 800ceb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	23a5      	movs	r3, #165	@ 0xa5
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	58d3      	ldr	r3, [r2, r3]
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d164      	bne.n	800cf88 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	689a      	ldr	r2, [r3, #8]
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d914      	bls.n	800cef4 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	689a      	ldr	r2, [r3, #8]
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	1ad2      	subs	r2, r2, r3
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	689a      	ldr	r2, [r3, #8]
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	0018      	movs	r0, r3
 800cee2:	f001 f9cf 	bl	800e284 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	2300      	movs	r3, #0
 800ceea:	2200      	movs	r2, #0
 800ceec:	2100      	movs	r1, #0
 800ceee:	f001 ff33 	bl	800ed58 <USBD_LL_PrepareReceive>
 800cef2:	e049      	b.n	800cf88 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	68da      	ldr	r2, [r3, #12]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d11f      	bne.n	800cf40 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	685a      	ldr	r2, [r3, #4]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d319      	bcc.n	800cf40 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	685a      	ldr	r2, [r3, #4]
 800cf10:	68f9      	ldr	r1, [r7, #12]
 800cf12:	23a6      	movs	r3, #166	@ 0xa6
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d211      	bcs.n	800cf40 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2100      	movs	r1, #0
 800cf22:	0018      	movs	r0, r3
 800cf24:	f001 f9ae 	bl	800e284 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	23a6      	movs	r3, #166	@ 0xa6
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	2100      	movs	r1, #0
 800cf30:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	2300      	movs	r3, #0
 800cf36:	2200      	movs	r2, #0
 800cf38:	2100      	movs	r1, #0
 800cf3a:	f001 ff0d 	bl	800ed58 <USBD_LL_PrepareReceive>
 800cf3e:	e023      	b.n	800cf88 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	23a7      	movs	r3, #167	@ 0xa7
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	5cd3      	ldrb	r3, [r2, r3]
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d113      	bne.n	800cf76 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	23ae      	movs	r3, #174	@ 0xae
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	58d3      	ldr	r3, [r2, r3]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00c      	beq.n	800cf76 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	23b5      	movs	r3, #181	@ 0xb5
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	2100      	movs	r1, #0
 800cf64:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	23ae      	movs	r3, #174	@ 0xae
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	58d3      	ldr	r3, [r2, r3]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	0010      	movs	r0, r2
 800cf74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2180      	movs	r1, #128	@ 0x80
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	f001 fe0b 	bl	800eb96 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	0018      	movs	r0, r3
 800cf84:	f001 f9d4 	bl	800e330 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	23a8      	movs	r3, #168	@ 0xa8
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	5cd3      	ldrb	r3, [r2, r3]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d050      	beq.n	800d036 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	0018      	movs	r0, r3
 800cf98:	f7ff fdd9 	bl	800cb4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	23a8      	movs	r3, #168	@ 0xa8
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	54d1      	strb	r1, [r2, r3]
 800cfa6:	e046      	b.n	800d036 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cfa8:	260b      	movs	r6, #11
 800cfaa:	19bb      	adds	r3, r7, r6
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2280      	movs	r2, #128	@ 0x80
 800cfb0:	4252      	negs	r2, r2
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	b2da      	uxtb	r2, r3
 800cfb6:	2517      	movs	r5, #23
 800cfb8:	197c      	adds	r4, r7, r5
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	0011      	movs	r1, r2
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	f000 f911 	bl	800d1e6 <USBD_CoreFindEP>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfc8:	0029      	movs	r1, r5
 800cfca:	187b      	adds	r3, r7, r1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2bff      	cmp	r3, #255	@ 0xff
 800cfd0:	d031      	beq.n	800d036 <USBD_LL_DataInStage+0x1a6>
 800cfd2:	187b      	adds	r3, r7, r1
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d12d      	bne.n	800d036 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	23a7      	movs	r3, #167	@ 0xa7
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	5cd3      	ldrb	r3, [r2, r3]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d126      	bne.n	800d036 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cfe8:	187b      	adds	r3, r7, r1
 800cfea:	781a      	ldrb	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	32ae      	adds	r2, #174	@ 0xae
 800cff0:	0092      	lsls	r2, r2, #2
 800cff2:	58d3      	ldr	r3, [r2, r3]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01d      	beq.n	800d036 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 800cffa:	0008      	movs	r0, r1
 800cffc:	187b      	adds	r3, r7, r1
 800cffe:	7819      	ldrb	r1, [r3, #0]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	23b5      	movs	r3, #181	@ 0xb5
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d008:	183b      	adds	r3, r7, r0
 800d00a:	781a      	ldrb	r2, [r3, #0]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	32ae      	adds	r2, #174	@ 0xae
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	58d3      	ldr	r3, [r2, r3]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	2516      	movs	r5, #22
 800d018:	197c      	adds	r4, r7, r5
 800d01a:	19ba      	adds	r2, r7, r6
 800d01c:	7811      	ldrb	r1, [r2, #0]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	0010      	movs	r0, r2
 800d022:	4798      	blx	r3
 800d024:	0003      	movs	r3, r0
 800d026:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 800d028:	197b      	adds	r3, r7, r5
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 800d030:	197b      	adds	r3, r7, r5
 800d032:	781b      	ldrb	r3, [r3, #0]
 800d034:	e000      	b.n	800d038 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	0018      	movs	r0, r3
 800d03a:	46bd      	mov	sp, r7
 800d03c:	b007      	add	sp, #28
 800d03e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d040 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d040:	b590      	push	{r4, r7, lr}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d048:	240f      	movs	r4, #15
 800d04a:	193b      	adds	r3, r7, r4
 800d04c:	2200      	movs	r2, #0
 800d04e:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	23a7      	movs	r3, #167	@ 0xa7
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	2101      	movs	r1, #1
 800d058:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	23a5      	movs	r3, #165	@ 0xa5
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	2100      	movs	r1, #0
 800d062:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	23a9      	movs	r3, #169	@ 0xa9
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	2100      	movs	r1, #0
 800d072:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	23a8      	movs	r3, #168	@ 0xa8
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	2100      	movs	r1, #0
 800d07c:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	23ae      	movs	r3, #174	@ 0xae
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	58d3      	ldr	r3, [r2, r3]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d016      	beq.n	800d0b8 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	23ae      	movs	r3, #174	@ 0xae
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	58d3      	ldr	r3, [r2, r3]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00f      	beq.n	800d0b8 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	23ae      	movs	r3, #174	@ 0xae
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	58d3      	ldr	r3, [r2, r3]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	b2d9      	uxtb	r1, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	4790      	blx	r2
 800d0ae:	1e03      	subs	r3, r0, #0
 800d0b0:	d002      	beq.n	800d0b8 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800d0b2:	193b      	adds	r3, r7, r4
 800d0b4:	2203      	movs	r2, #3
 800d0b6:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	2340      	movs	r3, #64	@ 0x40
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2100      	movs	r1, #0
 800d0c0:	f001 fd07 	bl	800ead2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d0c4:	687a      	ldr	r2, [r7, #4]
 800d0c6:	23b2      	movs	r3, #178	@ 0xb2
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	23b0      	movs	r3, #176	@ 0xb0
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	2140      	movs	r1, #64	@ 0x40
 800d0d6:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	2340      	movs	r3, #64	@ 0x40
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2180      	movs	r1, #128	@ 0x80
 800d0e0:	f001 fcf7 	bl	800ead2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2240      	movs	r2, #64	@ 0x40
 800d0ee:	621a      	str	r2, [r3, #32]

  return ret;
 800d0f0:	230f      	movs	r3, #15
 800d0f2:	18fb      	adds	r3, r7, r3
 800d0f4:	781b      	ldrb	r3, [r3, #0]
}
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	b005      	add	sp, #20
 800d0fc:	bd90      	pop	{r4, r7, pc}

0800d0fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	000a      	movs	r2, r1
 800d108:	1cfb      	adds	r3, r7, #3
 800d10a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	1cfa      	adds	r2, r7, #3
 800d110:	7812      	ldrb	r2, [r2, #0]
 800d112:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	0018      	movs	r0, r3
 800d118:	46bd      	mov	sp, r7
 800d11a:	b002      	add	sp, #8
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	23a7      	movs	r3, #167	@ 0xa7
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	5cd3      	ldrb	r3, [r2, r3]
 800d130:	b2d9      	uxtb	r1, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a05      	ldr	r2, [pc, #20]	@ (800d14c <USBD_LL_Suspend+0x2c>)
 800d136:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	23a7      	movs	r3, #167	@ 0xa7
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	2104      	movs	r1, #4
 800d140:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	0018      	movs	r0, r3
 800d146:	46bd      	mov	sp, r7
 800d148:	b002      	add	sp, #8
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0000029d 	.word	0x0000029d

0800d150 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	23a7      	movs	r3, #167	@ 0xa7
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	5cd3      	ldrb	r3, [r2, r3]
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b04      	cmp	r3, #4
 800d164:	d107      	bne.n	800d176 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a05      	ldr	r2, [pc, #20]	@ (800d180 <USBD_LL_Resume+0x30>)
 800d16a:	5c9b      	ldrb	r3, [r3, r2]
 800d16c:	b2d9      	uxtb	r1, r3
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	23a7      	movs	r3, #167	@ 0xa7
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	0018      	movs	r0, r3
 800d17a:	46bd      	mov	sp, r7
 800d17c:	b002      	add	sp, #8
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0000029d 	.word	0x0000029d

0800d184 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	23a7      	movs	r3, #167	@ 0xa7
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	5cd3      	ldrb	r3, [r2, r3]
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b03      	cmp	r3, #3
 800d198:	d114      	bne.n	800d1c4 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	23ae      	movs	r3, #174	@ 0xae
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	58d3      	ldr	r3, [r2, r3]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00e      	beq.n	800d1c4 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	23ae      	movs	r3, #174	@ 0xae
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	58d3      	ldr	r3, [r2, r3]
 800d1ae:	69db      	ldr	r3, [r3, #28]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d007      	beq.n	800d1c4 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	23ae      	movs	r3, #174	@ 0xae
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	58d3      	ldr	r3, [r2, r3]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	0010      	movs	r0, r2
 800d1c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	b002      	add	sp, #8
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	000a      	movs	r2, r1
 800d1d8:	1cfb      	adds	r3, r7, #3
 800d1da:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d1dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d1de:	0018      	movs	r0, r3
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	b002      	add	sp, #8
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	000a      	movs	r2, r1
 800d1f0:	1cfb      	adds	r3, r7, #3
 800d1f2:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d1f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	b002      	add	sp, #8
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b086      	sub	sp, #24
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	000a      	movs	r2, r1
 800d208:	1cfb      	adds	r3, r7, #3
 800d20a:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d214:	2300      	movs	r3, #0
 800d216:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	789a      	ldrb	r2, [r3, #2]
 800d21c:	78db      	ldrb	r3, [r3, #3]
 800d21e:	021b      	lsls	r3, r3, #8
 800d220:	4313      	orrs	r3, r2
 800d222:	b29b      	uxth	r3, r3
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	7812      	ldrb	r2, [r2, #0]
 800d228:	4293      	cmp	r3, r2
 800d22a:	d92a      	bls.n	800d282 <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	001a      	movs	r2, r3
 800d232:	230a      	movs	r3, #10
 800d234:	18fb      	adds	r3, r7, r3
 800d236:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800d238:	e016      	b.n	800d268 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d23a:	230a      	movs	r3, #10
 800d23c:	18fa      	adds	r2, r7, r3
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	0011      	movs	r1, r2
 800d242:	0018      	movs	r0, r3
 800d244:	f000 f822 	bl	800d28c <USBD_GetNextDesc>
 800d248:	0003      	movs	r3, r0
 800d24a:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	785b      	ldrb	r3, [r3, #1]
 800d250:	2b05      	cmp	r3, #5
 800d252:	d109      	bne.n	800d268 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	789b      	ldrb	r3, [r3, #2]
 800d25c:	1cfa      	adds	r2, r7, #3
 800d25e:	7812      	ldrb	r2, [r2, #0]
 800d260:	429a      	cmp	r2, r3
 800d262:	d00d      	beq.n	800d280 <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	789a      	ldrb	r2, [r3, #2]
 800d26c:	78db      	ldrb	r3, [r3, #3]
 800d26e:	021b      	lsls	r3, r3, #8
 800d270:	4313      	orrs	r3, r2
 800d272:	b29a      	uxth	r2, r3
 800d274:	230a      	movs	r3, #10
 800d276:	18fb      	adds	r3, r7, r3
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d8dd      	bhi.n	800d23a <USBD_GetEpDesc+0x3c>
 800d27e:	e000      	b.n	800d282 <USBD_GetEpDesc+0x84>
          break;
 800d280:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d282:	693b      	ldr	r3, [r7, #16]
}
 800d284:	0018      	movs	r0, r3
 800d286:	46bd      	mov	sp, r7
 800d288:	b006      	add	sp, #24
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	7812      	ldrb	r2, [r2, #0]
 800d2a2:	189b      	adds	r3, r3, r2
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	001a      	movs	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	189b      	adds	r3, r3, r2
 800d2b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
}
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	b004      	add	sp, #16
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b086      	sub	sp, #24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	781a      	ldrb	r2, [r3, #0]
 800d2d0:	2112      	movs	r1, #18
 800d2d2:	187b      	adds	r3, r7, r1
 800d2d4:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	781a      	ldrb	r2, [r3, #0]
 800d2e0:	2010      	movs	r0, #16
 800d2e2:	183b      	adds	r3, r7, r0
 800d2e4:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d2e6:	183b      	adds	r3, r7, r0
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	5e9b      	ldrsh	r3, [r3, r2]
 800d2ec:	021b      	lsls	r3, r3, #8
 800d2ee:	b21a      	sxth	r2, r3
 800d2f0:	187b      	adds	r3, r7, r1
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	5e5b      	ldrsh	r3, [r3, r1]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	b21a      	sxth	r2, r3
 800d2fa:	210e      	movs	r1, #14
 800d2fc:	187b      	adds	r3, r7, r1
 800d2fe:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800d300:	187b      	adds	r3, r7, r1
 800d302:	881b      	ldrh	r3, [r3, #0]
}
 800d304:	0018      	movs	r0, r3
 800d306:	46bd      	mov	sp, r7
 800d308:	b006      	add	sp, #24
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d316:	230f      	movs	r3, #15
 800d318:	18fb      	adds	r3, r7, r3
 800d31a:	2200      	movs	r2, #0
 800d31c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	001a      	movs	r2, r3
 800d324:	2360      	movs	r3, #96	@ 0x60
 800d326:	4013      	ands	r3, r2
 800d328:	2b40      	cmp	r3, #64	@ 0x40
 800d32a:	d004      	beq.n	800d336 <USBD_StdDevReq+0x2a>
 800d32c:	d85b      	bhi.n	800d3e6 <USBD_StdDevReq+0xda>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d013      	beq.n	800d35a <USBD_StdDevReq+0x4e>
 800d332:	2b20      	cmp	r3, #32
 800d334:	d157      	bne.n	800d3e6 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	23b5      	movs	r3, #181	@ 0xb5
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	58d2      	ldr	r2, [r2, r3]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	32ae      	adds	r2, #174	@ 0xae
 800d342:	0092      	lsls	r2, r2, #2
 800d344:	58d3      	ldr	r3, [r2, r3]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	220f      	movs	r2, #15
 800d34a:	18bc      	adds	r4, r7, r2
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	0010      	movs	r0, r2
 800d352:	4798      	blx	r3
 800d354:	0003      	movs	r3, r0
 800d356:	7023      	strb	r3, [r4, #0]
      break;
 800d358:	e04c      	b.n	800d3f4 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	785b      	ldrb	r3, [r3, #1]
 800d35e:	2b09      	cmp	r3, #9
 800d360:	d839      	bhi.n	800d3d6 <USBD_StdDevReq+0xca>
 800d362:	009a      	lsls	r2, r3, #2
 800d364:	4b27      	ldr	r3, [pc, #156]	@ (800d404 <USBD_StdDevReq+0xf8>)
 800d366:	18d3      	adds	r3, r2, r3
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d36c:	683a      	ldr	r2, [r7, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	0011      	movs	r1, r2
 800d372:	0018      	movs	r0, r3
 800d374:	f000 fada 	bl	800d92c <USBD_GetDescriptor>
          break;
 800d378:	e034      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	0011      	movs	r1, r2
 800d380:	0018      	movs	r0, r3
 800d382:	f000 fcad 	bl	800dce0 <USBD_SetAddress>
          break;
 800d386:	e02d      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d388:	230f      	movs	r3, #15
 800d38a:	18fc      	adds	r4, r7, r3
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	0011      	movs	r1, r2
 800d392:	0018      	movs	r0, r3
 800d394:	f000 fcfa 	bl	800dd8c <USBD_SetConfig>
 800d398:	0003      	movs	r3, r0
 800d39a:	7023      	strb	r3, [r4, #0]
          break;
 800d39c:	e022      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	0011      	movs	r1, r2
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	f000 fdbf 	bl	800df28 <USBD_GetConfig>
          break;
 800d3aa:	e01b      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	0011      	movs	r1, r2
 800d3b2:	0018      	movs	r0, r3
 800d3b4:	f000 fdf4 	bl	800dfa0 <USBD_GetStatus>
          break;
 800d3b8:	e014      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	0011      	movs	r1, r2
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	f000 fe28 	bl	800e016 <USBD_SetFeature>
          break;
 800d3c6:	e00d      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	0011      	movs	r1, r2
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f000 fe50 	bl	800e074 <USBD_ClrFeature>
          break;
 800d3d4:	e006      	b.n	800d3e4 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	0011      	movs	r1, r2
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f000 fead 	bl	800e13c <USBD_CtlError>
          break;
 800d3e2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d3e4:	e006      	b.n	800d3f4 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	0011      	movs	r1, r2
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	f000 fea5 	bl	800e13c <USBD_CtlError>
      break;
 800d3f2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d3f4:	230f      	movs	r3, #15
 800d3f6:	18fb      	adds	r3, r7, r3
 800d3f8:	781b      	ldrb	r3, [r3, #0]
}
 800d3fa:	0018      	movs	r0, r3
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	b005      	add	sp, #20
 800d400:	bd90      	pop	{r4, r7, pc}
 800d402:	46c0      	nop			@ (mov r8, r8)
 800d404:	080133fc 	.word	0x080133fc

0800d408 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d408:	b5b0      	push	{r4, r5, r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d412:	230f      	movs	r3, #15
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	2200      	movs	r2, #0
 800d418:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	001a      	movs	r2, r3
 800d420:	2360      	movs	r3, #96	@ 0x60
 800d422:	4013      	ands	r3, r2
 800d424:	2b40      	cmp	r3, #64	@ 0x40
 800d426:	d005      	beq.n	800d434 <USBD_StdItfReq+0x2c>
 800d428:	d900      	bls.n	800d42c <USBD_StdItfReq+0x24>
 800d42a:	e06c      	b.n	800d506 <USBD_StdItfReq+0xfe>
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <USBD_StdItfReq+0x2c>
 800d430:	2b20      	cmp	r3, #32
 800d432:	d168      	bne.n	800d506 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	23a7      	movs	r3, #167	@ 0xa7
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	5cd3      	ldrb	r3, [r2, r3]
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	3b01      	subs	r3, #1
 800d440:	2b02      	cmp	r3, #2
 800d442:	d857      	bhi.n	800d4f4 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	889b      	ldrh	r3, [r3, #4]
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d84b      	bhi.n	800d4e6 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	889b      	ldrh	r3, [r3, #4]
 800d452:	b2da      	uxtb	r2, r3
 800d454:	250e      	movs	r5, #14
 800d456:	197c      	adds	r4, r7, r5
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	0011      	movs	r1, r2
 800d45c:	0018      	movs	r0, r3
 800d45e:	f7ff feb6 	bl	800d1ce <USBD_CoreFindIF>
 800d462:	0003      	movs	r3, r0
 800d464:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d466:	0029      	movs	r1, r5
 800d468:	187b      	adds	r3, r7, r1
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2bff      	cmp	r3, #255	@ 0xff
 800d46e:	d028      	beq.n	800d4c2 <USBD_StdItfReq+0xba>
 800d470:	187b      	adds	r3, r7, r1
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d124      	bne.n	800d4c2 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d478:	187b      	adds	r3, r7, r1
 800d47a:	781a      	ldrb	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	32ae      	adds	r2, #174	@ 0xae
 800d480:	0092      	lsls	r2, r2, #2
 800d482:	58d3      	ldr	r3, [r2, r3]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d016      	beq.n	800d4b8 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 800d48a:	0008      	movs	r0, r1
 800d48c:	187b      	adds	r3, r7, r1
 800d48e:	7819      	ldrb	r1, [r3, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	23b5      	movs	r3, #181	@ 0xb5
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d498:	183b      	adds	r3, r7, r0
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	32ae      	adds	r2, #174	@ 0xae
 800d4a0:	0092      	lsls	r2, r2, #2
 800d4a2:	58d3      	ldr	r3, [r2, r3]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	220f      	movs	r2, #15
 800d4a8:	18bc      	adds	r4, r7, r2
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	0010      	movs	r0, r2
 800d4b0:	4798      	blx	r3
 800d4b2:	0003      	movs	r3, r0
 800d4b4:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800d4b6:	e008      	b.n	800d4ca <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d4b8:	230f      	movs	r3, #15
 800d4ba:	18fb      	adds	r3, r7, r3
 800d4bc:	2203      	movs	r2, #3
 800d4be:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800d4c0:	e003      	b.n	800d4ca <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d4c2:	230f      	movs	r3, #15
 800d4c4:	18fb      	adds	r3, r7, r3
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d117      	bne.n	800d502 <USBD_StdItfReq+0xfa>
 800d4d2:	230f      	movs	r3, #15
 800d4d4:	18fb      	adds	r3, r7, r3
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d112      	bne.n	800d502 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	0018      	movs	r0, r3
 800d4e0:	f000 ff12 	bl	800e308 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d4e4:	e00d      	b.n	800d502 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	0011      	movs	r1, r2
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	f000 fe25 	bl	800e13c <USBD_CtlError>
          break;
 800d4f2:	e006      	b.n	800d502 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	0011      	movs	r1, r2
 800d4fa:	0018      	movs	r0, r3
 800d4fc:	f000 fe1e 	bl	800e13c <USBD_CtlError>
          break;
 800d500:	e000      	b.n	800d504 <USBD_StdItfReq+0xfc>
          break;
 800d502:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d504:	e006      	b.n	800d514 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	0011      	movs	r1, r2
 800d50c:	0018      	movs	r0, r3
 800d50e:	f000 fe15 	bl	800e13c <USBD_CtlError>
      break;
 800d512:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d514:	230f      	movs	r3, #15
 800d516:	18fb      	adds	r3, r7, r3
 800d518:	781b      	ldrb	r3, [r3, #0]
}
 800d51a:	0018      	movs	r0, r3
 800d51c:	46bd      	mov	sp, r7
 800d51e:	b004      	add	sp, #16
 800d520:	bdb0      	pop	{r4, r5, r7, pc}

0800d522 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d522:	b5b0      	push	{r4, r5, r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d52c:	230f      	movs	r3, #15
 800d52e:	18fb      	adds	r3, r7, r3
 800d530:	2200      	movs	r2, #0
 800d532:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	889a      	ldrh	r2, [r3, #4]
 800d538:	230e      	movs	r3, #14
 800d53a:	18fb      	adds	r3, r7, r3
 800d53c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	001a      	movs	r2, r3
 800d544:	2360      	movs	r3, #96	@ 0x60
 800d546:	4013      	ands	r3, r2
 800d548:	2b40      	cmp	r3, #64	@ 0x40
 800d54a:	d006      	beq.n	800d55a <USBD_StdEPReq+0x38>
 800d54c:	d900      	bls.n	800d550 <USBD_StdEPReq+0x2e>
 800d54e:	e1de      	b.n	800d90e <USBD_StdEPReq+0x3ec>
 800d550:	2b00      	cmp	r3, #0
 800d552:	d039      	beq.n	800d5c8 <USBD_StdEPReq+0xa6>
 800d554:	2b20      	cmp	r3, #32
 800d556:	d000      	beq.n	800d55a <USBD_StdEPReq+0x38>
 800d558:	e1d9      	b.n	800d90e <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d55a:	250d      	movs	r5, #13
 800d55c:	197c      	adds	r4, r7, r5
 800d55e:	230e      	movs	r3, #14
 800d560:	18fb      	adds	r3, r7, r3
 800d562:	781a      	ldrb	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	0011      	movs	r1, r2
 800d568:	0018      	movs	r0, r3
 800d56a:	f7ff fe3c 	bl	800d1e6 <USBD_CoreFindEP>
 800d56e:	0003      	movs	r3, r0
 800d570:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d572:	197b      	adds	r3, r7, r5
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2bff      	cmp	r3, #255	@ 0xff
 800d578:	d100      	bne.n	800d57c <USBD_StdEPReq+0x5a>
 800d57a:	e1cf      	b.n	800d91c <USBD_StdEPReq+0x3fa>
 800d57c:	197b      	adds	r3, r7, r5
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d000      	beq.n	800d586 <USBD_StdEPReq+0x64>
 800d584:	e1ca      	b.n	800d91c <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800d586:	197b      	adds	r3, r7, r5
 800d588:	7819      	ldrb	r1, [r3, #0]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	23b5      	movs	r3, #181	@ 0xb5
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d592:	0029      	movs	r1, r5
 800d594:	187b      	adds	r3, r7, r1
 800d596:	781a      	ldrb	r2, [r3, #0]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	32ae      	adds	r2, #174	@ 0xae
 800d59c:	0092      	lsls	r2, r2, #2
 800d59e:	58d3      	ldr	r3, [r2, r3]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d100      	bne.n	800d5a8 <USBD_StdEPReq+0x86>
 800d5a6:	e1b9      	b.n	800d91c <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d5a8:	187b      	adds	r3, r7, r1
 800d5aa:	781a      	ldrb	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	32ae      	adds	r2, #174	@ 0xae
 800d5b0:	0092      	lsls	r2, r2, #2
 800d5b2:	58d3      	ldr	r3, [r2, r3]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	220f      	movs	r2, #15
 800d5b8:	18bc      	adds	r4, r7, r2
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	0010      	movs	r0, r2
 800d5c0:	4798      	blx	r3
 800d5c2:	0003      	movs	r3, r0
 800d5c4:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 800d5c6:	e1a9      	b.n	800d91c <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	785b      	ldrb	r3, [r3, #1]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d007      	beq.n	800d5e0 <USBD_StdEPReq+0xbe>
 800d5d0:	dd00      	ble.n	800d5d4 <USBD_StdEPReq+0xb2>
 800d5d2:	e194      	b.n	800d8fe <USBD_StdEPReq+0x3dc>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d100      	bne.n	800d5da <USBD_StdEPReq+0xb8>
 800d5d8:	e0c9      	b.n	800d76e <USBD_StdEPReq+0x24c>
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d04d      	beq.n	800d67a <USBD_StdEPReq+0x158>
 800d5de:	e18e      	b.n	800d8fe <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	23a7      	movs	r3, #167	@ 0xa7
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	5cd3      	ldrb	r3, [r2, r3]
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d002      	beq.n	800d5f4 <USBD_StdEPReq+0xd2>
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d01e      	beq.n	800d630 <USBD_StdEPReq+0x10e>
 800d5f2:	e03a      	b.n	800d66a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5f4:	220e      	movs	r2, #14
 800d5f6:	18bb      	adds	r3, r7, r2
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d011      	beq.n	800d622 <USBD_StdEPReq+0x100>
 800d5fe:	18bb      	adds	r3, r7, r2
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b80      	cmp	r3, #128	@ 0x80
 800d604:	d00d      	beq.n	800d622 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d606:	18bb      	adds	r3, r7, r2
 800d608:	781a      	ldrb	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	0011      	movs	r1, r2
 800d60e:	0018      	movs	r0, r3
 800d610:	f001 fac1 	bl	800eb96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2180      	movs	r1, #128	@ 0x80
 800d618:	0018      	movs	r0, r3
 800d61a:	f001 fabc 	bl	800eb96 <USBD_LL_StallEP>
 800d61e:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d620:	e02a      	b.n	800d678 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	0011      	movs	r1, r2
 800d628:	0018      	movs	r0, r3
 800d62a:	f000 fd87 	bl	800e13c <USBD_CtlError>
              break;
 800d62e:	e023      	b.n	800d678 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	885b      	ldrh	r3, [r3, #2]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d113      	bne.n	800d660 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d638:	220e      	movs	r2, #14
 800d63a:	18bb      	adds	r3, r7, r2
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00e      	beq.n	800d660 <USBD_StdEPReq+0x13e>
 800d642:	18bb      	adds	r3, r7, r2
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b80      	cmp	r3, #128	@ 0x80
 800d648:	d00a      	beq.n	800d660 <USBD_StdEPReq+0x13e>
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	88db      	ldrh	r3, [r3, #6]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d106      	bne.n	800d660 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d652:	18bb      	adds	r3, r7, r2
 800d654:	781a      	ldrb	r2, [r3, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	0011      	movs	r1, r2
 800d65a:	0018      	movs	r0, r3
 800d65c:	f001 fa9b 	bl	800eb96 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	0018      	movs	r0, r3
 800d664:	f000 fe50 	bl	800e308 <USBD_CtlSendStatus>

              break;
 800d668:	e006      	b.n	800d678 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	0011      	movs	r1, r2
 800d670:	0018      	movs	r0, r3
 800d672:	f000 fd63 	bl	800e13c <USBD_CtlError>
              break;
 800d676:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d678:	e148      	b.n	800d90c <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	23a7      	movs	r3, #167	@ 0xa7
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	5cd3      	ldrb	r3, [r2, r3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	2b02      	cmp	r3, #2
 800d686:	d002      	beq.n	800d68e <USBD_StdEPReq+0x16c>
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d01e      	beq.n	800d6ca <USBD_StdEPReq+0x1a8>
 800d68c:	e066      	b.n	800d75c <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d68e:	220e      	movs	r2, #14
 800d690:	18bb      	adds	r3, r7, r2
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d011      	beq.n	800d6bc <USBD_StdEPReq+0x19a>
 800d698:	18bb      	adds	r3, r7, r2
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b80      	cmp	r3, #128	@ 0x80
 800d69e:	d00d      	beq.n	800d6bc <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6a0:	18bb      	adds	r3, r7, r2
 800d6a2:	781a      	ldrb	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	0011      	movs	r1, r2
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	f001 fa74 	bl	800eb96 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2180      	movs	r1, #128	@ 0x80
 800d6b2:	0018      	movs	r0, r3
 800d6b4:	f001 fa6f 	bl	800eb96 <USBD_LL_StallEP>
 800d6b8:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d6ba:	e057      	b.n	800d76c <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 800d6bc:	683a      	ldr	r2, [r7, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	0011      	movs	r1, r2
 800d6c2:	0018      	movs	r0, r3
 800d6c4:	f000 fd3a 	bl	800e13c <USBD_CtlError>
              break;
 800d6c8:	e050      	b.n	800d76c <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	885b      	ldrh	r3, [r3, #2]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d14b      	bne.n	800d76a <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d6d2:	210e      	movs	r1, #14
 800d6d4:	187b      	adds	r3, r7, r1
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	227f      	movs	r2, #127	@ 0x7f
 800d6da:	4013      	ands	r3, r2
 800d6dc:	d006      	beq.n	800d6ec <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d6de:	187b      	adds	r3, r7, r1
 800d6e0:	781a      	ldrb	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0011      	movs	r1, r2
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f001 fa80 	bl	800ebec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	f000 fe0a 	bl	800e308 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d6f4:	250d      	movs	r5, #13
 800d6f6:	197c      	adds	r4, r7, r5
 800d6f8:	230e      	movs	r3, #14
 800d6fa:	18fb      	adds	r3, r7, r3
 800d6fc:	781a      	ldrb	r2, [r3, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	0011      	movs	r1, r2
 800d702:	0018      	movs	r0, r3
 800d704:	f7ff fd6f 	bl	800d1e6 <USBD_CoreFindEP>
 800d708:	0003      	movs	r3, r0
 800d70a:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d70c:	197b      	adds	r3, r7, r5
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2bff      	cmp	r3, #255	@ 0xff
 800d712:	d02a      	beq.n	800d76a <USBD_StdEPReq+0x248>
 800d714:	197b      	adds	r3, r7, r5
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d126      	bne.n	800d76a <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 800d71c:	197b      	adds	r3, r7, r5
 800d71e:	7819      	ldrb	r1, [r3, #0]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	23b5      	movs	r3, #181	@ 0xb5
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d728:	0029      	movs	r1, r5
 800d72a:	187b      	adds	r3, r7, r1
 800d72c:	781a      	ldrb	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	32ae      	adds	r2, #174	@ 0xae
 800d732:	0092      	lsls	r2, r2, #2
 800d734:	58d3      	ldr	r3, [r2, r3]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d016      	beq.n	800d76a <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d73c:	187b      	adds	r3, r7, r1
 800d73e:	781a      	ldrb	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	32ae      	adds	r2, #174	@ 0xae
 800d744:	0092      	lsls	r2, r2, #2
 800d746:	58d3      	ldr	r3, [r2, r3]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	220f      	movs	r2, #15
 800d74c:	18bc      	adds	r4, r7, r2
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	0010      	movs	r0, r2
 800d754:	4798      	blx	r3
 800d756:	0003      	movs	r3, r0
 800d758:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 800d75a:	e006      	b.n	800d76a <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	0011      	movs	r1, r2
 800d762:	0018      	movs	r0, r3
 800d764:	f000 fcea 	bl	800e13c <USBD_CtlError>
              break;
 800d768:	e000      	b.n	800d76c <USBD_StdEPReq+0x24a>
              break;
 800d76a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d76c:	e0ce      	b.n	800d90c <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	23a7      	movs	r3, #167	@ 0xa7
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	5cd3      	ldrb	r3, [r2, r3]
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d002      	beq.n	800d782 <USBD_StdEPReq+0x260>
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	d03c      	beq.n	800d7fa <USBD_StdEPReq+0x2d8>
 800d780:	e0b5      	b.n	800d8ee <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d782:	220e      	movs	r2, #14
 800d784:	18bb      	adds	r3, r7, r2
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00a      	beq.n	800d7a2 <USBD_StdEPReq+0x280>
 800d78c:	18bb      	adds	r3, r7, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b80      	cmp	r3, #128	@ 0x80
 800d792:	d006      	beq.n	800d7a2 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	0011      	movs	r1, r2
 800d79a:	0018      	movs	r0, r3
 800d79c:	f000 fcce 	bl	800e13c <USBD_CtlError>
                break;
 800d7a0:	e0ac      	b.n	800d8fc <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7a2:	220e      	movs	r2, #14
 800d7a4:	18bb      	adds	r3, r7, r2
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	b25b      	sxtb	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	da0c      	bge.n	800d7c8 <USBD_StdEPReq+0x2a6>
 800d7ae:	18bb      	adds	r3, r7, r2
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	227f      	movs	r2, #127	@ 0x7f
 800d7b4:	401a      	ands	r2, r3
 800d7b6:	0013      	movs	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	189b      	adds	r3, r3, r2
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	3310      	adds	r3, #16
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	18d3      	adds	r3, r2, r3
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	e00d      	b.n	800d7e4 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d7c8:	230e      	movs	r3, #14
 800d7ca:	18fb      	adds	r3, r7, r3
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	227f      	movs	r2, #127	@ 0x7f
 800d7d0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d7d2:	0013      	movs	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	189b      	adds	r3, r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	3351      	adds	r3, #81	@ 0x51
 800d7dc:	33ff      	adds	r3, #255	@ 0xff
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	18d3      	adds	r3, r2, r3
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7ec:	68b9      	ldr	r1, [r7, #8]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	f000 fd2a 	bl	800e24c <USBD_CtlSendData>
              break;
 800d7f8:	e080      	b.n	800d8fc <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d7fa:	220e      	movs	r2, #14
 800d7fc:	18bb      	adds	r3, r7, r2
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	b25b      	sxtb	r3, r3
 800d802:	2b00      	cmp	r3, #0
 800d804:	da14      	bge.n	800d830 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d806:	18bb      	adds	r3, r7, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	220f      	movs	r2, #15
 800d80c:	401a      	ands	r2, r3
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	0013      	movs	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	189b      	adds	r3, r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	18cb      	adds	r3, r1, r3
 800d81a:	3324      	adds	r3, #36	@ 0x24
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d11e      	bne.n	800d860 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	0011      	movs	r1, r2
 800d828:	0018      	movs	r0, r3
 800d82a:	f000 fc87 	bl	800e13c <USBD_CtlError>
                  break;
 800d82e:	e065      	b.n	800d8fc <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d830:	230e      	movs	r3, #14
 800d832:	18fb      	adds	r3, r7, r3
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	220f      	movs	r2, #15
 800d838:	401a      	ands	r2, r3
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	23b2      	movs	r3, #178	@ 0xb2
 800d83e:	0059      	lsls	r1, r3, #1
 800d840:	0013      	movs	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	189b      	adds	r3, r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	18c3      	adds	r3, r0, r3
 800d84a:	185b      	adds	r3, r3, r1
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	0011      	movs	r1, r2
 800d858:	0018      	movs	r0, r3
 800d85a:	f000 fc6f 	bl	800e13c <USBD_CtlError>
                  break;
 800d85e:	e04d      	b.n	800d8fc <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d860:	220e      	movs	r2, #14
 800d862:	18bb      	adds	r3, r7, r2
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	b25b      	sxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	da0c      	bge.n	800d886 <USBD_StdEPReq+0x364>
 800d86c:	18bb      	adds	r3, r7, r2
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	227f      	movs	r2, #127	@ 0x7f
 800d872:	401a      	ands	r2, r3
 800d874:	0013      	movs	r3, r2
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	189b      	adds	r3, r3, r2
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	3310      	adds	r3, #16
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	18d3      	adds	r3, r2, r3
 800d882:	3304      	adds	r3, #4
 800d884:	e00d      	b.n	800d8a2 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d886:	230e      	movs	r3, #14
 800d888:	18fb      	adds	r3, r7, r3
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	227f      	movs	r2, #127	@ 0x7f
 800d88e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d890:	0013      	movs	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	189b      	adds	r3, r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	3351      	adds	r3, #81	@ 0x51
 800d89a:	33ff      	adds	r3, #255	@ 0xff
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	18d3      	adds	r3, r2, r3
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d8a4:	220e      	movs	r2, #14
 800d8a6:	18bb      	adds	r3, r7, r2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <USBD_StdEPReq+0x394>
 800d8ae:	18bb      	adds	r3, r7, r2
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	2b80      	cmp	r3, #128	@ 0x80
 800d8b4:	d103      	bne.n	800d8be <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]
 800d8bc:	e010      	b.n	800d8e0 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d8be:	230e      	movs	r3, #14
 800d8c0:	18fb      	adds	r3, r7, r3
 800d8c2:	781a      	ldrb	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	0011      	movs	r1, r2
 800d8c8:	0018      	movs	r0, r3
 800d8ca:	f001 f9ba 	bl	800ec42 <USBD_LL_IsStallEP>
 800d8ce:	1e03      	subs	r3, r0, #0
 800d8d0:	d003      	beq.n	800d8da <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	e002      	b.n	800d8e0 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d8e0:	68b9      	ldr	r1, [r7, #8]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	0018      	movs	r0, r3
 800d8e8:	f000 fcb0 	bl	800e24c <USBD_CtlSendData>
              break;
 800d8ec:	e006      	b.n	800d8fc <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800d8ee:	683a      	ldr	r2, [r7, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	0011      	movs	r1, r2
 800d8f4:	0018      	movs	r0, r3
 800d8f6:	f000 fc21 	bl	800e13c <USBD_CtlError>
              break;
 800d8fa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d8fc:	e006      	b.n	800d90c <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	0011      	movs	r1, r2
 800d904:	0018      	movs	r0, r3
 800d906:	f000 fc19 	bl	800e13c <USBD_CtlError>
          break;
 800d90a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d90c:	e007      	b.n	800d91e <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	0011      	movs	r1, r2
 800d914:	0018      	movs	r0, r3
 800d916:	f000 fc11 	bl	800e13c <USBD_CtlError>
      break;
 800d91a:	e000      	b.n	800d91e <USBD_StdEPReq+0x3fc>
      break;
 800d91c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d91e:	230f      	movs	r3, #15
 800d920:	18fb      	adds	r3, r7, r3
 800d922:	781b      	ldrb	r3, [r3, #0]
}
 800d924:	0018      	movs	r0, r3
 800d926:	46bd      	mov	sp, r7
 800d928:	b004      	add	sp, #16
 800d92a:	bdb0      	pop	{r4, r5, r7, pc}

0800d92c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d936:	2308      	movs	r3, #8
 800d938:	18fb      	adds	r3, r7, r3
 800d93a:	2200      	movs	r2, #0
 800d93c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d942:	230b      	movs	r3, #11
 800d944:	18fb      	adds	r3, r7, r3
 800d946:	2200      	movs	r2, #0
 800d948:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	885b      	ldrh	r3, [r3, #2]
 800d94e:	0a1b      	lsrs	r3, r3, #8
 800d950:	b29b      	uxth	r3, r3
 800d952:	2b0f      	cmp	r3, #15
 800d954:	d900      	bls.n	800d958 <USBD_GetDescriptor+0x2c>
 800d956:	e17b      	b.n	800dc50 <USBD_GetDescriptor+0x324>
 800d958:	009a      	lsls	r2, r3, #2
 800d95a:	4bdd      	ldr	r3, [pc, #884]	@ (800dcd0 <USBD_GetDescriptor+0x3a4>)
 800d95c:	18d3      	adds	r3, r2, r3
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	23ad      	movs	r3, #173	@ 0xad
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	58d3      	ldr	r3, [r2, r3]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	23ad      	movs	r3, #173	@ 0xad
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	58d3      	ldr	r3, [r2, r3]
 800d978:	69db      	ldr	r3, [r3, #28]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	7c12      	ldrb	r2, [r2, #16]
 800d97e:	2108      	movs	r1, #8
 800d980:	1879      	adds	r1, r7, r1
 800d982:	0010      	movs	r0, r2
 800d984:	4798      	blx	r3
 800d986:	0003      	movs	r3, r0
 800d988:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d98a:	e16e      	b.n	800dc6a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	0011      	movs	r1, r2
 800d992:	0018      	movs	r0, r3
 800d994:	f000 fbd2 	bl	800e13c <USBD_CtlError>
        err++;
 800d998:	210b      	movs	r1, #11
 800d99a:	187b      	adds	r3, r7, r1
 800d99c:	781a      	ldrb	r2, [r3, #0]
 800d99e:	187b      	adds	r3, r7, r1
 800d9a0:	3201      	adds	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
      break;
 800d9a4:	e161      	b.n	800dc6a <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	23ad      	movs	r3, #173	@ 0xad
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	58d3      	ldr	r3, [r2, r3]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	7c12      	ldrb	r2, [r2, #16]
 800d9b4:	2108      	movs	r1, #8
 800d9b6:	1879      	adds	r1, r7, r1
 800d9b8:	0010      	movs	r0, r2
 800d9ba:	4798      	blx	r3
 800d9bc:	0003      	movs	r3, r0
 800d9be:	60fb      	str	r3, [r7, #12]
      break;
 800d9c0:	e153      	b.n	800dc6a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7c1b      	ldrb	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10f      	bne.n	800d9ea <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	23ae      	movs	r3, #174	@ 0xae
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	58d3      	ldr	r3, [r2, r3]
 800d9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	18ba      	adds	r2, r7, r2
 800d9d8:	0010      	movs	r0, r2
 800d9da:	4798      	blx	r3
 800d9dc:	0003      	movs	r3, r0
 800d9de:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d9e8:	e13f      	b.n	800dc6a <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	23ae      	movs	r3, #174	@ 0xae
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	58d3      	ldr	r3, [r2, r3]
 800d9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	18ba      	adds	r2, r7, r2
 800d9f8:	0010      	movs	r0, r2
 800d9fa:	4798      	blx	r3
 800d9fc:	0003      	movs	r3, r0
 800d9fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3301      	adds	r3, #1
 800da04:	2202      	movs	r2, #2
 800da06:	701a      	strb	r2, [r3, #0]
      break;
 800da08:	e12f      	b.n	800dc6a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	885b      	ldrh	r3, [r3, #2]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b05      	cmp	r3, #5
 800da12:	d900      	bls.n	800da16 <USBD_GetDescriptor+0xea>
 800da14:	e0d0      	b.n	800dbb8 <USBD_GetDescriptor+0x28c>
 800da16:	009a      	lsls	r2, r3, #2
 800da18:	4bae      	ldr	r3, [pc, #696]	@ (800dcd4 <USBD_GetDescriptor+0x3a8>)
 800da1a:	18d3      	adds	r3, r2, r3
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	23ad      	movs	r3, #173	@ 0xad
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	58d3      	ldr	r3, [r2, r3]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00d      	beq.n	800da4a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	23ad      	movs	r3, #173	@ 0xad
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	58d3      	ldr	r3, [r2, r3]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	7c12      	ldrb	r2, [r2, #16]
 800da3c:	2108      	movs	r1, #8
 800da3e:	1879      	adds	r1, r7, r1
 800da40:	0010      	movs	r0, r2
 800da42:	4798      	blx	r3
 800da44:	0003      	movs	r3, r0
 800da46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da48:	e0c3      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	0011      	movs	r1, r2
 800da50:	0018      	movs	r0, r3
 800da52:	f000 fb73 	bl	800e13c <USBD_CtlError>
            err++;
 800da56:	210b      	movs	r1, #11
 800da58:	187b      	adds	r3, r7, r1
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	187b      	adds	r3, r7, r1
 800da5e:	3201      	adds	r2, #1
 800da60:	701a      	strb	r2, [r3, #0]
          break;
 800da62:	e0b6      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	23ad      	movs	r3, #173	@ 0xad
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	58d3      	ldr	r3, [r2, r3]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00d      	beq.n	800da8e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	23ad      	movs	r3, #173	@ 0xad
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	58d3      	ldr	r3, [r2, r3]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	7c12      	ldrb	r2, [r2, #16]
 800da80:	2108      	movs	r1, #8
 800da82:	1879      	adds	r1, r7, r1
 800da84:	0010      	movs	r0, r2
 800da86:	4798      	blx	r3
 800da88:	0003      	movs	r3, r0
 800da8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da8c:	e0a1      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	0011      	movs	r1, r2
 800da94:	0018      	movs	r0, r3
 800da96:	f000 fb51 	bl	800e13c <USBD_CtlError>
            err++;
 800da9a:	210b      	movs	r1, #11
 800da9c:	187b      	adds	r3, r7, r1
 800da9e:	781a      	ldrb	r2, [r3, #0]
 800daa0:	187b      	adds	r3, r7, r1
 800daa2:	3201      	adds	r2, #1
 800daa4:	701a      	strb	r2, [r3, #0]
          break;
 800daa6:	e094      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	23ad      	movs	r3, #173	@ 0xad
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	58d3      	ldr	r3, [r2, r3]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00d      	beq.n	800dad2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	23ad      	movs	r3, #173	@ 0xad
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	58d3      	ldr	r3, [r2, r3]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	7c12      	ldrb	r2, [r2, #16]
 800dac4:	2108      	movs	r1, #8
 800dac6:	1879      	adds	r1, r7, r1
 800dac8:	0010      	movs	r0, r2
 800daca:	4798      	blx	r3
 800dacc:	0003      	movs	r3, r0
 800dace:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dad0:	e07f      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	0011      	movs	r1, r2
 800dad8:	0018      	movs	r0, r3
 800dada:	f000 fb2f 	bl	800e13c <USBD_CtlError>
            err++;
 800dade:	210b      	movs	r1, #11
 800dae0:	187b      	adds	r3, r7, r1
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	3201      	adds	r2, #1
 800dae8:	701a      	strb	r2, [r3, #0]
          break;
 800daea:	e072      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	23ad      	movs	r3, #173	@ 0xad
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	58d3      	ldr	r3, [r2, r3]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00d      	beq.n	800db16 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	23ad      	movs	r3, #173	@ 0xad
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	58d3      	ldr	r3, [r2, r3]
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	7c12      	ldrb	r2, [r2, #16]
 800db08:	2108      	movs	r1, #8
 800db0a:	1879      	adds	r1, r7, r1
 800db0c:	0010      	movs	r0, r2
 800db0e:	4798      	blx	r3
 800db10:	0003      	movs	r3, r0
 800db12:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db14:	e05d      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	0011      	movs	r1, r2
 800db1c:	0018      	movs	r0, r3
 800db1e:	f000 fb0d 	bl	800e13c <USBD_CtlError>
            err++;
 800db22:	210b      	movs	r1, #11
 800db24:	187b      	adds	r3, r7, r1
 800db26:	781a      	ldrb	r2, [r3, #0]
 800db28:	187b      	adds	r3, r7, r1
 800db2a:	3201      	adds	r2, #1
 800db2c:	701a      	strb	r2, [r3, #0]
          break;
 800db2e:	e050      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	23ad      	movs	r3, #173	@ 0xad
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	58d3      	ldr	r3, [r2, r3]
 800db38:	695b      	ldr	r3, [r3, #20]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00d      	beq.n	800db5a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	23ad      	movs	r3, #173	@ 0xad
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	58d3      	ldr	r3, [r2, r3]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	7c12      	ldrb	r2, [r2, #16]
 800db4c:	2108      	movs	r1, #8
 800db4e:	1879      	adds	r1, r7, r1
 800db50:	0010      	movs	r0, r2
 800db52:	4798      	blx	r3
 800db54:	0003      	movs	r3, r0
 800db56:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db58:	e03b      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	0011      	movs	r1, r2
 800db60:	0018      	movs	r0, r3
 800db62:	f000 faeb 	bl	800e13c <USBD_CtlError>
            err++;
 800db66:	210b      	movs	r1, #11
 800db68:	187b      	adds	r3, r7, r1
 800db6a:	781a      	ldrb	r2, [r3, #0]
 800db6c:	187b      	adds	r3, r7, r1
 800db6e:	3201      	adds	r2, #1
 800db70:	701a      	strb	r2, [r3, #0]
          break;
 800db72:	e02e      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	23ad      	movs	r3, #173	@ 0xad
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	58d3      	ldr	r3, [r2, r3]
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00d      	beq.n	800db9e <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	23ad      	movs	r3, #173	@ 0xad
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	58d3      	ldr	r3, [r2, r3]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	7c12      	ldrb	r2, [r2, #16]
 800db90:	2108      	movs	r1, #8
 800db92:	1879      	adds	r1, r7, r1
 800db94:	0010      	movs	r0, r2
 800db96:	4798      	blx	r3
 800db98:	0003      	movs	r3, r0
 800db9a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db9c:	e019      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	0011      	movs	r1, r2
 800dba4:	0018      	movs	r0, r3
 800dba6:	f000 fac9 	bl	800e13c <USBD_CtlError>
            err++;
 800dbaa:	210b      	movs	r1, #11
 800dbac:	187b      	adds	r3, r7, r1
 800dbae:	781a      	ldrb	r2, [r3, #0]
 800dbb0:	187b      	adds	r3, r7, r1
 800dbb2:	3201      	adds	r2, #1
 800dbb4:	701a      	strb	r2, [r3, #0]
          break;
 800dbb6:	e00c      	b.n	800dbd2 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	0011      	movs	r1, r2
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	f000 fabc 	bl	800e13c <USBD_CtlError>
          err++;
 800dbc4:	210b      	movs	r1, #11
 800dbc6:	187b      	adds	r3, r7, r1
 800dbc8:	781a      	ldrb	r2, [r3, #0]
 800dbca:	187b      	adds	r3, r7, r1
 800dbcc:	3201      	adds	r2, #1
 800dbce:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dbd0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800dbd2:	e04a      	b.n	800dc6a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	7c1b      	ldrb	r3, [r3, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10b      	bne.n	800dbf4 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	23ae      	movs	r3, #174	@ 0xae
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	58d3      	ldr	r3, [r2, r3]
 800dbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbe6:	2208      	movs	r2, #8
 800dbe8:	18ba      	adds	r2, r7, r2
 800dbea:	0010      	movs	r0, r2
 800dbec:	4798      	blx	r3
 800dbee:	0003      	movs	r3, r0
 800dbf0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dbf2:	e03a      	b.n	800dc6a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f000 fa9e 	bl	800e13c <USBD_CtlError>
        err++;
 800dc00:	210b      	movs	r1, #11
 800dc02:	187b      	adds	r3, r7, r1
 800dc04:	781a      	ldrb	r2, [r3, #0]
 800dc06:	187b      	adds	r3, r7, r1
 800dc08:	3201      	adds	r2, #1
 800dc0a:	701a      	strb	r2, [r3, #0]
      break;
 800dc0c:	e02d      	b.n	800dc6a <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	7c1b      	ldrb	r3, [r3, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10f      	bne.n	800dc36 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	23ae      	movs	r3, #174	@ 0xae
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	58d3      	ldr	r3, [r2, r3]
 800dc1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc20:	2208      	movs	r2, #8
 800dc22:	18ba      	adds	r2, r7, r2
 800dc24:	0010      	movs	r0, r2
 800dc26:	4798      	blx	r3
 800dc28:	0003      	movs	r3, r0
 800dc2a:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	2207      	movs	r2, #7
 800dc32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc34:	e019      	b.n	800dc6a <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	0011      	movs	r1, r2
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f000 fa7d 	bl	800e13c <USBD_CtlError>
        err++;
 800dc42:	210b      	movs	r1, #11
 800dc44:	187b      	adds	r3, r7, r1
 800dc46:	781a      	ldrb	r2, [r3, #0]
 800dc48:	187b      	adds	r3, r7, r1
 800dc4a:	3201      	adds	r2, #1
 800dc4c:	701a      	strb	r2, [r3, #0]
      break;
 800dc4e:	e00c      	b.n	800dc6a <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 800dc50:	683a      	ldr	r2, [r7, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	0011      	movs	r1, r2
 800dc56:	0018      	movs	r0, r3
 800dc58:	f000 fa70 	bl	800e13c <USBD_CtlError>
      err++;
 800dc5c:	210b      	movs	r1, #11
 800dc5e:	187b      	adds	r3, r7, r1
 800dc60:	781a      	ldrb	r2, [r3, #0]
 800dc62:	187b      	adds	r3, r7, r1
 800dc64:	3201      	adds	r2, #1
 800dc66:	701a      	strb	r2, [r3, #0]
      break;
 800dc68:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800dc6a:	230b      	movs	r3, #11
 800dc6c:	18fb      	adds	r3, r7, r3
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d131      	bne.n	800dcd8 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	88db      	ldrh	r3, [r3, #6]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d023      	beq.n	800dcc4 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800dc7c:	2108      	movs	r1, #8
 800dc7e:	187b      	adds	r3, r7, r1
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d017      	beq.n	800dcb6 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	88da      	ldrh	r2, [r3, #6]
 800dc8a:	187b      	adds	r3, r7, r1
 800dc8c:	881b      	ldrh	r3, [r3, #0]
 800dc8e:	1c18      	adds	r0, r3, #0
 800dc90:	1c11      	adds	r1, r2, #0
 800dc92:	b28a      	uxth	r2, r1
 800dc94:	b283      	uxth	r3, r0
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d900      	bls.n	800dc9c <USBD_GetDescriptor+0x370>
 800dc9a:	1c01      	adds	r1, r0, #0
 800dc9c:	b28a      	uxth	r2, r1
 800dc9e:	2108      	movs	r1, #8
 800dca0:	187b      	adds	r3, r7, r1
 800dca2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dca4:	187b      	adds	r3, r7, r1
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	001a      	movs	r2, r3
 800dcaa:	68f9      	ldr	r1, [r7, #12]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	0018      	movs	r0, r3
 800dcb0:	f000 facc 	bl	800e24c <USBD_CtlSendData>
 800dcb4:	e011      	b.n	800dcda <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	0011      	movs	r1, r2
 800dcbc:	0018      	movs	r0, r3
 800dcbe:	f000 fa3d 	bl	800e13c <USBD_CtlError>
 800dcc2:	e00a      	b.n	800dcda <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	0018      	movs	r0, r3
 800dcc8:	f000 fb1e 	bl	800e308 <USBD_CtlSendStatus>
 800dccc:	e005      	b.n	800dcda <USBD_GetDescriptor+0x3ae>
 800dcce:	46c0      	nop			@ (mov r8, r8)
 800dcd0:	08013424 	.word	0x08013424
 800dcd4:	08013464 	.word	0x08013464
    return;
 800dcd8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	b004      	add	sp, #16
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dce0:	b590      	push	{r4, r7, lr}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	889b      	ldrh	r3, [r3, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d13e      	bne.n	800dd70 <USBD_SetAddress+0x90>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	88db      	ldrh	r3, [r3, #6]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d13a      	bne.n	800dd70 <USBD_SetAddress+0x90>
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	885b      	ldrh	r3, [r3, #2]
 800dcfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd00:	d836      	bhi.n	800dd70 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	885b      	ldrh	r3, [r3, #2]
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	230f      	movs	r3, #15
 800dd0a:	18fb      	adds	r3, r7, r3
 800dd0c:	217f      	movs	r1, #127	@ 0x7f
 800dd0e:	400a      	ands	r2, r1
 800dd10:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	23a7      	movs	r3, #167	@ 0xa7
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	5cd3      	ldrb	r3, [r2, r3]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b03      	cmp	r3, #3
 800dd1e:	d106      	bne.n	800dd2e <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	0011      	movs	r1, r2
 800dd26:	0018      	movs	r0, r3
 800dd28:	f000 fa08 	bl	800e13c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2c:	e027      	b.n	800dd7e <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	240f      	movs	r4, #15
 800dd32:	193a      	adds	r2, r7, r4
 800dd34:	4914      	ldr	r1, [pc, #80]	@ (800dd88 <USBD_SetAddress+0xa8>)
 800dd36:	7812      	ldrb	r2, [r2, #0]
 800dd38:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd3a:	193b      	adds	r3, r7, r4
 800dd3c:	781a      	ldrb	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	0011      	movs	r1, r2
 800dd42:	0018      	movs	r0, r3
 800dd44:	f000 ffad 	bl	800eca2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	f000 fadc 	bl	800e308 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd50:	193b      	adds	r3, r7, r4
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	23a7      	movs	r3, #167	@ 0xa7
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	2102      	movs	r1, #2
 800dd60:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd62:	e00c      	b.n	800dd7e <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	23a7      	movs	r3, #167	@ 0xa7
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd6e:	e006      	b.n	800dd7e <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	0011      	movs	r1, r2
 800dd76:	0018      	movs	r0, r3
 800dd78:	f000 f9e0 	bl	800e13c <USBD_CtlError>
  }
}
 800dd7c:	46c0      	nop			@ (mov r8, r8)
 800dd7e:	46c0      	nop			@ (mov r8, r8)
 800dd80:	46bd      	mov	sp, r7
 800dd82:	b005      	add	sp, #20
 800dd84:	bd90      	pop	{r4, r7, pc}
 800dd86:	46c0      	nop			@ (mov r8, r8)
 800dd88:	0000029e 	.word	0x0000029e

0800dd8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd8c:	b5b0      	push	{r4, r5, r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd96:	230f      	movs	r3, #15
 800dd98:	18fb      	adds	r3, r7, r3
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	885b      	ldrh	r3, [r3, #2]
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	4b5f      	ldr	r3, [pc, #380]	@ (800df24 <USBD_SetConfig+0x198>)
 800dda6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dda8:	4b5e      	ldr	r3, [pc, #376]	@ (800df24 <USBD_SetConfig+0x198>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d907      	bls.n	800ddc0 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 800ddb0:	683a      	ldr	r2, [r7, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	0011      	movs	r1, r2
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	f000 f9c0 	bl	800e13c <USBD_CtlError>
    return USBD_FAIL;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e0ac      	b.n	800df1a <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	23a7      	movs	r3, #167	@ 0xa7
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	5cd3      	ldrb	r3, [r2, r3]
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d002      	beq.n	800ddd4 <USBD_SetConfig+0x48>
 800ddce:	2b03      	cmp	r3, #3
 800ddd0:	d033      	beq.n	800de3a <USBD_SetConfig+0xae>
 800ddd2:	e08d      	b.n	800def0 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddd4:	4b53      	ldr	r3, [pc, #332]	@ (800df24 <USBD_SetConfig+0x198>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d029      	beq.n	800de30 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 800dddc:	4b51      	ldr	r3, [pc, #324]	@ (800df24 <USBD_SetConfig+0x198>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	001a      	movs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dde6:	4b4f      	ldr	r3, [pc, #316]	@ (800df24 <USBD_SetConfig+0x198>)
 800dde8:	781a      	ldrb	r2, [r3, #0]
 800ddea:	250f      	movs	r5, #15
 800ddec:	197c      	adds	r4, r7, r5
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	0011      	movs	r1, r2
 800ddf2:	0018      	movs	r0, r3
 800ddf4:	f7fe feb4 	bl	800cb60 <USBD_SetClassConfig>
 800ddf8:	0003      	movs	r3, r0
 800ddfa:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800ddfc:	197b      	adds	r3, r7, r5
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00b      	beq.n	800de1c <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	0011      	movs	r1, r2
 800de0a:	0018      	movs	r0, r3
 800de0c:	f000 f996 	bl	800e13c <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	23a7      	movs	r3, #167	@ 0xa7
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	2102      	movs	r1, #2
 800de18:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de1a:	e07b      	b.n	800df14 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	0018      	movs	r0, r3
 800de20:	f000 fa72 	bl	800e308 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	23a7      	movs	r3, #167	@ 0xa7
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	2103      	movs	r1, #3
 800de2c:	54d1      	strb	r1, [r2, r3]
      break;
 800de2e:	e071      	b.n	800df14 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	0018      	movs	r0, r3
 800de34:	f000 fa68 	bl	800e308 <USBD_CtlSendStatus>
      break;
 800de38:	e06c      	b.n	800df14 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de3a:	4b3a      	ldr	r3, [pc, #232]	@ (800df24 <USBD_SetConfig+0x198>)
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d115      	bne.n	800de6e <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	23a7      	movs	r3, #167	@ 0xa7
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	2102      	movs	r1, #2
 800de4a:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800de4c:	4b35      	ldr	r3, [pc, #212]	@ (800df24 <USBD_SetConfig+0x198>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	001a      	movs	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de56:	4b33      	ldr	r3, [pc, #204]	@ (800df24 <USBD_SetConfig+0x198>)
 800de58:	781a      	ldrb	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	0011      	movs	r1, r2
 800de5e:	0018      	movs	r0, r3
 800de60:	f7fe fea3 	bl	800cbaa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	0018      	movs	r0, r3
 800de68:	f000 fa4e 	bl	800e308 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de6c:	e052      	b.n	800df14 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 800de6e:	4b2d      	ldr	r3, [pc, #180]	@ (800df24 <USBD_SetConfig+0x198>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	001a      	movs	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d034      	beq.n	800dee6 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	b2da      	uxtb	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	0011      	movs	r1, r2
 800de86:	0018      	movs	r0, r3
 800de88:	f7fe fe8f 	bl	800cbaa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de8c:	4b25      	ldr	r3, [pc, #148]	@ (800df24 <USBD_SetConfig+0x198>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	001a      	movs	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de96:	4b23      	ldr	r3, [pc, #140]	@ (800df24 <USBD_SetConfig+0x198>)
 800de98:	781a      	ldrb	r2, [r3, #0]
 800de9a:	250f      	movs	r5, #15
 800de9c:	197c      	adds	r4, r7, r5
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	0011      	movs	r1, r2
 800dea2:	0018      	movs	r0, r3
 800dea4:	f7fe fe5c 	bl	800cb60 <USBD_SetClassConfig>
 800dea8:	0003      	movs	r3, r0
 800deaa:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800deac:	197b      	adds	r3, r7, r5
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d013      	beq.n	800dedc <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	0011      	movs	r1, r2
 800deba:	0018      	movs	r0, r3
 800debc:	f000 f93e 	bl	800e13c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	0011      	movs	r1, r2
 800deca:	0018      	movs	r0, r3
 800decc:	f7fe fe6d 	bl	800cbaa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	23a7      	movs	r3, #167	@ 0xa7
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	2102      	movs	r1, #2
 800ded8:	54d1      	strb	r1, [r2, r3]
      break;
 800deda:	e01b      	b.n	800df14 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	0018      	movs	r0, r3
 800dee0:	f000 fa12 	bl	800e308 <USBD_CtlSendStatus>
      break;
 800dee4:	e016      	b.n	800df14 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	0018      	movs	r0, r3
 800deea:	f000 fa0d 	bl	800e308 <USBD_CtlSendStatus>
      break;
 800deee:	e011      	b.n	800df14 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	0011      	movs	r1, r2
 800def6:	0018      	movs	r0, r3
 800def8:	f000 f920 	bl	800e13c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800defc:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <USBD_SetConfig+0x198>)
 800defe:	781a      	ldrb	r2, [r3, #0]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	0011      	movs	r1, r2
 800df04:	0018      	movs	r0, r3
 800df06:	f7fe fe50 	bl	800cbaa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df0a:	230f      	movs	r3, #15
 800df0c:	18fb      	adds	r3, r7, r3
 800df0e:	2203      	movs	r2, #3
 800df10:	701a      	strb	r2, [r3, #0]
      break;
 800df12:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800df14:	230f      	movs	r3, #15
 800df16:	18fb      	adds	r3, r7, r3
 800df18:	781b      	ldrb	r3, [r3, #0]
}
 800df1a:	0018      	movs	r0, r3
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b004      	add	sp, #16
 800df20:	bdb0      	pop	{r4, r5, r7, pc}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	2000077c 	.word	0x2000077c

0800df28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	88db      	ldrh	r3, [r3, #6]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d006      	beq.n	800df48 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	0011      	movs	r1, r2
 800df40:	0018      	movs	r0, r3
 800df42:	f000 f8fb 	bl	800e13c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df46:	e027      	b.n	800df98 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	23a7      	movs	r3, #167	@ 0xa7
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	5cd3      	ldrb	r3, [r2, r3]
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b02      	cmp	r3, #2
 800df54:	dc02      	bgt.n	800df5c <USBD_GetConfig+0x34>
 800df56:	2b00      	cmp	r3, #0
 800df58:	dc03      	bgt.n	800df62 <USBD_GetConfig+0x3a>
 800df5a:	e016      	b.n	800df8a <USBD_GetConfig+0x62>
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d00c      	beq.n	800df7a <USBD_GetConfig+0x52>
 800df60:	e013      	b.n	800df8a <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3308      	adds	r3, #8
 800df6c:	0019      	movs	r1, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2201      	movs	r2, #1
 800df72:	0018      	movs	r0, r3
 800df74:	f000 f96a 	bl	800e24c <USBD_CtlSendData>
        break;
 800df78:	e00e      	b.n	800df98 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	1d19      	adds	r1, r3, #4
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	0018      	movs	r0, r3
 800df84:	f000 f962 	bl	800e24c <USBD_CtlSendData>
        break;
 800df88:	e006      	b.n	800df98 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	0011      	movs	r1, r2
 800df90:	0018      	movs	r0, r3
 800df92:	f000 f8d3 	bl	800e13c <USBD_CtlError>
        break;
 800df96:	46c0      	nop			@ (mov r8, r8)
}
 800df98:	46c0      	nop			@ (mov r8, r8)
 800df9a:	46bd      	mov	sp, r7
 800df9c:	b002      	add	sp, #8
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	23a7      	movs	r3, #167	@ 0xa7
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	5cd3      	ldrb	r3, [r2, r3]
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d822      	bhi.n	800e000 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	88db      	ldrh	r3, [r3, #6]
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d006      	beq.n	800dfd0 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	0011      	movs	r1, r2
 800dfc8:	0018      	movs	r0, r3
 800dfca:	f000 f8b7 	bl	800e13c <USBD_CtlError>
        break;
 800dfce:	e01e      	b.n	800e00e <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	23a9      	movs	r3, #169	@ 0xa9
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	58d3      	ldr	r3, [r2, r3]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d005      	beq.n	800dfee <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	2202      	movs	r2, #2
 800dfe8:	431a      	orrs	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	330c      	adds	r3, #12
 800dff2:	0019      	movs	r1, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	0018      	movs	r0, r3
 800dffa:	f000 f927 	bl	800e24c <USBD_CtlSendData>
      break;
 800dffe:	e006      	b.n	800e00e <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	0011      	movs	r1, r2
 800e006:	0018      	movs	r0, r3
 800e008:	f000 f898 	bl	800e13c <USBD_CtlError>
      break;
 800e00c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e00e:	46c0      	nop			@ (mov r8, r8)
 800e010:	46bd      	mov	sp, r7
 800e012:	b002      	add	sp, #8
 800e014:	bd80      	pop	{r7, pc}

0800e016 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	885b      	ldrh	r3, [r3, #2]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d109      	bne.n	800e03c <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	23a9      	movs	r3, #169	@ 0xa9
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	2101      	movs	r1, #1
 800e030:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	0018      	movs	r0, r3
 800e036:	f000 f967 	bl	800e308 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e03a:	e017      	b.n	800e06c <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	885b      	ldrh	r3, [r3, #2]
 800e040:	2b02      	cmp	r3, #2
 800e042:	d10d      	bne.n	800e060 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	889b      	ldrh	r3, [r3, #4]
 800e048:	0a1b      	lsrs	r3, r3, #8
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	b2d9      	uxtb	r1, r3
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	23a8      	movs	r3, #168	@ 0xa8
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	0018      	movs	r0, r3
 800e05a:	f000 f955 	bl	800e308 <USBD_CtlSendStatus>
}
 800e05e:	e005      	b.n	800e06c <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800e060:	683a      	ldr	r2, [r7, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	0011      	movs	r1, r2
 800e066:	0018      	movs	r0, r3
 800e068:	f000 f868 	bl	800e13c <USBD_CtlError>
}
 800e06c:	46c0      	nop			@ (mov r8, r8)
 800e06e:	46bd      	mov	sp, r7
 800e070:	b002      	add	sp, #8
 800e072:	bd80      	pop	{r7, pc}

0800e074 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	23a7      	movs	r3, #167	@ 0xa7
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	5cd3      	ldrb	r3, [r2, r3]
 800e086:	b2db      	uxtb	r3, r3
 800e088:	3b01      	subs	r3, #1
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d80d      	bhi.n	800e0aa <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	885b      	ldrh	r3, [r3, #2]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d110      	bne.n	800e0b8 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	23a9      	movs	r3, #169	@ 0xa9
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	2100      	movs	r1, #0
 800e09e:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	0018      	movs	r0, r3
 800e0a4:	f000 f930 	bl	800e308 <USBD_CtlSendStatus>
      }
      break;
 800e0a8:	e006      	b.n	800e0b8 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	0011      	movs	r1, r2
 800e0b0:	0018      	movs	r0, r3
 800e0b2:	f000 f843 	bl	800e13c <USBD_CtlError>
      break;
 800e0b6:	e000      	b.n	800e0ba <USBD_ClrFeature+0x46>
      break;
 800e0b8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e0ba:	46c0      	nop			@ (mov r8, r8)
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	b002      	add	sp, #8
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b084      	sub	sp, #16
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	781a      	ldrb	r2, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	0018      	movs	r0, r3
 800e0f0:	f7ff f8e6 	bl	800d2c0 <SWAPBYTE>
 800e0f4:	0003      	movs	r3, r0
 800e0f6:	001a      	movs	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3301      	adds	r3, #1
 800e100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	0018      	movs	r0, r3
 800e10c:	f7ff f8d8 	bl	800d2c0 <SWAPBYTE>
 800e110:	0003      	movs	r3, r0
 800e112:	001a      	movs	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3301      	adds	r3, #1
 800e11c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3301      	adds	r3, #1
 800e122:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	0018      	movs	r0, r3
 800e128:	f7ff f8ca 	bl	800d2c0 <SWAPBYTE>
 800e12c:	0003      	movs	r3, r0
 800e12e:	001a      	movs	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	80da      	strh	r2, [r3, #6]
}
 800e134:	46c0      	nop			@ (mov r8, r8)
 800e136:	46bd      	mov	sp, r7
 800e138:	b004      	add	sp, #16
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2180      	movs	r1, #128	@ 0x80
 800e14a:	0018      	movs	r0, r3
 800e14c:	f000 fd23 	bl	800eb96 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2100      	movs	r1, #0
 800e154:	0018      	movs	r0, r3
 800e156:	f000 fd1e 	bl	800eb96 <USBD_LL_StallEP>
}
 800e15a:	46c0      	nop			@ (mov r8, r8)
 800e15c:	46bd      	mov	sp, r7
 800e15e:	b002      	add	sp, #8
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e162:	b590      	push	{r4, r7, lr}
 800e164:	b087      	sub	sp, #28
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	60b9      	str	r1, [r7, #8]
 800e16c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e16e:	2417      	movs	r4, #23
 800e170:	193b      	adds	r3, r7, r4
 800e172:	2200      	movs	r2, #0
 800e174:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d044      	beq.n	800e206 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	0018      	movs	r0, r3
 800e184:	f000 f843 	bl	800e20e <USBD_GetLen>
 800e188:	0003      	movs	r3, r0
 800e18a:	3301      	adds	r3, #1
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	18db      	adds	r3, r3, r3
 800e190:	b29a      	uxth	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e196:	193b      	adds	r3, r7, r4
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	18d3      	adds	r3, r2, r3
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	7812      	ldrb	r2, [r2, #0]
 800e1a2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1a4:	193b      	adds	r3, r7, r4
 800e1a6:	781a      	ldrb	r2, [r3, #0]
 800e1a8:	193b      	adds	r3, r7, r4
 800e1aa:	3201      	adds	r2, #1
 800e1ac:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1ae:	193b      	adds	r3, r7, r4
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	18d3      	adds	r3, r2, r3
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1ba:	193b      	adds	r3, r7, r4
 800e1bc:	781a      	ldrb	r2, [r3, #0]
 800e1be:	193b      	adds	r3, r7, r4
 800e1c0:	3201      	adds	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800e1c4:	e01a      	b.n	800e1fc <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800e1c6:	2117      	movs	r1, #23
 800e1c8:	187b      	adds	r3, r7, r1
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	18d3      	adds	r3, r2, r3
 800e1d0:	693a      	ldr	r2, [r7, #16]
 800e1d2:	7812      	ldrb	r2, [r2, #0]
 800e1d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	613b      	str	r3, [r7, #16]
    idx++;
 800e1dc:	187b      	adds	r3, r7, r1
 800e1de:	781a      	ldrb	r2, [r3, #0]
 800e1e0:	187b      	adds	r3, r7, r1
 800e1e2:	3201      	adds	r2, #1
 800e1e4:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800e1e6:	187b      	adds	r3, r7, r1
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	18d3      	adds	r3, r2, r3
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1f2:	187b      	adds	r3, r7, r1
 800e1f4:	781a      	ldrb	r2, [r3, #0]
 800e1f6:	187b      	adds	r3, r7, r1
 800e1f8:	3201      	adds	r2, #1
 800e1fa:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1e0      	bne.n	800e1c6 <USBD_GetString+0x64>
 800e204:	e000      	b.n	800e208 <USBD_GetString+0xa6>
    return;
 800e206:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e208:	46bd      	mov	sp, r7
 800e20a:	b007      	add	sp, #28
 800e20c:	bd90      	pop	{r4, r7, pc}

0800e20e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b084      	sub	sp, #16
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e216:	230f      	movs	r3, #15
 800e218:	18fb      	adds	r3, r7, r3
 800e21a:	2200      	movs	r2, #0
 800e21c:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e222:	e008      	b.n	800e236 <USBD_GetLen+0x28>
  {
    len++;
 800e224:	210f      	movs	r1, #15
 800e226:	187b      	adds	r3, r7, r1
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	187b      	adds	r3, r7, r1
 800e22c:	3201      	adds	r2, #1
 800e22e:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	3301      	adds	r3, #1
 800e234:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1f2      	bne.n	800e224 <USBD_GetLen+0x16>
  }

  return len;
 800e23e:	230f      	movs	r3, #15
 800e240:	18fb      	adds	r3, r7, r3
 800e242:	781b      	ldrb	r3, [r3, #0]
}
 800e244:	0018      	movs	r0, r3
 800e246:	46bd      	mov	sp, r7
 800e248:	b004      	add	sp, #16
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	23a5      	movs	r3, #165	@ 0xa5
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	2102      	movs	r1, #2
 800e260:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	68f8      	ldr	r0, [r7, #12]
 800e274:	2100      	movs	r1, #0
 800e276:	f000 fd3f 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	0018      	movs	r0, r3
 800e27e:	46bd      	mov	sp, r7
 800e280:	b004      	add	sp, #16
 800e282:	bd80      	pop	{r7, pc}

0800e284 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	2100      	movs	r1, #0
 800e298:	f000 fd2e 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	0018      	movs	r0, r3
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	b004      	add	sp, #16
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	60f8      	str	r0, [r7, #12]
 800e2ae:	60b9      	str	r1, [r7, #8]
 800e2b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	23a5      	movs	r3, #165	@ 0xa5
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	2103      	movs	r1, #3
 800e2ba:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	23ac      	movs	r3, #172	@ 0xac
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	6879      	ldr	r1, [r7, #4]
 800e2c4:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	23ae      	movs	r3, #174	@ 0xae
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	68f8      	ldr	r0, [r7, #12]
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	f000 fd3e 	bl	800ed58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	0018      	movs	r0, r3
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	b004      	add	sp, #16
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b084      	sub	sp, #16
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	60f8      	str	r0, [r7, #12]
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	68f8      	ldr	r0, [r7, #12]
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	f000 fd2d 	bl	800ed58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	0018      	movs	r0, r3
 800e302:	46bd      	mov	sp, r7
 800e304:	b004      	add	sp, #16
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	23a5      	movs	r3, #165	@ 0xa5
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	2104      	movs	r1, #4
 800e318:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	2300      	movs	r3, #0
 800e31e:	2200      	movs	r2, #0
 800e320:	2100      	movs	r1, #0
 800e322:	f000 fce9 	bl	800ecf8 <USBD_LL_Transmit>

  return USBD_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	0018      	movs	r0, r3
 800e32a:	46bd      	mov	sp, r7
 800e32c:	b002      	add	sp, #8
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	23a5      	movs	r3, #165	@ 0xa5
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	2105      	movs	r1, #5
 800e340:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	2300      	movs	r3, #0
 800e346:	2200      	movs	r2, #0
 800e348:	2100      	movs	r1, #0
 800e34a:	f000 fd05 	bl	800ed58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	0018      	movs	r0, r3
 800e352:	46bd      	mov	sp, r7
 800e354:	b002      	add	sp, #8
 800e356:	bd80      	pop	{r7, pc}

0800e358 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e35c:	4914      	ldr	r1, [pc, #80]	@ (800e3b0 <MX_USB_Device_Init+0x58>)
 800e35e:	4b15      	ldr	r3, [pc, #84]	@ (800e3b4 <MX_USB_Device_Init+0x5c>)
 800e360:	2200      	movs	r2, #0
 800e362:	0018      	movs	r0, r3
 800e364:	f7fe fb6e 	bl	800ca44 <USBD_Init>
 800e368:	1e03      	subs	r3, r0, #0
 800e36a:	d001      	beq.n	800e370 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e36c:	f7f5 faea 	bl	8003944 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e370:	4a11      	ldr	r2, [pc, #68]	@ (800e3b8 <MX_USB_Device_Init+0x60>)
 800e372:	4b10      	ldr	r3, [pc, #64]	@ (800e3b4 <MX_USB_Device_Init+0x5c>)
 800e374:	0011      	movs	r1, r2
 800e376:	0018      	movs	r0, r3
 800e378:	f7fe fb9e 	bl	800cab8 <USBD_RegisterClass>
 800e37c:	1e03      	subs	r3, r0, #0
 800e37e:	d001      	beq.n	800e384 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800e380:	f7f5 fae0 	bl	8003944 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e384:	4a0d      	ldr	r2, [pc, #52]	@ (800e3bc <MX_USB_Device_Init+0x64>)
 800e386:	4b0b      	ldr	r3, [pc, #44]	@ (800e3b4 <MX_USB_Device_Init+0x5c>)
 800e388:	0011      	movs	r1, r2
 800e38a:	0018      	movs	r0, r3
 800e38c:	f7fe fa78 	bl	800c880 <USBD_CDC_RegisterInterface>
 800e390:	1e03      	subs	r3, r0, #0
 800e392:	d001      	beq.n	800e398 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800e394:	f7f5 fad6 	bl	8003944 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e398:	4b06      	ldr	r3, [pc, #24]	@ (800e3b4 <MX_USB_Device_Init+0x5c>)
 800e39a:	0018      	movs	r0, r3
 800e39c:	f7fe fbca 	bl	800cb34 <USBD_Start>
 800e3a0:	1e03      	subs	r3, r0, #0
 800e3a2:	d001      	beq.n	800e3a8 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800e3a4:	f7f5 face 	bl	8003944 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e3a8:	46c0      	nop			@ (mov r8, r8)
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	46c0      	nop			@ (mov r8, r8)
 800e3b0:	2000013c 	.word	0x2000013c
 800e3b4:	20000780 	.word	0x20000780
 800e3b8:	200000a8 	.word	0x200000a8
 800e3bc:	20000128 	.word	0x20000128

0800e3c0 <CDC_Receive>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

int8_t CDC_Receive(uint8_t* pbuf, uint32_t *Len){
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
	CDC_Receive_FS(pbuf, Len);
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	0011      	movs	r1, r2
 800e3d0:	0018      	movs	r0, r3
 800e3d2:	f000 f83f 	bl	800e454 <CDC_Receive_FS>
	return USBD_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	0018      	movs	r0, r3
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	b002      	add	sp, #8
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3e4:	4907      	ldr	r1, [pc, #28]	@ (800e404 <CDC_Init_FS+0x24>)
 800e3e6:	4b08      	ldr	r3, [pc, #32]	@ (800e408 <CDC_Init_FS+0x28>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	0018      	movs	r0, r3
 800e3ec:	f7fe fa62 	bl	800c8b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3f0:	4a06      	ldr	r2, [pc, #24]	@ (800e40c <CDC_Init_FS+0x2c>)
 800e3f2:	4b05      	ldr	r3, [pc, #20]	@ (800e408 <CDC_Init_FS+0x28>)
 800e3f4:	0011      	movs	r1, r2
 800e3f6:	0018      	movs	r0, r3
 800e3f8:	f7fe fa7f 	bl	800c8fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e3fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e3fe:	0018      	movs	r0, r3
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	2000125c 	.word	0x2000125c
 800e408:	20000780 	.word	0x20000780
 800e40c:	20000a5c 	.word	0x20000a5c

0800e410 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e414:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e416:	0018      	movs	r0, r3
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6039      	str	r1, [r7, #0]
 800e424:	0011      	movs	r1, r2
 800e426:	1dfb      	adds	r3, r7, #7
 800e428:	1c02      	adds	r2, r0, #0
 800e42a:	701a      	strb	r2, [r3, #0]
 800e42c:	1d3b      	adds	r3, r7, #4
 800e42e:	1c0a      	adds	r2, r1, #0
 800e430:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e432:	1dfb      	adds	r3, r7, #7
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	2b23      	cmp	r3, #35	@ 0x23
 800e438:	d804      	bhi.n	800e444 <CDC_Control_FS+0x28>
 800e43a:	009a      	lsls	r2, r3, #2
 800e43c:	4b04      	ldr	r3, [pc, #16]	@ (800e450 <CDC_Control_FS+0x34>)
 800e43e:	18d3      	adds	r3, r2, r3
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e444:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800e446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e448:	0018      	movs	r0, r3
 800e44a:	46bd      	mov	sp, r7
 800e44c:	b002      	add	sp, #8
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	0801347c 	.word	0x0801347c

0800e454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	4b06      	ldr	r3, [pc, #24]	@ (800e47c <CDC_Receive_FS+0x28>)
 800e462:	0011      	movs	r1, r2
 800e464:	0018      	movs	r0, r3
 800e466:	f7fe fa48 	bl	800c8fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e46a:	4b04      	ldr	r3, [pc, #16]	@ (800e47c <CDC_Receive_FS+0x28>)
 800e46c:	0018      	movs	r0, r3
 800e46e:	f7fe faaf 	bl	800c9d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e472:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e474:	0018      	movs	r0, r3
 800e476:	46bd      	mov	sp, r7
 800e478:	b002      	add	sp, #8
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	20000780 	.word	0x20000780

0800e480 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e480:	b5b0      	push	{r4, r5, r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	000a      	movs	r2, r1
 800e48a:	1cbb      	adds	r3, r7, #2
 800e48c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e48e:	230f      	movs	r3, #15
 800e490:	18fb      	adds	r3, r7, r3
 800e492:	2200      	movs	r2, #0
 800e494:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e496:	4a11      	ldr	r2, [pc, #68]	@ (800e4dc <CDC_Transmit_FS+0x5c>)
 800e498:	23af      	movs	r3, #175	@ 0xaf
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	58d3      	ldr	r3, [r2, r3]
 800e49e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	2385      	movs	r3, #133	@ 0x85
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	58d3      	ldr	r3, [r2, r3]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e010      	b.n	800e4d2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e4b0:	1cbb      	adds	r3, r7, #2
 800e4b2:	881a      	ldrh	r2, [r3, #0]
 800e4b4:	6879      	ldr	r1, [r7, #4]
 800e4b6:	4b09      	ldr	r3, [pc, #36]	@ (800e4dc <CDC_Transmit_FS+0x5c>)
 800e4b8:	0018      	movs	r0, r3
 800e4ba:	f7fe f9fb 	bl	800c8b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4be:	250f      	movs	r5, #15
 800e4c0:	197c      	adds	r4, r7, r5
 800e4c2:	4b06      	ldr	r3, [pc, #24]	@ (800e4dc <CDC_Transmit_FS+0x5c>)
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7fe fa35 	bl	800c934 <USBD_CDC_TransmitPacket>
 800e4ca:	0003      	movs	r3, r0
 800e4cc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800e4ce:	197b      	adds	r3, r7, r5
 800e4d0:	781b      	ldrb	r3, [r3, #0]
}
 800e4d2:	0018      	movs	r0, r3
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	b004      	add	sp, #16
 800e4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e4da:	46c0      	nop			@ (mov r8, r8)
 800e4dc:	20000780 	.word	0x20000780

0800e4e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	1dfb      	adds	r3, r7, #7
 800e4ec:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e4ee:	2117      	movs	r1, #23
 800e4f0:	187b      	adds	r3, r7, r1
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e4f6:	187b      	adds	r3, r7, r1
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	b25b      	sxtb	r3, r3
}
 800e4fc:	0018      	movs	r0, r3
 800e4fe:	46bd      	mov	sp, r7
 800e500:	b006      	add	sp, #24
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	0002      	movs	r2, r0
 800e50c:	6039      	str	r1, [r7, #0]
 800e50e:	1dfb      	adds	r3, r7, #7
 800e510:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2212      	movs	r2, #18
 800e516:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e518:	4b02      	ldr	r3, [pc, #8]	@ (800e524 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e51a:	0018      	movs	r0, r3
 800e51c:	46bd      	mov	sp, r7
 800e51e:	b002      	add	sp, #8
 800e520:	bd80      	pop	{r7, pc}
 800e522:	46c0      	nop			@ (mov r8, r8)
 800e524:	2000015c 	.word	0x2000015c

0800e528 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	0002      	movs	r2, r0
 800e530:	6039      	str	r1, [r7, #0]
 800e532:	1dfb      	adds	r3, r7, #7
 800e534:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2204      	movs	r2, #4
 800e53a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e53c:	4b02      	ldr	r3, [pc, #8]	@ (800e548 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e53e:	0018      	movs	r0, r3
 800e540:	46bd      	mov	sp, r7
 800e542:	b002      	add	sp, #8
 800e544:	bd80      	pop	{r7, pc}
 800e546:	46c0      	nop			@ (mov r8, r8)
 800e548:	20000170 	.word	0x20000170

0800e54c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	0002      	movs	r2, r0
 800e554:	6039      	str	r1, [r7, #0]
 800e556:	1dfb      	adds	r3, r7, #7
 800e558:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800e55a:	1dfb      	adds	r3, r7, #7
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	4908      	ldr	r1, [pc, #32]	@ (800e588 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800e566:	4b09      	ldr	r3, [pc, #36]	@ (800e58c <USBD_CDC_ProductStrDescriptor+0x40>)
 800e568:	0018      	movs	r0, r3
 800e56a:	f7ff fdfa 	bl	800e162 <USBD_GetString>
 800e56e:	e005      	b.n	800e57c <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	4905      	ldr	r1, [pc, #20]	@ (800e588 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800e574:	4b05      	ldr	r3, [pc, #20]	@ (800e58c <USBD_CDC_ProductStrDescriptor+0x40>)
 800e576:	0018      	movs	r0, r3
 800e578:	f7ff fdf3 	bl	800e162 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e57c:	4b02      	ldr	r3, [pc, #8]	@ (800e588 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800e57e:	0018      	movs	r0, r3
 800e580:	46bd      	mov	sp, r7
 800e582:	b002      	add	sp, #8
 800e584:	bd80      	pop	{r7, pc}
 800e586:	46c0      	nop			@ (mov r8, r8)
 800e588:	20001a5c 	.word	0x20001a5c
 800e58c:	08013334 	.word	0x08013334

0800e590 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	0002      	movs	r2, r0
 800e598:	6039      	str	r1, [r7, #0]
 800e59a:	1dfb      	adds	r3, r7, #7
 800e59c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	4904      	ldr	r1, [pc, #16]	@ (800e5b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e5a2:	4b05      	ldr	r3, [pc, #20]	@ (800e5b8 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800e5a4:	0018      	movs	r0, r3
 800e5a6:	f7ff fddc 	bl	800e162 <USBD_GetString>
  return USBD_StrDesc;
 800e5aa:	4b02      	ldr	r3, [pc, #8]	@ (800e5b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800e5ac:	0018      	movs	r0, r3
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	b002      	add	sp, #8
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	20001a5c 	.word	0x20001a5c
 800e5b8:	0801334c 	.word	0x0801334c

0800e5bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	0002      	movs	r2, r0
 800e5c4:	6039      	str	r1, [r7, #0]
 800e5c6:	1dfb      	adds	r3, r7, #7
 800e5c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	221a      	movs	r2, #26
 800e5ce:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e5d0:	f000 f84c 	bl	800e66c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e5d4:	4b02      	ldr	r3, [pc, #8]	@ (800e5e0 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800e5d6:	0018      	movs	r0, r3
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	b002      	add	sp, #8
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	46c0      	nop			@ (mov r8, r8)
 800e5e0:	20000174 	.word	0x20000174

0800e5e4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	0002      	movs	r2, r0
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	1dfb      	adds	r3, r7, #7
 800e5f0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800e5f2:	1dfb      	adds	r3, r7, #7
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d106      	bne.n	800e608 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	4908      	ldr	r1, [pc, #32]	@ (800e620 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800e5fe:	4b09      	ldr	r3, [pc, #36]	@ (800e624 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800e600:	0018      	movs	r0, r3
 800e602:	f7ff fdae 	bl	800e162 <USBD_GetString>
 800e606:	e005      	b.n	800e614 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	4905      	ldr	r1, [pc, #20]	@ (800e620 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800e60e:	0018      	movs	r0, r3
 800e610:	f7ff fda7 	bl	800e162 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e614:	4b02      	ldr	r3, [pc, #8]	@ (800e620 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800e616:	0018      	movs	r0, r3
 800e618:	46bd      	mov	sp, r7
 800e61a:	b002      	add	sp, #8
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	46c0      	nop			@ (mov r8, r8)
 800e620:	20001a5c 	.word	0x20001a5c
 800e624:	08013360 	.word	0x08013360

0800e628 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	0002      	movs	r2, r0
 800e630:	6039      	str	r1, [r7, #0]
 800e632:	1dfb      	adds	r3, r7, #7
 800e634:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800e636:	1dfb      	adds	r3, r7, #7
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d106      	bne.n	800e64c <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	4908      	ldr	r1, [pc, #32]	@ (800e664 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800e642:	4b09      	ldr	r3, [pc, #36]	@ (800e668 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800e644:	0018      	movs	r0, r3
 800e646:	f7ff fd8c 	bl	800e162 <USBD_GetString>
 800e64a:	e005      	b.n	800e658 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	4905      	ldr	r1, [pc, #20]	@ (800e664 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800e650:	4b05      	ldr	r3, [pc, #20]	@ (800e668 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800e652:	0018      	movs	r0, r3
 800e654:	f7ff fd85 	bl	800e162 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e658:	4b02      	ldr	r3, [pc, #8]	@ (800e664 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800e65a:	0018      	movs	r0, r3
 800e65c:	46bd      	mov	sp, r7
 800e65e:	b002      	add	sp, #8
 800e660:	bd80      	pop	{r7, pc}
 800e662:	46c0      	nop			@ (mov r8, r8)
 800e664:	20001a5c 	.word	0x20001a5c
 800e668:	0801336c 	.word	0x0801336c

0800e66c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e672:	4b10      	ldr	r3, [pc, #64]	@ (800e6b4 <Get_SerialNum+0x48>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e678:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b8 <Get_SerialNum+0x4c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e67e:	4b0f      	ldr	r3, [pc, #60]	@ (800e6bc <Get_SerialNum+0x50>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	18d3      	adds	r3, r2, r3
 800e68a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00b      	beq.n	800e6aa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e692:	490b      	ldr	r1, [pc, #44]	@ (800e6c0 <Get_SerialNum+0x54>)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2208      	movs	r2, #8
 800e698:	0018      	movs	r0, r3
 800e69a:	f000 f815 	bl	800e6c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e69e:	4909      	ldr	r1, [pc, #36]	@ (800e6c4 <Get_SerialNum+0x58>)
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2204      	movs	r2, #4
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f000 f80f 	bl	800e6c8 <IntToUnicode>
  }
}
 800e6aa:	46c0      	nop			@ (mov r8, r8)
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	b004      	add	sp, #16
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	46c0      	nop			@ (mov r8, r8)
 800e6b4:	1fff7590 	.word	0x1fff7590
 800e6b8:	1fff7594 	.word	0x1fff7594
 800e6bc:	1fff7598 	.word	0x1fff7598
 800e6c0:	20000176 	.word	0x20000176
 800e6c4:	20000186 	.word	0x20000186

0800e6c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	1dfb      	adds	r3, r7, #7
 800e6d4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800e6d6:	2117      	movs	r1, #23
 800e6d8:	187b      	adds	r3, r7, r1
 800e6da:	2200      	movs	r2, #0
 800e6dc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800e6de:	187b      	adds	r3, r7, r1
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e02f      	b.n	800e746 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	0f1b      	lsrs	r3, r3, #28
 800e6ea:	2b09      	cmp	r3, #9
 800e6ec:	d80d      	bhi.n	800e70a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	0f1b      	lsrs	r3, r3, #28
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	2317      	movs	r3, #23
 800e6f6:	18fb      	adds	r3, r7, r3
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	0019      	movs	r1, r3
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	185b      	adds	r3, r3, r1
 800e702:	3230      	adds	r2, #48	@ 0x30
 800e704:	b2d2      	uxtb	r2, r2
 800e706:	701a      	strb	r2, [r3, #0]
 800e708:	e00c      	b.n	800e724 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	0f1b      	lsrs	r3, r3, #28
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	2317      	movs	r3, #23
 800e712:	18fb      	adds	r3, r7, r3
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	0019      	movs	r1, r3
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	185b      	adds	r3, r3, r1
 800e71e:	3237      	adds	r2, #55	@ 0x37
 800e720:	b2d2      	uxtb	r2, r2
 800e722:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	011b      	lsls	r3, r3, #4
 800e728:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e72a:	2117      	movs	r1, #23
 800e72c:	187b      	adds	r3, r7, r1
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	3301      	adds	r3, #1
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	18d3      	adds	r3, r2, r3
 800e738:	2200      	movs	r2, #0
 800e73a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e73c:	187b      	adds	r3, r7, r1
 800e73e:	781a      	ldrb	r2, [r3, #0]
 800e740:	187b      	adds	r3, r7, r1
 800e742:	3201      	adds	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
 800e746:	2317      	movs	r3, #23
 800e748:	18fa      	adds	r2, r7, r3
 800e74a:	1dfb      	adds	r3, r7, #7
 800e74c:	7812      	ldrb	r2, [r2, #0]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d3c8      	bcc.n	800e6e6 <IntToUnicode+0x1e>
  }
}
 800e754:	46c0      	nop			@ (mov r8, r8)
 800e756:	46c0      	nop			@ (mov r8, r8)
 800e758:	46bd      	mov	sp, r7
 800e75a:	b006      	add	sp, #24
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e760:	b590      	push	{r4, r7, lr}
 800e762:	b091      	sub	sp, #68	@ 0x44
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e768:	2414      	movs	r4, #20
 800e76a:	193b      	adds	r3, r7, r4
 800e76c:	0018      	movs	r0, r3
 800e76e:	232c      	movs	r3, #44	@ 0x2c
 800e770:	001a      	movs	r2, r3
 800e772:	2100      	movs	r1, #0
 800e774:	f001 ff8c 	bl	8010690 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a25      	ldr	r2, [pc, #148]	@ (800e814 <HAL_PCD_MspInit+0xb4>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d144      	bne.n	800e80c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e782:	193b      	adds	r3, r7, r4
 800e784:	2280      	movs	r2, #128	@ 0x80
 800e786:	0452      	lsls	r2, r2, #17
 800e788:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e78a:	193b      	adds	r3, r7, r4
 800e78c:	2280      	movs	r2, #128	@ 0x80
 800e78e:	0192      	lsls	r2, r2, #6
 800e790:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e792:	193b      	adds	r3, r7, r4
 800e794:	0018      	movs	r0, r3
 800e796:	f7fa fbf5 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 800e79a:	1e03      	subs	r3, r0, #0
 800e79c:	d001      	beq.n	800e7a2 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800e79e:	f7f5 f8d1 	bl	8003944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e7a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7a8:	2180      	movs	r1, #128	@ 0x80
 800e7aa:	0189      	lsls	r1, r1, #6
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e7b0:	4b19      	ldr	r3, [pc, #100]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7b4:	2380      	movs	r3, #128	@ 0x80
 800e7b6:	019b      	lsls	r3, r3, #6
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]
 800e7bc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e7be:	4b16      	ldr	r3, [pc, #88]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7c2:	2380      	movs	r3, #128	@ 0x80
 800e7c4:	055b      	lsls	r3, r3, #21
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	d116      	bne.n	800e7f8 <HAL_PCD_MspInit+0x98>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e7ca:	4b13      	ldr	r3, [pc, #76]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7ce:	4b12      	ldr	r3, [pc, #72]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7d0:	2180      	movs	r1, #128	@ 0x80
 800e7d2:	0549      	lsls	r1, r1, #21
 800e7d4:	430a      	orrs	r2, r1
 800e7d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7dc:	2380      	movs	r3, #128	@ 0x80
 800e7de:	055b      	lsls	r3, r3, #21
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800e7e6:	f7f9 fedb 	bl	80085a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e7ea:	4b0b      	ldr	r3, [pc, #44]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e818 <HAL_PCD_MspInit+0xb8>)
 800e7f0:	490a      	ldr	r1, [pc, #40]	@ (800e81c <HAL_PCD_MspInit+0xbc>)
 800e7f2:	400a      	ands	r2, r1
 800e7f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e7f6:	e001      	b.n	800e7fc <HAL_PCD_MspInit+0x9c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e7f8:	f7f9 fed2 	bl	80085a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2100      	movs	r1, #0
 800e800:	2008      	movs	r0, #8
 800e802:	f7f7 f8f5 	bl	80059f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e806:	2008      	movs	r0, #8
 800e808:	f7f7 f907 	bl	8005a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800e80c:	46c0      	nop			@ (mov r8, r8)
 800e80e:	46bd      	mov	sp, r7
 800e810:	b011      	add	sp, #68	@ 0x44
 800e812:	bd90      	pop	{r4, r7, pc}
 800e814:	40005c00 	.word	0x40005c00
 800e818:	40021000 	.word	0x40021000
 800e81c:	efffffff 	.word	0xefffffff

0800e820 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	23b7      	movs	r3, #183	@ 0xb7
 800e82c:	009b      	lsls	r3, r3, #2
 800e82e:	58d2      	ldr	r2, [r2, r3]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	21a7      	movs	r1, #167	@ 0xa7
 800e834:	0089      	lsls	r1, r1, #2
 800e836:	468c      	mov	ip, r1
 800e838:	4463      	add	r3, ip
 800e83a:	0019      	movs	r1, r3
 800e83c:	0010      	movs	r0, r2
 800e83e:	f7fe f9d5 	bl	800cbec <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e842:	46c0      	nop			@ (mov r8, r8)
 800e844:	46bd      	mov	sp, r7
 800e846:	b002      	add	sp, #8
 800e848:	bd80      	pop	{r7, pc}

0800e84a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e84a:	b590      	push	{r4, r7, lr}
 800e84c:	b083      	sub	sp, #12
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	000a      	movs	r2, r1
 800e854:	1cfb      	adds	r3, r7, #3
 800e856:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	23b7      	movs	r3, #183	@ 0xb7
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	58d4      	ldr	r4, [r2, r3]
 800e860:	1cfb      	adds	r3, r7, #3
 800e862:	781a      	ldrb	r2, [r3, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	23b4      	movs	r3, #180	@ 0xb4
 800e868:	0059      	lsls	r1, r3, #1
 800e86a:	0013      	movs	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	189b      	adds	r3, r3, r2
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	18c3      	adds	r3, r0, r3
 800e874:	185b      	adds	r3, r3, r1
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	1cfb      	adds	r3, r7, #3
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	0019      	movs	r1, r3
 800e87e:	0020      	movs	r0, r4
 800e880:	f7fe fa1e 	bl	800ccc0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e884:	46c0      	nop			@ (mov r8, r8)
 800e886:	46bd      	mov	sp, r7
 800e888:	b003      	add	sp, #12
 800e88a:	bd90      	pop	{r4, r7, pc}

0800e88c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	000a      	movs	r2, r1
 800e896:	1cfb      	adds	r3, r7, #3
 800e898:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	23b7      	movs	r3, #183	@ 0xb7
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	58d0      	ldr	r0, [r2, r3]
 800e8a2:	1cfb      	adds	r3, r7, #3
 800e8a4:	781a      	ldrb	r2, [r3, #0]
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	0013      	movs	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	189b      	adds	r3, r3, r2
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	18cb      	adds	r3, r1, r3
 800e8b2:	3328      	adds	r3, #40	@ 0x28
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	1cfb      	adds	r3, r7, #3
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	0019      	movs	r1, r3
 800e8bc:	f7fe fae8 	bl	800ce90 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e8c0:	46c0      	nop			@ (mov r8, r8)
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	b002      	add	sp, #8
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	23b7      	movs	r3, #183	@ 0xb7
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	58d3      	ldr	r3, [r2, r3]
 800e8d8:	0018      	movs	r0, r3
 800e8da:	f7fe fc53 	bl	800d184 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e8de:	46c0      	nop			@ (mov r8, r8)
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	b002      	add	sp, #8
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e8ee:	230f      	movs	r3, #15
 800e8f0:	18fb      	adds	r3, r7, r3
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	79db      	ldrb	r3, [r3, #7]
 800e8fa:	2b02      	cmp	r3, #2
 800e8fc:	d001      	beq.n	800e902 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800e8fe:	f7f5 f821 	bl	8003944 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	23b7      	movs	r3, #183	@ 0xb7
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	58d2      	ldr	r2, [r2, r3]
 800e90a:	230f      	movs	r3, #15
 800e90c:	18fb      	adds	r3, r7, r3
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	0019      	movs	r1, r3
 800e912:	0010      	movs	r0, r2
 800e914:	f7fe fbf3 	bl	800d0fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	23b7      	movs	r3, #183	@ 0xb7
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	58d3      	ldr	r3, [r2, r3]
 800e920:	0018      	movs	r0, r3
 800e922:	f7fe fb8d 	bl	800d040 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e926:	46c0      	nop			@ (mov r8, r8)
 800e928:	46bd      	mov	sp, r7
 800e92a:	b004      	add	sp, #16
 800e92c:	bd80      	pop	{r7, pc}
	...

0800e930 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	23b7      	movs	r3, #183	@ 0xb7
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	58d3      	ldr	r3, [r2, r3]
 800e940:	0018      	movs	r0, r3
 800e942:	f7fe fbed 	bl	800d120 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	7adb      	ldrb	r3, [r3, #11]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d005      	beq.n	800e95a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e94e:	4b05      	ldr	r3, [pc, #20]	@ (800e964 <HAL_PCD_SuspendCallback+0x34>)
 800e950:	691a      	ldr	r2, [r3, #16]
 800e952:	4b04      	ldr	r3, [pc, #16]	@ (800e964 <HAL_PCD_SuspendCallback+0x34>)
 800e954:	2106      	movs	r1, #6
 800e956:	430a      	orrs	r2, r1
 800e958:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e95a:	46c0      	nop			@ (mov r8, r8)
 800e95c:	46bd      	mov	sp, r7
 800e95e:	b002      	add	sp, #8
 800e960:	bd80      	pop	{r7, pc}
 800e962:	46c0      	nop			@ (mov r8, r8)
 800e964:	e000ed00 	.word	0xe000ed00

0800e968 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7adb      	ldrb	r3, [r3, #11]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e978:	4b09      	ldr	r3, [pc, #36]	@ (800e9a0 <HAL_PCD_ResumeCallback+0x38>)
 800e97a:	691a      	ldr	r2, [r3, #16]
 800e97c:	4b08      	ldr	r3, [pc, #32]	@ (800e9a0 <HAL_PCD_ResumeCallback+0x38>)
 800e97e:	2106      	movs	r1, #6
 800e980:	438a      	bics	r2, r1
 800e982:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800e984:	f000 fa7c 	bl	800ee80 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	23b7      	movs	r3, #183	@ 0xb7
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	58d3      	ldr	r3, [r2, r3]
 800e990:	0018      	movs	r0, r3
 800e992:	f7fe fbdd 	bl	800d150 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e996:	46c0      	nop			@ (mov r8, r8)
 800e998:	46bd      	mov	sp, r7
 800e99a:	b002      	add	sp, #8
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	46c0      	nop			@ (mov r8, r8)
 800e9a0:	e000ed00 	.word	0xe000ed00

0800e9a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800e9ac:	4a34      	ldr	r2, [pc, #208]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9ae:	23b7      	movs	r3, #183	@ 0xb7
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	6879      	ldr	r1, [r7, #4]
 800e9b4:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	23b2      	movs	r3, #178	@ 0xb2
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4930      	ldr	r1, [pc, #192]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9be:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800e9c0:	4b2f      	ldr	r3, [pc, #188]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9c2:	4a30      	ldr	r2, [pc, #192]	@ (800ea84 <USBD_LL_Init+0xe0>)
 800e9c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9c8:	2208      	movs	r2, #8
 800e9ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800e9cc:	4b2c      	ldr	r3, [pc, #176]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9ce:	2208      	movs	r2, #8
 800e9d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800e9d2:	4b2b      	ldr	r3, [pc, #172]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e9d8:	4b29      	ldr	r3, [pc, #164]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9da:	2202      	movs	r2, #2
 800e9dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800e9de:	4b28      	ldr	r3, [pc, #160]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800e9e4:	4b26      	ldr	r3, [pc, #152]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800e9ea:	4b25      	ldr	r3, [pc, #148]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800e9f0:	4b23      	ldr	r3, [pc, #140]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800e9f6:	4b22      	ldr	r3, [pc, #136]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800e9fc:	4b20      	ldr	r3, [pc, #128]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800e9fe:	2200      	movs	r2, #0
 800ea00:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800ea02:	4b1f      	ldr	r3, [pc, #124]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800ea08:	4b1d      	ldr	r3, [pc, #116]	@ (800ea80 <USBD_LL_Init+0xdc>)
 800ea0a:	0018      	movs	r0, r3
 800ea0c:	f7f8 f8c2 	bl	8006b94 <HAL_PCD_Init>
 800ea10:	1e03      	subs	r3, r0, #0
 800ea12:	d001      	beq.n	800ea18 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ea14:	f7f4 ff96 	bl	8003944 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	23b2      	movs	r3, #178	@ 0xb2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	58d0      	ldr	r0, [r2, r3]
 800ea20:	2318      	movs	r3, #24
 800ea22:	2200      	movs	r2, #0
 800ea24:	2100      	movs	r1, #0
 800ea26:	f7f9 fd49 	bl	80084bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	23b2      	movs	r3, #178	@ 0xb2
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	58d0      	ldr	r0, [r2, r3]
 800ea32:	2358      	movs	r3, #88	@ 0x58
 800ea34:	2200      	movs	r2, #0
 800ea36:	2180      	movs	r1, #128	@ 0x80
 800ea38:	f7f9 fd40 	bl	80084bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	23b2      	movs	r3, #178	@ 0xb2
 800ea40:	009b      	lsls	r3, r3, #2
 800ea42:	58d0      	ldr	r0, [r2, r3]
 800ea44:	23c0      	movs	r3, #192	@ 0xc0
 800ea46:	2200      	movs	r2, #0
 800ea48:	2181      	movs	r1, #129	@ 0x81
 800ea4a:	f7f9 fd37 	bl	80084bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ea4e:	687a      	ldr	r2, [r7, #4]
 800ea50:	23b2      	movs	r3, #178	@ 0xb2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	58d0      	ldr	r0, [r2, r3]
 800ea56:	2388      	movs	r3, #136	@ 0x88
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2101      	movs	r1, #1
 800ea5e:	f7f9 fd2d 	bl	80084bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	23b2      	movs	r3, #178	@ 0xb2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	58d0      	ldr	r0, [r2, r3]
 800ea6a:	2380      	movs	r3, #128	@ 0x80
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	2200      	movs	r2, #0
 800ea70:	2182      	movs	r1, #130	@ 0x82
 800ea72:	f7f9 fd23 	bl	80084bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	0018      	movs	r0, r3
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	b002      	add	sp, #8
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20001c5c 	.word	0x20001c5c
 800ea84:	40005c00 	.word	0x40005c00

0800ea88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea90:	210f      	movs	r1, #15
 800ea92:	187b      	adds	r3, r7, r1
 800ea94:	2200      	movs	r2, #0
 800ea96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea98:	260e      	movs	r6, #14
 800ea9a:	19bb      	adds	r3, r7, r6
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	23b2      	movs	r3, #178	@ 0xb2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	58d3      	ldr	r3, [r2, r3]
 800eaa8:	000d      	movs	r5, r1
 800eaaa:	187c      	adds	r4, r7, r1
 800eaac:	0018      	movs	r0, r3
 800eaae:	f7f8 f96b 	bl	8006d88 <HAL_PCD_Start>
 800eab2:	0003      	movs	r3, r0
 800eab4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eab6:	19bc      	adds	r4, r7, r6
 800eab8:	197b      	adds	r3, r7, r5
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	0018      	movs	r0, r3
 800eabe:	f000 f9e6 	bl	800ee8e <USBD_Get_USB_Status>
 800eac2:	0003      	movs	r3, r0
 800eac4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800eac6:	19bb      	adds	r3, r7, r6
 800eac8:	781b      	ldrb	r3, [r3, #0]
}
 800eaca:	0018      	movs	r0, r3
 800eacc:	46bd      	mov	sp, r7
 800eace:	b005      	add	sp, #20
 800ead0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ead2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ead2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ead4:	b085      	sub	sp, #20
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
 800eada:	000c      	movs	r4, r1
 800eadc:	0010      	movs	r0, r2
 800eade:	0019      	movs	r1, r3
 800eae0:	1cfb      	adds	r3, r7, #3
 800eae2:	1c22      	adds	r2, r4, #0
 800eae4:	701a      	strb	r2, [r3, #0]
 800eae6:	1cbb      	adds	r3, r7, #2
 800eae8:	1c02      	adds	r2, r0, #0
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	003b      	movs	r3, r7
 800eaee:	1c0a      	adds	r2, r1, #0
 800eaf0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf2:	260f      	movs	r6, #15
 800eaf4:	19bb      	adds	r3, r7, r6
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eafa:	250e      	movs	r5, #14
 800eafc:	197b      	adds	r3, r7, r5
 800eafe:	2200      	movs	r2, #0
 800eb00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	23b2      	movs	r3, #178	@ 0xb2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	58d0      	ldr	r0, [r2, r3]
 800eb0a:	19bc      	adds	r4, r7, r6
 800eb0c:	1cbb      	adds	r3, r7, #2
 800eb0e:	781d      	ldrb	r5, [r3, #0]
 800eb10:	003b      	movs	r3, r7
 800eb12:	881a      	ldrh	r2, [r3, #0]
 800eb14:	1cfb      	adds	r3, r7, #3
 800eb16:	7819      	ldrb	r1, [r3, #0]
 800eb18:	002b      	movs	r3, r5
 800eb1a:	f7f8 fa9b 	bl	8007054 <HAL_PCD_EP_Open>
 800eb1e:	0003      	movs	r3, r0
 800eb20:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb22:	250e      	movs	r5, #14
 800eb24:	197c      	adds	r4, r7, r5
 800eb26:	19bb      	adds	r3, r7, r6
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	0018      	movs	r0, r3
 800eb2c:	f000 f9af 	bl	800ee8e <USBD_Get_USB_Status>
 800eb30:	0003      	movs	r3, r0
 800eb32:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800eb34:	197b      	adds	r3, r7, r5
 800eb36:	781b      	ldrb	r3, [r3, #0]
}
 800eb38:	0018      	movs	r0, r3
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	b005      	add	sp, #20
 800eb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb40 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb42:	b085      	sub	sp, #20
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	000a      	movs	r2, r1
 800eb4a:	1cfb      	adds	r3, r7, #3
 800eb4c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb4e:	210f      	movs	r1, #15
 800eb50:	187b      	adds	r3, r7, r1
 800eb52:	2200      	movs	r2, #0
 800eb54:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb56:	260e      	movs	r6, #14
 800eb58:	19bb      	adds	r3, r7, r6
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	23b2      	movs	r3, #178	@ 0xb2
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	58d2      	ldr	r2, [r2, r3]
 800eb66:	000d      	movs	r5, r1
 800eb68:	187c      	adds	r4, r7, r1
 800eb6a:	1cfb      	adds	r3, r7, #3
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	0019      	movs	r1, r3
 800eb70:	0010      	movs	r0, r2
 800eb72:	f7f8 fae0 	bl	8007136 <HAL_PCD_EP_Close>
 800eb76:	0003      	movs	r3, r0
 800eb78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb7a:	19bc      	adds	r4, r7, r6
 800eb7c:	197b      	adds	r3, r7, r5
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	0018      	movs	r0, r3
 800eb82:	f000 f984 	bl	800ee8e <USBD_Get_USB_Status>
 800eb86:	0003      	movs	r3, r0
 800eb88:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800eb8a:	19bb      	adds	r3, r7, r6
 800eb8c:	781b      	ldrb	r3, [r3, #0]
}
 800eb8e:	0018      	movs	r0, r3
 800eb90:	46bd      	mov	sp, r7
 800eb92:	b005      	add	sp, #20
 800eb94:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	000a      	movs	r2, r1
 800eba0:	1cfb      	adds	r3, r7, #3
 800eba2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba4:	210f      	movs	r1, #15
 800eba6:	187b      	adds	r3, r7, r1
 800eba8:	2200      	movs	r2, #0
 800ebaa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebac:	260e      	movs	r6, #14
 800ebae:	19bb      	adds	r3, r7, r6
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	23b2      	movs	r3, #178	@ 0xb2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	58d2      	ldr	r2, [r2, r3]
 800ebbc:	000d      	movs	r5, r1
 800ebbe:	187c      	adds	r4, r7, r1
 800ebc0:	1cfb      	adds	r3, r7, #3
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	0019      	movs	r1, r3
 800ebc6:	0010      	movs	r0, r2
 800ebc8:	f7f8 fb96 	bl	80072f8 <HAL_PCD_EP_SetStall>
 800ebcc:	0003      	movs	r3, r0
 800ebce:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebd0:	19bc      	adds	r4, r7, r6
 800ebd2:	197b      	adds	r3, r7, r5
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 f959 	bl	800ee8e <USBD_Get_USB_Status>
 800ebdc:	0003      	movs	r3, r0
 800ebde:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ebe0:	19bb      	adds	r3, r7, r6
 800ebe2:	781b      	ldrb	r3, [r3, #0]
}
 800ebe4:	0018      	movs	r0, r3
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	b005      	add	sp, #20
 800ebea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	000a      	movs	r2, r1
 800ebf6:	1cfb      	adds	r3, r7, #3
 800ebf8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfa:	210f      	movs	r1, #15
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	2200      	movs	r2, #0
 800ec00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec02:	260e      	movs	r6, #14
 800ec04:	19bb      	adds	r3, r7, r6
 800ec06:	2200      	movs	r2, #0
 800ec08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	23b2      	movs	r3, #178	@ 0xb2
 800ec0e:	009b      	lsls	r3, r3, #2
 800ec10:	58d2      	ldr	r2, [r2, r3]
 800ec12:	000d      	movs	r5, r1
 800ec14:	187c      	adds	r4, r7, r1
 800ec16:	1cfb      	adds	r3, r7, #3
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	0019      	movs	r1, r3
 800ec1c:	0010      	movs	r0, r2
 800ec1e:	f7f8 fbc9 	bl	80073b4 <HAL_PCD_EP_ClrStall>
 800ec22:	0003      	movs	r3, r0
 800ec24:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec26:	19bc      	adds	r4, r7, r6
 800ec28:	197b      	adds	r3, r7, r5
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f000 f92e 	bl	800ee8e <USBD_Get_USB_Status>
 800ec32:	0003      	movs	r3, r0
 800ec34:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ec36:	19bb      	adds	r3, r7, r6
 800ec38:	781b      	ldrb	r3, [r3, #0]
}
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b005      	add	sp, #20
 800ec40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ec42 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b084      	sub	sp, #16
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	000a      	movs	r2, r1
 800ec4c:	1cfb      	adds	r3, r7, #3
 800ec4e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	23b2      	movs	r3, #178	@ 0xb2
 800ec54:	009b      	lsls	r3, r3, #2
 800ec56:	58d3      	ldr	r3, [r2, r3]
 800ec58:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ec5a:	1cfb      	adds	r3, r7, #3
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b25b      	sxtb	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	da0c      	bge.n	800ec7e <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec64:	1cfb      	adds	r3, r7, #3
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	227f      	movs	r2, #127	@ 0x7f
 800ec6a:	401a      	ands	r2, r3
 800ec6c:	68f9      	ldr	r1, [r7, #12]
 800ec6e:	0013      	movs	r3, r2
 800ec70:	009b      	lsls	r3, r3, #2
 800ec72:	189b      	adds	r3, r3, r2
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	18cb      	adds	r3, r1, r3
 800ec78:	3316      	adds	r3, #22
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	e00d      	b.n	800ec9a <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec7e:	1cfb      	adds	r3, r7, #3
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	227f      	movs	r2, #127	@ 0x7f
 800ec84:	401a      	ands	r2, r3
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	23ab      	movs	r3, #171	@ 0xab
 800ec8a:	0059      	lsls	r1, r3, #1
 800ec8c:	0013      	movs	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	189b      	adds	r3, r3, r2
 800ec92:	00db      	lsls	r3, r3, #3
 800ec94:	18c3      	adds	r3, r0, r3
 800ec96:	185b      	adds	r3, r3, r1
 800ec98:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec9a:	0018      	movs	r0, r3
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	b004      	add	sp, #16
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca4:	b085      	sub	sp, #20
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	000a      	movs	r2, r1
 800ecac:	1cfb      	adds	r3, r7, #3
 800ecae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecb0:	210f      	movs	r1, #15
 800ecb2:	187b      	adds	r3, r7, r1
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecb8:	260e      	movs	r6, #14
 800ecba:	19bb      	adds	r3, r7, r6
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	23b2      	movs	r3, #178	@ 0xb2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	58d2      	ldr	r2, [r2, r3]
 800ecc8:	000d      	movs	r5, r1
 800ecca:	187c      	adds	r4, r7, r1
 800eccc:	1cfb      	adds	r3, r7, #3
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	0019      	movs	r1, r3
 800ecd2:	0010      	movs	r0, r2
 800ecd4:	f7f8 f994 	bl	8007000 <HAL_PCD_SetAddress>
 800ecd8:	0003      	movs	r3, r0
 800ecda:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecdc:	19bc      	adds	r4, r7, r6
 800ecde:	197b      	adds	r3, r7, r5
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	0018      	movs	r0, r3
 800ece4:	f000 f8d3 	bl	800ee8e <USBD_Get_USB_Status>
 800ece8:	0003      	movs	r3, r0
 800ecea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ecec:	19bb      	adds	r3, r7, r6
 800ecee:	781b      	ldrb	r3, [r3, #0]
}
 800ecf0:	0018      	movs	r0, r3
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	b005      	add	sp, #20
 800ecf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	607a      	str	r2, [r7, #4]
 800ed02:	603b      	str	r3, [r7, #0]
 800ed04:	230b      	movs	r3, #11
 800ed06:	18fb      	adds	r3, r7, r3
 800ed08:	1c0a      	adds	r2, r1, #0
 800ed0a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0c:	2617      	movs	r6, #23
 800ed0e:	19bb      	adds	r3, r7, r6
 800ed10:	2200      	movs	r2, #0
 800ed12:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed14:	2516      	movs	r5, #22
 800ed16:	197b      	adds	r3, r7, r5
 800ed18:	2200      	movs	r2, #0
 800ed1a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	23b2      	movs	r3, #178	@ 0xb2
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	58d0      	ldr	r0, [r2, r3]
 800ed24:	19bc      	adds	r4, r7, r6
 800ed26:	683d      	ldr	r5, [r7, #0]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	230b      	movs	r3, #11
 800ed2c:	18fb      	adds	r3, r7, r3
 800ed2e:	7819      	ldrb	r1, [r3, #0]
 800ed30:	002b      	movs	r3, r5
 800ed32:	f7f8 faa4 	bl	800727e <HAL_PCD_EP_Transmit>
 800ed36:	0003      	movs	r3, r0
 800ed38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed3a:	2516      	movs	r5, #22
 800ed3c:	197c      	adds	r4, r7, r5
 800ed3e:	19bb      	adds	r3, r7, r6
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	0018      	movs	r0, r3
 800ed44:	f000 f8a3 	bl	800ee8e <USBD_Get_USB_Status>
 800ed48:	0003      	movs	r3, r0
 800ed4a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ed4c:	197b      	adds	r3, r7, r5
 800ed4e:	781b      	ldrb	r3, [r3, #0]
}
 800ed50:	0018      	movs	r0, r3
 800ed52:	46bd      	mov	sp, r7
 800ed54:	b007      	add	sp, #28
 800ed56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5a:	b087      	sub	sp, #28
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	607a      	str	r2, [r7, #4]
 800ed62:	603b      	str	r3, [r7, #0]
 800ed64:	230b      	movs	r3, #11
 800ed66:	18fb      	adds	r3, r7, r3
 800ed68:	1c0a      	adds	r2, r1, #0
 800ed6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed6c:	2617      	movs	r6, #23
 800ed6e:	19bb      	adds	r3, r7, r6
 800ed70:	2200      	movs	r2, #0
 800ed72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed74:	2516      	movs	r5, #22
 800ed76:	197b      	adds	r3, r7, r5
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	23b2      	movs	r3, #178	@ 0xb2
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	58d0      	ldr	r0, [r2, r3]
 800ed84:	19bc      	adds	r4, r7, r6
 800ed86:	683d      	ldr	r5, [r7, #0]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	230b      	movs	r3, #11
 800ed8c:	18fb      	adds	r3, r7, r3
 800ed8e:	7819      	ldrb	r1, [r3, #0]
 800ed90:	002b      	movs	r3, r5
 800ed92:	f7f8 fa23 	bl	80071dc <HAL_PCD_EP_Receive>
 800ed96:	0003      	movs	r3, r0
 800ed98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed9a:	2516      	movs	r5, #22
 800ed9c:	197c      	adds	r4, r7, r5
 800ed9e:	19bb      	adds	r3, r7, r6
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	0018      	movs	r0, r3
 800eda4:	f000 f873 	bl	800ee8e <USBD_Get_USB_Status>
 800eda8:	0003      	movs	r3, r0
 800edaa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800edac:	197b      	adds	r3, r7, r5
 800edae:	781b      	ldrb	r3, [r3, #0]
}
 800edb0:	0018      	movs	r0, r3
 800edb2:	46bd      	mov	sp, r7
 800edb4:	b007      	add	sp, #28
 800edb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edb8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	000a      	movs	r2, r1
 800edc2:	1cfb      	adds	r3, r7, #3
 800edc4:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	23b2      	movs	r3, #178	@ 0xb2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	58d2      	ldr	r2, [r2, r3]
 800edce:	1cfb      	adds	r3, r7, #3
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	0019      	movs	r1, r3
 800edd4:	0010      	movs	r0, r2
 800edd6:	f7f8 fa39 	bl	800724c <HAL_PCD_EP_GetRxCount>
 800edda:	0003      	movs	r3, r0
}
 800eddc:	0018      	movs	r0, r3
 800edde:	46bd      	mov	sp, r7
 800ede0:	b002      	add	sp, #8
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	000a      	movs	r2, r1
 800edee:	1cfb      	adds	r3, r7, #3
 800edf0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800edf2:	1cfb      	adds	r3, r7, #3
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <HAL_PCDEx_LPM_Callback+0x1c>
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d014      	beq.n	800ee28 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800edfe:	e025      	b.n	800ee4c <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	7adb      	ldrb	r3, [r3, #11]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d007      	beq.n	800ee18 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800ee08:	f000 f83a 	bl	800ee80 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee0c:	4b11      	ldr	r3, [pc, #68]	@ (800ee54 <HAL_PCDEx_LPM_Callback+0x70>)
 800ee0e:	691a      	ldr	r2, [r3, #16]
 800ee10:	4b10      	ldr	r3, [pc, #64]	@ (800ee54 <HAL_PCDEx_LPM_Callback+0x70>)
 800ee12:	2106      	movs	r1, #6
 800ee14:	438a      	bics	r2, r1
 800ee16:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	23b7      	movs	r3, #183	@ 0xb7
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	58d3      	ldr	r3, [r2, r3]
 800ee20:	0018      	movs	r0, r3
 800ee22:	f7fe f995 	bl	800d150 <USBD_LL_Resume>
    break;
 800ee26:	e011      	b.n	800ee4c <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	23b7      	movs	r3, #183	@ 0xb7
 800ee2c:	009b      	lsls	r3, r3, #2
 800ee2e:	58d3      	ldr	r3, [r2, r3]
 800ee30:	0018      	movs	r0, r3
 800ee32:	f7fe f975 	bl	800d120 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	7adb      	ldrb	r3, [r3, #11]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d005      	beq.n	800ee4a <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee3e:	4b05      	ldr	r3, [pc, #20]	@ (800ee54 <HAL_PCDEx_LPM_Callback+0x70>)
 800ee40:	691a      	ldr	r2, [r3, #16]
 800ee42:	4b04      	ldr	r3, [pc, #16]	@ (800ee54 <HAL_PCDEx_LPM_Callback+0x70>)
 800ee44:	2106      	movs	r1, #6
 800ee46:	430a      	orrs	r2, r1
 800ee48:	611a      	str	r2, [r3, #16]
    break;
 800ee4a:	46c0      	nop			@ (mov r8, r8)
}
 800ee4c:	46c0      	nop			@ (mov r8, r8)
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	b002      	add	sp, #8
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	e000ed00 	.word	0xe000ed00

0800ee58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee60:	4b02      	ldr	r3, [pc, #8]	@ (800ee6c <USBD_static_malloc+0x14>)
}
 800ee62:	0018      	movs	r0, r3
 800ee64:	46bd      	mov	sp, r7
 800ee66:	b002      	add	sp, #8
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	46c0      	nop			@ (mov r8, r8)
 800ee6c:	20001f3c 	.word	0x20001f3c

0800ee70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]

}
 800ee78:	46c0      	nop			@ (mov r8, r8)
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	b002      	add	sp, #8
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ee84:	f7f4 f982 	bl	800318c <SystemClock_Config>
}
 800ee88:	46c0      	nop			@ (mov r8, r8)
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b084      	sub	sp, #16
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	0002      	movs	r2, r0
 800ee96:	1dfb      	adds	r3, r7, #7
 800ee98:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee9a:	230f      	movs	r3, #15
 800ee9c:	18fb      	adds	r3, r7, r3
 800ee9e:	2200      	movs	r2, #0
 800eea0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800eea2:	1dfb      	adds	r3, r7, #7
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	2b03      	cmp	r3, #3
 800eea8:	d017      	beq.n	800eeda <USBD_Get_USB_Status+0x4c>
 800eeaa:	dc1b      	bgt.n	800eee4 <USBD_Get_USB_Status+0x56>
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d00f      	beq.n	800eed0 <USBD_Get_USB_Status+0x42>
 800eeb0:	dc18      	bgt.n	800eee4 <USBD_Get_USB_Status+0x56>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <USBD_Get_USB_Status+0x2e>
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d005      	beq.n	800eec6 <USBD_Get_USB_Status+0x38>
 800eeba:	e013      	b.n	800eee4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eebc:	230f      	movs	r3, #15
 800eebe:	18fb      	adds	r3, r7, r3
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
    break;
 800eec4:	e013      	b.n	800eeee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eec6:	230f      	movs	r3, #15
 800eec8:	18fb      	adds	r3, r7, r3
 800eeca:	2203      	movs	r2, #3
 800eecc:	701a      	strb	r2, [r3, #0]
    break;
 800eece:	e00e      	b.n	800eeee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eed0:	230f      	movs	r3, #15
 800eed2:	18fb      	adds	r3, r7, r3
 800eed4:	2201      	movs	r2, #1
 800eed6:	701a      	strb	r2, [r3, #0]
    break;
 800eed8:	e009      	b.n	800eeee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eeda:	230f      	movs	r3, #15
 800eedc:	18fb      	adds	r3, r7, r3
 800eede:	2203      	movs	r2, #3
 800eee0:	701a      	strb	r2, [r3, #0]
    break;
 800eee2:	e004      	b.n	800eeee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800eee4:	230f      	movs	r3, #15
 800eee6:	18fb      	adds	r3, r7, r3
 800eee8:	2203      	movs	r2, #3
 800eeea:	701a      	strb	r2, [r3, #0]
    break;
 800eeec:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800eeee:	230f      	movs	r3, #15
 800eef0:	18fb      	adds	r3, r7, r3
 800eef2:	781b      	ldrb	r3, [r3, #0]
}
 800eef4:	0018      	movs	r0, r3
 800eef6:	46bd      	mov	sp, r7
 800eef8:	b004      	add	sp, #16
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <sulp>:
 800eefc:	b570      	push	{r4, r5, r6, lr}
 800eefe:	0016      	movs	r6, r2
 800ef00:	000d      	movs	r5, r1
 800ef02:	f003 fae9 	bl	80124d8 <__ulp>
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d00d      	beq.n	800ef26 <sulp+0x2a>
 800ef0a:	236b      	movs	r3, #107	@ 0x6b
 800ef0c:	006a      	lsls	r2, r5, #1
 800ef0e:	0d52      	lsrs	r2, r2, #21
 800ef10:	1a9b      	subs	r3, r3, r2
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	dd07      	ble.n	800ef26 <sulp+0x2a>
 800ef16:	2400      	movs	r4, #0
 800ef18:	4a03      	ldr	r2, [pc, #12]	@ (800ef28 <sulp+0x2c>)
 800ef1a:	051b      	lsls	r3, r3, #20
 800ef1c:	189d      	adds	r5, r3, r2
 800ef1e:	002b      	movs	r3, r5
 800ef20:	0022      	movs	r2, r4
 800ef22:	f7f2 fb2b 	bl	800157c <__aeabi_dmul>
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	3ff00000 	.word	0x3ff00000

0800ef2c <_strtod_l>:
 800ef2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef2e:	b0a3      	sub	sp, #140	@ 0x8c
 800ef30:	921b      	str	r2, [sp, #108]	@ 0x6c
 800ef32:	2200      	movs	r2, #0
 800ef34:	2600      	movs	r6, #0
 800ef36:	2700      	movs	r7, #0
 800ef38:	9005      	str	r0, [sp, #20]
 800ef3a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef3c:	921e      	str	r2, [sp, #120]	@ 0x78
 800ef3e:	911d      	str	r1, [sp, #116]	@ 0x74
 800ef40:	780a      	ldrb	r2, [r1, #0]
 800ef42:	2a2b      	cmp	r2, #43	@ 0x2b
 800ef44:	d053      	beq.n	800efee <_strtod_l+0xc2>
 800ef46:	d83f      	bhi.n	800efc8 <_strtod_l+0x9c>
 800ef48:	2a0d      	cmp	r2, #13
 800ef4a:	d839      	bhi.n	800efc0 <_strtod_l+0x94>
 800ef4c:	2a08      	cmp	r2, #8
 800ef4e:	d839      	bhi.n	800efc4 <_strtod_l+0x98>
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	d042      	beq.n	800efda <_strtod_l+0xae>
 800ef54:	2200      	movs	r2, #0
 800ef56:	9212      	str	r2, [sp, #72]	@ 0x48
 800ef58:	2100      	movs	r1, #0
 800ef5a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800ef5c:	910c      	str	r1, [sp, #48]	@ 0x30
 800ef5e:	782a      	ldrb	r2, [r5, #0]
 800ef60:	2a30      	cmp	r2, #48	@ 0x30
 800ef62:	d000      	beq.n	800ef66 <_strtod_l+0x3a>
 800ef64:	e083      	b.n	800f06e <_strtod_l+0x142>
 800ef66:	786a      	ldrb	r2, [r5, #1]
 800ef68:	3120      	adds	r1, #32
 800ef6a:	438a      	bics	r2, r1
 800ef6c:	2a58      	cmp	r2, #88	@ 0x58
 800ef6e:	d000      	beq.n	800ef72 <_strtod_l+0x46>
 800ef70:	e073      	b.n	800f05a <_strtod_l+0x12e>
 800ef72:	9302      	str	r3, [sp, #8]
 800ef74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef76:	4a9b      	ldr	r2, [pc, #620]	@ (800f1e4 <_strtod_l+0x2b8>)
 800ef78:	9301      	str	r3, [sp, #4]
 800ef7a:	ab1e      	add	r3, sp, #120	@ 0x78
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	9805      	ldr	r0, [sp, #20]
 800ef80:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ef82:	a91d      	add	r1, sp, #116	@ 0x74
 800ef84:	f002 fb60 	bl	8011648 <__gethex>
 800ef88:	230f      	movs	r3, #15
 800ef8a:	0002      	movs	r2, r0
 800ef8c:	401a      	ands	r2, r3
 800ef8e:	0004      	movs	r4, r0
 800ef90:	9206      	str	r2, [sp, #24]
 800ef92:	4218      	tst	r0, r3
 800ef94:	d005      	beq.n	800efa2 <_strtod_l+0x76>
 800ef96:	2a06      	cmp	r2, #6
 800ef98:	d12b      	bne.n	800eff2 <_strtod_l+0xc6>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	951d      	str	r5, [sp, #116]	@ 0x74
 800efa0:	9312      	str	r3, [sp, #72]	@ 0x48
 800efa2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d002      	beq.n	800efae <_strtod_l+0x82>
 800efa8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800efac:	6013      	str	r3, [r2, #0]
 800efae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d019      	beq.n	800efe8 <_strtod_l+0xbc>
 800efb4:	2380      	movs	r3, #128	@ 0x80
 800efb6:	0030      	movs	r0, r6
 800efb8:	061b      	lsls	r3, r3, #24
 800efba:	18f9      	adds	r1, r7, r3
 800efbc:	b023      	add	sp, #140	@ 0x8c
 800efbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efc0:	2a20      	cmp	r2, #32
 800efc2:	d1c7      	bne.n	800ef54 <_strtod_l+0x28>
 800efc4:	3101      	adds	r1, #1
 800efc6:	e7ba      	b.n	800ef3e <_strtod_l+0x12>
 800efc8:	2a2d      	cmp	r2, #45	@ 0x2d
 800efca:	d1c3      	bne.n	800ef54 <_strtod_l+0x28>
 800efcc:	3a2c      	subs	r2, #44	@ 0x2c
 800efce:	9212      	str	r2, [sp, #72]	@ 0x48
 800efd0:	1c4a      	adds	r2, r1, #1
 800efd2:	921d      	str	r2, [sp, #116]	@ 0x74
 800efd4:	784a      	ldrb	r2, [r1, #1]
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	d1be      	bne.n	800ef58 <_strtod_l+0x2c>
 800efda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efdc:	931d      	str	r3, [sp, #116]	@ 0x74
 800efde:	2300      	movs	r3, #0
 800efe0:	9312      	str	r3, [sp, #72]	@ 0x48
 800efe2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d1df      	bne.n	800efa8 <_strtod_l+0x7c>
 800efe8:	0030      	movs	r0, r6
 800efea:	0039      	movs	r1, r7
 800efec:	e7e6      	b.n	800efbc <_strtod_l+0x90>
 800efee:	2200      	movs	r2, #0
 800eff0:	e7ed      	b.n	800efce <_strtod_l+0xa2>
 800eff2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800eff4:	2a00      	cmp	r2, #0
 800eff6:	d007      	beq.n	800f008 <_strtod_l+0xdc>
 800eff8:	2135      	movs	r1, #53	@ 0x35
 800effa:	a820      	add	r0, sp, #128	@ 0x80
 800effc:	f003 fb62 	bl	80126c4 <__copybits>
 800f000:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f002:	9805      	ldr	r0, [sp, #20]
 800f004:	f002 ff24 	bl	8011e50 <_Bfree>
 800f008:	9806      	ldr	r0, [sp, #24]
 800f00a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f00c:	3801      	subs	r0, #1
 800f00e:	2804      	cmp	r0, #4
 800f010:	d806      	bhi.n	800f020 <_strtod_l+0xf4>
 800f012:	f7f1 f87d 	bl	8000110 <__gnu_thumb1_case_uqi>
 800f016:	0312      	.short	0x0312
 800f018:	1e1c      	.short	0x1e1c
 800f01a:	12          	.byte	0x12
 800f01b:	00          	.byte	0x00
 800f01c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f01e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800f020:	05e4      	lsls	r4, r4, #23
 800f022:	d502      	bpl.n	800f02a <_strtod_l+0xfe>
 800f024:	2380      	movs	r3, #128	@ 0x80
 800f026:	061b      	lsls	r3, r3, #24
 800f028:	431f      	orrs	r7, r3
 800f02a:	4b6f      	ldr	r3, [pc, #444]	@ (800f1e8 <_strtod_l+0x2bc>)
 800f02c:	423b      	tst	r3, r7
 800f02e:	d1b8      	bne.n	800efa2 <_strtod_l+0x76>
 800f030:	f001 fb9a 	bl	8010768 <__errno>
 800f034:	2322      	movs	r3, #34	@ 0x22
 800f036:	6003      	str	r3, [r0, #0]
 800f038:	e7b3      	b.n	800efa2 <_strtod_l+0x76>
 800f03a:	496c      	ldr	r1, [pc, #432]	@ (800f1ec <_strtod_l+0x2c0>)
 800f03c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f03e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f040:	400a      	ands	r2, r1
 800f042:	496b      	ldr	r1, [pc, #428]	@ (800f1f0 <_strtod_l+0x2c4>)
 800f044:	185b      	adds	r3, r3, r1
 800f046:	051b      	lsls	r3, r3, #20
 800f048:	431a      	orrs	r2, r3
 800f04a:	0017      	movs	r7, r2
 800f04c:	e7e8      	b.n	800f020 <_strtod_l+0xf4>
 800f04e:	4f66      	ldr	r7, [pc, #408]	@ (800f1e8 <_strtod_l+0x2bc>)
 800f050:	e7e6      	b.n	800f020 <_strtod_l+0xf4>
 800f052:	2601      	movs	r6, #1
 800f054:	4f67      	ldr	r7, [pc, #412]	@ (800f1f4 <_strtod_l+0x2c8>)
 800f056:	4276      	negs	r6, r6
 800f058:	e7e2      	b.n	800f020 <_strtod_l+0xf4>
 800f05a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f05c:	1c5a      	adds	r2, r3, #1
 800f05e:	921d      	str	r2, [sp, #116]	@ 0x74
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b30      	cmp	r3, #48	@ 0x30
 800f064:	d0f9      	beq.n	800f05a <_strtod_l+0x12e>
 800f066:	2b00      	cmp	r3, #0
 800f068:	d09b      	beq.n	800efa2 <_strtod_l+0x76>
 800f06a:	2301      	movs	r3, #1
 800f06c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f06e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f070:	220a      	movs	r2, #10
 800f072:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f074:	2300      	movs	r3, #0
 800f076:	9310      	str	r3, [sp, #64]	@ 0x40
 800f078:	930d      	str	r3, [sp, #52]	@ 0x34
 800f07a:	9308      	str	r3, [sp, #32]
 800f07c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800f07e:	7804      	ldrb	r4, [r0, #0]
 800f080:	0023      	movs	r3, r4
 800f082:	3b30      	subs	r3, #48	@ 0x30
 800f084:	b2d9      	uxtb	r1, r3
 800f086:	2909      	cmp	r1, #9
 800f088:	d927      	bls.n	800f0da <_strtod_l+0x1ae>
 800f08a:	2201      	movs	r2, #1
 800f08c:	495a      	ldr	r1, [pc, #360]	@ (800f1f8 <_strtod_l+0x2cc>)
 800f08e:	f001 fb07 	bl	80106a0 <strncmp>
 800f092:	2800      	cmp	r0, #0
 800f094:	d033      	beq.n	800f0fe <_strtod_l+0x1d2>
 800f096:	2000      	movs	r0, #0
 800f098:	0023      	movs	r3, r4
 800f09a:	4684      	mov	ip, r0
 800f09c:	9a08      	ldr	r2, [sp, #32]
 800f09e:	900e      	str	r0, [sp, #56]	@ 0x38
 800f0a0:	9206      	str	r2, [sp, #24]
 800f0a2:	2220      	movs	r2, #32
 800f0a4:	0019      	movs	r1, r3
 800f0a6:	4391      	bics	r1, r2
 800f0a8:	000a      	movs	r2, r1
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	9107      	str	r1, [sp, #28]
 800f0ae:	2a45      	cmp	r2, #69	@ 0x45
 800f0b0:	d000      	beq.n	800f0b4 <_strtod_l+0x188>
 800f0b2:	e0cb      	b.n	800f24c <_strtod_l+0x320>
 800f0b4:	9b06      	ldr	r3, [sp, #24]
 800f0b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f0b8:	4303      	orrs	r3, r0
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	428b      	cmp	r3, r1
 800f0be:	d08c      	beq.n	800efda <_strtod_l+0xae>
 800f0c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	931d      	str	r3, [sp, #116]	@ 0x74
 800f0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ca:	785b      	ldrb	r3, [r3, #1]
 800f0cc:	2b2b      	cmp	r3, #43	@ 0x2b
 800f0ce:	d07b      	beq.n	800f1c8 <_strtod_l+0x29c>
 800f0d0:	000c      	movs	r4, r1
 800f0d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f0d4:	d17e      	bne.n	800f1d4 <_strtod_l+0x2a8>
 800f0d6:	2401      	movs	r4, #1
 800f0d8:	e077      	b.n	800f1ca <_strtod_l+0x29e>
 800f0da:	9908      	ldr	r1, [sp, #32]
 800f0dc:	2908      	cmp	r1, #8
 800f0de:	dc09      	bgt.n	800f0f4 <_strtod_l+0x1c8>
 800f0e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f0e2:	4351      	muls	r1, r2
 800f0e4:	185b      	adds	r3, r3, r1
 800f0e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f0e8:	9b08      	ldr	r3, [sp, #32]
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	9308      	str	r3, [sp, #32]
 800f0f0:	901d      	str	r0, [sp, #116]	@ 0x74
 800f0f2:	e7c3      	b.n	800f07c <_strtod_l+0x150>
 800f0f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f0f6:	4355      	muls	r5, r2
 800f0f8:	195b      	adds	r3, r3, r5
 800f0fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0fc:	e7f4      	b.n	800f0e8 <_strtod_l+0x1bc>
 800f0fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f100:	1c5a      	adds	r2, r3, #1
 800f102:	921d      	str	r2, [sp, #116]	@ 0x74
 800f104:	9a08      	ldr	r2, [sp, #32]
 800f106:	785b      	ldrb	r3, [r3, #1]
 800f108:	2a00      	cmp	r2, #0
 800f10a:	d03e      	beq.n	800f18a <_strtod_l+0x25e>
 800f10c:	900e      	str	r0, [sp, #56]	@ 0x38
 800f10e:	9206      	str	r2, [sp, #24]
 800f110:	001a      	movs	r2, r3
 800f112:	3a30      	subs	r2, #48	@ 0x30
 800f114:	2a09      	cmp	r2, #9
 800f116:	d912      	bls.n	800f13e <_strtod_l+0x212>
 800f118:	2201      	movs	r2, #1
 800f11a:	4694      	mov	ip, r2
 800f11c:	e7c1      	b.n	800f0a2 <_strtod_l+0x176>
 800f11e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f120:	3001      	adds	r0, #1
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	921d      	str	r2, [sp, #116]	@ 0x74
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b30      	cmp	r3, #48	@ 0x30
 800f12a:	d0f8      	beq.n	800f11e <_strtod_l+0x1f2>
 800f12c:	001a      	movs	r2, r3
 800f12e:	3a31      	subs	r2, #49	@ 0x31
 800f130:	2a08      	cmp	r2, #8
 800f132:	d844      	bhi.n	800f1be <_strtod_l+0x292>
 800f134:	900e      	str	r0, [sp, #56]	@ 0x38
 800f136:	2000      	movs	r0, #0
 800f138:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f13a:	9006      	str	r0, [sp, #24]
 800f13c:	9213      	str	r2, [sp, #76]	@ 0x4c
 800f13e:	001c      	movs	r4, r3
 800f140:	1c42      	adds	r2, r0, #1
 800f142:	3c30      	subs	r4, #48	@ 0x30
 800f144:	2b30      	cmp	r3, #48	@ 0x30
 800f146:	d01a      	beq.n	800f17e <_strtod_l+0x252>
 800f148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f14a:	9906      	ldr	r1, [sp, #24]
 800f14c:	189b      	adds	r3, r3, r2
 800f14e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f150:	230a      	movs	r3, #10
 800f152:	469c      	mov	ip, r3
 800f154:	9d06      	ldr	r5, [sp, #24]
 800f156:	1c4b      	adds	r3, r1, #1
 800f158:	1b5d      	subs	r5, r3, r5
 800f15a:	42aa      	cmp	r2, r5
 800f15c:	dc17      	bgt.n	800f18e <_strtod_l+0x262>
 800f15e:	43c3      	mvns	r3, r0
 800f160:	9a06      	ldr	r2, [sp, #24]
 800f162:	17db      	asrs	r3, r3, #31
 800f164:	4003      	ands	r3, r0
 800f166:	18d1      	adds	r1, r2, r3
 800f168:	3201      	adds	r2, #1
 800f16a:	18d3      	adds	r3, r2, r3
 800f16c:	9306      	str	r3, [sp, #24]
 800f16e:	2908      	cmp	r1, #8
 800f170:	dc1c      	bgt.n	800f1ac <_strtod_l+0x280>
 800f172:	230a      	movs	r3, #10
 800f174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f176:	4353      	muls	r3, r2
 800f178:	2200      	movs	r2, #0
 800f17a:	18e3      	adds	r3, r4, r3
 800f17c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f17e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f180:	0010      	movs	r0, r2
 800f182:	1c59      	adds	r1, r3, #1
 800f184:	911d      	str	r1, [sp, #116]	@ 0x74
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	e7c2      	b.n	800f110 <_strtod_l+0x1e4>
 800f18a:	9808      	ldr	r0, [sp, #32]
 800f18c:	e7cc      	b.n	800f128 <_strtod_l+0x1fc>
 800f18e:	2908      	cmp	r1, #8
 800f190:	dc05      	bgt.n	800f19e <_strtod_l+0x272>
 800f192:	4665      	mov	r5, ip
 800f194:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f196:	4369      	muls	r1, r5
 800f198:	910d      	str	r1, [sp, #52]	@ 0x34
 800f19a:	0019      	movs	r1, r3
 800f19c:	e7da      	b.n	800f154 <_strtod_l+0x228>
 800f19e:	2b10      	cmp	r3, #16
 800f1a0:	dcfb      	bgt.n	800f19a <_strtod_l+0x26e>
 800f1a2:	4661      	mov	r1, ip
 800f1a4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f1a6:	434d      	muls	r5, r1
 800f1a8:	9510      	str	r5, [sp, #64]	@ 0x40
 800f1aa:	e7f6      	b.n	800f19a <_strtod_l+0x26e>
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	290f      	cmp	r1, #15
 800f1b0:	dce5      	bgt.n	800f17e <_strtod_l+0x252>
 800f1b2:	230a      	movs	r3, #10
 800f1b4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f1b6:	435d      	muls	r5, r3
 800f1b8:	1963      	adds	r3, r4, r5
 800f1ba:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1bc:	e7df      	b.n	800f17e <_strtod_l+0x252>
 800f1be:	2200      	movs	r2, #0
 800f1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1c2:	9206      	str	r2, [sp, #24]
 800f1c4:	3201      	adds	r2, #1
 800f1c6:	e7a8      	b.n	800f11a <_strtod_l+0x1ee>
 800f1c8:	2400      	movs	r4, #0
 800f1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1cc:	3302      	adds	r3, #2
 800f1ce:	931d      	str	r3, [sp, #116]	@ 0x74
 800f1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d2:	789b      	ldrb	r3, [r3, #2]
 800f1d4:	001a      	movs	r2, r3
 800f1d6:	3a30      	subs	r2, #48	@ 0x30
 800f1d8:	2a09      	cmp	r2, #9
 800f1da:	d913      	bls.n	800f204 <_strtod_l+0x2d8>
 800f1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1de:	921d      	str	r2, [sp, #116]	@ 0x74
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	e032      	b.n	800f24a <_strtod_l+0x31e>
 800f1e4:	080136f4 	.word	0x080136f4
 800f1e8:	7ff00000 	.word	0x7ff00000
 800f1ec:	ffefffff 	.word	0xffefffff
 800f1f0:	00000433 	.word	0x00000433
 800f1f4:	7fffffff 	.word	0x7fffffff
 800f1f8:	0801350c 	.word	0x0801350c
 800f1fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f1fe:	1c5a      	adds	r2, r3, #1
 800f200:	921d      	str	r2, [sp, #116]	@ 0x74
 800f202:	785b      	ldrb	r3, [r3, #1]
 800f204:	2b30      	cmp	r3, #48	@ 0x30
 800f206:	d0f9      	beq.n	800f1fc <_strtod_l+0x2d0>
 800f208:	2200      	movs	r2, #0
 800f20a:	9207      	str	r2, [sp, #28]
 800f20c:	001a      	movs	r2, r3
 800f20e:	3a31      	subs	r2, #49	@ 0x31
 800f210:	2a08      	cmp	r2, #8
 800f212:	d81b      	bhi.n	800f24c <_strtod_l+0x320>
 800f214:	3b30      	subs	r3, #48	@ 0x30
 800f216:	001a      	movs	r2, r3
 800f218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f21a:	9307      	str	r3, [sp, #28]
 800f21c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f21e:	1c59      	adds	r1, r3, #1
 800f220:	911d      	str	r1, [sp, #116]	@ 0x74
 800f222:	785b      	ldrb	r3, [r3, #1]
 800f224:	001d      	movs	r5, r3
 800f226:	3d30      	subs	r5, #48	@ 0x30
 800f228:	2d09      	cmp	r5, #9
 800f22a:	d93a      	bls.n	800f2a2 <_strtod_l+0x376>
 800f22c:	9d07      	ldr	r5, [sp, #28]
 800f22e:	1b49      	subs	r1, r1, r5
 800f230:	000d      	movs	r5, r1
 800f232:	49b3      	ldr	r1, [pc, #716]	@ (800f500 <_strtod_l+0x5d4>)
 800f234:	9107      	str	r1, [sp, #28]
 800f236:	2d08      	cmp	r5, #8
 800f238:	dc03      	bgt.n	800f242 <_strtod_l+0x316>
 800f23a:	9207      	str	r2, [sp, #28]
 800f23c:	428a      	cmp	r2, r1
 800f23e:	dd00      	ble.n	800f242 <_strtod_l+0x316>
 800f240:	9107      	str	r1, [sp, #28]
 800f242:	2c00      	cmp	r4, #0
 800f244:	d002      	beq.n	800f24c <_strtod_l+0x320>
 800f246:	9a07      	ldr	r2, [sp, #28]
 800f248:	4252      	negs	r2, r2
 800f24a:	9207      	str	r2, [sp, #28]
 800f24c:	9a06      	ldr	r2, [sp, #24]
 800f24e:	2a00      	cmp	r2, #0
 800f250:	d14b      	bne.n	800f2ea <_strtod_l+0x3be>
 800f252:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f254:	4310      	orrs	r0, r2
 800f256:	d000      	beq.n	800f25a <_strtod_l+0x32e>
 800f258:	e6a3      	b.n	800efa2 <_strtod_l+0x76>
 800f25a:	4662      	mov	r2, ip
 800f25c:	2a00      	cmp	r2, #0
 800f25e:	d000      	beq.n	800f262 <_strtod_l+0x336>
 800f260:	e6bb      	b.n	800efda <_strtod_l+0xae>
 800f262:	2b69      	cmp	r3, #105	@ 0x69
 800f264:	d025      	beq.n	800f2b2 <_strtod_l+0x386>
 800f266:	dc21      	bgt.n	800f2ac <_strtod_l+0x380>
 800f268:	2b49      	cmp	r3, #73	@ 0x49
 800f26a:	d022      	beq.n	800f2b2 <_strtod_l+0x386>
 800f26c:	2b4e      	cmp	r3, #78	@ 0x4e
 800f26e:	d000      	beq.n	800f272 <_strtod_l+0x346>
 800f270:	e6b3      	b.n	800efda <_strtod_l+0xae>
 800f272:	49a4      	ldr	r1, [pc, #656]	@ (800f504 <_strtod_l+0x5d8>)
 800f274:	a81d      	add	r0, sp, #116	@ 0x74
 800f276:	f002 fc1d 	bl	8011ab4 <__match>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d100      	bne.n	800f280 <_strtod_l+0x354>
 800f27e:	e6ac      	b.n	800efda <_strtod_l+0xae>
 800f280:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b28      	cmp	r3, #40	@ 0x28
 800f286:	d12a      	bne.n	800f2de <_strtod_l+0x3b2>
 800f288:	499f      	ldr	r1, [pc, #636]	@ (800f508 <_strtod_l+0x5dc>)
 800f28a:	aa20      	add	r2, sp, #128	@ 0x80
 800f28c:	a81d      	add	r0, sp, #116	@ 0x74
 800f28e:	f002 fc25 	bl	8011adc <__hexnan>
 800f292:	2805      	cmp	r0, #5
 800f294:	d123      	bne.n	800f2de <_strtod_l+0x3b2>
 800f296:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f298:	4a9c      	ldr	r2, [pc, #624]	@ (800f50c <_strtod_l+0x5e0>)
 800f29a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f29c:	431a      	orrs	r2, r3
 800f29e:	0017      	movs	r7, r2
 800f2a0:	e67f      	b.n	800efa2 <_strtod_l+0x76>
 800f2a2:	210a      	movs	r1, #10
 800f2a4:	434a      	muls	r2, r1
 800f2a6:	18d2      	adds	r2, r2, r3
 800f2a8:	3a30      	subs	r2, #48	@ 0x30
 800f2aa:	e7b7      	b.n	800f21c <_strtod_l+0x2f0>
 800f2ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800f2ae:	d0e0      	beq.n	800f272 <_strtod_l+0x346>
 800f2b0:	e693      	b.n	800efda <_strtod_l+0xae>
 800f2b2:	4997      	ldr	r1, [pc, #604]	@ (800f510 <_strtod_l+0x5e4>)
 800f2b4:	a81d      	add	r0, sp, #116	@ 0x74
 800f2b6:	f002 fbfd 	bl	8011ab4 <__match>
 800f2ba:	2800      	cmp	r0, #0
 800f2bc:	d100      	bne.n	800f2c0 <_strtod_l+0x394>
 800f2be:	e68c      	b.n	800efda <_strtod_l+0xae>
 800f2c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2c2:	4994      	ldr	r1, [pc, #592]	@ (800f514 <_strtod_l+0x5e8>)
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	a81d      	add	r0, sp, #116	@ 0x74
 800f2c8:	931d      	str	r3, [sp, #116]	@ 0x74
 800f2ca:	f002 fbf3 	bl	8011ab4 <__match>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d102      	bne.n	800f2d8 <_strtod_l+0x3ac>
 800f2d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	931d      	str	r3, [sp, #116]	@ 0x74
 800f2d8:	2600      	movs	r6, #0
 800f2da:	4f8c      	ldr	r7, [pc, #560]	@ (800f50c <_strtod_l+0x5e0>)
 800f2dc:	e661      	b.n	800efa2 <_strtod_l+0x76>
 800f2de:	488e      	ldr	r0, [pc, #568]	@ (800f518 <_strtod_l+0x5ec>)
 800f2e0:	f001 fa84 	bl	80107ec <nan>
 800f2e4:	0006      	movs	r6, r0
 800f2e6:	000f      	movs	r7, r1
 800f2e8:	e65b      	b.n	800efa2 <_strtod_l+0x76>
 800f2ea:	9b07      	ldr	r3, [sp, #28]
 800f2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2ee:	1a9b      	subs	r3, r3, r2
 800f2f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2f2:	9b08      	ldr	r3, [sp, #32]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d101      	bne.n	800f2fc <_strtod_l+0x3d0>
 800f2f8:	9b06      	ldr	r3, [sp, #24]
 800f2fa:	9308      	str	r3, [sp, #32]
 800f2fc:	9c06      	ldr	r4, [sp, #24]
 800f2fe:	2c10      	cmp	r4, #16
 800f300:	dd00      	ble.n	800f304 <_strtod_l+0x3d8>
 800f302:	2410      	movs	r4, #16
 800f304:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f306:	f7f3 f8b5 	bl	8002474 <__aeabi_ui2d>
 800f30a:	9b06      	ldr	r3, [sp, #24]
 800f30c:	0006      	movs	r6, r0
 800f30e:	000f      	movs	r7, r1
 800f310:	2b09      	cmp	r3, #9
 800f312:	dc13      	bgt.n	800f33c <_strtod_l+0x410>
 800f314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f316:	2b00      	cmp	r3, #0
 800f318:	d100      	bne.n	800f31c <_strtod_l+0x3f0>
 800f31a:	e642      	b.n	800efa2 <_strtod_l+0x76>
 800f31c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f31e:	2b00      	cmp	r3, #0
 800f320:	dc00      	bgt.n	800f324 <_strtod_l+0x3f8>
 800f322:	e07e      	b.n	800f422 <_strtod_l+0x4f6>
 800f324:	2b16      	cmp	r3, #22
 800f326:	dc63      	bgt.n	800f3f0 <_strtod_l+0x4c4>
 800f328:	497c      	ldr	r1, [pc, #496]	@ (800f51c <_strtod_l+0x5f0>)
 800f32a:	00db      	lsls	r3, r3, #3
 800f32c:	18c9      	adds	r1, r1, r3
 800f32e:	0032      	movs	r2, r6
 800f330:	6808      	ldr	r0, [r1, #0]
 800f332:	6849      	ldr	r1, [r1, #4]
 800f334:	003b      	movs	r3, r7
 800f336:	f7f2 f921 	bl	800157c <__aeabi_dmul>
 800f33a:	e7d3      	b.n	800f2e4 <_strtod_l+0x3b8>
 800f33c:	0022      	movs	r2, r4
 800f33e:	4b77      	ldr	r3, [pc, #476]	@ (800f51c <_strtod_l+0x5f0>)
 800f340:	3a09      	subs	r2, #9
 800f342:	00d2      	lsls	r2, r2, #3
 800f344:	189b      	adds	r3, r3, r2
 800f346:	681a      	ldr	r2, [r3, #0]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	f7f2 f917 	bl	800157c <__aeabi_dmul>
 800f34e:	0006      	movs	r6, r0
 800f350:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f352:	000f      	movs	r7, r1
 800f354:	f7f3 f88e 	bl	8002474 <__aeabi_ui2d>
 800f358:	000b      	movs	r3, r1
 800f35a:	0002      	movs	r2, r0
 800f35c:	0039      	movs	r1, r7
 800f35e:	0030      	movs	r0, r6
 800f360:	f7f1 f90c 	bl	800057c <__aeabi_dadd>
 800f364:	9b06      	ldr	r3, [sp, #24]
 800f366:	0006      	movs	r6, r0
 800f368:	000f      	movs	r7, r1
 800f36a:	2b0f      	cmp	r3, #15
 800f36c:	ddd2      	ble.n	800f314 <_strtod_l+0x3e8>
 800f36e:	9b06      	ldr	r3, [sp, #24]
 800f370:	1b1c      	subs	r4, r3, r4
 800f372:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f374:	18e4      	adds	r4, r4, r3
 800f376:	2c00      	cmp	r4, #0
 800f378:	dc00      	bgt.n	800f37c <_strtod_l+0x450>
 800f37a:	e09b      	b.n	800f4b4 <_strtod_l+0x588>
 800f37c:	220f      	movs	r2, #15
 800f37e:	0023      	movs	r3, r4
 800f380:	4013      	ands	r3, r2
 800f382:	4214      	tst	r4, r2
 800f384:	d00a      	beq.n	800f39c <_strtod_l+0x470>
 800f386:	4965      	ldr	r1, [pc, #404]	@ (800f51c <_strtod_l+0x5f0>)
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	18c9      	adds	r1, r1, r3
 800f38c:	0032      	movs	r2, r6
 800f38e:	6808      	ldr	r0, [r1, #0]
 800f390:	6849      	ldr	r1, [r1, #4]
 800f392:	003b      	movs	r3, r7
 800f394:	f7f2 f8f2 	bl	800157c <__aeabi_dmul>
 800f398:	0006      	movs	r6, r0
 800f39a:	000f      	movs	r7, r1
 800f39c:	230f      	movs	r3, #15
 800f39e:	439c      	bics	r4, r3
 800f3a0:	d073      	beq.n	800f48a <_strtod_l+0x55e>
 800f3a2:	3326      	adds	r3, #38	@ 0x26
 800f3a4:	33ff      	adds	r3, #255	@ 0xff
 800f3a6:	429c      	cmp	r4, r3
 800f3a8:	dd4b      	ble.n	800f442 <_strtod_l+0x516>
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9306      	str	r3, [sp, #24]
 800f3ae:	9307      	str	r3, [sp, #28]
 800f3b0:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3b2:	9308      	str	r3, [sp, #32]
 800f3b4:	2322      	movs	r3, #34	@ 0x22
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	9a05      	ldr	r2, [sp, #20]
 800f3ba:	4f54      	ldr	r7, [pc, #336]	@ (800f50c <_strtod_l+0x5e0>)
 800f3bc:	6013      	str	r3, [r2, #0]
 800f3be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f3c0:	42b3      	cmp	r3, r6
 800f3c2:	d100      	bne.n	800f3c6 <_strtod_l+0x49a>
 800f3c4:	e5ed      	b.n	800efa2 <_strtod_l+0x76>
 800f3c6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f3c8:	9805      	ldr	r0, [sp, #20]
 800f3ca:	f002 fd41 	bl	8011e50 <_Bfree>
 800f3ce:	9908      	ldr	r1, [sp, #32]
 800f3d0:	9805      	ldr	r0, [sp, #20]
 800f3d2:	f002 fd3d 	bl	8011e50 <_Bfree>
 800f3d6:	9907      	ldr	r1, [sp, #28]
 800f3d8:	9805      	ldr	r0, [sp, #20]
 800f3da:	f002 fd39 	bl	8011e50 <_Bfree>
 800f3de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f3e0:	9805      	ldr	r0, [sp, #20]
 800f3e2:	f002 fd35 	bl	8011e50 <_Bfree>
 800f3e6:	9906      	ldr	r1, [sp, #24]
 800f3e8:	9805      	ldr	r0, [sp, #20]
 800f3ea:	f002 fd31 	bl	8011e50 <_Bfree>
 800f3ee:	e5d8      	b.n	800efa2 <_strtod_l+0x76>
 800f3f0:	2325      	movs	r3, #37	@ 0x25
 800f3f2:	9a06      	ldr	r2, [sp, #24]
 800f3f4:	1a9b      	subs	r3, r3, r2
 800f3f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	dbb8      	blt.n	800f36e <_strtod_l+0x442>
 800f3fc:	240f      	movs	r4, #15
 800f3fe:	9b06      	ldr	r3, [sp, #24]
 800f400:	4d46      	ldr	r5, [pc, #280]	@ (800f51c <_strtod_l+0x5f0>)
 800f402:	1ae4      	subs	r4, r4, r3
 800f404:	00e1      	lsls	r1, r4, #3
 800f406:	1869      	adds	r1, r5, r1
 800f408:	0032      	movs	r2, r6
 800f40a:	6808      	ldr	r0, [r1, #0]
 800f40c:	6849      	ldr	r1, [r1, #4]
 800f40e:	003b      	movs	r3, r7
 800f410:	f7f2 f8b4 	bl	800157c <__aeabi_dmul>
 800f414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f416:	1b1c      	subs	r4, r3, r4
 800f418:	00e4      	lsls	r4, r4, #3
 800f41a:	192d      	adds	r5, r5, r4
 800f41c:	682a      	ldr	r2, [r5, #0]
 800f41e:	686b      	ldr	r3, [r5, #4]
 800f420:	e789      	b.n	800f336 <_strtod_l+0x40a>
 800f422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f424:	3316      	adds	r3, #22
 800f426:	dba2      	blt.n	800f36e <_strtod_l+0x442>
 800f428:	9907      	ldr	r1, [sp, #28]
 800f42a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f42c:	4b3b      	ldr	r3, [pc, #236]	@ (800f51c <_strtod_l+0x5f0>)
 800f42e:	1a52      	subs	r2, r2, r1
 800f430:	00d2      	lsls	r2, r2, #3
 800f432:	189b      	adds	r3, r3, r2
 800f434:	0030      	movs	r0, r6
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	0039      	movs	r1, r7
 800f43c:	f7f1 fc64 	bl	8000d08 <__aeabi_ddiv>
 800f440:	e750      	b.n	800f2e4 <_strtod_l+0x3b8>
 800f442:	2300      	movs	r3, #0
 800f444:	0030      	movs	r0, r6
 800f446:	0039      	movs	r1, r7
 800f448:	4d35      	ldr	r5, [pc, #212]	@ (800f520 <_strtod_l+0x5f4>)
 800f44a:	1124      	asrs	r4, r4, #4
 800f44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f44e:	2c01      	cmp	r4, #1
 800f450:	dc1e      	bgt.n	800f490 <_strtod_l+0x564>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d001      	beq.n	800f45a <_strtod_l+0x52e>
 800f456:	0006      	movs	r6, r0
 800f458:	000f      	movs	r7, r1
 800f45a:	4b32      	ldr	r3, [pc, #200]	@ (800f524 <_strtod_l+0x5f8>)
 800f45c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f45e:	18ff      	adds	r7, r7, r3
 800f460:	4b2f      	ldr	r3, [pc, #188]	@ (800f520 <_strtod_l+0x5f4>)
 800f462:	00d5      	lsls	r5, r2, #3
 800f464:	195d      	adds	r5, r3, r5
 800f466:	0032      	movs	r2, r6
 800f468:	6828      	ldr	r0, [r5, #0]
 800f46a:	6869      	ldr	r1, [r5, #4]
 800f46c:	003b      	movs	r3, r7
 800f46e:	f7f2 f885 	bl	800157c <__aeabi_dmul>
 800f472:	4b26      	ldr	r3, [pc, #152]	@ (800f50c <_strtod_l+0x5e0>)
 800f474:	4a2c      	ldr	r2, [pc, #176]	@ (800f528 <_strtod_l+0x5fc>)
 800f476:	0006      	movs	r6, r0
 800f478:	400b      	ands	r3, r1
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d895      	bhi.n	800f3aa <_strtod_l+0x47e>
 800f47e:	4a2b      	ldr	r2, [pc, #172]	@ (800f52c <_strtod_l+0x600>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d913      	bls.n	800f4ac <_strtod_l+0x580>
 800f484:	2601      	movs	r6, #1
 800f486:	4f2a      	ldr	r7, [pc, #168]	@ (800f530 <_strtod_l+0x604>)
 800f488:	4276      	negs	r6, r6
 800f48a:	2300      	movs	r3, #0
 800f48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f48e:	e086      	b.n	800f59e <_strtod_l+0x672>
 800f490:	2201      	movs	r2, #1
 800f492:	4214      	tst	r4, r2
 800f494:	d004      	beq.n	800f4a0 <_strtod_l+0x574>
 800f496:	682a      	ldr	r2, [r5, #0]
 800f498:	686b      	ldr	r3, [r5, #4]
 800f49a:	f7f2 f86f 	bl	800157c <__aeabi_dmul>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a2:	1064      	asrs	r4, r4, #1
 800f4a4:	3201      	adds	r2, #1
 800f4a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4a8:	3508      	adds	r5, #8
 800f4aa:	e7d0      	b.n	800f44e <_strtod_l+0x522>
 800f4ac:	23d4      	movs	r3, #212	@ 0xd4
 800f4ae:	049b      	lsls	r3, r3, #18
 800f4b0:	18cf      	adds	r7, r1, r3
 800f4b2:	e7ea      	b.n	800f48a <_strtod_l+0x55e>
 800f4b4:	2c00      	cmp	r4, #0
 800f4b6:	d0e8      	beq.n	800f48a <_strtod_l+0x55e>
 800f4b8:	4264      	negs	r4, r4
 800f4ba:	230f      	movs	r3, #15
 800f4bc:	0022      	movs	r2, r4
 800f4be:	401a      	ands	r2, r3
 800f4c0:	421c      	tst	r4, r3
 800f4c2:	d00a      	beq.n	800f4da <_strtod_l+0x5ae>
 800f4c4:	4b15      	ldr	r3, [pc, #84]	@ (800f51c <_strtod_l+0x5f0>)
 800f4c6:	00d2      	lsls	r2, r2, #3
 800f4c8:	189b      	adds	r3, r3, r2
 800f4ca:	0030      	movs	r0, r6
 800f4cc:	681a      	ldr	r2, [r3, #0]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	0039      	movs	r1, r7
 800f4d2:	f7f1 fc19 	bl	8000d08 <__aeabi_ddiv>
 800f4d6:	0006      	movs	r6, r0
 800f4d8:	000f      	movs	r7, r1
 800f4da:	1124      	asrs	r4, r4, #4
 800f4dc:	d0d5      	beq.n	800f48a <_strtod_l+0x55e>
 800f4de:	2c1f      	cmp	r4, #31
 800f4e0:	dd28      	ble.n	800f534 <_strtod_l+0x608>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	9306      	str	r3, [sp, #24]
 800f4e6:	9307      	str	r3, [sp, #28]
 800f4e8:	930d      	str	r3, [sp, #52]	@ 0x34
 800f4ea:	9308      	str	r3, [sp, #32]
 800f4ec:	2322      	movs	r3, #34	@ 0x22
 800f4ee:	9a05      	ldr	r2, [sp, #20]
 800f4f0:	2600      	movs	r6, #0
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4f6:	2700      	movs	r7, #0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d000      	beq.n	800f4fe <_strtod_l+0x5d2>
 800f4fc:	e763      	b.n	800f3c6 <_strtod_l+0x49a>
 800f4fe:	e550      	b.n	800efa2 <_strtod_l+0x76>
 800f500:	00004e1f 	.word	0x00004e1f
 800f504:	0801351b 	.word	0x0801351b
 800f508:	080136e0 	.word	0x080136e0
 800f50c:	7ff00000 	.word	0x7ff00000
 800f510:	08013513 	.word	0x08013513
 800f514:	0801354d 	.word	0x0801354d
 800f518:	080136dc 	.word	0x080136dc
 800f51c:	08013768 	.word	0x08013768
 800f520:	08013740 	.word	0x08013740
 800f524:	fcb00000 	.word	0xfcb00000
 800f528:	7ca00000 	.word	0x7ca00000
 800f52c:	7c900000 	.word	0x7c900000
 800f530:	7fefffff 	.word	0x7fefffff
 800f534:	2310      	movs	r3, #16
 800f536:	0022      	movs	r2, r4
 800f538:	401a      	ands	r2, r3
 800f53a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f53c:	421c      	tst	r4, r3
 800f53e:	d001      	beq.n	800f544 <_strtod_l+0x618>
 800f540:	335a      	adds	r3, #90	@ 0x5a
 800f542:	9309      	str	r3, [sp, #36]	@ 0x24
 800f544:	0030      	movs	r0, r6
 800f546:	0039      	movs	r1, r7
 800f548:	2300      	movs	r3, #0
 800f54a:	4dc0      	ldr	r5, [pc, #768]	@ (800f84c <_strtod_l+0x920>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	4214      	tst	r4, r2
 800f550:	d004      	beq.n	800f55c <_strtod_l+0x630>
 800f552:	682a      	ldr	r2, [r5, #0]
 800f554:	686b      	ldr	r3, [r5, #4]
 800f556:	f7f2 f811 	bl	800157c <__aeabi_dmul>
 800f55a:	2301      	movs	r3, #1
 800f55c:	1064      	asrs	r4, r4, #1
 800f55e:	3508      	adds	r5, #8
 800f560:	2c00      	cmp	r4, #0
 800f562:	d1f3      	bne.n	800f54c <_strtod_l+0x620>
 800f564:	2b00      	cmp	r3, #0
 800f566:	d001      	beq.n	800f56c <_strtod_l+0x640>
 800f568:	0006      	movs	r6, r0
 800f56a:	000f      	movs	r7, r1
 800f56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d00d      	beq.n	800f58e <_strtod_l+0x662>
 800f572:	236b      	movs	r3, #107	@ 0x6b
 800f574:	007a      	lsls	r2, r7, #1
 800f576:	0d52      	lsrs	r2, r2, #21
 800f578:	0039      	movs	r1, r7
 800f57a:	1a9b      	subs	r3, r3, r2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dd06      	ble.n	800f58e <_strtod_l+0x662>
 800f580:	2b1f      	cmp	r3, #31
 800f582:	dd5c      	ble.n	800f63e <_strtod_l+0x712>
 800f584:	2600      	movs	r6, #0
 800f586:	2b34      	cmp	r3, #52	@ 0x34
 800f588:	dd52      	ble.n	800f630 <_strtod_l+0x704>
 800f58a:	27dc      	movs	r7, #220	@ 0xdc
 800f58c:	04bf      	lsls	r7, r7, #18
 800f58e:	2200      	movs	r2, #0
 800f590:	2300      	movs	r3, #0
 800f592:	0030      	movs	r0, r6
 800f594:	0039      	movs	r1, r7
 800f596:	f7f0 ff55 	bl	8000444 <__aeabi_dcmpeq>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d1a1      	bne.n	800f4e2 <_strtod_l+0x5b6>
 800f59e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5a0:	9a08      	ldr	r2, [sp, #32]
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f5a6:	9b06      	ldr	r3, [sp, #24]
 800f5a8:	9805      	ldr	r0, [sp, #20]
 800f5aa:	f002 fcb9 	bl	8011f20 <__s2b>
 800f5ae:	900d      	str	r0, [sp, #52]	@ 0x34
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d100      	bne.n	800f5b6 <_strtod_l+0x68a>
 800f5b4:	e6f9      	b.n	800f3aa <_strtod_l+0x47e>
 800f5b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5b8:	9907      	ldr	r1, [sp, #28]
 800f5ba:	43db      	mvns	r3, r3
 800f5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5be:	17db      	asrs	r3, r3, #31
 800f5c0:	1a52      	subs	r2, r2, r1
 800f5c2:	9214      	str	r2, [sp, #80]	@ 0x50
 800f5c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f5c6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800f5c8:	17d2      	asrs	r2, r2, #31
 800f5ca:	4011      	ands	r1, r2
 800f5cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f5ce:	9114      	str	r1, [sp, #80]	@ 0x50
 800f5d0:	401a      	ands	r2, r3
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f5d6:	9306      	str	r3, [sp, #24]
 800f5d8:	9307      	str	r3, [sp, #28]
 800f5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5dc:	9805      	ldr	r0, [sp, #20]
 800f5de:	6859      	ldr	r1, [r3, #4]
 800f5e0:	f002 fbf2 	bl	8011dc8 <_Balloc>
 800f5e4:	9008      	str	r0, [sp, #32]
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	d100      	bne.n	800f5ec <_strtod_l+0x6c0>
 800f5ea:	e6e3      	b.n	800f3b4 <_strtod_l+0x488>
 800f5ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f5ee:	300c      	adds	r0, #12
 800f5f0:	0019      	movs	r1, r3
 800f5f2:	691a      	ldr	r2, [r3, #16]
 800f5f4:	310c      	adds	r1, #12
 800f5f6:	3202      	adds	r2, #2
 800f5f8:	0092      	lsls	r2, r2, #2
 800f5fa:	f001 f8ed 	bl	80107d8 <memcpy>
 800f5fe:	ab20      	add	r3, sp, #128	@ 0x80
 800f600:	9301      	str	r3, [sp, #4]
 800f602:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	0032      	movs	r2, r6
 800f608:	003b      	movs	r3, r7
 800f60a:	9805      	ldr	r0, [sp, #20]
 800f60c:	9610      	str	r6, [sp, #64]	@ 0x40
 800f60e:	9711      	str	r7, [sp, #68]	@ 0x44
 800f610:	f002 ffce 	bl	80125b0 <__d2b>
 800f614:	901e      	str	r0, [sp, #120]	@ 0x78
 800f616:	2800      	cmp	r0, #0
 800f618:	d100      	bne.n	800f61c <_strtod_l+0x6f0>
 800f61a:	e6cb      	b.n	800f3b4 <_strtod_l+0x488>
 800f61c:	2101      	movs	r1, #1
 800f61e:	9805      	ldr	r0, [sp, #20]
 800f620:	f002 fd1a 	bl	8012058 <__i2b>
 800f624:	9007      	str	r0, [sp, #28]
 800f626:	2800      	cmp	r0, #0
 800f628:	d10e      	bne.n	800f648 <_strtod_l+0x71c>
 800f62a:	2300      	movs	r3, #0
 800f62c:	9307      	str	r3, [sp, #28]
 800f62e:	e6c1      	b.n	800f3b4 <_strtod_l+0x488>
 800f630:	234b      	movs	r3, #75	@ 0x4b
 800f632:	1a9a      	subs	r2, r3, r2
 800f634:	3b4c      	subs	r3, #76	@ 0x4c
 800f636:	4093      	lsls	r3, r2
 800f638:	4019      	ands	r1, r3
 800f63a:	000f      	movs	r7, r1
 800f63c:	e7a7      	b.n	800f58e <_strtod_l+0x662>
 800f63e:	2201      	movs	r2, #1
 800f640:	4252      	negs	r2, r2
 800f642:	409a      	lsls	r2, r3
 800f644:	4016      	ands	r6, r2
 800f646:	e7a2      	b.n	800f58e <_strtod_l+0x662>
 800f648:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f64a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f64c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f64e:	1ad4      	subs	r4, r2, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	db01      	blt.n	800f658 <_strtod_l+0x72c>
 800f654:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800f656:	195d      	adds	r5, r3, r5
 800f658:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f65a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f65c:	1a5b      	subs	r3, r3, r1
 800f65e:	2136      	movs	r1, #54	@ 0x36
 800f660:	189b      	adds	r3, r3, r2
 800f662:	1a8a      	subs	r2, r1, r2
 800f664:	497a      	ldr	r1, [pc, #488]	@ (800f850 <_strtod_l+0x924>)
 800f666:	2001      	movs	r0, #1
 800f668:	468c      	mov	ip, r1
 800f66a:	2100      	movs	r1, #0
 800f66c:	3b01      	subs	r3, #1
 800f66e:	9115      	str	r1, [sp, #84]	@ 0x54
 800f670:	9016      	str	r0, [sp, #88]	@ 0x58
 800f672:	4563      	cmp	r3, ip
 800f674:	da06      	bge.n	800f684 <_strtod_l+0x758>
 800f676:	4661      	mov	r1, ip
 800f678:	1ac9      	subs	r1, r1, r3
 800f67a:	1a52      	subs	r2, r2, r1
 800f67c:	291f      	cmp	r1, #31
 800f67e:	dc3f      	bgt.n	800f700 <_strtod_l+0x7d4>
 800f680:	4088      	lsls	r0, r1
 800f682:	9016      	str	r0, [sp, #88]	@ 0x58
 800f684:	18ab      	adds	r3, r5, r2
 800f686:	930e      	str	r3, [sp, #56]	@ 0x38
 800f688:	18a4      	adds	r4, r4, r2
 800f68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f68e:	191c      	adds	r4, r3, r4
 800f690:	002b      	movs	r3, r5
 800f692:	4295      	cmp	r5, r2
 800f694:	dd00      	ble.n	800f698 <_strtod_l+0x76c>
 800f696:	0013      	movs	r3, r2
 800f698:	42a3      	cmp	r3, r4
 800f69a:	dd00      	ble.n	800f69e <_strtod_l+0x772>
 800f69c:	0023      	movs	r3, r4
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	dd04      	ble.n	800f6ac <_strtod_l+0x780>
 800f6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6a4:	1ae4      	subs	r4, r4, r3
 800f6a6:	1ad2      	subs	r2, r2, r3
 800f6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6aa:	1aed      	subs	r5, r5, r3
 800f6ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	dd16      	ble.n	800f6e0 <_strtod_l+0x7b4>
 800f6b2:	001a      	movs	r2, r3
 800f6b4:	9907      	ldr	r1, [sp, #28]
 800f6b6:	9805      	ldr	r0, [sp, #20]
 800f6b8:	f002 fd90 	bl	80121dc <__pow5mult>
 800f6bc:	9007      	str	r0, [sp, #28]
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d0b3      	beq.n	800f62a <_strtod_l+0x6fe>
 800f6c2:	0001      	movs	r1, r0
 800f6c4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f6c6:	9805      	ldr	r0, [sp, #20]
 800f6c8:	f002 fcde 	bl	8012088 <__multiply>
 800f6cc:	9013      	str	r0, [sp, #76]	@ 0x4c
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d100      	bne.n	800f6d4 <_strtod_l+0x7a8>
 800f6d2:	e66f      	b.n	800f3b4 <_strtod_l+0x488>
 800f6d4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f6d6:	9805      	ldr	r0, [sp, #20]
 800f6d8:	f002 fbba 	bl	8011e50 <_Bfree>
 800f6dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6de:	931e      	str	r3, [sp, #120]	@ 0x78
 800f6e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	dc12      	bgt.n	800f70c <_strtod_l+0x7e0>
 800f6e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	dd18      	ble.n	800f71e <_strtod_l+0x7f2>
 800f6ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f6ee:	9908      	ldr	r1, [sp, #32]
 800f6f0:	9805      	ldr	r0, [sp, #20]
 800f6f2:	f002 fd73 	bl	80121dc <__pow5mult>
 800f6f6:	9008      	str	r0, [sp, #32]
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d110      	bne.n	800f71e <_strtod_l+0x7f2>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e658      	b.n	800f3b2 <_strtod_l+0x486>
 800f700:	4954      	ldr	r1, [pc, #336]	@ (800f854 <_strtod_l+0x928>)
 800f702:	1acb      	subs	r3, r1, r3
 800f704:	0001      	movs	r1, r0
 800f706:	4099      	lsls	r1, r3
 800f708:	9115      	str	r1, [sp, #84]	@ 0x54
 800f70a:	e7ba      	b.n	800f682 <_strtod_l+0x756>
 800f70c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f70e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f710:	9805      	ldr	r0, [sp, #20]
 800f712:	f002 fdbf 	bl	8012294 <__lshift>
 800f716:	901e      	str	r0, [sp, #120]	@ 0x78
 800f718:	2800      	cmp	r0, #0
 800f71a:	d1e4      	bne.n	800f6e6 <_strtod_l+0x7ba>
 800f71c:	e64a      	b.n	800f3b4 <_strtod_l+0x488>
 800f71e:	2c00      	cmp	r4, #0
 800f720:	dd07      	ble.n	800f732 <_strtod_l+0x806>
 800f722:	0022      	movs	r2, r4
 800f724:	9908      	ldr	r1, [sp, #32]
 800f726:	9805      	ldr	r0, [sp, #20]
 800f728:	f002 fdb4 	bl	8012294 <__lshift>
 800f72c:	9008      	str	r0, [sp, #32]
 800f72e:	2800      	cmp	r0, #0
 800f730:	d0e4      	beq.n	800f6fc <_strtod_l+0x7d0>
 800f732:	2d00      	cmp	r5, #0
 800f734:	dd08      	ble.n	800f748 <_strtod_l+0x81c>
 800f736:	002a      	movs	r2, r5
 800f738:	9907      	ldr	r1, [sp, #28]
 800f73a:	9805      	ldr	r0, [sp, #20]
 800f73c:	f002 fdaa 	bl	8012294 <__lshift>
 800f740:	9007      	str	r0, [sp, #28]
 800f742:	2800      	cmp	r0, #0
 800f744:	d100      	bne.n	800f748 <_strtod_l+0x81c>
 800f746:	e635      	b.n	800f3b4 <_strtod_l+0x488>
 800f748:	9a08      	ldr	r2, [sp, #32]
 800f74a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f74c:	9805      	ldr	r0, [sp, #20]
 800f74e:	f002 fe29 	bl	80123a4 <__mdiff>
 800f752:	9006      	str	r0, [sp, #24]
 800f754:	2800      	cmp	r0, #0
 800f756:	d100      	bne.n	800f75a <_strtod_l+0x82e>
 800f758:	e62c      	b.n	800f3b4 <_strtod_l+0x488>
 800f75a:	68c3      	ldr	r3, [r0, #12]
 800f75c:	9907      	ldr	r1, [sp, #28]
 800f75e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f760:	2300      	movs	r3, #0
 800f762:	60c3      	str	r3, [r0, #12]
 800f764:	f002 fe02 	bl	801236c <__mcmp>
 800f768:	2800      	cmp	r0, #0
 800f76a:	da3b      	bge.n	800f7e4 <_strtod_l+0x8b8>
 800f76c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f76e:	4333      	orrs	r3, r6
 800f770:	d167      	bne.n	800f842 <_strtod_l+0x916>
 800f772:	033b      	lsls	r3, r7, #12
 800f774:	d165      	bne.n	800f842 <_strtod_l+0x916>
 800f776:	22d6      	movs	r2, #214	@ 0xd6
 800f778:	4b37      	ldr	r3, [pc, #220]	@ (800f858 <_strtod_l+0x92c>)
 800f77a:	04d2      	lsls	r2, r2, #19
 800f77c:	403b      	ands	r3, r7
 800f77e:	4293      	cmp	r3, r2
 800f780:	d95f      	bls.n	800f842 <_strtod_l+0x916>
 800f782:	9b06      	ldr	r3, [sp, #24]
 800f784:	695b      	ldr	r3, [r3, #20]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d103      	bne.n	800f792 <_strtod_l+0x866>
 800f78a:	9b06      	ldr	r3, [sp, #24]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	dd57      	ble.n	800f842 <_strtod_l+0x916>
 800f792:	9906      	ldr	r1, [sp, #24]
 800f794:	2201      	movs	r2, #1
 800f796:	9805      	ldr	r0, [sp, #20]
 800f798:	f002 fd7c 	bl	8012294 <__lshift>
 800f79c:	9907      	ldr	r1, [sp, #28]
 800f79e:	9006      	str	r0, [sp, #24]
 800f7a0:	f002 fde4 	bl	801236c <__mcmp>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	dd4c      	ble.n	800f842 <_strtod_l+0x916>
 800f7a8:	4b2b      	ldr	r3, [pc, #172]	@ (800f858 <_strtod_l+0x92c>)
 800f7aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7ac:	403b      	ands	r3, r7
 800f7ae:	2a00      	cmp	r2, #0
 800f7b0:	d074      	beq.n	800f89c <_strtod_l+0x970>
 800f7b2:	22d6      	movs	r2, #214	@ 0xd6
 800f7b4:	04d2      	lsls	r2, r2, #19
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d870      	bhi.n	800f89c <_strtod_l+0x970>
 800f7ba:	22dc      	movs	r2, #220	@ 0xdc
 800f7bc:	0492      	lsls	r2, r2, #18
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d800      	bhi.n	800f7c4 <_strtod_l+0x898>
 800f7c2:	e693      	b.n	800f4ec <_strtod_l+0x5c0>
 800f7c4:	0030      	movs	r0, r6
 800f7c6:	0039      	movs	r1, r7
 800f7c8:	4b24      	ldr	r3, [pc, #144]	@ (800f85c <_strtod_l+0x930>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f7f1 fed6 	bl	800157c <__aeabi_dmul>
 800f7d0:	4b21      	ldr	r3, [pc, #132]	@ (800f858 <_strtod_l+0x92c>)
 800f7d2:	0006      	movs	r6, r0
 800f7d4:	000f      	movs	r7, r1
 800f7d6:	420b      	tst	r3, r1
 800f7d8:	d000      	beq.n	800f7dc <_strtod_l+0x8b0>
 800f7da:	e5f4      	b.n	800f3c6 <_strtod_l+0x49a>
 800f7dc:	2322      	movs	r3, #34	@ 0x22
 800f7de:	9a05      	ldr	r2, [sp, #20]
 800f7e0:	6013      	str	r3, [r2, #0]
 800f7e2:	e5f0      	b.n	800f3c6 <_strtod_l+0x49a>
 800f7e4:	970e      	str	r7, [sp, #56]	@ 0x38
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d175      	bne.n	800f8d6 <_strtod_l+0x9aa>
 800f7ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f7ec:	033b      	lsls	r3, r7, #12
 800f7ee:	0b1b      	lsrs	r3, r3, #12
 800f7f0:	2a00      	cmp	r2, #0
 800f7f2:	d039      	beq.n	800f868 <_strtod_l+0x93c>
 800f7f4:	4a1a      	ldr	r2, [pc, #104]	@ (800f860 <_strtod_l+0x934>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d138      	bne.n	800f86c <_strtod_l+0x940>
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fe:	4249      	negs	r1, r1
 800f800:	0032      	movs	r2, r6
 800f802:	0008      	movs	r0, r1
 800f804:	2b00      	cmp	r3, #0
 800f806:	d00b      	beq.n	800f820 <_strtod_l+0x8f4>
 800f808:	24d4      	movs	r4, #212	@ 0xd4
 800f80a:	4b13      	ldr	r3, [pc, #76]	@ (800f858 <_strtod_l+0x92c>)
 800f80c:	0008      	movs	r0, r1
 800f80e:	403b      	ands	r3, r7
 800f810:	04e4      	lsls	r4, r4, #19
 800f812:	42a3      	cmp	r3, r4
 800f814:	d804      	bhi.n	800f820 <_strtod_l+0x8f4>
 800f816:	306c      	adds	r0, #108	@ 0x6c
 800f818:	0d1b      	lsrs	r3, r3, #20
 800f81a:	1ac3      	subs	r3, r0, r3
 800f81c:	4099      	lsls	r1, r3
 800f81e:	0008      	movs	r0, r1
 800f820:	4282      	cmp	r2, r0
 800f822:	d123      	bne.n	800f86c <_strtod_l+0x940>
 800f824:	4b0f      	ldr	r3, [pc, #60]	@ (800f864 <_strtod_l+0x938>)
 800f826:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f828:	4299      	cmp	r1, r3
 800f82a:	d102      	bne.n	800f832 <_strtod_l+0x906>
 800f82c:	3201      	adds	r2, #1
 800f82e:	d100      	bne.n	800f832 <_strtod_l+0x906>
 800f830:	e5c0      	b.n	800f3b4 <_strtod_l+0x488>
 800f832:	4b09      	ldr	r3, [pc, #36]	@ (800f858 <_strtod_l+0x92c>)
 800f834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f836:	2600      	movs	r6, #0
 800f838:	401a      	ands	r2, r3
 800f83a:	0013      	movs	r3, r2
 800f83c:	2280      	movs	r2, #128	@ 0x80
 800f83e:	0352      	lsls	r2, r2, #13
 800f840:	189f      	adds	r7, r3, r2
 800f842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1bd      	bne.n	800f7c4 <_strtod_l+0x898>
 800f848:	e5bd      	b.n	800f3c6 <_strtod_l+0x49a>
 800f84a:	46c0      	nop			@ (mov r8, r8)
 800f84c:	08013708 	.word	0x08013708
 800f850:	fffffc02 	.word	0xfffffc02
 800f854:	fffffbe2 	.word	0xfffffbe2
 800f858:	7ff00000 	.word	0x7ff00000
 800f85c:	39500000 	.word	0x39500000
 800f860:	000fffff 	.word	0x000fffff
 800f864:	7fefffff 	.word	0x7fefffff
 800f868:	4333      	orrs	r3, r6
 800f86a:	d09d      	beq.n	800f7a8 <_strtod_l+0x87c>
 800f86c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d01c      	beq.n	800f8ac <_strtod_l+0x980>
 800f872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f874:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f876:	4213      	tst	r3, r2
 800f878:	d0e3      	beq.n	800f842 <_strtod_l+0x916>
 800f87a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f87c:	0030      	movs	r0, r6
 800f87e:	0039      	movs	r1, r7
 800f880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f882:	2b00      	cmp	r3, #0
 800f884:	d016      	beq.n	800f8b4 <_strtod_l+0x988>
 800f886:	f7ff fb39 	bl	800eefc <sulp>
 800f88a:	0002      	movs	r2, r0
 800f88c:	000b      	movs	r3, r1
 800f88e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f890:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f892:	f7f0 fe73 	bl	800057c <__aeabi_dadd>
 800f896:	0006      	movs	r6, r0
 800f898:	000f      	movs	r7, r1
 800f89a:	e7d2      	b.n	800f842 <_strtod_l+0x916>
 800f89c:	2601      	movs	r6, #1
 800f89e:	4a92      	ldr	r2, [pc, #584]	@ (800fae8 <_strtod_l+0xbbc>)
 800f8a0:	4276      	negs	r6, r6
 800f8a2:	189b      	adds	r3, r3, r2
 800f8a4:	4a91      	ldr	r2, [pc, #580]	@ (800faec <_strtod_l+0xbc0>)
 800f8a6:	431a      	orrs	r2, r3
 800f8a8:	0017      	movs	r7, r2
 800f8aa:	e7ca      	b.n	800f842 <_strtod_l+0x916>
 800f8ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f8ae:	4233      	tst	r3, r6
 800f8b0:	d0c7      	beq.n	800f842 <_strtod_l+0x916>
 800f8b2:	e7e2      	b.n	800f87a <_strtod_l+0x94e>
 800f8b4:	f7ff fb22 	bl	800eefc <sulp>
 800f8b8:	0002      	movs	r2, r0
 800f8ba:	000b      	movs	r3, r1
 800f8bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f8be:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f8c0:	f7f2 f942 	bl	8001b48 <__aeabi_dsub>
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	0006      	movs	r6, r0
 800f8ca:	000f      	movs	r7, r1
 800f8cc:	f7f0 fdba 	bl	8000444 <__aeabi_dcmpeq>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d0b6      	beq.n	800f842 <_strtod_l+0x916>
 800f8d4:	e60a      	b.n	800f4ec <_strtod_l+0x5c0>
 800f8d6:	9907      	ldr	r1, [sp, #28]
 800f8d8:	9806      	ldr	r0, [sp, #24]
 800f8da:	f002 fec9 	bl	8012670 <__ratio>
 800f8de:	2380      	movs	r3, #128	@ 0x80
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	05db      	lsls	r3, r3, #23
 800f8e4:	0004      	movs	r4, r0
 800f8e6:	000d      	movs	r5, r1
 800f8e8:	f7f0 fdbc 	bl	8000464 <__aeabi_dcmple>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	d06c      	beq.n	800f9ca <_strtod_l+0xa9e>
 800f8f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d177      	bne.n	800f9e6 <_strtod_l+0xaba>
 800f8f6:	2e00      	cmp	r6, #0
 800f8f8:	d157      	bne.n	800f9aa <_strtod_l+0xa7e>
 800f8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8fc:	031b      	lsls	r3, r3, #12
 800f8fe:	d15a      	bne.n	800f9b6 <_strtod_l+0xa8a>
 800f900:	2200      	movs	r2, #0
 800f902:	0020      	movs	r0, r4
 800f904:	0029      	movs	r1, r5
 800f906:	4b7a      	ldr	r3, [pc, #488]	@ (800faf0 <_strtod_l+0xbc4>)
 800f908:	f7f0 fda2 	bl	8000450 <__aeabi_dcmplt>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	d159      	bne.n	800f9c4 <_strtod_l+0xa98>
 800f910:	0020      	movs	r0, r4
 800f912:	0029      	movs	r1, r5
 800f914:	2200      	movs	r2, #0
 800f916:	4b77      	ldr	r3, [pc, #476]	@ (800faf4 <_strtod_l+0xbc8>)
 800f918:	f7f1 fe30 	bl	800157c <__aeabi_dmul>
 800f91c:	0004      	movs	r4, r0
 800f91e:	000d      	movs	r5, r1
 800f920:	2380      	movs	r3, #128	@ 0x80
 800f922:	061b      	lsls	r3, r3, #24
 800f924:	18eb      	adds	r3, r5, r3
 800f926:	940a      	str	r4, [sp, #40]	@ 0x28
 800f928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f92c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f92e:	9216      	str	r2, [sp, #88]	@ 0x58
 800f930:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f932:	4a71      	ldr	r2, [pc, #452]	@ (800faf8 <_strtod_l+0xbcc>)
 800f934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f936:	4013      	ands	r3, r2
 800f938:	9315      	str	r3, [sp, #84]	@ 0x54
 800f93a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f93c:	4b6f      	ldr	r3, [pc, #444]	@ (800fafc <_strtod_l+0xbd0>)
 800f93e:	429a      	cmp	r2, r3
 800f940:	d000      	beq.n	800f944 <_strtod_l+0xa18>
 800f942:	e087      	b.n	800fa54 <_strtod_l+0xb28>
 800f944:	4a6e      	ldr	r2, [pc, #440]	@ (800fb00 <_strtod_l+0xbd4>)
 800f946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f948:	4694      	mov	ip, r2
 800f94a:	4463      	add	r3, ip
 800f94c:	001f      	movs	r7, r3
 800f94e:	0030      	movs	r0, r6
 800f950:	0019      	movs	r1, r3
 800f952:	f002 fdc1 	bl	80124d8 <__ulp>
 800f956:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f95a:	f7f1 fe0f 	bl	800157c <__aeabi_dmul>
 800f95e:	0032      	movs	r2, r6
 800f960:	003b      	movs	r3, r7
 800f962:	f7f0 fe0b 	bl	800057c <__aeabi_dadd>
 800f966:	4a64      	ldr	r2, [pc, #400]	@ (800faf8 <_strtod_l+0xbcc>)
 800f968:	4b66      	ldr	r3, [pc, #408]	@ (800fb04 <_strtod_l+0xbd8>)
 800f96a:	0006      	movs	r6, r0
 800f96c:	400a      	ands	r2, r1
 800f96e:	429a      	cmp	r2, r3
 800f970:	d940      	bls.n	800f9f4 <_strtod_l+0xac8>
 800f972:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f974:	4a64      	ldr	r2, [pc, #400]	@ (800fb08 <_strtod_l+0xbdc>)
 800f976:	4293      	cmp	r3, r2
 800f978:	d103      	bne.n	800f982 <_strtod_l+0xa56>
 800f97a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f97c:	3301      	adds	r3, #1
 800f97e:	d100      	bne.n	800f982 <_strtod_l+0xa56>
 800f980:	e518      	b.n	800f3b4 <_strtod_l+0x488>
 800f982:	2601      	movs	r6, #1
 800f984:	4f60      	ldr	r7, [pc, #384]	@ (800fb08 <_strtod_l+0xbdc>)
 800f986:	4276      	negs	r6, r6
 800f988:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f98a:	9805      	ldr	r0, [sp, #20]
 800f98c:	f002 fa60 	bl	8011e50 <_Bfree>
 800f990:	9908      	ldr	r1, [sp, #32]
 800f992:	9805      	ldr	r0, [sp, #20]
 800f994:	f002 fa5c 	bl	8011e50 <_Bfree>
 800f998:	9907      	ldr	r1, [sp, #28]
 800f99a:	9805      	ldr	r0, [sp, #20]
 800f99c:	f002 fa58 	bl	8011e50 <_Bfree>
 800f9a0:	9906      	ldr	r1, [sp, #24]
 800f9a2:	9805      	ldr	r0, [sp, #20]
 800f9a4:	f002 fa54 	bl	8011e50 <_Bfree>
 800f9a8:	e617      	b.n	800f5da <_strtod_l+0x6ae>
 800f9aa:	2e01      	cmp	r6, #1
 800f9ac:	d103      	bne.n	800f9b6 <_strtod_l+0xa8a>
 800f9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d100      	bne.n	800f9b6 <_strtod_l+0xa8a>
 800f9b4:	e59a      	b.n	800f4ec <_strtod_l+0x5c0>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	4c54      	ldr	r4, [pc, #336]	@ (800fb0c <_strtod_l+0xbe0>)
 800f9ba:	4d4d      	ldr	r5, [pc, #308]	@ (800faf0 <_strtod_l+0xbc4>)
 800f9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f9c0:	2400      	movs	r4, #0
 800f9c2:	e7b2      	b.n	800f92a <_strtod_l+0x9fe>
 800f9c4:	2400      	movs	r4, #0
 800f9c6:	4d4b      	ldr	r5, [pc, #300]	@ (800faf4 <_strtod_l+0xbc8>)
 800f9c8:	e7aa      	b.n	800f920 <_strtod_l+0x9f4>
 800f9ca:	0020      	movs	r0, r4
 800f9cc:	0029      	movs	r1, r5
 800f9ce:	4b49      	ldr	r3, [pc, #292]	@ (800faf4 <_strtod_l+0xbc8>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f7f1 fdd3 	bl	800157c <__aeabi_dmul>
 800f9d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f9d8:	0004      	movs	r4, r0
 800f9da:	000d      	movs	r5, r1
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d09f      	beq.n	800f920 <_strtod_l+0x9f4>
 800f9e0:	940a      	str	r4, [sp, #40]	@ 0x28
 800f9e2:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f9e4:	e7a1      	b.n	800f92a <_strtod_l+0x9fe>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4c41      	ldr	r4, [pc, #260]	@ (800faf0 <_strtod_l+0xbc4>)
 800f9ea:	0025      	movs	r5, r4
 800f9ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f9f0:	001c      	movs	r4, r3
 800f9f2:	e79a      	b.n	800f92a <_strtod_l+0x9fe>
 800f9f4:	23d4      	movs	r3, #212	@ 0xd4
 800f9f6:	049b      	lsls	r3, r3, #18
 800f9f8:	18cf      	adds	r7, r1, r3
 800f9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9fc:	9710      	str	r7, [sp, #64]	@ 0x40
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1c2      	bne.n	800f988 <_strtod_l+0xa5c>
 800fa02:	4b3d      	ldr	r3, [pc, #244]	@ (800faf8 <_strtod_l+0xbcc>)
 800fa04:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fa06:	403b      	ands	r3, r7
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d1bd      	bne.n	800f988 <_strtod_l+0xa5c>
 800fa0c:	0020      	movs	r0, r4
 800fa0e:	0029      	movs	r1, r5
 800fa10:	f7f0 fd64 	bl	80004dc <__aeabi_d2lz>
 800fa14:	f7f0 fd9c 	bl	8000550 <__aeabi_l2d>
 800fa18:	0002      	movs	r2, r0
 800fa1a:	000b      	movs	r3, r1
 800fa1c:	0020      	movs	r0, r4
 800fa1e:	0029      	movs	r1, r5
 800fa20:	f7f2 f892 	bl	8001b48 <__aeabi_dsub>
 800fa24:	033c      	lsls	r4, r7, #12
 800fa26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa28:	0b24      	lsrs	r4, r4, #12
 800fa2a:	4334      	orrs	r4, r6
 800fa2c:	900e      	str	r0, [sp, #56]	@ 0x38
 800fa2e:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fa30:	4a37      	ldr	r2, [pc, #220]	@ (800fb10 <_strtod_l+0xbe4>)
 800fa32:	431c      	orrs	r4, r3
 800fa34:	d052      	beq.n	800fadc <_strtod_l+0xbb0>
 800fa36:	4b37      	ldr	r3, [pc, #220]	@ (800fb14 <_strtod_l+0xbe8>)
 800fa38:	f7f0 fd0a 	bl	8000450 <__aeabi_dcmplt>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d000      	beq.n	800fa42 <_strtod_l+0xb16>
 800fa40:	e4c1      	b.n	800f3c6 <_strtod_l+0x49a>
 800fa42:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800fa44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fa46:	4a34      	ldr	r2, [pc, #208]	@ (800fb18 <_strtod_l+0xbec>)
 800fa48:	4b2a      	ldr	r3, [pc, #168]	@ (800faf4 <_strtod_l+0xbc8>)
 800fa4a:	f7f0 fd15 	bl	8000478 <__aeabi_dcmpgt>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d09a      	beq.n	800f988 <_strtod_l+0xa5c>
 800fa52:	e4b8      	b.n	800f3c6 <_strtod_l+0x49a>
 800fa54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d02a      	beq.n	800fab0 <_strtod_l+0xb84>
 800fa5a:	23d4      	movs	r3, #212	@ 0xd4
 800fa5c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fa5e:	04db      	lsls	r3, r3, #19
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d825      	bhi.n	800fab0 <_strtod_l+0xb84>
 800fa64:	0020      	movs	r0, r4
 800fa66:	0029      	movs	r1, r5
 800fa68:	4a2c      	ldr	r2, [pc, #176]	@ (800fb1c <_strtod_l+0xbf0>)
 800fa6a:	4b2d      	ldr	r3, [pc, #180]	@ (800fb20 <_strtod_l+0xbf4>)
 800fa6c:	f7f0 fcfa 	bl	8000464 <__aeabi_dcmple>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d016      	beq.n	800faa2 <_strtod_l+0xb76>
 800fa74:	0020      	movs	r0, r4
 800fa76:	0029      	movs	r1, r5
 800fa78:	f7f0 fd12 	bl	80004a0 <__aeabi_d2uiz>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d100      	bne.n	800fa82 <_strtod_l+0xb56>
 800fa80:	3001      	adds	r0, #1
 800fa82:	f7f2 fcf7 	bl	8002474 <__aeabi_ui2d>
 800fa86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa88:	0004      	movs	r4, r0
 800fa8a:	000d      	movs	r5, r1
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d122      	bne.n	800fad6 <_strtod_l+0xbaa>
 800fa90:	2380      	movs	r3, #128	@ 0x80
 800fa92:	061b      	lsls	r3, r3, #24
 800fa94:	18cb      	adds	r3, r1, r3
 800fa96:	9018      	str	r0, [sp, #96]	@ 0x60
 800fa98:	9319      	str	r3, [sp, #100]	@ 0x64
 800fa9a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800fa9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa9e:	9216      	str	r2, [sp, #88]	@ 0x58
 800faa0:	9317      	str	r3, [sp, #92]	@ 0x5c
 800faa2:	22d6      	movs	r2, #214	@ 0xd6
 800faa4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800faa6:	04d2      	lsls	r2, r2, #19
 800faa8:	189b      	adds	r3, r3, r2
 800faaa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800faac:	1a9b      	subs	r3, r3, r2
 800faae:	9317      	str	r3, [sp, #92]	@ 0x5c
 800fab0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fab2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fab4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800fab6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800fab8:	f002 fd0e 	bl	80124d8 <__ulp>
 800fabc:	0002      	movs	r2, r0
 800fabe:	000b      	movs	r3, r1
 800fac0:	0030      	movs	r0, r6
 800fac2:	0039      	movs	r1, r7
 800fac4:	f7f1 fd5a 	bl	800157c <__aeabi_dmul>
 800fac8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800faca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800facc:	f7f0 fd56 	bl	800057c <__aeabi_dadd>
 800fad0:	0006      	movs	r6, r0
 800fad2:	000f      	movs	r7, r1
 800fad4:	e791      	b.n	800f9fa <_strtod_l+0xace>
 800fad6:	9418      	str	r4, [sp, #96]	@ 0x60
 800fad8:	9519      	str	r5, [sp, #100]	@ 0x64
 800fada:	e7de      	b.n	800fa9a <_strtod_l+0xb6e>
 800fadc:	4b11      	ldr	r3, [pc, #68]	@ (800fb24 <_strtod_l+0xbf8>)
 800fade:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800fae0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fae2:	f7f0 fcb5 	bl	8000450 <__aeabi_dcmplt>
 800fae6:	e7b2      	b.n	800fa4e <_strtod_l+0xb22>
 800fae8:	fff00000 	.word	0xfff00000
 800faec:	000fffff 	.word	0x000fffff
 800faf0:	3ff00000 	.word	0x3ff00000
 800faf4:	3fe00000 	.word	0x3fe00000
 800faf8:	7ff00000 	.word	0x7ff00000
 800fafc:	7fe00000 	.word	0x7fe00000
 800fb00:	fcb00000 	.word	0xfcb00000
 800fb04:	7c9fffff 	.word	0x7c9fffff
 800fb08:	7fefffff 	.word	0x7fefffff
 800fb0c:	bff00000 	.word	0xbff00000
 800fb10:	94a03595 	.word	0x94a03595
 800fb14:	3fdfffff 	.word	0x3fdfffff
 800fb18:	35afe535 	.word	0x35afe535
 800fb1c:	ffc00000 	.word	0xffc00000
 800fb20:	41dfffff 	.word	0x41dfffff
 800fb24:	3fcfffff 	.word	0x3fcfffff

0800fb28 <strtod>:
 800fb28:	b510      	push	{r4, lr}
 800fb2a:	4c04      	ldr	r4, [pc, #16]	@ (800fb3c <strtod+0x14>)
 800fb2c:	000a      	movs	r2, r1
 800fb2e:	0001      	movs	r1, r0
 800fb30:	4b03      	ldr	r3, [pc, #12]	@ (800fb40 <strtod+0x18>)
 800fb32:	6820      	ldr	r0, [r4, #0]
 800fb34:	f7ff f9fa 	bl	800ef2c <_strtod_l>
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	46c0      	nop			@ (mov r8, r8)
 800fb3c:	20000308 	.word	0x20000308
 800fb40:	2000019c 	.word	0x2000019c

0800fb44 <__cvt>:
 800fb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb46:	001f      	movs	r7, r3
 800fb48:	2300      	movs	r3, #0
 800fb4a:	0016      	movs	r6, r2
 800fb4c:	b08b      	sub	sp, #44	@ 0x2c
 800fb4e:	429f      	cmp	r7, r3
 800fb50:	da04      	bge.n	800fb5c <__cvt+0x18>
 800fb52:	2180      	movs	r1, #128	@ 0x80
 800fb54:	0609      	lsls	r1, r1, #24
 800fb56:	187b      	adds	r3, r7, r1
 800fb58:	001f      	movs	r7, r3
 800fb5a:	232d      	movs	r3, #45	@ 0x2d
 800fb5c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fb5e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800fb60:	7013      	strb	r3, [r2, #0]
 800fb62:	2320      	movs	r3, #32
 800fb64:	2203      	movs	r2, #3
 800fb66:	439d      	bics	r5, r3
 800fb68:	2d46      	cmp	r5, #70	@ 0x46
 800fb6a:	d007      	beq.n	800fb7c <__cvt+0x38>
 800fb6c:	002b      	movs	r3, r5
 800fb6e:	3b45      	subs	r3, #69	@ 0x45
 800fb70:	4259      	negs	r1, r3
 800fb72:	414b      	adcs	r3, r1
 800fb74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800fb76:	3a01      	subs	r2, #1
 800fb78:	18cb      	adds	r3, r1, r3
 800fb7a:	9310      	str	r3, [sp, #64]	@ 0x40
 800fb7c:	ab09      	add	r3, sp, #36	@ 0x24
 800fb7e:	9304      	str	r3, [sp, #16]
 800fb80:	ab08      	add	r3, sp, #32
 800fb82:	9303      	str	r3, [sp, #12]
 800fb84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fb86:	9200      	str	r2, [sp, #0]
 800fb88:	9302      	str	r3, [sp, #8]
 800fb8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb8c:	0032      	movs	r2, r6
 800fb8e:	9301      	str	r3, [sp, #4]
 800fb90:	003b      	movs	r3, r7
 800fb92:	f000 feb7 	bl	8010904 <_dtoa_r>
 800fb96:	0004      	movs	r4, r0
 800fb98:	2d47      	cmp	r5, #71	@ 0x47
 800fb9a:	d11b      	bne.n	800fbd4 <__cvt+0x90>
 800fb9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb9e:	07db      	lsls	r3, r3, #31
 800fba0:	d511      	bpl.n	800fbc6 <__cvt+0x82>
 800fba2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fba4:	18c3      	adds	r3, r0, r3
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2300      	movs	r3, #0
 800fbac:	0030      	movs	r0, r6
 800fbae:	0039      	movs	r1, r7
 800fbb0:	f7f0 fc48 	bl	8000444 <__aeabi_dcmpeq>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d001      	beq.n	800fbbc <__cvt+0x78>
 800fbb8:	9b07      	ldr	r3, [sp, #28]
 800fbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbbc:	2230      	movs	r2, #48	@ 0x30
 800fbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbc0:	9907      	ldr	r1, [sp, #28]
 800fbc2:	428b      	cmp	r3, r1
 800fbc4:	d320      	bcc.n	800fc08 <__cvt+0xc4>
 800fbc6:	0020      	movs	r0, r4
 800fbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fbcc:	1b1b      	subs	r3, r3, r4
 800fbce:	6013      	str	r3, [r2, #0]
 800fbd0:	b00b      	add	sp, #44	@ 0x2c
 800fbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fbd6:	18c3      	adds	r3, r0, r3
 800fbd8:	9307      	str	r3, [sp, #28]
 800fbda:	2d46      	cmp	r5, #70	@ 0x46
 800fbdc:	d1e4      	bne.n	800fba8 <__cvt+0x64>
 800fbde:	7803      	ldrb	r3, [r0, #0]
 800fbe0:	2b30      	cmp	r3, #48	@ 0x30
 800fbe2:	d10c      	bne.n	800fbfe <__cvt+0xba>
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	0030      	movs	r0, r6
 800fbea:	0039      	movs	r1, r7
 800fbec:	f7f0 fc2a 	bl	8000444 <__aeabi_dcmpeq>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d104      	bne.n	800fbfe <__cvt+0xba>
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800fbf8:	1a9b      	subs	r3, r3, r2
 800fbfa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc00:	9a07      	ldr	r2, [sp, #28]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	18d3      	adds	r3, r2, r3
 800fc06:	e7ce      	b.n	800fba6 <__cvt+0x62>
 800fc08:	1c59      	adds	r1, r3, #1
 800fc0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc0c:	701a      	strb	r2, [r3, #0]
 800fc0e:	e7d6      	b.n	800fbbe <__cvt+0x7a>

0800fc10 <__exponent>:
 800fc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc12:	232b      	movs	r3, #43	@ 0x2b
 800fc14:	b085      	sub	sp, #20
 800fc16:	0005      	movs	r5, r0
 800fc18:	1e0c      	subs	r4, r1, #0
 800fc1a:	7002      	strb	r2, [r0, #0]
 800fc1c:	da01      	bge.n	800fc22 <__exponent+0x12>
 800fc1e:	424c      	negs	r4, r1
 800fc20:	3302      	adds	r3, #2
 800fc22:	706b      	strb	r3, [r5, #1]
 800fc24:	2c09      	cmp	r4, #9
 800fc26:	dd2c      	ble.n	800fc82 <__exponent+0x72>
 800fc28:	ab02      	add	r3, sp, #8
 800fc2a:	1dde      	adds	r6, r3, #7
 800fc2c:	0020      	movs	r0, r4
 800fc2e:	210a      	movs	r1, #10
 800fc30:	f7f0 fbf2 	bl	8000418 <__aeabi_idivmod>
 800fc34:	0037      	movs	r7, r6
 800fc36:	3130      	adds	r1, #48	@ 0x30
 800fc38:	3e01      	subs	r6, #1
 800fc3a:	0020      	movs	r0, r4
 800fc3c:	7031      	strb	r1, [r6, #0]
 800fc3e:	210a      	movs	r1, #10
 800fc40:	9401      	str	r4, [sp, #4]
 800fc42:	f7f0 fb03 	bl	800024c <__divsi3>
 800fc46:	9b01      	ldr	r3, [sp, #4]
 800fc48:	0004      	movs	r4, r0
 800fc4a:	2b63      	cmp	r3, #99	@ 0x63
 800fc4c:	dcee      	bgt.n	800fc2c <__exponent+0x1c>
 800fc4e:	1eba      	subs	r2, r7, #2
 800fc50:	1ca8      	adds	r0, r5, #2
 800fc52:	0001      	movs	r1, r0
 800fc54:	0013      	movs	r3, r2
 800fc56:	3430      	adds	r4, #48	@ 0x30
 800fc58:	7014      	strb	r4, [r2, #0]
 800fc5a:	ac02      	add	r4, sp, #8
 800fc5c:	3407      	adds	r4, #7
 800fc5e:	429c      	cmp	r4, r3
 800fc60:	d80a      	bhi.n	800fc78 <__exponent+0x68>
 800fc62:	2300      	movs	r3, #0
 800fc64:	4294      	cmp	r4, r2
 800fc66:	d303      	bcc.n	800fc70 <__exponent+0x60>
 800fc68:	3309      	adds	r3, #9
 800fc6a:	aa02      	add	r2, sp, #8
 800fc6c:	189b      	adds	r3, r3, r2
 800fc6e:	1bdb      	subs	r3, r3, r7
 800fc70:	18c0      	adds	r0, r0, r3
 800fc72:	1b40      	subs	r0, r0, r5
 800fc74:	b005      	add	sp, #20
 800fc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc78:	781c      	ldrb	r4, [r3, #0]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	700c      	strb	r4, [r1, #0]
 800fc7e:	3101      	adds	r1, #1
 800fc80:	e7eb      	b.n	800fc5a <__exponent+0x4a>
 800fc82:	2330      	movs	r3, #48	@ 0x30
 800fc84:	18e4      	adds	r4, r4, r3
 800fc86:	70ab      	strb	r3, [r5, #2]
 800fc88:	1d28      	adds	r0, r5, #4
 800fc8a:	70ec      	strb	r4, [r5, #3]
 800fc8c:	e7f1      	b.n	800fc72 <__exponent+0x62>
	...

0800fc90 <_printf_float>:
 800fc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc92:	b097      	sub	sp, #92	@ 0x5c
 800fc94:	000d      	movs	r5, r1
 800fc96:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc98:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800fc9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc9c:	9009      	str	r0, [sp, #36]	@ 0x24
 800fc9e:	f000 fd11 	bl	80106c4 <_localeconv_r>
 800fca2:	6803      	ldr	r3, [r0, #0]
 800fca4:	0018      	movs	r0, r3
 800fca6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fca8:	f7f0 fa2a 	bl	8000100 <strlen>
 800fcac:	2300      	movs	r3, #0
 800fcae:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fcb0:	9314      	str	r3, [sp, #80]	@ 0x50
 800fcb2:	7e2b      	ldrb	r3, [r5, #24]
 800fcb4:	2207      	movs	r2, #7
 800fcb6:	930c      	str	r3, [sp, #48]	@ 0x30
 800fcb8:	682b      	ldr	r3, [r5, #0]
 800fcba:	930e      	str	r3, [sp, #56]	@ 0x38
 800fcbc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	05c9      	lsls	r1, r1, #23
 800fcc2:	d545      	bpl.n	800fd50 <_printf_float+0xc0>
 800fcc4:	189b      	adds	r3, r3, r2
 800fcc6:	4393      	bics	r3, r2
 800fcc8:	001a      	movs	r2, r3
 800fcca:	3208      	adds	r2, #8
 800fccc:	6022      	str	r2, [r4, #0]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	681e      	ldr	r6, [r3, #0]
 800fcd2:	685f      	ldr	r7, [r3, #4]
 800fcd4:	007b      	lsls	r3, r7, #1
 800fcd6:	085b      	lsrs	r3, r3, #1
 800fcd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800fcda:	9610      	str	r6, [sp, #64]	@ 0x40
 800fcdc:	64ae      	str	r6, [r5, #72]	@ 0x48
 800fcde:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800fce0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fce2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fce4:	4ba7      	ldr	r3, [pc, #668]	@ (800ff84 <_printf_float+0x2f4>)
 800fce6:	4252      	negs	r2, r2
 800fce8:	f7f2 fb38 	bl	800235c <__aeabi_dcmpun>
 800fcec:	2800      	cmp	r0, #0
 800fcee:	d131      	bne.n	800fd54 <_printf_float+0xc4>
 800fcf0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fcf2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	4ba3      	ldr	r3, [pc, #652]	@ (800ff84 <_printf_float+0x2f4>)
 800fcf8:	4252      	negs	r2, r2
 800fcfa:	f7f0 fbb3 	bl	8000464 <__aeabi_dcmple>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d128      	bne.n	800fd54 <_printf_float+0xc4>
 800fd02:	2200      	movs	r2, #0
 800fd04:	2300      	movs	r3, #0
 800fd06:	0030      	movs	r0, r6
 800fd08:	0039      	movs	r1, r7
 800fd0a:	f7f0 fba1 	bl	8000450 <__aeabi_dcmplt>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d003      	beq.n	800fd1a <_printf_float+0x8a>
 800fd12:	002b      	movs	r3, r5
 800fd14:	222d      	movs	r2, #45	@ 0x2d
 800fd16:	3343      	adds	r3, #67	@ 0x43
 800fd18:	701a      	strb	r2, [r3, #0]
 800fd1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd1c:	4f9a      	ldr	r7, [pc, #616]	@ (800ff88 <_printf_float+0x2f8>)
 800fd1e:	2b47      	cmp	r3, #71	@ 0x47
 800fd20:	d800      	bhi.n	800fd24 <_printf_float+0x94>
 800fd22:	4f9a      	ldr	r7, [pc, #616]	@ (800ff8c <_printf_float+0x2fc>)
 800fd24:	2303      	movs	r3, #3
 800fd26:	2400      	movs	r4, #0
 800fd28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd2a:	612b      	str	r3, [r5, #16]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	439a      	bics	r2, r3
 800fd30:	602a      	str	r2, [r5, #0]
 800fd32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd34:	0029      	movs	r1, r5
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd3c:	aa15      	add	r2, sp, #84	@ 0x54
 800fd3e:	f000 f9e5 	bl	801010c <_printf_common>
 800fd42:	3001      	adds	r0, #1
 800fd44:	d000      	beq.n	800fd48 <_printf_float+0xb8>
 800fd46:	e09e      	b.n	800fe86 <_printf_float+0x1f6>
 800fd48:	2001      	movs	r0, #1
 800fd4a:	4240      	negs	r0, r0
 800fd4c:	b017      	add	sp, #92	@ 0x5c
 800fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd50:	3307      	adds	r3, #7
 800fd52:	e7b8      	b.n	800fcc6 <_printf_float+0x36>
 800fd54:	0032      	movs	r2, r6
 800fd56:	003b      	movs	r3, r7
 800fd58:	0030      	movs	r0, r6
 800fd5a:	0039      	movs	r1, r7
 800fd5c:	f7f2 fafe 	bl	800235c <__aeabi_dcmpun>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d00b      	beq.n	800fd7c <_printf_float+0xec>
 800fd64:	2f00      	cmp	r7, #0
 800fd66:	da03      	bge.n	800fd70 <_printf_float+0xe0>
 800fd68:	002b      	movs	r3, r5
 800fd6a:	222d      	movs	r2, #45	@ 0x2d
 800fd6c:	3343      	adds	r3, #67	@ 0x43
 800fd6e:	701a      	strb	r2, [r3, #0]
 800fd70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd72:	4f87      	ldr	r7, [pc, #540]	@ (800ff90 <_printf_float+0x300>)
 800fd74:	2b47      	cmp	r3, #71	@ 0x47
 800fd76:	d8d5      	bhi.n	800fd24 <_printf_float+0x94>
 800fd78:	4f86      	ldr	r7, [pc, #536]	@ (800ff94 <_printf_float+0x304>)
 800fd7a:	e7d3      	b.n	800fd24 <_printf_float+0x94>
 800fd7c:	2220      	movs	r2, #32
 800fd7e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800fd80:	686b      	ldr	r3, [r5, #4]
 800fd82:	4394      	bics	r4, r2
 800fd84:	1c5a      	adds	r2, r3, #1
 800fd86:	d146      	bne.n	800fe16 <_printf_float+0x186>
 800fd88:	3307      	adds	r3, #7
 800fd8a:	606b      	str	r3, [r5, #4]
 800fd8c:	2380      	movs	r3, #128	@ 0x80
 800fd8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd90:	00db      	lsls	r3, r3, #3
 800fd92:	4313      	orrs	r3, r2
 800fd94:	2200      	movs	r2, #0
 800fd96:	602b      	str	r3, [r5, #0]
 800fd98:	9206      	str	r2, [sp, #24]
 800fd9a:	aa14      	add	r2, sp, #80	@ 0x50
 800fd9c:	9205      	str	r2, [sp, #20]
 800fd9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fda0:	a90a      	add	r1, sp, #40	@ 0x28
 800fda2:	9204      	str	r2, [sp, #16]
 800fda4:	aa13      	add	r2, sp, #76	@ 0x4c
 800fda6:	9203      	str	r2, [sp, #12]
 800fda8:	2223      	movs	r2, #35	@ 0x23
 800fdaa:	1852      	adds	r2, r2, r1
 800fdac:	9202      	str	r2, [sp, #8]
 800fdae:	9301      	str	r3, [sp, #4]
 800fdb0:	686b      	ldr	r3, [r5, #4]
 800fdb2:	0032      	movs	r2, r6
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdb8:	003b      	movs	r3, r7
 800fdba:	f7ff fec3 	bl	800fb44 <__cvt>
 800fdbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fdc0:	0007      	movs	r7, r0
 800fdc2:	2c47      	cmp	r4, #71	@ 0x47
 800fdc4:	d12d      	bne.n	800fe22 <_printf_float+0x192>
 800fdc6:	1cd3      	adds	r3, r2, #3
 800fdc8:	db02      	blt.n	800fdd0 <_printf_float+0x140>
 800fdca:	686b      	ldr	r3, [r5, #4]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	dd47      	ble.n	800fe60 <_printf_float+0x1d0>
 800fdd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdd2:	3b02      	subs	r3, #2
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdd8:	0028      	movs	r0, r5
 800fdda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fddc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fdde:	3901      	subs	r1, #1
 800fde0:	3050      	adds	r0, #80	@ 0x50
 800fde2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fde4:	f7ff ff14 	bl	800fc10 <__exponent>
 800fde8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fdea:	0004      	movs	r4, r0
 800fdec:	1813      	adds	r3, r2, r0
 800fdee:	612b      	str	r3, [r5, #16]
 800fdf0:	2a01      	cmp	r2, #1
 800fdf2:	dc02      	bgt.n	800fdfa <_printf_float+0x16a>
 800fdf4:	682a      	ldr	r2, [r5, #0]
 800fdf6:	07d2      	lsls	r2, r2, #31
 800fdf8:	d501      	bpl.n	800fdfe <_printf_float+0x16e>
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	612b      	str	r3, [r5, #16]
 800fdfe:	2323      	movs	r3, #35	@ 0x23
 800fe00:	aa0a      	add	r2, sp, #40	@ 0x28
 800fe02:	189b      	adds	r3, r3, r2
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d100      	bne.n	800fe0c <_printf_float+0x17c>
 800fe0a:	e792      	b.n	800fd32 <_printf_float+0xa2>
 800fe0c:	002b      	movs	r3, r5
 800fe0e:	222d      	movs	r2, #45	@ 0x2d
 800fe10:	3343      	adds	r3, #67	@ 0x43
 800fe12:	701a      	strb	r2, [r3, #0]
 800fe14:	e78d      	b.n	800fd32 <_printf_float+0xa2>
 800fe16:	2c47      	cmp	r4, #71	@ 0x47
 800fe18:	d1b8      	bne.n	800fd8c <_printf_float+0xfc>
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d1b6      	bne.n	800fd8c <_printf_float+0xfc>
 800fe1e:	3301      	adds	r3, #1
 800fe20:	e7b3      	b.n	800fd8a <_printf_float+0xfa>
 800fe22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe24:	2b65      	cmp	r3, #101	@ 0x65
 800fe26:	d9d7      	bls.n	800fdd8 <_printf_float+0x148>
 800fe28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe2a:	2b66      	cmp	r3, #102	@ 0x66
 800fe2c:	d11a      	bne.n	800fe64 <_printf_float+0x1d4>
 800fe2e:	686b      	ldr	r3, [r5, #4]
 800fe30:	2a00      	cmp	r2, #0
 800fe32:	dd09      	ble.n	800fe48 <_printf_float+0x1b8>
 800fe34:	612a      	str	r2, [r5, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d102      	bne.n	800fe40 <_printf_float+0x1b0>
 800fe3a:	6829      	ldr	r1, [r5, #0]
 800fe3c:	07c9      	lsls	r1, r1, #31
 800fe3e:	d50b      	bpl.n	800fe58 <_printf_float+0x1c8>
 800fe40:	3301      	adds	r3, #1
 800fe42:	189b      	adds	r3, r3, r2
 800fe44:	612b      	str	r3, [r5, #16]
 800fe46:	e007      	b.n	800fe58 <_printf_float+0x1c8>
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d103      	bne.n	800fe54 <_printf_float+0x1c4>
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	6829      	ldr	r1, [r5, #0]
 800fe50:	4211      	tst	r1, r2
 800fe52:	d000      	beq.n	800fe56 <_printf_float+0x1c6>
 800fe54:	1c9a      	adds	r2, r3, #2
 800fe56:	612a      	str	r2, [r5, #16]
 800fe58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fe5a:	2400      	movs	r4, #0
 800fe5c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800fe5e:	e7ce      	b.n	800fdfe <_printf_float+0x16e>
 800fe60:	2367      	movs	r3, #103	@ 0x67
 800fe62:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe64:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fe66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fe68:	4299      	cmp	r1, r3
 800fe6a:	db06      	blt.n	800fe7a <_printf_float+0x1ea>
 800fe6c:	682b      	ldr	r3, [r5, #0]
 800fe6e:	6129      	str	r1, [r5, #16]
 800fe70:	07db      	lsls	r3, r3, #31
 800fe72:	d5f1      	bpl.n	800fe58 <_printf_float+0x1c8>
 800fe74:	3101      	adds	r1, #1
 800fe76:	6129      	str	r1, [r5, #16]
 800fe78:	e7ee      	b.n	800fe58 <_printf_float+0x1c8>
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	2900      	cmp	r1, #0
 800fe7e:	dce0      	bgt.n	800fe42 <_printf_float+0x1b2>
 800fe80:	1892      	adds	r2, r2, r2
 800fe82:	1a52      	subs	r2, r2, r1
 800fe84:	e7dd      	b.n	800fe42 <_printf_float+0x1b2>
 800fe86:	682a      	ldr	r2, [r5, #0]
 800fe88:	0553      	lsls	r3, r2, #21
 800fe8a:	d408      	bmi.n	800fe9e <_printf_float+0x20e>
 800fe8c:	692b      	ldr	r3, [r5, #16]
 800fe8e:	003a      	movs	r2, r7
 800fe90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fe96:	47a0      	blx	r4
 800fe98:	3001      	adds	r0, #1
 800fe9a:	d129      	bne.n	800fef0 <_printf_float+0x260>
 800fe9c:	e754      	b.n	800fd48 <_printf_float+0xb8>
 800fe9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fea0:	2b65      	cmp	r3, #101	@ 0x65
 800fea2:	d800      	bhi.n	800fea6 <_printf_float+0x216>
 800fea4:	e0db      	b.n	801005e <_printf_float+0x3ce>
 800fea6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800fea8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800feaa:	2200      	movs	r2, #0
 800feac:	2300      	movs	r3, #0
 800feae:	f7f0 fac9 	bl	8000444 <__aeabi_dcmpeq>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d033      	beq.n	800ff1e <_printf_float+0x28e>
 800feb6:	2301      	movs	r3, #1
 800feb8:	4a37      	ldr	r2, [pc, #220]	@ (800ff98 <_printf_float+0x308>)
 800feba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800febc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800febe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fec0:	47a0      	blx	r4
 800fec2:	3001      	adds	r0, #1
 800fec4:	d100      	bne.n	800fec8 <_printf_float+0x238>
 800fec6:	e73f      	b.n	800fd48 <_printf_float+0xb8>
 800fec8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800feca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fecc:	42b3      	cmp	r3, r6
 800fece:	db02      	blt.n	800fed6 <_printf_float+0x246>
 800fed0:	682b      	ldr	r3, [r5, #0]
 800fed2:	07db      	lsls	r3, r3, #31
 800fed4:	d50c      	bpl.n	800fef0 <_printf_float+0x260>
 800fed6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fedc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fee0:	47a0      	blx	r4
 800fee2:	2400      	movs	r4, #0
 800fee4:	3001      	adds	r0, #1
 800fee6:	d100      	bne.n	800feea <_printf_float+0x25a>
 800fee8:	e72e      	b.n	800fd48 <_printf_float+0xb8>
 800feea:	1e73      	subs	r3, r6, #1
 800feec:	42a3      	cmp	r3, r4
 800feee:	dc0a      	bgt.n	800ff06 <_printf_float+0x276>
 800fef0:	682b      	ldr	r3, [r5, #0]
 800fef2:	079b      	lsls	r3, r3, #30
 800fef4:	d500      	bpl.n	800fef8 <_printf_float+0x268>
 800fef6:	e106      	b.n	8010106 <_printf_float+0x476>
 800fef8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fefa:	68e8      	ldr	r0, [r5, #12]
 800fefc:	4298      	cmp	r0, r3
 800fefe:	db00      	blt.n	800ff02 <_printf_float+0x272>
 800ff00:	e724      	b.n	800fd4c <_printf_float+0xbc>
 800ff02:	0018      	movs	r0, r3
 800ff04:	e722      	b.n	800fd4c <_printf_float+0xbc>
 800ff06:	002a      	movs	r2, r5
 800ff08:	2301      	movs	r3, #1
 800ff0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ff10:	321a      	adds	r2, #26
 800ff12:	47b8      	blx	r7
 800ff14:	3001      	adds	r0, #1
 800ff16:	d100      	bne.n	800ff1a <_printf_float+0x28a>
 800ff18:	e716      	b.n	800fd48 <_printf_float+0xb8>
 800ff1a:	3401      	adds	r4, #1
 800ff1c:	e7e5      	b.n	800feea <_printf_float+0x25a>
 800ff1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	dc3b      	bgt.n	800ff9c <_printf_float+0x30c>
 800ff24:	2301      	movs	r3, #1
 800ff26:	4a1c      	ldr	r2, [pc, #112]	@ (800ff98 <_printf_float+0x308>)
 800ff28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ff2e:	47a0      	blx	r4
 800ff30:	3001      	adds	r0, #1
 800ff32:	d100      	bne.n	800ff36 <_printf_float+0x2a6>
 800ff34:	e708      	b.n	800fd48 <_printf_float+0xb8>
 800ff36:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ff38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff3a:	4333      	orrs	r3, r6
 800ff3c:	d102      	bne.n	800ff44 <_printf_float+0x2b4>
 800ff3e:	682b      	ldr	r3, [r5, #0]
 800ff40:	07db      	lsls	r3, r3, #31
 800ff42:	d5d5      	bpl.n	800fef0 <_printf_float+0x260>
 800ff44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ff4e:	47a0      	blx	r4
 800ff50:	2300      	movs	r3, #0
 800ff52:	3001      	adds	r0, #1
 800ff54:	d100      	bne.n	800ff58 <_printf_float+0x2c8>
 800ff56:	e6f7      	b.n	800fd48 <_printf_float+0xb8>
 800ff58:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ff5e:	425b      	negs	r3, r3
 800ff60:	4293      	cmp	r3, r2
 800ff62:	dc01      	bgt.n	800ff68 <_printf_float+0x2d8>
 800ff64:	0033      	movs	r3, r6
 800ff66:	e792      	b.n	800fe8e <_printf_float+0x1fe>
 800ff68:	002a      	movs	r2, r5
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ff6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ff72:	321a      	adds	r2, #26
 800ff74:	47a0      	blx	r4
 800ff76:	3001      	adds	r0, #1
 800ff78:	d100      	bne.n	800ff7c <_printf_float+0x2ec>
 800ff7a:	e6e5      	b.n	800fd48 <_printf_float+0xb8>
 800ff7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff7e:	3301      	adds	r3, #1
 800ff80:	e7ea      	b.n	800ff58 <_printf_float+0x2c8>
 800ff82:	46c0      	nop			@ (mov r8, r8)
 800ff84:	7fefffff 	.word	0x7fefffff
 800ff88:	08013512 	.word	0x08013512
 800ff8c:	0801350e 	.word	0x0801350e
 800ff90:	0801351a 	.word	0x0801351a
 800ff94:	08013516 	.word	0x08013516
 800ff98:	0801351e 	.word	0x0801351e
 800ff9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ff9e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ffa0:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffa2:	429e      	cmp	r6, r3
 800ffa4:	dd00      	ble.n	800ffa8 <_printf_float+0x318>
 800ffa6:	001e      	movs	r6, r3
 800ffa8:	2e00      	cmp	r6, #0
 800ffaa:	dc31      	bgt.n	8010010 <_printf_float+0x380>
 800ffac:	43f3      	mvns	r3, r6
 800ffae:	2400      	movs	r4, #0
 800ffb0:	17db      	asrs	r3, r3, #31
 800ffb2:	4033      	ands	r3, r6
 800ffb4:	930e      	str	r3, [sp, #56]	@ 0x38
 800ffb6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ffb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffba:	1af3      	subs	r3, r6, r3
 800ffbc:	42a3      	cmp	r3, r4
 800ffbe:	dc30      	bgt.n	8010022 <_printf_float+0x392>
 800ffc0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	dc38      	bgt.n	801003a <_printf_float+0x3aa>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	07db      	lsls	r3, r3, #31
 800ffcc:	d435      	bmi.n	801003a <_printf_float+0x3aa>
 800ffce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ffd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ffd4:	1b9b      	subs	r3, r3, r6
 800ffd6:	1b14      	subs	r4, r2, r4
 800ffd8:	429c      	cmp	r4, r3
 800ffda:	dd00      	ble.n	800ffde <_printf_float+0x34e>
 800ffdc:	001c      	movs	r4, r3
 800ffde:	2c00      	cmp	r4, #0
 800ffe0:	dc34      	bgt.n	801004c <_printf_float+0x3bc>
 800ffe2:	43e3      	mvns	r3, r4
 800ffe4:	2600      	movs	r6, #0
 800ffe6:	17db      	asrs	r3, r3, #31
 800ffe8:	401c      	ands	r4, r3
 800ffea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ffec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	1b1b      	subs	r3, r3, r4
 800fff2:	42b3      	cmp	r3, r6
 800fff4:	dc00      	bgt.n	800fff8 <_printf_float+0x368>
 800fff6:	e77b      	b.n	800fef0 <_printf_float+0x260>
 800fff8:	002a      	movs	r2, r5
 800fffa:	2301      	movs	r3, #1
 800fffc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010000:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010002:	321a      	adds	r2, #26
 8010004:	47b8      	blx	r7
 8010006:	3001      	adds	r0, #1
 8010008:	d100      	bne.n	801000c <_printf_float+0x37c>
 801000a:	e69d      	b.n	800fd48 <_printf_float+0xb8>
 801000c:	3601      	adds	r6, #1
 801000e:	e7ec      	b.n	800ffea <_printf_float+0x35a>
 8010010:	0033      	movs	r3, r6
 8010012:	003a      	movs	r2, r7
 8010014:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010018:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801001a:	47a0      	blx	r4
 801001c:	3001      	adds	r0, #1
 801001e:	d1c5      	bne.n	800ffac <_printf_float+0x31c>
 8010020:	e692      	b.n	800fd48 <_printf_float+0xb8>
 8010022:	002a      	movs	r2, r5
 8010024:	2301      	movs	r3, #1
 8010026:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010028:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801002a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801002c:	321a      	adds	r2, #26
 801002e:	47b0      	blx	r6
 8010030:	3001      	adds	r0, #1
 8010032:	d100      	bne.n	8010036 <_printf_float+0x3a6>
 8010034:	e688      	b.n	800fd48 <_printf_float+0xb8>
 8010036:	3401      	adds	r4, #1
 8010038:	e7bd      	b.n	800ffb6 <_printf_float+0x326>
 801003a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801003c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801003e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010040:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010042:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8010044:	47a0      	blx	r4
 8010046:	3001      	adds	r0, #1
 8010048:	d1c1      	bne.n	800ffce <_printf_float+0x33e>
 801004a:	e67d      	b.n	800fd48 <_printf_float+0xb8>
 801004c:	19ba      	adds	r2, r7, r6
 801004e:	0023      	movs	r3, r4
 8010050:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010054:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010056:	47b0      	blx	r6
 8010058:	3001      	adds	r0, #1
 801005a:	d1c2      	bne.n	800ffe2 <_printf_float+0x352>
 801005c:	e674      	b.n	800fd48 <_printf_float+0xb8>
 801005e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010060:	930c      	str	r3, [sp, #48]	@ 0x30
 8010062:	2b01      	cmp	r3, #1
 8010064:	dc02      	bgt.n	801006c <_printf_float+0x3dc>
 8010066:	2301      	movs	r3, #1
 8010068:	421a      	tst	r2, r3
 801006a:	d039      	beq.n	80100e0 <_printf_float+0x450>
 801006c:	2301      	movs	r3, #1
 801006e:	003a      	movs	r2, r7
 8010070:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010074:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010076:	47b0      	blx	r6
 8010078:	3001      	adds	r0, #1
 801007a:	d100      	bne.n	801007e <_printf_float+0x3ee>
 801007c:	e664      	b.n	800fd48 <_printf_float+0xb8>
 801007e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010080:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010082:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010084:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010086:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010088:	47b0      	blx	r6
 801008a:	3001      	adds	r0, #1
 801008c:	d100      	bne.n	8010090 <_printf_float+0x400>
 801008e:	e65b      	b.n	800fd48 <_printf_float+0xb8>
 8010090:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8010092:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8010094:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010096:	2200      	movs	r2, #0
 8010098:	3b01      	subs	r3, #1
 801009a:	930c      	str	r3, [sp, #48]	@ 0x30
 801009c:	2300      	movs	r3, #0
 801009e:	f7f0 f9d1 	bl	8000444 <__aeabi_dcmpeq>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d11a      	bne.n	80100dc <_printf_float+0x44c>
 80100a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100a8:	1c7a      	adds	r2, r7, #1
 80100aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80100ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80100b0:	47b0      	blx	r6
 80100b2:	3001      	adds	r0, #1
 80100b4:	d10e      	bne.n	80100d4 <_printf_float+0x444>
 80100b6:	e647      	b.n	800fd48 <_printf_float+0xb8>
 80100b8:	002a      	movs	r2, r5
 80100ba:	2301      	movs	r3, #1
 80100bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80100be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80100c2:	321a      	adds	r2, #26
 80100c4:	47b8      	blx	r7
 80100c6:	3001      	adds	r0, #1
 80100c8:	d100      	bne.n	80100cc <_printf_float+0x43c>
 80100ca:	e63d      	b.n	800fd48 <_printf_float+0xb8>
 80100cc:	3601      	adds	r6, #1
 80100ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100d0:	429e      	cmp	r6, r3
 80100d2:	dbf1      	blt.n	80100b8 <_printf_float+0x428>
 80100d4:	002a      	movs	r2, r5
 80100d6:	0023      	movs	r3, r4
 80100d8:	3250      	adds	r2, #80	@ 0x50
 80100da:	e6d9      	b.n	800fe90 <_printf_float+0x200>
 80100dc:	2600      	movs	r6, #0
 80100de:	e7f6      	b.n	80100ce <_printf_float+0x43e>
 80100e0:	003a      	movs	r2, r7
 80100e2:	e7e2      	b.n	80100aa <_printf_float+0x41a>
 80100e4:	002a      	movs	r2, r5
 80100e6:	2301      	movs	r3, #1
 80100e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80100ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80100ee:	3219      	adds	r2, #25
 80100f0:	47b0      	blx	r6
 80100f2:	3001      	adds	r0, #1
 80100f4:	d100      	bne.n	80100f8 <_printf_float+0x468>
 80100f6:	e627      	b.n	800fd48 <_printf_float+0xb8>
 80100f8:	3401      	adds	r4, #1
 80100fa:	68eb      	ldr	r3, [r5, #12]
 80100fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80100fe:	1a9b      	subs	r3, r3, r2
 8010100:	42a3      	cmp	r3, r4
 8010102:	dcef      	bgt.n	80100e4 <_printf_float+0x454>
 8010104:	e6f8      	b.n	800fef8 <_printf_float+0x268>
 8010106:	2400      	movs	r4, #0
 8010108:	e7f7      	b.n	80100fa <_printf_float+0x46a>
 801010a:	46c0      	nop			@ (mov r8, r8)

0801010c <_printf_common>:
 801010c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801010e:	0016      	movs	r6, r2
 8010110:	9301      	str	r3, [sp, #4]
 8010112:	688a      	ldr	r2, [r1, #8]
 8010114:	690b      	ldr	r3, [r1, #16]
 8010116:	000c      	movs	r4, r1
 8010118:	9000      	str	r0, [sp, #0]
 801011a:	4293      	cmp	r3, r2
 801011c:	da00      	bge.n	8010120 <_printf_common+0x14>
 801011e:	0013      	movs	r3, r2
 8010120:	0022      	movs	r2, r4
 8010122:	6033      	str	r3, [r6, #0]
 8010124:	3243      	adds	r2, #67	@ 0x43
 8010126:	7812      	ldrb	r2, [r2, #0]
 8010128:	2a00      	cmp	r2, #0
 801012a:	d001      	beq.n	8010130 <_printf_common+0x24>
 801012c:	3301      	adds	r3, #1
 801012e:	6033      	str	r3, [r6, #0]
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	069b      	lsls	r3, r3, #26
 8010134:	d502      	bpl.n	801013c <_printf_common+0x30>
 8010136:	6833      	ldr	r3, [r6, #0]
 8010138:	3302      	adds	r3, #2
 801013a:	6033      	str	r3, [r6, #0]
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	2306      	movs	r3, #6
 8010140:	0015      	movs	r5, r2
 8010142:	401d      	ands	r5, r3
 8010144:	421a      	tst	r2, r3
 8010146:	d027      	beq.n	8010198 <_printf_common+0x8c>
 8010148:	0023      	movs	r3, r4
 801014a:	3343      	adds	r3, #67	@ 0x43
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	1e5a      	subs	r2, r3, #1
 8010150:	4193      	sbcs	r3, r2
 8010152:	6822      	ldr	r2, [r4, #0]
 8010154:	0692      	lsls	r2, r2, #26
 8010156:	d430      	bmi.n	80101ba <_printf_common+0xae>
 8010158:	0022      	movs	r2, r4
 801015a:	9901      	ldr	r1, [sp, #4]
 801015c:	9800      	ldr	r0, [sp, #0]
 801015e:	9d08      	ldr	r5, [sp, #32]
 8010160:	3243      	adds	r2, #67	@ 0x43
 8010162:	47a8      	blx	r5
 8010164:	3001      	adds	r0, #1
 8010166:	d025      	beq.n	80101b4 <_printf_common+0xa8>
 8010168:	2206      	movs	r2, #6
 801016a:	6823      	ldr	r3, [r4, #0]
 801016c:	2500      	movs	r5, #0
 801016e:	4013      	ands	r3, r2
 8010170:	2b04      	cmp	r3, #4
 8010172:	d105      	bne.n	8010180 <_printf_common+0x74>
 8010174:	6833      	ldr	r3, [r6, #0]
 8010176:	68e5      	ldr	r5, [r4, #12]
 8010178:	1aed      	subs	r5, r5, r3
 801017a:	43eb      	mvns	r3, r5
 801017c:	17db      	asrs	r3, r3, #31
 801017e:	401d      	ands	r5, r3
 8010180:	68a3      	ldr	r3, [r4, #8]
 8010182:	6922      	ldr	r2, [r4, #16]
 8010184:	4293      	cmp	r3, r2
 8010186:	dd01      	ble.n	801018c <_printf_common+0x80>
 8010188:	1a9b      	subs	r3, r3, r2
 801018a:	18ed      	adds	r5, r5, r3
 801018c:	2600      	movs	r6, #0
 801018e:	42b5      	cmp	r5, r6
 8010190:	d120      	bne.n	80101d4 <_printf_common+0xc8>
 8010192:	2000      	movs	r0, #0
 8010194:	e010      	b.n	80101b8 <_printf_common+0xac>
 8010196:	3501      	adds	r5, #1
 8010198:	68e3      	ldr	r3, [r4, #12]
 801019a:	6832      	ldr	r2, [r6, #0]
 801019c:	1a9b      	subs	r3, r3, r2
 801019e:	42ab      	cmp	r3, r5
 80101a0:	ddd2      	ble.n	8010148 <_printf_common+0x3c>
 80101a2:	0022      	movs	r2, r4
 80101a4:	2301      	movs	r3, #1
 80101a6:	9901      	ldr	r1, [sp, #4]
 80101a8:	9800      	ldr	r0, [sp, #0]
 80101aa:	9f08      	ldr	r7, [sp, #32]
 80101ac:	3219      	adds	r2, #25
 80101ae:	47b8      	blx	r7
 80101b0:	3001      	adds	r0, #1
 80101b2:	d1f0      	bne.n	8010196 <_printf_common+0x8a>
 80101b4:	2001      	movs	r0, #1
 80101b6:	4240      	negs	r0, r0
 80101b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80101ba:	2030      	movs	r0, #48	@ 0x30
 80101bc:	18e1      	adds	r1, r4, r3
 80101be:	3143      	adds	r1, #67	@ 0x43
 80101c0:	7008      	strb	r0, [r1, #0]
 80101c2:	0021      	movs	r1, r4
 80101c4:	1c5a      	adds	r2, r3, #1
 80101c6:	3145      	adds	r1, #69	@ 0x45
 80101c8:	7809      	ldrb	r1, [r1, #0]
 80101ca:	18a2      	adds	r2, r4, r2
 80101cc:	3243      	adds	r2, #67	@ 0x43
 80101ce:	3302      	adds	r3, #2
 80101d0:	7011      	strb	r1, [r2, #0]
 80101d2:	e7c1      	b.n	8010158 <_printf_common+0x4c>
 80101d4:	0022      	movs	r2, r4
 80101d6:	2301      	movs	r3, #1
 80101d8:	9901      	ldr	r1, [sp, #4]
 80101da:	9800      	ldr	r0, [sp, #0]
 80101dc:	9f08      	ldr	r7, [sp, #32]
 80101de:	321a      	adds	r2, #26
 80101e0:	47b8      	blx	r7
 80101e2:	3001      	adds	r0, #1
 80101e4:	d0e6      	beq.n	80101b4 <_printf_common+0xa8>
 80101e6:	3601      	adds	r6, #1
 80101e8:	e7d1      	b.n	801018e <_printf_common+0x82>
	...

080101ec <_printf_i>:
 80101ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ee:	b08b      	sub	sp, #44	@ 0x2c
 80101f0:	9206      	str	r2, [sp, #24]
 80101f2:	000a      	movs	r2, r1
 80101f4:	3243      	adds	r2, #67	@ 0x43
 80101f6:	9307      	str	r3, [sp, #28]
 80101f8:	9005      	str	r0, [sp, #20]
 80101fa:	9203      	str	r2, [sp, #12]
 80101fc:	7e0a      	ldrb	r2, [r1, #24]
 80101fe:	000c      	movs	r4, r1
 8010200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010202:	2a78      	cmp	r2, #120	@ 0x78
 8010204:	d809      	bhi.n	801021a <_printf_i+0x2e>
 8010206:	2a62      	cmp	r2, #98	@ 0x62
 8010208:	d80b      	bhi.n	8010222 <_printf_i+0x36>
 801020a:	2a00      	cmp	r2, #0
 801020c:	d100      	bne.n	8010210 <_printf_i+0x24>
 801020e:	e0ba      	b.n	8010386 <_printf_i+0x19a>
 8010210:	497a      	ldr	r1, [pc, #488]	@ (80103fc <_printf_i+0x210>)
 8010212:	9104      	str	r1, [sp, #16]
 8010214:	2a58      	cmp	r2, #88	@ 0x58
 8010216:	d100      	bne.n	801021a <_printf_i+0x2e>
 8010218:	e08e      	b.n	8010338 <_printf_i+0x14c>
 801021a:	0025      	movs	r5, r4
 801021c:	3542      	adds	r5, #66	@ 0x42
 801021e:	702a      	strb	r2, [r5, #0]
 8010220:	e022      	b.n	8010268 <_printf_i+0x7c>
 8010222:	0010      	movs	r0, r2
 8010224:	3863      	subs	r0, #99	@ 0x63
 8010226:	2815      	cmp	r0, #21
 8010228:	d8f7      	bhi.n	801021a <_printf_i+0x2e>
 801022a:	f7ef ff7b 	bl	8000124 <__gnu_thumb1_case_shi>
 801022e:	0016      	.short	0x0016
 8010230:	fff6001f 	.word	0xfff6001f
 8010234:	fff6fff6 	.word	0xfff6fff6
 8010238:	001ffff6 	.word	0x001ffff6
 801023c:	fff6fff6 	.word	0xfff6fff6
 8010240:	fff6fff6 	.word	0xfff6fff6
 8010244:	0036009f 	.word	0x0036009f
 8010248:	fff6007e 	.word	0xfff6007e
 801024c:	00b0fff6 	.word	0x00b0fff6
 8010250:	0036fff6 	.word	0x0036fff6
 8010254:	fff6fff6 	.word	0xfff6fff6
 8010258:	0082      	.short	0x0082
 801025a:	0025      	movs	r5, r4
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	3542      	adds	r5, #66	@ 0x42
 8010260:	1d11      	adds	r1, r2, #4
 8010262:	6019      	str	r1, [r3, #0]
 8010264:	6813      	ldr	r3, [r2, #0]
 8010266:	702b      	strb	r3, [r5, #0]
 8010268:	2301      	movs	r3, #1
 801026a:	e09e      	b.n	80103aa <_printf_i+0x1be>
 801026c:	6818      	ldr	r0, [r3, #0]
 801026e:	6809      	ldr	r1, [r1, #0]
 8010270:	1d02      	adds	r2, r0, #4
 8010272:	060d      	lsls	r5, r1, #24
 8010274:	d50b      	bpl.n	801028e <_printf_i+0xa2>
 8010276:	6806      	ldr	r6, [r0, #0]
 8010278:	601a      	str	r2, [r3, #0]
 801027a:	2e00      	cmp	r6, #0
 801027c:	da03      	bge.n	8010286 <_printf_i+0x9a>
 801027e:	232d      	movs	r3, #45	@ 0x2d
 8010280:	9a03      	ldr	r2, [sp, #12]
 8010282:	4276      	negs	r6, r6
 8010284:	7013      	strb	r3, [r2, #0]
 8010286:	4b5d      	ldr	r3, [pc, #372]	@ (80103fc <_printf_i+0x210>)
 8010288:	270a      	movs	r7, #10
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	e018      	b.n	80102c0 <_printf_i+0xd4>
 801028e:	6806      	ldr	r6, [r0, #0]
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	0649      	lsls	r1, r1, #25
 8010294:	d5f1      	bpl.n	801027a <_printf_i+0x8e>
 8010296:	b236      	sxth	r6, r6
 8010298:	e7ef      	b.n	801027a <_printf_i+0x8e>
 801029a:	6808      	ldr	r0, [r1, #0]
 801029c:	6819      	ldr	r1, [r3, #0]
 801029e:	c940      	ldmia	r1!, {r6}
 80102a0:	0605      	lsls	r5, r0, #24
 80102a2:	d402      	bmi.n	80102aa <_printf_i+0xbe>
 80102a4:	0640      	lsls	r0, r0, #25
 80102a6:	d500      	bpl.n	80102aa <_printf_i+0xbe>
 80102a8:	b2b6      	uxth	r6, r6
 80102aa:	6019      	str	r1, [r3, #0]
 80102ac:	4b53      	ldr	r3, [pc, #332]	@ (80103fc <_printf_i+0x210>)
 80102ae:	270a      	movs	r7, #10
 80102b0:	9304      	str	r3, [sp, #16]
 80102b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80102b4:	d100      	bne.n	80102b8 <_printf_i+0xcc>
 80102b6:	3f02      	subs	r7, #2
 80102b8:	0023      	movs	r3, r4
 80102ba:	2200      	movs	r2, #0
 80102bc:	3343      	adds	r3, #67	@ 0x43
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	6863      	ldr	r3, [r4, #4]
 80102c2:	60a3      	str	r3, [r4, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	db06      	blt.n	80102d6 <_printf_i+0xea>
 80102c8:	2104      	movs	r1, #4
 80102ca:	6822      	ldr	r2, [r4, #0]
 80102cc:	9d03      	ldr	r5, [sp, #12]
 80102ce:	438a      	bics	r2, r1
 80102d0:	6022      	str	r2, [r4, #0]
 80102d2:	4333      	orrs	r3, r6
 80102d4:	d00c      	beq.n	80102f0 <_printf_i+0x104>
 80102d6:	9d03      	ldr	r5, [sp, #12]
 80102d8:	0030      	movs	r0, r6
 80102da:	0039      	movs	r1, r7
 80102dc:	f7ef ffb2 	bl	8000244 <__aeabi_uidivmod>
 80102e0:	9b04      	ldr	r3, [sp, #16]
 80102e2:	3d01      	subs	r5, #1
 80102e4:	5c5b      	ldrb	r3, [r3, r1]
 80102e6:	702b      	strb	r3, [r5, #0]
 80102e8:	0033      	movs	r3, r6
 80102ea:	0006      	movs	r6, r0
 80102ec:	429f      	cmp	r7, r3
 80102ee:	d9f3      	bls.n	80102d8 <_printf_i+0xec>
 80102f0:	2f08      	cmp	r7, #8
 80102f2:	d109      	bne.n	8010308 <_printf_i+0x11c>
 80102f4:	6823      	ldr	r3, [r4, #0]
 80102f6:	07db      	lsls	r3, r3, #31
 80102f8:	d506      	bpl.n	8010308 <_printf_i+0x11c>
 80102fa:	6862      	ldr	r2, [r4, #4]
 80102fc:	6923      	ldr	r3, [r4, #16]
 80102fe:	429a      	cmp	r2, r3
 8010300:	dc02      	bgt.n	8010308 <_printf_i+0x11c>
 8010302:	2330      	movs	r3, #48	@ 0x30
 8010304:	3d01      	subs	r5, #1
 8010306:	702b      	strb	r3, [r5, #0]
 8010308:	9b03      	ldr	r3, [sp, #12]
 801030a:	1b5b      	subs	r3, r3, r5
 801030c:	6123      	str	r3, [r4, #16]
 801030e:	9b07      	ldr	r3, [sp, #28]
 8010310:	0021      	movs	r1, r4
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	9805      	ldr	r0, [sp, #20]
 8010316:	9b06      	ldr	r3, [sp, #24]
 8010318:	aa09      	add	r2, sp, #36	@ 0x24
 801031a:	f7ff fef7 	bl	801010c <_printf_common>
 801031e:	3001      	adds	r0, #1
 8010320:	d148      	bne.n	80103b4 <_printf_i+0x1c8>
 8010322:	2001      	movs	r0, #1
 8010324:	4240      	negs	r0, r0
 8010326:	b00b      	add	sp, #44	@ 0x2c
 8010328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801032a:	2220      	movs	r2, #32
 801032c:	6809      	ldr	r1, [r1, #0]
 801032e:	430a      	orrs	r2, r1
 8010330:	6022      	str	r2, [r4, #0]
 8010332:	2278      	movs	r2, #120	@ 0x78
 8010334:	4932      	ldr	r1, [pc, #200]	@ (8010400 <_printf_i+0x214>)
 8010336:	9104      	str	r1, [sp, #16]
 8010338:	0021      	movs	r1, r4
 801033a:	3145      	adds	r1, #69	@ 0x45
 801033c:	700a      	strb	r2, [r1, #0]
 801033e:	6819      	ldr	r1, [r3, #0]
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	c940      	ldmia	r1!, {r6}
 8010344:	0610      	lsls	r0, r2, #24
 8010346:	d402      	bmi.n	801034e <_printf_i+0x162>
 8010348:	0650      	lsls	r0, r2, #25
 801034a:	d500      	bpl.n	801034e <_printf_i+0x162>
 801034c:	b2b6      	uxth	r6, r6
 801034e:	6019      	str	r1, [r3, #0]
 8010350:	07d3      	lsls	r3, r2, #31
 8010352:	d502      	bpl.n	801035a <_printf_i+0x16e>
 8010354:	2320      	movs	r3, #32
 8010356:	4313      	orrs	r3, r2
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	2e00      	cmp	r6, #0
 801035c:	d001      	beq.n	8010362 <_printf_i+0x176>
 801035e:	2710      	movs	r7, #16
 8010360:	e7aa      	b.n	80102b8 <_printf_i+0xcc>
 8010362:	2220      	movs	r2, #32
 8010364:	6823      	ldr	r3, [r4, #0]
 8010366:	4393      	bics	r3, r2
 8010368:	6023      	str	r3, [r4, #0]
 801036a:	e7f8      	b.n	801035e <_printf_i+0x172>
 801036c:	681a      	ldr	r2, [r3, #0]
 801036e:	680d      	ldr	r5, [r1, #0]
 8010370:	1d10      	adds	r0, r2, #4
 8010372:	6949      	ldr	r1, [r1, #20]
 8010374:	6018      	str	r0, [r3, #0]
 8010376:	6813      	ldr	r3, [r2, #0]
 8010378:	062e      	lsls	r6, r5, #24
 801037a:	d501      	bpl.n	8010380 <_printf_i+0x194>
 801037c:	6019      	str	r1, [r3, #0]
 801037e:	e002      	b.n	8010386 <_printf_i+0x19a>
 8010380:	066d      	lsls	r5, r5, #25
 8010382:	d5fb      	bpl.n	801037c <_printf_i+0x190>
 8010384:	8019      	strh	r1, [r3, #0]
 8010386:	2300      	movs	r3, #0
 8010388:	9d03      	ldr	r5, [sp, #12]
 801038a:	6123      	str	r3, [r4, #16]
 801038c:	e7bf      	b.n	801030e <_printf_i+0x122>
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	1d11      	adds	r1, r2, #4
 8010392:	6019      	str	r1, [r3, #0]
 8010394:	6815      	ldr	r5, [r2, #0]
 8010396:	2100      	movs	r1, #0
 8010398:	0028      	movs	r0, r5
 801039a:	6862      	ldr	r2, [r4, #4]
 801039c:	f000 fa11 	bl	80107c2 <memchr>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d001      	beq.n	80103a8 <_printf_i+0x1bc>
 80103a4:	1b40      	subs	r0, r0, r5
 80103a6:	6060      	str	r0, [r4, #4]
 80103a8:	6863      	ldr	r3, [r4, #4]
 80103aa:	6123      	str	r3, [r4, #16]
 80103ac:	2300      	movs	r3, #0
 80103ae:	9a03      	ldr	r2, [sp, #12]
 80103b0:	7013      	strb	r3, [r2, #0]
 80103b2:	e7ac      	b.n	801030e <_printf_i+0x122>
 80103b4:	002a      	movs	r2, r5
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	9906      	ldr	r1, [sp, #24]
 80103ba:	9805      	ldr	r0, [sp, #20]
 80103bc:	9d07      	ldr	r5, [sp, #28]
 80103be:	47a8      	blx	r5
 80103c0:	3001      	adds	r0, #1
 80103c2:	d0ae      	beq.n	8010322 <_printf_i+0x136>
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	079b      	lsls	r3, r3, #30
 80103c8:	d415      	bmi.n	80103f6 <_printf_i+0x20a>
 80103ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103cc:	68e0      	ldr	r0, [r4, #12]
 80103ce:	4298      	cmp	r0, r3
 80103d0:	daa9      	bge.n	8010326 <_printf_i+0x13a>
 80103d2:	0018      	movs	r0, r3
 80103d4:	e7a7      	b.n	8010326 <_printf_i+0x13a>
 80103d6:	0022      	movs	r2, r4
 80103d8:	2301      	movs	r3, #1
 80103da:	9906      	ldr	r1, [sp, #24]
 80103dc:	9805      	ldr	r0, [sp, #20]
 80103de:	9e07      	ldr	r6, [sp, #28]
 80103e0:	3219      	adds	r2, #25
 80103e2:	47b0      	blx	r6
 80103e4:	3001      	adds	r0, #1
 80103e6:	d09c      	beq.n	8010322 <_printf_i+0x136>
 80103e8:	3501      	adds	r5, #1
 80103ea:	68e3      	ldr	r3, [r4, #12]
 80103ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103ee:	1a9b      	subs	r3, r3, r2
 80103f0:	42ab      	cmp	r3, r5
 80103f2:	dcf0      	bgt.n	80103d6 <_printf_i+0x1ea>
 80103f4:	e7e9      	b.n	80103ca <_printf_i+0x1de>
 80103f6:	2500      	movs	r5, #0
 80103f8:	e7f7      	b.n	80103ea <_printf_i+0x1fe>
 80103fa:	46c0      	nop			@ (mov r8, r8)
 80103fc:	08013520 	.word	0x08013520
 8010400:	08013531 	.word	0x08013531

08010404 <std>:
 8010404:	2300      	movs	r3, #0
 8010406:	b510      	push	{r4, lr}
 8010408:	0004      	movs	r4, r0
 801040a:	6003      	str	r3, [r0, #0]
 801040c:	6043      	str	r3, [r0, #4]
 801040e:	6083      	str	r3, [r0, #8]
 8010410:	8181      	strh	r1, [r0, #12]
 8010412:	6643      	str	r3, [r0, #100]	@ 0x64
 8010414:	81c2      	strh	r2, [r0, #14]
 8010416:	6103      	str	r3, [r0, #16]
 8010418:	6143      	str	r3, [r0, #20]
 801041a:	6183      	str	r3, [r0, #24]
 801041c:	0019      	movs	r1, r3
 801041e:	2208      	movs	r2, #8
 8010420:	305c      	adds	r0, #92	@ 0x5c
 8010422:	f000 f935 	bl	8010690 <memset>
 8010426:	4b0b      	ldr	r3, [pc, #44]	@ (8010454 <std+0x50>)
 8010428:	6224      	str	r4, [r4, #32]
 801042a:	6263      	str	r3, [r4, #36]	@ 0x24
 801042c:	4b0a      	ldr	r3, [pc, #40]	@ (8010458 <std+0x54>)
 801042e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010430:	4b0a      	ldr	r3, [pc, #40]	@ (801045c <std+0x58>)
 8010432:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010434:	4b0a      	ldr	r3, [pc, #40]	@ (8010460 <std+0x5c>)
 8010436:	6323      	str	r3, [r4, #48]	@ 0x30
 8010438:	4b0a      	ldr	r3, [pc, #40]	@ (8010464 <std+0x60>)
 801043a:	429c      	cmp	r4, r3
 801043c:	d005      	beq.n	801044a <std+0x46>
 801043e:	4b0a      	ldr	r3, [pc, #40]	@ (8010468 <std+0x64>)
 8010440:	429c      	cmp	r4, r3
 8010442:	d002      	beq.n	801044a <std+0x46>
 8010444:	4b09      	ldr	r3, [pc, #36]	@ (801046c <std+0x68>)
 8010446:	429c      	cmp	r4, r3
 8010448:	d103      	bne.n	8010452 <std+0x4e>
 801044a:	0020      	movs	r0, r4
 801044c:	3058      	adds	r0, #88	@ 0x58
 801044e:	f000 f9b5 	bl	80107bc <__retarget_lock_init_recursive>
 8010452:	bd10      	pop	{r4, pc}
 8010454:	080105f9 	.word	0x080105f9
 8010458:	08010621 	.word	0x08010621
 801045c:	08010659 	.word	0x08010659
 8010460:	08010685 	.word	0x08010685
 8010464:	2000215c 	.word	0x2000215c
 8010468:	200021c4 	.word	0x200021c4
 801046c:	2000222c 	.word	0x2000222c

08010470 <stdio_exit_handler>:
 8010470:	b510      	push	{r4, lr}
 8010472:	4a03      	ldr	r2, [pc, #12]	@ (8010480 <stdio_exit_handler+0x10>)
 8010474:	4903      	ldr	r1, [pc, #12]	@ (8010484 <stdio_exit_handler+0x14>)
 8010476:	4804      	ldr	r0, [pc, #16]	@ (8010488 <stdio_exit_handler+0x18>)
 8010478:	f000 f86c 	bl	8010554 <_fwalk_sglue>
 801047c:	bd10      	pop	{r4, pc}
 801047e:	46c0      	nop			@ (mov r8, r8)
 8010480:	20000190 	.word	0x20000190
 8010484:	08012b31 	.word	0x08012b31
 8010488:	2000030c 	.word	0x2000030c

0801048c <cleanup_stdio>:
 801048c:	6841      	ldr	r1, [r0, #4]
 801048e:	4b0b      	ldr	r3, [pc, #44]	@ (80104bc <cleanup_stdio+0x30>)
 8010490:	b510      	push	{r4, lr}
 8010492:	0004      	movs	r4, r0
 8010494:	4299      	cmp	r1, r3
 8010496:	d001      	beq.n	801049c <cleanup_stdio+0x10>
 8010498:	f002 fb4a 	bl	8012b30 <_fflush_r>
 801049c:	68a1      	ldr	r1, [r4, #8]
 801049e:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <cleanup_stdio+0x34>)
 80104a0:	4299      	cmp	r1, r3
 80104a2:	d002      	beq.n	80104aa <cleanup_stdio+0x1e>
 80104a4:	0020      	movs	r0, r4
 80104a6:	f002 fb43 	bl	8012b30 <_fflush_r>
 80104aa:	68e1      	ldr	r1, [r4, #12]
 80104ac:	4b05      	ldr	r3, [pc, #20]	@ (80104c4 <cleanup_stdio+0x38>)
 80104ae:	4299      	cmp	r1, r3
 80104b0:	d002      	beq.n	80104b8 <cleanup_stdio+0x2c>
 80104b2:	0020      	movs	r0, r4
 80104b4:	f002 fb3c 	bl	8012b30 <_fflush_r>
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	46c0      	nop			@ (mov r8, r8)
 80104bc:	2000215c 	.word	0x2000215c
 80104c0:	200021c4 	.word	0x200021c4
 80104c4:	2000222c 	.word	0x2000222c

080104c8 <global_stdio_init.part.0>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4b09      	ldr	r3, [pc, #36]	@ (80104f0 <global_stdio_init.part.0+0x28>)
 80104cc:	4a09      	ldr	r2, [pc, #36]	@ (80104f4 <global_stdio_init.part.0+0x2c>)
 80104ce:	2104      	movs	r1, #4
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	4809      	ldr	r0, [pc, #36]	@ (80104f8 <global_stdio_init.part.0+0x30>)
 80104d4:	2200      	movs	r2, #0
 80104d6:	f7ff ff95 	bl	8010404 <std>
 80104da:	2201      	movs	r2, #1
 80104dc:	2109      	movs	r1, #9
 80104de:	4807      	ldr	r0, [pc, #28]	@ (80104fc <global_stdio_init.part.0+0x34>)
 80104e0:	f7ff ff90 	bl	8010404 <std>
 80104e4:	2202      	movs	r2, #2
 80104e6:	2112      	movs	r1, #18
 80104e8:	4805      	ldr	r0, [pc, #20]	@ (8010500 <global_stdio_init.part.0+0x38>)
 80104ea:	f7ff ff8b 	bl	8010404 <std>
 80104ee:	bd10      	pop	{r4, pc}
 80104f0:	20002294 	.word	0x20002294
 80104f4:	08010471 	.word	0x08010471
 80104f8:	2000215c 	.word	0x2000215c
 80104fc:	200021c4 	.word	0x200021c4
 8010500:	2000222c 	.word	0x2000222c

08010504 <__sfp_lock_acquire>:
 8010504:	b510      	push	{r4, lr}
 8010506:	4802      	ldr	r0, [pc, #8]	@ (8010510 <__sfp_lock_acquire+0xc>)
 8010508:	f000 f959 	bl	80107be <__retarget_lock_acquire_recursive>
 801050c:	bd10      	pop	{r4, pc}
 801050e:	46c0      	nop			@ (mov r8, r8)
 8010510:	2000229d 	.word	0x2000229d

08010514 <__sfp_lock_release>:
 8010514:	b510      	push	{r4, lr}
 8010516:	4802      	ldr	r0, [pc, #8]	@ (8010520 <__sfp_lock_release+0xc>)
 8010518:	f000 f952 	bl	80107c0 <__retarget_lock_release_recursive>
 801051c:	bd10      	pop	{r4, pc}
 801051e:	46c0      	nop			@ (mov r8, r8)
 8010520:	2000229d 	.word	0x2000229d

08010524 <__sinit>:
 8010524:	b510      	push	{r4, lr}
 8010526:	0004      	movs	r4, r0
 8010528:	f7ff ffec 	bl	8010504 <__sfp_lock_acquire>
 801052c:	6a23      	ldr	r3, [r4, #32]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <__sinit+0x14>
 8010532:	f7ff ffef 	bl	8010514 <__sfp_lock_release>
 8010536:	bd10      	pop	{r4, pc}
 8010538:	4b04      	ldr	r3, [pc, #16]	@ (801054c <__sinit+0x28>)
 801053a:	6223      	str	r3, [r4, #32]
 801053c:	4b04      	ldr	r3, [pc, #16]	@ (8010550 <__sinit+0x2c>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1f6      	bne.n	8010532 <__sinit+0xe>
 8010544:	f7ff ffc0 	bl	80104c8 <global_stdio_init.part.0>
 8010548:	e7f3      	b.n	8010532 <__sinit+0xe>
 801054a:	46c0      	nop			@ (mov r8, r8)
 801054c:	0801048d 	.word	0x0801048d
 8010550:	20002294 	.word	0x20002294

08010554 <_fwalk_sglue>:
 8010554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010556:	0014      	movs	r4, r2
 8010558:	2600      	movs	r6, #0
 801055a:	9000      	str	r0, [sp, #0]
 801055c:	9101      	str	r1, [sp, #4]
 801055e:	68a5      	ldr	r5, [r4, #8]
 8010560:	6867      	ldr	r7, [r4, #4]
 8010562:	3f01      	subs	r7, #1
 8010564:	d504      	bpl.n	8010570 <_fwalk_sglue+0x1c>
 8010566:	6824      	ldr	r4, [r4, #0]
 8010568:	2c00      	cmp	r4, #0
 801056a:	d1f8      	bne.n	801055e <_fwalk_sglue+0xa>
 801056c:	0030      	movs	r0, r6
 801056e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010570:	89ab      	ldrh	r3, [r5, #12]
 8010572:	2b01      	cmp	r3, #1
 8010574:	d908      	bls.n	8010588 <_fwalk_sglue+0x34>
 8010576:	220e      	movs	r2, #14
 8010578:	5eab      	ldrsh	r3, [r5, r2]
 801057a:	3301      	adds	r3, #1
 801057c:	d004      	beq.n	8010588 <_fwalk_sglue+0x34>
 801057e:	0029      	movs	r1, r5
 8010580:	9800      	ldr	r0, [sp, #0]
 8010582:	9b01      	ldr	r3, [sp, #4]
 8010584:	4798      	blx	r3
 8010586:	4306      	orrs	r6, r0
 8010588:	3568      	adds	r5, #104	@ 0x68
 801058a:	e7ea      	b.n	8010562 <_fwalk_sglue+0xe>

0801058c <sniprintf>:
 801058c:	b40c      	push	{r2, r3}
 801058e:	b530      	push	{r4, r5, lr}
 8010590:	4b18      	ldr	r3, [pc, #96]	@ (80105f4 <sniprintf+0x68>)
 8010592:	000c      	movs	r4, r1
 8010594:	681d      	ldr	r5, [r3, #0]
 8010596:	b09d      	sub	sp, #116	@ 0x74
 8010598:	2900      	cmp	r1, #0
 801059a:	da08      	bge.n	80105ae <sniprintf+0x22>
 801059c:	238b      	movs	r3, #139	@ 0x8b
 801059e:	2001      	movs	r0, #1
 80105a0:	602b      	str	r3, [r5, #0]
 80105a2:	4240      	negs	r0, r0
 80105a4:	b01d      	add	sp, #116	@ 0x74
 80105a6:	bc30      	pop	{r4, r5}
 80105a8:	bc08      	pop	{r3}
 80105aa:	b002      	add	sp, #8
 80105ac:	4718      	bx	r3
 80105ae:	2382      	movs	r3, #130	@ 0x82
 80105b0:	466a      	mov	r2, sp
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	8293      	strh	r3, [r2, #20]
 80105b6:	2300      	movs	r3, #0
 80105b8:	9002      	str	r0, [sp, #8]
 80105ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 80105bc:	9006      	str	r0, [sp, #24]
 80105be:	4299      	cmp	r1, r3
 80105c0:	d000      	beq.n	80105c4 <sniprintf+0x38>
 80105c2:	1e4b      	subs	r3, r1, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	9307      	str	r3, [sp, #28]
 80105c8:	2301      	movs	r3, #1
 80105ca:	466a      	mov	r2, sp
 80105cc:	425b      	negs	r3, r3
 80105ce:	82d3      	strh	r3, [r2, #22]
 80105d0:	0028      	movs	r0, r5
 80105d2:	ab21      	add	r3, sp, #132	@ 0x84
 80105d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80105d6:	a902      	add	r1, sp, #8
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	f002 f925 	bl	8012828 <_svfiprintf_r>
 80105de:	1c43      	adds	r3, r0, #1
 80105e0:	da01      	bge.n	80105e6 <sniprintf+0x5a>
 80105e2:	238b      	movs	r3, #139	@ 0x8b
 80105e4:	602b      	str	r3, [r5, #0]
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	d0dc      	beq.n	80105a4 <sniprintf+0x18>
 80105ea:	2200      	movs	r2, #0
 80105ec:	9b02      	ldr	r3, [sp, #8]
 80105ee:	701a      	strb	r2, [r3, #0]
 80105f0:	e7d8      	b.n	80105a4 <sniprintf+0x18>
 80105f2:	46c0      	nop			@ (mov r8, r8)
 80105f4:	20000308 	.word	0x20000308

080105f8 <__sread>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	000c      	movs	r4, r1
 80105fc:	250e      	movs	r5, #14
 80105fe:	5f49      	ldrsh	r1, [r1, r5]
 8010600:	f000 f88a 	bl	8010718 <_read_r>
 8010604:	2800      	cmp	r0, #0
 8010606:	db03      	blt.n	8010610 <__sread+0x18>
 8010608:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801060a:	181b      	adds	r3, r3, r0
 801060c:	6563      	str	r3, [r4, #84]	@ 0x54
 801060e:	bd70      	pop	{r4, r5, r6, pc}
 8010610:	89a3      	ldrh	r3, [r4, #12]
 8010612:	4a02      	ldr	r2, [pc, #8]	@ (801061c <__sread+0x24>)
 8010614:	4013      	ands	r3, r2
 8010616:	81a3      	strh	r3, [r4, #12]
 8010618:	e7f9      	b.n	801060e <__sread+0x16>
 801061a:	46c0      	nop			@ (mov r8, r8)
 801061c:	ffffefff 	.word	0xffffefff

08010620 <__swrite>:
 8010620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010622:	001f      	movs	r7, r3
 8010624:	898b      	ldrh	r3, [r1, #12]
 8010626:	0005      	movs	r5, r0
 8010628:	000c      	movs	r4, r1
 801062a:	0016      	movs	r6, r2
 801062c:	05db      	lsls	r3, r3, #23
 801062e:	d505      	bpl.n	801063c <__swrite+0x1c>
 8010630:	230e      	movs	r3, #14
 8010632:	5ec9      	ldrsh	r1, [r1, r3]
 8010634:	2200      	movs	r2, #0
 8010636:	2302      	movs	r3, #2
 8010638:	f000 f85a 	bl	80106f0 <_lseek_r>
 801063c:	89a3      	ldrh	r3, [r4, #12]
 801063e:	4a05      	ldr	r2, [pc, #20]	@ (8010654 <__swrite+0x34>)
 8010640:	0028      	movs	r0, r5
 8010642:	4013      	ands	r3, r2
 8010644:	81a3      	strh	r3, [r4, #12]
 8010646:	0032      	movs	r2, r6
 8010648:	230e      	movs	r3, #14
 801064a:	5ee1      	ldrsh	r1, [r4, r3]
 801064c:	003b      	movs	r3, r7
 801064e:	f000 f877 	bl	8010740 <_write_r>
 8010652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010654:	ffffefff 	.word	0xffffefff

08010658 <__sseek>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	000c      	movs	r4, r1
 801065c:	250e      	movs	r5, #14
 801065e:	5f49      	ldrsh	r1, [r1, r5]
 8010660:	f000 f846 	bl	80106f0 <_lseek_r>
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	1c42      	adds	r2, r0, #1
 8010668:	d103      	bne.n	8010672 <__sseek+0x1a>
 801066a:	4a05      	ldr	r2, [pc, #20]	@ (8010680 <__sseek+0x28>)
 801066c:	4013      	ands	r3, r2
 801066e:	81a3      	strh	r3, [r4, #12]
 8010670:	bd70      	pop	{r4, r5, r6, pc}
 8010672:	2280      	movs	r2, #128	@ 0x80
 8010674:	0152      	lsls	r2, r2, #5
 8010676:	4313      	orrs	r3, r2
 8010678:	81a3      	strh	r3, [r4, #12]
 801067a:	6560      	str	r0, [r4, #84]	@ 0x54
 801067c:	e7f8      	b.n	8010670 <__sseek+0x18>
 801067e:	46c0      	nop			@ (mov r8, r8)
 8010680:	ffffefff 	.word	0xffffefff

08010684 <__sclose>:
 8010684:	b510      	push	{r4, lr}
 8010686:	230e      	movs	r3, #14
 8010688:	5ec9      	ldrsh	r1, [r1, r3]
 801068a:	f000 f81f 	bl	80106cc <_close_r>
 801068e:	bd10      	pop	{r4, pc}

08010690 <memset>:
 8010690:	0003      	movs	r3, r0
 8010692:	1882      	adds	r2, r0, r2
 8010694:	4293      	cmp	r3, r2
 8010696:	d100      	bne.n	801069a <memset+0xa>
 8010698:	4770      	bx	lr
 801069a:	7019      	strb	r1, [r3, #0]
 801069c:	3301      	adds	r3, #1
 801069e:	e7f9      	b.n	8010694 <memset+0x4>

080106a0 <strncmp>:
 80106a0:	b530      	push	{r4, r5, lr}
 80106a2:	0005      	movs	r5, r0
 80106a4:	1e10      	subs	r0, r2, #0
 80106a6:	d00b      	beq.n	80106c0 <strncmp+0x20>
 80106a8:	2400      	movs	r4, #0
 80106aa:	3a01      	subs	r2, #1
 80106ac:	5d2b      	ldrb	r3, [r5, r4]
 80106ae:	5d08      	ldrb	r0, [r1, r4]
 80106b0:	4283      	cmp	r3, r0
 80106b2:	d104      	bne.n	80106be <strncmp+0x1e>
 80106b4:	4294      	cmp	r4, r2
 80106b6:	d002      	beq.n	80106be <strncmp+0x1e>
 80106b8:	3401      	adds	r4, #1
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1f6      	bne.n	80106ac <strncmp+0xc>
 80106be:	1a18      	subs	r0, r3, r0
 80106c0:	bd30      	pop	{r4, r5, pc}
	...

080106c4 <_localeconv_r>:
 80106c4:	4800      	ldr	r0, [pc, #0]	@ (80106c8 <_localeconv_r+0x4>)
 80106c6:	4770      	bx	lr
 80106c8:	2000028c 	.word	0x2000028c

080106cc <_close_r>:
 80106cc:	2300      	movs	r3, #0
 80106ce:	b570      	push	{r4, r5, r6, lr}
 80106d0:	4d06      	ldr	r5, [pc, #24]	@ (80106ec <_close_r+0x20>)
 80106d2:	0004      	movs	r4, r0
 80106d4:	0008      	movs	r0, r1
 80106d6:	602b      	str	r3, [r5, #0]
 80106d8:	f7f3 fdc4 	bl	8004264 <_close>
 80106dc:	1c43      	adds	r3, r0, #1
 80106de:	d103      	bne.n	80106e8 <_close_r+0x1c>
 80106e0:	682b      	ldr	r3, [r5, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d000      	beq.n	80106e8 <_close_r+0x1c>
 80106e6:	6023      	str	r3, [r4, #0]
 80106e8:	bd70      	pop	{r4, r5, r6, pc}
 80106ea:	46c0      	nop			@ (mov r8, r8)
 80106ec:	20002298 	.word	0x20002298

080106f0 <_lseek_r>:
 80106f0:	b570      	push	{r4, r5, r6, lr}
 80106f2:	0004      	movs	r4, r0
 80106f4:	0008      	movs	r0, r1
 80106f6:	0011      	movs	r1, r2
 80106f8:	001a      	movs	r2, r3
 80106fa:	2300      	movs	r3, #0
 80106fc:	4d05      	ldr	r5, [pc, #20]	@ (8010714 <_lseek_r+0x24>)
 80106fe:	602b      	str	r3, [r5, #0]
 8010700:	f7f3 fdd1 	bl	80042a6 <_lseek>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d103      	bne.n	8010710 <_lseek_r+0x20>
 8010708:	682b      	ldr	r3, [r5, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d000      	beq.n	8010710 <_lseek_r+0x20>
 801070e:	6023      	str	r3, [r4, #0]
 8010710:	bd70      	pop	{r4, r5, r6, pc}
 8010712:	46c0      	nop			@ (mov r8, r8)
 8010714:	20002298 	.word	0x20002298

08010718 <_read_r>:
 8010718:	b570      	push	{r4, r5, r6, lr}
 801071a:	0004      	movs	r4, r0
 801071c:	0008      	movs	r0, r1
 801071e:	0011      	movs	r1, r2
 8010720:	001a      	movs	r2, r3
 8010722:	2300      	movs	r3, #0
 8010724:	4d05      	ldr	r5, [pc, #20]	@ (801073c <_read_r+0x24>)
 8010726:	602b      	str	r3, [r5, #0]
 8010728:	f7f3 fd63 	bl	80041f2 <_read>
 801072c:	1c43      	adds	r3, r0, #1
 801072e:	d103      	bne.n	8010738 <_read_r+0x20>
 8010730:	682b      	ldr	r3, [r5, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d000      	beq.n	8010738 <_read_r+0x20>
 8010736:	6023      	str	r3, [r4, #0]
 8010738:	bd70      	pop	{r4, r5, r6, pc}
 801073a:	46c0      	nop			@ (mov r8, r8)
 801073c:	20002298 	.word	0x20002298

08010740 <_write_r>:
 8010740:	b570      	push	{r4, r5, r6, lr}
 8010742:	0004      	movs	r4, r0
 8010744:	0008      	movs	r0, r1
 8010746:	0011      	movs	r1, r2
 8010748:	001a      	movs	r2, r3
 801074a:	2300      	movs	r3, #0
 801074c:	4d05      	ldr	r5, [pc, #20]	@ (8010764 <_write_r+0x24>)
 801074e:	602b      	str	r3, [r5, #0]
 8010750:	f7f3 fd6c 	bl	800422c <_write>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d103      	bne.n	8010760 <_write_r+0x20>
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d000      	beq.n	8010760 <_write_r+0x20>
 801075e:	6023      	str	r3, [r4, #0]
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	46c0      	nop			@ (mov r8, r8)
 8010764:	20002298 	.word	0x20002298

08010768 <__errno>:
 8010768:	4b01      	ldr	r3, [pc, #4]	@ (8010770 <__errno+0x8>)
 801076a:	6818      	ldr	r0, [r3, #0]
 801076c:	4770      	bx	lr
 801076e:	46c0      	nop			@ (mov r8, r8)
 8010770:	20000308 	.word	0x20000308

08010774 <__libc_init_array>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	2600      	movs	r6, #0
 8010778:	4c0c      	ldr	r4, [pc, #48]	@ (80107ac <__libc_init_array+0x38>)
 801077a:	4d0d      	ldr	r5, [pc, #52]	@ (80107b0 <__libc_init_array+0x3c>)
 801077c:	1b64      	subs	r4, r4, r5
 801077e:	10a4      	asrs	r4, r4, #2
 8010780:	42a6      	cmp	r6, r4
 8010782:	d109      	bne.n	8010798 <__libc_init_array+0x24>
 8010784:	2600      	movs	r6, #0
 8010786:	f002 fd7b 	bl	8013280 <_init>
 801078a:	4c0a      	ldr	r4, [pc, #40]	@ (80107b4 <__libc_init_array+0x40>)
 801078c:	4d0a      	ldr	r5, [pc, #40]	@ (80107b8 <__libc_init_array+0x44>)
 801078e:	1b64      	subs	r4, r4, r5
 8010790:	10a4      	asrs	r4, r4, #2
 8010792:	42a6      	cmp	r6, r4
 8010794:	d105      	bne.n	80107a2 <__libc_init_array+0x2e>
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	00b3      	lsls	r3, r6, #2
 801079a:	58eb      	ldr	r3, [r5, r3]
 801079c:	4798      	blx	r3
 801079e:	3601      	adds	r6, #1
 80107a0:	e7ee      	b.n	8010780 <__libc_init_array+0xc>
 80107a2:	00b3      	lsls	r3, r6, #2
 80107a4:	58eb      	ldr	r3, [r5, r3]
 80107a6:	4798      	blx	r3
 80107a8:	3601      	adds	r6, #1
 80107aa:	e7f2      	b.n	8010792 <__libc_init_array+0x1e>
 80107ac:	08013934 	.word	0x08013934
 80107b0:	08013934 	.word	0x08013934
 80107b4:	08013938 	.word	0x08013938
 80107b8:	08013934 	.word	0x08013934

080107bc <__retarget_lock_init_recursive>:
 80107bc:	4770      	bx	lr

080107be <__retarget_lock_acquire_recursive>:
 80107be:	4770      	bx	lr

080107c0 <__retarget_lock_release_recursive>:
 80107c0:	4770      	bx	lr

080107c2 <memchr>:
 80107c2:	b2c9      	uxtb	r1, r1
 80107c4:	1882      	adds	r2, r0, r2
 80107c6:	4290      	cmp	r0, r2
 80107c8:	d101      	bne.n	80107ce <memchr+0xc>
 80107ca:	2000      	movs	r0, #0
 80107cc:	4770      	bx	lr
 80107ce:	7803      	ldrb	r3, [r0, #0]
 80107d0:	428b      	cmp	r3, r1
 80107d2:	d0fb      	beq.n	80107cc <memchr+0xa>
 80107d4:	3001      	adds	r0, #1
 80107d6:	e7f6      	b.n	80107c6 <memchr+0x4>

080107d8 <memcpy>:
 80107d8:	2300      	movs	r3, #0
 80107da:	b510      	push	{r4, lr}
 80107dc:	429a      	cmp	r2, r3
 80107de:	d100      	bne.n	80107e2 <memcpy+0xa>
 80107e0:	bd10      	pop	{r4, pc}
 80107e2:	5ccc      	ldrb	r4, [r1, r3]
 80107e4:	54c4      	strb	r4, [r0, r3]
 80107e6:	3301      	adds	r3, #1
 80107e8:	e7f8      	b.n	80107dc <memcpy+0x4>
	...

080107ec <nan>:
 80107ec:	2000      	movs	r0, #0
 80107ee:	4901      	ldr	r1, [pc, #4]	@ (80107f4 <nan+0x8>)
 80107f0:	4770      	bx	lr
 80107f2:	46c0      	nop			@ (mov r8, r8)
 80107f4:	7ff80000 	.word	0x7ff80000

080107f8 <quorem>:
 80107f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fa:	6903      	ldr	r3, [r0, #16]
 80107fc:	690c      	ldr	r4, [r1, #16]
 80107fe:	b089      	sub	sp, #36	@ 0x24
 8010800:	9003      	str	r0, [sp, #12]
 8010802:	9106      	str	r1, [sp, #24]
 8010804:	2000      	movs	r0, #0
 8010806:	42a3      	cmp	r3, r4
 8010808:	db63      	blt.n	80108d2 <quorem+0xda>
 801080a:	000b      	movs	r3, r1
 801080c:	3c01      	subs	r4, #1
 801080e:	3314      	adds	r3, #20
 8010810:	00a5      	lsls	r5, r4, #2
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	195b      	adds	r3, r3, r5
 8010816:	9305      	str	r3, [sp, #20]
 8010818:	9b03      	ldr	r3, [sp, #12]
 801081a:	3314      	adds	r3, #20
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	195d      	adds	r5, r3, r5
 8010820:	9b05      	ldr	r3, [sp, #20]
 8010822:	682f      	ldr	r7, [r5, #0]
 8010824:	681e      	ldr	r6, [r3, #0]
 8010826:	0038      	movs	r0, r7
 8010828:	3601      	adds	r6, #1
 801082a:	0031      	movs	r1, r6
 801082c:	f7ef fc84 	bl	8000138 <__udivsi3>
 8010830:	9002      	str	r0, [sp, #8]
 8010832:	42b7      	cmp	r7, r6
 8010834:	d327      	bcc.n	8010886 <quorem+0x8e>
 8010836:	9b04      	ldr	r3, [sp, #16]
 8010838:	2700      	movs	r7, #0
 801083a:	469c      	mov	ip, r3
 801083c:	9e01      	ldr	r6, [sp, #4]
 801083e:	9707      	str	r7, [sp, #28]
 8010840:	4662      	mov	r2, ip
 8010842:	ca08      	ldmia	r2!, {r3}
 8010844:	6830      	ldr	r0, [r6, #0]
 8010846:	4694      	mov	ip, r2
 8010848:	9a02      	ldr	r2, [sp, #8]
 801084a:	b299      	uxth	r1, r3
 801084c:	4351      	muls	r1, r2
 801084e:	0c1b      	lsrs	r3, r3, #16
 8010850:	4353      	muls	r3, r2
 8010852:	19c9      	adds	r1, r1, r7
 8010854:	0c0a      	lsrs	r2, r1, #16
 8010856:	189b      	adds	r3, r3, r2
 8010858:	b289      	uxth	r1, r1
 801085a:	b282      	uxth	r2, r0
 801085c:	1a52      	subs	r2, r2, r1
 801085e:	9907      	ldr	r1, [sp, #28]
 8010860:	0c1f      	lsrs	r7, r3, #16
 8010862:	1852      	adds	r2, r2, r1
 8010864:	0c00      	lsrs	r0, r0, #16
 8010866:	b29b      	uxth	r3, r3
 8010868:	1411      	asrs	r1, r2, #16
 801086a:	1ac3      	subs	r3, r0, r3
 801086c:	185b      	adds	r3, r3, r1
 801086e:	1419      	asrs	r1, r3, #16
 8010870:	b292      	uxth	r2, r2
 8010872:	041b      	lsls	r3, r3, #16
 8010874:	431a      	orrs	r2, r3
 8010876:	9b05      	ldr	r3, [sp, #20]
 8010878:	9107      	str	r1, [sp, #28]
 801087a:	c604      	stmia	r6!, {r2}
 801087c:	4563      	cmp	r3, ip
 801087e:	d2df      	bcs.n	8010840 <quorem+0x48>
 8010880:	682b      	ldr	r3, [r5, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d02b      	beq.n	80108de <quorem+0xe6>
 8010886:	9906      	ldr	r1, [sp, #24]
 8010888:	9803      	ldr	r0, [sp, #12]
 801088a:	f001 fd6f 	bl	801236c <__mcmp>
 801088e:	2800      	cmp	r0, #0
 8010890:	db1e      	blt.n	80108d0 <quorem+0xd8>
 8010892:	2600      	movs	r6, #0
 8010894:	9d01      	ldr	r5, [sp, #4]
 8010896:	9904      	ldr	r1, [sp, #16]
 8010898:	c901      	ldmia	r1!, {r0}
 801089a:	682b      	ldr	r3, [r5, #0]
 801089c:	b287      	uxth	r7, r0
 801089e:	b29a      	uxth	r2, r3
 80108a0:	1bd2      	subs	r2, r2, r7
 80108a2:	1992      	adds	r2, r2, r6
 80108a4:	0c00      	lsrs	r0, r0, #16
 80108a6:	0c1b      	lsrs	r3, r3, #16
 80108a8:	1a1b      	subs	r3, r3, r0
 80108aa:	1410      	asrs	r0, r2, #16
 80108ac:	181b      	adds	r3, r3, r0
 80108ae:	141e      	asrs	r6, r3, #16
 80108b0:	b292      	uxth	r2, r2
 80108b2:	041b      	lsls	r3, r3, #16
 80108b4:	431a      	orrs	r2, r3
 80108b6:	9b05      	ldr	r3, [sp, #20]
 80108b8:	c504      	stmia	r5!, {r2}
 80108ba:	428b      	cmp	r3, r1
 80108bc:	d2ec      	bcs.n	8010898 <quorem+0xa0>
 80108be:	9a01      	ldr	r2, [sp, #4]
 80108c0:	00a3      	lsls	r3, r4, #2
 80108c2:	18d3      	adds	r3, r2, r3
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	d014      	beq.n	80108f4 <quorem+0xfc>
 80108ca:	9b02      	ldr	r3, [sp, #8]
 80108cc:	3301      	adds	r3, #1
 80108ce:	9302      	str	r3, [sp, #8]
 80108d0:	9802      	ldr	r0, [sp, #8]
 80108d2:	b009      	add	sp, #36	@ 0x24
 80108d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <quorem+0xee>
 80108dc:	3c01      	subs	r4, #1
 80108de:	9b01      	ldr	r3, [sp, #4]
 80108e0:	3d04      	subs	r5, #4
 80108e2:	42ab      	cmp	r3, r5
 80108e4:	d3f7      	bcc.n	80108d6 <quorem+0xde>
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	611c      	str	r4, [r3, #16]
 80108ea:	e7cc      	b.n	8010886 <quorem+0x8e>
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	2a00      	cmp	r2, #0
 80108f0:	d104      	bne.n	80108fc <quorem+0x104>
 80108f2:	3c01      	subs	r4, #1
 80108f4:	9a01      	ldr	r2, [sp, #4]
 80108f6:	3b04      	subs	r3, #4
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d3f7      	bcc.n	80108ec <quorem+0xf4>
 80108fc:	9b03      	ldr	r3, [sp, #12]
 80108fe:	611c      	str	r4, [r3, #16]
 8010900:	e7e3      	b.n	80108ca <quorem+0xd2>
	...

08010904 <_dtoa_r>:
 8010904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010906:	0014      	movs	r4, r2
 8010908:	001d      	movs	r5, r3
 801090a:	69c6      	ldr	r6, [r0, #28]
 801090c:	b09d      	sub	sp, #116	@ 0x74
 801090e:	940a      	str	r4, [sp, #40]	@ 0x28
 8010910:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010912:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8010914:	9003      	str	r0, [sp, #12]
 8010916:	2e00      	cmp	r6, #0
 8010918:	d10f      	bne.n	801093a <_dtoa_r+0x36>
 801091a:	2010      	movs	r0, #16
 801091c:	f001 f986 	bl	8011c2c <malloc>
 8010920:	9b03      	ldr	r3, [sp, #12]
 8010922:	1e02      	subs	r2, r0, #0
 8010924:	61d8      	str	r0, [r3, #28]
 8010926:	d104      	bne.n	8010932 <_dtoa_r+0x2e>
 8010928:	21ef      	movs	r1, #239	@ 0xef
 801092a:	4bc7      	ldr	r3, [pc, #796]	@ (8010c48 <_dtoa_r+0x344>)
 801092c:	48c7      	ldr	r0, [pc, #796]	@ (8010c4c <_dtoa_r+0x348>)
 801092e:	f002 f94f 	bl	8012bd0 <__assert_func>
 8010932:	6046      	str	r6, [r0, #4]
 8010934:	6086      	str	r6, [r0, #8]
 8010936:	6006      	str	r6, [r0, #0]
 8010938:	60c6      	str	r6, [r0, #12]
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	6819      	ldr	r1, [r3, #0]
 8010940:	2900      	cmp	r1, #0
 8010942:	d00b      	beq.n	801095c <_dtoa_r+0x58>
 8010944:	685a      	ldr	r2, [r3, #4]
 8010946:	2301      	movs	r3, #1
 8010948:	4093      	lsls	r3, r2
 801094a:	604a      	str	r2, [r1, #4]
 801094c:	608b      	str	r3, [r1, #8]
 801094e:	9803      	ldr	r0, [sp, #12]
 8010950:	f001 fa7e 	bl	8011e50 <_Bfree>
 8010954:	2200      	movs	r2, #0
 8010956:	9b03      	ldr	r3, [sp, #12]
 8010958:	69db      	ldr	r3, [r3, #28]
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	2d00      	cmp	r5, #0
 801095e:	da1e      	bge.n	801099e <_dtoa_r+0x9a>
 8010960:	2301      	movs	r3, #1
 8010962:	603b      	str	r3, [r7, #0]
 8010964:	006b      	lsls	r3, r5, #1
 8010966:	085b      	lsrs	r3, r3, #1
 8010968:	930b      	str	r3, [sp, #44]	@ 0x2c
 801096a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801096c:	4bb8      	ldr	r3, [pc, #736]	@ (8010c50 <_dtoa_r+0x34c>)
 801096e:	4ab8      	ldr	r2, [pc, #736]	@ (8010c50 <_dtoa_r+0x34c>)
 8010970:	403b      	ands	r3, r7
 8010972:	4293      	cmp	r3, r2
 8010974:	d116      	bne.n	80109a4 <_dtoa_r+0xa0>
 8010976:	4bb7      	ldr	r3, [pc, #732]	@ (8010c54 <_dtoa_r+0x350>)
 8010978:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	033b      	lsls	r3, r7, #12
 801097e:	0b1b      	lsrs	r3, r3, #12
 8010980:	4323      	orrs	r3, r4
 8010982:	d101      	bne.n	8010988 <_dtoa_r+0x84>
 8010984:	f000 fd80 	bl	8011488 <_dtoa_r+0xb84>
 8010988:	4bb3      	ldr	r3, [pc, #716]	@ (8010c58 <_dtoa_r+0x354>)
 801098a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801098c:	9308      	str	r3, [sp, #32]
 801098e:	2a00      	cmp	r2, #0
 8010990:	d002      	beq.n	8010998 <_dtoa_r+0x94>
 8010992:	4bb2      	ldr	r3, [pc, #712]	@ (8010c5c <_dtoa_r+0x358>)
 8010994:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010996:	6013      	str	r3, [r2, #0]
 8010998:	9808      	ldr	r0, [sp, #32]
 801099a:	b01d      	add	sp, #116	@ 0x74
 801099c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801099e:	2300      	movs	r3, #0
 80109a0:	603b      	str	r3, [r7, #0]
 80109a2:	e7e2      	b.n	801096a <_dtoa_r+0x66>
 80109a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109a8:	9212      	str	r2, [sp, #72]	@ 0x48
 80109aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80109ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80109ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80109b0:	2200      	movs	r2, #0
 80109b2:	2300      	movs	r3, #0
 80109b4:	f7ef fd46 	bl	8000444 <__aeabi_dcmpeq>
 80109b8:	1e06      	subs	r6, r0, #0
 80109ba:	d00b      	beq.n	80109d4 <_dtoa_r+0xd0>
 80109bc:	2301      	movs	r3, #1
 80109be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80109c0:	6013      	str	r3, [r2, #0]
 80109c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <_dtoa_r+0xca>
 80109c8:	4ba5      	ldr	r3, [pc, #660]	@ (8010c60 <_dtoa_r+0x35c>)
 80109ca:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80109cc:	6013      	str	r3, [r2, #0]
 80109ce:	4ba5      	ldr	r3, [pc, #660]	@ (8010c64 <_dtoa_r+0x360>)
 80109d0:	9308      	str	r3, [sp, #32]
 80109d2:	e7e1      	b.n	8010998 <_dtoa_r+0x94>
 80109d4:	ab1a      	add	r3, sp, #104	@ 0x68
 80109d6:	9301      	str	r3, [sp, #4]
 80109d8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80109da:	9300      	str	r3, [sp, #0]
 80109dc:	9803      	ldr	r0, [sp, #12]
 80109de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80109e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109e2:	f001 fde5 	bl	80125b0 <__d2b>
 80109e6:	007a      	lsls	r2, r7, #1
 80109e8:	9005      	str	r0, [sp, #20]
 80109ea:	0d52      	lsrs	r2, r2, #21
 80109ec:	d100      	bne.n	80109f0 <_dtoa_r+0xec>
 80109ee:	e07b      	b.n	8010ae8 <_dtoa_r+0x1e4>
 80109f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80109f2:	9618      	str	r6, [sp, #96]	@ 0x60
 80109f4:	0319      	lsls	r1, r3, #12
 80109f6:	4b9c      	ldr	r3, [pc, #624]	@ (8010c68 <_dtoa_r+0x364>)
 80109f8:	0b09      	lsrs	r1, r1, #12
 80109fa:	430b      	orrs	r3, r1
 80109fc:	499b      	ldr	r1, [pc, #620]	@ (8010c6c <_dtoa_r+0x368>)
 80109fe:	1857      	adds	r7, r2, r1
 8010a00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010a02:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010a04:	0019      	movs	r1, r3
 8010a06:	2200      	movs	r2, #0
 8010a08:	4b99      	ldr	r3, [pc, #612]	@ (8010c70 <_dtoa_r+0x36c>)
 8010a0a:	f7f1 f89d 	bl	8001b48 <__aeabi_dsub>
 8010a0e:	4a99      	ldr	r2, [pc, #612]	@ (8010c74 <_dtoa_r+0x370>)
 8010a10:	4b99      	ldr	r3, [pc, #612]	@ (8010c78 <_dtoa_r+0x374>)
 8010a12:	f7f0 fdb3 	bl	800157c <__aeabi_dmul>
 8010a16:	4a99      	ldr	r2, [pc, #612]	@ (8010c7c <_dtoa_r+0x378>)
 8010a18:	4b99      	ldr	r3, [pc, #612]	@ (8010c80 <_dtoa_r+0x37c>)
 8010a1a:	f7ef fdaf 	bl	800057c <__aeabi_dadd>
 8010a1e:	0004      	movs	r4, r0
 8010a20:	0038      	movs	r0, r7
 8010a22:	000d      	movs	r5, r1
 8010a24:	f7f1 fcf8 	bl	8002418 <__aeabi_i2d>
 8010a28:	4a96      	ldr	r2, [pc, #600]	@ (8010c84 <_dtoa_r+0x380>)
 8010a2a:	4b97      	ldr	r3, [pc, #604]	@ (8010c88 <_dtoa_r+0x384>)
 8010a2c:	f7f0 fda6 	bl	800157c <__aeabi_dmul>
 8010a30:	0002      	movs	r2, r0
 8010a32:	000b      	movs	r3, r1
 8010a34:	0020      	movs	r0, r4
 8010a36:	0029      	movs	r1, r5
 8010a38:	f7ef fda0 	bl	800057c <__aeabi_dadd>
 8010a3c:	0004      	movs	r4, r0
 8010a3e:	000d      	movs	r5, r1
 8010a40:	f7f1 fcae 	bl	80023a0 <__aeabi_d2iz>
 8010a44:	2200      	movs	r2, #0
 8010a46:	9004      	str	r0, [sp, #16]
 8010a48:	2300      	movs	r3, #0
 8010a4a:	0020      	movs	r0, r4
 8010a4c:	0029      	movs	r1, r5
 8010a4e:	f7ef fcff 	bl	8000450 <__aeabi_dcmplt>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d00b      	beq.n	8010a6e <_dtoa_r+0x16a>
 8010a56:	9804      	ldr	r0, [sp, #16]
 8010a58:	f7f1 fcde 	bl	8002418 <__aeabi_i2d>
 8010a5c:	002b      	movs	r3, r5
 8010a5e:	0022      	movs	r2, r4
 8010a60:	f7ef fcf0 	bl	8000444 <__aeabi_dcmpeq>
 8010a64:	4243      	negs	r3, r0
 8010a66:	4158      	adcs	r0, r3
 8010a68:	9b04      	ldr	r3, [sp, #16]
 8010a6a:	1a1b      	subs	r3, r3, r0
 8010a6c:	9304      	str	r3, [sp, #16]
 8010a6e:	2301      	movs	r3, #1
 8010a70:	9315      	str	r3, [sp, #84]	@ 0x54
 8010a72:	9b04      	ldr	r3, [sp, #16]
 8010a74:	2b16      	cmp	r3, #22
 8010a76:	d810      	bhi.n	8010a9a <_dtoa_r+0x196>
 8010a78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010a7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010a7c:	9a04      	ldr	r2, [sp, #16]
 8010a7e:	4b83      	ldr	r3, [pc, #524]	@ (8010c8c <_dtoa_r+0x388>)
 8010a80:	00d2      	lsls	r2, r2, #3
 8010a82:	189b      	adds	r3, r3, r2
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	f7ef fce2 	bl	8000450 <__aeabi_dcmplt>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d047      	beq.n	8010b20 <_dtoa_r+0x21c>
 8010a90:	9b04      	ldr	r3, [sp, #16]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	9304      	str	r3, [sp, #16]
 8010a96:	2300      	movs	r3, #0
 8010a98:	9315      	str	r3, [sp, #84]	@ 0x54
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010a9e:	9206      	str	r2, [sp, #24]
 8010aa0:	1bdb      	subs	r3, r3, r7
 8010aa2:	1e5a      	subs	r2, r3, #1
 8010aa4:	d53e      	bpl.n	8010b24 <_dtoa_r+0x220>
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	1ad3      	subs	r3, r2, r3
 8010aaa:	9306      	str	r3, [sp, #24]
 8010aac:	2300      	movs	r3, #0
 8010aae:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ab0:	9b04      	ldr	r3, [sp, #16]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	db38      	blt.n	8010b28 <_dtoa_r+0x224>
 8010ab6:	9a04      	ldr	r2, [sp, #16]
 8010ab8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010aba:	4694      	mov	ip, r2
 8010abc:	4463      	add	r3, ip
 8010abe:	930d      	str	r3, [sp, #52]	@ 0x34
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	9214      	str	r2, [sp, #80]	@ 0x50
 8010ac4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ac6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010ac8:	2401      	movs	r4, #1
 8010aca:	2b09      	cmp	r3, #9
 8010acc:	d862      	bhi.n	8010b94 <_dtoa_r+0x290>
 8010ace:	2b05      	cmp	r3, #5
 8010ad0:	dd02      	ble.n	8010ad8 <_dtoa_r+0x1d4>
 8010ad2:	2400      	movs	r4, #0
 8010ad4:	3b04      	subs	r3, #4
 8010ad6:	9322      	str	r3, [sp, #136]	@ 0x88
 8010ad8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010ada:	1e98      	subs	r0, r3, #2
 8010adc:	2803      	cmp	r0, #3
 8010ade:	d863      	bhi.n	8010ba8 <_dtoa_r+0x2a4>
 8010ae0:	f7ef fb16 	bl	8000110 <__gnu_thumb1_case_uqi>
 8010ae4:	2b385654 	.word	0x2b385654
 8010ae8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010aea:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010aec:	18f6      	adds	r6, r6, r3
 8010aee:	4b68      	ldr	r3, [pc, #416]	@ (8010c90 <_dtoa_r+0x38c>)
 8010af0:	18f2      	adds	r2, r6, r3
 8010af2:	2a20      	cmp	r2, #32
 8010af4:	dd0f      	ble.n	8010b16 <_dtoa_r+0x212>
 8010af6:	2340      	movs	r3, #64	@ 0x40
 8010af8:	1a9b      	subs	r3, r3, r2
 8010afa:	409f      	lsls	r7, r3
 8010afc:	4b65      	ldr	r3, [pc, #404]	@ (8010c94 <_dtoa_r+0x390>)
 8010afe:	0038      	movs	r0, r7
 8010b00:	18f3      	adds	r3, r6, r3
 8010b02:	40dc      	lsrs	r4, r3
 8010b04:	4320      	orrs	r0, r4
 8010b06:	f7f1 fcb5 	bl	8002474 <__aeabi_ui2d>
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	4b62      	ldr	r3, [pc, #392]	@ (8010c98 <_dtoa_r+0x394>)
 8010b0e:	1e77      	subs	r7, r6, #1
 8010b10:	18cb      	adds	r3, r1, r3
 8010b12:	9218      	str	r2, [sp, #96]	@ 0x60
 8010b14:	e776      	b.n	8010a04 <_dtoa_r+0x100>
 8010b16:	2320      	movs	r3, #32
 8010b18:	0020      	movs	r0, r4
 8010b1a:	1a9b      	subs	r3, r3, r2
 8010b1c:	4098      	lsls	r0, r3
 8010b1e:	e7f2      	b.n	8010b06 <_dtoa_r+0x202>
 8010b20:	9015      	str	r0, [sp, #84]	@ 0x54
 8010b22:	e7ba      	b.n	8010a9a <_dtoa_r+0x196>
 8010b24:	920d      	str	r2, [sp, #52]	@ 0x34
 8010b26:	e7c3      	b.n	8010ab0 <_dtoa_r+0x1ac>
 8010b28:	9b06      	ldr	r3, [sp, #24]
 8010b2a:	9a04      	ldr	r2, [sp, #16]
 8010b2c:	1a9b      	subs	r3, r3, r2
 8010b2e:	9306      	str	r3, [sp, #24]
 8010b30:	4253      	negs	r3, r2
 8010b32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b34:	2300      	movs	r3, #0
 8010b36:	9314      	str	r3, [sp, #80]	@ 0x50
 8010b38:	e7c5      	b.n	8010ac6 <_dtoa_r+0x1c2>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b40:	4694      	mov	ip, r2
 8010b42:	9b04      	ldr	r3, [sp, #16]
 8010b44:	4463      	add	r3, ip
 8010b46:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b48:	3301      	adds	r3, #1
 8010b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	dc08      	bgt.n	8010b62 <_dtoa_r+0x25e>
 8010b50:	2301      	movs	r3, #1
 8010b52:	e006      	b.n	8010b62 <_dtoa_r+0x25e>
 8010b54:	2301      	movs	r3, #1
 8010b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b58:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	dd28      	ble.n	8010bb0 <_dtoa_r+0x2ac>
 8010b5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b62:	9a03      	ldr	r2, [sp, #12]
 8010b64:	2100      	movs	r1, #0
 8010b66:	69d0      	ldr	r0, [r2, #28]
 8010b68:	2204      	movs	r2, #4
 8010b6a:	0015      	movs	r5, r2
 8010b6c:	3514      	adds	r5, #20
 8010b6e:	429d      	cmp	r5, r3
 8010b70:	d923      	bls.n	8010bba <_dtoa_r+0x2b6>
 8010b72:	6041      	str	r1, [r0, #4]
 8010b74:	9803      	ldr	r0, [sp, #12]
 8010b76:	f001 f927 	bl	8011dc8 <_Balloc>
 8010b7a:	9008      	str	r0, [sp, #32]
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d11f      	bne.n	8010bc0 <_dtoa_r+0x2bc>
 8010b80:	21b0      	movs	r1, #176	@ 0xb0
 8010b82:	4b46      	ldr	r3, [pc, #280]	@ (8010c9c <_dtoa_r+0x398>)
 8010b84:	4831      	ldr	r0, [pc, #196]	@ (8010c4c <_dtoa_r+0x348>)
 8010b86:	9a08      	ldr	r2, [sp, #32]
 8010b88:	31ff      	adds	r1, #255	@ 0xff
 8010b8a:	e6d0      	b.n	801092e <_dtoa_r+0x2a>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	e7e2      	b.n	8010b56 <_dtoa_r+0x252>
 8010b90:	2300      	movs	r3, #0
 8010b92:	e7d3      	b.n	8010b3c <_dtoa_r+0x238>
 8010b94:	2300      	movs	r3, #0
 8010b96:	9410      	str	r4, [sp, #64]	@ 0x40
 8010b98:	9322      	str	r3, [sp, #136]	@ 0x88
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ba2:	3313      	adds	r3, #19
 8010ba4:	9223      	str	r2, [sp, #140]	@ 0x8c
 8010ba6:	e7dc      	b.n	8010b62 <_dtoa_r+0x25e>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	9310      	str	r3, [sp, #64]	@ 0x40
 8010bac:	3b02      	subs	r3, #2
 8010bae:	e7f5      	b.n	8010b9c <_dtoa_r+0x298>
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	001a      	movs	r2, r3
 8010bb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8010bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bb8:	e7f4      	b.n	8010ba4 <_dtoa_r+0x2a0>
 8010bba:	3101      	adds	r1, #1
 8010bbc:	0052      	lsls	r2, r2, #1
 8010bbe:	e7d4      	b.n	8010b6a <_dtoa_r+0x266>
 8010bc0:	9b03      	ldr	r3, [sp, #12]
 8010bc2:	9a08      	ldr	r2, [sp, #32]
 8010bc4:	69db      	ldr	r3, [r3, #28]
 8010bc6:	601a      	str	r2, [r3, #0]
 8010bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bca:	2b0e      	cmp	r3, #14
 8010bcc:	d900      	bls.n	8010bd0 <_dtoa_r+0x2cc>
 8010bce:	e0d6      	b.n	8010d7e <_dtoa_r+0x47a>
 8010bd0:	2c00      	cmp	r4, #0
 8010bd2:	d100      	bne.n	8010bd6 <_dtoa_r+0x2d2>
 8010bd4:	e0d3      	b.n	8010d7e <_dtoa_r+0x47a>
 8010bd6:	9b04      	ldr	r3, [sp, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dd63      	ble.n	8010ca4 <_dtoa_r+0x3a0>
 8010bdc:	210f      	movs	r1, #15
 8010bde:	9a04      	ldr	r2, [sp, #16]
 8010be0:	4b2a      	ldr	r3, [pc, #168]	@ (8010c8c <_dtoa_r+0x388>)
 8010be2:	400a      	ands	r2, r1
 8010be4:	00d2      	lsls	r2, r2, #3
 8010be6:	189b      	adds	r3, r3, r2
 8010be8:	681e      	ldr	r6, [r3, #0]
 8010bea:	685f      	ldr	r7, [r3, #4]
 8010bec:	9b04      	ldr	r3, [sp, #16]
 8010bee:	2402      	movs	r4, #2
 8010bf0:	111d      	asrs	r5, r3, #4
 8010bf2:	05db      	lsls	r3, r3, #23
 8010bf4:	d50a      	bpl.n	8010c0c <_dtoa_r+0x308>
 8010bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8010ca0 <_dtoa_r+0x39c>)
 8010bf8:	400d      	ands	r5, r1
 8010bfa:	6a1a      	ldr	r2, [r3, #32]
 8010bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bfe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010c00:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010c02:	f7f0 f881 	bl	8000d08 <__aeabi_ddiv>
 8010c06:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c08:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010c0a:	3401      	adds	r4, #1
 8010c0c:	4b24      	ldr	r3, [pc, #144]	@ (8010ca0 <_dtoa_r+0x39c>)
 8010c0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c10:	2d00      	cmp	r5, #0
 8010c12:	d108      	bne.n	8010c26 <_dtoa_r+0x322>
 8010c14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c18:	0032      	movs	r2, r6
 8010c1a:	003b      	movs	r3, r7
 8010c1c:	f7f0 f874 	bl	8000d08 <__aeabi_ddiv>
 8010c20:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010c24:	e059      	b.n	8010cda <_dtoa_r+0x3d6>
 8010c26:	2301      	movs	r3, #1
 8010c28:	421d      	tst	r5, r3
 8010c2a:	d009      	beq.n	8010c40 <_dtoa_r+0x33c>
 8010c2c:	18e4      	adds	r4, r4, r3
 8010c2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c30:	0030      	movs	r0, r6
 8010c32:	681a      	ldr	r2, [r3, #0]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	0039      	movs	r1, r7
 8010c38:	f7f0 fca0 	bl	800157c <__aeabi_dmul>
 8010c3c:	0006      	movs	r6, r0
 8010c3e:	000f      	movs	r7, r1
 8010c40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c42:	106d      	asrs	r5, r5, #1
 8010c44:	3308      	adds	r3, #8
 8010c46:	e7e2      	b.n	8010c0e <_dtoa_r+0x30a>
 8010c48:	08013557 	.word	0x08013557
 8010c4c:	0801356e 	.word	0x0801356e
 8010c50:	7ff00000 	.word	0x7ff00000
 8010c54:	0000270f 	.word	0x0000270f
 8010c58:	08013553 	.word	0x08013553
 8010c5c:	08013556 	.word	0x08013556
 8010c60:	0801351f 	.word	0x0801351f
 8010c64:	0801351e 	.word	0x0801351e
 8010c68:	3ff00000 	.word	0x3ff00000
 8010c6c:	fffffc01 	.word	0xfffffc01
 8010c70:	3ff80000 	.word	0x3ff80000
 8010c74:	636f4361 	.word	0x636f4361
 8010c78:	3fd287a7 	.word	0x3fd287a7
 8010c7c:	8b60c8b3 	.word	0x8b60c8b3
 8010c80:	3fc68a28 	.word	0x3fc68a28
 8010c84:	509f79fb 	.word	0x509f79fb
 8010c88:	3fd34413 	.word	0x3fd34413
 8010c8c:	08013768 	.word	0x08013768
 8010c90:	00000432 	.word	0x00000432
 8010c94:	00000412 	.word	0x00000412
 8010c98:	fe100000 	.word	0xfe100000
 8010c9c:	080135c6 	.word	0x080135c6
 8010ca0:	08013740 	.word	0x08013740
 8010ca4:	9b04      	ldr	r3, [sp, #16]
 8010ca6:	2402      	movs	r4, #2
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d016      	beq.n	8010cda <_dtoa_r+0x3d6>
 8010cac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010cae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010cb0:	220f      	movs	r2, #15
 8010cb2:	425d      	negs	r5, r3
 8010cb4:	402a      	ands	r2, r5
 8010cb6:	4bd5      	ldr	r3, [pc, #852]	@ (801100c <_dtoa_r+0x708>)
 8010cb8:	00d2      	lsls	r2, r2, #3
 8010cba:	189b      	adds	r3, r3, r2
 8010cbc:	681a      	ldr	r2, [r3, #0]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	f7f0 fc5c 	bl	800157c <__aeabi_dmul>
 8010cc4:	2701      	movs	r7, #1
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8010cca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010ccc:	4ed0      	ldr	r6, [pc, #832]	@ (8011010 <_dtoa_r+0x70c>)
 8010cce:	112d      	asrs	r5, r5, #4
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	d000      	beq.n	8010cd6 <_dtoa_r+0x3d2>
 8010cd4:	e095      	b.n	8010e02 <_dtoa_r+0x4fe>
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1a2      	bne.n	8010c20 <_dtoa_r+0x31c>
 8010cda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010cdc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010cde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d100      	bne.n	8010ce6 <_dtoa_r+0x3e2>
 8010ce4:	e098      	b.n	8010e18 <_dtoa_r+0x514>
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	0030      	movs	r0, r6
 8010cea:	0039      	movs	r1, r7
 8010cec:	4bc9      	ldr	r3, [pc, #804]	@ (8011014 <_dtoa_r+0x710>)
 8010cee:	f7ef fbaf 	bl	8000450 <__aeabi_dcmplt>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d100      	bne.n	8010cf8 <_dtoa_r+0x3f4>
 8010cf6:	e08f      	b.n	8010e18 <_dtoa_r+0x514>
 8010cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d100      	bne.n	8010d00 <_dtoa_r+0x3fc>
 8010cfe:	e08b      	b.n	8010e18 <_dtoa_r+0x514>
 8010d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	dd37      	ble.n	8010d76 <_dtoa_r+0x472>
 8010d06:	9b04      	ldr	r3, [sp, #16]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d0e:	0030      	movs	r0, r6
 8010d10:	4bc1      	ldr	r3, [pc, #772]	@ (8011018 <_dtoa_r+0x714>)
 8010d12:	0039      	movs	r1, r7
 8010d14:	f7f0 fc32 	bl	800157c <__aeabi_dmul>
 8010d18:	900a      	str	r0, [sp, #40]	@ 0x28
 8010d1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d1e:	3401      	adds	r4, #1
 8010d20:	0020      	movs	r0, r4
 8010d22:	9311      	str	r3, [sp, #68]	@ 0x44
 8010d24:	f7f1 fb78 	bl	8002418 <__aeabi_i2d>
 8010d28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d2c:	f7f0 fc26 	bl	800157c <__aeabi_dmul>
 8010d30:	4bba      	ldr	r3, [pc, #744]	@ (801101c <_dtoa_r+0x718>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	f7ef fc22 	bl	800057c <__aeabi_dadd>
 8010d38:	4bb9      	ldr	r3, [pc, #740]	@ (8011020 <_dtoa_r+0x71c>)
 8010d3a:	0006      	movs	r6, r0
 8010d3c:	18cf      	adds	r7, r1, r3
 8010d3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d16d      	bne.n	8010e20 <_dtoa_r+0x51c>
 8010d44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010d46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d48:	2200      	movs	r2, #0
 8010d4a:	4bb6      	ldr	r3, [pc, #728]	@ (8011024 <_dtoa_r+0x720>)
 8010d4c:	f7f0 fefc 	bl	8001b48 <__aeabi_dsub>
 8010d50:	0032      	movs	r2, r6
 8010d52:	003b      	movs	r3, r7
 8010d54:	0004      	movs	r4, r0
 8010d56:	000d      	movs	r5, r1
 8010d58:	f7ef fb8e 	bl	8000478 <__aeabi_dcmpgt>
 8010d5c:	2800      	cmp	r0, #0
 8010d5e:	d000      	beq.n	8010d62 <_dtoa_r+0x45e>
 8010d60:	e2b6      	b.n	80112d0 <_dtoa_r+0x9cc>
 8010d62:	2180      	movs	r1, #128	@ 0x80
 8010d64:	0609      	lsls	r1, r1, #24
 8010d66:	187b      	adds	r3, r7, r1
 8010d68:	0032      	movs	r2, r6
 8010d6a:	0020      	movs	r0, r4
 8010d6c:	0029      	movs	r1, r5
 8010d6e:	f7ef fb6f 	bl	8000450 <__aeabi_dcmplt>
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d128      	bne.n	8010dc8 <_dtoa_r+0x4c4>
 8010d76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010d78:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	da00      	bge.n	8010d86 <_dtoa_r+0x482>
 8010d84:	e174      	b.n	8011070 <_dtoa_r+0x76c>
 8010d86:	9a04      	ldr	r2, [sp, #16]
 8010d88:	2a0e      	cmp	r2, #14
 8010d8a:	dd00      	ble.n	8010d8e <_dtoa_r+0x48a>
 8010d8c:	e170      	b.n	8011070 <_dtoa_r+0x76c>
 8010d8e:	4b9f      	ldr	r3, [pc, #636]	@ (801100c <_dtoa_r+0x708>)
 8010d90:	00d2      	lsls	r2, r2, #3
 8010d92:	189b      	adds	r3, r3, r2
 8010d94:	685c      	ldr	r4, [r3, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	9306      	str	r3, [sp, #24]
 8010d9a:	9407      	str	r4, [sp, #28]
 8010d9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	db00      	blt.n	8010da4 <_dtoa_r+0x4a0>
 8010da2:	e0e7      	b.n	8010f74 <_dtoa_r+0x670>
 8010da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	dd00      	ble.n	8010dac <_dtoa_r+0x4a8>
 8010daa:	e0e3      	b.n	8010f74 <_dtoa_r+0x670>
 8010dac:	d10c      	bne.n	8010dc8 <_dtoa_r+0x4c4>
 8010dae:	9806      	ldr	r0, [sp, #24]
 8010db0:	9907      	ldr	r1, [sp, #28]
 8010db2:	2200      	movs	r2, #0
 8010db4:	4b9b      	ldr	r3, [pc, #620]	@ (8011024 <_dtoa_r+0x720>)
 8010db6:	f7f0 fbe1 	bl	800157c <__aeabi_dmul>
 8010dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dbe:	f7ef fb65 	bl	800048c <__aeabi_dcmpge>
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d100      	bne.n	8010dc8 <_dtoa_r+0x4c4>
 8010dc6:	e286      	b.n	80112d6 <_dtoa_r+0x9d2>
 8010dc8:	2600      	movs	r6, #0
 8010dca:	0037      	movs	r7, r6
 8010dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010dce:	9c08      	ldr	r4, [sp, #32]
 8010dd0:	43db      	mvns	r3, r3
 8010dd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8010dd4:	9704      	str	r7, [sp, #16]
 8010dd6:	2700      	movs	r7, #0
 8010dd8:	0031      	movs	r1, r6
 8010dda:	9803      	ldr	r0, [sp, #12]
 8010ddc:	f001 f838 	bl	8011e50 <_Bfree>
 8010de0:	9b04      	ldr	r3, [sp, #16]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d100      	bne.n	8010de8 <_dtoa_r+0x4e4>
 8010de6:	e0bb      	b.n	8010f60 <_dtoa_r+0x65c>
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	d005      	beq.n	8010df8 <_dtoa_r+0x4f4>
 8010dec:	429f      	cmp	r7, r3
 8010dee:	d003      	beq.n	8010df8 <_dtoa_r+0x4f4>
 8010df0:	0039      	movs	r1, r7
 8010df2:	9803      	ldr	r0, [sp, #12]
 8010df4:	f001 f82c 	bl	8011e50 <_Bfree>
 8010df8:	9904      	ldr	r1, [sp, #16]
 8010dfa:	9803      	ldr	r0, [sp, #12]
 8010dfc:	f001 f828 	bl	8011e50 <_Bfree>
 8010e00:	e0ae      	b.n	8010f60 <_dtoa_r+0x65c>
 8010e02:	423d      	tst	r5, r7
 8010e04:	d005      	beq.n	8010e12 <_dtoa_r+0x50e>
 8010e06:	6832      	ldr	r2, [r6, #0]
 8010e08:	6873      	ldr	r3, [r6, #4]
 8010e0a:	f7f0 fbb7 	bl	800157c <__aeabi_dmul>
 8010e0e:	003b      	movs	r3, r7
 8010e10:	3401      	adds	r4, #1
 8010e12:	106d      	asrs	r5, r5, #1
 8010e14:	3608      	adds	r6, #8
 8010e16:	e75b      	b.n	8010cd0 <_dtoa_r+0x3cc>
 8010e18:	9b04      	ldr	r3, [sp, #16]
 8010e1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e1e:	e77f      	b.n	8010d20 <_dtoa_r+0x41c>
 8010e20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010e22:	4b7a      	ldr	r3, [pc, #488]	@ (801100c <_dtoa_r+0x708>)
 8010e24:	3a01      	subs	r2, #1
 8010e26:	00d2      	lsls	r2, r2, #3
 8010e28:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010e2a:	189b      	adds	r3, r3, r2
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	2900      	cmp	r1, #0
 8010e32:	d04c      	beq.n	8010ece <_dtoa_r+0x5ca>
 8010e34:	2000      	movs	r0, #0
 8010e36:	497c      	ldr	r1, [pc, #496]	@ (8011028 <_dtoa_r+0x724>)
 8010e38:	f7ef ff66 	bl	8000d08 <__aeabi_ddiv>
 8010e3c:	0032      	movs	r2, r6
 8010e3e:	003b      	movs	r3, r7
 8010e40:	f7f0 fe82 	bl	8001b48 <__aeabi_dsub>
 8010e44:	9a08      	ldr	r2, [sp, #32]
 8010e46:	0006      	movs	r6, r0
 8010e48:	4694      	mov	ip, r2
 8010e4a:	000f      	movs	r7, r1
 8010e4c:	9b08      	ldr	r3, [sp, #32]
 8010e4e:	9316      	str	r3, [sp, #88]	@ 0x58
 8010e50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010e52:	4463      	add	r3, ip
 8010e54:	9311      	str	r3, [sp, #68]	@ 0x44
 8010e56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e5a:	f7f1 faa1 	bl	80023a0 <__aeabi_d2iz>
 8010e5e:	0005      	movs	r5, r0
 8010e60:	f7f1 fada 	bl	8002418 <__aeabi_i2d>
 8010e64:	0002      	movs	r2, r0
 8010e66:	000b      	movs	r3, r1
 8010e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e6c:	f7f0 fe6c 	bl	8001b48 <__aeabi_dsub>
 8010e70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e72:	3530      	adds	r5, #48	@ 0x30
 8010e74:	1c5c      	adds	r4, r3, #1
 8010e76:	701d      	strb	r5, [r3, #0]
 8010e78:	0032      	movs	r2, r6
 8010e7a:	003b      	movs	r3, r7
 8010e7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010e7e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010e80:	f7ef fae6 	bl	8000450 <__aeabi_dcmplt>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d16b      	bne.n	8010f60 <_dtoa_r+0x65c>
 8010e88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	4961      	ldr	r1, [pc, #388]	@ (8011014 <_dtoa_r+0x710>)
 8010e90:	f7f0 fe5a 	bl	8001b48 <__aeabi_dsub>
 8010e94:	0032      	movs	r2, r6
 8010e96:	003b      	movs	r3, r7
 8010e98:	f7ef fada 	bl	8000450 <__aeabi_dcmplt>
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d000      	beq.n	8010ea2 <_dtoa_r+0x59e>
 8010ea0:	e0c6      	b.n	8011030 <_dtoa_r+0x72c>
 8010ea2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ea4:	42a3      	cmp	r3, r4
 8010ea6:	d100      	bne.n	8010eaa <_dtoa_r+0x5a6>
 8010ea8:	e765      	b.n	8010d76 <_dtoa_r+0x472>
 8010eaa:	2200      	movs	r2, #0
 8010eac:	0030      	movs	r0, r6
 8010eae:	0039      	movs	r1, r7
 8010eb0:	4b59      	ldr	r3, [pc, #356]	@ (8011018 <_dtoa_r+0x714>)
 8010eb2:	f7f0 fb63 	bl	800157c <__aeabi_dmul>
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	0006      	movs	r6, r0
 8010eba:	000f      	movs	r7, r1
 8010ebc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010ebe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010ec0:	4b55      	ldr	r3, [pc, #340]	@ (8011018 <_dtoa_r+0x714>)
 8010ec2:	f7f0 fb5b 	bl	800157c <__aeabi_dmul>
 8010ec6:	9416      	str	r4, [sp, #88]	@ 0x58
 8010ec8:	900a      	str	r0, [sp, #40]	@ 0x28
 8010eca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010ecc:	e7c3      	b.n	8010e56 <_dtoa_r+0x552>
 8010ece:	0030      	movs	r0, r6
 8010ed0:	0039      	movs	r1, r7
 8010ed2:	f7f0 fb53 	bl	800157c <__aeabi_dmul>
 8010ed6:	9d08      	ldr	r5, [sp, #32]
 8010ed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010eda:	002b      	movs	r3, r5
 8010edc:	4694      	mov	ip, r2
 8010ede:	9016      	str	r0, [sp, #88]	@ 0x58
 8010ee0:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010ee2:	4463      	add	r3, ip
 8010ee4:	9319      	str	r3, [sp, #100]	@ 0x64
 8010ee6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010eea:	f7f1 fa59 	bl	80023a0 <__aeabi_d2iz>
 8010eee:	0004      	movs	r4, r0
 8010ef0:	f7f1 fa92 	bl	8002418 <__aeabi_i2d>
 8010ef4:	000b      	movs	r3, r1
 8010ef6:	0002      	movs	r2, r0
 8010ef8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010efa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010efc:	f7f0 fe24 	bl	8001b48 <__aeabi_dsub>
 8010f00:	3430      	adds	r4, #48	@ 0x30
 8010f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f04:	702c      	strb	r4, [r5, #0]
 8010f06:	3501      	adds	r5, #1
 8010f08:	0006      	movs	r6, r0
 8010f0a:	000f      	movs	r7, r1
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	d12a      	bne.n	8010f66 <_dtoa_r+0x662>
 8010f10:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010f12:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010f14:	9b08      	ldr	r3, [sp, #32]
 8010f16:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010f18:	469c      	mov	ip, r3
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	4b42      	ldr	r3, [pc, #264]	@ (8011028 <_dtoa_r+0x724>)
 8010f1e:	4464      	add	r4, ip
 8010f20:	f7ef fb2c 	bl	800057c <__aeabi_dadd>
 8010f24:	0002      	movs	r2, r0
 8010f26:	000b      	movs	r3, r1
 8010f28:	0030      	movs	r0, r6
 8010f2a:	0039      	movs	r1, r7
 8010f2c:	f7ef faa4 	bl	8000478 <__aeabi_dcmpgt>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d000      	beq.n	8010f36 <_dtoa_r+0x632>
 8010f34:	e07c      	b.n	8011030 <_dtoa_r+0x72c>
 8010f36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010f38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	493a      	ldr	r1, [pc, #232]	@ (8011028 <_dtoa_r+0x724>)
 8010f3e:	f7f0 fe03 	bl	8001b48 <__aeabi_dsub>
 8010f42:	0002      	movs	r2, r0
 8010f44:	000b      	movs	r3, r1
 8010f46:	0030      	movs	r0, r6
 8010f48:	0039      	movs	r1, r7
 8010f4a:	f7ef fa81 	bl	8000450 <__aeabi_dcmplt>
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d100      	bne.n	8010f54 <_dtoa_r+0x650>
 8010f52:	e710      	b.n	8010d76 <_dtoa_r+0x472>
 8010f54:	0023      	movs	r3, r4
 8010f56:	3c01      	subs	r4, #1
 8010f58:	7822      	ldrb	r2, [r4, #0]
 8010f5a:	2a30      	cmp	r2, #48	@ 0x30
 8010f5c:	d0fa      	beq.n	8010f54 <_dtoa_r+0x650>
 8010f5e:	001c      	movs	r4, r3
 8010f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f62:	9304      	str	r3, [sp, #16]
 8010f64:	e042      	b.n	8010fec <_dtoa_r+0x6e8>
 8010f66:	2200      	movs	r2, #0
 8010f68:	4b2b      	ldr	r3, [pc, #172]	@ (8011018 <_dtoa_r+0x714>)
 8010f6a:	f7f0 fb07 	bl	800157c <__aeabi_dmul>
 8010f6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8010f70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010f72:	e7b8      	b.n	8010ee6 <_dtoa_r+0x5e2>
 8010f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f76:	9d08      	ldr	r5, [sp, #32]
 8010f78:	3b01      	subs	r3, #1
 8010f7a:	195b      	adds	r3, r3, r5
 8010f7c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010f7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010f80:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f82:	9a06      	ldr	r2, [sp, #24]
 8010f84:	9b07      	ldr	r3, [sp, #28]
 8010f86:	0030      	movs	r0, r6
 8010f88:	0039      	movs	r1, r7
 8010f8a:	f7ef febd 	bl	8000d08 <__aeabi_ddiv>
 8010f8e:	f7f1 fa07 	bl	80023a0 <__aeabi_d2iz>
 8010f92:	9009      	str	r0, [sp, #36]	@ 0x24
 8010f94:	f7f1 fa40 	bl	8002418 <__aeabi_i2d>
 8010f98:	9a06      	ldr	r2, [sp, #24]
 8010f9a:	9b07      	ldr	r3, [sp, #28]
 8010f9c:	f7f0 faee 	bl	800157c <__aeabi_dmul>
 8010fa0:	0002      	movs	r2, r0
 8010fa2:	000b      	movs	r3, r1
 8010fa4:	0030      	movs	r0, r6
 8010fa6:	0039      	movs	r1, r7
 8010fa8:	f7f0 fdce 	bl	8001b48 <__aeabi_dsub>
 8010fac:	002b      	movs	r3, r5
 8010fae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010fb0:	3501      	adds	r5, #1
 8010fb2:	3230      	adds	r2, #48	@ 0x30
 8010fb4:	701a      	strb	r2, [r3, #0]
 8010fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010fb8:	002c      	movs	r4, r5
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d14b      	bne.n	8011056 <_dtoa_r+0x752>
 8010fbe:	0002      	movs	r2, r0
 8010fc0:	000b      	movs	r3, r1
 8010fc2:	f7ef fadb 	bl	800057c <__aeabi_dadd>
 8010fc6:	9a06      	ldr	r2, [sp, #24]
 8010fc8:	9b07      	ldr	r3, [sp, #28]
 8010fca:	0006      	movs	r6, r0
 8010fcc:	000f      	movs	r7, r1
 8010fce:	f7ef fa53 	bl	8000478 <__aeabi_dcmpgt>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d12a      	bne.n	801102c <_dtoa_r+0x728>
 8010fd6:	9a06      	ldr	r2, [sp, #24]
 8010fd8:	9b07      	ldr	r3, [sp, #28]
 8010fda:	0030      	movs	r0, r6
 8010fdc:	0039      	movs	r1, r7
 8010fde:	f7ef fa31 	bl	8000444 <__aeabi_dcmpeq>
 8010fe2:	2800      	cmp	r0, #0
 8010fe4:	d002      	beq.n	8010fec <_dtoa_r+0x6e8>
 8010fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fe8:	07dd      	lsls	r5, r3, #31
 8010fea:	d41f      	bmi.n	801102c <_dtoa_r+0x728>
 8010fec:	9905      	ldr	r1, [sp, #20]
 8010fee:	9803      	ldr	r0, [sp, #12]
 8010ff0:	f000 ff2e 	bl	8011e50 <_Bfree>
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	7023      	strb	r3, [r4, #0]
 8010ff8:	9b04      	ldr	r3, [sp, #16]
 8010ffa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	6013      	str	r3, [r2, #0]
 8011000:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011002:	2b00      	cmp	r3, #0
 8011004:	d100      	bne.n	8011008 <_dtoa_r+0x704>
 8011006:	e4c7      	b.n	8010998 <_dtoa_r+0x94>
 8011008:	601c      	str	r4, [r3, #0]
 801100a:	e4c5      	b.n	8010998 <_dtoa_r+0x94>
 801100c:	08013768 	.word	0x08013768
 8011010:	08013740 	.word	0x08013740
 8011014:	3ff00000 	.word	0x3ff00000
 8011018:	40240000 	.word	0x40240000
 801101c:	401c0000 	.word	0x401c0000
 8011020:	fcc00000 	.word	0xfcc00000
 8011024:	40140000 	.word	0x40140000
 8011028:	3fe00000 	.word	0x3fe00000
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011030:	0023      	movs	r3, r4
 8011032:	001c      	movs	r4, r3
 8011034:	3b01      	subs	r3, #1
 8011036:	781a      	ldrb	r2, [r3, #0]
 8011038:	2a39      	cmp	r2, #57	@ 0x39
 801103a:	d108      	bne.n	801104e <_dtoa_r+0x74a>
 801103c:	9a08      	ldr	r2, [sp, #32]
 801103e:	429a      	cmp	r2, r3
 8011040:	d1f7      	bne.n	8011032 <_dtoa_r+0x72e>
 8011042:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011044:	9908      	ldr	r1, [sp, #32]
 8011046:	3201      	adds	r2, #1
 8011048:	920c      	str	r2, [sp, #48]	@ 0x30
 801104a:	2230      	movs	r2, #48	@ 0x30
 801104c:	700a      	strb	r2, [r1, #0]
 801104e:	781a      	ldrb	r2, [r3, #0]
 8011050:	3201      	adds	r2, #1
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	e784      	b.n	8010f60 <_dtoa_r+0x65c>
 8011056:	2200      	movs	r2, #0
 8011058:	4bc6      	ldr	r3, [pc, #792]	@ (8011374 <_dtoa_r+0xa70>)
 801105a:	f7f0 fa8f 	bl	800157c <__aeabi_dmul>
 801105e:	2200      	movs	r2, #0
 8011060:	2300      	movs	r3, #0
 8011062:	0006      	movs	r6, r0
 8011064:	000f      	movs	r7, r1
 8011066:	f7ef f9ed 	bl	8000444 <__aeabi_dcmpeq>
 801106a:	2800      	cmp	r0, #0
 801106c:	d089      	beq.n	8010f82 <_dtoa_r+0x67e>
 801106e:	e7bd      	b.n	8010fec <_dtoa_r+0x6e8>
 8011070:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8011072:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8011074:	9c06      	ldr	r4, [sp, #24]
 8011076:	2f00      	cmp	r7, #0
 8011078:	d014      	beq.n	80110a4 <_dtoa_r+0x7a0>
 801107a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801107c:	2a01      	cmp	r2, #1
 801107e:	dd00      	ble.n	8011082 <_dtoa_r+0x77e>
 8011080:	e0e4      	b.n	801124c <_dtoa_r+0x948>
 8011082:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011084:	2a00      	cmp	r2, #0
 8011086:	d100      	bne.n	801108a <_dtoa_r+0x786>
 8011088:	e0da      	b.n	8011240 <_dtoa_r+0x93c>
 801108a:	4abb      	ldr	r2, [pc, #748]	@ (8011378 <_dtoa_r+0xa74>)
 801108c:	189b      	adds	r3, r3, r2
 801108e:	9a06      	ldr	r2, [sp, #24]
 8011090:	2101      	movs	r1, #1
 8011092:	18d2      	adds	r2, r2, r3
 8011094:	9206      	str	r2, [sp, #24]
 8011096:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011098:	9803      	ldr	r0, [sp, #12]
 801109a:	18d3      	adds	r3, r2, r3
 801109c:	930d      	str	r3, [sp, #52]	@ 0x34
 801109e:	f000 ffdb 	bl	8012058 <__i2b>
 80110a2:	0007      	movs	r7, r0
 80110a4:	2c00      	cmp	r4, #0
 80110a6:	d00e      	beq.n	80110c6 <_dtoa_r+0x7c2>
 80110a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	dd0b      	ble.n	80110c6 <_dtoa_r+0x7c2>
 80110ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110b0:	0023      	movs	r3, r4
 80110b2:	4294      	cmp	r4, r2
 80110b4:	dd00      	ble.n	80110b8 <_dtoa_r+0x7b4>
 80110b6:	0013      	movs	r3, r2
 80110b8:	9a06      	ldr	r2, [sp, #24]
 80110ba:	1ae4      	subs	r4, r4, r3
 80110bc:	1ad2      	subs	r2, r2, r3
 80110be:	9206      	str	r2, [sp, #24]
 80110c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80110c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d021      	beq.n	8011110 <_dtoa_r+0x80c>
 80110cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d100      	bne.n	80110d4 <_dtoa_r+0x7d0>
 80110d2:	e0d3      	b.n	801127c <_dtoa_r+0x978>
 80110d4:	9e05      	ldr	r6, [sp, #20]
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	d014      	beq.n	8011104 <_dtoa_r+0x800>
 80110da:	0039      	movs	r1, r7
 80110dc:	002a      	movs	r2, r5
 80110de:	9803      	ldr	r0, [sp, #12]
 80110e0:	f001 f87c 	bl	80121dc <__pow5mult>
 80110e4:	9a05      	ldr	r2, [sp, #20]
 80110e6:	0001      	movs	r1, r0
 80110e8:	0007      	movs	r7, r0
 80110ea:	9803      	ldr	r0, [sp, #12]
 80110ec:	f000 ffcc 	bl	8012088 <__multiply>
 80110f0:	0006      	movs	r6, r0
 80110f2:	9905      	ldr	r1, [sp, #20]
 80110f4:	9803      	ldr	r0, [sp, #12]
 80110f6:	f000 feab 	bl	8011e50 <_Bfree>
 80110fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110fc:	9605      	str	r6, [sp, #20]
 80110fe:	1b5b      	subs	r3, r3, r5
 8011100:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011102:	d005      	beq.n	8011110 <_dtoa_r+0x80c>
 8011104:	0031      	movs	r1, r6
 8011106:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011108:	9803      	ldr	r0, [sp, #12]
 801110a:	f001 f867 	bl	80121dc <__pow5mult>
 801110e:	9005      	str	r0, [sp, #20]
 8011110:	2101      	movs	r1, #1
 8011112:	9803      	ldr	r0, [sp, #12]
 8011114:	f000 ffa0 	bl	8012058 <__i2b>
 8011118:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801111a:	0006      	movs	r6, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d100      	bne.n	8011122 <_dtoa_r+0x81e>
 8011120:	e1bc      	b.n	801149c <_dtoa_r+0xb98>
 8011122:	001a      	movs	r2, r3
 8011124:	0001      	movs	r1, r0
 8011126:	9803      	ldr	r0, [sp, #12]
 8011128:	f001 f858 	bl	80121dc <__pow5mult>
 801112c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801112e:	0006      	movs	r6, r0
 8011130:	2500      	movs	r5, #0
 8011132:	2b01      	cmp	r3, #1
 8011134:	dc16      	bgt.n	8011164 <_dtoa_r+0x860>
 8011136:	2500      	movs	r5, #0
 8011138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801113a:	42ab      	cmp	r3, r5
 801113c:	d10e      	bne.n	801115c <_dtoa_r+0x858>
 801113e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011140:	031b      	lsls	r3, r3, #12
 8011142:	42ab      	cmp	r3, r5
 8011144:	d10a      	bne.n	801115c <_dtoa_r+0x858>
 8011146:	4b8d      	ldr	r3, [pc, #564]	@ (801137c <_dtoa_r+0xa78>)
 8011148:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801114a:	4213      	tst	r3, r2
 801114c:	d006      	beq.n	801115c <_dtoa_r+0x858>
 801114e:	9b06      	ldr	r3, [sp, #24]
 8011150:	3501      	adds	r5, #1
 8011152:	3301      	adds	r3, #1
 8011154:	9306      	str	r3, [sp, #24]
 8011156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011158:	3301      	adds	r3, #1
 801115a:	930d      	str	r3, [sp, #52]	@ 0x34
 801115c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801115e:	2001      	movs	r0, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d008      	beq.n	8011176 <_dtoa_r+0x872>
 8011164:	6933      	ldr	r3, [r6, #16]
 8011166:	3303      	adds	r3, #3
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	18f3      	adds	r3, r6, r3
 801116c:	6858      	ldr	r0, [r3, #4]
 801116e:	f000 ff23 	bl	8011fb8 <__hi0bits>
 8011172:	2320      	movs	r3, #32
 8011174:	1a18      	subs	r0, r3, r0
 8011176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011178:	1818      	adds	r0, r3, r0
 801117a:	0002      	movs	r2, r0
 801117c:	231f      	movs	r3, #31
 801117e:	401a      	ands	r2, r3
 8011180:	4218      	tst	r0, r3
 8011182:	d100      	bne.n	8011186 <_dtoa_r+0x882>
 8011184:	e081      	b.n	801128a <_dtoa_r+0x986>
 8011186:	3301      	adds	r3, #1
 8011188:	1a9b      	subs	r3, r3, r2
 801118a:	2b04      	cmp	r3, #4
 801118c:	dd79      	ble.n	8011282 <_dtoa_r+0x97e>
 801118e:	231c      	movs	r3, #28
 8011190:	1a9b      	subs	r3, r3, r2
 8011192:	9a06      	ldr	r2, [sp, #24]
 8011194:	18e4      	adds	r4, r4, r3
 8011196:	18d2      	adds	r2, r2, r3
 8011198:	9206      	str	r2, [sp, #24]
 801119a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801119c:	18d3      	adds	r3, r2, r3
 801119e:	930d      	str	r3, [sp, #52]	@ 0x34
 80111a0:	9b06      	ldr	r3, [sp, #24]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	dd05      	ble.n	80111b2 <_dtoa_r+0x8ae>
 80111a6:	001a      	movs	r2, r3
 80111a8:	9905      	ldr	r1, [sp, #20]
 80111aa:	9803      	ldr	r0, [sp, #12]
 80111ac:	f001 f872 	bl	8012294 <__lshift>
 80111b0:	9005      	str	r0, [sp, #20]
 80111b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	dd05      	ble.n	80111c4 <_dtoa_r+0x8c0>
 80111b8:	0031      	movs	r1, r6
 80111ba:	001a      	movs	r2, r3
 80111bc:	9803      	ldr	r0, [sp, #12]
 80111be:	f001 f869 	bl	8012294 <__lshift>
 80111c2:	0006      	movs	r6, r0
 80111c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d061      	beq.n	801128e <_dtoa_r+0x98a>
 80111ca:	0031      	movs	r1, r6
 80111cc:	9805      	ldr	r0, [sp, #20]
 80111ce:	f001 f8cd 	bl	801236c <__mcmp>
 80111d2:	2800      	cmp	r0, #0
 80111d4:	da5b      	bge.n	801128e <_dtoa_r+0x98a>
 80111d6:	9b04      	ldr	r3, [sp, #16]
 80111d8:	220a      	movs	r2, #10
 80111da:	3b01      	subs	r3, #1
 80111dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80111de:	9905      	ldr	r1, [sp, #20]
 80111e0:	2300      	movs	r3, #0
 80111e2:	9803      	ldr	r0, [sp, #12]
 80111e4:	f000 fe58 	bl	8011e98 <__multadd>
 80111e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80111ea:	9005      	str	r0, [sp, #20]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d100      	bne.n	80111f2 <_dtoa_r+0x8ee>
 80111f0:	e15b      	b.n	80114aa <_dtoa_r+0xba6>
 80111f2:	2300      	movs	r3, #0
 80111f4:	0039      	movs	r1, r7
 80111f6:	220a      	movs	r2, #10
 80111f8:	9803      	ldr	r0, [sp, #12]
 80111fa:	f000 fe4d 	bl	8011e98 <__multadd>
 80111fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011200:	0007      	movs	r7, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	dc4d      	bgt.n	80112a2 <_dtoa_r+0x99e>
 8011206:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011208:	2b02      	cmp	r3, #2
 801120a:	dd46      	ble.n	801129a <_dtoa_r+0x996>
 801120c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801120e:	2b00      	cmp	r3, #0
 8011210:	d000      	beq.n	8011214 <_dtoa_r+0x910>
 8011212:	e5db      	b.n	8010dcc <_dtoa_r+0x4c8>
 8011214:	0031      	movs	r1, r6
 8011216:	2205      	movs	r2, #5
 8011218:	9803      	ldr	r0, [sp, #12]
 801121a:	f000 fe3d 	bl	8011e98 <__multadd>
 801121e:	0006      	movs	r6, r0
 8011220:	0001      	movs	r1, r0
 8011222:	9805      	ldr	r0, [sp, #20]
 8011224:	f001 f8a2 	bl	801236c <__mcmp>
 8011228:	2800      	cmp	r0, #0
 801122a:	dc00      	bgt.n	801122e <_dtoa_r+0x92a>
 801122c:	e5ce      	b.n	8010dcc <_dtoa_r+0x4c8>
 801122e:	9b08      	ldr	r3, [sp, #32]
 8011230:	9a08      	ldr	r2, [sp, #32]
 8011232:	1c5c      	adds	r4, r3, #1
 8011234:	2331      	movs	r3, #49	@ 0x31
 8011236:	7013      	strb	r3, [r2, #0]
 8011238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801123a:	3301      	adds	r3, #1
 801123c:	930c      	str	r3, [sp, #48]	@ 0x30
 801123e:	e5c9      	b.n	8010dd4 <_dtoa_r+0x4d0>
 8011240:	2336      	movs	r3, #54	@ 0x36
 8011242:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011244:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8011246:	1a9b      	subs	r3, r3, r2
 8011248:	9c06      	ldr	r4, [sp, #24]
 801124a:	e720      	b.n	801108e <_dtoa_r+0x78a>
 801124c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801124e:	1e5d      	subs	r5, r3, #1
 8011250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011252:	42ab      	cmp	r3, r5
 8011254:	db08      	blt.n	8011268 <_dtoa_r+0x964>
 8011256:	1b5d      	subs	r5, r3, r5
 8011258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801125a:	2b00      	cmp	r3, #0
 801125c:	daf4      	bge.n	8011248 <_dtoa_r+0x944>
 801125e:	9b06      	ldr	r3, [sp, #24]
 8011260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011262:	1a9c      	subs	r4, r3, r2
 8011264:	2300      	movs	r3, #0
 8011266:	e712      	b.n	801108e <_dtoa_r+0x78a>
 8011268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801126a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801126c:	1aeb      	subs	r3, r5, r3
 801126e:	18d3      	adds	r3, r2, r3
 8011270:	9314      	str	r3, [sp, #80]	@ 0x50
 8011272:	950f      	str	r5, [sp, #60]	@ 0x3c
 8011274:	9c06      	ldr	r4, [sp, #24]
 8011276:	2500      	movs	r5, #0
 8011278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801127a:	e708      	b.n	801108e <_dtoa_r+0x78a>
 801127c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801127e:	9905      	ldr	r1, [sp, #20]
 8011280:	e742      	b.n	8011108 <_dtoa_r+0x804>
 8011282:	2b04      	cmp	r3, #4
 8011284:	d08c      	beq.n	80111a0 <_dtoa_r+0x89c>
 8011286:	331c      	adds	r3, #28
 8011288:	e783      	b.n	8011192 <_dtoa_r+0x88e>
 801128a:	0013      	movs	r3, r2
 801128c:	e7fb      	b.n	8011286 <_dtoa_r+0x982>
 801128e:	9b04      	ldr	r3, [sp, #16]
 8011290:	930c      	str	r3, [sp, #48]	@ 0x30
 8011292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011294:	930e      	str	r3, [sp, #56]	@ 0x38
 8011296:	2b00      	cmp	r3, #0
 8011298:	ddb5      	ble.n	8011206 <_dtoa_r+0x902>
 801129a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801129c:	2b00      	cmp	r3, #0
 801129e:	d100      	bne.n	80112a2 <_dtoa_r+0x99e>
 80112a0:	e107      	b.n	80114b2 <_dtoa_r+0xbae>
 80112a2:	2c00      	cmp	r4, #0
 80112a4:	dd05      	ble.n	80112b2 <_dtoa_r+0x9ae>
 80112a6:	0039      	movs	r1, r7
 80112a8:	0022      	movs	r2, r4
 80112aa:	9803      	ldr	r0, [sp, #12]
 80112ac:	f000 fff2 	bl	8012294 <__lshift>
 80112b0:	0007      	movs	r7, r0
 80112b2:	9704      	str	r7, [sp, #16]
 80112b4:	2d00      	cmp	r5, #0
 80112b6:	d020      	beq.n	80112fa <_dtoa_r+0x9f6>
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	9803      	ldr	r0, [sp, #12]
 80112bc:	f000 fd84 	bl	8011dc8 <_Balloc>
 80112c0:	1e04      	subs	r4, r0, #0
 80112c2:	d10c      	bne.n	80112de <_dtoa_r+0x9da>
 80112c4:	0022      	movs	r2, r4
 80112c6:	4b2e      	ldr	r3, [pc, #184]	@ (8011380 <_dtoa_r+0xa7c>)
 80112c8:	482e      	ldr	r0, [pc, #184]	@ (8011384 <_dtoa_r+0xa80>)
 80112ca:	492f      	ldr	r1, [pc, #188]	@ (8011388 <_dtoa_r+0xa84>)
 80112cc:	f7ff fb2f 	bl	801092e <_dtoa_r+0x2a>
 80112d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80112d2:	0037      	movs	r7, r6
 80112d4:	e7ab      	b.n	801122e <_dtoa_r+0x92a>
 80112d6:	9b04      	ldr	r3, [sp, #16]
 80112d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80112da:	930c      	str	r3, [sp, #48]	@ 0x30
 80112dc:	e7f9      	b.n	80112d2 <_dtoa_r+0x9ce>
 80112de:	0039      	movs	r1, r7
 80112e0:	693a      	ldr	r2, [r7, #16]
 80112e2:	310c      	adds	r1, #12
 80112e4:	3202      	adds	r2, #2
 80112e6:	0092      	lsls	r2, r2, #2
 80112e8:	300c      	adds	r0, #12
 80112ea:	f7ff fa75 	bl	80107d8 <memcpy>
 80112ee:	2201      	movs	r2, #1
 80112f0:	0021      	movs	r1, r4
 80112f2:	9803      	ldr	r0, [sp, #12]
 80112f4:	f000 ffce 	bl	8012294 <__lshift>
 80112f8:	9004      	str	r0, [sp, #16]
 80112fa:	9b08      	ldr	r3, [sp, #32]
 80112fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80112fe:	9306      	str	r3, [sp, #24]
 8011300:	3b01      	subs	r3, #1
 8011302:	189b      	adds	r3, r3, r2
 8011304:	2201      	movs	r2, #1
 8011306:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801130a:	4013      	ands	r3, r2
 801130c:	930e      	str	r3, [sp, #56]	@ 0x38
 801130e:	0031      	movs	r1, r6
 8011310:	9805      	ldr	r0, [sp, #20]
 8011312:	f7ff fa71 	bl	80107f8 <quorem>
 8011316:	0039      	movs	r1, r7
 8011318:	0005      	movs	r5, r0
 801131a:	900a      	str	r0, [sp, #40]	@ 0x28
 801131c:	9805      	ldr	r0, [sp, #20]
 801131e:	f001 f825 	bl	801236c <__mcmp>
 8011322:	9a04      	ldr	r2, [sp, #16]
 8011324:	900d      	str	r0, [sp, #52]	@ 0x34
 8011326:	0031      	movs	r1, r6
 8011328:	9803      	ldr	r0, [sp, #12]
 801132a:	f001 f83b 	bl	80123a4 <__mdiff>
 801132e:	2201      	movs	r2, #1
 8011330:	68c3      	ldr	r3, [r0, #12]
 8011332:	0004      	movs	r4, r0
 8011334:	3530      	adds	r5, #48	@ 0x30
 8011336:	9209      	str	r2, [sp, #36]	@ 0x24
 8011338:	2b00      	cmp	r3, #0
 801133a:	d104      	bne.n	8011346 <_dtoa_r+0xa42>
 801133c:	0001      	movs	r1, r0
 801133e:	9805      	ldr	r0, [sp, #20]
 8011340:	f001 f814 	bl	801236c <__mcmp>
 8011344:	9009      	str	r0, [sp, #36]	@ 0x24
 8011346:	0021      	movs	r1, r4
 8011348:	9803      	ldr	r0, [sp, #12]
 801134a:	f000 fd81 	bl	8011e50 <_Bfree>
 801134e:	9b06      	ldr	r3, [sp, #24]
 8011350:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011352:	1c5c      	adds	r4, r3, #1
 8011354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011356:	4313      	orrs	r3, r2
 8011358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801135a:	4313      	orrs	r3, r2
 801135c:	d116      	bne.n	801138c <_dtoa_r+0xa88>
 801135e:	2d39      	cmp	r5, #57	@ 0x39
 8011360:	d02f      	beq.n	80113c2 <_dtoa_r+0xabe>
 8011362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011364:	2b00      	cmp	r3, #0
 8011366:	dd01      	ble.n	801136c <_dtoa_r+0xa68>
 8011368:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801136a:	3531      	adds	r5, #49	@ 0x31
 801136c:	9b06      	ldr	r3, [sp, #24]
 801136e:	701d      	strb	r5, [r3, #0]
 8011370:	e532      	b.n	8010dd8 <_dtoa_r+0x4d4>
 8011372:	46c0      	nop			@ (mov r8, r8)
 8011374:	40240000 	.word	0x40240000
 8011378:	00000433 	.word	0x00000433
 801137c:	7ff00000 	.word	0x7ff00000
 8011380:	080135c6 	.word	0x080135c6
 8011384:	0801356e 	.word	0x0801356e
 8011388:	000002ef 	.word	0x000002ef
 801138c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801138e:	2b00      	cmp	r3, #0
 8011390:	db04      	blt.n	801139c <_dtoa_r+0xa98>
 8011392:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011394:	4313      	orrs	r3, r2
 8011396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011398:	4313      	orrs	r3, r2
 801139a:	d11e      	bne.n	80113da <_dtoa_r+0xad6>
 801139c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801139e:	2b00      	cmp	r3, #0
 80113a0:	dde4      	ble.n	801136c <_dtoa_r+0xa68>
 80113a2:	9905      	ldr	r1, [sp, #20]
 80113a4:	2201      	movs	r2, #1
 80113a6:	9803      	ldr	r0, [sp, #12]
 80113a8:	f000 ff74 	bl	8012294 <__lshift>
 80113ac:	0031      	movs	r1, r6
 80113ae:	9005      	str	r0, [sp, #20]
 80113b0:	f000 ffdc 	bl	801236c <__mcmp>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	dc02      	bgt.n	80113be <_dtoa_r+0xaba>
 80113b8:	d1d8      	bne.n	801136c <_dtoa_r+0xa68>
 80113ba:	07eb      	lsls	r3, r5, #31
 80113bc:	d5d6      	bpl.n	801136c <_dtoa_r+0xa68>
 80113be:	2d39      	cmp	r5, #57	@ 0x39
 80113c0:	d1d2      	bne.n	8011368 <_dtoa_r+0xa64>
 80113c2:	2339      	movs	r3, #57	@ 0x39
 80113c4:	9a06      	ldr	r2, [sp, #24]
 80113c6:	7013      	strb	r3, [r2, #0]
 80113c8:	0023      	movs	r3, r4
 80113ca:	001c      	movs	r4, r3
 80113cc:	3b01      	subs	r3, #1
 80113ce:	781a      	ldrb	r2, [r3, #0]
 80113d0:	2a39      	cmp	r2, #57	@ 0x39
 80113d2:	d050      	beq.n	8011476 <_dtoa_r+0xb72>
 80113d4:	3201      	adds	r2, #1
 80113d6:	701a      	strb	r2, [r3, #0]
 80113d8:	e4fe      	b.n	8010dd8 <_dtoa_r+0x4d4>
 80113da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113dc:	2b00      	cmp	r3, #0
 80113de:	dd03      	ble.n	80113e8 <_dtoa_r+0xae4>
 80113e0:	2d39      	cmp	r5, #57	@ 0x39
 80113e2:	d0ee      	beq.n	80113c2 <_dtoa_r+0xabe>
 80113e4:	3501      	adds	r5, #1
 80113e6:	e7c1      	b.n	801136c <_dtoa_r+0xa68>
 80113e8:	9b06      	ldr	r3, [sp, #24]
 80113ea:	9a06      	ldr	r2, [sp, #24]
 80113ec:	701d      	strb	r5, [r3, #0]
 80113ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d02b      	beq.n	801144c <_dtoa_r+0xb48>
 80113f4:	2300      	movs	r3, #0
 80113f6:	220a      	movs	r2, #10
 80113f8:	9905      	ldr	r1, [sp, #20]
 80113fa:	9803      	ldr	r0, [sp, #12]
 80113fc:	f000 fd4c 	bl	8011e98 <__multadd>
 8011400:	9b04      	ldr	r3, [sp, #16]
 8011402:	9005      	str	r0, [sp, #20]
 8011404:	429f      	cmp	r7, r3
 8011406:	d109      	bne.n	801141c <_dtoa_r+0xb18>
 8011408:	0039      	movs	r1, r7
 801140a:	2300      	movs	r3, #0
 801140c:	220a      	movs	r2, #10
 801140e:	9803      	ldr	r0, [sp, #12]
 8011410:	f000 fd42 	bl	8011e98 <__multadd>
 8011414:	0007      	movs	r7, r0
 8011416:	9004      	str	r0, [sp, #16]
 8011418:	9406      	str	r4, [sp, #24]
 801141a:	e778      	b.n	801130e <_dtoa_r+0xa0a>
 801141c:	0039      	movs	r1, r7
 801141e:	2300      	movs	r3, #0
 8011420:	220a      	movs	r2, #10
 8011422:	9803      	ldr	r0, [sp, #12]
 8011424:	f000 fd38 	bl	8011e98 <__multadd>
 8011428:	2300      	movs	r3, #0
 801142a:	0007      	movs	r7, r0
 801142c:	220a      	movs	r2, #10
 801142e:	9904      	ldr	r1, [sp, #16]
 8011430:	9803      	ldr	r0, [sp, #12]
 8011432:	f000 fd31 	bl	8011e98 <__multadd>
 8011436:	9004      	str	r0, [sp, #16]
 8011438:	e7ee      	b.n	8011418 <_dtoa_r+0xb14>
 801143a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801143c:	2401      	movs	r4, #1
 801143e:	2b00      	cmp	r3, #0
 8011440:	dd00      	ble.n	8011444 <_dtoa_r+0xb40>
 8011442:	001c      	movs	r4, r3
 8011444:	9704      	str	r7, [sp, #16]
 8011446:	2700      	movs	r7, #0
 8011448:	9b08      	ldr	r3, [sp, #32]
 801144a:	191c      	adds	r4, r3, r4
 801144c:	9905      	ldr	r1, [sp, #20]
 801144e:	2201      	movs	r2, #1
 8011450:	9803      	ldr	r0, [sp, #12]
 8011452:	f000 ff1f 	bl	8012294 <__lshift>
 8011456:	0031      	movs	r1, r6
 8011458:	9005      	str	r0, [sp, #20]
 801145a:	f000 ff87 	bl	801236c <__mcmp>
 801145e:	2800      	cmp	r0, #0
 8011460:	dcb2      	bgt.n	80113c8 <_dtoa_r+0xac4>
 8011462:	d101      	bne.n	8011468 <_dtoa_r+0xb64>
 8011464:	07ed      	lsls	r5, r5, #31
 8011466:	d4af      	bmi.n	80113c8 <_dtoa_r+0xac4>
 8011468:	0023      	movs	r3, r4
 801146a:	001c      	movs	r4, r3
 801146c:	3b01      	subs	r3, #1
 801146e:	781a      	ldrb	r2, [r3, #0]
 8011470:	2a30      	cmp	r2, #48	@ 0x30
 8011472:	d0fa      	beq.n	801146a <_dtoa_r+0xb66>
 8011474:	e4b0      	b.n	8010dd8 <_dtoa_r+0x4d4>
 8011476:	9a08      	ldr	r2, [sp, #32]
 8011478:	429a      	cmp	r2, r3
 801147a:	d1a6      	bne.n	80113ca <_dtoa_r+0xac6>
 801147c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801147e:	3301      	adds	r3, #1
 8011480:	930c      	str	r3, [sp, #48]	@ 0x30
 8011482:	2331      	movs	r3, #49	@ 0x31
 8011484:	7013      	strb	r3, [r2, #0]
 8011486:	e4a7      	b.n	8010dd8 <_dtoa_r+0x4d4>
 8011488:	4b14      	ldr	r3, [pc, #80]	@ (80114dc <_dtoa_r+0xbd8>)
 801148a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801148c:	9308      	str	r3, [sp, #32]
 801148e:	4b14      	ldr	r3, [pc, #80]	@ (80114e0 <_dtoa_r+0xbdc>)
 8011490:	2a00      	cmp	r2, #0
 8011492:	d001      	beq.n	8011498 <_dtoa_r+0xb94>
 8011494:	f7ff fa7e 	bl	8010994 <_dtoa_r+0x90>
 8011498:	f7ff fa7e 	bl	8010998 <_dtoa_r+0x94>
 801149c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801149e:	2b01      	cmp	r3, #1
 80114a0:	dc00      	bgt.n	80114a4 <_dtoa_r+0xba0>
 80114a2:	e648      	b.n	8011136 <_dtoa_r+0x832>
 80114a4:	2001      	movs	r0, #1
 80114a6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80114a8:	e665      	b.n	8011176 <_dtoa_r+0x872>
 80114aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	dc00      	bgt.n	80114b2 <_dtoa_r+0xbae>
 80114b0:	e6a9      	b.n	8011206 <_dtoa_r+0x902>
 80114b2:	2400      	movs	r4, #0
 80114b4:	0031      	movs	r1, r6
 80114b6:	9805      	ldr	r0, [sp, #20]
 80114b8:	f7ff f99e 	bl	80107f8 <quorem>
 80114bc:	9b08      	ldr	r3, [sp, #32]
 80114be:	3030      	adds	r0, #48	@ 0x30
 80114c0:	5518      	strb	r0, [r3, r4]
 80114c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114c4:	3401      	adds	r4, #1
 80114c6:	0005      	movs	r5, r0
 80114c8:	42a3      	cmp	r3, r4
 80114ca:	ddb6      	ble.n	801143a <_dtoa_r+0xb36>
 80114cc:	2300      	movs	r3, #0
 80114ce:	220a      	movs	r2, #10
 80114d0:	9905      	ldr	r1, [sp, #20]
 80114d2:	9803      	ldr	r0, [sp, #12]
 80114d4:	f000 fce0 	bl	8011e98 <__multadd>
 80114d8:	9005      	str	r0, [sp, #20]
 80114da:	e7eb      	b.n	80114b4 <_dtoa_r+0xbb0>
 80114dc:	0801354a 	.word	0x0801354a
 80114e0:	08013552 	.word	0x08013552

080114e4 <_free_r>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	0005      	movs	r5, r0
 80114e8:	1e0c      	subs	r4, r1, #0
 80114ea:	d010      	beq.n	801150e <_free_r+0x2a>
 80114ec:	3c04      	subs	r4, #4
 80114ee:	6823      	ldr	r3, [r4, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	da00      	bge.n	80114f6 <_free_r+0x12>
 80114f4:	18e4      	adds	r4, r4, r3
 80114f6:	0028      	movs	r0, r5
 80114f8:	f000 fc56 	bl	8011da8 <__malloc_lock>
 80114fc:	4a1d      	ldr	r2, [pc, #116]	@ (8011574 <_free_r+0x90>)
 80114fe:	6813      	ldr	r3, [r2, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d105      	bne.n	8011510 <_free_r+0x2c>
 8011504:	6063      	str	r3, [r4, #4]
 8011506:	6014      	str	r4, [r2, #0]
 8011508:	0028      	movs	r0, r5
 801150a:	f000 fc55 	bl	8011db8 <__malloc_unlock>
 801150e:	bd70      	pop	{r4, r5, r6, pc}
 8011510:	42a3      	cmp	r3, r4
 8011512:	d908      	bls.n	8011526 <_free_r+0x42>
 8011514:	6820      	ldr	r0, [r4, #0]
 8011516:	1821      	adds	r1, r4, r0
 8011518:	428b      	cmp	r3, r1
 801151a:	d1f3      	bne.n	8011504 <_free_r+0x20>
 801151c:	6819      	ldr	r1, [r3, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	1809      	adds	r1, r1, r0
 8011522:	6021      	str	r1, [r4, #0]
 8011524:	e7ee      	b.n	8011504 <_free_r+0x20>
 8011526:	001a      	movs	r2, r3
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d001      	beq.n	8011532 <_free_r+0x4e>
 801152e:	42a3      	cmp	r3, r4
 8011530:	d9f9      	bls.n	8011526 <_free_r+0x42>
 8011532:	6811      	ldr	r1, [r2, #0]
 8011534:	1850      	adds	r0, r2, r1
 8011536:	42a0      	cmp	r0, r4
 8011538:	d10b      	bne.n	8011552 <_free_r+0x6e>
 801153a:	6820      	ldr	r0, [r4, #0]
 801153c:	1809      	adds	r1, r1, r0
 801153e:	1850      	adds	r0, r2, r1
 8011540:	6011      	str	r1, [r2, #0]
 8011542:	4283      	cmp	r3, r0
 8011544:	d1e0      	bne.n	8011508 <_free_r+0x24>
 8011546:	6818      	ldr	r0, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	1841      	adds	r1, r0, r1
 801154c:	6011      	str	r1, [r2, #0]
 801154e:	6053      	str	r3, [r2, #4]
 8011550:	e7da      	b.n	8011508 <_free_r+0x24>
 8011552:	42a0      	cmp	r0, r4
 8011554:	d902      	bls.n	801155c <_free_r+0x78>
 8011556:	230c      	movs	r3, #12
 8011558:	602b      	str	r3, [r5, #0]
 801155a:	e7d5      	b.n	8011508 <_free_r+0x24>
 801155c:	6820      	ldr	r0, [r4, #0]
 801155e:	1821      	adds	r1, r4, r0
 8011560:	428b      	cmp	r3, r1
 8011562:	d103      	bne.n	801156c <_free_r+0x88>
 8011564:	6819      	ldr	r1, [r3, #0]
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	1809      	adds	r1, r1, r0
 801156a:	6021      	str	r1, [r4, #0]
 801156c:	6063      	str	r3, [r4, #4]
 801156e:	6054      	str	r4, [r2, #4]
 8011570:	e7ca      	b.n	8011508 <_free_r+0x24>
 8011572:	46c0      	nop			@ (mov r8, r8)
 8011574:	200022a4 	.word	0x200022a4

08011578 <rshift>:
 8011578:	0002      	movs	r2, r0
 801157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157c:	6904      	ldr	r4, [r0, #16]
 801157e:	b085      	sub	sp, #20
 8011580:	3214      	adds	r2, #20
 8011582:	114b      	asrs	r3, r1, #5
 8011584:	0016      	movs	r6, r2
 8011586:	9302      	str	r3, [sp, #8]
 8011588:	429c      	cmp	r4, r3
 801158a:	dd31      	ble.n	80115f0 <rshift+0x78>
 801158c:	261f      	movs	r6, #31
 801158e:	000f      	movs	r7, r1
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	00a5      	lsls	r5, r4, #2
 8011594:	18d3      	adds	r3, r2, r3
 8011596:	4037      	ands	r7, r6
 8011598:	1955      	adds	r5, r2, r5
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	9701      	str	r7, [sp, #4]
 801159e:	4231      	tst	r1, r6
 80115a0:	d10d      	bne.n	80115be <rshift+0x46>
 80115a2:	0016      	movs	r6, r2
 80115a4:	0019      	movs	r1, r3
 80115a6:	428d      	cmp	r5, r1
 80115a8:	d836      	bhi.n	8011618 <rshift+0xa0>
 80115aa:	9b00      	ldr	r3, [sp, #0]
 80115ac:	2600      	movs	r6, #0
 80115ae:	3b03      	subs	r3, #3
 80115b0:	429d      	cmp	r5, r3
 80115b2:	d302      	bcc.n	80115ba <rshift+0x42>
 80115b4:	9b02      	ldr	r3, [sp, #8]
 80115b6:	1ae4      	subs	r4, r4, r3
 80115b8:	00a6      	lsls	r6, r4, #2
 80115ba:	1996      	adds	r6, r2, r6
 80115bc:	e018      	b.n	80115f0 <rshift+0x78>
 80115be:	2120      	movs	r1, #32
 80115c0:	9e01      	ldr	r6, [sp, #4]
 80115c2:	9f01      	ldr	r7, [sp, #4]
 80115c4:	1b89      	subs	r1, r1, r6
 80115c6:	9e00      	ldr	r6, [sp, #0]
 80115c8:	9103      	str	r1, [sp, #12]
 80115ca:	ce02      	ldmia	r6!, {r1}
 80115cc:	4694      	mov	ip, r2
 80115ce:	40f9      	lsrs	r1, r7
 80115d0:	42b5      	cmp	r5, r6
 80115d2:	d816      	bhi.n	8011602 <rshift+0x8a>
 80115d4:	9b00      	ldr	r3, [sp, #0]
 80115d6:	2600      	movs	r6, #0
 80115d8:	3301      	adds	r3, #1
 80115da:	429d      	cmp	r5, r3
 80115dc:	d303      	bcc.n	80115e6 <rshift+0x6e>
 80115de:	9b02      	ldr	r3, [sp, #8]
 80115e0:	1ae4      	subs	r4, r4, r3
 80115e2:	00a6      	lsls	r6, r4, #2
 80115e4:	3e04      	subs	r6, #4
 80115e6:	1996      	adds	r6, r2, r6
 80115e8:	6031      	str	r1, [r6, #0]
 80115ea:	2900      	cmp	r1, #0
 80115ec:	d000      	beq.n	80115f0 <rshift+0x78>
 80115ee:	3604      	adds	r6, #4
 80115f0:	1ab1      	subs	r1, r6, r2
 80115f2:	1089      	asrs	r1, r1, #2
 80115f4:	6101      	str	r1, [r0, #16]
 80115f6:	4296      	cmp	r6, r2
 80115f8:	d101      	bne.n	80115fe <rshift+0x86>
 80115fa:	2300      	movs	r3, #0
 80115fc:	6143      	str	r3, [r0, #20]
 80115fe:	b005      	add	sp, #20
 8011600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011602:	6837      	ldr	r7, [r6, #0]
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	409f      	lsls	r7, r3
 8011608:	430f      	orrs	r7, r1
 801160a:	4661      	mov	r1, ip
 801160c:	c180      	stmia	r1!, {r7}
 801160e:	468c      	mov	ip, r1
 8011610:	9b01      	ldr	r3, [sp, #4]
 8011612:	ce02      	ldmia	r6!, {r1}
 8011614:	40d9      	lsrs	r1, r3
 8011616:	e7db      	b.n	80115d0 <rshift+0x58>
 8011618:	c980      	ldmia	r1!, {r7}
 801161a:	c680      	stmia	r6!, {r7}
 801161c:	e7c3      	b.n	80115a6 <rshift+0x2e>

0801161e <__hexdig_fun>:
 801161e:	0002      	movs	r2, r0
 8011620:	3a30      	subs	r2, #48	@ 0x30
 8011622:	0003      	movs	r3, r0
 8011624:	2a09      	cmp	r2, #9
 8011626:	d802      	bhi.n	801162e <__hexdig_fun+0x10>
 8011628:	3b20      	subs	r3, #32
 801162a:	b2d8      	uxtb	r0, r3
 801162c:	4770      	bx	lr
 801162e:	0002      	movs	r2, r0
 8011630:	3a61      	subs	r2, #97	@ 0x61
 8011632:	2a05      	cmp	r2, #5
 8011634:	d801      	bhi.n	801163a <__hexdig_fun+0x1c>
 8011636:	3b47      	subs	r3, #71	@ 0x47
 8011638:	e7f7      	b.n	801162a <__hexdig_fun+0xc>
 801163a:	001a      	movs	r2, r3
 801163c:	3a41      	subs	r2, #65	@ 0x41
 801163e:	2000      	movs	r0, #0
 8011640:	2a05      	cmp	r2, #5
 8011642:	d8f3      	bhi.n	801162c <__hexdig_fun+0xe>
 8011644:	3b27      	subs	r3, #39	@ 0x27
 8011646:	e7f0      	b.n	801162a <__hexdig_fun+0xc>

08011648 <__gethex>:
 8011648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801164a:	b089      	sub	sp, #36	@ 0x24
 801164c:	9307      	str	r3, [sp, #28]
 801164e:	680b      	ldr	r3, [r1, #0]
 8011650:	9201      	str	r2, [sp, #4]
 8011652:	9003      	str	r0, [sp, #12]
 8011654:	9106      	str	r1, [sp, #24]
 8011656:	1c9a      	adds	r2, r3, #2
 8011658:	0011      	movs	r1, r2
 801165a:	3201      	adds	r2, #1
 801165c:	1e50      	subs	r0, r2, #1
 801165e:	7800      	ldrb	r0, [r0, #0]
 8011660:	2830      	cmp	r0, #48	@ 0x30
 8011662:	d0f9      	beq.n	8011658 <__gethex+0x10>
 8011664:	1acb      	subs	r3, r1, r3
 8011666:	3b02      	subs	r3, #2
 8011668:	9305      	str	r3, [sp, #20]
 801166a:	9100      	str	r1, [sp, #0]
 801166c:	f7ff ffd7 	bl	801161e <__hexdig_fun>
 8011670:	2300      	movs	r3, #0
 8011672:	001d      	movs	r5, r3
 8011674:	9302      	str	r3, [sp, #8]
 8011676:	4298      	cmp	r0, r3
 8011678:	d11e      	bne.n	80116b8 <__gethex+0x70>
 801167a:	2201      	movs	r2, #1
 801167c:	49a6      	ldr	r1, [pc, #664]	@ (8011918 <__gethex+0x2d0>)
 801167e:	9800      	ldr	r0, [sp, #0]
 8011680:	f7ff f80e 	bl	80106a0 <strncmp>
 8011684:	0007      	movs	r7, r0
 8011686:	42a8      	cmp	r0, r5
 8011688:	d000      	beq.n	801168c <__gethex+0x44>
 801168a:	e06a      	b.n	8011762 <__gethex+0x11a>
 801168c:	9b00      	ldr	r3, [sp, #0]
 801168e:	7858      	ldrb	r0, [r3, #1]
 8011690:	1c5c      	adds	r4, r3, #1
 8011692:	f7ff ffc4 	bl	801161e <__hexdig_fun>
 8011696:	2301      	movs	r3, #1
 8011698:	9302      	str	r3, [sp, #8]
 801169a:	42a8      	cmp	r0, r5
 801169c:	d02f      	beq.n	80116fe <__gethex+0xb6>
 801169e:	9400      	str	r4, [sp, #0]
 80116a0:	9b00      	ldr	r3, [sp, #0]
 80116a2:	7818      	ldrb	r0, [r3, #0]
 80116a4:	2830      	cmp	r0, #48	@ 0x30
 80116a6:	d009      	beq.n	80116bc <__gethex+0x74>
 80116a8:	f7ff ffb9 	bl	801161e <__hexdig_fun>
 80116ac:	4242      	negs	r2, r0
 80116ae:	4142      	adcs	r2, r0
 80116b0:	2301      	movs	r3, #1
 80116b2:	0025      	movs	r5, r4
 80116b4:	9202      	str	r2, [sp, #8]
 80116b6:	9305      	str	r3, [sp, #20]
 80116b8:	9c00      	ldr	r4, [sp, #0]
 80116ba:	e004      	b.n	80116c6 <__gethex+0x7e>
 80116bc:	9b00      	ldr	r3, [sp, #0]
 80116be:	3301      	adds	r3, #1
 80116c0:	9300      	str	r3, [sp, #0]
 80116c2:	e7ed      	b.n	80116a0 <__gethex+0x58>
 80116c4:	3401      	adds	r4, #1
 80116c6:	7820      	ldrb	r0, [r4, #0]
 80116c8:	f7ff ffa9 	bl	801161e <__hexdig_fun>
 80116cc:	1e07      	subs	r7, r0, #0
 80116ce:	d1f9      	bne.n	80116c4 <__gethex+0x7c>
 80116d0:	2201      	movs	r2, #1
 80116d2:	0020      	movs	r0, r4
 80116d4:	4990      	ldr	r1, [pc, #576]	@ (8011918 <__gethex+0x2d0>)
 80116d6:	f7fe ffe3 	bl	80106a0 <strncmp>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d10d      	bne.n	80116fa <__gethex+0xb2>
 80116de:	2d00      	cmp	r5, #0
 80116e0:	d106      	bne.n	80116f0 <__gethex+0xa8>
 80116e2:	3401      	adds	r4, #1
 80116e4:	0025      	movs	r5, r4
 80116e6:	7820      	ldrb	r0, [r4, #0]
 80116e8:	f7ff ff99 	bl	801161e <__hexdig_fun>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d102      	bne.n	80116f6 <__gethex+0xae>
 80116f0:	1b2d      	subs	r5, r5, r4
 80116f2:	00af      	lsls	r7, r5, #2
 80116f4:	e003      	b.n	80116fe <__gethex+0xb6>
 80116f6:	3401      	adds	r4, #1
 80116f8:	e7f5      	b.n	80116e6 <__gethex+0x9e>
 80116fa:	2d00      	cmp	r5, #0
 80116fc:	d1f8      	bne.n	80116f0 <__gethex+0xa8>
 80116fe:	2220      	movs	r2, #32
 8011700:	7823      	ldrb	r3, [r4, #0]
 8011702:	0026      	movs	r6, r4
 8011704:	4393      	bics	r3, r2
 8011706:	2b50      	cmp	r3, #80	@ 0x50
 8011708:	d11d      	bne.n	8011746 <__gethex+0xfe>
 801170a:	7863      	ldrb	r3, [r4, #1]
 801170c:	2b2b      	cmp	r3, #43	@ 0x2b
 801170e:	d02d      	beq.n	801176c <__gethex+0x124>
 8011710:	2b2d      	cmp	r3, #45	@ 0x2d
 8011712:	d02f      	beq.n	8011774 <__gethex+0x12c>
 8011714:	2300      	movs	r3, #0
 8011716:	1c66      	adds	r6, r4, #1
 8011718:	9304      	str	r3, [sp, #16]
 801171a:	7830      	ldrb	r0, [r6, #0]
 801171c:	f7ff ff7f 	bl	801161e <__hexdig_fun>
 8011720:	1e43      	subs	r3, r0, #1
 8011722:	b2db      	uxtb	r3, r3
 8011724:	0005      	movs	r5, r0
 8011726:	2b18      	cmp	r3, #24
 8011728:	d82a      	bhi.n	8011780 <__gethex+0x138>
 801172a:	7870      	ldrb	r0, [r6, #1]
 801172c:	f7ff ff77 	bl	801161e <__hexdig_fun>
 8011730:	1e43      	subs	r3, r0, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	3601      	adds	r6, #1
 8011736:	3d10      	subs	r5, #16
 8011738:	2b18      	cmp	r3, #24
 801173a:	d91d      	bls.n	8011778 <__gethex+0x130>
 801173c:	9b04      	ldr	r3, [sp, #16]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d000      	beq.n	8011744 <__gethex+0xfc>
 8011742:	426d      	negs	r5, r5
 8011744:	197f      	adds	r7, r7, r5
 8011746:	9b06      	ldr	r3, [sp, #24]
 8011748:	601e      	str	r6, [r3, #0]
 801174a:	9b02      	ldr	r3, [sp, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d019      	beq.n	8011784 <__gethex+0x13c>
 8011750:	9b05      	ldr	r3, [sp, #20]
 8011752:	2606      	movs	r6, #6
 8011754:	425a      	negs	r2, r3
 8011756:	4153      	adcs	r3, r2
 8011758:	425b      	negs	r3, r3
 801175a:	401e      	ands	r6, r3
 801175c:	0030      	movs	r0, r6
 801175e:	b009      	add	sp, #36	@ 0x24
 8011760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011762:	2301      	movs	r3, #1
 8011764:	2700      	movs	r7, #0
 8011766:	9c00      	ldr	r4, [sp, #0]
 8011768:	9302      	str	r3, [sp, #8]
 801176a:	e7c8      	b.n	80116fe <__gethex+0xb6>
 801176c:	2300      	movs	r3, #0
 801176e:	9304      	str	r3, [sp, #16]
 8011770:	1ca6      	adds	r6, r4, #2
 8011772:	e7d2      	b.n	801171a <__gethex+0xd2>
 8011774:	2301      	movs	r3, #1
 8011776:	e7fa      	b.n	801176e <__gethex+0x126>
 8011778:	230a      	movs	r3, #10
 801177a:	435d      	muls	r5, r3
 801177c:	182d      	adds	r5, r5, r0
 801177e:	e7d4      	b.n	801172a <__gethex+0xe2>
 8011780:	0026      	movs	r6, r4
 8011782:	e7e0      	b.n	8011746 <__gethex+0xfe>
 8011784:	9b00      	ldr	r3, [sp, #0]
 8011786:	9902      	ldr	r1, [sp, #8]
 8011788:	1ae3      	subs	r3, r4, r3
 801178a:	3b01      	subs	r3, #1
 801178c:	2b07      	cmp	r3, #7
 801178e:	dc0a      	bgt.n	80117a6 <__gethex+0x15e>
 8011790:	9803      	ldr	r0, [sp, #12]
 8011792:	f000 fb19 	bl	8011dc8 <_Balloc>
 8011796:	1e05      	subs	r5, r0, #0
 8011798:	d108      	bne.n	80117ac <__gethex+0x164>
 801179a:	002a      	movs	r2, r5
 801179c:	21e4      	movs	r1, #228	@ 0xe4
 801179e:	4b5f      	ldr	r3, [pc, #380]	@ (801191c <__gethex+0x2d4>)
 80117a0:	485f      	ldr	r0, [pc, #380]	@ (8011920 <__gethex+0x2d8>)
 80117a2:	f001 fa15 	bl	8012bd0 <__assert_func>
 80117a6:	3101      	adds	r1, #1
 80117a8:	105b      	asrs	r3, r3, #1
 80117aa:	e7ef      	b.n	801178c <__gethex+0x144>
 80117ac:	0003      	movs	r3, r0
 80117ae:	3314      	adds	r3, #20
 80117b0:	9302      	str	r3, [sp, #8]
 80117b2:	9305      	str	r3, [sp, #20]
 80117b4:	2300      	movs	r3, #0
 80117b6:	001e      	movs	r6, r3
 80117b8:	9304      	str	r3, [sp, #16]
 80117ba:	9b00      	ldr	r3, [sp, #0]
 80117bc:	42a3      	cmp	r3, r4
 80117be:	d338      	bcc.n	8011832 <__gethex+0x1ea>
 80117c0:	9c05      	ldr	r4, [sp, #20]
 80117c2:	9b02      	ldr	r3, [sp, #8]
 80117c4:	c440      	stmia	r4!, {r6}
 80117c6:	1ae4      	subs	r4, r4, r3
 80117c8:	10a4      	asrs	r4, r4, #2
 80117ca:	0030      	movs	r0, r6
 80117cc:	612c      	str	r4, [r5, #16]
 80117ce:	f000 fbf3 	bl	8011fb8 <__hi0bits>
 80117d2:	9b01      	ldr	r3, [sp, #4]
 80117d4:	0164      	lsls	r4, r4, #5
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	1a26      	subs	r6, r4, r0
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	429e      	cmp	r6, r3
 80117de:	dd52      	ble.n	8011886 <__gethex+0x23e>
 80117e0:	1af6      	subs	r6, r6, r3
 80117e2:	0031      	movs	r1, r6
 80117e4:	0028      	movs	r0, r5
 80117e6:	f000 ff8e 	bl	8012706 <__any_on>
 80117ea:	1e04      	subs	r4, r0, #0
 80117ec:	d00f      	beq.n	801180e <__gethex+0x1c6>
 80117ee:	2401      	movs	r4, #1
 80117f0:	211f      	movs	r1, #31
 80117f2:	0020      	movs	r0, r4
 80117f4:	1e73      	subs	r3, r6, #1
 80117f6:	4019      	ands	r1, r3
 80117f8:	4088      	lsls	r0, r1
 80117fa:	0001      	movs	r1, r0
 80117fc:	115a      	asrs	r2, r3, #5
 80117fe:	9802      	ldr	r0, [sp, #8]
 8011800:	0092      	lsls	r2, r2, #2
 8011802:	5812      	ldr	r2, [r2, r0]
 8011804:	420a      	tst	r2, r1
 8011806:	d002      	beq.n	801180e <__gethex+0x1c6>
 8011808:	42a3      	cmp	r3, r4
 801180a:	dc34      	bgt.n	8011876 <__gethex+0x22e>
 801180c:	2402      	movs	r4, #2
 801180e:	0031      	movs	r1, r6
 8011810:	0028      	movs	r0, r5
 8011812:	f7ff feb1 	bl	8011578 <rshift>
 8011816:	19bf      	adds	r7, r7, r6
 8011818:	9b01      	ldr	r3, [sp, #4]
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	42bb      	cmp	r3, r7
 801181e:	da42      	bge.n	80118a6 <__gethex+0x25e>
 8011820:	0029      	movs	r1, r5
 8011822:	9803      	ldr	r0, [sp, #12]
 8011824:	f000 fb14 	bl	8011e50 <_Bfree>
 8011828:	2300      	movs	r3, #0
 801182a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801182c:	26a3      	movs	r6, #163	@ 0xa3
 801182e:	6013      	str	r3, [r2, #0]
 8011830:	e794      	b.n	801175c <__gethex+0x114>
 8011832:	3c01      	subs	r4, #1
 8011834:	7823      	ldrb	r3, [r4, #0]
 8011836:	2b2e      	cmp	r3, #46	@ 0x2e
 8011838:	d012      	beq.n	8011860 <__gethex+0x218>
 801183a:	9b04      	ldr	r3, [sp, #16]
 801183c:	2b20      	cmp	r3, #32
 801183e:	d104      	bne.n	801184a <__gethex+0x202>
 8011840:	9b05      	ldr	r3, [sp, #20]
 8011842:	c340      	stmia	r3!, {r6}
 8011844:	2600      	movs	r6, #0
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	9604      	str	r6, [sp, #16]
 801184a:	7820      	ldrb	r0, [r4, #0]
 801184c:	f7ff fee7 	bl	801161e <__hexdig_fun>
 8011850:	230f      	movs	r3, #15
 8011852:	4018      	ands	r0, r3
 8011854:	9b04      	ldr	r3, [sp, #16]
 8011856:	4098      	lsls	r0, r3
 8011858:	3304      	adds	r3, #4
 801185a:	4306      	orrs	r6, r0
 801185c:	9304      	str	r3, [sp, #16]
 801185e:	e7ac      	b.n	80117ba <__gethex+0x172>
 8011860:	9b00      	ldr	r3, [sp, #0]
 8011862:	42a3      	cmp	r3, r4
 8011864:	d8e9      	bhi.n	801183a <__gethex+0x1f2>
 8011866:	2201      	movs	r2, #1
 8011868:	0020      	movs	r0, r4
 801186a:	492b      	ldr	r1, [pc, #172]	@ (8011918 <__gethex+0x2d0>)
 801186c:	f7fe ff18 	bl	80106a0 <strncmp>
 8011870:	2800      	cmp	r0, #0
 8011872:	d1e2      	bne.n	801183a <__gethex+0x1f2>
 8011874:	e7a1      	b.n	80117ba <__gethex+0x172>
 8011876:	0028      	movs	r0, r5
 8011878:	1eb1      	subs	r1, r6, #2
 801187a:	f000 ff44 	bl	8012706 <__any_on>
 801187e:	2800      	cmp	r0, #0
 8011880:	d0c4      	beq.n	801180c <__gethex+0x1c4>
 8011882:	2403      	movs	r4, #3
 8011884:	e7c3      	b.n	801180e <__gethex+0x1c6>
 8011886:	9b00      	ldr	r3, [sp, #0]
 8011888:	2400      	movs	r4, #0
 801188a:	429e      	cmp	r6, r3
 801188c:	dac4      	bge.n	8011818 <__gethex+0x1d0>
 801188e:	1b9e      	subs	r6, r3, r6
 8011890:	0029      	movs	r1, r5
 8011892:	0032      	movs	r2, r6
 8011894:	9803      	ldr	r0, [sp, #12]
 8011896:	f000 fcfd 	bl	8012294 <__lshift>
 801189a:	0003      	movs	r3, r0
 801189c:	3314      	adds	r3, #20
 801189e:	0005      	movs	r5, r0
 80118a0:	1bbf      	subs	r7, r7, r6
 80118a2:	9302      	str	r3, [sp, #8]
 80118a4:	e7b8      	b.n	8011818 <__gethex+0x1d0>
 80118a6:	9b01      	ldr	r3, [sp, #4]
 80118a8:	685e      	ldr	r6, [r3, #4]
 80118aa:	42be      	cmp	r6, r7
 80118ac:	dd6f      	ble.n	801198e <__gethex+0x346>
 80118ae:	9b00      	ldr	r3, [sp, #0]
 80118b0:	1bf6      	subs	r6, r6, r7
 80118b2:	42b3      	cmp	r3, r6
 80118b4:	dc36      	bgt.n	8011924 <__gethex+0x2dc>
 80118b6:	9b01      	ldr	r3, [sp, #4]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	2b02      	cmp	r3, #2
 80118bc:	d024      	beq.n	8011908 <__gethex+0x2c0>
 80118be:	2b03      	cmp	r3, #3
 80118c0:	d026      	beq.n	8011910 <__gethex+0x2c8>
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d117      	bne.n	80118f6 <__gethex+0x2ae>
 80118c6:	9b00      	ldr	r3, [sp, #0]
 80118c8:	42b3      	cmp	r3, r6
 80118ca:	d114      	bne.n	80118f6 <__gethex+0x2ae>
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d10b      	bne.n	80118e8 <__gethex+0x2a0>
 80118d0:	9b01      	ldr	r3, [sp, #4]
 80118d2:	9a07      	ldr	r2, [sp, #28]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	2662      	movs	r6, #98	@ 0x62
 80118d8:	6013      	str	r3, [r2, #0]
 80118da:	2301      	movs	r3, #1
 80118dc:	9a02      	ldr	r2, [sp, #8]
 80118de:	612b      	str	r3, [r5, #16]
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118e4:	601d      	str	r5, [r3, #0]
 80118e6:	e739      	b.n	801175c <__gethex+0x114>
 80118e8:	9900      	ldr	r1, [sp, #0]
 80118ea:	0028      	movs	r0, r5
 80118ec:	3901      	subs	r1, #1
 80118ee:	f000 ff0a 	bl	8012706 <__any_on>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d1ec      	bne.n	80118d0 <__gethex+0x288>
 80118f6:	0029      	movs	r1, r5
 80118f8:	9803      	ldr	r0, [sp, #12]
 80118fa:	f000 faa9 	bl	8011e50 <_Bfree>
 80118fe:	2300      	movs	r3, #0
 8011900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011902:	2650      	movs	r6, #80	@ 0x50
 8011904:	6013      	str	r3, [r2, #0]
 8011906:	e729      	b.n	801175c <__gethex+0x114>
 8011908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801190a:	2b00      	cmp	r3, #0
 801190c:	d1f3      	bne.n	80118f6 <__gethex+0x2ae>
 801190e:	e7df      	b.n	80118d0 <__gethex+0x288>
 8011910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1dc      	bne.n	80118d0 <__gethex+0x288>
 8011916:	e7ee      	b.n	80118f6 <__gethex+0x2ae>
 8011918:	0801350c 	.word	0x0801350c
 801191c:	080135c6 	.word	0x080135c6
 8011920:	080135d7 	.word	0x080135d7
 8011924:	1e77      	subs	r7, r6, #1
 8011926:	2c00      	cmp	r4, #0
 8011928:	d12f      	bne.n	801198a <__gethex+0x342>
 801192a:	2f00      	cmp	r7, #0
 801192c:	d004      	beq.n	8011938 <__gethex+0x2f0>
 801192e:	0039      	movs	r1, r7
 8011930:	0028      	movs	r0, r5
 8011932:	f000 fee8 	bl	8012706 <__any_on>
 8011936:	0004      	movs	r4, r0
 8011938:	231f      	movs	r3, #31
 801193a:	117a      	asrs	r2, r7, #5
 801193c:	401f      	ands	r7, r3
 801193e:	3b1e      	subs	r3, #30
 8011940:	40bb      	lsls	r3, r7
 8011942:	9902      	ldr	r1, [sp, #8]
 8011944:	0092      	lsls	r2, r2, #2
 8011946:	5852      	ldr	r2, [r2, r1]
 8011948:	421a      	tst	r2, r3
 801194a:	d001      	beq.n	8011950 <__gethex+0x308>
 801194c:	2302      	movs	r3, #2
 801194e:	431c      	orrs	r4, r3
 8011950:	9b00      	ldr	r3, [sp, #0]
 8011952:	0031      	movs	r1, r6
 8011954:	1b9b      	subs	r3, r3, r6
 8011956:	2602      	movs	r6, #2
 8011958:	0028      	movs	r0, r5
 801195a:	9300      	str	r3, [sp, #0]
 801195c:	f7ff fe0c 	bl	8011578 <rshift>
 8011960:	9b01      	ldr	r3, [sp, #4]
 8011962:	685f      	ldr	r7, [r3, #4]
 8011964:	2c00      	cmp	r4, #0
 8011966:	d03f      	beq.n	80119e8 <__gethex+0x3a0>
 8011968:	9b01      	ldr	r3, [sp, #4]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	2b02      	cmp	r3, #2
 801196e:	d010      	beq.n	8011992 <__gethex+0x34a>
 8011970:	2b03      	cmp	r3, #3
 8011972:	d012      	beq.n	801199a <__gethex+0x352>
 8011974:	2b01      	cmp	r3, #1
 8011976:	d106      	bne.n	8011986 <__gethex+0x33e>
 8011978:	07a2      	lsls	r2, r4, #30
 801197a:	d504      	bpl.n	8011986 <__gethex+0x33e>
 801197c:	9a02      	ldr	r2, [sp, #8]
 801197e:	6812      	ldr	r2, [r2, #0]
 8011980:	4314      	orrs	r4, r2
 8011982:	421c      	tst	r4, r3
 8011984:	d10c      	bne.n	80119a0 <__gethex+0x358>
 8011986:	2310      	movs	r3, #16
 8011988:	e02d      	b.n	80119e6 <__gethex+0x39e>
 801198a:	2401      	movs	r4, #1
 801198c:	e7d4      	b.n	8011938 <__gethex+0x2f0>
 801198e:	2601      	movs	r6, #1
 8011990:	e7e8      	b.n	8011964 <__gethex+0x31c>
 8011992:	2301      	movs	r3, #1
 8011994:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011996:	1a9b      	subs	r3, r3, r2
 8011998:	930f      	str	r3, [sp, #60]	@ 0x3c
 801199a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0f2      	beq.n	8011986 <__gethex+0x33e>
 80119a0:	692b      	ldr	r3, [r5, #16]
 80119a2:	2000      	movs	r0, #0
 80119a4:	9302      	str	r3, [sp, #8]
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	9304      	str	r3, [sp, #16]
 80119aa:	002b      	movs	r3, r5
 80119ac:	9a04      	ldr	r2, [sp, #16]
 80119ae:	3314      	adds	r3, #20
 80119b0:	1899      	adds	r1, r3, r2
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	1c54      	adds	r4, r2, #1
 80119b6:	d01c      	beq.n	80119f2 <__gethex+0x3aa>
 80119b8:	3201      	adds	r2, #1
 80119ba:	601a      	str	r2, [r3, #0]
 80119bc:	002b      	movs	r3, r5
 80119be:	3314      	adds	r3, #20
 80119c0:	2e02      	cmp	r6, #2
 80119c2:	d13f      	bne.n	8011a44 <__gethex+0x3fc>
 80119c4:	9a01      	ldr	r2, [sp, #4]
 80119c6:	9900      	ldr	r1, [sp, #0]
 80119c8:	6812      	ldr	r2, [r2, #0]
 80119ca:	3a01      	subs	r2, #1
 80119cc:	428a      	cmp	r2, r1
 80119ce:	d109      	bne.n	80119e4 <__gethex+0x39c>
 80119d0:	000a      	movs	r2, r1
 80119d2:	201f      	movs	r0, #31
 80119d4:	4010      	ands	r0, r2
 80119d6:	2201      	movs	r2, #1
 80119d8:	4082      	lsls	r2, r0
 80119da:	1149      	asrs	r1, r1, #5
 80119dc:	0089      	lsls	r1, r1, #2
 80119de:	58cb      	ldr	r3, [r1, r3]
 80119e0:	4213      	tst	r3, r2
 80119e2:	d13d      	bne.n	8011a60 <__gethex+0x418>
 80119e4:	2320      	movs	r3, #32
 80119e6:	431e      	orrs	r6, r3
 80119e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119ea:	601d      	str	r5, [r3, #0]
 80119ec:	9b07      	ldr	r3, [sp, #28]
 80119ee:	601f      	str	r7, [r3, #0]
 80119f0:	e6b4      	b.n	801175c <__gethex+0x114>
 80119f2:	c301      	stmia	r3!, {r0}
 80119f4:	4299      	cmp	r1, r3
 80119f6:	d8dc      	bhi.n	80119b2 <__gethex+0x36a>
 80119f8:	68ab      	ldr	r3, [r5, #8]
 80119fa:	9a02      	ldr	r2, [sp, #8]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	db18      	blt.n	8011a32 <__gethex+0x3ea>
 8011a00:	6869      	ldr	r1, [r5, #4]
 8011a02:	9803      	ldr	r0, [sp, #12]
 8011a04:	3101      	adds	r1, #1
 8011a06:	f000 f9df 	bl	8011dc8 <_Balloc>
 8011a0a:	1e04      	subs	r4, r0, #0
 8011a0c:	d104      	bne.n	8011a18 <__gethex+0x3d0>
 8011a0e:	0022      	movs	r2, r4
 8011a10:	2184      	movs	r1, #132	@ 0x84
 8011a12:	4b1d      	ldr	r3, [pc, #116]	@ (8011a88 <__gethex+0x440>)
 8011a14:	481d      	ldr	r0, [pc, #116]	@ (8011a8c <__gethex+0x444>)
 8011a16:	e6c4      	b.n	80117a2 <__gethex+0x15a>
 8011a18:	0029      	movs	r1, r5
 8011a1a:	692a      	ldr	r2, [r5, #16]
 8011a1c:	310c      	adds	r1, #12
 8011a1e:	3202      	adds	r2, #2
 8011a20:	0092      	lsls	r2, r2, #2
 8011a22:	300c      	adds	r0, #12
 8011a24:	f7fe fed8 	bl	80107d8 <memcpy>
 8011a28:	0029      	movs	r1, r5
 8011a2a:	9803      	ldr	r0, [sp, #12]
 8011a2c:	f000 fa10 	bl	8011e50 <_Bfree>
 8011a30:	0025      	movs	r5, r4
 8011a32:	692b      	ldr	r3, [r5, #16]
 8011a34:	1c5a      	adds	r2, r3, #1
 8011a36:	612a      	str	r2, [r5, #16]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	18eb      	adds	r3, r5, r3
 8011a40:	605a      	str	r2, [r3, #4]
 8011a42:	e7bb      	b.n	80119bc <__gethex+0x374>
 8011a44:	692a      	ldr	r2, [r5, #16]
 8011a46:	9902      	ldr	r1, [sp, #8]
 8011a48:	428a      	cmp	r2, r1
 8011a4a:	dd0b      	ble.n	8011a64 <__gethex+0x41c>
 8011a4c:	2101      	movs	r1, #1
 8011a4e:	0028      	movs	r0, r5
 8011a50:	f7ff fd92 	bl	8011578 <rshift>
 8011a54:	9b01      	ldr	r3, [sp, #4]
 8011a56:	3701      	adds	r7, #1
 8011a58:	689b      	ldr	r3, [r3, #8]
 8011a5a:	42bb      	cmp	r3, r7
 8011a5c:	da00      	bge.n	8011a60 <__gethex+0x418>
 8011a5e:	e6df      	b.n	8011820 <__gethex+0x1d8>
 8011a60:	2601      	movs	r6, #1
 8011a62:	e7bf      	b.n	80119e4 <__gethex+0x39c>
 8011a64:	221f      	movs	r2, #31
 8011a66:	9c00      	ldr	r4, [sp, #0]
 8011a68:	9900      	ldr	r1, [sp, #0]
 8011a6a:	4014      	ands	r4, r2
 8011a6c:	4211      	tst	r1, r2
 8011a6e:	d0f7      	beq.n	8011a60 <__gethex+0x418>
 8011a70:	9a04      	ldr	r2, [sp, #16]
 8011a72:	189b      	adds	r3, r3, r2
 8011a74:	3b04      	subs	r3, #4
 8011a76:	6818      	ldr	r0, [r3, #0]
 8011a78:	f000 fa9e 	bl	8011fb8 <__hi0bits>
 8011a7c:	2320      	movs	r3, #32
 8011a7e:	1b1b      	subs	r3, r3, r4
 8011a80:	4298      	cmp	r0, r3
 8011a82:	dbe3      	blt.n	8011a4c <__gethex+0x404>
 8011a84:	e7ec      	b.n	8011a60 <__gethex+0x418>
 8011a86:	46c0      	nop			@ (mov r8, r8)
 8011a88:	080135c6 	.word	0x080135c6
 8011a8c:	080135d7 	.word	0x080135d7

08011a90 <L_shift>:
 8011a90:	2308      	movs	r3, #8
 8011a92:	b570      	push	{r4, r5, r6, lr}
 8011a94:	2520      	movs	r5, #32
 8011a96:	1a9a      	subs	r2, r3, r2
 8011a98:	0092      	lsls	r2, r2, #2
 8011a9a:	1aad      	subs	r5, r5, r2
 8011a9c:	6843      	ldr	r3, [r0, #4]
 8011a9e:	6804      	ldr	r4, [r0, #0]
 8011aa0:	001e      	movs	r6, r3
 8011aa2:	40ae      	lsls	r6, r5
 8011aa4:	40d3      	lsrs	r3, r2
 8011aa6:	4334      	orrs	r4, r6
 8011aa8:	6004      	str	r4, [r0, #0]
 8011aaa:	6043      	str	r3, [r0, #4]
 8011aac:	3004      	adds	r0, #4
 8011aae:	4288      	cmp	r0, r1
 8011ab0:	d3f4      	bcc.n	8011a9c <L_shift+0xc>
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}

08011ab4 <__match>:
 8011ab4:	b530      	push	{r4, r5, lr}
 8011ab6:	6803      	ldr	r3, [r0, #0]
 8011ab8:	780c      	ldrb	r4, [r1, #0]
 8011aba:	3301      	adds	r3, #1
 8011abc:	2c00      	cmp	r4, #0
 8011abe:	d102      	bne.n	8011ac6 <__match+0x12>
 8011ac0:	6003      	str	r3, [r0, #0]
 8011ac2:	2001      	movs	r0, #1
 8011ac4:	bd30      	pop	{r4, r5, pc}
 8011ac6:	781a      	ldrb	r2, [r3, #0]
 8011ac8:	0015      	movs	r5, r2
 8011aca:	3d41      	subs	r5, #65	@ 0x41
 8011acc:	2d19      	cmp	r5, #25
 8011ace:	d800      	bhi.n	8011ad2 <__match+0x1e>
 8011ad0:	3220      	adds	r2, #32
 8011ad2:	3101      	adds	r1, #1
 8011ad4:	42a2      	cmp	r2, r4
 8011ad6:	d0ef      	beq.n	8011ab8 <__match+0x4>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e7f3      	b.n	8011ac4 <__match+0x10>

08011adc <__hexnan>:
 8011adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ade:	680b      	ldr	r3, [r1, #0]
 8011ae0:	b08b      	sub	sp, #44	@ 0x2c
 8011ae2:	9201      	str	r2, [sp, #4]
 8011ae4:	9901      	ldr	r1, [sp, #4]
 8011ae6:	115a      	asrs	r2, r3, #5
 8011ae8:	0092      	lsls	r2, r2, #2
 8011aea:	188a      	adds	r2, r1, r2
 8011aec:	9202      	str	r2, [sp, #8]
 8011aee:	0019      	movs	r1, r3
 8011af0:	221f      	movs	r2, #31
 8011af2:	4011      	ands	r1, r2
 8011af4:	9008      	str	r0, [sp, #32]
 8011af6:	9106      	str	r1, [sp, #24]
 8011af8:	4213      	tst	r3, r2
 8011afa:	d002      	beq.n	8011b02 <__hexnan+0x26>
 8011afc:	9b02      	ldr	r3, [sp, #8]
 8011afe:	3304      	adds	r3, #4
 8011b00:	9302      	str	r3, [sp, #8]
 8011b02:	9b02      	ldr	r3, [sp, #8]
 8011b04:	2500      	movs	r5, #0
 8011b06:	1f1f      	subs	r7, r3, #4
 8011b08:	003e      	movs	r6, r7
 8011b0a:	003c      	movs	r4, r7
 8011b0c:	9b08      	ldr	r3, [sp, #32]
 8011b0e:	603d      	str	r5, [r7, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	9507      	str	r5, [sp, #28]
 8011b14:	9305      	str	r3, [sp, #20]
 8011b16:	9503      	str	r5, [sp, #12]
 8011b18:	9b05      	ldr	r3, [sp, #20]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b1e:	9b05      	ldr	r3, [sp, #20]
 8011b20:	785b      	ldrb	r3, [r3, #1]
 8011b22:	9304      	str	r3, [sp, #16]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d028      	beq.n	8011b7a <__hexnan+0x9e>
 8011b28:	9804      	ldr	r0, [sp, #16]
 8011b2a:	f7ff fd78 	bl	801161e <__hexdig_fun>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	d155      	bne.n	8011bde <__hexnan+0x102>
 8011b32:	9b04      	ldr	r3, [sp, #16]
 8011b34:	2b20      	cmp	r3, #32
 8011b36:	d819      	bhi.n	8011b6c <__hexnan+0x90>
 8011b38:	9b03      	ldr	r3, [sp, #12]
 8011b3a:	9a07      	ldr	r2, [sp, #28]
 8011b3c:	4293      	cmp	r3, r2
 8011b3e:	dd12      	ble.n	8011b66 <__hexnan+0x8a>
 8011b40:	42b4      	cmp	r4, r6
 8011b42:	d206      	bcs.n	8011b52 <__hexnan+0x76>
 8011b44:	2d07      	cmp	r5, #7
 8011b46:	dc04      	bgt.n	8011b52 <__hexnan+0x76>
 8011b48:	002a      	movs	r2, r5
 8011b4a:	0031      	movs	r1, r6
 8011b4c:	0020      	movs	r0, r4
 8011b4e:	f7ff ff9f 	bl	8011a90 <L_shift>
 8011b52:	9b01      	ldr	r3, [sp, #4]
 8011b54:	2508      	movs	r5, #8
 8011b56:	429c      	cmp	r4, r3
 8011b58:	d905      	bls.n	8011b66 <__hexnan+0x8a>
 8011b5a:	1f26      	subs	r6, r4, #4
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	0034      	movs	r4, r6
 8011b60:	9b03      	ldr	r3, [sp, #12]
 8011b62:	6035      	str	r5, [r6, #0]
 8011b64:	9307      	str	r3, [sp, #28]
 8011b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b68:	9305      	str	r3, [sp, #20]
 8011b6a:	e7d5      	b.n	8011b18 <__hexnan+0x3c>
 8011b6c:	9b04      	ldr	r3, [sp, #16]
 8011b6e:	2b29      	cmp	r3, #41	@ 0x29
 8011b70:	d15a      	bne.n	8011c28 <__hexnan+0x14c>
 8011b72:	9b05      	ldr	r3, [sp, #20]
 8011b74:	9a08      	ldr	r2, [sp, #32]
 8011b76:	3302      	adds	r3, #2
 8011b78:	6013      	str	r3, [r2, #0]
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d053      	beq.n	8011c28 <__hexnan+0x14c>
 8011b80:	42b4      	cmp	r4, r6
 8011b82:	d206      	bcs.n	8011b92 <__hexnan+0xb6>
 8011b84:	2d07      	cmp	r5, #7
 8011b86:	dc04      	bgt.n	8011b92 <__hexnan+0xb6>
 8011b88:	002a      	movs	r2, r5
 8011b8a:	0031      	movs	r1, r6
 8011b8c:	0020      	movs	r0, r4
 8011b8e:	f7ff ff7f 	bl	8011a90 <L_shift>
 8011b92:	9b01      	ldr	r3, [sp, #4]
 8011b94:	429c      	cmp	r4, r3
 8011b96:	d936      	bls.n	8011c06 <__hexnan+0x12a>
 8011b98:	001a      	movs	r2, r3
 8011b9a:	0023      	movs	r3, r4
 8011b9c:	cb02      	ldmia	r3!, {r1}
 8011b9e:	c202      	stmia	r2!, {r1}
 8011ba0:	429f      	cmp	r7, r3
 8011ba2:	d2fb      	bcs.n	8011b9c <__hexnan+0xc0>
 8011ba4:	9b02      	ldr	r3, [sp, #8]
 8011ba6:	1c62      	adds	r2, r4, #1
 8011ba8:	1ed9      	subs	r1, r3, #3
 8011baa:	2304      	movs	r3, #4
 8011bac:	4291      	cmp	r1, r2
 8011bae:	d305      	bcc.n	8011bbc <__hexnan+0xe0>
 8011bb0:	9b02      	ldr	r3, [sp, #8]
 8011bb2:	3b04      	subs	r3, #4
 8011bb4:	1b1b      	subs	r3, r3, r4
 8011bb6:	089b      	lsrs	r3, r3, #2
 8011bb8:	3301      	adds	r3, #1
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	9a01      	ldr	r2, [sp, #4]
 8011bbe:	18d3      	adds	r3, r2, r3
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	c304      	stmia	r3!, {r2}
 8011bc4:	429f      	cmp	r7, r3
 8011bc6:	d2fc      	bcs.n	8011bc2 <__hexnan+0xe6>
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d104      	bne.n	8011bd8 <__hexnan+0xfc>
 8011bce:	9b01      	ldr	r3, [sp, #4]
 8011bd0:	429f      	cmp	r7, r3
 8011bd2:	d127      	bne.n	8011c24 <__hexnan+0x148>
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	603b      	str	r3, [r7, #0]
 8011bd8:	2005      	movs	r0, #5
 8011bda:	b00b      	add	sp, #44	@ 0x2c
 8011bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bde:	9b03      	ldr	r3, [sp, #12]
 8011be0:	3501      	adds	r5, #1
 8011be2:	3301      	adds	r3, #1
 8011be4:	9303      	str	r3, [sp, #12]
 8011be6:	2d08      	cmp	r5, #8
 8011be8:	dd06      	ble.n	8011bf8 <__hexnan+0x11c>
 8011bea:	9b01      	ldr	r3, [sp, #4]
 8011bec:	429c      	cmp	r4, r3
 8011bee:	d9ba      	bls.n	8011b66 <__hexnan+0x8a>
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	2501      	movs	r5, #1
 8011bf4:	3c04      	subs	r4, #4
 8011bf6:	6023      	str	r3, [r4, #0]
 8011bf8:	220f      	movs	r2, #15
 8011bfa:	6823      	ldr	r3, [r4, #0]
 8011bfc:	4010      	ands	r0, r2
 8011bfe:	011b      	lsls	r3, r3, #4
 8011c00:	4303      	orrs	r3, r0
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	e7af      	b.n	8011b66 <__hexnan+0x8a>
 8011c06:	9b06      	ldr	r3, [sp, #24]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d0dd      	beq.n	8011bc8 <__hexnan+0xec>
 8011c0c:	2320      	movs	r3, #32
 8011c0e:	9a06      	ldr	r2, [sp, #24]
 8011c10:	9902      	ldr	r1, [sp, #8]
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	2201      	movs	r2, #1
 8011c16:	4252      	negs	r2, r2
 8011c18:	40da      	lsrs	r2, r3
 8011c1a:	3904      	subs	r1, #4
 8011c1c:	680b      	ldr	r3, [r1, #0]
 8011c1e:	4013      	ands	r3, r2
 8011c20:	600b      	str	r3, [r1, #0]
 8011c22:	e7d1      	b.n	8011bc8 <__hexnan+0xec>
 8011c24:	3f04      	subs	r7, #4
 8011c26:	e7cf      	b.n	8011bc8 <__hexnan+0xec>
 8011c28:	2004      	movs	r0, #4
 8011c2a:	e7d6      	b.n	8011bda <__hexnan+0xfe>

08011c2c <malloc>:
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	4b03      	ldr	r3, [pc, #12]	@ (8011c3c <malloc+0x10>)
 8011c30:	0001      	movs	r1, r0
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	f000 f826 	bl	8011c84 <_malloc_r>
 8011c38:	bd10      	pop	{r4, pc}
 8011c3a:	46c0      	nop			@ (mov r8, r8)
 8011c3c:	20000308 	.word	0x20000308

08011c40 <sbrk_aligned>:
 8011c40:	b570      	push	{r4, r5, r6, lr}
 8011c42:	4e0f      	ldr	r6, [pc, #60]	@ (8011c80 <sbrk_aligned+0x40>)
 8011c44:	000d      	movs	r5, r1
 8011c46:	6831      	ldr	r1, [r6, #0]
 8011c48:	0004      	movs	r4, r0
 8011c4a:	2900      	cmp	r1, #0
 8011c4c:	d102      	bne.n	8011c54 <sbrk_aligned+0x14>
 8011c4e:	f000 ffad 	bl	8012bac <_sbrk_r>
 8011c52:	6030      	str	r0, [r6, #0]
 8011c54:	0029      	movs	r1, r5
 8011c56:	0020      	movs	r0, r4
 8011c58:	f000 ffa8 	bl	8012bac <_sbrk_r>
 8011c5c:	1c43      	adds	r3, r0, #1
 8011c5e:	d103      	bne.n	8011c68 <sbrk_aligned+0x28>
 8011c60:	2501      	movs	r5, #1
 8011c62:	426d      	negs	r5, r5
 8011c64:	0028      	movs	r0, r5
 8011c66:	bd70      	pop	{r4, r5, r6, pc}
 8011c68:	2303      	movs	r3, #3
 8011c6a:	1cc5      	adds	r5, r0, #3
 8011c6c:	439d      	bics	r5, r3
 8011c6e:	42a8      	cmp	r0, r5
 8011c70:	d0f8      	beq.n	8011c64 <sbrk_aligned+0x24>
 8011c72:	1a29      	subs	r1, r5, r0
 8011c74:	0020      	movs	r0, r4
 8011c76:	f000 ff99 	bl	8012bac <_sbrk_r>
 8011c7a:	3001      	adds	r0, #1
 8011c7c:	d1f2      	bne.n	8011c64 <sbrk_aligned+0x24>
 8011c7e:	e7ef      	b.n	8011c60 <sbrk_aligned+0x20>
 8011c80:	200022a0 	.word	0x200022a0

08011c84 <_malloc_r>:
 8011c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c86:	2203      	movs	r2, #3
 8011c88:	1ccb      	adds	r3, r1, #3
 8011c8a:	4393      	bics	r3, r2
 8011c8c:	3308      	adds	r3, #8
 8011c8e:	0005      	movs	r5, r0
 8011c90:	001f      	movs	r7, r3
 8011c92:	2b0c      	cmp	r3, #12
 8011c94:	d234      	bcs.n	8011d00 <_malloc_r+0x7c>
 8011c96:	270c      	movs	r7, #12
 8011c98:	42b9      	cmp	r1, r7
 8011c9a:	d833      	bhi.n	8011d04 <_malloc_r+0x80>
 8011c9c:	0028      	movs	r0, r5
 8011c9e:	f000 f883 	bl	8011da8 <__malloc_lock>
 8011ca2:	4e37      	ldr	r6, [pc, #220]	@ (8011d80 <_malloc_r+0xfc>)
 8011ca4:	6833      	ldr	r3, [r6, #0]
 8011ca6:	001c      	movs	r4, r3
 8011ca8:	2c00      	cmp	r4, #0
 8011caa:	d12f      	bne.n	8011d0c <_malloc_r+0x88>
 8011cac:	0039      	movs	r1, r7
 8011cae:	0028      	movs	r0, r5
 8011cb0:	f7ff ffc6 	bl	8011c40 <sbrk_aligned>
 8011cb4:	0004      	movs	r4, r0
 8011cb6:	1c43      	adds	r3, r0, #1
 8011cb8:	d15f      	bne.n	8011d7a <_malloc_r+0xf6>
 8011cba:	6834      	ldr	r4, [r6, #0]
 8011cbc:	9400      	str	r4, [sp, #0]
 8011cbe:	9b00      	ldr	r3, [sp, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d14a      	bne.n	8011d5a <_malloc_r+0xd6>
 8011cc4:	2c00      	cmp	r4, #0
 8011cc6:	d052      	beq.n	8011d6e <_malloc_r+0xea>
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	0028      	movs	r0, r5
 8011ccc:	18e3      	adds	r3, r4, r3
 8011cce:	9900      	ldr	r1, [sp, #0]
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	f000 ff6b 	bl	8012bac <_sbrk_r>
 8011cd6:	9b01      	ldr	r3, [sp, #4]
 8011cd8:	4283      	cmp	r3, r0
 8011cda:	d148      	bne.n	8011d6e <_malloc_r+0xea>
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	0028      	movs	r0, r5
 8011ce0:	1aff      	subs	r7, r7, r3
 8011ce2:	0039      	movs	r1, r7
 8011ce4:	f7ff ffac 	bl	8011c40 <sbrk_aligned>
 8011ce8:	3001      	adds	r0, #1
 8011cea:	d040      	beq.n	8011d6e <_malloc_r+0xea>
 8011cec:	6823      	ldr	r3, [r4, #0]
 8011cee:	19db      	adds	r3, r3, r7
 8011cf0:	6023      	str	r3, [r4, #0]
 8011cf2:	6833      	ldr	r3, [r6, #0]
 8011cf4:	685a      	ldr	r2, [r3, #4]
 8011cf6:	2a00      	cmp	r2, #0
 8011cf8:	d133      	bne.n	8011d62 <_malloc_r+0xde>
 8011cfa:	9b00      	ldr	r3, [sp, #0]
 8011cfc:	6033      	str	r3, [r6, #0]
 8011cfe:	e019      	b.n	8011d34 <_malloc_r+0xb0>
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	dac9      	bge.n	8011c98 <_malloc_r+0x14>
 8011d04:	230c      	movs	r3, #12
 8011d06:	602b      	str	r3, [r5, #0]
 8011d08:	2000      	movs	r0, #0
 8011d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011d0c:	6821      	ldr	r1, [r4, #0]
 8011d0e:	1bc9      	subs	r1, r1, r7
 8011d10:	d420      	bmi.n	8011d54 <_malloc_r+0xd0>
 8011d12:	290b      	cmp	r1, #11
 8011d14:	d90a      	bls.n	8011d2c <_malloc_r+0xa8>
 8011d16:	19e2      	adds	r2, r4, r7
 8011d18:	6027      	str	r7, [r4, #0]
 8011d1a:	42a3      	cmp	r3, r4
 8011d1c:	d104      	bne.n	8011d28 <_malloc_r+0xa4>
 8011d1e:	6032      	str	r2, [r6, #0]
 8011d20:	6863      	ldr	r3, [r4, #4]
 8011d22:	6011      	str	r1, [r2, #0]
 8011d24:	6053      	str	r3, [r2, #4]
 8011d26:	e005      	b.n	8011d34 <_malloc_r+0xb0>
 8011d28:	605a      	str	r2, [r3, #4]
 8011d2a:	e7f9      	b.n	8011d20 <_malloc_r+0x9c>
 8011d2c:	6862      	ldr	r2, [r4, #4]
 8011d2e:	42a3      	cmp	r3, r4
 8011d30:	d10e      	bne.n	8011d50 <_malloc_r+0xcc>
 8011d32:	6032      	str	r2, [r6, #0]
 8011d34:	0028      	movs	r0, r5
 8011d36:	f000 f83f 	bl	8011db8 <__malloc_unlock>
 8011d3a:	0020      	movs	r0, r4
 8011d3c:	2207      	movs	r2, #7
 8011d3e:	300b      	adds	r0, #11
 8011d40:	1d23      	adds	r3, r4, #4
 8011d42:	4390      	bics	r0, r2
 8011d44:	1ac2      	subs	r2, r0, r3
 8011d46:	4298      	cmp	r0, r3
 8011d48:	d0df      	beq.n	8011d0a <_malloc_r+0x86>
 8011d4a:	1a1b      	subs	r3, r3, r0
 8011d4c:	50a3      	str	r3, [r4, r2]
 8011d4e:	e7dc      	b.n	8011d0a <_malloc_r+0x86>
 8011d50:	605a      	str	r2, [r3, #4]
 8011d52:	e7ef      	b.n	8011d34 <_malloc_r+0xb0>
 8011d54:	0023      	movs	r3, r4
 8011d56:	6864      	ldr	r4, [r4, #4]
 8011d58:	e7a6      	b.n	8011ca8 <_malloc_r+0x24>
 8011d5a:	9c00      	ldr	r4, [sp, #0]
 8011d5c:	6863      	ldr	r3, [r4, #4]
 8011d5e:	9300      	str	r3, [sp, #0]
 8011d60:	e7ad      	b.n	8011cbe <_malloc_r+0x3a>
 8011d62:	001a      	movs	r2, r3
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	42a3      	cmp	r3, r4
 8011d68:	d1fb      	bne.n	8011d62 <_malloc_r+0xde>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e7da      	b.n	8011d24 <_malloc_r+0xa0>
 8011d6e:	230c      	movs	r3, #12
 8011d70:	0028      	movs	r0, r5
 8011d72:	602b      	str	r3, [r5, #0]
 8011d74:	f000 f820 	bl	8011db8 <__malloc_unlock>
 8011d78:	e7c6      	b.n	8011d08 <_malloc_r+0x84>
 8011d7a:	6007      	str	r7, [r0, #0]
 8011d7c:	e7da      	b.n	8011d34 <_malloc_r+0xb0>
 8011d7e:	46c0      	nop			@ (mov r8, r8)
 8011d80:	200022a4 	.word	0x200022a4

08011d84 <__ascii_mbtowc>:
 8011d84:	b082      	sub	sp, #8
 8011d86:	2900      	cmp	r1, #0
 8011d88:	d100      	bne.n	8011d8c <__ascii_mbtowc+0x8>
 8011d8a:	a901      	add	r1, sp, #4
 8011d8c:	1e10      	subs	r0, r2, #0
 8011d8e:	d006      	beq.n	8011d9e <__ascii_mbtowc+0x1a>
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d006      	beq.n	8011da2 <__ascii_mbtowc+0x1e>
 8011d94:	7813      	ldrb	r3, [r2, #0]
 8011d96:	600b      	str	r3, [r1, #0]
 8011d98:	7810      	ldrb	r0, [r2, #0]
 8011d9a:	1e43      	subs	r3, r0, #1
 8011d9c:	4198      	sbcs	r0, r3
 8011d9e:	b002      	add	sp, #8
 8011da0:	4770      	bx	lr
 8011da2:	2002      	movs	r0, #2
 8011da4:	4240      	negs	r0, r0
 8011da6:	e7fa      	b.n	8011d9e <__ascii_mbtowc+0x1a>

08011da8 <__malloc_lock>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	4802      	ldr	r0, [pc, #8]	@ (8011db4 <__malloc_lock+0xc>)
 8011dac:	f7fe fd07 	bl	80107be <__retarget_lock_acquire_recursive>
 8011db0:	bd10      	pop	{r4, pc}
 8011db2:	46c0      	nop			@ (mov r8, r8)
 8011db4:	2000229c 	.word	0x2000229c

08011db8 <__malloc_unlock>:
 8011db8:	b510      	push	{r4, lr}
 8011dba:	4802      	ldr	r0, [pc, #8]	@ (8011dc4 <__malloc_unlock+0xc>)
 8011dbc:	f7fe fd00 	bl	80107c0 <__retarget_lock_release_recursive>
 8011dc0:	bd10      	pop	{r4, pc}
 8011dc2:	46c0      	nop			@ (mov r8, r8)
 8011dc4:	2000229c 	.word	0x2000229c

08011dc8 <_Balloc>:
 8011dc8:	b570      	push	{r4, r5, r6, lr}
 8011dca:	69c5      	ldr	r5, [r0, #28]
 8011dcc:	0006      	movs	r6, r0
 8011dce:	000c      	movs	r4, r1
 8011dd0:	2d00      	cmp	r5, #0
 8011dd2:	d10e      	bne.n	8011df2 <_Balloc+0x2a>
 8011dd4:	2010      	movs	r0, #16
 8011dd6:	f7ff ff29 	bl	8011c2c <malloc>
 8011dda:	1e02      	subs	r2, r0, #0
 8011ddc:	61f0      	str	r0, [r6, #28]
 8011dde:	d104      	bne.n	8011dea <_Balloc+0x22>
 8011de0:	216b      	movs	r1, #107	@ 0x6b
 8011de2:	4b19      	ldr	r3, [pc, #100]	@ (8011e48 <_Balloc+0x80>)
 8011de4:	4819      	ldr	r0, [pc, #100]	@ (8011e4c <_Balloc+0x84>)
 8011de6:	f000 fef3 	bl	8012bd0 <__assert_func>
 8011dea:	6045      	str	r5, [r0, #4]
 8011dec:	6085      	str	r5, [r0, #8]
 8011dee:	6005      	str	r5, [r0, #0]
 8011df0:	60c5      	str	r5, [r0, #12]
 8011df2:	69f5      	ldr	r5, [r6, #28]
 8011df4:	68eb      	ldr	r3, [r5, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d013      	beq.n	8011e22 <_Balloc+0x5a>
 8011dfa:	69f3      	ldr	r3, [r6, #28]
 8011dfc:	00a2      	lsls	r2, r4, #2
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	189b      	adds	r3, r3, r2
 8011e02:	6818      	ldr	r0, [r3, #0]
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d118      	bne.n	8011e3a <_Balloc+0x72>
 8011e08:	2101      	movs	r1, #1
 8011e0a:	000d      	movs	r5, r1
 8011e0c:	40a5      	lsls	r5, r4
 8011e0e:	1d6a      	adds	r2, r5, #5
 8011e10:	0030      	movs	r0, r6
 8011e12:	0092      	lsls	r2, r2, #2
 8011e14:	f000 fefa 	bl	8012c0c <_calloc_r>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	d00c      	beq.n	8011e36 <_Balloc+0x6e>
 8011e1c:	6044      	str	r4, [r0, #4]
 8011e1e:	6085      	str	r5, [r0, #8]
 8011e20:	e00d      	b.n	8011e3e <_Balloc+0x76>
 8011e22:	2221      	movs	r2, #33	@ 0x21
 8011e24:	2104      	movs	r1, #4
 8011e26:	0030      	movs	r0, r6
 8011e28:	f000 fef0 	bl	8012c0c <_calloc_r>
 8011e2c:	69f3      	ldr	r3, [r6, #28]
 8011e2e:	60e8      	str	r0, [r5, #12]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1e1      	bne.n	8011dfa <_Balloc+0x32>
 8011e36:	2000      	movs	r0, #0
 8011e38:	bd70      	pop	{r4, r5, r6, pc}
 8011e3a:	6802      	ldr	r2, [r0, #0]
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	6103      	str	r3, [r0, #16]
 8011e42:	60c3      	str	r3, [r0, #12]
 8011e44:	e7f8      	b.n	8011e38 <_Balloc+0x70>
 8011e46:	46c0      	nop			@ (mov r8, r8)
 8011e48:	08013557 	.word	0x08013557
 8011e4c:	08013637 	.word	0x08013637

08011e50 <_Bfree>:
 8011e50:	b570      	push	{r4, r5, r6, lr}
 8011e52:	69c6      	ldr	r6, [r0, #28]
 8011e54:	0005      	movs	r5, r0
 8011e56:	000c      	movs	r4, r1
 8011e58:	2e00      	cmp	r6, #0
 8011e5a:	d10e      	bne.n	8011e7a <_Bfree+0x2a>
 8011e5c:	2010      	movs	r0, #16
 8011e5e:	f7ff fee5 	bl	8011c2c <malloc>
 8011e62:	1e02      	subs	r2, r0, #0
 8011e64:	61e8      	str	r0, [r5, #28]
 8011e66:	d104      	bne.n	8011e72 <_Bfree+0x22>
 8011e68:	218f      	movs	r1, #143	@ 0x8f
 8011e6a:	4b09      	ldr	r3, [pc, #36]	@ (8011e90 <_Bfree+0x40>)
 8011e6c:	4809      	ldr	r0, [pc, #36]	@ (8011e94 <_Bfree+0x44>)
 8011e6e:	f000 feaf 	bl	8012bd0 <__assert_func>
 8011e72:	6046      	str	r6, [r0, #4]
 8011e74:	6086      	str	r6, [r0, #8]
 8011e76:	6006      	str	r6, [r0, #0]
 8011e78:	60c6      	str	r6, [r0, #12]
 8011e7a:	2c00      	cmp	r4, #0
 8011e7c:	d007      	beq.n	8011e8e <_Bfree+0x3e>
 8011e7e:	69eb      	ldr	r3, [r5, #28]
 8011e80:	6862      	ldr	r2, [r4, #4]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	0092      	lsls	r2, r2, #2
 8011e86:	189b      	adds	r3, r3, r2
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	6022      	str	r2, [r4, #0]
 8011e8c:	601c      	str	r4, [r3, #0]
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	08013557 	.word	0x08013557
 8011e94:	08013637 	.word	0x08013637

08011e98 <__multadd>:
 8011e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e9a:	000f      	movs	r7, r1
 8011e9c:	9001      	str	r0, [sp, #4]
 8011e9e:	000c      	movs	r4, r1
 8011ea0:	001e      	movs	r6, r3
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	690d      	ldr	r5, [r1, #16]
 8011ea6:	3714      	adds	r7, #20
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	3001      	adds	r0, #1
 8011eac:	b299      	uxth	r1, r3
 8011eae:	4351      	muls	r1, r2
 8011eb0:	0c1b      	lsrs	r3, r3, #16
 8011eb2:	4353      	muls	r3, r2
 8011eb4:	1989      	adds	r1, r1, r6
 8011eb6:	0c0e      	lsrs	r6, r1, #16
 8011eb8:	199b      	adds	r3, r3, r6
 8011eba:	0c1e      	lsrs	r6, r3, #16
 8011ebc:	b289      	uxth	r1, r1
 8011ebe:	041b      	lsls	r3, r3, #16
 8011ec0:	185b      	adds	r3, r3, r1
 8011ec2:	c708      	stmia	r7!, {r3}
 8011ec4:	4285      	cmp	r5, r0
 8011ec6:	dcef      	bgt.n	8011ea8 <__multadd+0x10>
 8011ec8:	2e00      	cmp	r6, #0
 8011eca:	d022      	beq.n	8011f12 <__multadd+0x7a>
 8011ecc:	68a3      	ldr	r3, [r4, #8]
 8011ece:	42ab      	cmp	r3, r5
 8011ed0:	dc19      	bgt.n	8011f06 <__multadd+0x6e>
 8011ed2:	6861      	ldr	r1, [r4, #4]
 8011ed4:	9801      	ldr	r0, [sp, #4]
 8011ed6:	3101      	adds	r1, #1
 8011ed8:	f7ff ff76 	bl	8011dc8 <_Balloc>
 8011edc:	1e07      	subs	r7, r0, #0
 8011ede:	d105      	bne.n	8011eec <__multadd+0x54>
 8011ee0:	003a      	movs	r2, r7
 8011ee2:	21ba      	movs	r1, #186	@ 0xba
 8011ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8011f18 <__multadd+0x80>)
 8011ee6:	480d      	ldr	r0, [pc, #52]	@ (8011f1c <__multadd+0x84>)
 8011ee8:	f000 fe72 	bl	8012bd0 <__assert_func>
 8011eec:	0021      	movs	r1, r4
 8011eee:	6922      	ldr	r2, [r4, #16]
 8011ef0:	310c      	adds	r1, #12
 8011ef2:	3202      	adds	r2, #2
 8011ef4:	0092      	lsls	r2, r2, #2
 8011ef6:	300c      	adds	r0, #12
 8011ef8:	f7fe fc6e 	bl	80107d8 <memcpy>
 8011efc:	0021      	movs	r1, r4
 8011efe:	9801      	ldr	r0, [sp, #4]
 8011f00:	f7ff ffa6 	bl	8011e50 <_Bfree>
 8011f04:	003c      	movs	r4, r7
 8011f06:	1d2b      	adds	r3, r5, #4
 8011f08:	009b      	lsls	r3, r3, #2
 8011f0a:	18e3      	adds	r3, r4, r3
 8011f0c:	3501      	adds	r5, #1
 8011f0e:	605e      	str	r6, [r3, #4]
 8011f10:	6125      	str	r5, [r4, #16]
 8011f12:	0020      	movs	r0, r4
 8011f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f16:	46c0      	nop			@ (mov r8, r8)
 8011f18:	080135c6 	.word	0x080135c6
 8011f1c:	08013637 	.word	0x08013637

08011f20 <__s2b>:
 8011f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f22:	0007      	movs	r7, r0
 8011f24:	0018      	movs	r0, r3
 8011f26:	000c      	movs	r4, r1
 8011f28:	3008      	adds	r0, #8
 8011f2a:	2109      	movs	r1, #9
 8011f2c:	9301      	str	r3, [sp, #4]
 8011f2e:	0015      	movs	r5, r2
 8011f30:	f7ee f98c 	bl	800024c <__divsi3>
 8011f34:	2301      	movs	r3, #1
 8011f36:	2100      	movs	r1, #0
 8011f38:	4283      	cmp	r3, r0
 8011f3a:	db0a      	blt.n	8011f52 <__s2b+0x32>
 8011f3c:	0038      	movs	r0, r7
 8011f3e:	f7ff ff43 	bl	8011dc8 <_Balloc>
 8011f42:	1e01      	subs	r1, r0, #0
 8011f44:	d108      	bne.n	8011f58 <__s2b+0x38>
 8011f46:	000a      	movs	r2, r1
 8011f48:	4b19      	ldr	r3, [pc, #100]	@ (8011fb0 <__s2b+0x90>)
 8011f4a:	481a      	ldr	r0, [pc, #104]	@ (8011fb4 <__s2b+0x94>)
 8011f4c:	31d3      	adds	r1, #211	@ 0xd3
 8011f4e:	f000 fe3f 	bl	8012bd0 <__assert_func>
 8011f52:	005b      	lsls	r3, r3, #1
 8011f54:	3101      	adds	r1, #1
 8011f56:	e7ef      	b.n	8011f38 <__s2b+0x18>
 8011f58:	9b08      	ldr	r3, [sp, #32]
 8011f5a:	6143      	str	r3, [r0, #20]
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	6103      	str	r3, [r0, #16]
 8011f60:	2d09      	cmp	r5, #9
 8011f62:	dd18      	ble.n	8011f96 <__s2b+0x76>
 8011f64:	0023      	movs	r3, r4
 8011f66:	3309      	adds	r3, #9
 8011f68:	001e      	movs	r6, r3
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	1964      	adds	r4, r4, r5
 8011f6e:	7833      	ldrb	r3, [r6, #0]
 8011f70:	220a      	movs	r2, #10
 8011f72:	0038      	movs	r0, r7
 8011f74:	3b30      	subs	r3, #48	@ 0x30
 8011f76:	f7ff ff8f 	bl	8011e98 <__multadd>
 8011f7a:	3601      	adds	r6, #1
 8011f7c:	0001      	movs	r1, r0
 8011f7e:	42a6      	cmp	r6, r4
 8011f80:	d1f5      	bne.n	8011f6e <__s2b+0x4e>
 8011f82:	002c      	movs	r4, r5
 8011f84:	9b00      	ldr	r3, [sp, #0]
 8011f86:	3c08      	subs	r4, #8
 8011f88:	191c      	adds	r4, r3, r4
 8011f8a:	002e      	movs	r6, r5
 8011f8c:	9b01      	ldr	r3, [sp, #4]
 8011f8e:	429e      	cmp	r6, r3
 8011f90:	db04      	blt.n	8011f9c <__s2b+0x7c>
 8011f92:	0008      	movs	r0, r1
 8011f94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011f96:	2509      	movs	r5, #9
 8011f98:	340a      	adds	r4, #10
 8011f9a:	e7f6      	b.n	8011f8a <__s2b+0x6a>
 8011f9c:	1b63      	subs	r3, r4, r5
 8011f9e:	5d9b      	ldrb	r3, [r3, r6]
 8011fa0:	220a      	movs	r2, #10
 8011fa2:	0038      	movs	r0, r7
 8011fa4:	3b30      	subs	r3, #48	@ 0x30
 8011fa6:	f7ff ff77 	bl	8011e98 <__multadd>
 8011faa:	3601      	adds	r6, #1
 8011fac:	0001      	movs	r1, r0
 8011fae:	e7ed      	b.n	8011f8c <__s2b+0x6c>
 8011fb0:	080135c6 	.word	0x080135c6
 8011fb4:	08013637 	.word	0x08013637

08011fb8 <__hi0bits>:
 8011fb8:	2280      	movs	r2, #128	@ 0x80
 8011fba:	0003      	movs	r3, r0
 8011fbc:	0252      	lsls	r2, r2, #9
 8011fbe:	2000      	movs	r0, #0
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d201      	bcs.n	8011fc8 <__hi0bits+0x10>
 8011fc4:	041b      	lsls	r3, r3, #16
 8011fc6:	3010      	adds	r0, #16
 8011fc8:	2280      	movs	r2, #128	@ 0x80
 8011fca:	0452      	lsls	r2, r2, #17
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d201      	bcs.n	8011fd4 <__hi0bits+0x1c>
 8011fd0:	3008      	adds	r0, #8
 8011fd2:	021b      	lsls	r3, r3, #8
 8011fd4:	2280      	movs	r2, #128	@ 0x80
 8011fd6:	0552      	lsls	r2, r2, #21
 8011fd8:	4293      	cmp	r3, r2
 8011fda:	d201      	bcs.n	8011fe0 <__hi0bits+0x28>
 8011fdc:	3004      	adds	r0, #4
 8011fde:	011b      	lsls	r3, r3, #4
 8011fe0:	2280      	movs	r2, #128	@ 0x80
 8011fe2:	05d2      	lsls	r2, r2, #23
 8011fe4:	4293      	cmp	r3, r2
 8011fe6:	d201      	bcs.n	8011fec <__hi0bits+0x34>
 8011fe8:	3002      	adds	r0, #2
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	db03      	blt.n	8011ff8 <__hi0bits+0x40>
 8011ff0:	3001      	adds	r0, #1
 8011ff2:	4213      	tst	r3, r2
 8011ff4:	d100      	bne.n	8011ff8 <__hi0bits+0x40>
 8011ff6:	2020      	movs	r0, #32
 8011ff8:	4770      	bx	lr

08011ffa <__lo0bits>:
 8011ffa:	6803      	ldr	r3, [r0, #0]
 8011ffc:	0001      	movs	r1, r0
 8011ffe:	2207      	movs	r2, #7
 8012000:	0018      	movs	r0, r3
 8012002:	4010      	ands	r0, r2
 8012004:	4213      	tst	r3, r2
 8012006:	d00d      	beq.n	8012024 <__lo0bits+0x2a>
 8012008:	3a06      	subs	r2, #6
 801200a:	2000      	movs	r0, #0
 801200c:	4213      	tst	r3, r2
 801200e:	d105      	bne.n	801201c <__lo0bits+0x22>
 8012010:	3002      	adds	r0, #2
 8012012:	4203      	tst	r3, r0
 8012014:	d003      	beq.n	801201e <__lo0bits+0x24>
 8012016:	40d3      	lsrs	r3, r2
 8012018:	0010      	movs	r0, r2
 801201a:	600b      	str	r3, [r1, #0]
 801201c:	4770      	bx	lr
 801201e:	089b      	lsrs	r3, r3, #2
 8012020:	600b      	str	r3, [r1, #0]
 8012022:	e7fb      	b.n	801201c <__lo0bits+0x22>
 8012024:	b29a      	uxth	r2, r3
 8012026:	2a00      	cmp	r2, #0
 8012028:	d101      	bne.n	801202e <__lo0bits+0x34>
 801202a:	2010      	movs	r0, #16
 801202c:	0c1b      	lsrs	r3, r3, #16
 801202e:	b2da      	uxtb	r2, r3
 8012030:	2a00      	cmp	r2, #0
 8012032:	d101      	bne.n	8012038 <__lo0bits+0x3e>
 8012034:	3008      	adds	r0, #8
 8012036:	0a1b      	lsrs	r3, r3, #8
 8012038:	071a      	lsls	r2, r3, #28
 801203a:	d101      	bne.n	8012040 <__lo0bits+0x46>
 801203c:	3004      	adds	r0, #4
 801203e:	091b      	lsrs	r3, r3, #4
 8012040:	079a      	lsls	r2, r3, #30
 8012042:	d101      	bne.n	8012048 <__lo0bits+0x4e>
 8012044:	3002      	adds	r0, #2
 8012046:	089b      	lsrs	r3, r3, #2
 8012048:	07da      	lsls	r2, r3, #31
 801204a:	d4e9      	bmi.n	8012020 <__lo0bits+0x26>
 801204c:	3001      	adds	r0, #1
 801204e:	085b      	lsrs	r3, r3, #1
 8012050:	d1e6      	bne.n	8012020 <__lo0bits+0x26>
 8012052:	2020      	movs	r0, #32
 8012054:	e7e2      	b.n	801201c <__lo0bits+0x22>
	...

08012058 <__i2b>:
 8012058:	b510      	push	{r4, lr}
 801205a:	000c      	movs	r4, r1
 801205c:	2101      	movs	r1, #1
 801205e:	f7ff feb3 	bl	8011dc8 <_Balloc>
 8012062:	2800      	cmp	r0, #0
 8012064:	d107      	bne.n	8012076 <__i2b+0x1e>
 8012066:	2146      	movs	r1, #70	@ 0x46
 8012068:	4c05      	ldr	r4, [pc, #20]	@ (8012080 <__i2b+0x28>)
 801206a:	0002      	movs	r2, r0
 801206c:	4b05      	ldr	r3, [pc, #20]	@ (8012084 <__i2b+0x2c>)
 801206e:	0020      	movs	r0, r4
 8012070:	31ff      	adds	r1, #255	@ 0xff
 8012072:	f000 fdad 	bl	8012bd0 <__assert_func>
 8012076:	2301      	movs	r3, #1
 8012078:	6144      	str	r4, [r0, #20]
 801207a:	6103      	str	r3, [r0, #16]
 801207c:	bd10      	pop	{r4, pc}
 801207e:	46c0      	nop			@ (mov r8, r8)
 8012080:	08013637 	.word	0x08013637
 8012084:	080135c6 	.word	0x080135c6

08012088 <__multiply>:
 8012088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801208a:	0014      	movs	r4, r2
 801208c:	690a      	ldr	r2, [r1, #16]
 801208e:	6923      	ldr	r3, [r4, #16]
 8012090:	000d      	movs	r5, r1
 8012092:	b089      	sub	sp, #36	@ 0x24
 8012094:	429a      	cmp	r2, r3
 8012096:	db02      	blt.n	801209e <__multiply+0x16>
 8012098:	0023      	movs	r3, r4
 801209a:	000c      	movs	r4, r1
 801209c:	001d      	movs	r5, r3
 801209e:	6927      	ldr	r7, [r4, #16]
 80120a0:	692e      	ldr	r6, [r5, #16]
 80120a2:	6861      	ldr	r1, [r4, #4]
 80120a4:	19bb      	adds	r3, r7, r6
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	68a3      	ldr	r3, [r4, #8]
 80120aa:	19ba      	adds	r2, r7, r6
 80120ac:	4293      	cmp	r3, r2
 80120ae:	da00      	bge.n	80120b2 <__multiply+0x2a>
 80120b0:	3101      	adds	r1, #1
 80120b2:	f7ff fe89 	bl	8011dc8 <_Balloc>
 80120b6:	4684      	mov	ip, r0
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d106      	bne.n	80120ca <__multiply+0x42>
 80120bc:	21b1      	movs	r1, #177	@ 0xb1
 80120be:	4662      	mov	r2, ip
 80120c0:	4b44      	ldr	r3, [pc, #272]	@ (80121d4 <__multiply+0x14c>)
 80120c2:	4845      	ldr	r0, [pc, #276]	@ (80121d8 <__multiply+0x150>)
 80120c4:	0049      	lsls	r1, r1, #1
 80120c6:	f000 fd83 	bl	8012bd0 <__assert_func>
 80120ca:	0002      	movs	r2, r0
 80120cc:	19bb      	adds	r3, r7, r6
 80120ce:	3214      	adds	r2, #20
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	18d3      	adds	r3, r2, r3
 80120d4:	9301      	str	r3, [sp, #4]
 80120d6:	2100      	movs	r1, #0
 80120d8:	0013      	movs	r3, r2
 80120da:	9801      	ldr	r0, [sp, #4]
 80120dc:	4283      	cmp	r3, r0
 80120de:	d328      	bcc.n	8012132 <__multiply+0xaa>
 80120e0:	0023      	movs	r3, r4
 80120e2:	00bf      	lsls	r7, r7, #2
 80120e4:	3314      	adds	r3, #20
 80120e6:	9304      	str	r3, [sp, #16]
 80120e8:	3514      	adds	r5, #20
 80120ea:	19db      	adds	r3, r3, r7
 80120ec:	00b6      	lsls	r6, r6, #2
 80120ee:	9302      	str	r3, [sp, #8]
 80120f0:	19ab      	adds	r3, r5, r6
 80120f2:	9307      	str	r3, [sp, #28]
 80120f4:	2304      	movs	r3, #4
 80120f6:	9305      	str	r3, [sp, #20]
 80120f8:	0023      	movs	r3, r4
 80120fa:	9902      	ldr	r1, [sp, #8]
 80120fc:	3315      	adds	r3, #21
 80120fe:	4299      	cmp	r1, r3
 8012100:	d305      	bcc.n	801210e <__multiply+0x86>
 8012102:	1b0c      	subs	r4, r1, r4
 8012104:	3c15      	subs	r4, #21
 8012106:	08a4      	lsrs	r4, r4, #2
 8012108:	3401      	adds	r4, #1
 801210a:	00a3      	lsls	r3, r4, #2
 801210c:	9305      	str	r3, [sp, #20]
 801210e:	9b07      	ldr	r3, [sp, #28]
 8012110:	429d      	cmp	r5, r3
 8012112:	d310      	bcc.n	8012136 <__multiply+0xae>
 8012114:	9b00      	ldr	r3, [sp, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	dd05      	ble.n	8012126 <__multiply+0x9e>
 801211a:	9b01      	ldr	r3, [sp, #4]
 801211c:	3b04      	subs	r3, #4
 801211e:	9301      	str	r3, [sp, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d052      	beq.n	80121cc <__multiply+0x144>
 8012126:	4663      	mov	r3, ip
 8012128:	4660      	mov	r0, ip
 801212a:	9a00      	ldr	r2, [sp, #0]
 801212c:	611a      	str	r2, [r3, #16]
 801212e:	b009      	add	sp, #36	@ 0x24
 8012130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012132:	c302      	stmia	r3!, {r1}
 8012134:	e7d1      	b.n	80120da <__multiply+0x52>
 8012136:	682c      	ldr	r4, [r5, #0]
 8012138:	b2a4      	uxth	r4, r4
 801213a:	2c00      	cmp	r4, #0
 801213c:	d01f      	beq.n	801217e <__multiply+0xf6>
 801213e:	2300      	movs	r3, #0
 8012140:	0017      	movs	r7, r2
 8012142:	9e04      	ldr	r6, [sp, #16]
 8012144:	9303      	str	r3, [sp, #12]
 8012146:	ce08      	ldmia	r6!, {r3}
 8012148:	6839      	ldr	r1, [r7, #0]
 801214a:	9306      	str	r3, [sp, #24]
 801214c:	466b      	mov	r3, sp
 801214e:	8b1b      	ldrh	r3, [r3, #24]
 8012150:	b288      	uxth	r0, r1
 8012152:	4363      	muls	r3, r4
 8012154:	181b      	adds	r3, r3, r0
 8012156:	9803      	ldr	r0, [sp, #12]
 8012158:	0c09      	lsrs	r1, r1, #16
 801215a:	181b      	adds	r3, r3, r0
 801215c:	9806      	ldr	r0, [sp, #24]
 801215e:	0c00      	lsrs	r0, r0, #16
 8012160:	4360      	muls	r0, r4
 8012162:	1840      	adds	r0, r0, r1
 8012164:	0c19      	lsrs	r1, r3, #16
 8012166:	1841      	adds	r1, r0, r1
 8012168:	0c08      	lsrs	r0, r1, #16
 801216a:	b29b      	uxth	r3, r3
 801216c:	0409      	lsls	r1, r1, #16
 801216e:	4319      	orrs	r1, r3
 8012170:	9b02      	ldr	r3, [sp, #8]
 8012172:	9003      	str	r0, [sp, #12]
 8012174:	c702      	stmia	r7!, {r1}
 8012176:	42b3      	cmp	r3, r6
 8012178:	d8e5      	bhi.n	8012146 <__multiply+0xbe>
 801217a:	9b05      	ldr	r3, [sp, #20]
 801217c:	50d0      	str	r0, [r2, r3]
 801217e:	682c      	ldr	r4, [r5, #0]
 8012180:	0c24      	lsrs	r4, r4, #16
 8012182:	d020      	beq.n	80121c6 <__multiply+0x13e>
 8012184:	2100      	movs	r1, #0
 8012186:	0010      	movs	r0, r2
 8012188:	6813      	ldr	r3, [r2, #0]
 801218a:	9e04      	ldr	r6, [sp, #16]
 801218c:	9103      	str	r1, [sp, #12]
 801218e:	6831      	ldr	r1, [r6, #0]
 8012190:	6807      	ldr	r7, [r0, #0]
 8012192:	b289      	uxth	r1, r1
 8012194:	4361      	muls	r1, r4
 8012196:	0c3f      	lsrs	r7, r7, #16
 8012198:	19c9      	adds	r1, r1, r7
 801219a:	9f03      	ldr	r7, [sp, #12]
 801219c:	b29b      	uxth	r3, r3
 801219e:	19c9      	adds	r1, r1, r7
 80121a0:	040f      	lsls	r7, r1, #16
 80121a2:	431f      	orrs	r7, r3
 80121a4:	6007      	str	r7, [r0, #0]
 80121a6:	ce80      	ldmia	r6!, {r7}
 80121a8:	6843      	ldr	r3, [r0, #4]
 80121aa:	0c3f      	lsrs	r7, r7, #16
 80121ac:	4367      	muls	r7, r4
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	0c09      	lsrs	r1, r1, #16
 80121b2:	18fb      	adds	r3, r7, r3
 80121b4:	185b      	adds	r3, r3, r1
 80121b6:	0c19      	lsrs	r1, r3, #16
 80121b8:	9103      	str	r1, [sp, #12]
 80121ba:	9902      	ldr	r1, [sp, #8]
 80121bc:	3004      	adds	r0, #4
 80121be:	42b1      	cmp	r1, r6
 80121c0:	d8e5      	bhi.n	801218e <__multiply+0x106>
 80121c2:	9905      	ldr	r1, [sp, #20]
 80121c4:	5053      	str	r3, [r2, r1]
 80121c6:	3504      	adds	r5, #4
 80121c8:	3204      	adds	r2, #4
 80121ca:	e7a0      	b.n	801210e <__multiply+0x86>
 80121cc:	9b00      	ldr	r3, [sp, #0]
 80121ce:	3b01      	subs	r3, #1
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	e79f      	b.n	8012114 <__multiply+0x8c>
 80121d4:	080135c6 	.word	0x080135c6
 80121d8:	08013637 	.word	0x08013637

080121dc <__pow5mult>:
 80121dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121de:	2303      	movs	r3, #3
 80121e0:	0015      	movs	r5, r2
 80121e2:	0007      	movs	r7, r0
 80121e4:	000e      	movs	r6, r1
 80121e6:	401a      	ands	r2, r3
 80121e8:	421d      	tst	r5, r3
 80121ea:	d008      	beq.n	80121fe <__pow5mult+0x22>
 80121ec:	4925      	ldr	r1, [pc, #148]	@ (8012284 <__pow5mult+0xa8>)
 80121ee:	3a01      	subs	r2, #1
 80121f0:	0092      	lsls	r2, r2, #2
 80121f2:	5852      	ldr	r2, [r2, r1]
 80121f4:	2300      	movs	r3, #0
 80121f6:	0031      	movs	r1, r6
 80121f8:	f7ff fe4e 	bl	8011e98 <__multadd>
 80121fc:	0006      	movs	r6, r0
 80121fe:	10ad      	asrs	r5, r5, #2
 8012200:	d03d      	beq.n	801227e <__pow5mult+0xa2>
 8012202:	69fc      	ldr	r4, [r7, #28]
 8012204:	2c00      	cmp	r4, #0
 8012206:	d10f      	bne.n	8012228 <__pow5mult+0x4c>
 8012208:	2010      	movs	r0, #16
 801220a:	f7ff fd0f 	bl	8011c2c <malloc>
 801220e:	1e02      	subs	r2, r0, #0
 8012210:	61f8      	str	r0, [r7, #28]
 8012212:	d105      	bne.n	8012220 <__pow5mult+0x44>
 8012214:	21b4      	movs	r1, #180	@ 0xb4
 8012216:	4b1c      	ldr	r3, [pc, #112]	@ (8012288 <__pow5mult+0xac>)
 8012218:	481c      	ldr	r0, [pc, #112]	@ (801228c <__pow5mult+0xb0>)
 801221a:	31ff      	adds	r1, #255	@ 0xff
 801221c:	f000 fcd8 	bl	8012bd0 <__assert_func>
 8012220:	6044      	str	r4, [r0, #4]
 8012222:	6084      	str	r4, [r0, #8]
 8012224:	6004      	str	r4, [r0, #0]
 8012226:	60c4      	str	r4, [r0, #12]
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	689c      	ldr	r4, [r3, #8]
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	2c00      	cmp	r4, #0
 8012230:	d108      	bne.n	8012244 <__pow5mult+0x68>
 8012232:	0038      	movs	r0, r7
 8012234:	4916      	ldr	r1, [pc, #88]	@ (8012290 <__pow5mult+0xb4>)
 8012236:	f7ff ff0f 	bl	8012058 <__i2b>
 801223a:	9b01      	ldr	r3, [sp, #4]
 801223c:	0004      	movs	r4, r0
 801223e:	6098      	str	r0, [r3, #8]
 8012240:	2300      	movs	r3, #0
 8012242:	6003      	str	r3, [r0, #0]
 8012244:	2301      	movs	r3, #1
 8012246:	421d      	tst	r5, r3
 8012248:	d00a      	beq.n	8012260 <__pow5mult+0x84>
 801224a:	0031      	movs	r1, r6
 801224c:	0022      	movs	r2, r4
 801224e:	0038      	movs	r0, r7
 8012250:	f7ff ff1a 	bl	8012088 <__multiply>
 8012254:	0031      	movs	r1, r6
 8012256:	9001      	str	r0, [sp, #4]
 8012258:	0038      	movs	r0, r7
 801225a:	f7ff fdf9 	bl	8011e50 <_Bfree>
 801225e:	9e01      	ldr	r6, [sp, #4]
 8012260:	106d      	asrs	r5, r5, #1
 8012262:	d00c      	beq.n	801227e <__pow5mult+0xa2>
 8012264:	6820      	ldr	r0, [r4, #0]
 8012266:	2800      	cmp	r0, #0
 8012268:	d107      	bne.n	801227a <__pow5mult+0x9e>
 801226a:	0022      	movs	r2, r4
 801226c:	0021      	movs	r1, r4
 801226e:	0038      	movs	r0, r7
 8012270:	f7ff ff0a 	bl	8012088 <__multiply>
 8012274:	2300      	movs	r3, #0
 8012276:	6020      	str	r0, [r4, #0]
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	0004      	movs	r4, r0
 801227c:	e7e2      	b.n	8012244 <__pow5mult+0x68>
 801227e:	0030      	movs	r0, r6
 8012280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012282:	46c0      	nop			@ (mov r8, r8)
 8012284:	08013730 	.word	0x08013730
 8012288:	08013557 	.word	0x08013557
 801228c:	08013637 	.word	0x08013637
 8012290:	00000271 	.word	0x00000271

08012294 <__lshift>:
 8012294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012296:	000c      	movs	r4, r1
 8012298:	0016      	movs	r6, r2
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	1157      	asrs	r7, r2, #5
 801229e:	b085      	sub	sp, #20
 80122a0:	18fb      	adds	r3, r7, r3
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	3301      	adds	r3, #1
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	6849      	ldr	r1, [r1, #4]
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	9002      	str	r0, [sp, #8]
 80122ae:	9a00      	ldr	r2, [sp, #0]
 80122b0:	4293      	cmp	r3, r2
 80122b2:	db10      	blt.n	80122d6 <__lshift+0x42>
 80122b4:	9802      	ldr	r0, [sp, #8]
 80122b6:	f7ff fd87 	bl	8011dc8 <_Balloc>
 80122ba:	2300      	movs	r3, #0
 80122bc:	0001      	movs	r1, r0
 80122be:	0005      	movs	r5, r0
 80122c0:	001a      	movs	r2, r3
 80122c2:	3114      	adds	r1, #20
 80122c4:	4298      	cmp	r0, r3
 80122c6:	d10c      	bne.n	80122e2 <__lshift+0x4e>
 80122c8:	21ef      	movs	r1, #239	@ 0xef
 80122ca:	002a      	movs	r2, r5
 80122cc:	4b25      	ldr	r3, [pc, #148]	@ (8012364 <__lshift+0xd0>)
 80122ce:	4826      	ldr	r0, [pc, #152]	@ (8012368 <__lshift+0xd4>)
 80122d0:	0049      	lsls	r1, r1, #1
 80122d2:	f000 fc7d 	bl	8012bd0 <__assert_func>
 80122d6:	3101      	adds	r1, #1
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	e7e8      	b.n	80122ae <__lshift+0x1a>
 80122dc:	0098      	lsls	r0, r3, #2
 80122de:	500a      	str	r2, [r1, r0]
 80122e0:	3301      	adds	r3, #1
 80122e2:	42bb      	cmp	r3, r7
 80122e4:	dbfa      	blt.n	80122dc <__lshift+0x48>
 80122e6:	43fb      	mvns	r3, r7
 80122e8:	17db      	asrs	r3, r3, #31
 80122ea:	401f      	ands	r7, r3
 80122ec:	00bf      	lsls	r7, r7, #2
 80122ee:	0023      	movs	r3, r4
 80122f0:	201f      	movs	r0, #31
 80122f2:	19c9      	adds	r1, r1, r7
 80122f4:	0037      	movs	r7, r6
 80122f6:	6922      	ldr	r2, [r4, #16]
 80122f8:	3314      	adds	r3, #20
 80122fa:	0092      	lsls	r2, r2, #2
 80122fc:	189a      	adds	r2, r3, r2
 80122fe:	4007      	ands	r7, r0
 8012300:	4206      	tst	r6, r0
 8012302:	d029      	beq.n	8012358 <__lshift+0xc4>
 8012304:	3001      	adds	r0, #1
 8012306:	1bc0      	subs	r0, r0, r7
 8012308:	9003      	str	r0, [sp, #12]
 801230a:	468c      	mov	ip, r1
 801230c:	2000      	movs	r0, #0
 801230e:	681e      	ldr	r6, [r3, #0]
 8012310:	40be      	lsls	r6, r7
 8012312:	4306      	orrs	r6, r0
 8012314:	4660      	mov	r0, ip
 8012316:	c040      	stmia	r0!, {r6}
 8012318:	4684      	mov	ip, r0
 801231a:	9e03      	ldr	r6, [sp, #12]
 801231c:	cb01      	ldmia	r3!, {r0}
 801231e:	40f0      	lsrs	r0, r6
 8012320:	429a      	cmp	r2, r3
 8012322:	d8f4      	bhi.n	801230e <__lshift+0x7a>
 8012324:	0026      	movs	r6, r4
 8012326:	3615      	adds	r6, #21
 8012328:	2304      	movs	r3, #4
 801232a:	42b2      	cmp	r2, r6
 801232c:	d304      	bcc.n	8012338 <__lshift+0xa4>
 801232e:	1b13      	subs	r3, r2, r4
 8012330:	3b15      	subs	r3, #21
 8012332:	089b      	lsrs	r3, r3, #2
 8012334:	3301      	adds	r3, #1
 8012336:	009b      	lsls	r3, r3, #2
 8012338:	50c8      	str	r0, [r1, r3]
 801233a:	2800      	cmp	r0, #0
 801233c:	d002      	beq.n	8012344 <__lshift+0xb0>
 801233e:	9b01      	ldr	r3, [sp, #4]
 8012340:	3302      	adds	r3, #2
 8012342:	9300      	str	r3, [sp, #0]
 8012344:	9b00      	ldr	r3, [sp, #0]
 8012346:	9802      	ldr	r0, [sp, #8]
 8012348:	3b01      	subs	r3, #1
 801234a:	0021      	movs	r1, r4
 801234c:	612b      	str	r3, [r5, #16]
 801234e:	f7ff fd7f 	bl	8011e50 <_Bfree>
 8012352:	0028      	movs	r0, r5
 8012354:	b005      	add	sp, #20
 8012356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012358:	cb01      	ldmia	r3!, {r0}
 801235a:	c101      	stmia	r1!, {r0}
 801235c:	429a      	cmp	r2, r3
 801235e:	d8fb      	bhi.n	8012358 <__lshift+0xc4>
 8012360:	e7f0      	b.n	8012344 <__lshift+0xb0>
 8012362:	46c0      	nop			@ (mov r8, r8)
 8012364:	080135c6 	.word	0x080135c6
 8012368:	08013637 	.word	0x08013637

0801236c <__mcmp>:
 801236c:	b530      	push	{r4, r5, lr}
 801236e:	690b      	ldr	r3, [r1, #16]
 8012370:	6904      	ldr	r4, [r0, #16]
 8012372:	0002      	movs	r2, r0
 8012374:	1ae0      	subs	r0, r4, r3
 8012376:	429c      	cmp	r4, r3
 8012378:	d10f      	bne.n	801239a <__mcmp+0x2e>
 801237a:	3214      	adds	r2, #20
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	3114      	adds	r1, #20
 8012380:	0014      	movs	r4, r2
 8012382:	18c9      	adds	r1, r1, r3
 8012384:	18d2      	adds	r2, r2, r3
 8012386:	3a04      	subs	r2, #4
 8012388:	3904      	subs	r1, #4
 801238a:	6815      	ldr	r5, [r2, #0]
 801238c:	680b      	ldr	r3, [r1, #0]
 801238e:	429d      	cmp	r5, r3
 8012390:	d004      	beq.n	801239c <__mcmp+0x30>
 8012392:	2001      	movs	r0, #1
 8012394:	429d      	cmp	r5, r3
 8012396:	d200      	bcs.n	801239a <__mcmp+0x2e>
 8012398:	3802      	subs	r0, #2
 801239a:	bd30      	pop	{r4, r5, pc}
 801239c:	4294      	cmp	r4, r2
 801239e:	d3f2      	bcc.n	8012386 <__mcmp+0x1a>
 80123a0:	e7fb      	b.n	801239a <__mcmp+0x2e>
	...

080123a4 <__mdiff>:
 80123a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a6:	000c      	movs	r4, r1
 80123a8:	b087      	sub	sp, #28
 80123aa:	9000      	str	r0, [sp, #0]
 80123ac:	0011      	movs	r1, r2
 80123ae:	0020      	movs	r0, r4
 80123b0:	0017      	movs	r7, r2
 80123b2:	f7ff ffdb 	bl	801236c <__mcmp>
 80123b6:	1e05      	subs	r5, r0, #0
 80123b8:	d110      	bne.n	80123dc <__mdiff+0x38>
 80123ba:	0001      	movs	r1, r0
 80123bc:	9800      	ldr	r0, [sp, #0]
 80123be:	f7ff fd03 	bl	8011dc8 <_Balloc>
 80123c2:	1e02      	subs	r2, r0, #0
 80123c4:	d104      	bne.n	80123d0 <__mdiff+0x2c>
 80123c6:	4b40      	ldr	r3, [pc, #256]	@ (80124c8 <__mdiff+0x124>)
 80123c8:	4840      	ldr	r0, [pc, #256]	@ (80124cc <__mdiff+0x128>)
 80123ca:	4941      	ldr	r1, [pc, #260]	@ (80124d0 <__mdiff+0x12c>)
 80123cc:	f000 fc00 	bl	8012bd0 <__assert_func>
 80123d0:	2301      	movs	r3, #1
 80123d2:	6145      	str	r5, [r0, #20]
 80123d4:	6103      	str	r3, [r0, #16]
 80123d6:	0010      	movs	r0, r2
 80123d8:	b007      	add	sp, #28
 80123da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123dc:	2600      	movs	r6, #0
 80123de:	42b0      	cmp	r0, r6
 80123e0:	da03      	bge.n	80123ea <__mdiff+0x46>
 80123e2:	0023      	movs	r3, r4
 80123e4:	003c      	movs	r4, r7
 80123e6:	001f      	movs	r7, r3
 80123e8:	3601      	adds	r6, #1
 80123ea:	6861      	ldr	r1, [r4, #4]
 80123ec:	9800      	ldr	r0, [sp, #0]
 80123ee:	f7ff fceb 	bl	8011dc8 <_Balloc>
 80123f2:	1e02      	subs	r2, r0, #0
 80123f4:	d103      	bne.n	80123fe <__mdiff+0x5a>
 80123f6:	4b34      	ldr	r3, [pc, #208]	@ (80124c8 <__mdiff+0x124>)
 80123f8:	4834      	ldr	r0, [pc, #208]	@ (80124cc <__mdiff+0x128>)
 80123fa:	4936      	ldr	r1, [pc, #216]	@ (80124d4 <__mdiff+0x130>)
 80123fc:	e7e6      	b.n	80123cc <__mdiff+0x28>
 80123fe:	6923      	ldr	r3, [r4, #16]
 8012400:	3414      	adds	r4, #20
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	18e3      	adds	r3, r4, r3
 8012408:	0021      	movs	r1, r4
 801240a:	9401      	str	r4, [sp, #4]
 801240c:	003c      	movs	r4, r7
 801240e:	9302      	str	r3, [sp, #8]
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	3414      	adds	r4, #20
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	18e3      	adds	r3, r4, r3
 8012418:	9303      	str	r3, [sp, #12]
 801241a:	0003      	movs	r3, r0
 801241c:	60c6      	str	r6, [r0, #12]
 801241e:	468c      	mov	ip, r1
 8012420:	2000      	movs	r0, #0
 8012422:	3314      	adds	r3, #20
 8012424:	9304      	str	r3, [sp, #16]
 8012426:	9305      	str	r3, [sp, #20]
 8012428:	4663      	mov	r3, ip
 801242a:	cb20      	ldmia	r3!, {r5}
 801242c:	b2a9      	uxth	r1, r5
 801242e:	000e      	movs	r6, r1
 8012430:	469c      	mov	ip, r3
 8012432:	cc08      	ldmia	r4!, {r3}
 8012434:	0c2d      	lsrs	r5, r5, #16
 8012436:	b299      	uxth	r1, r3
 8012438:	1a71      	subs	r1, r6, r1
 801243a:	1809      	adds	r1, r1, r0
 801243c:	0c1b      	lsrs	r3, r3, #16
 801243e:	1408      	asrs	r0, r1, #16
 8012440:	1aeb      	subs	r3, r5, r3
 8012442:	181b      	adds	r3, r3, r0
 8012444:	1418      	asrs	r0, r3, #16
 8012446:	b289      	uxth	r1, r1
 8012448:	041b      	lsls	r3, r3, #16
 801244a:	4319      	orrs	r1, r3
 801244c:	9b05      	ldr	r3, [sp, #20]
 801244e:	c302      	stmia	r3!, {r1}
 8012450:	9305      	str	r3, [sp, #20]
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	42a3      	cmp	r3, r4
 8012456:	d8e7      	bhi.n	8012428 <__mdiff+0x84>
 8012458:	0039      	movs	r1, r7
 801245a:	9c03      	ldr	r4, [sp, #12]
 801245c:	3115      	adds	r1, #21
 801245e:	2304      	movs	r3, #4
 8012460:	428c      	cmp	r4, r1
 8012462:	d304      	bcc.n	801246e <__mdiff+0xca>
 8012464:	1be3      	subs	r3, r4, r7
 8012466:	3b15      	subs	r3, #21
 8012468:	089b      	lsrs	r3, r3, #2
 801246a:	3301      	adds	r3, #1
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	9901      	ldr	r1, [sp, #4]
 8012470:	18cd      	adds	r5, r1, r3
 8012472:	9904      	ldr	r1, [sp, #16]
 8012474:	002e      	movs	r6, r5
 8012476:	18cb      	adds	r3, r1, r3
 8012478:	001f      	movs	r7, r3
 801247a:	9902      	ldr	r1, [sp, #8]
 801247c:	428e      	cmp	r6, r1
 801247e:	d311      	bcc.n	80124a4 <__mdiff+0x100>
 8012480:	9c02      	ldr	r4, [sp, #8]
 8012482:	1ee9      	subs	r1, r5, #3
 8012484:	2000      	movs	r0, #0
 8012486:	428c      	cmp	r4, r1
 8012488:	d304      	bcc.n	8012494 <__mdiff+0xf0>
 801248a:	0021      	movs	r1, r4
 801248c:	3103      	adds	r1, #3
 801248e:	1b49      	subs	r1, r1, r5
 8012490:	0889      	lsrs	r1, r1, #2
 8012492:	0088      	lsls	r0, r1, #2
 8012494:	181b      	adds	r3, r3, r0
 8012496:	3b04      	subs	r3, #4
 8012498:	6819      	ldr	r1, [r3, #0]
 801249a:	2900      	cmp	r1, #0
 801249c:	d010      	beq.n	80124c0 <__mdiff+0x11c>
 801249e:	9b00      	ldr	r3, [sp, #0]
 80124a0:	6113      	str	r3, [r2, #16]
 80124a2:	e798      	b.n	80123d6 <__mdiff+0x32>
 80124a4:	4684      	mov	ip, r0
 80124a6:	ce02      	ldmia	r6!, {r1}
 80124a8:	b288      	uxth	r0, r1
 80124aa:	4460      	add	r0, ip
 80124ac:	1400      	asrs	r0, r0, #16
 80124ae:	0c0c      	lsrs	r4, r1, #16
 80124b0:	1904      	adds	r4, r0, r4
 80124b2:	4461      	add	r1, ip
 80124b4:	1420      	asrs	r0, r4, #16
 80124b6:	b289      	uxth	r1, r1
 80124b8:	0424      	lsls	r4, r4, #16
 80124ba:	4321      	orrs	r1, r4
 80124bc:	c702      	stmia	r7!, {r1}
 80124be:	e7dc      	b.n	801247a <__mdiff+0xd6>
 80124c0:	9900      	ldr	r1, [sp, #0]
 80124c2:	3901      	subs	r1, #1
 80124c4:	9100      	str	r1, [sp, #0]
 80124c6:	e7e6      	b.n	8012496 <__mdiff+0xf2>
 80124c8:	080135c6 	.word	0x080135c6
 80124cc:	08013637 	.word	0x08013637
 80124d0:	00000237 	.word	0x00000237
 80124d4:	00000245 	.word	0x00000245

080124d8 <__ulp>:
 80124d8:	b510      	push	{r4, lr}
 80124da:	2400      	movs	r4, #0
 80124dc:	4b0c      	ldr	r3, [pc, #48]	@ (8012510 <__ulp+0x38>)
 80124de:	4a0d      	ldr	r2, [pc, #52]	@ (8012514 <__ulp+0x3c>)
 80124e0:	400b      	ands	r3, r1
 80124e2:	189b      	adds	r3, r3, r2
 80124e4:	42a3      	cmp	r3, r4
 80124e6:	dc06      	bgt.n	80124f6 <__ulp+0x1e>
 80124e8:	425b      	negs	r3, r3
 80124ea:	151a      	asrs	r2, r3, #20
 80124ec:	2a13      	cmp	r2, #19
 80124ee:	dc05      	bgt.n	80124fc <__ulp+0x24>
 80124f0:	2380      	movs	r3, #128	@ 0x80
 80124f2:	031b      	lsls	r3, r3, #12
 80124f4:	4113      	asrs	r3, r2
 80124f6:	0019      	movs	r1, r3
 80124f8:	0020      	movs	r0, r4
 80124fa:	bd10      	pop	{r4, pc}
 80124fc:	3a14      	subs	r2, #20
 80124fe:	2401      	movs	r4, #1
 8012500:	2a1e      	cmp	r2, #30
 8012502:	dc02      	bgt.n	801250a <__ulp+0x32>
 8012504:	2480      	movs	r4, #128	@ 0x80
 8012506:	0624      	lsls	r4, r4, #24
 8012508:	40d4      	lsrs	r4, r2
 801250a:	2300      	movs	r3, #0
 801250c:	e7f3      	b.n	80124f6 <__ulp+0x1e>
 801250e:	46c0      	nop			@ (mov r8, r8)
 8012510:	7ff00000 	.word	0x7ff00000
 8012514:	fcc00000 	.word	0xfcc00000

08012518 <__b2d>:
 8012518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801251a:	0006      	movs	r6, r0
 801251c:	6903      	ldr	r3, [r0, #16]
 801251e:	3614      	adds	r6, #20
 8012520:	009b      	lsls	r3, r3, #2
 8012522:	18f3      	adds	r3, r6, r3
 8012524:	1f1d      	subs	r5, r3, #4
 8012526:	682c      	ldr	r4, [r5, #0]
 8012528:	000f      	movs	r7, r1
 801252a:	0020      	movs	r0, r4
 801252c:	9301      	str	r3, [sp, #4]
 801252e:	f7ff fd43 	bl	8011fb8 <__hi0bits>
 8012532:	2220      	movs	r2, #32
 8012534:	1a12      	subs	r2, r2, r0
 8012536:	603a      	str	r2, [r7, #0]
 8012538:	0003      	movs	r3, r0
 801253a:	4a1c      	ldr	r2, [pc, #112]	@ (80125ac <__b2d+0x94>)
 801253c:	280a      	cmp	r0, #10
 801253e:	dc15      	bgt.n	801256c <__b2d+0x54>
 8012540:	210b      	movs	r1, #11
 8012542:	0027      	movs	r7, r4
 8012544:	1a09      	subs	r1, r1, r0
 8012546:	40cf      	lsrs	r7, r1
 8012548:	433a      	orrs	r2, r7
 801254a:	468c      	mov	ip, r1
 801254c:	0011      	movs	r1, r2
 801254e:	2200      	movs	r2, #0
 8012550:	42ae      	cmp	r6, r5
 8012552:	d202      	bcs.n	801255a <__b2d+0x42>
 8012554:	9a01      	ldr	r2, [sp, #4]
 8012556:	3a08      	subs	r2, #8
 8012558:	6812      	ldr	r2, [r2, #0]
 801255a:	3315      	adds	r3, #21
 801255c:	409c      	lsls	r4, r3
 801255e:	4663      	mov	r3, ip
 8012560:	0027      	movs	r7, r4
 8012562:	40da      	lsrs	r2, r3
 8012564:	4317      	orrs	r7, r2
 8012566:	0038      	movs	r0, r7
 8012568:	b003      	add	sp, #12
 801256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801256c:	2700      	movs	r7, #0
 801256e:	42ae      	cmp	r6, r5
 8012570:	d202      	bcs.n	8012578 <__b2d+0x60>
 8012572:	9d01      	ldr	r5, [sp, #4]
 8012574:	3d08      	subs	r5, #8
 8012576:	682f      	ldr	r7, [r5, #0]
 8012578:	210b      	movs	r1, #11
 801257a:	4249      	negs	r1, r1
 801257c:	468c      	mov	ip, r1
 801257e:	449c      	add	ip, r3
 8012580:	2b0b      	cmp	r3, #11
 8012582:	d010      	beq.n	80125a6 <__b2d+0x8e>
 8012584:	4661      	mov	r1, ip
 8012586:	2320      	movs	r3, #32
 8012588:	408c      	lsls	r4, r1
 801258a:	1a5b      	subs	r3, r3, r1
 801258c:	0039      	movs	r1, r7
 801258e:	40d9      	lsrs	r1, r3
 8012590:	430c      	orrs	r4, r1
 8012592:	4322      	orrs	r2, r4
 8012594:	0011      	movs	r1, r2
 8012596:	2200      	movs	r2, #0
 8012598:	42b5      	cmp	r5, r6
 801259a:	d901      	bls.n	80125a0 <__b2d+0x88>
 801259c:	3d04      	subs	r5, #4
 801259e:	682a      	ldr	r2, [r5, #0]
 80125a0:	4664      	mov	r4, ip
 80125a2:	40a7      	lsls	r7, r4
 80125a4:	e7dd      	b.n	8012562 <__b2d+0x4a>
 80125a6:	4322      	orrs	r2, r4
 80125a8:	0011      	movs	r1, r2
 80125aa:	e7dc      	b.n	8012566 <__b2d+0x4e>
 80125ac:	3ff00000 	.word	0x3ff00000

080125b0 <__d2b>:
 80125b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125b2:	2101      	movs	r1, #1
 80125b4:	0016      	movs	r6, r2
 80125b6:	001f      	movs	r7, r3
 80125b8:	f7ff fc06 	bl	8011dc8 <_Balloc>
 80125bc:	1e04      	subs	r4, r0, #0
 80125be:	d105      	bne.n	80125cc <__d2b+0x1c>
 80125c0:	0022      	movs	r2, r4
 80125c2:	4b25      	ldr	r3, [pc, #148]	@ (8012658 <__d2b+0xa8>)
 80125c4:	4825      	ldr	r0, [pc, #148]	@ (801265c <__d2b+0xac>)
 80125c6:	4926      	ldr	r1, [pc, #152]	@ (8012660 <__d2b+0xb0>)
 80125c8:	f000 fb02 	bl	8012bd0 <__assert_func>
 80125cc:	033b      	lsls	r3, r7, #12
 80125ce:	007d      	lsls	r5, r7, #1
 80125d0:	0b1b      	lsrs	r3, r3, #12
 80125d2:	0d6d      	lsrs	r5, r5, #21
 80125d4:	d002      	beq.n	80125dc <__d2b+0x2c>
 80125d6:	2280      	movs	r2, #128	@ 0x80
 80125d8:	0352      	lsls	r2, r2, #13
 80125da:	4313      	orrs	r3, r2
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	2e00      	cmp	r6, #0
 80125e0:	d025      	beq.n	801262e <__d2b+0x7e>
 80125e2:	4668      	mov	r0, sp
 80125e4:	9600      	str	r6, [sp, #0]
 80125e6:	f7ff fd08 	bl	8011ffa <__lo0bits>
 80125ea:	9b01      	ldr	r3, [sp, #4]
 80125ec:	9900      	ldr	r1, [sp, #0]
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d01b      	beq.n	801262a <__d2b+0x7a>
 80125f2:	2220      	movs	r2, #32
 80125f4:	001e      	movs	r6, r3
 80125f6:	1a12      	subs	r2, r2, r0
 80125f8:	4096      	lsls	r6, r2
 80125fa:	0032      	movs	r2, r6
 80125fc:	40c3      	lsrs	r3, r0
 80125fe:	430a      	orrs	r2, r1
 8012600:	6162      	str	r2, [r4, #20]
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	9e01      	ldr	r6, [sp, #4]
 8012606:	61a6      	str	r6, [r4, #24]
 8012608:	1e73      	subs	r3, r6, #1
 801260a:	419e      	sbcs	r6, r3
 801260c:	3601      	adds	r6, #1
 801260e:	6126      	str	r6, [r4, #16]
 8012610:	2d00      	cmp	r5, #0
 8012612:	d014      	beq.n	801263e <__d2b+0x8e>
 8012614:	2635      	movs	r6, #53	@ 0x35
 8012616:	4b13      	ldr	r3, [pc, #76]	@ (8012664 <__d2b+0xb4>)
 8012618:	18ed      	adds	r5, r5, r3
 801261a:	9b08      	ldr	r3, [sp, #32]
 801261c:	182d      	adds	r5, r5, r0
 801261e:	601d      	str	r5, [r3, #0]
 8012620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012622:	1a36      	subs	r6, r6, r0
 8012624:	601e      	str	r6, [r3, #0]
 8012626:	0020      	movs	r0, r4
 8012628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801262a:	6161      	str	r1, [r4, #20]
 801262c:	e7ea      	b.n	8012604 <__d2b+0x54>
 801262e:	a801      	add	r0, sp, #4
 8012630:	f7ff fce3 	bl	8011ffa <__lo0bits>
 8012634:	9b01      	ldr	r3, [sp, #4]
 8012636:	2601      	movs	r6, #1
 8012638:	6163      	str	r3, [r4, #20]
 801263a:	3020      	adds	r0, #32
 801263c:	e7e7      	b.n	801260e <__d2b+0x5e>
 801263e:	4b0a      	ldr	r3, [pc, #40]	@ (8012668 <__d2b+0xb8>)
 8012640:	18c0      	adds	r0, r0, r3
 8012642:	9b08      	ldr	r3, [sp, #32]
 8012644:	6018      	str	r0, [r3, #0]
 8012646:	4b09      	ldr	r3, [pc, #36]	@ (801266c <__d2b+0xbc>)
 8012648:	18f3      	adds	r3, r6, r3
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	18e3      	adds	r3, r4, r3
 801264e:	6958      	ldr	r0, [r3, #20]
 8012650:	f7ff fcb2 	bl	8011fb8 <__hi0bits>
 8012654:	0176      	lsls	r6, r6, #5
 8012656:	e7e3      	b.n	8012620 <__d2b+0x70>
 8012658:	080135c6 	.word	0x080135c6
 801265c:	08013637 	.word	0x08013637
 8012660:	0000030f 	.word	0x0000030f
 8012664:	fffffbcd 	.word	0xfffffbcd
 8012668:	fffffbce 	.word	0xfffffbce
 801266c:	3fffffff 	.word	0x3fffffff

08012670 <__ratio>:
 8012670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012672:	b087      	sub	sp, #28
 8012674:	000f      	movs	r7, r1
 8012676:	a904      	add	r1, sp, #16
 8012678:	0006      	movs	r6, r0
 801267a:	f7ff ff4d 	bl	8012518 <__b2d>
 801267e:	9000      	str	r0, [sp, #0]
 8012680:	9101      	str	r1, [sp, #4]
 8012682:	9b00      	ldr	r3, [sp, #0]
 8012684:	9c01      	ldr	r4, [sp, #4]
 8012686:	0038      	movs	r0, r7
 8012688:	a905      	add	r1, sp, #20
 801268a:	9302      	str	r3, [sp, #8]
 801268c:	9403      	str	r4, [sp, #12]
 801268e:	f7ff ff43 	bl	8012518 <__b2d>
 8012692:	000d      	movs	r5, r1
 8012694:	0002      	movs	r2, r0
 8012696:	000b      	movs	r3, r1
 8012698:	6930      	ldr	r0, [r6, #16]
 801269a:	6939      	ldr	r1, [r7, #16]
 801269c:	9e04      	ldr	r6, [sp, #16]
 801269e:	1a40      	subs	r0, r0, r1
 80126a0:	9905      	ldr	r1, [sp, #20]
 80126a2:	0140      	lsls	r0, r0, #5
 80126a4:	1a71      	subs	r1, r6, r1
 80126a6:	1841      	adds	r1, r0, r1
 80126a8:	0508      	lsls	r0, r1, #20
 80126aa:	2900      	cmp	r1, #0
 80126ac:	dd08      	ble.n	80126c0 <__ratio+0x50>
 80126ae:	9901      	ldr	r1, [sp, #4]
 80126b0:	1841      	adds	r1, r0, r1
 80126b2:	9103      	str	r1, [sp, #12]
 80126b4:	9802      	ldr	r0, [sp, #8]
 80126b6:	9903      	ldr	r1, [sp, #12]
 80126b8:	f7ee fb26 	bl	8000d08 <__aeabi_ddiv>
 80126bc:	b007      	add	sp, #28
 80126be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c0:	1a2b      	subs	r3, r5, r0
 80126c2:	e7f7      	b.n	80126b4 <__ratio+0x44>

080126c4 <__copybits>:
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	0014      	movs	r4, r2
 80126c8:	0005      	movs	r5, r0
 80126ca:	3901      	subs	r1, #1
 80126cc:	6913      	ldr	r3, [r2, #16]
 80126ce:	1149      	asrs	r1, r1, #5
 80126d0:	3101      	adds	r1, #1
 80126d2:	0089      	lsls	r1, r1, #2
 80126d4:	3414      	adds	r4, #20
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	1841      	adds	r1, r0, r1
 80126da:	18e3      	adds	r3, r4, r3
 80126dc:	42a3      	cmp	r3, r4
 80126de:	d80d      	bhi.n	80126fc <__copybits+0x38>
 80126e0:	0014      	movs	r4, r2
 80126e2:	3411      	adds	r4, #17
 80126e4:	2500      	movs	r5, #0
 80126e6:	42a3      	cmp	r3, r4
 80126e8:	d303      	bcc.n	80126f2 <__copybits+0x2e>
 80126ea:	1a9b      	subs	r3, r3, r2
 80126ec:	3b11      	subs	r3, #17
 80126ee:	089b      	lsrs	r3, r3, #2
 80126f0:	009d      	lsls	r5, r3, #2
 80126f2:	2300      	movs	r3, #0
 80126f4:	1940      	adds	r0, r0, r5
 80126f6:	4281      	cmp	r1, r0
 80126f8:	d803      	bhi.n	8012702 <__copybits+0x3e>
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	cc40      	ldmia	r4!, {r6}
 80126fe:	c540      	stmia	r5!, {r6}
 8012700:	e7ec      	b.n	80126dc <__copybits+0x18>
 8012702:	c008      	stmia	r0!, {r3}
 8012704:	e7f7      	b.n	80126f6 <__copybits+0x32>

08012706 <__any_on>:
 8012706:	0002      	movs	r2, r0
 8012708:	6900      	ldr	r0, [r0, #16]
 801270a:	b510      	push	{r4, lr}
 801270c:	3214      	adds	r2, #20
 801270e:	114b      	asrs	r3, r1, #5
 8012710:	4298      	cmp	r0, r3
 8012712:	db13      	blt.n	801273c <__any_on+0x36>
 8012714:	dd0c      	ble.n	8012730 <__any_on+0x2a>
 8012716:	241f      	movs	r4, #31
 8012718:	0008      	movs	r0, r1
 801271a:	4020      	ands	r0, r4
 801271c:	4221      	tst	r1, r4
 801271e:	d007      	beq.n	8012730 <__any_on+0x2a>
 8012720:	0099      	lsls	r1, r3, #2
 8012722:	588c      	ldr	r4, [r1, r2]
 8012724:	0021      	movs	r1, r4
 8012726:	40c1      	lsrs	r1, r0
 8012728:	4081      	lsls	r1, r0
 801272a:	2001      	movs	r0, #1
 801272c:	428c      	cmp	r4, r1
 801272e:	d104      	bne.n	801273a <__any_on+0x34>
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	18d3      	adds	r3, r2, r3
 8012734:	4293      	cmp	r3, r2
 8012736:	d803      	bhi.n	8012740 <__any_on+0x3a>
 8012738:	2000      	movs	r0, #0
 801273a:	bd10      	pop	{r4, pc}
 801273c:	0003      	movs	r3, r0
 801273e:	e7f7      	b.n	8012730 <__any_on+0x2a>
 8012740:	3b04      	subs	r3, #4
 8012742:	6819      	ldr	r1, [r3, #0]
 8012744:	2900      	cmp	r1, #0
 8012746:	d0f5      	beq.n	8012734 <__any_on+0x2e>
 8012748:	2001      	movs	r0, #1
 801274a:	e7f6      	b.n	801273a <__any_on+0x34>

0801274c <__ascii_wctomb>:
 801274c:	0003      	movs	r3, r0
 801274e:	1e08      	subs	r0, r1, #0
 8012750:	d005      	beq.n	801275e <__ascii_wctomb+0x12>
 8012752:	2aff      	cmp	r2, #255	@ 0xff
 8012754:	d904      	bls.n	8012760 <__ascii_wctomb+0x14>
 8012756:	228a      	movs	r2, #138	@ 0x8a
 8012758:	2001      	movs	r0, #1
 801275a:	601a      	str	r2, [r3, #0]
 801275c:	4240      	negs	r0, r0
 801275e:	4770      	bx	lr
 8012760:	2001      	movs	r0, #1
 8012762:	700a      	strb	r2, [r1, #0]
 8012764:	e7fb      	b.n	801275e <__ascii_wctomb+0x12>
	...

08012768 <__ssputs_r>:
 8012768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801276a:	688e      	ldr	r6, [r1, #8]
 801276c:	b085      	sub	sp, #20
 801276e:	001f      	movs	r7, r3
 8012770:	000c      	movs	r4, r1
 8012772:	680b      	ldr	r3, [r1, #0]
 8012774:	9002      	str	r0, [sp, #8]
 8012776:	9203      	str	r2, [sp, #12]
 8012778:	42be      	cmp	r6, r7
 801277a:	d830      	bhi.n	80127de <__ssputs_r+0x76>
 801277c:	210c      	movs	r1, #12
 801277e:	5e62      	ldrsh	r2, [r4, r1]
 8012780:	2190      	movs	r1, #144	@ 0x90
 8012782:	00c9      	lsls	r1, r1, #3
 8012784:	420a      	tst	r2, r1
 8012786:	d028      	beq.n	80127da <__ssputs_r+0x72>
 8012788:	2003      	movs	r0, #3
 801278a:	6921      	ldr	r1, [r4, #16]
 801278c:	1a5b      	subs	r3, r3, r1
 801278e:	9301      	str	r3, [sp, #4]
 8012790:	6963      	ldr	r3, [r4, #20]
 8012792:	4343      	muls	r3, r0
 8012794:	9801      	ldr	r0, [sp, #4]
 8012796:	0fdd      	lsrs	r5, r3, #31
 8012798:	18ed      	adds	r5, r5, r3
 801279a:	1c7b      	adds	r3, r7, #1
 801279c:	181b      	adds	r3, r3, r0
 801279e:	106d      	asrs	r5, r5, #1
 80127a0:	42ab      	cmp	r3, r5
 80127a2:	d900      	bls.n	80127a6 <__ssputs_r+0x3e>
 80127a4:	001d      	movs	r5, r3
 80127a6:	0552      	lsls	r2, r2, #21
 80127a8:	d528      	bpl.n	80127fc <__ssputs_r+0x94>
 80127aa:	0029      	movs	r1, r5
 80127ac:	9802      	ldr	r0, [sp, #8]
 80127ae:	f7ff fa69 	bl	8011c84 <_malloc_r>
 80127b2:	1e06      	subs	r6, r0, #0
 80127b4:	d02c      	beq.n	8012810 <__ssputs_r+0xa8>
 80127b6:	9a01      	ldr	r2, [sp, #4]
 80127b8:	6921      	ldr	r1, [r4, #16]
 80127ba:	f7fe f80d 	bl	80107d8 <memcpy>
 80127be:	89a2      	ldrh	r2, [r4, #12]
 80127c0:	4b18      	ldr	r3, [pc, #96]	@ (8012824 <__ssputs_r+0xbc>)
 80127c2:	401a      	ands	r2, r3
 80127c4:	2380      	movs	r3, #128	@ 0x80
 80127c6:	4313      	orrs	r3, r2
 80127c8:	81a3      	strh	r3, [r4, #12]
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	6126      	str	r6, [r4, #16]
 80127ce:	18f6      	adds	r6, r6, r3
 80127d0:	6026      	str	r6, [r4, #0]
 80127d2:	003e      	movs	r6, r7
 80127d4:	6165      	str	r5, [r4, #20]
 80127d6:	1aed      	subs	r5, r5, r3
 80127d8:	60a5      	str	r5, [r4, #8]
 80127da:	42be      	cmp	r6, r7
 80127dc:	d900      	bls.n	80127e0 <__ssputs_r+0x78>
 80127de:	003e      	movs	r6, r7
 80127e0:	0032      	movs	r2, r6
 80127e2:	9903      	ldr	r1, [sp, #12]
 80127e4:	6820      	ldr	r0, [r4, #0]
 80127e6:	f000 f9ce 	bl	8012b86 <memmove>
 80127ea:	2000      	movs	r0, #0
 80127ec:	68a3      	ldr	r3, [r4, #8]
 80127ee:	1b9b      	subs	r3, r3, r6
 80127f0:	60a3      	str	r3, [r4, #8]
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	199b      	adds	r3, r3, r6
 80127f6:	6023      	str	r3, [r4, #0]
 80127f8:	b005      	add	sp, #20
 80127fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127fc:	002a      	movs	r2, r5
 80127fe:	9802      	ldr	r0, [sp, #8]
 8012800:	f000 fa31 	bl	8012c66 <_realloc_r>
 8012804:	1e06      	subs	r6, r0, #0
 8012806:	d1e0      	bne.n	80127ca <__ssputs_r+0x62>
 8012808:	6921      	ldr	r1, [r4, #16]
 801280a:	9802      	ldr	r0, [sp, #8]
 801280c:	f7fe fe6a 	bl	80114e4 <_free_r>
 8012810:	230c      	movs	r3, #12
 8012812:	2001      	movs	r0, #1
 8012814:	9a02      	ldr	r2, [sp, #8]
 8012816:	4240      	negs	r0, r0
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	89a2      	ldrh	r2, [r4, #12]
 801281c:	3334      	adds	r3, #52	@ 0x34
 801281e:	4313      	orrs	r3, r2
 8012820:	81a3      	strh	r3, [r4, #12]
 8012822:	e7e9      	b.n	80127f8 <__ssputs_r+0x90>
 8012824:	fffffb7f 	.word	0xfffffb7f

08012828 <_svfiprintf_r>:
 8012828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801282a:	b0a1      	sub	sp, #132	@ 0x84
 801282c:	9003      	str	r0, [sp, #12]
 801282e:	001d      	movs	r5, r3
 8012830:	898b      	ldrh	r3, [r1, #12]
 8012832:	000f      	movs	r7, r1
 8012834:	0016      	movs	r6, r2
 8012836:	061b      	lsls	r3, r3, #24
 8012838:	d511      	bpl.n	801285e <_svfiprintf_r+0x36>
 801283a:	690b      	ldr	r3, [r1, #16]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10e      	bne.n	801285e <_svfiprintf_r+0x36>
 8012840:	2140      	movs	r1, #64	@ 0x40
 8012842:	f7ff fa1f 	bl	8011c84 <_malloc_r>
 8012846:	6038      	str	r0, [r7, #0]
 8012848:	6138      	str	r0, [r7, #16]
 801284a:	2800      	cmp	r0, #0
 801284c:	d105      	bne.n	801285a <_svfiprintf_r+0x32>
 801284e:	230c      	movs	r3, #12
 8012850:	9a03      	ldr	r2, [sp, #12]
 8012852:	6013      	str	r3, [r2, #0]
 8012854:	2001      	movs	r0, #1
 8012856:	4240      	negs	r0, r0
 8012858:	e0cf      	b.n	80129fa <_svfiprintf_r+0x1d2>
 801285a:	2340      	movs	r3, #64	@ 0x40
 801285c:	617b      	str	r3, [r7, #20]
 801285e:	2300      	movs	r3, #0
 8012860:	ac08      	add	r4, sp, #32
 8012862:	6163      	str	r3, [r4, #20]
 8012864:	3320      	adds	r3, #32
 8012866:	7663      	strb	r3, [r4, #25]
 8012868:	3310      	adds	r3, #16
 801286a:	76a3      	strb	r3, [r4, #26]
 801286c:	9507      	str	r5, [sp, #28]
 801286e:	0035      	movs	r5, r6
 8012870:	782b      	ldrb	r3, [r5, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d001      	beq.n	801287a <_svfiprintf_r+0x52>
 8012876:	2b25      	cmp	r3, #37	@ 0x25
 8012878:	d148      	bne.n	801290c <_svfiprintf_r+0xe4>
 801287a:	1bab      	subs	r3, r5, r6
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	42b5      	cmp	r5, r6
 8012880:	d00b      	beq.n	801289a <_svfiprintf_r+0x72>
 8012882:	0032      	movs	r2, r6
 8012884:	0039      	movs	r1, r7
 8012886:	9803      	ldr	r0, [sp, #12]
 8012888:	f7ff ff6e 	bl	8012768 <__ssputs_r>
 801288c:	3001      	adds	r0, #1
 801288e:	d100      	bne.n	8012892 <_svfiprintf_r+0x6a>
 8012890:	e0ae      	b.n	80129f0 <_svfiprintf_r+0x1c8>
 8012892:	6963      	ldr	r3, [r4, #20]
 8012894:	9a05      	ldr	r2, [sp, #20]
 8012896:	189b      	adds	r3, r3, r2
 8012898:	6163      	str	r3, [r4, #20]
 801289a:	782b      	ldrb	r3, [r5, #0]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d100      	bne.n	80128a2 <_svfiprintf_r+0x7a>
 80128a0:	e0a6      	b.n	80129f0 <_svfiprintf_r+0x1c8>
 80128a2:	2201      	movs	r2, #1
 80128a4:	2300      	movs	r3, #0
 80128a6:	4252      	negs	r2, r2
 80128a8:	6062      	str	r2, [r4, #4]
 80128aa:	a904      	add	r1, sp, #16
 80128ac:	3254      	adds	r2, #84	@ 0x54
 80128ae:	1852      	adds	r2, r2, r1
 80128b0:	1c6e      	adds	r6, r5, #1
 80128b2:	6023      	str	r3, [r4, #0]
 80128b4:	60e3      	str	r3, [r4, #12]
 80128b6:	60a3      	str	r3, [r4, #8]
 80128b8:	7013      	strb	r3, [r2, #0]
 80128ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 80128bc:	4b54      	ldr	r3, [pc, #336]	@ (8012a10 <_svfiprintf_r+0x1e8>)
 80128be:	2205      	movs	r2, #5
 80128c0:	0018      	movs	r0, r3
 80128c2:	7831      	ldrb	r1, [r6, #0]
 80128c4:	9305      	str	r3, [sp, #20]
 80128c6:	f7fd ff7c 	bl	80107c2 <memchr>
 80128ca:	1c75      	adds	r5, r6, #1
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d11f      	bne.n	8012910 <_svfiprintf_r+0xe8>
 80128d0:	6822      	ldr	r2, [r4, #0]
 80128d2:	06d3      	lsls	r3, r2, #27
 80128d4:	d504      	bpl.n	80128e0 <_svfiprintf_r+0xb8>
 80128d6:	2353      	movs	r3, #83	@ 0x53
 80128d8:	a904      	add	r1, sp, #16
 80128da:	185b      	adds	r3, r3, r1
 80128dc:	2120      	movs	r1, #32
 80128de:	7019      	strb	r1, [r3, #0]
 80128e0:	0713      	lsls	r3, r2, #28
 80128e2:	d504      	bpl.n	80128ee <_svfiprintf_r+0xc6>
 80128e4:	2353      	movs	r3, #83	@ 0x53
 80128e6:	a904      	add	r1, sp, #16
 80128e8:	185b      	adds	r3, r3, r1
 80128ea:	212b      	movs	r1, #43	@ 0x2b
 80128ec:	7019      	strb	r1, [r3, #0]
 80128ee:	7833      	ldrb	r3, [r6, #0]
 80128f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80128f2:	d016      	beq.n	8012922 <_svfiprintf_r+0xfa>
 80128f4:	0035      	movs	r5, r6
 80128f6:	2100      	movs	r1, #0
 80128f8:	200a      	movs	r0, #10
 80128fa:	68e3      	ldr	r3, [r4, #12]
 80128fc:	782a      	ldrb	r2, [r5, #0]
 80128fe:	1c6e      	adds	r6, r5, #1
 8012900:	3a30      	subs	r2, #48	@ 0x30
 8012902:	2a09      	cmp	r2, #9
 8012904:	d950      	bls.n	80129a8 <_svfiprintf_r+0x180>
 8012906:	2900      	cmp	r1, #0
 8012908:	d111      	bne.n	801292e <_svfiprintf_r+0x106>
 801290a:	e017      	b.n	801293c <_svfiprintf_r+0x114>
 801290c:	3501      	adds	r5, #1
 801290e:	e7af      	b.n	8012870 <_svfiprintf_r+0x48>
 8012910:	9b05      	ldr	r3, [sp, #20]
 8012912:	6822      	ldr	r2, [r4, #0]
 8012914:	1ac0      	subs	r0, r0, r3
 8012916:	2301      	movs	r3, #1
 8012918:	4083      	lsls	r3, r0
 801291a:	4313      	orrs	r3, r2
 801291c:	002e      	movs	r6, r5
 801291e:	6023      	str	r3, [r4, #0]
 8012920:	e7cc      	b.n	80128bc <_svfiprintf_r+0x94>
 8012922:	9b07      	ldr	r3, [sp, #28]
 8012924:	1d19      	adds	r1, r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	9107      	str	r1, [sp, #28]
 801292a:	2b00      	cmp	r3, #0
 801292c:	db01      	blt.n	8012932 <_svfiprintf_r+0x10a>
 801292e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012930:	e004      	b.n	801293c <_svfiprintf_r+0x114>
 8012932:	425b      	negs	r3, r3
 8012934:	60e3      	str	r3, [r4, #12]
 8012936:	2302      	movs	r3, #2
 8012938:	4313      	orrs	r3, r2
 801293a:	6023      	str	r3, [r4, #0]
 801293c:	782b      	ldrb	r3, [r5, #0]
 801293e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012940:	d10c      	bne.n	801295c <_svfiprintf_r+0x134>
 8012942:	786b      	ldrb	r3, [r5, #1]
 8012944:	2b2a      	cmp	r3, #42	@ 0x2a
 8012946:	d134      	bne.n	80129b2 <_svfiprintf_r+0x18a>
 8012948:	9b07      	ldr	r3, [sp, #28]
 801294a:	3502      	adds	r5, #2
 801294c:	1d1a      	adds	r2, r3, #4
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	9207      	str	r2, [sp, #28]
 8012952:	2b00      	cmp	r3, #0
 8012954:	da01      	bge.n	801295a <_svfiprintf_r+0x132>
 8012956:	2301      	movs	r3, #1
 8012958:	425b      	negs	r3, r3
 801295a:	9309      	str	r3, [sp, #36]	@ 0x24
 801295c:	4e2d      	ldr	r6, [pc, #180]	@ (8012a14 <_svfiprintf_r+0x1ec>)
 801295e:	2203      	movs	r2, #3
 8012960:	0030      	movs	r0, r6
 8012962:	7829      	ldrb	r1, [r5, #0]
 8012964:	f7fd ff2d 	bl	80107c2 <memchr>
 8012968:	2800      	cmp	r0, #0
 801296a:	d006      	beq.n	801297a <_svfiprintf_r+0x152>
 801296c:	2340      	movs	r3, #64	@ 0x40
 801296e:	1b80      	subs	r0, r0, r6
 8012970:	4083      	lsls	r3, r0
 8012972:	6822      	ldr	r2, [r4, #0]
 8012974:	3501      	adds	r5, #1
 8012976:	4313      	orrs	r3, r2
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	7829      	ldrb	r1, [r5, #0]
 801297c:	2206      	movs	r2, #6
 801297e:	4826      	ldr	r0, [pc, #152]	@ (8012a18 <_svfiprintf_r+0x1f0>)
 8012980:	1c6e      	adds	r6, r5, #1
 8012982:	7621      	strb	r1, [r4, #24]
 8012984:	f7fd ff1d 	bl	80107c2 <memchr>
 8012988:	2800      	cmp	r0, #0
 801298a:	d038      	beq.n	80129fe <_svfiprintf_r+0x1d6>
 801298c:	4b23      	ldr	r3, [pc, #140]	@ (8012a1c <_svfiprintf_r+0x1f4>)
 801298e:	2b00      	cmp	r3, #0
 8012990:	d122      	bne.n	80129d8 <_svfiprintf_r+0x1b0>
 8012992:	2207      	movs	r2, #7
 8012994:	9b07      	ldr	r3, [sp, #28]
 8012996:	3307      	adds	r3, #7
 8012998:	4393      	bics	r3, r2
 801299a:	3308      	adds	r3, #8
 801299c:	9307      	str	r3, [sp, #28]
 801299e:	6963      	ldr	r3, [r4, #20]
 80129a0:	9a04      	ldr	r2, [sp, #16]
 80129a2:	189b      	adds	r3, r3, r2
 80129a4:	6163      	str	r3, [r4, #20]
 80129a6:	e762      	b.n	801286e <_svfiprintf_r+0x46>
 80129a8:	4343      	muls	r3, r0
 80129aa:	0035      	movs	r5, r6
 80129ac:	2101      	movs	r1, #1
 80129ae:	189b      	adds	r3, r3, r2
 80129b0:	e7a4      	b.n	80128fc <_svfiprintf_r+0xd4>
 80129b2:	2300      	movs	r3, #0
 80129b4:	200a      	movs	r0, #10
 80129b6:	0019      	movs	r1, r3
 80129b8:	3501      	adds	r5, #1
 80129ba:	6063      	str	r3, [r4, #4]
 80129bc:	782a      	ldrb	r2, [r5, #0]
 80129be:	1c6e      	adds	r6, r5, #1
 80129c0:	3a30      	subs	r2, #48	@ 0x30
 80129c2:	2a09      	cmp	r2, #9
 80129c4:	d903      	bls.n	80129ce <_svfiprintf_r+0x1a6>
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d0c8      	beq.n	801295c <_svfiprintf_r+0x134>
 80129ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80129cc:	e7c6      	b.n	801295c <_svfiprintf_r+0x134>
 80129ce:	4341      	muls	r1, r0
 80129d0:	0035      	movs	r5, r6
 80129d2:	2301      	movs	r3, #1
 80129d4:	1889      	adds	r1, r1, r2
 80129d6:	e7f1      	b.n	80129bc <_svfiprintf_r+0x194>
 80129d8:	aa07      	add	r2, sp, #28
 80129da:	9200      	str	r2, [sp, #0]
 80129dc:	0021      	movs	r1, r4
 80129de:	003a      	movs	r2, r7
 80129e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012a20 <_svfiprintf_r+0x1f8>)
 80129e2:	9803      	ldr	r0, [sp, #12]
 80129e4:	f7fd f954 	bl	800fc90 <_printf_float>
 80129e8:	9004      	str	r0, [sp, #16]
 80129ea:	9b04      	ldr	r3, [sp, #16]
 80129ec:	3301      	adds	r3, #1
 80129ee:	d1d6      	bne.n	801299e <_svfiprintf_r+0x176>
 80129f0:	89bb      	ldrh	r3, [r7, #12]
 80129f2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80129f4:	065b      	lsls	r3, r3, #25
 80129f6:	d500      	bpl.n	80129fa <_svfiprintf_r+0x1d2>
 80129f8:	e72c      	b.n	8012854 <_svfiprintf_r+0x2c>
 80129fa:	b021      	add	sp, #132	@ 0x84
 80129fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129fe:	aa07      	add	r2, sp, #28
 8012a00:	9200      	str	r2, [sp, #0]
 8012a02:	0021      	movs	r1, r4
 8012a04:	003a      	movs	r2, r7
 8012a06:	4b06      	ldr	r3, [pc, #24]	@ (8012a20 <_svfiprintf_r+0x1f8>)
 8012a08:	9803      	ldr	r0, [sp, #12]
 8012a0a:	f7fd fbef 	bl	80101ec <_printf_i>
 8012a0e:	e7eb      	b.n	80129e8 <_svfiprintf_r+0x1c0>
 8012a10:	08013690 	.word	0x08013690
 8012a14:	08013696 	.word	0x08013696
 8012a18:	0801369a 	.word	0x0801369a
 8012a1c:	0800fc91 	.word	0x0800fc91
 8012a20:	08012769 	.word	0x08012769

08012a24 <__sflush_r>:
 8012a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a26:	220c      	movs	r2, #12
 8012a28:	5e8b      	ldrsh	r3, [r1, r2]
 8012a2a:	0005      	movs	r5, r0
 8012a2c:	000c      	movs	r4, r1
 8012a2e:	071a      	lsls	r2, r3, #28
 8012a30:	d456      	bmi.n	8012ae0 <__sflush_r+0xbc>
 8012a32:	684a      	ldr	r2, [r1, #4]
 8012a34:	2a00      	cmp	r2, #0
 8012a36:	dc02      	bgt.n	8012a3e <__sflush_r+0x1a>
 8012a38:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8012a3a:	2a00      	cmp	r2, #0
 8012a3c:	dd4e      	ble.n	8012adc <__sflush_r+0xb8>
 8012a3e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012a40:	2f00      	cmp	r7, #0
 8012a42:	d04b      	beq.n	8012adc <__sflush_r+0xb8>
 8012a44:	2200      	movs	r2, #0
 8012a46:	2080      	movs	r0, #128	@ 0x80
 8012a48:	682e      	ldr	r6, [r5, #0]
 8012a4a:	602a      	str	r2, [r5, #0]
 8012a4c:	001a      	movs	r2, r3
 8012a4e:	0140      	lsls	r0, r0, #5
 8012a50:	6a21      	ldr	r1, [r4, #32]
 8012a52:	4002      	ands	r2, r0
 8012a54:	4203      	tst	r3, r0
 8012a56:	d033      	beq.n	8012ac0 <__sflush_r+0x9c>
 8012a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012a5a:	89a3      	ldrh	r3, [r4, #12]
 8012a5c:	075b      	lsls	r3, r3, #29
 8012a5e:	d506      	bpl.n	8012a6e <__sflush_r+0x4a>
 8012a60:	6863      	ldr	r3, [r4, #4]
 8012a62:	1ad2      	subs	r2, r2, r3
 8012a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d001      	beq.n	8012a6e <__sflush_r+0x4a>
 8012a6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a6c:	1ad2      	subs	r2, r2, r3
 8012a6e:	2300      	movs	r3, #0
 8012a70:	0028      	movs	r0, r5
 8012a72:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012a74:	6a21      	ldr	r1, [r4, #32]
 8012a76:	47b8      	blx	r7
 8012a78:	89a2      	ldrh	r2, [r4, #12]
 8012a7a:	1c43      	adds	r3, r0, #1
 8012a7c:	d106      	bne.n	8012a8c <__sflush_r+0x68>
 8012a7e:	6829      	ldr	r1, [r5, #0]
 8012a80:	291d      	cmp	r1, #29
 8012a82:	d846      	bhi.n	8012b12 <__sflush_r+0xee>
 8012a84:	4b29      	ldr	r3, [pc, #164]	@ (8012b2c <__sflush_r+0x108>)
 8012a86:	40cb      	lsrs	r3, r1
 8012a88:	07db      	lsls	r3, r3, #31
 8012a8a:	d542      	bpl.n	8012b12 <__sflush_r+0xee>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	6063      	str	r3, [r4, #4]
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	6023      	str	r3, [r4, #0]
 8012a94:	04d2      	lsls	r2, r2, #19
 8012a96:	d505      	bpl.n	8012aa4 <__sflush_r+0x80>
 8012a98:	1c43      	adds	r3, r0, #1
 8012a9a:	d102      	bne.n	8012aa2 <__sflush_r+0x7e>
 8012a9c:	682b      	ldr	r3, [r5, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d100      	bne.n	8012aa4 <__sflush_r+0x80>
 8012aa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012aa6:	602e      	str	r6, [r5, #0]
 8012aa8:	2900      	cmp	r1, #0
 8012aaa:	d017      	beq.n	8012adc <__sflush_r+0xb8>
 8012aac:	0023      	movs	r3, r4
 8012aae:	3344      	adds	r3, #68	@ 0x44
 8012ab0:	4299      	cmp	r1, r3
 8012ab2:	d002      	beq.n	8012aba <__sflush_r+0x96>
 8012ab4:	0028      	movs	r0, r5
 8012ab6:	f7fe fd15 	bl	80114e4 <_free_r>
 8012aba:	2300      	movs	r3, #0
 8012abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012abe:	e00d      	b.n	8012adc <__sflush_r+0xb8>
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	0028      	movs	r0, r5
 8012ac4:	47b8      	blx	r7
 8012ac6:	0002      	movs	r2, r0
 8012ac8:	1c43      	adds	r3, r0, #1
 8012aca:	d1c6      	bne.n	8012a5a <__sflush_r+0x36>
 8012acc:	682b      	ldr	r3, [r5, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d0c3      	beq.n	8012a5a <__sflush_r+0x36>
 8012ad2:	2b1d      	cmp	r3, #29
 8012ad4:	d001      	beq.n	8012ada <__sflush_r+0xb6>
 8012ad6:	2b16      	cmp	r3, #22
 8012ad8:	d11a      	bne.n	8012b10 <__sflush_r+0xec>
 8012ada:	602e      	str	r6, [r5, #0]
 8012adc:	2000      	movs	r0, #0
 8012ade:	e01e      	b.n	8012b1e <__sflush_r+0xfa>
 8012ae0:	690e      	ldr	r6, [r1, #16]
 8012ae2:	2e00      	cmp	r6, #0
 8012ae4:	d0fa      	beq.n	8012adc <__sflush_r+0xb8>
 8012ae6:	680f      	ldr	r7, [r1, #0]
 8012ae8:	600e      	str	r6, [r1, #0]
 8012aea:	1bba      	subs	r2, r7, r6
 8012aec:	9201      	str	r2, [sp, #4]
 8012aee:	2200      	movs	r2, #0
 8012af0:	079b      	lsls	r3, r3, #30
 8012af2:	d100      	bne.n	8012af6 <__sflush_r+0xd2>
 8012af4:	694a      	ldr	r2, [r1, #20]
 8012af6:	60a2      	str	r2, [r4, #8]
 8012af8:	9b01      	ldr	r3, [sp, #4]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	ddee      	ble.n	8012adc <__sflush_r+0xb8>
 8012afe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012b00:	0032      	movs	r2, r6
 8012b02:	001f      	movs	r7, r3
 8012b04:	0028      	movs	r0, r5
 8012b06:	9b01      	ldr	r3, [sp, #4]
 8012b08:	6a21      	ldr	r1, [r4, #32]
 8012b0a:	47b8      	blx	r7
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	dc07      	bgt.n	8012b20 <__sflush_r+0xfc>
 8012b10:	89a2      	ldrh	r2, [r4, #12]
 8012b12:	2340      	movs	r3, #64	@ 0x40
 8012b14:	2001      	movs	r0, #1
 8012b16:	4313      	orrs	r3, r2
 8012b18:	b21b      	sxth	r3, r3
 8012b1a:	81a3      	strh	r3, [r4, #12]
 8012b1c:	4240      	negs	r0, r0
 8012b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b20:	9b01      	ldr	r3, [sp, #4]
 8012b22:	1836      	adds	r6, r6, r0
 8012b24:	1a1b      	subs	r3, r3, r0
 8012b26:	9301      	str	r3, [sp, #4]
 8012b28:	e7e6      	b.n	8012af8 <__sflush_r+0xd4>
 8012b2a:	46c0      	nop			@ (mov r8, r8)
 8012b2c:	20400001 	.word	0x20400001

08012b30 <_fflush_r>:
 8012b30:	690b      	ldr	r3, [r1, #16]
 8012b32:	b570      	push	{r4, r5, r6, lr}
 8012b34:	0005      	movs	r5, r0
 8012b36:	000c      	movs	r4, r1
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d102      	bne.n	8012b42 <_fflush_r+0x12>
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	0028      	movs	r0, r5
 8012b40:	bd70      	pop	{r4, r5, r6, pc}
 8012b42:	2800      	cmp	r0, #0
 8012b44:	d004      	beq.n	8012b50 <_fflush_r+0x20>
 8012b46:	6a03      	ldr	r3, [r0, #32]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d101      	bne.n	8012b50 <_fflush_r+0x20>
 8012b4c:	f7fd fcea 	bl	8010524 <__sinit>
 8012b50:	220c      	movs	r2, #12
 8012b52:	5ea3      	ldrsh	r3, [r4, r2]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d0f1      	beq.n	8012b3c <_fflush_r+0xc>
 8012b58:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012b5a:	07d2      	lsls	r2, r2, #31
 8012b5c:	d404      	bmi.n	8012b68 <_fflush_r+0x38>
 8012b5e:	059b      	lsls	r3, r3, #22
 8012b60:	d402      	bmi.n	8012b68 <_fflush_r+0x38>
 8012b62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b64:	f7fd fe2b 	bl	80107be <__retarget_lock_acquire_recursive>
 8012b68:	0028      	movs	r0, r5
 8012b6a:	0021      	movs	r1, r4
 8012b6c:	f7ff ff5a 	bl	8012a24 <__sflush_r>
 8012b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b72:	0005      	movs	r5, r0
 8012b74:	07db      	lsls	r3, r3, #31
 8012b76:	d4e2      	bmi.n	8012b3e <_fflush_r+0xe>
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	059b      	lsls	r3, r3, #22
 8012b7c:	d4df      	bmi.n	8012b3e <_fflush_r+0xe>
 8012b7e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b80:	f7fd fe1e 	bl	80107c0 <__retarget_lock_release_recursive>
 8012b84:	e7db      	b.n	8012b3e <_fflush_r+0xe>

08012b86 <memmove>:
 8012b86:	b510      	push	{r4, lr}
 8012b88:	4288      	cmp	r0, r1
 8012b8a:	d902      	bls.n	8012b92 <memmove+0xc>
 8012b8c:	188b      	adds	r3, r1, r2
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	d308      	bcc.n	8012ba4 <memmove+0x1e>
 8012b92:	2300      	movs	r3, #0
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d007      	beq.n	8012ba8 <memmove+0x22>
 8012b98:	5ccc      	ldrb	r4, [r1, r3]
 8012b9a:	54c4      	strb	r4, [r0, r3]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	e7f9      	b.n	8012b94 <memmove+0xe>
 8012ba0:	5c8b      	ldrb	r3, [r1, r2]
 8012ba2:	5483      	strb	r3, [r0, r2]
 8012ba4:	3a01      	subs	r2, #1
 8012ba6:	d2fb      	bcs.n	8012ba0 <memmove+0x1a>
 8012ba8:	bd10      	pop	{r4, pc}
	...

08012bac <_sbrk_r>:
 8012bac:	2300      	movs	r3, #0
 8012bae:	b570      	push	{r4, r5, r6, lr}
 8012bb0:	4d06      	ldr	r5, [pc, #24]	@ (8012bcc <_sbrk_r+0x20>)
 8012bb2:	0004      	movs	r4, r0
 8012bb4:	0008      	movs	r0, r1
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	f7f1 fb80 	bl	80042bc <_sbrk>
 8012bbc:	1c43      	adds	r3, r0, #1
 8012bbe:	d103      	bne.n	8012bc8 <_sbrk_r+0x1c>
 8012bc0:	682b      	ldr	r3, [r5, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d000      	beq.n	8012bc8 <_sbrk_r+0x1c>
 8012bc6:	6023      	str	r3, [r4, #0]
 8012bc8:	bd70      	pop	{r4, r5, r6, pc}
 8012bca:	46c0      	nop			@ (mov r8, r8)
 8012bcc:	20002298 	.word	0x20002298

08012bd0 <__assert_func>:
 8012bd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012bd2:	0014      	movs	r4, r2
 8012bd4:	001a      	movs	r2, r3
 8012bd6:	4b09      	ldr	r3, [pc, #36]	@ (8012bfc <__assert_func+0x2c>)
 8012bd8:	0005      	movs	r5, r0
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	000e      	movs	r6, r1
 8012bde:	68d8      	ldr	r0, [r3, #12]
 8012be0:	4b07      	ldr	r3, [pc, #28]	@ (8012c00 <__assert_func+0x30>)
 8012be2:	2c00      	cmp	r4, #0
 8012be4:	d101      	bne.n	8012bea <__assert_func+0x1a>
 8012be6:	4b07      	ldr	r3, [pc, #28]	@ (8012c04 <__assert_func+0x34>)
 8012be8:	001c      	movs	r4, r3
 8012bea:	4907      	ldr	r1, [pc, #28]	@ (8012c08 <__assert_func+0x38>)
 8012bec:	9301      	str	r3, [sp, #4]
 8012bee:	9402      	str	r4, [sp, #8]
 8012bf0:	002b      	movs	r3, r5
 8012bf2:	9600      	str	r6, [sp, #0]
 8012bf4:	f000 f868 	bl	8012cc8 <fiprintf>
 8012bf8:	f000 f876 	bl	8012ce8 <abort>
 8012bfc:	20000308 	.word	0x20000308
 8012c00:	080136a1 	.word	0x080136a1
 8012c04:	080136dc 	.word	0x080136dc
 8012c08:	080136ae 	.word	0x080136ae

08012c0c <_calloc_r>:
 8012c0c:	b570      	push	{r4, r5, r6, lr}
 8012c0e:	0c0b      	lsrs	r3, r1, #16
 8012c10:	0c15      	lsrs	r5, r2, #16
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d11e      	bne.n	8012c54 <_calloc_r+0x48>
 8012c16:	2d00      	cmp	r5, #0
 8012c18:	d10c      	bne.n	8012c34 <_calloc_r+0x28>
 8012c1a:	b289      	uxth	r1, r1
 8012c1c:	b294      	uxth	r4, r2
 8012c1e:	434c      	muls	r4, r1
 8012c20:	0021      	movs	r1, r4
 8012c22:	f7ff f82f 	bl	8011c84 <_malloc_r>
 8012c26:	1e05      	subs	r5, r0, #0
 8012c28:	d01b      	beq.n	8012c62 <_calloc_r+0x56>
 8012c2a:	0022      	movs	r2, r4
 8012c2c:	2100      	movs	r1, #0
 8012c2e:	f7fd fd2f 	bl	8010690 <memset>
 8012c32:	e016      	b.n	8012c62 <_calloc_r+0x56>
 8012c34:	1c2b      	adds	r3, r5, #0
 8012c36:	1c0c      	adds	r4, r1, #0
 8012c38:	b289      	uxth	r1, r1
 8012c3a:	b292      	uxth	r2, r2
 8012c3c:	434a      	muls	r2, r1
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	b2a1      	uxth	r1, r4
 8012c42:	4359      	muls	r1, r3
 8012c44:	0c14      	lsrs	r4, r2, #16
 8012c46:	190c      	adds	r4, r1, r4
 8012c48:	0c23      	lsrs	r3, r4, #16
 8012c4a:	d107      	bne.n	8012c5c <_calloc_r+0x50>
 8012c4c:	0424      	lsls	r4, r4, #16
 8012c4e:	b292      	uxth	r2, r2
 8012c50:	4314      	orrs	r4, r2
 8012c52:	e7e5      	b.n	8012c20 <_calloc_r+0x14>
 8012c54:	2d00      	cmp	r5, #0
 8012c56:	d101      	bne.n	8012c5c <_calloc_r+0x50>
 8012c58:	1c14      	adds	r4, r2, #0
 8012c5a:	e7ed      	b.n	8012c38 <_calloc_r+0x2c>
 8012c5c:	230c      	movs	r3, #12
 8012c5e:	2500      	movs	r5, #0
 8012c60:	6003      	str	r3, [r0, #0]
 8012c62:	0028      	movs	r0, r5
 8012c64:	bd70      	pop	{r4, r5, r6, pc}

08012c66 <_realloc_r>:
 8012c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c68:	0006      	movs	r6, r0
 8012c6a:	000c      	movs	r4, r1
 8012c6c:	0015      	movs	r5, r2
 8012c6e:	2900      	cmp	r1, #0
 8012c70:	d105      	bne.n	8012c7e <_realloc_r+0x18>
 8012c72:	0011      	movs	r1, r2
 8012c74:	f7ff f806 	bl	8011c84 <_malloc_r>
 8012c78:	0004      	movs	r4, r0
 8012c7a:	0020      	movs	r0, r4
 8012c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012c7e:	2a00      	cmp	r2, #0
 8012c80:	d103      	bne.n	8012c8a <_realloc_r+0x24>
 8012c82:	f7fe fc2f 	bl	80114e4 <_free_r>
 8012c86:	002c      	movs	r4, r5
 8012c88:	e7f7      	b.n	8012c7a <_realloc_r+0x14>
 8012c8a:	f000 f834 	bl	8012cf6 <_malloc_usable_size_r>
 8012c8e:	0007      	movs	r7, r0
 8012c90:	4285      	cmp	r5, r0
 8012c92:	d802      	bhi.n	8012c9a <_realloc_r+0x34>
 8012c94:	0843      	lsrs	r3, r0, #1
 8012c96:	42ab      	cmp	r3, r5
 8012c98:	d3ef      	bcc.n	8012c7a <_realloc_r+0x14>
 8012c9a:	0029      	movs	r1, r5
 8012c9c:	0030      	movs	r0, r6
 8012c9e:	f7fe fff1 	bl	8011c84 <_malloc_r>
 8012ca2:	9001      	str	r0, [sp, #4]
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d101      	bne.n	8012cac <_realloc_r+0x46>
 8012ca8:	9c01      	ldr	r4, [sp, #4]
 8012caa:	e7e6      	b.n	8012c7a <_realloc_r+0x14>
 8012cac:	002a      	movs	r2, r5
 8012cae:	42bd      	cmp	r5, r7
 8012cb0:	d900      	bls.n	8012cb4 <_realloc_r+0x4e>
 8012cb2:	003a      	movs	r2, r7
 8012cb4:	0021      	movs	r1, r4
 8012cb6:	9801      	ldr	r0, [sp, #4]
 8012cb8:	f7fd fd8e 	bl	80107d8 <memcpy>
 8012cbc:	0021      	movs	r1, r4
 8012cbe:	0030      	movs	r0, r6
 8012cc0:	f7fe fc10 	bl	80114e4 <_free_r>
 8012cc4:	e7f0      	b.n	8012ca8 <_realloc_r+0x42>
	...

08012cc8 <fiprintf>:
 8012cc8:	b40e      	push	{r1, r2, r3}
 8012cca:	b517      	push	{r0, r1, r2, r4, lr}
 8012ccc:	4c05      	ldr	r4, [pc, #20]	@ (8012ce4 <fiprintf+0x1c>)
 8012cce:	ab05      	add	r3, sp, #20
 8012cd0:	cb04      	ldmia	r3!, {r2}
 8012cd2:	0001      	movs	r1, r0
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	9301      	str	r3, [sp, #4]
 8012cd8:	f000 f83c 	bl	8012d54 <_vfiprintf_r>
 8012cdc:	bc1e      	pop	{r1, r2, r3, r4}
 8012cde:	bc08      	pop	{r3}
 8012ce0:	b003      	add	sp, #12
 8012ce2:	4718      	bx	r3
 8012ce4:	20000308 	.word	0x20000308

08012ce8 <abort>:
 8012ce8:	2006      	movs	r0, #6
 8012cea:	b510      	push	{r4, lr}
 8012cec:	f000 fa18 	bl	8013120 <raise>
 8012cf0:	2001      	movs	r0, #1
 8012cf2:	f7f1 fa71 	bl	80041d8 <_exit>

08012cf6 <_malloc_usable_size_r>:
 8012cf6:	1f0b      	subs	r3, r1, #4
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	1f18      	subs	r0, r3, #4
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	da01      	bge.n	8012d04 <_malloc_usable_size_r+0xe>
 8012d00:	580b      	ldr	r3, [r1, r0]
 8012d02:	18c0      	adds	r0, r0, r3
 8012d04:	4770      	bx	lr

08012d06 <__sfputc_r>:
 8012d06:	6893      	ldr	r3, [r2, #8]
 8012d08:	b510      	push	{r4, lr}
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	6093      	str	r3, [r2, #8]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	da04      	bge.n	8012d1c <__sfputc_r+0x16>
 8012d12:	6994      	ldr	r4, [r2, #24]
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	db07      	blt.n	8012d28 <__sfputc_r+0x22>
 8012d18:	290a      	cmp	r1, #10
 8012d1a:	d005      	beq.n	8012d28 <__sfputc_r+0x22>
 8012d1c:	6813      	ldr	r3, [r2, #0]
 8012d1e:	1c58      	adds	r0, r3, #1
 8012d20:	6010      	str	r0, [r2, #0]
 8012d22:	7019      	strb	r1, [r3, #0]
 8012d24:	0008      	movs	r0, r1
 8012d26:	bd10      	pop	{r4, pc}
 8012d28:	f000 f930 	bl	8012f8c <__swbuf_r>
 8012d2c:	0001      	movs	r1, r0
 8012d2e:	e7f9      	b.n	8012d24 <__sfputc_r+0x1e>

08012d30 <__sfputs_r>:
 8012d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d32:	0006      	movs	r6, r0
 8012d34:	000f      	movs	r7, r1
 8012d36:	0014      	movs	r4, r2
 8012d38:	18d5      	adds	r5, r2, r3
 8012d3a:	42ac      	cmp	r4, r5
 8012d3c:	d101      	bne.n	8012d42 <__sfputs_r+0x12>
 8012d3e:	2000      	movs	r0, #0
 8012d40:	e007      	b.n	8012d52 <__sfputs_r+0x22>
 8012d42:	7821      	ldrb	r1, [r4, #0]
 8012d44:	003a      	movs	r2, r7
 8012d46:	0030      	movs	r0, r6
 8012d48:	f7ff ffdd 	bl	8012d06 <__sfputc_r>
 8012d4c:	3401      	adds	r4, #1
 8012d4e:	1c43      	adds	r3, r0, #1
 8012d50:	d1f3      	bne.n	8012d3a <__sfputs_r+0xa>
 8012d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d54 <_vfiprintf_r>:
 8012d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d56:	b0a1      	sub	sp, #132	@ 0x84
 8012d58:	000f      	movs	r7, r1
 8012d5a:	0015      	movs	r5, r2
 8012d5c:	001e      	movs	r6, r3
 8012d5e:	9003      	str	r0, [sp, #12]
 8012d60:	2800      	cmp	r0, #0
 8012d62:	d004      	beq.n	8012d6e <_vfiprintf_r+0x1a>
 8012d64:	6a03      	ldr	r3, [r0, #32]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d101      	bne.n	8012d6e <_vfiprintf_r+0x1a>
 8012d6a:	f7fd fbdb 	bl	8010524 <__sinit>
 8012d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012d70:	07db      	lsls	r3, r3, #31
 8012d72:	d405      	bmi.n	8012d80 <_vfiprintf_r+0x2c>
 8012d74:	89bb      	ldrh	r3, [r7, #12]
 8012d76:	059b      	lsls	r3, r3, #22
 8012d78:	d402      	bmi.n	8012d80 <_vfiprintf_r+0x2c>
 8012d7a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012d7c:	f7fd fd1f 	bl	80107be <__retarget_lock_acquire_recursive>
 8012d80:	89bb      	ldrh	r3, [r7, #12]
 8012d82:	071b      	lsls	r3, r3, #28
 8012d84:	d502      	bpl.n	8012d8c <_vfiprintf_r+0x38>
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d113      	bne.n	8012db4 <_vfiprintf_r+0x60>
 8012d8c:	0039      	movs	r1, r7
 8012d8e:	9803      	ldr	r0, [sp, #12]
 8012d90:	f000 f93e 	bl	8013010 <__swsetup_r>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d00d      	beq.n	8012db4 <_vfiprintf_r+0x60>
 8012d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012d9a:	07db      	lsls	r3, r3, #31
 8012d9c:	d503      	bpl.n	8012da6 <_vfiprintf_r+0x52>
 8012d9e:	2001      	movs	r0, #1
 8012da0:	4240      	negs	r0, r0
 8012da2:	b021      	add	sp, #132	@ 0x84
 8012da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da6:	89bb      	ldrh	r3, [r7, #12]
 8012da8:	059b      	lsls	r3, r3, #22
 8012daa:	d4f8      	bmi.n	8012d9e <_vfiprintf_r+0x4a>
 8012dac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012dae:	f7fd fd07 	bl	80107c0 <__retarget_lock_release_recursive>
 8012db2:	e7f4      	b.n	8012d9e <_vfiprintf_r+0x4a>
 8012db4:	2300      	movs	r3, #0
 8012db6:	ac08      	add	r4, sp, #32
 8012db8:	6163      	str	r3, [r4, #20]
 8012dba:	3320      	adds	r3, #32
 8012dbc:	7663      	strb	r3, [r4, #25]
 8012dbe:	3310      	adds	r3, #16
 8012dc0:	76a3      	strb	r3, [r4, #26]
 8012dc2:	9607      	str	r6, [sp, #28]
 8012dc4:	002e      	movs	r6, r5
 8012dc6:	7833      	ldrb	r3, [r6, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d001      	beq.n	8012dd0 <_vfiprintf_r+0x7c>
 8012dcc:	2b25      	cmp	r3, #37	@ 0x25
 8012dce:	d148      	bne.n	8012e62 <_vfiprintf_r+0x10e>
 8012dd0:	1b73      	subs	r3, r6, r5
 8012dd2:	9305      	str	r3, [sp, #20]
 8012dd4:	42ae      	cmp	r6, r5
 8012dd6:	d00b      	beq.n	8012df0 <_vfiprintf_r+0x9c>
 8012dd8:	002a      	movs	r2, r5
 8012dda:	0039      	movs	r1, r7
 8012ddc:	9803      	ldr	r0, [sp, #12]
 8012dde:	f7ff ffa7 	bl	8012d30 <__sfputs_r>
 8012de2:	3001      	adds	r0, #1
 8012de4:	d100      	bne.n	8012de8 <_vfiprintf_r+0x94>
 8012de6:	e0ae      	b.n	8012f46 <_vfiprintf_r+0x1f2>
 8012de8:	6963      	ldr	r3, [r4, #20]
 8012dea:	9a05      	ldr	r2, [sp, #20]
 8012dec:	189b      	adds	r3, r3, r2
 8012dee:	6163      	str	r3, [r4, #20]
 8012df0:	7833      	ldrb	r3, [r6, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d100      	bne.n	8012df8 <_vfiprintf_r+0xa4>
 8012df6:	e0a6      	b.n	8012f46 <_vfiprintf_r+0x1f2>
 8012df8:	2201      	movs	r2, #1
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	4252      	negs	r2, r2
 8012dfe:	6062      	str	r2, [r4, #4]
 8012e00:	a904      	add	r1, sp, #16
 8012e02:	3254      	adds	r2, #84	@ 0x54
 8012e04:	1852      	adds	r2, r2, r1
 8012e06:	1c75      	adds	r5, r6, #1
 8012e08:	6023      	str	r3, [r4, #0]
 8012e0a:	60e3      	str	r3, [r4, #12]
 8012e0c:	60a3      	str	r3, [r4, #8]
 8012e0e:	7013      	strb	r3, [r2, #0]
 8012e10:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012e12:	4b59      	ldr	r3, [pc, #356]	@ (8012f78 <_vfiprintf_r+0x224>)
 8012e14:	2205      	movs	r2, #5
 8012e16:	0018      	movs	r0, r3
 8012e18:	7829      	ldrb	r1, [r5, #0]
 8012e1a:	9305      	str	r3, [sp, #20]
 8012e1c:	f7fd fcd1 	bl	80107c2 <memchr>
 8012e20:	1c6e      	adds	r6, r5, #1
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d11f      	bne.n	8012e66 <_vfiprintf_r+0x112>
 8012e26:	6822      	ldr	r2, [r4, #0]
 8012e28:	06d3      	lsls	r3, r2, #27
 8012e2a:	d504      	bpl.n	8012e36 <_vfiprintf_r+0xe2>
 8012e2c:	2353      	movs	r3, #83	@ 0x53
 8012e2e:	a904      	add	r1, sp, #16
 8012e30:	185b      	adds	r3, r3, r1
 8012e32:	2120      	movs	r1, #32
 8012e34:	7019      	strb	r1, [r3, #0]
 8012e36:	0713      	lsls	r3, r2, #28
 8012e38:	d504      	bpl.n	8012e44 <_vfiprintf_r+0xf0>
 8012e3a:	2353      	movs	r3, #83	@ 0x53
 8012e3c:	a904      	add	r1, sp, #16
 8012e3e:	185b      	adds	r3, r3, r1
 8012e40:	212b      	movs	r1, #43	@ 0x2b
 8012e42:	7019      	strb	r1, [r3, #0]
 8012e44:	782b      	ldrb	r3, [r5, #0]
 8012e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e48:	d016      	beq.n	8012e78 <_vfiprintf_r+0x124>
 8012e4a:	002e      	movs	r6, r5
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	200a      	movs	r0, #10
 8012e50:	68e3      	ldr	r3, [r4, #12]
 8012e52:	7832      	ldrb	r2, [r6, #0]
 8012e54:	1c75      	adds	r5, r6, #1
 8012e56:	3a30      	subs	r2, #48	@ 0x30
 8012e58:	2a09      	cmp	r2, #9
 8012e5a:	d950      	bls.n	8012efe <_vfiprintf_r+0x1aa>
 8012e5c:	2900      	cmp	r1, #0
 8012e5e:	d111      	bne.n	8012e84 <_vfiprintf_r+0x130>
 8012e60:	e017      	b.n	8012e92 <_vfiprintf_r+0x13e>
 8012e62:	3601      	adds	r6, #1
 8012e64:	e7af      	b.n	8012dc6 <_vfiprintf_r+0x72>
 8012e66:	9b05      	ldr	r3, [sp, #20]
 8012e68:	6822      	ldr	r2, [r4, #0]
 8012e6a:	1ac0      	subs	r0, r0, r3
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	4083      	lsls	r3, r0
 8012e70:	4313      	orrs	r3, r2
 8012e72:	0035      	movs	r5, r6
 8012e74:	6023      	str	r3, [r4, #0]
 8012e76:	e7cc      	b.n	8012e12 <_vfiprintf_r+0xbe>
 8012e78:	9b07      	ldr	r3, [sp, #28]
 8012e7a:	1d19      	adds	r1, r3, #4
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	9107      	str	r1, [sp, #28]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	db01      	blt.n	8012e88 <_vfiprintf_r+0x134>
 8012e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e86:	e004      	b.n	8012e92 <_vfiprintf_r+0x13e>
 8012e88:	425b      	negs	r3, r3
 8012e8a:	60e3      	str	r3, [r4, #12]
 8012e8c:	2302      	movs	r3, #2
 8012e8e:	4313      	orrs	r3, r2
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	7833      	ldrb	r3, [r6, #0]
 8012e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e96:	d10c      	bne.n	8012eb2 <_vfiprintf_r+0x15e>
 8012e98:	7873      	ldrb	r3, [r6, #1]
 8012e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e9c:	d134      	bne.n	8012f08 <_vfiprintf_r+0x1b4>
 8012e9e:	9b07      	ldr	r3, [sp, #28]
 8012ea0:	3602      	adds	r6, #2
 8012ea2:	1d1a      	adds	r2, r3, #4
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	9207      	str	r2, [sp, #28]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	da01      	bge.n	8012eb0 <_vfiprintf_r+0x15c>
 8012eac:	2301      	movs	r3, #1
 8012eae:	425b      	negs	r3, r3
 8012eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eb2:	4d32      	ldr	r5, [pc, #200]	@ (8012f7c <_vfiprintf_r+0x228>)
 8012eb4:	2203      	movs	r2, #3
 8012eb6:	0028      	movs	r0, r5
 8012eb8:	7831      	ldrb	r1, [r6, #0]
 8012eba:	f7fd fc82 	bl	80107c2 <memchr>
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	d006      	beq.n	8012ed0 <_vfiprintf_r+0x17c>
 8012ec2:	2340      	movs	r3, #64	@ 0x40
 8012ec4:	1b40      	subs	r0, r0, r5
 8012ec6:	4083      	lsls	r3, r0
 8012ec8:	6822      	ldr	r2, [r4, #0]
 8012eca:	3601      	adds	r6, #1
 8012ecc:	4313      	orrs	r3, r2
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	7831      	ldrb	r1, [r6, #0]
 8012ed2:	2206      	movs	r2, #6
 8012ed4:	482a      	ldr	r0, [pc, #168]	@ (8012f80 <_vfiprintf_r+0x22c>)
 8012ed6:	1c75      	adds	r5, r6, #1
 8012ed8:	7621      	strb	r1, [r4, #24]
 8012eda:	f7fd fc72 	bl	80107c2 <memchr>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d040      	beq.n	8012f64 <_vfiprintf_r+0x210>
 8012ee2:	4b28      	ldr	r3, [pc, #160]	@ (8012f84 <_vfiprintf_r+0x230>)
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d122      	bne.n	8012f2e <_vfiprintf_r+0x1da>
 8012ee8:	2207      	movs	r2, #7
 8012eea:	9b07      	ldr	r3, [sp, #28]
 8012eec:	3307      	adds	r3, #7
 8012eee:	4393      	bics	r3, r2
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	9307      	str	r3, [sp, #28]
 8012ef4:	6963      	ldr	r3, [r4, #20]
 8012ef6:	9a04      	ldr	r2, [sp, #16]
 8012ef8:	189b      	adds	r3, r3, r2
 8012efa:	6163      	str	r3, [r4, #20]
 8012efc:	e762      	b.n	8012dc4 <_vfiprintf_r+0x70>
 8012efe:	4343      	muls	r3, r0
 8012f00:	002e      	movs	r6, r5
 8012f02:	2101      	movs	r1, #1
 8012f04:	189b      	adds	r3, r3, r2
 8012f06:	e7a4      	b.n	8012e52 <_vfiprintf_r+0xfe>
 8012f08:	2300      	movs	r3, #0
 8012f0a:	200a      	movs	r0, #10
 8012f0c:	0019      	movs	r1, r3
 8012f0e:	3601      	adds	r6, #1
 8012f10:	6063      	str	r3, [r4, #4]
 8012f12:	7832      	ldrb	r2, [r6, #0]
 8012f14:	1c75      	adds	r5, r6, #1
 8012f16:	3a30      	subs	r2, #48	@ 0x30
 8012f18:	2a09      	cmp	r2, #9
 8012f1a:	d903      	bls.n	8012f24 <_vfiprintf_r+0x1d0>
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d0c8      	beq.n	8012eb2 <_vfiprintf_r+0x15e>
 8012f20:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f22:	e7c6      	b.n	8012eb2 <_vfiprintf_r+0x15e>
 8012f24:	4341      	muls	r1, r0
 8012f26:	002e      	movs	r6, r5
 8012f28:	2301      	movs	r3, #1
 8012f2a:	1889      	adds	r1, r1, r2
 8012f2c:	e7f1      	b.n	8012f12 <_vfiprintf_r+0x1be>
 8012f2e:	aa07      	add	r2, sp, #28
 8012f30:	9200      	str	r2, [sp, #0]
 8012f32:	0021      	movs	r1, r4
 8012f34:	003a      	movs	r2, r7
 8012f36:	4b14      	ldr	r3, [pc, #80]	@ (8012f88 <_vfiprintf_r+0x234>)
 8012f38:	9803      	ldr	r0, [sp, #12]
 8012f3a:	f7fc fea9 	bl	800fc90 <_printf_float>
 8012f3e:	9004      	str	r0, [sp, #16]
 8012f40:	9b04      	ldr	r3, [sp, #16]
 8012f42:	3301      	adds	r3, #1
 8012f44:	d1d6      	bne.n	8012ef4 <_vfiprintf_r+0x1a0>
 8012f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f48:	07db      	lsls	r3, r3, #31
 8012f4a:	d405      	bmi.n	8012f58 <_vfiprintf_r+0x204>
 8012f4c:	89bb      	ldrh	r3, [r7, #12]
 8012f4e:	059b      	lsls	r3, r3, #22
 8012f50:	d402      	bmi.n	8012f58 <_vfiprintf_r+0x204>
 8012f52:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012f54:	f7fd fc34 	bl	80107c0 <__retarget_lock_release_recursive>
 8012f58:	89bb      	ldrh	r3, [r7, #12]
 8012f5a:	065b      	lsls	r3, r3, #25
 8012f5c:	d500      	bpl.n	8012f60 <_vfiprintf_r+0x20c>
 8012f5e:	e71e      	b.n	8012d9e <_vfiprintf_r+0x4a>
 8012f60:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012f62:	e71e      	b.n	8012da2 <_vfiprintf_r+0x4e>
 8012f64:	aa07      	add	r2, sp, #28
 8012f66:	9200      	str	r2, [sp, #0]
 8012f68:	0021      	movs	r1, r4
 8012f6a:	003a      	movs	r2, r7
 8012f6c:	4b06      	ldr	r3, [pc, #24]	@ (8012f88 <_vfiprintf_r+0x234>)
 8012f6e:	9803      	ldr	r0, [sp, #12]
 8012f70:	f7fd f93c 	bl	80101ec <_printf_i>
 8012f74:	e7e3      	b.n	8012f3e <_vfiprintf_r+0x1ea>
 8012f76:	46c0      	nop			@ (mov r8, r8)
 8012f78:	08013690 	.word	0x08013690
 8012f7c:	08013696 	.word	0x08013696
 8012f80:	0801369a 	.word	0x0801369a
 8012f84:	0800fc91 	.word	0x0800fc91
 8012f88:	08012d31 	.word	0x08012d31

08012f8c <__swbuf_r>:
 8012f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8e:	0006      	movs	r6, r0
 8012f90:	000d      	movs	r5, r1
 8012f92:	0014      	movs	r4, r2
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d004      	beq.n	8012fa2 <__swbuf_r+0x16>
 8012f98:	6a03      	ldr	r3, [r0, #32]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d101      	bne.n	8012fa2 <__swbuf_r+0x16>
 8012f9e:	f7fd fac1 	bl	8010524 <__sinit>
 8012fa2:	69a3      	ldr	r3, [r4, #24]
 8012fa4:	60a3      	str	r3, [r4, #8]
 8012fa6:	89a3      	ldrh	r3, [r4, #12]
 8012fa8:	071b      	lsls	r3, r3, #28
 8012faa:	d502      	bpl.n	8012fb2 <__swbuf_r+0x26>
 8012fac:	6923      	ldr	r3, [r4, #16]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d109      	bne.n	8012fc6 <__swbuf_r+0x3a>
 8012fb2:	0021      	movs	r1, r4
 8012fb4:	0030      	movs	r0, r6
 8012fb6:	f000 f82b 	bl	8013010 <__swsetup_r>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d003      	beq.n	8012fc6 <__swbuf_r+0x3a>
 8012fbe:	2501      	movs	r5, #1
 8012fc0:	426d      	negs	r5, r5
 8012fc2:	0028      	movs	r0, r5
 8012fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fc6:	6923      	ldr	r3, [r4, #16]
 8012fc8:	6820      	ldr	r0, [r4, #0]
 8012fca:	b2ef      	uxtb	r7, r5
 8012fcc:	1ac0      	subs	r0, r0, r3
 8012fce:	6963      	ldr	r3, [r4, #20]
 8012fd0:	b2ed      	uxtb	r5, r5
 8012fd2:	4283      	cmp	r3, r0
 8012fd4:	dc05      	bgt.n	8012fe2 <__swbuf_r+0x56>
 8012fd6:	0021      	movs	r1, r4
 8012fd8:	0030      	movs	r0, r6
 8012fda:	f7ff fda9 	bl	8012b30 <_fflush_r>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d1ed      	bne.n	8012fbe <__swbuf_r+0x32>
 8012fe2:	68a3      	ldr	r3, [r4, #8]
 8012fe4:	3001      	adds	r0, #1
 8012fe6:	3b01      	subs	r3, #1
 8012fe8:	60a3      	str	r3, [r4, #8]
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	6022      	str	r2, [r4, #0]
 8012ff0:	701f      	strb	r7, [r3, #0]
 8012ff2:	6963      	ldr	r3, [r4, #20]
 8012ff4:	4283      	cmp	r3, r0
 8012ff6:	d004      	beq.n	8013002 <__swbuf_r+0x76>
 8012ff8:	89a3      	ldrh	r3, [r4, #12]
 8012ffa:	07db      	lsls	r3, r3, #31
 8012ffc:	d5e1      	bpl.n	8012fc2 <__swbuf_r+0x36>
 8012ffe:	2d0a      	cmp	r5, #10
 8013000:	d1df      	bne.n	8012fc2 <__swbuf_r+0x36>
 8013002:	0021      	movs	r1, r4
 8013004:	0030      	movs	r0, r6
 8013006:	f7ff fd93 	bl	8012b30 <_fflush_r>
 801300a:	2800      	cmp	r0, #0
 801300c:	d0d9      	beq.n	8012fc2 <__swbuf_r+0x36>
 801300e:	e7d6      	b.n	8012fbe <__swbuf_r+0x32>

08013010 <__swsetup_r>:
 8013010:	4b2d      	ldr	r3, [pc, #180]	@ (80130c8 <__swsetup_r+0xb8>)
 8013012:	b570      	push	{r4, r5, r6, lr}
 8013014:	0005      	movs	r5, r0
 8013016:	6818      	ldr	r0, [r3, #0]
 8013018:	000c      	movs	r4, r1
 801301a:	2800      	cmp	r0, #0
 801301c:	d004      	beq.n	8013028 <__swsetup_r+0x18>
 801301e:	6a03      	ldr	r3, [r0, #32]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d101      	bne.n	8013028 <__swsetup_r+0x18>
 8013024:	f7fd fa7e 	bl	8010524 <__sinit>
 8013028:	220c      	movs	r2, #12
 801302a:	5ea3      	ldrsh	r3, [r4, r2]
 801302c:	071a      	lsls	r2, r3, #28
 801302e:	d423      	bmi.n	8013078 <__swsetup_r+0x68>
 8013030:	06da      	lsls	r2, r3, #27
 8013032:	d407      	bmi.n	8013044 <__swsetup_r+0x34>
 8013034:	2209      	movs	r2, #9
 8013036:	602a      	str	r2, [r5, #0]
 8013038:	2240      	movs	r2, #64	@ 0x40
 801303a:	2001      	movs	r0, #1
 801303c:	4313      	orrs	r3, r2
 801303e:	81a3      	strh	r3, [r4, #12]
 8013040:	4240      	negs	r0, r0
 8013042:	e03a      	b.n	80130ba <__swsetup_r+0xaa>
 8013044:	075b      	lsls	r3, r3, #29
 8013046:	d513      	bpl.n	8013070 <__swsetup_r+0x60>
 8013048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801304a:	2900      	cmp	r1, #0
 801304c:	d008      	beq.n	8013060 <__swsetup_r+0x50>
 801304e:	0023      	movs	r3, r4
 8013050:	3344      	adds	r3, #68	@ 0x44
 8013052:	4299      	cmp	r1, r3
 8013054:	d002      	beq.n	801305c <__swsetup_r+0x4c>
 8013056:	0028      	movs	r0, r5
 8013058:	f7fe fa44 	bl	80114e4 <_free_r>
 801305c:	2300      	movs	r3, #0
 801305e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013060:	2224      	movs	r2, #36	@ 0x24
 8013062:	89a3      	ldrh	r3, [r4, #12]
 8013064:	4393      	bics	r3, r2
 8013066:	81a3      	strh	r3, [r4, #12]
 8013068:	2300      	movs	r3, #0
 801306a:	6063      	str	r3, [r4, #4]
 801306c:	6923      	ldr	r3, [r4, #16]
 801306e:	6023      	str	r3, [r4, #0]
 8013070:	2308      	movs	r3, #8
 8013072:	89a2      	ldrh	r2, [r4, #12]
 8013074:	4313      	orrs	r3, r2
 8013076:	81a3      	strh	r3, [r4, #12]
 8013078:	6923      	ldr	r3, [r4, #16]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d10b      	bne.n	8013096 <__swsetup_r+0x86>
 801307e:	21a0      	movs	r1, #160	@ 0xa0
 8013080:	2280      	movs	r2, #128	@ 0x80
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	0089      	lsls	r1, r1, #2
 8013086:	0092      	lsls	r2, r2, #2
 8013088:	400b      	ands	r3, r1
 801308a:	4293      	cmp	r3, r2
 801308c:	d003      	beq.n	8013096 <__swsetup_r+0x86>
 801308e:	0021      	movs	r1, r4
 8013090:	0028      	movs	r0, r5
 8013092:	f000 f88f 	bl	80131b4 <__smakebuf_r>
 8013096:	220c      	movs	r2, #12
 8013098:	5ea3      	ldrsh	r3, [r4, r2]
 801309a:	2101      	movs	r1, #1
 801309c:	001a      	movs	r2, r3
 801309e:	400a      	ands	r2, r1
 80130a0:	420b      	tst	r3, r1
 80130a2:	d00b      	beq.n	80130bc <__swsetup_r+0xac>
 80130a4:	2200      	movs	r2, #0
 80130a6:	60a2      	str	r2, [r4, #8]
 80130a8:	6962      	ldr	r2, [r4, #20]
 80130aa:	4252      	negs	r2, r2
 80130ac:	61a2      	str	r2, [r4, #24]
 80130ae:	2000      	movs	r0, #0
 80130b0:	6922      	ldr	r2, [r4, #16]
 80130b2:	4282      	cmp	r2, r0
 80130b4:	d101      	bne.n	80130ba <__swsetup_r+0xaa>
 80130b6:	061a      	lsls	r2, r3, #24
 80130b8:	d4be      	bmi.n	8013038 <__swsetup_r+0x28>
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	0799      	lsls	r1, r3, #30
 80130be:	d400      	bmi.n	80130c2 <__swsetup_r+0xb2>
 80130c0:	6962      	ldr	r2, [r4, #20]
 80130c2:	60a2      	str	r2, [r4, #8]
 80130c4:	e7f3      	b.n	80130ae <__swsetup_r+0x9e>
 80130c6:	46c0      	nop			@ (mov r8, r8)
 80130c8:	20000308 	.word	0x20000308

080130cc <_raise_r>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	0004      	movs	r4, r0
 80130d0:	000d      	movs	r5, r1
 80130d2:	291f      	cmp	r1, #31
 80130d4:	d904      	bls.n	80130e0 <_raise_r+0x14>
 80130d6:	2316      	movs	r3, #22
 80130d8:	6003      	str	r3, [r0, #0]
 80130da:	2001      	movs	r0, #1
 80130dc:	4240      	negs	r0, r0
 80130de:	bd70      	pop	{r4, r5, r6, pc}
 80130e0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d004      	beq.n	80130f0 <_raise_r+0x24>
 80130e6:	008a      	lsls	r2, r1, #2
 80130e8:	189b      	adds	r3, r3, r2
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	d108      	bne.n	8013102 <_raise_r+0x36>
 80130f0:	0020      	movs	r0, r4
 80130f2:	f000 f831 	bl	8013158 <_getpid_r>
 80130f6:	002a      	movs	r2, r5
 80130f8:	0001      	movs	r1, r0
 80130fa:	0020      	movs	r0, r4
 80130fc:	f000 f81a 	bl	8013134 <_kill_r>
 8013100:	e7ed      	b.n	80130de <_raise_r+0x12>
 8013102:	2a01      	cmp	r2, #1
 8013104:	d009      	beq.n	801311a <_raise_r+0x4e>
 8013106:	1c51      	adds	r1, r2, #1
 8013108:	d103      	bne.n	8013112 <_raise_r+0x46>
 801310a:	2316      	movs	r3, #22
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	2001      	movs	r0, #1
 8013110:	e7e5      	b.n	80130de <_raise_r+0x12>
 8013112:	2100      	movs	r1, #0
 8013114:	0028      	movs	r0, r5
 8013116:	6019      	str	r1, [r3, #0]
 8013118:	4790      	blx	r2
 801311a:	2000      	movs	r0, #0
 801311c:	e7df      	b.n	80130de <_raise_r+0x12>
	...

08013120 <raise>:
 8013120:	b510      	push	{r4, lr}
 8013122:	4b03      	ldr	r3, [pc, #12]	@ (8013130 <raise+0x10>)
 8013124:	0001      	movs	r1, r0
 8013126:	6818      	ldr	r0, [r3, #0]
 8013128:	f7ff ffd0 	bl	80130cc <_raise_r>
 801312c:	bd10      	pop	{r4, pc}
 801312e:	46c0      	nop			@ (mov r8, r8)
 8013130:	20000308 	.word	0x20000308

08013134 <_kill_r>:
 8013134:	2300      	movs	r3, #0
 8013136:	b570      	push	{r4, r5, r6, lr}
 8013138:	4d06      	ldr	r5, [pc, #24]	@ (8013154 <_kill_r+0x20>)
 801313a:	0004      	movs	r4, r0
 801313c:	0008      	movs	r0, r1
 801313e:	0011      	movs	r1, r2
 8013140:	602b      	str	r3, [r5, #0]
 8013142:	f7f1 f839 	bl	80041b8 <_kill>
 8013146:	1c43      	adds	r3, r0, #1
 8013148:	d103      	bne.n	8013152 <_kill_r+0x1e>
 801314a:	682b      	ldr	r3, [r5, #0]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d000      	beq.n	8013152 <_kill_r+0x1e>
 8013150:	6023      	str	r3, [r4, #0]
 8013152:	bd70      	pop	{r4, r5, r6, pc}
 8013154:	20002298 	.word	0x20002298

08013158 <_getpid_r>:
 8013158:	b510      	push	{r4, lr}
 801315a:	f7f1 f827 	bl	80041ac <_getpid>
 801315e:	bd10      	pop	{r4, pc}

08013160 <__swhatbuf_r>:
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	000e      	movs	r6, r1
 8013164:	001d      	movs	r5, r3
 8013166:	230e      	movs	r3, #14
 8013168:	5ec9      	ldrsh	r1, [r1, r3]
 801316a:	0014      	movs	r4, r2
 801316c:	b096      	sub	sp, #88	@ 0x58
 801316e:	2900      	cmp	r1, #0
 8013170:	da0c      	bge.n	801318c <__swhatbuf_r+0x2c>
 8013172:	89b2      	ldrh	r2, [r6, #12]
 8013174:	2380      	movs	r3, #128	@ 0x80
 8013176:	0011      	movs	r1, r2
 8013178:	4019      	ands	r1, r3
 801317a:	421a      	tst	r2, r3
 801317c:	d114      	bne.n	80131a8 <__swhatbuf_r+0x48>
 801317e:	2380      	movs	r3, #128	@ 0x80
 8013180:	00db      	lsls	r3, r3, #3
 8013182:	2000      	movs	r0, #0
 8013184:	6029      	str	r1, [r5, #0]
 8013186:	6023      	str	r3, [r4, #0]
 8013188:	b016      	add	sp, #88	@ 0x58
 801318a:	bd70      	pop	{r4, r5, r6, pc}
 801318c:	466a      	mov	r2, sp
 801318e:	f000 f853 	bl	8013238 <_fstat_r>
 8013192:	2800      	cmp	r0, #0
 8013194:	dbed      	blt.n	8013172 <__swhatbuf_r+0x12>
 8013196:	23f0      	movs	r3, #240	@ 0xf0
 8013198:	9901      	ldr	r1, [sp, #4]
 801319a:	021b      	lsls	r3, r3, #8
 801319c:	4019      	ands	r1, r3
 801319e:	4b04      	ldr	r3, [pc, #16]	@ (80131b0 <__swhatbuf_r+0x50>)
 80131a0:	18c9      	adds	r1, r1, r3
 80131a2:	424b      	negs	r3, r1
 80131a4:	4159      	adcs	r1, r3
 80131a6:	e7ea      	b.n	801317e <__swhatbuf_r+0x1e>
 80131a8:	2100      	movs	r1, #0
 80131aa:	2340      	movs	r3, #64	@ 0x40
 80131ac:	e7e9      	b.n	8013182 <__swhatbuf_r+0x22>
 80131ae:	46c0      	nop			@ (mov r8, r8)
 80131b0:	ffffe000 	.word	0xffffe000

080131b4 <__smakebuf_r>:
 80131b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131b6:	2602      	movs	r6, #2
 80131b8:	898b      	ldrh	r3, [r1, #12]
 80131ba:	0005      	movs	r5, r0
 80131bc:	000c      	movs	r4, r1
 80131be:	b085      	sub	sp, #20
 80131c0:	4233      	tst	r3, r6
 80131c2:	d007      	beq.n	80131d4 <__smakebuf_r+0x20>
 80131c4:	0023      	movs	r3, r4
 80131c6:	3347      	adds	r3, #71	@ 0x47
 80131c8:	6023      	str	r3, [r4, #0]
 80131ca:	6123      	str	r3, [r4, #16]
 80131cc:	2301      	movs	r3, #1
 80131ce:	6163      	str	r3, [r4, #20]
 80131d0:	b005      	add	sp, #20
 80131d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131d4:	ab03      	add	r3, sp, #12
 80131d6:	aa02      	add	r2, sp, #8
 80131d8:	f7ff ffc2 	bl	8013160 <__swhatbuf_r>
 80131dc:	9f02      	ldr	r7, [sp, #8]
 80131de:	9001      	str	r0, [sp, #4]
 80131e0:	0039      	movs	r1, r7
 80131e2:	0028      	movs	r0, r5
 80131e4:	f7fe fd4e 	bl	8011c84 <_malloc_r>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	d108      	bne.n	80131fe <__smakebuf_r+0x4a>
 80131ec:	220c      	movs	r2, #12
 80131ee:	5ea3      	ldrsh	r3, [r4, r2]
 80131f0:	059a      	lsls	r2, r3, #22
 80131f2:	d4ed      	bmi.n	80131d0 <__smakebuf_r+0x1c>
 80131f4:	2203      	movs	r2, #3
 80131f6:	4393      	bics	r3, r2
 80131f8:	431e      	orrs	r6, r3
 80131fa:	81a6      	strh	r6, [r4, #12]
 80131fc:	e7e2      	b.n	80131c4 <__smakebuf_r+0x10>
 80131fe:	2380      	movs	r3, #128	@ 0x80
 8013200:	89a2      	ldrh	r2, [r4, #12]
 8013202:	6020      	str	r0, [r4, #0]
 8013204:	4313      	orrs	r3, r2
 8013206:	81a3      	strh	r3, [r4, #12]
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	6120      	str	r0, [r4, #16]
 801320c:	6167      	str	r7, [r4, #20]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00c      	beq.n	801322c <__smakebuf_r+0x78>
 8013212:	0028      	movs	r0, r5
 8013214:	230e      	movs	r3, #14
 8013216:	5ee1      	ldrsh	r1, [r4, r3]
 8013218:	f000 f820 	bl	801325c <_isatty_r>
 801321c:	2800      	cmp	r0, #0
 801321e:	d005      	beq.n	801322c <__smakebuf_r+0x78>
 8013220:	2303      	movs	r3, #3
 8013222:	89a2      	ldrh	r2, [r4, #12]
 8013224:	439a      	bics	r2, r3
 8013226:	3b02      	subs	r3, #2
 8013228:	4313      	orrs	r3, r2
 801322a:	81a3      	strh	r3, [r4, #12]
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	9a01      	ldr	r2, [sp, #4]
 8013230:	4313      	orrs	r3, r2
 8013232:	81a3      	strh	r3, [r4, #12]
 8013234:	e7cc      	b.n	80131d0 <__smakebuf_r+0x1c>
	...

08013238 <_fstat_r>:
 8013238:	2300      	movs	r3, #0
 801323a:	b570      	push	{r4, r5, r6, lr}
 801323c:	4d06      	ldr	r5, [pc, #24]	@ (8013258 <_fstat_r+0x20>)
 801323e:	0004      	movs	r4, r0
 8013240:	0008      	movs	r0, r1
 8013242:	0011      	movs	r1, r2
 8013244:	602b      	str	r3, [r5, #0]
 8013246:	f7f1 f817 	bl	8004278 <_fstat>
 801324a:	1c43      	adds	r3, r0, #1
 801324c:	d103      	bne.n	8013256 <_fstat_r+0x1e>
 801324e:	682b      	ldr	r3, [r5, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d000      	beq.n	8013256 <_fstat_r+0x1e>
 8013254:	6023      	str	r3, [r4, #0]
 8013256:	bd70      	pop	{r4, r5, r6, pc}
 8013258:	20002298 	.word	0x20002298

0801325c <_isatty_r>:
 801325c:	2300      	movs	r3, #0
 801325e:	b570      	push	{r4, r5, r6, lr}
 8013260:	4d06      	ldr	r5, [pc, #24]	@ (801327c <_isatty_r+0x20>)
 8013262:	0004      	movs	r4, r0
 8013264:	0008      	movs	r0, r1
 8013266:	602b      	str	r3, [r5, #0]
 8013268:	f7f1 f814 	bl	8004294 <_isatty>
 801326c:	1c43      	adds	r3, r0, #1
 801326e:	d103      	bne.n	8013278 <_isatty_r+0x1c>
 8013270:	682b      	ldr	r3, [r5, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d000      	beq.n	8013278 <_isatty_r+0x1c>
 8013276:	6023      	str	r3, [r4, #0]
 8013278:	bd70      	pop	{r4, r5, r6, pc}
 801327a:	46c0      	nop			@ (mov r8, r8)
 801327c:	20002298 	.word	0x20002298

08013280 <_init>:
 8013280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013282:	46c0      	nop			@ (mov r8, r8)
 8013284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013286:	bc08      	pop	{r3}
 8013288:	469e      	mov	lr, r3
 801328a:	4770      	bx	lr

0801328c <_fini>:
 801328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801328e:	46c0      	nop			@ (mov r8, r8)
 8013290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013292:	bc08      	pop	{r3}
 8013294:	469e      	mov	lr, r3
 8013296:	4770      	bx	lr
