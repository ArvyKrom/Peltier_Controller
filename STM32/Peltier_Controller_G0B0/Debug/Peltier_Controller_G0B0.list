
Peltier_Controller_G0B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a64  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08012b20  08012b20  00013b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131ac  080131ac  00015358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080131ac  080131ac  00015358  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080131ac  080131ac  00015358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131ac  080131ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131b0  080131b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  080131b4  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f50  20000358  0801350c  00015358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022a8  0801350c  000162a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e753  00000000  00000000  00015380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c9c  00000000  00000000  00033ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00038770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001550  00000000  00000000  0003a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb2f  00000000  00000000  0003b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024149  00000000  00000000  0005b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3c40  00000000  00000000  0007f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077f0  00000000  00000000  00133184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0013a974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000358 	.word	0x20000358
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012b04 	.word	0x08012b04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000035c 	.word	0x2000035c
 80000fc:	08012b04 	.word	0x08012b04

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f833 	bl	80014a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff77 	bl	8001338 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f825 	bl	80014a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f81b 	bl	80014a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffa1 	bl	80013c0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff97 	bl	80013c0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff73 	bl	80023a0 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fb40 	bl	8001b48 <__aeabi_dsub>
 80004c8:	f001 ff6a 	bl	80023a0 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb3 	bl	8000450 <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d108      	bne.n	8000500 <__aeabi_d2lz+0x24>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f000 f80f 	bl	8000514 <__aeabi_d2ulz>
 80004f6:	0002      	movs	r2, r0
 80004f8:	000b      	movs	r3, r1
 80004fa:	0010      	movs	r0, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	18e9      	adds	r1, r5, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f804 	bl	8000514 <__aeabi_d2ulz>
 800050c:	2300      	movs	r3, #0
 800050e:	4242      	negs	r2, r0
 8000510:	418b      	sbcs	r3, r1
 8000512:	e7f2      	b.n	80004fa <__aeabi_d2lz+0x1e>

08000514 <__aeabi_d2ulz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <__aeabi_d2ulz+0x34>)
 800051a:	000d      	movs	r5, r1
 800051c:	0004      	movs	r4, r0
 800051e:	f001 f82d 	bl	800157c <__aeabi_dmul>
 8000522:	f7ff ffbd 	bl	80004a0 <__aeabi_d2uiz>
 8000526:	0006      	movs	r6, r0
 8000528:	f001 ffa4 	bl	8002474 <__aeabi_ui2d>
 800052c:	2200      	movs	r2, #0
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <__aeabi_d2ulz+0x38>)
 8000530:	f001 f824 	bl	800157c <__aeabi_dmul>
 8000534:	0002      	movs	r2, r0
 8000536:	000b      	movs	r3, r1
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fb04 	bl	8001b48 <__aeabi_dsub>
 8000540:	f7ff ffae 	bl	80004a0 <__aeabi_d2uiz>
 8000544:	0031      	movs	r1, r6
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	3df00000 	.word	0x3df00000
 800054c:	41f00000 	.word	0x41f00000

08000550 <__aeabi_l2d>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0006      	movs	r6, r0
 8000554:	0008      	movs	r0, r1
 8000556:	f001 ff5f 	bl	8002418 <__aeabi_i2d>
 800055a:	2200      	movs	r2, #0
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <__aeabi_l2d+0x28>)
 800055e:	f001 f80d 	bl	800157c <__aeabi_dmul>
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	0030      	movs	r0, r6
 8000568:	f001 ff84 	bl	8002474 <__aeabi_ui2d>
 800056c:	002b      	movs	r3, r5
 800056e:	0022      	movs	r2, r4
 8000570:	f000 f804 	bl	800057c <__aeabi_dadd>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	41f00000 	.word	0x41f00000

0800057c <__aeabi_dadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	464f      	mov	r7, r9
 8000580:	4646      	mov	r6, r8
 8000582:	46d6      	mov	lr, sl
 8000584:	b5c0      	push	{r6, r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	030e      	lsls	r6, r1, #12
 800058e:	004c      	lsls	r4, r1, #1
 8000590:	0fcd      	lsrs	r5, r1, #31
 8000592:	0a71      	lsrs	r1, r6, #9
 8000594:	9e00      	ldr	r6, [sp, #0]
 8000596:	005f      	lsls	r7, r3, #1
 8000598:	0f76      	lsrs	r6, r6, #29
 800059a:	430e      	orrs	r6, r1
 800059c:	9900      	ldr	r1, [sp, #0]
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	00c9      	lsls	r1, r1, #3
 80005a4:	4689      	mov	r9, r1
 80005a6:	0319      	lsls	r1, r3, #12
 80005a8:	0d7b      	lsrs	r3, r7, #21
 80005aa:	4698      	mov	r8, r3
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	0a49      	lsrs	r1, r1, #9
 80005b0:	0fdb      	lsrs	r3, r3, #31
 80005b2:	469c      	mov	ip, r3
 80005b4:	9b00      	ldr	r3, [sp, #0]
 80005b6:	9a00      	ldr	r2, [sp, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	430b      	orrs	r3, r1
 80005bc:	4641      	mov	r1, r8
 80005be:	0d64      	lsrs	r4, r4, #21
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	1a61      	subs	r1, r4, r1
 80005c4:	4565      	cmp	r5, ip
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x4e>
 80005c8:	e0a6      	b.n	8000718 <__aeabi_dadd+0x19c>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	dd72      	ble.n	80006b4 <__aeabi_dadd+0x138>
 80005ce:	4647      	mov	r7, r8
 80005d0:	2f00      	cmp	r7, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x5a>
 80005d4:	e0dd      	b.n	8000792 <__aeabi_dadd+0x216>
 80005d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000908 <__aeabi_dadd+0x38c>)
 80005d8:	42bc      	cmp	r4, r7
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x62>
 80005dc:	e19a      	b.n	8000914 <__aeabi_dadd+0x398>
 80005de:	2701      	movs	r7, #1
 80005e0:	2938      	cmp	r1, #56	@ 0x38
 80005e2:	dc17      	bgt.n	8000614 <__aeabi_dadd+0x98>
 80005e4:	2780      	movs	r7, #128	@ 0x80
 80005e6:	043f      	lsls	r7, r7, #16
 80005e8:	433b      	orrs	r3, r7
 80005ea:	291f      	cmp	r1, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x74>
 80005ee:	e1dd      	b.n	80009ac <__aeabi_dadd+0x430>
 80005f0:	2720      	movs	r7, #32
 80005f2:	1a78      	subs	r0, r7, r1
 80005f4:	001f      	movs	r7, r3
 80005f6:	4087      	lsls	r7, r0
 80005f8:	46ba      	mov	sl, r7
 80005fa:	0017      	movs	r7, r2
 80005fc:	40cf      	lsrs	r7, r1
 80005fe:	4684      	mov	ip, r0
 8000600:	0038      	movs	r0, r7
 8000602:	4657      	mov	r7, sl
 8000604:	4307      	orrs	r7, r0
 8000606:	4660      	mov	r0, ip
 8000608:	4082      	lsls	r2, r0
 800060a:	40cb      	lsrs	r3, r1
 800060c:	1e50      	subs	r0, r2, #1
 800060e:	4182      	sbcs	r2, r0
 8000610:	1af6      	subs	r6, r6, r3
 8000612:	4317      	orrs	r7, r2
 8000614:	464b      	mov	r3, r9
 8000616:	1bdf      	subs	r7, r3, r7
 8000618:	45b9      	cmp	r9, r7
 800061a:	4180      	sbcs	r0, r0
 800061c:	4240      	negs	r0, r0
 800061e:	1a36      	subs	r6, r6, r0
 8000620:	0233      	lsls	r3, r6, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0xaa>
 8000624:	e0ff      	b.n	8000826 <__aeabi_dadd+0x2aa>
 8000626:	0276      	lsls	r6, r6, #9
 8000628:	0a76      	lsrs	r6, r6, #9
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0xb4>
 800062e:	e13c      	b.n	80008aa <__aeabi_dadd+0x32e>
 8000630:	0030      	movs	r0, r6
 8000632:	f001 ff43 	bl	80024bc <__clzsi2>
 8000636:	0003      	movs	r3, r0
 8000638:	3b08      	subs	r3, #8
 800063a:	2120      	movs	r1, #32
 800063c:	0038      	movs	r0, r7
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	40d0      	lsrs	r0, r2
 8000642:	409e      	lsls	r6, r3
 8000644:	0002      	movs	r2, r0
 8000646:	409f      	lsls	r7, r3
 8000648:	4332      	orrs	r2, r6
 800064a:	429c      	cmp	r4, r3
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0xd4>
 800064e:	e1a6      	b.n	800099e <__aeabi_dadd+0x422>
 8000650:	1b18      	subs	r0, r3, r4
 8000652:	3001      	adds	r0, #1
 8000654:	1a09      	subs	r1, r1, r0
 8000656:	003e      	movs	r6, r7
 8000658:	408f      	lsls	r7, r1
 800065a:	40c6      	lsrs	r6, r0
 800065c:	1e7b      	subs	r3, r7, #1
 800065e:	419f      	sbcs	r7, r3
 8000660:	0013      	movs	r3, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	4337      	orrs	r7, r6
 8000666:	431f      	orrs	r7, r3
 8000668:	40c2      	lsrs	r2, r0
 800066a:	003b      	movs	r3, r7
 800066c:	0016      	movs	r6, r2
 800066e:	2400      	movs	r4, #0
 8000670:	4313      	orrs	r3, r2
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0xfa>
 8000674:	e1df      	b.n	8000a36 <__aeabi_dadd+0x4ba>
 8000676:	077b      	lsls	r3, r7, #29
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x100>
 800067a:	e332      	b.n	8000ce2 <__aeabi_dadd+0x766>
 800067c:	230f      	movs	r3, #15
 800067e:	003a      	movs	r2, r7
 8000680:	403b      	ands	r3, r7
 8000682:	2b04      	cmp	r3, #4
 8000684:	d004      	beq.n	8000690 <__aeabi_dadd+0x114>
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	42ba      	cmp	r2, r7
 800068a:	41bf      	sbcs	r7, r7
 800068c:	427f      	negs	r7, r7
 800068e:	19f6      	adds	r6, r6, r7
 8000690:	0233      	lsls	r3, r6, #8
 8000692:	d400      	bmi.n	8000696 <__aeabi_dadd+0x11a>
 8000694:	e323      	b.n	8000cde <__aeabi_dadd+0x762>
 8000696:	4b9c      	ldr	r3, [pc, #624]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000698:	3401      	adds	r4, #1
 800069a:	429c      	cmp	r4, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x124>
 800069e:	e0b4      	b.n	800080a <__aeabi_dadd+0x28e>
 80006a0:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <__aeabi_dadd+0x390>)
 80006a2:	0564      	lsls	r4, r4, #21
 80006a4:	401e      	ands	r6, r3
 80006a6:	0d64      	lsrs	r4, r4, #21
 80006a8:	0777      	lsls	r7, r6, #29
 80006aa:	08d2      	lsrs	r2, r2, #3
 80006ac:	0276      	lsls	r6, r6, #9
 80006ae:	4317      	orrs	r7, r2
 80006b0:	0b36      	lsrs	r6, r6, #12
 80006b2:	e0ac      	b.n	800080e <__aeabi_dadd+0x292>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x13e>
 80006b8:	e07e      	b.n	80007b8 <__aeabi_dadd+0x23c>
 80006ba:	4641      	mov	r1, r8
 80006bc:	1b09      	subs	r1, r1, r4
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x148>
 80006c2:	e160      	b.n	8000986 <__aeabi_dadd+0x40a>
 80006c4:	0034      	movs	r4, r6
 80006c6:	4648      	mov	r0, r9
 80006c8:	4304      	orrs	r4, r0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x152>
 80006cc:	e1c9      	b.n	8000a62 <__aeabi_dadd+0x4e6>
 80006ce:	1e4c      	subs	r4, r1, #1
 80006d0:	2901      	cmp	r1, #1
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x15a>
 80006d4:	e22e      	b.n	8000b34 <__aeabi_dadd+0x5b8>
 80006d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000908 <__aeabi_dadd+0x38c>)
 80006d8:	42a9      	cmp	r1, r5
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x162>
 80006dc:	e224      	b.n	8000b28 <__aeabi_dadd+0x5ac>
 80006de:	2701      	movs	r7, #1
 80006e0:	2c38      	cmp	r4, #56	@ 0x38
 80006e2:	dc11      	bgt.n	8000708 <__aeabi_dadd+0x18c>
 80006e4:	0021      	movs	r1, r4
 80006e6:	291f      	cmp	r1, #31
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x170>
 80006ea:	e20b      	b.n	8000b04 <__aeabi_dadd+0x588>
 80006ec:	2420      	movs	r4, #32
 80006ee:	0037      	movs	r7, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	1a64      	subs	r4, r4, r1
 80006f4:	40a7      	lsls	r7, r4
 80006f6:	40c8      	lsrs	r0, r1
 80006f8:	4307      	orrs	r7, r0
 80006fa:	4648      	mov	r0, r9
 80006fc:	40a0      	lsls	r0, r4
 80006fe:	40ce      	lsrs	r6, r1
 8000700:	1e44      	subs	r4, r0, #1
 8000702:	41a0      	sbcs	r0, r4
 8000704:	1b9b      	subs	r3, r3, r6
 8000706:	4307      	orrs	r7, r0
 8000708:	1bd7      	subs	r7, r2, r7
 800070a:	42ba      	cmp	r2, r7
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	4665      	mov	r5, ip
 8000712:	4644      	mov	r4, r8
 8000714:	1a9e      	subs	r6, r3, r2
 8000716:	e783      	b.n	8000620 <__aeabi_dadd+0xa4>
 8000718:	2900      	cmp	r1, #0
 800071a:	dc00      	bgt.n	800071e <__aeabi_dadd+0x1a2>
 800071c:	e09c      	b.n	8000858 <__aeabi_dadd+0x2dc>
 800071e:	4647      	mov	r7, r8
 8000720:	2f00      	cmp	r7, #0
 8000722:	d167      	bne.n	80007f4 <__aeabi_dadd+0x278>
 8000724:	001f      	movs	r7, r3
 8000726:	4317      	orrs	r7, r2
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x1b0>
 800072a:	e0e4      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800072c:	1e48      	subs	r0, r1, #1
 800072e:	2901      	cmp	r1, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b8>
 8000732:	e19b      	b.n	8000a6c <__aeabi_dadd+0x4f0>
 8000734:	4f74      	ldr	r7, [pc, #464]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000736:	42b9      	cmp	r1, r7
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1c0>
 800073a:	e0eb      	b.n	8000914 <__aeabi_dadd+0x398>
 800073c:	2701      	movs	r7, #1
 800073e:	0001      	movs	r1, r0
 8000740:	2838      	cmp	r0, #56	@ 0x38
 8000742:	dc11      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000744:	291f      	cmp	r1, #31
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0x1ce>
 8000748:	e1c7      	b.n	8000ada <__aeabi_dadd+0x55e>
 800074a:	2720      	movs	r7, #32
 800074c:	1a78      	subs	r0, r7, r1
 800074e:	001f      	movs	r7, r3
 8000750:	4684      	mov	ip, r0
 8000752:	4087      	lsls	r7, r0
 8000754:	0010      	movs	r0, r2
 8000756:	40c8      	lsrs	r0, r1
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	18f6      	adds	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	444f      	add	r7, r9
 800076a:	454f      	cmp	r7, r9
 800076c:	4180      	sbcs	r0, r0
 800076e:	4240      	negs	r0, r0
 8000770:	1836      	adds	r6, r6, r0
 8000772:	0233      	lsls	r3, r6, #8
 8000774:	d557      	bpl.n	8000826 <__aeabi_dadd+0x2aa>
 8000776:	4b64      	ldr	r3, [pc, #400]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000778:	3401      	adds	r4, #1
 800077a:	429c      	cmp	r4, r3
 800077c:	d045      	beq.n	800080a <__aeabi_dadd+0x28e>
 800077e:	2101      	movs	r1, #1
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <__aeabi_dadd+0x390>)
 8000782:	087a      	lsrs	r2, r7, #1
 8000784:	401e      	ands	r6, r3
 8000786:	4039      	ands	r1, r7
 8000788:	430a      	orrs	r2, r1
 800078a:	07f7      	lsls	r7, r6, #31
 800078c:	4317      	orrs	r7, r2
 800078e:	0876      	lsrs	r6, r6, #1
 8000790:	e771      	b.n	8000676 <__aeabi_dadd+0xfa>
 8000792:	001f      	movs	r7, r3
 8000794:	4317      	orrs	r7, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x21e>
 8000798:	e0ad      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800079a:	1e4f      	subs	r7, r1, #1
 800079c:	46bc      	mov	ip, r7
 800079e:	2901      	cmp	r1, #1
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x228>
 80007a2:	e182      	b.n	8000aaa <__aeabi_dadd+0x52e>
 80007a4:	4f58      	ldr	r7, [pc, #352]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007a6:	42b9      	cmp	r1, r7
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x230>
 80007aa:	e190      	b.n	8000ace <__aeabi_dadd+0x552>
 80007ac:	4661      	mov	r1, ip
 80007ae:	2701      	movs	r7, #1
 80007b0:	2938      	cmp	r1, #56	@ 0x38
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x23a>
 80007b4:	e72e      	b.n	8000614 <__aeabi_dadd+0x98>
 80007b6:	e718      	b.n	80005ea <__aeabi_dadd+0x6e>
 80007b8:	4f55      	ldr	r7, [pc, #340]	@ (8000910 <__aeabi_dadd+0x394>)
 80007ba:	1c61      	adds	r1, r4, #1
 80007bc:	4239      	tst	r1, r7
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x246>
 80007c0:	e0d0      	b.n	8000964 <__aeabi_dadd+0x3e8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	4648      	mov	r0, r9
 80007c6:	001f      	movs	r7, r3
 80007c8:	4301      	orrs	r1, r0
 80007ca:	4317      	orrs	r7, r2
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x256>
 80007d0:	e13d      	b.n	8000a4e <__aeabi_dadd+0x4d2>
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x25c>
 80007d6:	e1bc      	b.n	8000b52 <__aeabi_dadd+0x5d6>
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d000      	beq.n	80007de <__aeabi_dadd+0x262>
 80007dc:	e1bf      	b.n	8000b5e <__aeabi_dadd+0x5e2>
 80007de:	464b      	mov	r3, r9
 80007e0:	2100      	movs	r1, #0
 80007e2:	08d8      	lsrs	r0, r3, #3
 80007e4:	0777      	lsls	r7, r6, #29
 80007e6:	4307      	orrs	r7, r0
 80007e8:	08f0      	lsrs	r0, r6, #3
 80007ea:	0306      	lsls	r6, r0, #12
 80007ec:	054c      	lsls	r4, r1, #21
 80007ee:	0b36      	lsrs	r6, r6, #12
 80007f0:	0d64      	lsrs	r4, r4, #21
 80007f2:	e00c      	b.n	800080e <__aeabi_dadd+0x292>
 80007f4:	4f44      	ldr	r7, [pc, #272]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007f6:	42bc      	cmp	r4, r7
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x280>
 80007fa:	e08b      	b.n	8000914 <__aeabi_dadd+0x398>
 80007fc:	2701      	movs	r7, #1
 80007fe:	2938      	cmp	r1, #56	@ 0x38
 8000800:	dcb2      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000802:	2780      	movs	r7, #128	@ 0x80
 8000804:	043f      	lsls	r7, r7, #16
 8000806:	433b      	orrs	r3, r7
 8000808:	e79c      	b.n	8000744 <__aeabi_dadd+0x1c8>
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
 800080e:	0524      	lsls	r4, r4, #20
 8000810:	4334      	orrs	r4, r6
 8000812:	07ed      	lsls	r5, r5, #31
 8000814:	432c      	orrs	r4, r5
 8000816:	0038      	movs	r0, r7
 8000818:	0021      	movs	r1, r4
 800081a:	b002      	add	sp, #8
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	077b      	lsls	r3, r7, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 800082a:	230f      	movs	r3, #15
 800082c:	403b      	ands	r3, r7
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 8000832:	e728      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000834:	08f8      	lsrs	r0, r7, #3
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000838:	0777      	lsls	r7, r6, #29
 800083a:	4307      	orrs	r7, r0
 800083c:	08f0      	lsrs	r0, r6, #3
 800083e:	429c      	cmp	r4, r3
 8000840:	d000      	beq.n	8000844 <__aeabi_dadd+0x2c8>
 8000842:	e24a      	b.n	8000cda <__aeabi_dadd+0x75e>
 8000844:	003b      	movs	r3, r7
 8000846:	4303      	orrs	r3, r0
 8000848:	d059      	beq.n	80008fe <__aeabi_dadd+0x382>
 800084a:	2680      	movs	r6, #128	@ 0x80
 800084c:	0336      	lsls	r6, r6, #12
 800084e:	4306      	orrs	r6, r0
 8000850:	0336      	lsls	r6, r6, #12
 8000852:	4c2d      	ldr	r4, [pc, #180]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000854:	0b36      	lsrs	r6, r6, #12
 8000856:	e7da      	b.n	800080e <__aeabi_dadd+0x292>
 8000858:	2900      	cmp	r1, #0
 800085a:	d061      	beq.n	8000920 <__aeabi_dadd+0x3a4>
 800085c:	4641      	mov	r1, r8
 800085e:	1b09      	subs	r1, r1, r4
 8000860:	2c00      	cmp	r4, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x2ea>
 8000864:	e0b9      	b.n	80009da <__aeabi_dadd+0x45e>
 8000866:	4c28      	ldr	r4, [pc, #160]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000868:	45a0      	cmp	r8, r4
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2f2>
 800086c:	e1a5      	b.n	8000bba <__aeabi_dadd+0x63e>
 800086e:	2701      	movs	r7, #1
 8000870:	2938      	cmp	r1, #56	@ 0x38
 8000872:	dc13      	bgt.n	800089c <__aeabi_dadd+0x320>
 8000874:	2480      	movs	r4, #128	@ 0x80
 8000876:	0424      	lsls	r4, r4, #16
 8000878:	4326      	orrs	r6, r4
 800087a:	291f      	cmp	r1, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x304>
 800087e:	e1c8      	b.n	8000c12 <__aeabi_dadd+0x696>
 8000880:	2420      	movs	r4, #32
 8000882:	0037      	movs	r7, r6
 8000884:	4648      	mov	r0, r9
 8000886:	1a64      	subs	r4, r4, r1
 8000888:	40a7      	lsls	r7, r4
 800088a:	40c8      	lsrs	r0, r1
 800088c:	4307      	orrs	r7, r0
 800088e:	4648      	mov	r0, r9
 8000890:	40a0      	lsls	r0, r4
 8000892:	40ce      	lsrs	r6, r1
 8000894:	1e44      	subs	r4, r0, #1
 8000896:	41a0      	sbcs	r0, r4
 8000898:	199b      	adds	r3, r3, r6
 800089a:	4307      	orrs	r7, r0
 800089c:	18bf      	adds	r7, r7, r2
 800089e:	4297      	cmp	r7, r2
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4252      	negs	r2, r2
 80008a4:	4644      	mov	r4, r8
 80008a6:	18d6      	adds	r6, r2, r3
 80008a8:	e763      	b.n	8000772 <__aeabi_dadd+0x1f6>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fe06 	bl	80024bc <__clzsi2>
 80008b0:	0003      	movs	r3, r0
 80008b2:	3318      	adds	r3, #24
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x33e>
 80008b8:	e6bf      	b.n	800063a <__aeabi_dadd+0xbe>
 80008ba:	003a      	movs	r2, r7
 80008bc:	3808      	subs	r0, #8
 80008be:	4082      	lsls	r2, r0
 80008c0:	429c      	cmp	r4, r3
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x34a>
 80008c4:	e083      	b.n	80009ce <__aeabi_dadd+0x452>
 80008c6:	1b1b      	subs	r3, r3, r4
 80008c8:	1c58      	adds	r0, r3, #1
 80008ca:	281f      	cmp	r0, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x354>
 80008ce:	e1b4      	b.n	8000c3a <__aeabi_dadd+0x6be>
 80008d0:	0017      	movs	r7, r2
 80008d2:	3b1f      	subs	r3, #31
 80008d4:	40df      	lsrs	r7, r3
 80008d6:	2820      	cmp	r0, #32
 80008d8:	d005      	beq.n	80008e6 <__aeabi_dadd+0x36a>
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	409a      	lsls	r2, r3
 80008e0:	1e53      	subs	r3, r2, #1
 80008e2:	419a      	sbcs	r2, r3
 80008e4:	4317      	orrs	r7, r2
 80008e6:	2400      	movs	r4, #0
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d00a      	beq.n	8000902 <__aeabi_dadd+0x386>
 80008ec:	077b      	lsls	r3, r7, #29
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x376>
 80008f0:	e6c4      	b.n	800067c <__aeabi_dadd+0x100>
 80008f2:	0026      	movs	r6, r4
 80008f4:	e79e      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80008f6:	464b      	mov	r3, r9
 80008f8:	000c      	movs	r4, r1
 80008fa:	08d8      	lsrs	r0, r3, #3
 80008fc:	e79b      	b.n	8000836 <__aeabi_dadd+0x2ba>
 80008fe:	2700      	movs	r7, #0
 8000900:	4c01      	ldr	r4, [pc, #4]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000902:	2600      	movs	r6, #0
 8000904:	e783      	b.n	800080e <__aeabi_dadd+0x292>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff
 8000910:	000007fe 	.word	0x000007fe
 8000914:	464b      	mov	r3, r9
 8000916:	0777      	lsls	r7, r6, #29
 8000918:	08d8      	lsrs	r0, r3, #3
 800091a:	4307      	orrs	r7, r0
 800091c:	08f0      	lsrs	r0, r6, #3
 800091e:	e791      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000920:	4fcd      	ldr	r7, [pc, #820]	@ (8000c58 <__aeabi_dadd+0x6dc>)
 8000922:	1c61      	adds	r1, r4, #1
 8000924:	4239      	tst	r1, r7
 8000926:	d16b      	bne.n	8000a00 <__aeabi_dadd+0x484>
 8000928:	0031      	movs	r1, r6
 800092a:	4648      	mov	r0, r9
 800092c:	4301      	orrs	r1, r0
 800092e:	2c00      	cmp	r4, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x3b8>
 8000932:	e14b      	b.n	8000bcc <__aeabi_dadd+0x650>
 8000934:	001f      	movs	r7, r3
 8000936:	4317      	orrs	r7, r2
 8000938:	2900      	cmp	r1, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x3c2>
 800093c:	e181      	b.n	8000c42 <__aeabi_dadd+0x6c6>
 800093e:	2f00      	cmp	r7, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x3c8>
 8000942:	e74c      	b.n	80007de <__aeabi_dadd+0x262>
 8000944:	444a      	add	r2, r9
 8000946:	454a      	cmp	r2, r9
 8000948:	4180      	sbcs	r0, r0
 800094a:	18f6      	adds	r6, r6, r3
 800094c:	4240      	negs	r0, r0
 800094e:	1836      	adds	r6, r6, r0
 8000950:	0233      	lsls	r3, r6, #8
 8000952:	d500      	bpl.n	8000956 <__aeabi_dadd+0x3da>
 8000954:	e1b0      	b.n	8000cb8 <__aeabi_dadd+0x73c>
 8000956:	0017      	movs	r7, r2
 8000958:	4691      	mov	r9, r2
 800095a:	4337      	orrs	r7, r6
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x3e4>
 800095e:	e73e      	b.n	80007de <__aeabi_dadd+0x262>
 8000960:	2600      	movs	r6, #0
 8000962:	e754      	b.n	800080e <__aeabi_dadd+0x292>
 8000964:	4649      	mov	r1, r9
 8000966:	1a89      	subs	r1, r1, r2
 8000968:	4688      	mov	r8, r1
 800096a:	45c1      	cmp	r9, r8
 800096c:	41bf      	sbcs	r7, r7
 800096e:	1af1      	subs	r1, r6, r3
 8000970:	427f      	negs	r7, r7
 8000972:	1bc9      	subs	r1, r1, r7
 8000974:	020f      	lsls	r7, r1, #8
 8000976:	d461      	bmi.n	8000a3c <__aeabi_dadd+0x4c0>
 8000978:	4647      	mov	r7, r8
 800097a:	430f      	orrs	r7, r1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x404>
 800097e:	e0bd      	b.n	8000afc <__aeabi_dadd+0x580>
 8000980:	000e      	movs	r6, r1
 8000982:	4647      	mov	r7, r8
 8000984:	e651      	b.n	800062a <__aeabi_dadd+0xae>
 8000986:	4cb5      	ldr	r4, [pc, #724]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000988:	45a0      	cmp	r8, r4
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x412>
 800098c:	e100      	b.n	8000b90 <__aeabi_dadd+0x614>
 800098e:	2701      	movs	r7, #1
 8000990:	2938      	cmp	r1, #56	@ 0x38
 8000992:	dd00      	ble.n	8000996 <__aeabi_dadd+0x41a>
 8000994:	e6b8      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	0424      	lsls	r4, r4, #16
 800099a:	4326      	orrs	r6, r4
 800099c:	e6a3      	b.n	80006e6 <__aeabi_dadd+0x16a>
 800099e:	4eb0      	ldr	r6, [pc, #704]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009a0:	1ae4      	subs	r4, r4, r3
 80009a2:	4016      	ands	r6, r2
 80009a4:	077b      	lsls	r3, r7, #29
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x42e>
 80009a8:	e73f      	b.n	800082a <__aeabi_dadd+0x2ae>
 80009aa:	e743      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80009ac:	000f      	movs	r7, r1
 80009ae:	0018      	movs	r0, r3
 80009b0:	3f20      	subs	r7, #32
 80009b2:	40f8      	lsrs	r0, r7
 80009b4:	4684      	mov	ip, r0
 80009b6:	2920      	cmp	r1, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x446>
 80009ba:	2740      	movs	r7, #64	@ 0x40
 80009bc:	1a79      	subs	r1, r7, r1
 80009be:	408b      	lsls	r3, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	1e53      	subs	r3, r2, #1
 80009c4:	419a      	sbcs	r2, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	0017      	movs	r7, r2
 80009ca:	431f      	orrs	r7, r3
 80009cc:	e622      	b.n	8000614 <__aeabi_dadd+0x98>
 80009ce:	48a4      	ldr	r0, [pc, #656]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009d0:	1ae1      	subs	r1, r4, r3
 80009d2:	4010      	ands	r0, r2
 80009d4:	0747      	lsls	r7, r0, #29
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	e707      	b.n	80007ea <__aeabi_dadd+0x26e>
 80009da:	0034      	movs	r4, r6
 80009dc:	4648      	mov	r0, r9
 80009de:	4304      	orrs	r4, r0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x468>
 80009e2:	e0fa      	b.n	8000bda <__aeabi_dadd+0x65e>
 80009e4:	1e4c      	subs	r4, r1, #1
 80009e6:	2901      	cmp	r1, #1
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x470>
 80009ea:	e0d7      	b.n	8000b9c <__aeabi_dadd+0x620>
 80009ec:	4f9b      	ldr	r7, [pc, #620]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 80009ee:	42b9      	cmp	r1, r7
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x478>
 80009f2:	e0e2      	b.n	8000bba <__aeabi_dadd+0x63e>
 80009f4:	2701      	movs	r7, #1
 80009f6:	2c38      	cmp	r4, #56	@ 0x38
 80009f8:	dd00      	ble.n	80009fc <__aeabi_dadd+0x480>
 80009fa:	e74f      	b.n	800089c <__aeabi_dadd+0x320>
 80009fc:	0021      	movs	r1, r4
 80009fe:	e73c      	b.n	800087a <__aeabi_dadd+0x2fe>
 8000a00:	4c96      	ldr	r4, [pc, #600]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x48c>
 8000a06:	e0dd      	b.n	8000bc4 <__aeabi_dadd+0x648>
 8000a08:	444a      	add	r2, r9
 8000a0a:	454a      	cmp	r2, r9
 8000a0c:	4180      	sbcs	r0, r0
 8000a0e:	18f3      	adds	r3, r6, r3
 8000a10:	4240      	negs	r0, r0
 8000a12:	1818      	adds	r0, r3, r0
 8000a14:	07c7      	lsls	r7, r0, #31
 8000a16:	0852      	lsrs	r2, r2, #1
 8000a18:	4317      	orrs	r7, r2
 8000a1a:	0846      	lsrs	r6, r0, #1
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	d005      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a20:	220f      	movs	r2, #15
 8000a22:	000c      	movs	r4, r1
 8000a24:	403a      	ands	r2, r7
 8000a26:	2a04      	cmp	r2, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a2a:	e62c      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000a2c:	0776      	lsls	r6, r6, #29
 8000a2e:	08ff      	lsrs	r7, r7, #3
 8000a30:	4337      	orrs	r7, r6
 8000a32:	0900      	lsrs	r0, r0, #4
 8000a34:	e6d9      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000a36:	2700      	movs	r7, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e6e8      	b.n	800080e <__aeabi_dadd+0x292>
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	1a57      	subs	r7, r2, r1
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	1b9e      	subs	r6, r3, r6
 8000a46:	4252      	negs	r2, r2
 8000a48:	4665      	mov	r5, ip
 8000a4a:	1ab6      	subs	r6, r6, r2
 8000a4c:	e5ed      	b.n	800062a <__aeabi_dadd+0xae>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x4d8>
 8000a52:	e0c6      	b.n	8000be2 <__aeabi_dadd+0x666>
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d167      	bne.n	8000b28 <__aeabi_dadd+0x5ac>
 8000a58:	2680      	movs	r6, #128	@ 0x80
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a5e:	0336      	lsls	r6, r6, #12
 8000a60:	e6d5      	b.n	800080e <__aeabi_dadd+0x292>
 8000a62:	4665      	mov	r5, ip
 8000a64:	000c      	movs	r4, r1
 8000a66:	001e      	movs	r6, r3
 8000a68:	08d0      	lsrs	r0, r2, #3
 8000a6a:	e6e4      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000a6c:	444a      	add	r2, r9
 8000a6e:	454a      	cmp	r2, r9
 8000a70:	4180      	sbcs	r0, r0
 8000a72:	18f3      	adds	r3, r6, r3
 8000a74:	4240      	negs	r0, r0
 8000a76:	1818      	adds	r0, r3, r0
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0203      	lsls	r3, r0, #8
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_dadd+0x504>
 8000a7e:	e096      	b.n	8000bae <__aeabi_dadd+0x632>
 8000a80:	4b77      	ldr	r3, [pc, #476]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 8000a82:	0849      	lsrs	r1, r1, #1
 8000a84:	4018      	ands	r0, r3
 8000a86:	07c3      	lsls	r3, r0, #31
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	0844      	lsrs	r4, r0, #1
 8000a8c:	0749      	lsls	r1, r1, #29
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x516>
 8000a90:	e129      	b.n	8000ce6 <__aeabi_dadd+0x76a>
 8000a92:	220f      	movs	r2, #15
 8000a94:	401a      	ands	r2, r3
 8000a96:	2a04      	cmp	r2, #4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x520>
 8000a9a:	e0ea      	b.n	8000c72 <__aeabi_dadd+0x6f6>
 8000a9c:	1d1f      	adds	r7, r3, #4
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	41b6      	sbcs	r6, r6
 8000aa2:	4276      	negs	r6, r6
 8000aa4:	1936      	adds	r6, r6, r4
 8000aa6:	2402      	movs	r4, #2
 8000aa8:	e6c4      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000aaa:	4649      	mov	r1, r9
 8000aac:	1a8f      	subs	r7, r1, r2
 8000aae:	45b9      	cmp	r9, r7
 8000ab0:	4180      	sbcs	r0, r0
 8000ab2:	1af6      	subs	r6, r6, r3
 8000ab4:	4240      	negs	r0, r0
 8000ab6:	1a36      	subs	r6, r6, r0
 8000ab8:	0233      	lsls	r3, r6, #8
 8000aba:	d406      	bmi.n	8000aca <__aeabi_dadd+0x54e>
 8000abc:	0773      	lsls	r3, r6, #29
 8000abe:	08ff      	lsrs	r7, r7, #3
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	431f      	orrs	r7, r3
 8000ac4:	08f0      	lsrs	r0, r6, #3
 8000ac6:	e690      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000ac8:	4665      	mov	r5, ip
 8000aca:	2401      	movs	r4, #1
 8000acc:	e5ab      	b.n	8000626 <__aeabi_dadd+0xaa>
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0777      	lsls	r7, r6, #29
 8000ad2:	08d8      	lsrs	r0, r3, #3
 8000ad4:	4307      	orrs	r7, r0
 8000ad6:	08f0      	lsrs	r0, r6, #3
 8000ad8:	e6b4      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000ada:	000f      	movs	r7, r1
 8000adc:	0018      	movs	r0, r3
 8000ade:	3f20      	subs	r7, #32
 8000ae0:	40f8      	lsrs	r0, r7
 8000ae2:	4684      	mov	ip, r0
 8000ae4:	2920      	cmp	r1, #32
 8000ae6:	d003      	beq.n	8000af0 <__aeabi_dadd+0x574>
 8000ae8:	2740      	movs	r7, #64	@ 0x40
 8000aea:	1a79      	subs	r1, r7, r1
 8000aec:	408b      	lsls	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	1e53      	subs	r3, r2, #1
 8000af2:	419a      	sbcs	r2, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	0017      	movs	r7, r2
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e635      	b.n	8000768 <__aeabi_dadd+0x1ec>
 8000afc:	2500      	movs	r5, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	2600      	movs	r6, #0
 8000b02:	e684      	b.n	800080e <__aeabi_dadd+0x292>
 8000b04:	000c      	movs	r4, r1
 8000b06:	0035      	movs	r5, r6
 8000b08:	3c20      	subs	r4, #32
 8000b0a:	40e5      	lsrs	r5, r4
 8000b0c:	2920      	cmp	r1, #32
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dadd+0x5a0>
 8000b10:	2440      	movs	r4, #64	@ 0x40
 8000b12:	1a61      	subs	r1, r4, r1
 8000b14:	408e      	lsls	r6, r1
 8000b16:	4649      	mov	r1, r9
 8000b18:	4331      	orrs	r1, r6
 8000b1a:	4689      	mov	r9, r1
 8000b1c:	4648      	mov	r0, r9
 8000b1e:	1e41      	subs	r1, r0, #1
 8000b20:	4188      	sbcs	r0, r1
 8000b22:	0007      	movs	r7, r0
 8000b24:	432f      	orrs	r7, r5
 8000b26:	e5ef      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000b28:	08d2      	lsrs	r2, r2, #3
 8000b2a:	075f      	lsls	r7, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	e687      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b34:	1a17      	subs	r7, r2, r0
 8000b36:	42ba      	cmp	r2, r7
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	1b9e      	subs	r6, r3, r6
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	0233      	lsls	r3, r6, #8
 8000b42:	d4c1      	bmi.n	8000ac8 <__aeabi_dadd+0x54c>
 8000b44:	0773      	lsls	r3, r6, #29
 8000b46:	08ff      	lsrs	r7, r7, #3
 8000b48:	4665      	mov	r5, ip
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	431f      	orrs	r7, r3
 8000b4e:	08f0      	lsrs	r0, r6, #3
 8000b50:	e64b      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d07b      	beq.n	8000c4e <__aeabi_dadd+0x6d2>
 8000b56:	4665      	mov	r5, ip
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	e63f      	b.n	80007de <__aeabi_dadd+0x262>
 8000b5e:	1a81      	subs	r1, r0, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	45c1      	cmp	r9, r8
 8000b64:	41a4      	sbcs	r4, r4
 8000b66:	1af1      	subs	r1, r6, r3
 8000b68:	4264      	negs	r4, r4
 8000b6a:	1b09      	subs	r1, r1, r4
 8000b6c:	2480      	movs	r4, #128	@ 0x80
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	4221      	tst	r1, r4
 8000b72:	d077      	beq.n	8000c64 <__aeabi_dadd+0x6e8>
 8000b74:	1a10      	subs	r0, r2, r0
 8000b76:	4282      	cmp	r2, r0
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	1b9e      	subs	r6, r3, r6
 8000b7e:	4252      	negs	r2, r2
 8000b80:	1ab6      	subs	r6, r6, r2
 8000b82:	4337      	orrs	r7, r6
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x60c>
 8000b86:	e0a0      	b.n	8000cca <__aeabi_dadd+0x74e>
 8000b88:	4665      	mov	r5, ip
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e63e      	b.n	800080e <__aeabi_dadd+0x292>
 8000b90:	075f      	lsls	r7, r3, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	4665      	mov	r5, ip
 8000b96:	4317      	orrs	r7, r2
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	e653      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b9c:	1881      	adds	r1, r0, r2
 8000b9e:	4291      	cmp	r1, r2
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	18f0      	adds	r0, r6, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	1880      	adds	r0, r0, r2
 8000ba8:	0203      	lsls	r3, r0, #8
 8000baa:	d500      	bpl.n	8000bae <__aeabi_dadd+0x632>
 8000bac:	e768      	b.n	8000a80 <__aeabi_dadd+0x504>
 8000bae:	0747      	lsls	r7, r0, #29
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	430f      	orrs	r7, r1
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	e617      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	075f      	lsls	r7, r3, #29
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	08d8      	lsrs	r0, r3, #3
 8000bc2:	e63f      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bc4:	000c      	movs	r4, r1
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e620      	b.n	800080e <__aeabi_dadd+0x292>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d156      	bne.n	8000c7e <__aeabi_dadd+0x702>
 8000bd0:	075f      	lsls	r7, r3, #29
 8000bd2:	08d2      	lsrs	r2, r2, #3
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	e634      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	001e      	movs	r6, r3
 8000bde:	08d0      	lsrs	r0, r2, #3
 8000be0:	e629      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000be2:	08c1      	lsrs	r1, r0, #3
 8000be4:	0770      	lsls	r0, r6, #29
 8000be6:	4301      	orrs	r1, r0
 8000be8:	08f0      	lsrs	r0, r6, #3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d062      	beq.n	8000cb4 <__aeabi_dadd+0x738>
 8000bee:	2480      	movs	r4, #128	@ 0x80
 8000bf0:	0324      	lsls	r4, r4, #12
 8000bf2:	4220      	tst	r0, r4
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x68a>
 8000bf6:	08de      	lsrs	r6, r3, #3
 8000bf8:	4226      	tst	r6, r4
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x68a>
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0030      	movs	r0, r6
 8000c00:	08d1      	lsrs	r1, r2, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4319      	orrs	r1, r3
 8000c06:	0f4f      	lsrs	r7, r1, #29
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	077f      	lsls	r7, r7, #29
 8000c0e:	430f      	orrs	r7, r1
 8000c10:	e618      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c12:	000c      	movs	r4, r1
 8000c14:	0030      	movs	r0, r6
 8000c16:	3c20      	subs	r4, #32
 8000c18:	40e0      	lsrs	r0, r4
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2920      	cmp	r1, #32
 8000c1e:	d005      	beq.n	8000c2c <__aeabi_dadd+0x6b0>
 8000c20:	2440      	movs	r4, #64	@ 0x40
 8000c22:	1a61      	subs	r1, r4, r1
 8000c24:	408e      	lsls	r6, r1
 8000c26:	4649      	mov	r1, r9
 8000c28:	4331      	orrs	r1, r6
 8000c2a:	4689      	mov	r9, r1
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1e41      	subs	r1, r0, #1
 8000c30:	4188      	sbcs	r0, r1
 8000c32:	4661      	mov	r1, ip
 8000c34:	0007      	movs	r7, r0
 8000c36:	430f      	orrs	r7, r1
 8000c38:	e630      	b.n	800089c <__aeabi_dadd+0x320>
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	1a09      	subs	r1, r1, r0
 8000c40:	e50e      	b.n	8000660 <__aeabi_dadd+0xe4>
 8000c42:	001e      	movs	r6, r3
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x6ce>
 8000c48:	e522      	b.n	8000690 <__aeabi_dadd+0x114>
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e758      	b.n	8000b00 <__aeabi_dadd+0x584>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	2400      	movs	r4, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	e5db      	b.n	800080e <__aeabi_dadd+0x292>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	000007fe 	.word	0x000007fe
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	ff7fffff 	.word	0xff7fffff
 8000c64:	4647      	mov	r7, r8
 8000c66:	430f      	orrs	r7, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x6f0>
 8000c6a:	e747      	b.n	8000afc <__aeabi_dadd+0x580>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	46c1      	mov	r9, r8
 8000c70:	e5b5      	b.n	80007de <__aeabi_dadd+0x262>
 8000c72:	08df      	lsrs	r7, r3, #3
 8000c74:	0764      	lsls	r4, r4, #29
 8000c76:	2102      	movs	r1, #2
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	0900      	lsrs	r0, r0, #4
 8000c7c:	e5b5      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000c7e:	0019      	movs	r1, r3
 8000c80:	08c0      	lsrs	r0, r0, #3
 8000c82:	0777      	lsls	r7, r6, #29
 8000c84:	4307      	orrs	r7, r0
 8000c86:	4311      	orrs	r1, r2
 8000c88:	08f0      	lsrs	r0, r6, #3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x714>
 8000c8e:	e5d9      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0309      	lsls	r1, r1, #12
 8000c94:	4208      	tst	r0, r1
 8000c96:	d007      	beq.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	420c      	tst	r4, r1
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c9e:	08d2      	lsrs	r2, r2, #3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	0017      	movs	r7, r2
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	0f7b      	lsrs	r3, r7, #29
 8000caa:	00ff      	lsls	r7, r7, #3
 8000cac:	08ff      	lsrs	r7, r7, #3
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	e5c7      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb4:	000f      	movs	r7, r1
 8000cb6:	e5c5      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	4033      	ands	r3, r6
 8000cbe:	075f      	lsls	r7, r3, #29
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	2401      	movs	r4, #1
 8000cc4:	4317      	orrs	r7, r2
 8000cc6:	0b1e      	lsrs	r6, r3, #12
 8000cc8:	e5a1      	b.n	800080e <__aeabi_dadd+0x292>
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d012      	beq.n	8000cf4 <__aeabi_dadd+0x778>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	2401      	movs	r4, #1
 8000cd6:	401e      	ands	r6, r3
 8000cd8:	e4e6      	b.n	80006a8 <__aeabi_dadd+0x12c>
 8000cda:	0021      	movs	r1, r4
 8000cdc:	e585      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cde:	0017      	movs	r7, r2
 8000ce0:	e5a8      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	e4d4      	b.n	8000690 <__aeabi_dadd+0x114>
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	0764      	lsls	r4, r4, #29
 8000cea:	431c      	orrs	r4, r3
 8000cec:	0027      	movs	r7, r4
 8000cee:	2102      	movs	r1, #2
 8000cf0:	0900      	lsrs	r0, r0, #4
 8000cf2:	e57a      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	0777      	lsls	r7, r6, #29
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	4665      	mov	r5, ip
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	08f0      	lsrs	r0, r6, #3
 8000d00:	e573      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	ff7fffff 	.word	0xff7fffff

08000d08 <__aeabi_ddiv>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	46de      	mov	lr, fp
 8000d0c:	4645      	mov	r5, r8
 8000d0e:	4657      	mov	r7, sl
 8000d10:	464e      	mov	r6, r9
 8000d12:	b5e0      	push	{r5, r6, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	030b      	lsls	r3, r1, #12
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	469b      	mov	fp, r3
 8000d20:	0fca      	lsrs	r2, r1, #31
 8000d22:	004b      	lsls	r3, r1, #1
 8000d24:	0004      	movs	r4, r0
 8000d26:	4680      	mov	r8, r0
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9202      	str	r2, [sp, #8]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x28>
 8000d2e:	e098      	b.n	8000e62 <__aeabi_ddiv+0x15a>
 8000d30:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d037      	beq.n	8000da6 <__aeabi_ddiv+0x9e>
 8000d36:	4659      	mov	r1, fp
 8000d38:	0f42      	lsrs	r2, r0, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	4311      	orrs	r1, r2
 8000d44:	00c2      	lsls	r2, r0, #3
 8000d46:	4690      	mov	r8, r2
 8000d48:	4a77      	ldr	r2, [pc, #476]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	449a      	add	sl, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9e00      	ldr	r6, [sp, #0]
 8000d58:	9f01      	ldr	r7, [sp, #4]
 8000d5a:	033b      	lsls	r3, r7, #12
 8000d5c:	0b1b      	lsrs	r3, r3, #12
 8000d5e:	469b      	mov	fp, r3
 8000d60:	007b      	lsls	r3, r7, #1
 8000d62:	0030      	movs	r0, r6
 8000d64:	0d5b      	lsrs	r3, r3, #21
 8000d66:	0ffd      	lsrs	r5, r7, #31
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <__aeabi_ddiv+0x118>
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d048      	beq.n	8000e04 <__aeabi_ddiv+0xfc>
 8000d72:	4659      	mov	r1, fp
 8000d74:	0f72      	lsrs	r2, r6, #29
 8000d76:	00c9      	lsls	r1, r1, #3
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	468b      	mov	fp, r1
 8000d82:	4969      	ldr	r1, [pc, #420]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d84:	00f2      	lsls	r2, r6, #3
 8000d86:	468c      	mov	ip, r1
 8000d88:	4651      	mov	r1, sl
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	469a      	mov	sl, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	9e02      	ldr	r6, [sp, #8]
 8000d94:	406e      	eors	r6, r5
 8000d96:	b2f6      	uxtb	r6, r6
 8000d98:	2c0f      	cmp	r4, #15
 8000d9a:	d900      	bls.n	8000d9e <__aeabi_ddiv+0x96>
 8000d9c:	e0ce      	b.n	8000f3c <__aeabi_ddiv+0x234>
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <__aeabi_ddiv+0x224>)
 8000da0:	00a4      	lsls	r4, r4, #2
 8000da2:	591b      	ldr	r3, [r3, r4]
 8000da4:	469f      	mov	pc, r3
 8000da6:	465a      	mov	r2, fp
 8000da8:	4302      	orrs	r2, r0
 8000daa:	4691      	mov	r9, r2
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xa8>
 8000dae:	e090      	b.n	8000ed2 <__aeabi_ddiv+0x1ca>
 8000db0:	469a      	mov	sl, r3
 8000db2:	2302      	movs	r3, #2
 8000db4:	4690      	mov	r8, r2
 8000db6:	2408      	movs	r4, #8
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	e7cc      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9d02      	ldr	r5, [sp, #8]
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	2902      	cmp	r1, #2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0xc2>
 8000dc8:	e1de      	b.n	8001188 <__aeabi_ddiv+0x480>
 8000dca:	2903      	cmp	r1, #3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0xc8>
 8000dce:	e08d      	b.n	8000eec <__aeabi_ddiv+0x1e4>
 8000dd0:	2901      	cmp	r1, #1
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_ddiv+0xce>
 8000dd4:	e179      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8000dd6:	002e      	movs	r6, r5
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2400      	movs	r4, #0
 8000dde:	4690      	mov	r8, r2
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07f6      	lsls	r6, r6, #31
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4640      	mov	r0, r8
 8000dea:	0019      	movs	r1, r3
 8000dec:	b007      	add	sp, #28
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000e02:	e7ed      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000e04:	465a      	mov	r2, fp
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <__aeabi_ddiv+0x228>)
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	44e2      	add	sl, ip
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d159      	bne.n	8000ec8 <__aeabi_ddiv+0x1c0>
 8000e14:	2302      	movs	r3, #2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	e7b8      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e20:	465a      	mov	r2, fp
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	d049      	beq.n	8000ebc <__aeabi_ddiv+0x1b4>
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x128>
 8000e2e:	e19c      	b.n	800116a <__aeabi_ddiv+0x462>
 8000e30:	4658      	mov	r0, fp
 8000e32:	f001 fb43 	bl	80024bc <__clzsi2>
 8000e36:	0002      	movs	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3a0b      	subs	r2, #11
 8000e3c:	271d      	movs	r7, #29
 8000e3e:	9e00      	ldr	r6, [sp, #0]
 8000e40:	1aba      	subs	r2, r7, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	4658      	mov	r0, fp
 8000e46:	40d6      	lsrs	r6, r2
 8000e48:	3908      	subs	r1, #8
 8000e4a:	4088      	lsls	r0, r1
 8000e4c:	0032      	movs	r2, r6
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	4693      	mov	fp, r2
 8000e52:	9a00      	ldr	r2, [sp, #0]
 8000e54:	408a      	lsls	r2, r1
 8000e56:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <__aeabi_ddiv+0x22c>)
 8000e58:	4453      	add	r3, sl
 8000e5a:	468a      	mov	sl, r1
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	449a      	add	sl, r3
 8000e60:	e797      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e62:	465b      	mov	r3, fp
 8000e64:	4303      	orrs	r3, r0
 8000e66:	4699      	mov	r9, r3
 8000e68:	d021      	beq.n	8000eae <__aeabi_ddiv+0x1a6>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x16a>
 8000e70:	e169      	b.n	8001146 <__aeabi_ddiv+0x43e>
 8000e72:	4658      	mov	r0, fp
 8000e74:	f001 fb22 	bl	80024bc <__clzsi2>
 8000e78:	230b      	movs	r3, #11
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	469c      	mov	ip, r3
 8000e7e:	0002      	movs	r2, r0
 8000e80:	4484      	add	ip, r0
 8000e82:	4666      	mov	r6, ip
 8000e84:	231d      	movs	r3, #29
 8000e86:	1b9b      	subs	r3, r3, r6
 8000e88:	0026      	movs	r6, r4
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	4658      	mov	r0, fp
 8000e8e:	40de      	lsrs	r6, r3
 8000e90:	3908      	subs	r1, #8
 8000e92:	4088      	lsls	r0, r1
 8000e94:	0033      	movs	r3, r6
 8000e96:	4303      	orrs	r3, r0
 8000e98:	4699      	mov	r9, r3
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <__aeabi_ddiv+0x230>)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	e753      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2404      	movs	r4, #4
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e74c      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e764      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	0032      	movs	r2, r6
 8000ecc:	2103      	movs	r1, #3
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	e75f      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	46d9      	mov	r9, fp
 8000ed8:	240c      	movs	r4, #12
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	e73b      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2480      	movs	r4, #128	@ 0x80
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	e779      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000eec:	2480      	movs	r4, #128	@ 0x80
 8000eee:	465b      	mov	r3, fp
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	0324      	lsls	r4, r4, #12
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	4690      	mov	r8, r2
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	e76f      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f00:	2480      	movs	r4, #128	@ 0x80
 8000f02:	464b      	mov	r3, r9
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	4223      	tst	r3, r4
 8000f08:	d002      	beq.n	8000f10 <__aeabi_ddiv+0x208>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4223      	tst	r3, r4
 8000f0e:	d0f0      	beq.n	8000ef2 <__aeabi_ddiv+0x1ea>
 8000f10:	2480      	movs	r4, #128	@ 0x80
 8000f12:	464b      	mov	r3, r9
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	431c      	orrs	r4, r3
 8000f18:	0324      	lsls	r4, r4, #12
 8000f1a:	9e02      	ldr	r6, [sp, #8]
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	e75e      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff
 8000f28:	fffffc01 	.word	0xfffffc01
 8000f2c:	08012bf0 	.word	0x08012bf0
 8000f30:	fffff801 	.word	0xfffff801
 8000f34:	000003f3 	.word	0x000003f3
 8000f38:	fffffc0d 	.word	0xfffffc0d
 8000f3c:	45cb      	cmp	fp, r9
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0x23a>
 8000f40:	e0f8      	b.n	8001134 <__aeabi_ddiv+0x42c>
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x23e>
 8000f44:	e0f3      	b.n	800112e <__aeabi_ddiv+0x426>
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4648      	mov	r0, r9
 8000f50:	2500      	movs	r5, #0
 8000f52:	44e2      	add	sl, ip
 8000f54:	465b      	mov	r3, fp
 8000f56:	0e17      	lsrs	r7, r2, #24
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c19      	lsrs	r1, r3, #16
 8000f5e:	043b      	lsls	r3, r7, #16
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	0c1f      	lsrs	r7, r3, #16
 8000f66:	4691      	mov	r9, r2
 8000f68:	9102      	str	r1, [sp, #8]
 8000f6a:	9703      	str	r7, [sp, #12]
 8000f6c:	f7ff f96a 	bl	8000244 <__aeabi_uidivmod>
 8000f70:	0002      	movs	r2, r0
 8000f72:	437a      	muls	r2, r7
 8000f74:	040b      	lsls	r3, r1, #16
 8000f76:	0c21      	lsrs	r1, r4, #16
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f80:	9f00      	ldr	r7, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	46bc      	mov	ip, r7
 8000f86:	425b      	negs	r3, r3
 8000f88:	4461      	add	r1, ip
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	44e0      	add	r8, ip
 8000f8e:	428f      	cmp	r7, r1
 8000f90:	d800      	bhi.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f92:	e15c      	b.n	800124e <__aeabi_ddiv+0x546>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f954 	bl	8000244 <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d906      	bls.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fae:	9900      	ldr	r1, [sp, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	4464      	add	r4, ip
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d800      	bhi.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fba:	e142      	b.n	8001242 <__aeabi_ddiv+0x53a>
 8000fbc:	1aa0      	subs	r0, r4, r2
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	0412      	lsls	r2, r2, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4659      	mov	r1, fp
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	001f      	movs	r7, r3
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	040b      	lsls	r3, r1, #16
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0c09      	lsrs	r1, r1, #16
 8000fd8:	000c      	movs	r4, r1
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	435c      	muls	r4, r3
 8000fde:	0c12      	lsrs	r2, r2, #16
 8000fe0:	437b      	muls	r3, r7
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4351      	muls	r1, r2
 8000fe6:	437a      	muls	r2, r7
 8000fe8:	0c27      	lsrs	r7, r4, #16
 8000fea:	46bc      	mov	ip, r7
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	4463      	add	r3, ip
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d903      	bls.n	8000ffc <__aeabi_ddiv+0x2f4>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	4462      	add	r2, ip
 8000ffc:	0c19      	lsrs	r1, r3, #16
 8000ffe:	0424      	lsls	r4, r4, #16
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c24      	lsrs	r4, r4, #16
 8001004:	188a      	adds	r2, r1, r2
 8001006:	191c      	adds	r4, r3, r4
 8001008:	4290      	cmp	r0, r2
 800100a:	d302      	bcc.n	8001012 <__aeabi_ddiv+0x30a>
 800100c:	d116      	bne.n	800103c <__aeabi_ddiv+0x334>
 800100e:	42a5      	cmp	r5, r4
 8001010:	d214      	bcs.n	800103c <__aeabi_ddiv+0x334>
 8001012:	465b      	mov	r3, fp
 8001014:	9f00      	ldr	r7, [sp, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	444d      	add	r5, r9
 800101a:	9305      	str	r3, [sp, #20]
 800101c:	454d      	cmp	r5, r9
 800101e:	419b      	sbcs	r3, r3
 8001020:	46bc      	mov	ip, r7
 8001022:	425b      	negs	r3, r3
 8001024:	4463      	add	r3, ip
 8001026:	18c0      	adds	r0, r0, r3
 8001028:	4287      	cmp	r7, r0
 800102a:	d300      	bcc.n	800102e <__aeabi_ddiv+0x326>
 800102c:	e102      	b.n	8001234 <__aeabi_ddiv+0x52c>
 800102e:	4282      	cmp	r2, r0
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x32c>
 8001032:	e129      	b.n	8001288 <__aeabi_ddiv+0x580>
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x330>
 8001036:	e124      	b.n	8001282 <__aeabi_ddiv+0x57a>
 8001038:	9b05      	ldr	r3, [sp, #20]
 800103a:	469b      	mov	fp, r3
 800103c:	1b2c      	subs	r4, r5, r4
 800103e:	42a5      	cmp	r5, r4
 8001040:	41ad      	sbcs	r5, r5
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4283      	cmp	r3, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x348>
 800104e:	e10f      	b.n	8001270 <__aeabi_ddiv+0x568>
 8001050:	9902      	ldr	r1, [sp, #8]
 8001052:	f7ff f8f7 	bl	8000244 <__aeabi_uidivmod>
 8001056:	9a03      	ldr	r2, [sp, #12]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c21      	lsrs	r1, r4, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x360>
 8001066:	e0cb      	b.n	8001200 <__aeabi_ddiv+0x4f8>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	9902      	ldr	r1, [sp, #8]
 800106c:	f7ff f8ea 	bl	8000244 <__aeabi_uidivmod>
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	0424      	lsls	r4, r4, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c24      	lsrs	r4, r4, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430c      	orrs	r4, r1
 800107e:	42a2      	cmp	r2, r4
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x37c>
 8001082:	e0ca      	b.n	800121a <__aeabi_ddiv+0x512>
 8001084:	4641      	mov	r1, r8
 8001086:	1aa4      	subs	r4, r4, r2
 8001088:	042a      	lsls	r2, r5, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	9f04      	ldr	r7, [sp, #16]
 800108e:	0413      	lsls	r3, r2, #16
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	4359      	muls	r1, r3
 8001094:	4640      	mov	r0, r8
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c15      	lsrs	r5, r2, #16
 800109c:	4368      	muls	r0, r5
 800109e:	0c0b      	lsrs	r3, r1, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	437d      	muls	r5, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x3aa>
 80010aa:	2080      	movs	r0, #128	@ 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4465      	add	r5, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c09      	lsrs	r1, r1, #16
 80010ba:	1940      	adds	r0, r0, r5
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	4284      	cmp	r4, r0
 80010c0:	d327      	bcc.n	8001112 <__aeabi_ddiv+0x40a>
 80010c2:	d023      	beq.n	800110c <__aeabi_ddiv+0x404>
 80010c4:	2301      	movs	r3, #1
 80010c6:	0035      	movs	r5, r6
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b94      	ldr	r3, [pc, #592]	@ (800131c <__aeabi_ddiv+0x614>)
 80010cc:	4453      	add	r3, sl
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd60      	ble.n	8001194 <__aeabi_ddiv+0x48c>
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3d0>
 80010d6:	e086      	b.n	80011e6 <__aeabi_ddiv+0x4de>
 80010d8:	002e      	movs	r6, r5
 80010da:	08d1      	lsrs	r1, r2, #3
 80010dc:	465a      	mov	r2, fp
 80010de:	01d2      	lsls	r2, r2, #7
 80010e0:	d506      	bpl.n	80010f0 <__aeabi_ddiv+0x3e8>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <__aeabi_ddiv+0x618>)
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	4693      	mov	fp, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4453      	add	r3, sl
 80010f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001324 <__aeabi_ddiv+0x61c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_ddiv+0x3f0>
 80010f6:	e680      	b.n	8000dfa <__aeabi_ddiv+0xf2>
 80010f8:	465a      	mov	r2, fp
 80010fa:	0752      	lsls	r2, r2, #29
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4690      	mov	r8, r2
 8001100:	465a      	mov	r2, fp
 8001102:	055b      	lsls	r3, r3, #21
 8001104:	0254      	lsls	r4, r2, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d5b      	lsrs	r3, r3, #21
 800110a:	e669      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 800110c:	0035      	movs	r5, r6
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0db      	beq.n	80010ca <__aeabi_ddiv+0x3c2>
 8001112:	9d00      	ldr	r5, [sp, #0]
 8001114:	1e51      	subs	r1, r2, #1
 8001116:	46ac      	mov	ip, r5
 8001118:	4464      	add	r4, ip
 800111a:	42ac      	cmp	r4, r5
 800111c:	d200      	bcs.n	8001120 <__aeabi_ddiv+0x418>
 800111e:	e09e      	b.n	800125e <__aeabi_ddiv+0x556>
 8001120:	4284      	cmp	r4, r0
 8001122:	d200      	bcs.n	8001126 <__aeabi_ddiv+0x41e>
 8001124:	e0e1      	b.n	80012ea <__aeabi_ddiv+0x5e2>
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x422>
 8001128:	e0ee      	b.n	8001308 <__aeabi_ddiv+0x600>
 800112a:	000a      	movs	r2, r1
 800112c:	e7ca      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800112e:	4542      	cmp	r2, r8
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x42c>
 8001132:	e708      	b.n	8000f46 <__aeabi_ddiv+0x23e>
 8001134:	464b      	mov	r3, r9
 8001136:	07dc      	lsls	r4, r3, #31
 8001138:	0858      	lsrs	r0, r3, #1
 800113a:	4643      	mov	r3, r8
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	431c      	orrs	r4, r3
 8001140:	4643      	mov	r3, r8
 8001142:	07dd      	lsls	r5, r3, #31
 8001144:	e706      	b.n	8000f54 <__aeabi_ddiv+0x24c>
 8001146:	f001 f9b9 	bl	80024bc <__clzsi2>
 800114a:	2315      	movs	r3, #21
 800114c:	469c      	mov	ip, r3
 800114e:	4484      	add	ip, r0
 8001150:	0002      	movs	r2, r0
 8001152:	4663      	mov	r3, ip
 8001154:	3220      	adds	r2, #32
 8001156:	2b1c      	cmp	r3, #28
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x454>
 800115a:	e692      	b.n	8000e82 <__aeabi_ddiv+0x17a>
 800115c:	0023      	movs	r3, r4
 800115e:	3808      	subs	r0, #8
 8001160:	4083      	lsls	r3, r0
 8001162:	4699      	mov	r9, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4698      	mov	r8, r3
 8001168:	e69a      	b.n	8000ea0 <__aeabi_ddiv+0x198>
 800116a:	f001 f9a7 	bl	80024bc <__clzsi2>
 800116e:	0002      	movs	r2, r0
 8001170:	0003      	movs	r3, r0
 8001172:	3215      	adds	r2, #21
 8001174:	3320      	adds	r3, #32
 8001176:	2a1c      	cmp	r2, #28
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x474>
 800117a:	e65f      	b.n	8000e3c <__aeabi_ddiv+0x134>
 800117c:	9900      	ldr	r1, [sp, #0]
 800117e:	3808      	subs	r0, #8
 8001180:	4081      	lsls	r1, r0
 8001182:	2200      	movs	r2, #0
 8001184:	468b      	mov	fp, r1
 8001186:	e666      	b.n	8000e56 <__aeabi_ddiv+0x14e>
 8001188:	2200      	movs	r2, #0
 800118a:	002e      	movs	r6, r5
 800118c:	2400      	movs	r4, #0
 800118e:	4690      	mov	r8, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <__aeabi_ddiv+0x620>)
 8001192:	e625      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8001194:	002e      	movs	r6, r5
 8001196:	2101      	movs	r1, #1
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	2938      	cmp	r1, #56	@ 0x38
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x498>
 800119e:	e61b      	b.n	8000dd8 <__aeabi_ddiv+0xd0>
 80011a0:	291f      	cmp	r1, #31
 80011a2:	dc7e      	bgt.n	80012a2 <__aeabi_ddiv+0x59a>
 80011a4:	4861      	ldr	r0, [pc, #388]	@ (800132c <__aeabi_ddiv+0x624>)
 80011a6:	0014      	movs	r4, r2
 80011a8:	4450      	add	r0, sl
 80011aa:	465b      	mov	r3, fp
 80011ac:	4082      	lsls	r2, r0
 80011ae:	4083      	lsls	r3, r0
 80011b0:	40cc      	lsrs	r4, r1
 80011b2:	1e50      	subs	r0, r2, #1
 80011b4:	4182      	sbcs	r2, r0
 80011b6:	4323      	orrs	r3, r4
 80011b8:	431a      	orrs	r2, r3
 80011ba:	465b      	mov	r3, fp
 80011bc:	40cb      	lsrs	r3, r1
 80011be:	0751      	lsls	r1, r2, #29
 80011c0:	d009      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011c2:	210f      	movs	r1, #15
 80011c4:	4011      	ands	r1, r2
 80011c6:	2904      	cmp	r1, #4
 80011c8:	d005      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011ca:	1d11      	adds	r1, r2, #4
 80011cc:	4291      	cmp	r1, r2
 80011ce:	4192      	sbcs	r2, r2
 80011d0:	4252      	negs	r2, r2
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	0219      	lsls	r1, r3, #8
 80011d8:	d400      	bmi.n	80011dc <__aeabi_ddiv+0x4d4>
 80011da:	e09b      	b.n	8001314 <__aeabi_ddiv+0x60c>
 80011dc:	2200      	movs	r2, #0
 80011de:	2301      	movs	r3, #1
 80011e0:	2400      	movs	r4, #0
 80011e2:	4690      	mov	r8, r2
 80011e4:	e5fc      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80011e6:	210f      	movs	r1, #15
 80011e8:	4011      	ands	r1, r2
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x4e8>
 80011ee:	e773      	b.n	80010d8 <__aeabi_ddiv+0x3d0>
 80011f0:	1d11      	adds	r1, r2, #4
 80011f2:	4291      	cmp	r1, r2
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4252      	negs	r2, r2
 80011f8:	002e      	movs	r6, r5
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	4493      	add	fp, r2
 80011fe:	e76d      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	3d01      	subs	r5, #1
 8001204:	469c      	mov	ip, r3
 8001206:	4461      	add	r1, ip
 8001208:	428b      	cmp	r3, r1
 800120a:	d900      	bls.n	800120e <__aeabi_ddiv+0x506>
 800120c:	e72c      	b.n	8001068 <__aeabi_ddiv+0x360>
 800120e:	428a      	cmp	r2, r1
 8001210:	d800      	bhi.n	8001214 <__aeabi_ddiv+0x50c>
 8001212:	e729      	b.n	8001068 <__aeabi_ddiv+0x360>
 8001214:	1e85      	subs	r5, r0, #2
 8001216:	4461      	add	r1, ip
 8001218:	e726      	b.n	8001068 <__aeabi_ddiv+0x360>
 800121a:	9900      	ldr	r1, [sp, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	468c      	mov	ip, r1
 8001220:	4464      	add	r4, ip
 8001222:	42a1      	cmp	r1, r4
 8001224:	d900      	bls.n	8001228 <__aeabi_ddiv+0x520>
 8001226:	e72d      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001228:	42a2      	cmp	r2, r4
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x526>
 800122c:	e72a      	b.n	8001084 <__aeabi_ddiv+0x37c>
 800122e:	1e83      	subs	r3, r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	e727      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001234:	4287      	cmp	r7, r0
 8001236:	d000      	beq.n	800123a <__aeabi_ddiv+0x532>
 8001238:	e6fe      	b.n	8001038 <__aeabi_ddiv+0x330>
 800123a:	45a9      	cmp	r9, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x538>
 800123e:	e6fb      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001240:	e6f5      	b.n	800102e <__aeabi_ddiv+0x326>
 8001242:	42a2      	cmp	r2, r4
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x540>
 8001246:	e6b9      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 8001248:	1e83      	subs	r3, r0, #2
 800124a:	4464      	add	r4, ip
 800124c:	e6b6      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 800124e:	428a      	cmp	r2, r1
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x54c>
 8001252:	e69f      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 8001254:	46bc      	mov	ip, r7
 8001256:	1e83      	subs	r3, r0, #2
 8001258:	4698      	mov	r8, r3
 800125a:	4461      	add	r1, ip
 800125c:	e69a      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 800125e:	000a      	movs	r2, r1
 8001260:	4284      	cmp	r4, r0
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x55e>
 8001264:	e72e      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 8001266:	454b      	cmp	r3, r9
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x564>
 800126a:	e72b      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800126c:	0035      	movs	r5, r6
 800126e:	e72c      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <__aeabi_ddiv+0x614>)
 8001272:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <__aeabi_ddiv+0x628>)
 8001274:	4453      	add	r3, sl
 8001276:	4592      	cmp	sl, r2
 8001278:	db43      	blt.n	8001302 <__aeabi_ddiv+0x5fa>
 800127a:	2201      	movs	r2, #1
 800127c:	2100      	movs	r1, #0
 800127e:	4493      	add	fp, r2
 8001280:	e72c      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001282:	42ac      	cmp	r4, r5
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x580>
 8001286:	e6d7      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001288:	2302      	movs	r3, #2
 800128a:	425b      	negs	r3, r3
 800128c:	469c      	mov	ip, r3
 800128e:	9900      	ldr	r1, [sp, #0]
 8001290:	444d      	add	r5, r9
 8001292:	454d      	cmp	r5, r9
 8001294:	419b      	sbcs	r3, r3
 8001296:	44e3      	add	fp, ip
 8001298:	468c      	mov	ip, r1
 800129a:	425b      	negs	r3, r3
 800129c:	4463      	add	r3, ip
 800129e:	18c0      	adds	r0, r0, r3
 80012a0:	e6cc      	b.n	800103c <__aeabi_ddiv+0x334>
 80012a2:	201f      	movs	r0, #31
 80012a4:	4240      	negs	r0, r0
 80012a6:	1ac3      	subs	r3, r0, r3
 80012a8:	4658      	mov	r0, fp
 80012aa:	40d8      	lsrs	r0, r3
 80012ac:	2920      	cmp	r1, #32
 80012ae:	d004      	beq.n	80012ba <__aeabi_ddiv+0x5b2>
 80012b0:	4659      	mov	r1, fp
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <__aeabi_ddiv+0x62c>)
 80012b4:	4453      	add	r3, sl
 80012b6:	4099      	lsls	r1, r3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	419a      	sbcs	r2, r3
 80012be:	2307      	movs	r3, #7
 80012c0:	0019      	movs	r1, r3
 80012c2:	4302      	orrs	r2, r0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4011      	ands	r1, r2
 80012c8:	4213      	tst	r3, r2
 80012ca:	d009      	beq.n	80012e0 <__aeabi_ddiv+0x5d8>
 80012cc:	3308      	adds	r3, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d01d      	beq.n	8001310 <__aeabi_ddiv+0x608>
 80012d4:	1d13      	adds	r3, r2, #4
 80012d6:	4293      	cmp	r3, r2
 80012d8:	4189      	sbcs	r1, r1
 80012da:	001a      	movs	r2, r3
 80012dc:	4249      	negs	r1, r1
 80012de:	0749      	lsls	r1, r1, #29
 80012e0:	08d2      	lsrs	r2, r2, #3
 80012e2:	430a      	orrs	r2, r1
 80012e4:	4690      	mov	r8, r2
 80012e6:	2300      	movs	r3, #0
 80012e8:	e57a      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80012ea:	4649      	mov	r1, r9
 80012ec:	9f00      	ldr	r7, [sp, #0]
 80012ee:	004d      	lsls	r5, r1, #1
 80012f0:	454d      	cmp	r5, r9
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	46bc      	mov	ip, r7
 80012f6:	4249      	negs	r1, r1
 80012f8:	4461      	add	r1, ip
 80012fa:	46a9      	mov	r9, r5
 80012fc:	3a02      	subs	r2, #2
 80012fe:	1864      	adds	r4, r4, r1
 8001300:	e7ae      	b.n	8001260 <__aeabi_ddiv+0x558>
 8001302:	2201      	movs	r2, #1
 8001304:	4252      	negs	r2, r2
 8001306:	e746      	b.n	8001196 <__aeabi_ddiv+0x48e>
 8001308:	4599      	cmp	r9, r3
 800130a:	d3ee      	bcc.n	80012ea <__aeabi_ddiv+0x5e2>
 800130c:	000a      	movs	r2, r1
 800130e:	e7aa      	b.n	8001266 <__aeabi_ddiv+0x55e>
 8001310:	2100      	movs	r1, #0
 8001312:	e7e5      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	0b1c      	lsrs	r4, r3, #12
 800131a:	e7e1      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff
 800132c:	0000041e 	.word	0x0000041e
 8001330:	fffffc02 	.word	0xfffffc02
 8001334:	0000043e 	.word	0x0000043e

08001338 <__eqdf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4657      	mov	r7, sl
 800133c:	46de      	mov	lr, fp
 800133e:	464e      	mov	r6, r9
 8001340:	4645      	mov	r5, r8
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	000d      	movs	r5, r1
 8001346:	0004      	movs	r4, r0
 8001348:	0fe8      	lsrs	r0, r5, #31
 800134a:	4683      	mov	fp, r0
 800134c:	0309      	lsls	r1, r1, #12
 800134e:	0fd8      	lsrs	r0, r3, #31
 8001350:	0b09      	lsrs	r1, r1, #12
 8001352:	4682      	mov	sl, r0
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <__eqdf2+0x84>)
 8001356:	468c      	mov	ip, r1
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	005e      	lsls	r6, r3, #1
 800135e:	0d49      	lsrs	r1, r1, #21
 8001360:	0b3f      	lsrs	r7, r7, #12
 8001362:	0d76      	lsrs	r6, r6, #21
 8001364:	4281      	cmp	r1, r0
 8001366:	d018      	beq.n	800139a <__eqdf2+0x62>
 8001368:	4286      	cmp	r6, r0
 800136a:	d00f      	beq.n	800138c <__eqdf2+0x54>
 800136c:	2001      	movs	r0, #1
 800136e:	42b1      	cmp	r1, r6
 8001370:	d10d      	bne.n	800138e <__eqdf2+0x56>
 8001372:	45bc      	cmp	ip, r7
 8001374:	d10b      	bne.n	800138e <__eqdf2+0x56>
 8001376:	4294      	cmp	r4, r2
 8001378:	d109      	bne.n	800138e <__eqdf2+0x56>
 800137a:	45d3      	cmp	fp, sl
 800137c:	d01c      	beq.n	80013b8 <__eqdf2+0x80>
 800137e:	2900      	cmp	r1, #0
 8001380:	d105      	bne.n	800138e <__eqdf2+0x56>
 8001382:	4660      	mov	r0, ip
 8001384:	4320      	orrs	r0, r4
 8001386:	1e43      	subs	r3, r0, #1
 8001388:	4198      	sbcs	r0, r3
 800138a:	e000      	b.n	800138e <__eqdf2+0x56>
 800138c:	2001      	movs	r0, #1
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2001      	movs	r0, #1
 800139c:	428e      	cmp	r6, r1
 800139e:	d1f6      	bne.n	800138e <__eqdf2+0x56>
 80013a0:	4661      	mov	r1, ip
 80013a2:	4339      	orrs	r1, r7
 80013a4:	000f      	movs	r7, r1
 80013a6:	4317      	orrs	r7, r2
 80013a8:	4327      	orrs	r7, r4
 80013aa:	d1f0      	bne.n	800138e <__eqdf2+0x56>
 80013ac:	465b      	mov	r3, fp
 80013ae:	4652      	mov	r2, sl
 80013b0:	1a98      	subs	r0, r3, r2
 80013b2:	1e43      	subs	r3, r0, #1
 80013b4:	4198      	sbcs	r0, r3
 80013b6:	e7ea      	b.n	800138e <__eqdf2+0x56>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e8      	b.n	800138e <__eqdf2+0x56>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	4645      	mov	r5, r8
 80013c8:	46de      	mov	lr, fp
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	000d      	movs	r5, r1
 80013ce:	030e      	lsls	r6, r1, #12
 80013d0:	0049      	lsls	r1, r1, #1
 80013d2:	0d49      	lsrs	r1, r1, #21
 80013d4:	468a      	mov	sl, r1
 80013d6:	0fdf      	lsrs	r7, r3, #31
 80013d8:	0fe9      	lsrs	r1, r5, #31
 80013da:	46bc      	mov	ip, r7
 80013dc:	b083      	sub	sp, #12
 80013de:	4f2f      	ldr	r7, [pc, #188]	@ (800149c <__gedf2+0xdc>)
 80013e0:	0004      	movs	r4, r0
 80013e2:	4680      	mov	r8, r0
 80013e4:	9101      	str	r1, [sp, #4]
 80013e6:	0058      	lsls	r0, r3, #1
 80013e8:	0319      	lsls	r1, r3, #12
 80013ea:	4691      	mov	r9, r2
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0b09      	lsrs	r1, r1, #12
 80013f0:	0d40      	lsrs	r0, r0, #21
 80013f2:	45ba      	cmp	sl, r7
 80013f4:	d01d      	beq.n	8001432 <__gedf2+0x72>
 80013f6:	42b8      	cmp	r0, r7
 80013f8:	d00d      	beq.n	8001416 <__gedf2+0x56>
 80013fa:	4657      	mov	r7, sl
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d12a      	bne.n	8001456 <__gedf2+0x96>
 8001400:	4334      	orrs	r4, r6
 8001402:	2800      	cmp	r0, #0
 8001404:	d124      	bne.n	8001450 <__gedf2+0x90>
 8001406:	430a      	orrs	r2, r1
 8001408:	d036      	beq.n	8001478 <__gedf2+0xb8>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d141      	bne.n	8001492 <__gedf2+0xd2>
 800140e:	4663      	mov	r3, ip
 8001410:	0058      	lsls	r0, r3, #1
 8001412:	3801      	subs	r0, #1
 8001414:	e015      	b.n	8001442 <__gedf2+0x82>
 8001416:	4311      	orrs	r1, r2
 8001418:	d138      	bne.n	800148c <__gedf2+0xcc>
 800141a:	4653      	mov	r3, sl
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <__gedf2+0x64>
 8001420:	4326      	orrs	r6, r4
 8001422:	d0f4      	beq.n	800140e <__gedf2+0x4e>
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	4563      	cmp	r3, ip
 8001428:	d107      	bne.n	800143a <__gedf2+0x7a>
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	0058      	lsls	r0, r3, #1
 800142e:	3801      	subs	r0, #1
 8001430:	e007      	b.n	8001442 <__gedf2+0x82>
 8001432:	4326      	orrs	r6, r4
 8001434:	d12a      	bne.n	800148c <__gedf2+0xcc>
 8001436:	4550      	cmp	r0, sl
 8001438:	d021      	beq.n	800147e <__gedf2+0xbe>
 800143a:	2001      	movs	r0, #1
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	425f      	negs	r7, r3
 8001440:	4338      	orrs	r0, r7
 8001442:	b003      	add	sp, #12
 8001444:	bcf0      	pop	{r4, r5, r6, r7}
 8001446:	46bb      	mov	fp, r7
 8001448:	46b2      	mov	sl, r6
 800144a:	46a9      	mov	r9, r5
 800144c:	46a0      	mov	r8, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	2c00      	cmp	r4, #0
 8001452:	d0dc      	beq.n	800140e <__gedf2+0x4e>
 8001454:	e7e6      	b.n	8001424 <__gedf2+0x64>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0ef      	beq.n	800143a <__gedf2+0x7a>
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	4563      	cmp	r3, ip
 800145e:	d1ec      	bne.n	800143a <__gedf2+0x7a>
 8001460:	4582      	cmp	sl, r0
 8001462:	dcea      	bgt.n	800143a <__gedf2+0x7a>
 8001464:	dbe1      	blt.n	800142a <__gedf2+0x6a>
 8001466:	428e      	cmp	r6, r1
 8001468:	d8e7      	bhi.n	800143a <__gedf2+0x7a>
 800146a:	d1de      	bne.n	800142a <__gedf2+0x6a>
 800146c:	45c8      	cmp	r8, r9
 800146e:	d8e4      	bhi.n	800143a <__gedf2+0x7a>
 8001470:	2000      	movs	r0, #0
 8001472:	45c8      	cmp	r8, r9
 8001474:	d2e5      	bcs.n	8001442 <__gedf2+0x82>
 8001476:	e7d8      	b.n	800142a <__gedf2+0x6a>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e2      	beq.n	8001442 <__gedf2+0x82>
 800147c:	e7dd      	b.n	800143a <__gedf2+0x7a>
 800147e:	4311      	orrs	r1, r2
 8001480:	d104      	bne.n	800148c <__gedf2+0xcc>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	4563      	cmp	r3, ip
 8001486:	d1d8      	bne.n	800143a <__gedf2+0x7a>
 8001488:	2000      	movs	r0, #0
 800148a:	e7da      	b.n	8001442 <__gedf2+0x82>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7d7      	b.n	8001442 <__gedf2+0x82>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	4563      	cmp	r3, ip
 8001496:	d0e6      	beq.n	8001466 <__gedf2+0xa6>
 8001498:	e7cf      	b.n	800143a <__gedf2+0x7a>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__ledf2>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	4645      	mov	r5, r8
 80014a8:	46de      	mov	lr, fp
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	000d      	movs	r5, r1
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	468a      	mov	sl, r1
 80014b6:	0fdf      	lsrs	r7, r3, #31
 80014b8:	0fe9      	lsrs	r1, r5, #31
 80014ba:	46bc      	mov	ip, r7
 80014bc:	b083      	sub	sp, #12
 80014be:	4f2e      	ldr	r7, [pc, #184]	@ (8001578 <__ledf2+0xd8>)
 80014c0:	0004      	movs	r4, r0
 80014c2:	4680      	mov	r8, r0
 80014c4:	9101      	str	r1, [sp, #4]
 80014c6:	0058      	lsls	r0, r3, #1
 80014c8:	0319      	lsls	r1, r3, #12
 80014ca:	4691      	mov	r9, r2
 80014cc:	0b36      	lsrs	r6, r6, #12
 80014ce:	0b09      	lsrs	r1, r1, #12
 80014d0:	0d40      	lsrs	r0, r0, #21
 80014d2:	45ba      	cmp	sl, r7
 80014d4:	d01e      	beq.n	8001514 <__ledf2+0x74>
 80014d6:	42b8      	cmp	r0, r7
 80014d8:	d00d      	beq.n	80014f6 <__ledf2+0x56>
 80014da:	4657      	mov	r7, sl
 80014dc:	2f00      	cmp	r7, #0
 80014de:	d127      	bne.n	8001530 <__ledf2+0x90>
 80014e0:	4334      	orrs	r4, r6
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d133      	bne.n	800154e <__ledf2+0xae>
 80014e6:	430a      	orrs	r2, r1
 80014e8:	d034      	beq.n	8001554 <__ledf2+0xb4>
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d140      	bne.n	8001570 <__ledf2+0xd0>
 80014ee:	4663      	mov	r3, ip
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e015      	b.n	8001522 <__ledf2+0x82>
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d112      	bne.n	8001520 <__ledf2+0x80>
 80014fa:	4653      	mov	r3, sl
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <__ledf2+0x64>
 8001500:	4326      	orrs	r6, r4
 8001502:	d0f4      	beq.n	80014ee <__ledf2+0x4e>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	4563      	cmp	r3, ip
 8001508:	d01d      	beq.n	8001546 <__ledf2+0xa6>
 800150a:	2001      	movs	r0, #1
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	425f      	negs	r7, r3
 8001510:	4338      	orrs	r0, r7
 8001512:	e006      	b.n	8001522 <__ledf2+0x82>
 8001514:	4326      	orrs	r6, r4
 8001516:	d103      	bne.n	8001520 <__ledf2+0x80>
 8001518:	4550      	cmp	r0, sl
 800151a:	d1f6      	bne.n	800150a <__ledf2+0x6a>
 800151c:	4311      	orrs	r1, r2
 800151e:	d01c      	beq.n	800155a <__ledf2+0xba>
 8001520:	2002      	movs	r0, #2
 8001522:	b003      	add	sp, #12
 8001524:	bcf0      	pop	{r4, r5, r6, r7}
 8001526:	46bb      	mov	fp, r7
 8001528:	46b2      	mov	sl, r6
 800152a:	46a9      	mov	r9, r5
 800152c:	46a0      	mov	r8, r4
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0ea      	beq.n	800150a <__ledf2+0x6a>
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	4563      	cmp	r3, ip
 8001538:	d1e7      	bne.n	800150a <__ledf2+0x6a>
 800153a:	4582      	cmp	sl, r0
 800153c:	dce5      	bgt.n	800150a <__ledf2+0x6a>
 800153e:	db02      	blt.n	8001546 <__ledf2+0xa6>
 8001540:	428e      	cmp	r6, r1
 8001542:	d8e2      	bhi.n	800150a <__ledf2+0x6a>
 8001544:	d00e      	beq.n	8001564 <__ledf2+0xc4>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	3801      	subs	r0, #1
 800154c:	e7e9      	b.n	8001522 <__ledf2+0x82>
 800154e:	2c00      	cmp	r4, #0
 8001550:	d0cd      	beq.n	80014ee <__ledf2+0x4e>
 8001552:	e7d7      	b.n	8001504 <__ledf2+0x64>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0e4      	beq.n	8001522 <__ledf2+0x82>
 8001558:	e7d7      	b.n	800150a <__ledf2+0x6a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	2000      	movs	r0, #0
 800155e:	4563      	cmp	r3, ip
 8001560:	d0df      	beq.n	8001522 <__ledf2+0x82>
 8001562:	e7d2      	b.n	800150a <__ledf2+0x6a>
 8001564:	45c8      	cmp	r8, r9
 8001566:	d8d0      	bhi.n	800150a <__ledf2+0x6a>
 8001568:	2000      	movs	r0, #0
 800156a:	45c8      	cmp	r8, r9
 800156c:	d2d9      	bcs.n	8001522 <__ledf2+0x82>
 800156e:	e7ea      	b.n	8001546 <__ledf2+0xa6>
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	4563      	cmp	r3, ip
 8001574:	d0e4      	beq.n	8001540 <__ledf2+0xa0>
 8001576:	e7c8      	b.n	800150a <__ledf2+0x6a>
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	46de      	mov	lr, fp
 8001584:	4645      	mov	r5, r8
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	001f      	movs	r7, r3
 800158a:	030b      	lsls	r3, r1, #12
 800158c:	0b1b      	lsrs	r3, r3, #12
 800158e:	0016      	movs	r6, r2
 8001590:	469a      	mov	sl, r3
 8001592:	0fca      	lsrs	r2, r1, #31
 8001594:	004b      	lsls	r3, r1, #1
 8001596:	0004      	movs	r4, r0
 8001598:	4691      	mov	r9, r2
 800159a:	b085      	sub	sp, #20
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x26>
 80015a0:	e1cf      	b.n	8001942 <__aeabi_dmul+0x3c6>
 80015a2:	4acd      	ldr	r2, [pc, #820]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d055      	beq.n	8001654 <__aeabi_dmul+0xd8>
 80015a8:	4651      	mov	r1, sl
 80015aa:	0f42      	lsrs	r2, r0, #29
 80015ac:	00c9      	lsls	r1, r1, #3
 80015ae:	430a      	orrs	r2, r1
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	4311      	orrs	r1, r2
 80015b6:	00c2      	lsls	r2, r0, #3
 80015b8:	4690      	mov	r8, r2
 80015ba:	4ac8      	ldr	r2, [pc, #800]	@ (80018dc <__aeabi_dmul+0x360>)
 80015bc:	468a      	mov	sl, r1
 80015be:	4693      	mov	fp, r2
 80015c0:	449b      	add	fp, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	033c      	lsls	r4, r7, #12
 80015ca:	007b      	lsls	r3, r7, #1
 80015cc:	0ffa      	lsrs	r2, r7, #31
 80015ce:	9601      	str	r6, [sp, #4]
 80015d0:	0b24      	lsrs	r4, r4, #12
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x5e>
 80015d8:	e188      	b.n	80018ec <__aeabi_dmul+0x370>
 80015da:	4abf      	ldr	r2, [pc, #764]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x66>
 80015e0:	e092      	b.n	8001708 <__aeabi_dmul+0x18c>
 80015e2:	4abe      	ldr	r2, [pc, #760]	@ (80018dc <__aeabi_dmul+0x360>)
 80015e4:	4694      	mov	ip, r2
 80015e6:	4463      	add	r3, ip
 80015e8:	449b      	add	fp, r3
 80015ea:	2d0a      	cmp	r5, #10
 80015ec:	dc42      	bgt.n	8001674 <__aeabi_dmul+0xf8>
 80015ee:	00e4      	lsls	r4, r4, #3
 80015f0:	0f73      	lsrs	r3, r6, #29
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2480      	movs	r4, #128	@ 0x80
 80015f6:	4649      	mov	r1, r9
 80015f8:	0424      	lsls	r4, r4, #16
 80015fa:	431c      	orrs	r4, r3
 80015fc:	00f3      	lsls	r3, r6, #3
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	2000      	movs	r0, #0
 8001604:	4059      	eors	r1, r3
 8001606:	b2cb      	uxtb	r3, r1
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	2d02      	cmp	r5, #2
 800160c:	dc00      	bgt.n	8001610 <__aeabi_dmul+0x94>
 800160e:	e094      	b.n	800173a <__aeabi_dmul+0x1be>
 8001610:	2301      	movs	r3, #1
 8001612:	40ab      	lsls	r3, r5
 8001614:	001d      	movs	r5, r3
 8001616:	23a6      	movs	r3, #166	@ 0xa6
 8001618:	002a      	movs	r2, r5
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	401a      	ands	r2, r3
 800161e:	421d      	tst	r5, r3
 8001620:	d000      	beq.n	8001624 <__aeabi_dmul+0xa8>
 8001622:	e229      	b.n	8001a78 <__aeabi_dmul+0x4fc>
 8001624:	2390      	movs	r3, #144	@ 0x90
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	421d      	tst	r5, r3
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0xb2>
 800162c:	e24d      	b.n	8001aca <__aeabi_dmul+0x54e>
 800162e:	2300      	movs	r3, #0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4699      	mov	r9, r3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4ba8      	ldr	r3, [pc, #672]	@ (80018d8 <__aeabi_dmul+0x35c>)
 8001638:	0010      	movs	r0, r2
 800163a:	464a      	mov	r2, r9
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	4323      	orrs	r3, r4
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	4313      	orrs	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	b005      	add	sp, #20
 8001648:	bcf0      	pop	{r4, r5, r6, r7}
 800164a:	46bb      	mov	fp, r7
 800164c:	46b2      	mov	sl, r6
 800164e:	46a9      	mov	r9, r5
 8001650:	46a0      	mov	r8, r4
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	4652      	mov	r2, sl
 8001656:	4302      	orrs	r2, r0
 8001658:	4690      	mov	r8, r2
 800165a:	d000      	beq.n	800165e <__aeabi_dmul+0xe2>
 800165c:	e1ac      	b.n	80019b8 <__aeabi_dmul+0x43c>
 800165e:	469b      	mov	fp, r3
 8001660:	2302      	movs	r3, #2
 8001662:	4692      	mov	sl, r2
 8001664:	2508      	movs	r5, #8
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	e7ae      	b.n	80015c8 <__aeabi_dmul+0x4c>
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	46a2      	mov	sl, r4
 800166e:	4699      	mov	r9, r3
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4698      	mov	r8, r3
 8001674:	9b02      	ldr	r3, [sp, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x100>
 800167a:	e1ca      	b.n	8001a12 <__aeabi_dmul+0x496>
 800167c:	2b03      	cmp	r3, #3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x106>
 8001680:	e192      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d110      	bne.n	80016a8 <__aeabi_dmul+0x12c>
 8001686:	2300      	movs	r3, #0
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	e7d4      	b.n	8001638 <__aeabi_dmul+0xbc>
 800168e:	2201      	movs	r2, #1
 8001690:	087b      	lsrs	r3, r7, #1
 8001692:	403a      	ands	r2, r7
 8001694:	4313      	orrs	r3, r2
 8001696:	4652      	mov	r2, sl
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	4313      	orrs	r3, r2
 800169c:	4698      	mov	r8, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	469a      	mov	sl, r3
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4699      	mov	r9, r3
 80016a8:	465b      	mov	r3, fp
 80016aa:	1c58      	adds	r0, r3, #1
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	445b      	add	r3, fp
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x13c>
 80016b6:	e1b1      	b.n	8001a1c <__aeabi_dmul+0x4a0>
 80016b8:	4642      	mov	r2, r8
 80016ba:	0752      	lsls	r2, r2, #29
 80016bc:	d00b      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016be:	220f      	movs	r2, #15
 80016c0:	4641      	mov	r1, r8
 80016c2:	400a      	ands	r2, r1
 80016c4:	2a04      	cmp	r2, #4
 80016c6:	d006      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016c8:	4642      	mov	r2, r8
 80016ca:	1d11      	adds	r1, r2, #4
 80016cc:	4541      	cmp	r1, r8
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	4688      	mov	r8, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	4492      	add	sl, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	01d2      	lsls	r2, r2, #7
 80016da:	d506      	bpl.n	80016ea <__aeabi_dmul+0x16e>
 80016dc:	4652      	mov	r2, sl
 80016de:	4b80      	ldr	r3, [pc, #512]	@ (80018e0 <__aeabi_dmul+0x364>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	4692      	mov	sl, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	18c3      	adds	r3, r0, r3
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <__aeabi_dmul+0x368>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x176>
 80016f0:	e18f      	b.n	8001a12 <__aeabi_dmul+0x496>
 80016f2:	4642      	mov	r2, r8
 80016f4:	08d1      	lsrs	r1, r2, #3
 80016f6:	4652      	mov	r2, sl
 80016f8:	0752      	lsls	r2, r2, #29
 80016fa:	430a      	orrs	r2, r1
 80016fc:	4651      	mov	r1, sl
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	024c      	lsls	r4, r1, #9
 8001702:	0b24      	lsrs	r4, r4, #12
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e797      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001708:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <__aeabi_dmul+0x35c>)
 800170a:	4326      	orrs	r6, r4
 800170c:	469c      	mov	ip, r3
 800170e:	44e3      	add	fp, ip
 8001710:	2e00      	cmp	r6, #0
 8001712:	d100      	bne.n	8001716 <__aeabi_dmul+0x19a>
 8001714:	e16f      	b.n	80019f6 <__aeabi_dmul+0x47a>
 8001716:	2303      	movs	r3, #3
 8001718:	4649      	mov	r1, r9
 800171a:	431d      	orrs	r5, r3
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	4059      	eors	r1, r3
 8001720:	b2cb      	uxtb	r3, r1
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	2d0a      	cmp	r5, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x1ae>
 8001728:	e133      	b.n	8001992 <__aeabi_dmul+0x416>
 800172a:	2301      	movs	r3, #1
 800172c:	40ab      	lsls	r3, r5
 800172e:	001d      	movs	r5, r3
 8001730:	2303      	movs	r3, #3
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2288      	movs	r2, #136	@ 0x88
 8001736:	422a      	tst	r2, r5
 8001738:	d197      	bne.n	800166a <__aeabi_dmul+0xee>
 800173a:	4642      	mov	r2, r8
 800173c:	4643      	mov	r3, r8
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	0c12      	lsrs	r2, r2, #16
 8001742:	0016      	movs	r6, r2
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	0c1d      	lsrs	r5, r3, #16
 8001748:	0c03      	lsrs	r3, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4346      	muls	r6, r0
 8001750:	46b4      	mov	ip, r6
 8001752:	001e      	movs	r6, r3
 8001754:	436e      	muls	r6, r5
 8001756:	9600      	str	r6, [sp, #0]
 8001758:	0016      	movs	r6, r2
 800175a:	0007      	movs	r7, r0
 800175c:	435e      	muls	r6, r3
 800175e:	4661      	mov	r1, ip
 8001760:	46b0      	mov	r8, r6
 8001762:	436f      	muls	r7, r5
 8001764:	0c0e      	lsrs	r6, r1, #16
 8001766:	44b8      	add	r8, r7
 8001768:	4446      	add	r6, r8
 800176a:	42b7      	cmp	r7, r6
 800176c:	d905      	bls.n	800177a <__aeabi_dmul+0x1fe>
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	4688      	mov	r8, r1
 8001774:	9f00      	ldr	r7, [sp, #0]
 8001776:	4447      	add	r7, r8
 8001778:	9700      	str	r7, [sp, #0]
 800177a:	4661      	mov	r1, ip
 800177c:	0409      	lsls	r1, r1, #16
 800177e:	0c09      	lsrs	r1, r1, #16
 8001780:	0c37      	lsrs	r7, r6, #16
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	468c      	mov	ip, r1
 8001786:	0031      	movs	r1, r6
 8001788:	4461      	add	r1, ip
 800178a:	9101      	str	r1, [sp, #4]
 800178c:	0011      	movs	r1, r2
 800178e:	0c26      	lsrs	r6, r4, #16
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	0c24      	lsrs	r4, r4, #16
 8001794:	4361      	muls	r1, r4
 8001796:	468c      	mov	ip, r1
 8001798:	0021      	movs	r1, r4
 800179a:	4369      	muls	r1, r5
 800179c:	4689      	mov	r9, r1
 800179e:	4661      	mov	r1, ip
 80017a0:	0c09      	lsrs	r1, r1, #16
 80017a2:	4688      	mov	r8, r1
 80017a4:	4372      	muls	r2, r6
 80017a6:	444a      	add	r2, r9
 80017a8:	4442      	add	r2, r8
 80017aa:	4375      	muls	r5, r6
 80017ac:	4591      	cmp	r9, r2
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x23c>
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	4688      	mov	r8, r1
 80017b6:	4445      	add	r5, r8
 80017b8:	0c11      	lsrs	r1, r2, #16
 80017ba:	4688      	mov	r8, r1
 80017bc:	4661      	mov	r1, ip
 80017be:	0409      	lsls	r1, r1, #16
 80017c0:	0c09      	lsrs	r1, r1, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	0412      	lsls	r2, r2, #16
 80017c6:	4462      	add	r2, ip
 80017c8:	18b9      	adds	r1, r7, r2
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	4651      	mov	r1, sl
 80017ce:	0c09      	lsrs	r1, r1, #16
 80017d0:	468c      	mov	ip, r1
 80017d2:	4651      	mov	r1, sl
 80017d4:	040f      	lsls	r7, r1, #16
 80017d6:	0c3f      	lsrs	r7, r7, #16
 80017d8:	0039      	movs	r1, r7
 80017da:	4341      	muls	r1, r0
 80017dc:	4445      	add	r5, r8
 80017de:	4688      	mov	r8, r1
 80017e0:	4661      	mov	r1, ip
 80017e2:	4341      	muls	r1, r0
 80017e4:	468a      	mov	sl, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	4660      	mov	r0, ip
 80017ea:	0c09      	lsrs	r1, r1, #16
 80017ec:	4689      	mov	r9, r1
 80017ee:	4358      	muls	r0, r3
 80017f0:	437b      	muls	r3, r7
 80017f2:	4453      	add	r3, sl
 80017f4:	444b      	add	r3, r9
 80017f6:	459a      	cmp	sl, r3
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x286>
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0249      	lsls	r1, r1, #9
 80017fe:	4689      	mov	r9, r1
 8001800:	4448      	add	r0, r9
 8001802:	0c19      	lsrs	r1, r3, #16
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	4688      	mov	r8, r1
 800180e:	0039      	movs	r1, r7
 8001810:	4361      	muls	r1, r4
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	4443      	add	r3, r8
 8001816:	4688      	mov	r8, r1
 8001818:	4661      	mov	r1, ip
 800181a:	434c      	muls	r4, r1
 800181c:	4371      	muls	r1, r6
 800181e:	468c      	mov	ip, r1
 8001820:	4641      	mov	r1, r8
 8001822:	4377      	muls	r7, r6
 8001824:	0c0e      	lsrs	r6, r1, #16
 8001826:	193f      	adds	r7, r7, r4
 8001828:	19f6      	adds	r6, r6, r7
 800182a:	4448      	add	r0, r9
 800182c:	42b4      	cmp	r4, r6
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x2bc>
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	4689      	mov	r9, r1
 8001836:	44cc      	add	ip, r9
 8001838:	9902      	ldr	r1, [sp, #8]
 800183a:	9f00      	ldr	r7, [sp, #0]
 800183c:	4689      	mov	r9, r1
 800183e:	0431      	lsls	r1, r6, #16
 8001840:	444f      	add	r7, r9
 8001842:	4689      	mov	r9, r1
 8001844:	4641      	mov	r1, r8
 8001846:	4297      	cmp	r7, r2
 8001848:	4192      	sbcs	r2, r2
 800184a:	040c      	lsls	r4, r1, #16
 800184c:	0c24      	lsrs	r4, r4, #16
 800184e:	444c      	add	r4, r9
 8001850:	18ff      	adds	r7, r7, r3
 8001852:	4252      	negs	r2, r2
 8001854:	1964      	adds	r4, r4, r5
 8001856:	18a1      	adds	r1, r4, r2
 8001858:	429f      	cmp	r7, r3
 800185a:	419b      	sbcs	r3, r3
 800185c:	4688      	mov	r8, r1
 800185e:	4682      	mov	sl, r0
 8001860:	425b      	negs	r3, r3
 8001862:	4699      	mov	r9, r3
 8001864:	4590      	cmp	r8, r2
 8001866:	4192      	sbcs	r2, r2
 8001868:	42ac      	cmp	r4, r5
 800186a:	41a4      	sbcs	r4, r4
 800186c:	44c2      	add	sl, r8
 800186e:	44d1      	add	r9, sl
 8001870:	4252      	negs	r2, r2
 8001872:	4264      	negs	r4, r4
 8001874:	4314      	orrs	r4, r2
 8001876:	4599      	cmp	r9, r3
 8001878:	419b      	sbcs	r3, r3
 800187a:	4582      	cmp	sl, r0
 800187c:	4192      	sbcs	r2, r2
 800187e:	425b      	negs	r3, r3
 8001880:	4252      	negs	r2, r2
 8001882:	4313      	orrs	r3, r2
 8001884:	464a      	mov	r2, r9
 8001886:	0c36      	lsrs	r6, r6, #16
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	4463      	add	r3, ip
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	0dd2      	lsrs	r2, r2, #23
 8001892:	431a      	orrs	r2, r3
 8001894:	9901      	ldr	r1, [sp, #4]
 8001896:	4692      	mov	sl, r2
 8001898:	027a      	lsls	r2, r7, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	1e50      	subs	r0, r2, #1
 800189e:	4182      	sbcs	r2, r0
 80018a0:	0dff      	lsrs	r7, r7, #23
 80018a2:	4317      	orrs	r7, r2
 80018a4:	464a      	mov	r2, r9
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4317      	orrs	r7, r2
 80018aa:	46b8      	mov	r8, r7
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	d500      	bpl.n	80018b2 <__aeabi_dmul+0x336>
 80018b0:	e6ed      	b.n	800168e <__aeabi_dmul+0x112>
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <__aeabi_dmul+0x36c>)
 80018b4:	9a03      	ldr	r2, [sp, #12]
 80018b6:	445b      	add	r3, fp
 80018b8:	4691      	mov	r9, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x344>
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dmul+0x49e>
 80018c0:	003a      	movs	r2, r7
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dmul+0x34c>
 80018c6:	e710      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018c8:	220f      	movs	r2, #15
 80018ca:	4658      	mov	r0, fp
 80018cc:	403a      	ands	r2, r7
 80018ce:	2a04      	cmp	r2, #4
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dmul+0x358>
 80018d2:	e6f9      	b.n	80016c8 <__aeabi_dmul+0x14c>
 80018d4:	e709      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	fffffc01 	.word	0xfffffc01
 80018e0:	feffffff 	.word	0xfeffffff
 80018e4:	000007fe 	.word	0x000007fe
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	0022      	movs	r2, r4
 80018ee:	4332      	orrs	r2, r6
 80018f0:	d06f      	beq.n	80019d2 <__aeabi_dmul+0x456>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0x37c>
 80018f6:	e0c2      	b.n	8001a7e <__aeabi_dmul+0x502>
 80018f8:	0020      	movs	r0, r4
 80018fa:	f000 fddf 	bl	80024bc <__clzsi2>
 80018fe:	0002      	movs	r2, r0
 8001900:	0003      	movs	r3, r0
 8001902:	3a0b      	subs	r2, #11
 8001904:	201d      	movs	r0, #29
 8001906:	1a82      	subs	r2, r0, r2
 8001908:	0030      	movs	r0, r6
 800190a:	0019      	movs	r1, r3
 800190c:	40d0      	lsrs	r0, r2
 800190e:	3908      	subs	r1, #8
 8001910:	408c      	lsls	r4, r1
 8001912:	0002      	movs	r2, r0
 8001914:	4322      	orrs	r2, r4
 8001916:	0034      	movs	r4, r6
 8001918:	408c      	lsls	r4, r1
 800191a:	4659      	mov	r1, fp
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	4986      	ldr	r1, [pc, #536]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001920:	468b      	mov	fp, r1
 8001922:	449b      	add	fp, r3
 8001924:	2d0a      	cmp	r5, #10
 8001926:	dd00      	ble.n	800192a <__aeabi_dmul+0x3ae>
 8001928:	e6a4      	b.n	8001674 <__aeabi_dmul+0xf8>
 800192a:	4649      	mov	r1, r9
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	9401      	str	r4, [sp, #4]
 8001930:	4059      	eors	r1, r3
 8001932:	b2cb      	uxtb	r3, r1
 8001934:	0014      	movs	r4, r2
 8001936:	2000      	movs	r0, #0
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	2d02      	cmp	r5, #2
 800193c:	dd00      	ble.n	8001940 <__aeabi_dmul+0x3c4>
 800193e:	e667      	b.n	8001610 <__aeabi_dmul+0x94>
 8001940:	e6fb      	b.n	800173a <__aeabi_dmul+0x1be>
 8001942:	4653      	mov	r3, sl
 8001944:	4303      	orrs	r3, r0
 8001946:	4698      	mov	r8, r3
 8001948:	d03c      	beq.n	80019c4 <__aeabi_dmul+0x448>
 800194a:	4653      	mov	r3, sl
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dmul+0x3d6>
 8001950:	e0a3      	b.n	8001a9a <__aeabi_dmul+0x51e>
 8001952:	4650      	mov	r0, sl
 8001954:	f000 fdb2 	bl	80024bc <__clzsi2>
 8001958:	230b      	movs	r3, #11
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	0002      	movs	r2, r0
 8001960:	4484      	add	ip, r0
 8001962:	0011      	movs	r1, r2
 8001964:	4650      	mov	r0, sl
 8001966:	3908      	subs	r1, #8
 8001968:	4088      	lsls	r0, r1
 800196a:	231d      	movs	r3, #29
 800196c:	4680      	mov	r8, r0
 800196e:	4660      	mov	r0, ip
 8001970:	1a1b      	subs	r3, r3, r0
 8001972:	0020      	movs	r0, r4
 8001974:	40d8      	lsrs	r0, r3
 8001976:	0003      	movs	r3, r0
 8001978:	4640      	mov	r0, r8
 800197a:	4303      	orrs	r3, r0
 800197c:	469a      	mov	sl, r3
 800197e:	0023      	movs	r3, r4
 8001980:	408b      	lsls	r3, r1
 8001982:	4698      	mov	r8, r3
 8001984:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001986:	2500      	movs	r5, #0
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	469b      	mov	fp, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	e61a      	b.n	80015c8 <__aeabi_dmul+0x4c>
 8001992:	2d0f      	cmp	r5, #15
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x41c>
 8001996:	e0c9      	b.n	8001b2c <__aeabi_dmul+0x5b0>
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	4652      	mov	r2, sl
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	421a      	tst	r2, r3
 80019a0:	d002      	beq.n	80019a8 <__aeabi_dmul+0x42c>
 80019a2:	421c      	tst	r4, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x42c>
 80019a6:	e092      	b.n	8001ace <__aeabi_dmul+0x552>
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	4642      	mov	r2, r8
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	e63e      	b.n	8001636 <__aeabi_dmul+0xba>
 80019b8:	469b      	mov	fp, r3
 80019ba:	2303      	movs	r3, #3
 80019bc:	4680      	mov	r8, r0
 80019be:	250c      	movs	r5, #12
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	e601      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019c4:	2300      	movs	r3, #0
 80019c6:	469a      	mov	sl, r3
 80019c8:	469b      	mov	fp, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	2504      	movs	r5, #4
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e5fa      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019d2:	2101      	movs	r1, #1
 80019d4:	430d      	orrs	r5, r1
 80019d6:	2d0a      	cmp	r5, #10
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dmul+0x460>
 80019da:	e64b      	b.n	8001674 <__aeabi_dmul+0xf8>
 80019dc:	4649      	mov	r1, r9
 80019de:	9800      	ldr	r0, [sp, #0]
 80019e0:	4041      	eors	r1, r0
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2d02      	cmp	r5, #2
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dmul+0x470>
 80019ea:	e096      	b.n	8001b1a <__aeabi_dmul+0x59e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e60c      	b.n	8001610 <__aeabi_dmul+0x94>
 80019f6:	4649      	mov	r1, r9
 80019f8:	2302      	movs	r3, #2
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	432b      	orrs	r3, r5
 80019fe:	4051      	eors	r1, r2
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	9203      	str	r2, [sp, #12]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dmul+0x48e>
 8001a08:	e634      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d157      	bne.n	8001abe <__aeabi_dmul+0x542>
 8001a0e:	9b03      	ldr	r3, [sp, #12]
 8001a10:	4699      	mov	r9, r3
 8001a12:	2400      	movs	r4, #0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4b49      	ldr	r3, [pc, #292]	@ (8001b3c <__aeabi_dmul+0x5c0>)
 8001a18:	e60e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a1a:	4658      	mov	r0, fp
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	1ac9      	subs	r1, r1, r3
 8001a20:	2938      	cmp	r1, #56	@ 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dmul+0x4aa>
 8001a24:	e62f      	b.n	8001686 <__aeabi_dmul+0x10a>
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd56      	ble.n	8001ad8 <__aeabi_dmul+0x55c>
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	4654      	mov	r4, sl
 8001a2e:	4252      	negs	r2, r2
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	40dc      	lsrs	r4, r3
 8001a34:	2920      	cmp	r1, #32
 8001a36:	d007      	beq.n	8001a48 <__aeabi_dmul+0x4cc>
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <__aeabi_dmul+0x5c4>)
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4460      	add	r0, ip
 8001a42:	4083      	lsls	r3, r0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	000b      	movs	r3, r1
 8001a52:	4322      	orrs	r2, r4
 8001a54:	4013      	ands	r3, r2
 8001a56:	2400      	movs	r4, #0
 8001a58:	4211      	tst	r1, r2
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_dmul+0x4f4>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d05d      	beq.n	8001b20 <__aeabi_dmul+0x5a4>
 8001a64:	1d11      	adds	r1, r2, #4
 8001a66:	4291      	cmp	r1, r2
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	08d2      	lsrs	r2, r2, #3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	e5df      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	e5fa      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a7e:	9801      	ldr	r0, [sp, #4]
 8001a80:	f000 fd1c 	bl	80024bc <__clzsi2>
 8001a84:	0002      	movs	r2, r0
 8001a86:	0003      	movs	r3, r0
 8001a88:	3215      	adds	r2, #21
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	2a1c      	cmp	r2, #28
 8001a8e:	dc00      	bgt.n	8001a92 <__aeabi_dmul+0x516>
 8001a90:	e738      	b.n	8001904 <__aeabi_dmul+0x388>
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3808      	subs	r0, #8
 8001a96:	4082      	lsls	r2, r0
 8001a98:	e73f      	b.n	800191a <__aeabi_dmul+0x39e>
 8001a9a:	f000 fd0f 	bl	80024bc <__clzsi2>
 8001a9e:	2315      	movs	r3, #21
 8001aa0:	469c      	mov	ip, r3
 8001aa2:	4484      	add	ip, r0
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	3220      	adds	r2, #32
 8001aaa:	2b1c      	cmp	r3, #28
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x534>
 8001aae:	e758      	b.n	8001962 <__aeabi_dmul+0x3e6>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	3808      	subs	r0, #8
 8001ab8:	4083      	lsls	r3, r0
 8001aba:	469a      	mov	sl, r3
 8001abc:	e762      	b.n	8001984 <__aeabi_dmul+0x408>
 8001abe:	001d      	movs	r5, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	e5a2      	b.n	8001610 <__aeabi_dmul+0x94>
 8001aca:	9002      	str	r0, [sp, #8]
 8001acc:	e632      	b.n	8001734 <__aeabi_dmul+0x1b8>
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	9a01      	ldr	r2, [sp, #4]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e5ae      	b.n	8001636 <__aeabi_dmul+0xba>
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <__aeabi_dmul+0x5c8>)
 8001ada:	4652      	mov	r2, sl
 8001adc:	18c3      	adds	r3, r0, r3
 8001ade:	4640      	mov	r0, r8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	40c8      	lsrs	r0, r1
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4098      	lsls	r0, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4183      	sbcs	r3, r0
 8001af0:	4654      	mov	r4, sl
 8001af2:	431a      	orrs	r2, r3
 8001af4:	40cc      	lsrs	r4, r1
 8001af6:	0753      	lsls	r3, r2, #29
 8001af8:	d009      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001afa:	230f      	movs	r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d005      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001b02:	1d13      	adds	r3, r2, #4
 8001b04:	4293      	cmp	r3, r2
 8001b06:	4192      	sbcs	r2, r2
 8001b08:	4252      	negs	r2, r2
 8001b0a:	18a4      	adds	r4, r4, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	0223      	lsls	r3, r4, #8
 8001b10:	d508      	bpl.n	8001b24 <__aeabi_dmul+0x5a8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	2400      	movs	r4, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	e58e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	e58b      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e7a5      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b24:	0763      	lsls	r3, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e7a1      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b2c:	9b00      	ldr	r3, [sp, #0]
 8001b2e:	46a2      	mov	sl, r4
 8001b30:	4699      	mov	r9, r3
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	4698      	mov	r8, r3
 8001b36:	e737      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001b38:	fffffc0d 	.word	0xfffffc0d
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	0000043e 	.word	0x0000043e
 8001b44:	0000041e 	.word	0x0000041e

08001b48 <__aeabi_dsub>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	4645      	mov	r5, r8
 8001b50:	46de      	mov	lr, fp
 8001b52:	b5e0      	push	{r5, r6, r7, lr}
 8001b54:	b083      	sub	sp, #12
 8001b56:	9000      	str	r0, [sp, #0]
 8001b58:	9101      	str	r1, [sp, #4]
 8001b5a:	030c      	lsls	r4, r1, #12
 8001b5c:	004d      	lsls	r5, r1, #1
 8001b5e:	0fce      	lsrs	r6, r1, #31
 8001b60:	0a61      	lsrs	r1, r4, #9
 8001b62:	9c00      	ldr	r4, [sp, #0]
 8001b64:	005f      	lsls	r7, r3, #1
 8001b66:	0f64      	lsrs	r4, r4, #29
 8001b68:	430c      	orrs	r4, r1
 8001b6a:	9900      	ldr	r1, [sp, #0]
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	00c8      	lsls	r0, r1, #3
 8001b72:	0319      	lsls	r1, r3, #12
 8001b74:	0d7b      	lsrs	r3, r7, #21
 8001b76:	4699      	mov	r9, r3
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001eac <__aeabi_dsub+0x364>)
 8001b7c:	0fdb      	lsrs	r3, r3, #31
 8001b7e:	469c      	mov	ip, r3
 8001b80:	0a4b      	lsrs	r3, r1, #9
 8001b82:	9900      	ldr	r1, [sp, #0]
 8001b84:	4680      	mov	r8, r0
 8001b86:	0f49      	lsrs	r1, r1, #29
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	468b      	mov	fp, r1
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4692      	mov	sl, r2
 8001b92:	0d6d      	lsrs	r5, r5, #21
 8001b94:	45b9      	cmp	r9, r7
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x52>
 8001b98:	e0bf      	b.n	8001d1a <__aeabi_dsub+0x1d2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	4059      	eors	r1, r3
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	1aeb      	subs	r3, r5, r3
 8001ba6:	428e      	cmp	r6, r1
 8001ba8:	d075      	beq.n	8001c96 <__aeabi_dsub+0x14e>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dsub+0x68>
 8001bae:	e2a3      	b.n	80020f8 <__aeabi_dsub+0x5b0>
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x70>
 8001bb6:	e0ce      	b.n	8001d56 <__aeabi_dsub+0x20e>
 8001bb8:	42bd      	cmp	r5, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x76>
 8001bbc:	e200      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001bbe:	2701      	movs	r7, #1
 8001bc0:	2b38      	cmp	r3, #56	@ 0x38
 8001bc2:	dc19      	bgt.n	8001bf8 <__aeabi_dsub+0xb0>
 8001bc4:	2780      	movs	r7, #128	@ 0x80
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	043f      	lsls	r7, r7, #16
 8001bca:	4339      	orrs	r1, r7
 8001bcc:	468b      	mov	fp, r1
 8001bce:	2b1f      	cmp	r3, #31
 8001bd0:	dd00      	ble.n	8001bd4 <__aeabi_dsub+0x8c>
 8001bd2:	e1fa      	b.n	8001fca <__aeabi_dsub+0x482>
 8001bd4:	2720      	movs	r7, #32
 8001bd6:	1af9      	subs	r1, r7, r3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	4667      	mov	r7, ip
 8001bde:	40b9      	lsls	r1, r7
 8001be0:	000f      	movs	r7, r1
 8001be2:	0011      	movs	r1, r2
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	430f      	orrs	r7, r1
 8001be8:	4661      	mov	r1, ip
 8001bea:	408a      	lsls	r2, r1
 8001bec:	1e51      	subs	r1, r2, #1
 8001bee:	418a      	sbcs	r2, r1
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	40d9      	lsrs	r1, r3
 8001bf4:	4317      	orrs	r7, r2
 8001bf6:	1a64      	subs	r4, r4, r1
 8001bf8:	1bc7      	subs	r7, r0, r7
 8001bfa:	42b8      	cmp	r0, r7
 8001bfc:	4180      	sbcs	r0, r0
 8001bfe:	4240      	negs	r0, r0
 8001c00:	1a24      	subs	r4, r4, r0
 8001c02:	0223      	lsls	r3, r4, #8
 8001c04:	d400      	bmi.n	8001c08 <__aeabi_dsub+0xc0>
 8001c06:	e140      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0a64      	lsrs	r4, r4, #9
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0xca>
 8001c10:	e154      	b.n	8001ebc <__aeabi_dsub+0x374>
 8001c12:	0020      	movs	r0, r4
 8001c14:	f000 fc52 	bl	80024bc <__clzsi2>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	0038      	movs	r0, r7
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	409c      	lsls	r4, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409f      	lsls	r7, r3
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xea>
 8001c30:	e1a6      	b.n	8001f80 <__aeabi_dsub+0x438>
 8001c32:	1b58      	subs	r0, r3, r5
 8001c34:	3001      	adds	r0, #1
 8001c36:	1a09      	subs	r1, r1, r0
 8001c38:	003c      	movs	r4, r7
 8001c3a:	408f      	lsls	r7, r1
 8001c3c:	40c4      	lsrs	r4, r0
 8001c3e:	1e7b      	subs	r3, r7, #1
 8001c40:	419f      	sbcs	r7, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	408b      	lsls	r3, r1
 8001c46:	4327      	orrs	r7, r4
 8001c48:	431f      	orrs	r7, r3
 8001c4a:	40c2      	lsrs	r2, r0
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	0014      	movs	r4, r2
 8001c50:	2500      	movs	r5, #0
 8001c52:	4313      	orrs	r3, r2
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x110>
 8001c56:	e1f7      	b.n	8002048 <__aeabi_dsub+0x500>
 8001c58:	077b      	lsls	r3, r7, #29
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x116>
 8001c5c:	e377      	b.n	800234e <__aeabi_dsub+0x806>
 8001c5e:	230f      	movs	r3, #15
 8001c60:	0038      	movs	r0, r7
 8001c62:	403b      	ands	r3, r7
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d004      	beq.n	8001c72 <__aeabi_dsub+0x12a>
 8001c68:	1d38      	adds	r0, r7, #4
 8001c6a:	42b8      	cmp	r0, r7
 8001c6c:	41bf      	sbcs	r7, r7
 8001c6e:	427f      	negs	r7, r7
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	0223      	lsls	r3, r4, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x130>
 8001c76:	e368      	b.n	800234a <__aeabi_dsub+0x802>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	@ (8001eac <__aeabi_dsub+0x364>)
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	429d      	cmp	r5, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13a>
 8001c80:	e0f4      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001c84:	056d      	lsls	r5, r5, #21
 8001c86:	401c      	ands	r4, r3
 8001c88:	0d6d      	lsrs	r5, r5, #21
 8001c8a:	0767      	lsls	r7, r4, #29
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	4307      	orrs	r7, r0
 8001c92:	0b24      	lsrs	r4, r4, #12
 8001c94:	e0ec      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x154>
 8001c9a:	e329      	b.n	80022f0 <__aeabi_dsub+0x7a8>
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x15c>
 8001ca2:	e0d6      	b.n	8001e52 <__aeabi_dsub+0x30a>
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x164>
 8001caa:	e12e      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x16c>
 8001cb2:	e1e6      	b.n	8002082 <__aeabi_dsub+0x53a>
 8001cb4:	42bb      	cmp	r3, r7
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x172>
 8001cb8:	e182      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001cba:	2701      	movs	r7, #1
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	2938      	cmp	r1, #56	@ 0x38
 8001cc0:	dc14      	bgt.n	8001cec <__aeabi_dsub+0x1a4>
 8001cc2:	2b1f      	cmp	r3, #31
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x180>
 8001cc6:	e23c      	b.n	8002142 <__aeabi_dsub+0x5fa>
 8001cc8:	2720      	movs	r7, #32
 8001cca:	1af9      	subs	r1, r7, r3
 8001ccc:	468c      	mov	ip, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	4667      	mov	r7, ip
 8001cd2:	40b9      	lsls	r1, r7
 8001cd4:	000f      	movs	r7, r1
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	430f      	orrs	r7, r1
 8001cdc:	4661      	mov	r1, ip
 8001cde:	408a      	lsls	r2, r1
 8001ce0:	1e51      	subs	r1, r2, #1
 8001ce2:	418a      	sbcs	r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	40d9      	lsrs	r1, r3
 8001ce8:	4317      	orrs	r7, r2
 8001cea:	1864      	adds	r4, r4, r1
 8001cec:	183f      	adds	r7, r7, r0
 8001cee:	4287      	cmp	r7, r0
 8001cf0:	4180      	sbcs	r0, r0
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	0223      	lsls	r3, r4, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_dsub+0x1b4>
 8001cfa:	e0c6      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <__aeabi_dsub+0x364>)
 8001cfe:	3501      	adds	r5, #1
 8001d00:	429d      	cmp	r5, r3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x1be>
 8001d04:	e0b2      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001d06:	2101      	movs	r1, #1
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001d0a:	087a      	lsrs	r2, r7, #1
 8001d0c:	401c      	ands	r4, r3
 8001d0e:	4039      	ands	r1, r7
 8001d10:	430a      	orrs	r2, r1
 8001d12:	07e7      	lsls	r7, r4, #31
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0864      	lsrs	r4, r4, #1
 8001d18:	e79e      	b.n	8001c58 <__aeabi_dsub+0x110>
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <__aeabi_dsub+0x36c>)
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	468a      	mov	sl, r1
 8001d20:	18eb      	adds	r3, r5, r3
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d028      	beq.n	8001d78 <__aeabi_dsub+0x230>
 8001d26:	4566      	cmp	r6, ip
 8001d28:	d02c      	beq.n	8001d84 <__aeabi_dsub+0x23c>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d05b      	beq.n	8001de6 <__aeabi_dsub+0x29e>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1ec>
 8001d32:	e12c      	b.n	8001f8e <__aeabi_dsub+0x446>
 8001d34:	465b      	mov	r3, fp
 8001d36:	4666      	mov	r6, ip
 8001d38:	075f      	lsls	r7, r3, #29
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4317      	orrs	r7, r2
 8001d3e:	08dd      	lsrs	r5, r3, #3
 8001d40:	003b      	movs	r3, r7
 8001d42:	432b      	orrs	r3, r5
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x200>
 8001d46:	e0e2      	b.n	8001f0e <__aeabi_dsub+0x3c6>
 8001d48:	2480      	movs	r4, #128	@ 0x80
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	432c      	orrs	r4, r5
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4d56      	ldr	r5, [pc, #344]	@ (8001eac <__aeabi_dsub+0x364>)
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	e08c      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001d56:	4659      	mov	r1, fp
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x216>
 8001d5c:	e0d5      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x21e>
 8001d64:	e1b9      	b.n	80020da <__aeabi_dsub+0x592>
 8001d66:	42bb      	cmp	r3, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x224>
 8001d6a:	e1b1      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001d6c:	2701      	movs	r7, #1
 8001d6e:	000b      	movs	r3, r1
 8001d70:	2938      	cmp	r1, #56	@ 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x22e>
 8001d74:	e740      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001d76:	e72a      	b.n	8001bce <__aeabi_dsub+0x86>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	2701      	movs	r7, #1
 8001d7c:	4079      	eors	r1, r7
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4566      	cmp	r6, ip
 8001d82:	d1d2      	bne.n	8001d2a <__aeabi_dsub+0x1e2>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x242>
 8001d88:	e0c5      	b.n	8001f16 <__aeabi_dsub+0x3ce>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x248>
 8001d8e:	e155      	b.n	800203c <__aeabi_dsub+0x4f4>
 8001d90:	464b      	mov	r3, r9
 8001d92:	0025      	movs	r5, r4
 8001d94:	4305      	orrs	r5, r0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x252>
 8001d98:	e212      	b.n	80021c0 <__aeabi_dsub+0x678>
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x25c>
 8001da2:	e249      	b.n	8002238 <__aeabi_dsub+0x6f0>
 8001da4:	4d41      	ldr	r5, [pc, #260]	@ (8001eac <__aeabi_dsub+0x364>)
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x264>
 8001daa:	e28f      	b.n	80022cc <__aeabi_dsub+0x784>
 8001dac:	2701      	movs	r7, #1
 8001dae:	2938      	cmp	r1, #56	@ 0x38
 8001db0:	dc11      	bgt.n	8001dd6 <__aeabi_dsub+0x28e>
 8001db2:	4663      	mov	r3, ip
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	dd00      	ble.n	8001dba <__aeabi_dsub+0x272>
 8001db8:	e25b      	b.n	8002272 <__aeabi_dsub+0x72a>
 8001dba:	4661      	mov	r1, ip
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	0027      	movs	r7, r4
 8001dc0:	1a5b      	subs	r3, r3, r1
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	4098      	lsls	r0, r3
 8001dc6:	409f      	lsls	r7, r3
 8001dc8:	40cd      	lsrs	r5, r1
 8001dca:	1e43      	subs	r3, r0, #1
 8001dcc:	4198      	sbcs	r0, r3
 8001dce:	40cc      	lsrs	r4, r1
 8001dd0:	432f      	orrs	r7, r5
 8001dd2:	4307      	orrs	r7, r0
 8001dd4:	44a3      	add	fp, r4
 8001dd6:	18bf      	adds	r7, r7, r2
 8001dd8:	4297      	cmp	r7, r2
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	4252      	negs	r2, r2
 8001dde:	445a      	add	r2, fp
 8001de0:	0014      	movs	r4, r2
 8001de2:	464d      	mov	r5, r9
 8001de4:	e787      	b.n	8001cf6 <__aeabi_dsub+0x1ae>
 8001de6:	4f34      	ldr	r7, [pc, #208]	@ (8001eb8 <__aeabi_dsub+0x370>)
 8001de8:	1c6b      	adds	r3, r5, #1
 8001dea:	423b      	tst	r3, r7
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x2a8>
 8001dee:	e0b6      	b.n	8001f5e <__aeabi_dsub+0x416>
 8001df0:	4659      	mov	r1, fp
 8001df2:	0023      	movs	r3, r4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	000f      	movs	r7, r1
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x2b8>
 8001dfe:	e126      	b.n	800204e <__aeabi_dsub+0x506>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x2be>
 8001e04:	e1c0      	b.n	8002188 <__aeabi_dsub+0x640>
 8001e06:	2900      	cmp	r1, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x2c4>
 8001e0a:	e0a1      	b.n	8001f50 <__aeabi_dsub+0x408>
 8001e0c:	1a83      	subs	r3, r0, r2
 8001e0e:	4698      	mov	r8, r3
 8001e10:	465b      	mov	r3, fp
 8001e12:	4540      	cmp	r0, r8
 8001e14:	41ad      	sbcs	r5, r5
 8001e16:	1ae3      	subs	r3, r4, r3
 8001e18:	426d      	negs	r5, r5
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	2580      	movs	r5, #128	@ 0x80
 8001e1e:	042d      	lsls	r5, r5, #16
 8001e20:	422b      	tst	r3, r5
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x2de>
 8001e24:	e14b      	b.n	80020be <__aeabi_dsub+0x576>
 8001e26:	465b      	mov	r3, fp
 8001e28:	1a10      	subs	r0, r2, r0
 8001e2a:	4282      	cmp	r2, r0
 8001e2c:	4192      	sbcs	r2, r2
 8001e2e:	1b1c      	subs	r4, r3, r4
 8001e30:	0007      	movs	r7, r0
 8001e32:	2601      	movs	r6, #1
 8001e34:	4663      	mov	r3, ip
 8001e36:	4252      	negs	r2, r2
 8001e38:	1aa4      	subs	r4, r4, r2
 8001e3a:	4327      	orrs	r7, r4
 8001e3c:	401e      	ands	r6, r3
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x2fc>
 8001e42:	e142      	b.n	80020ca <__aeabi_dsub+0x582>
 8001e44:	422c      	tst	r4, r5
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x302>
 8001e48:	e26d      	b.n	8002326 <__aeabi_dsub+0x7de>
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	401c      	ands	r4, r3
 8001e50:	e71b      	b.n	8001c8a <__aeabi_dsub+0x142>
 8001e52:	42bd      	cmp	r5, r7
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x310>
 8001e56:	e13b      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001e58:	2701      	movs	r7, #1
 8001e5a:	2b38      	cmp	r3, #56	@ 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x318>
 8001e5e:	e745      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8001e60:	2780      	movs	r7, #128	@ 0x80
 8001e62:	4659      	mov	r1, fp
 8001e64:	043f      	lsls	r7, r7, #16
 8001e66:	4339      	orrs	r1, r7
 8001e68:	468b      	mov	fp, r1
 8001e6a:	e72a      	b.n	8001cc2 <__aeabi_dsub+0x17a>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2700      	movs	r7, #0
 8001e70:	052d      	lsls	r5, r5, #20
 8001e72:	4325      	orrs	r5, r4
 8001e74:	07f6      	lsls	r6, r6, #31
 8001e76:	4335      	orrs	r5, r6
 8001e78:	0038      	movs	r0, r7
 8001e7a:	0029      	movs	r1, r5
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e80:	46bb      	mov	fp, r7
 8001e82:	46b2      	mov	sl, r6
 8001e84:	46a9      	mov	r9, r5
 8001e86:	46a0      	mov	r8, r4
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	d004      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	403b      	ands	r3, r7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x120>
 8001e98:	002b      	movs	r3, r5
 8001e9a:	08f8      	lsrs	r0, r7, #3
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <__aeabi_dsub+0x364>)
 8001e9e:	0767      	lsls	r7, r4, #29
 8001ea0:	4307      	orrs	r7, r0
 8001ea2:	08e5      	lsrs	r5, r4, #3
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x362>
 8001ea8:	e74a      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001eaa:	e0a5      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	0038      	movs	r0, r7
 8001ebe:	f000 fafd 	bl	80024bc <__clzsi2>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x384>
 8001eca:	e6a7      	b.n	8001c1c <__aeabi_dsub+0xd4>
 8001ecc:	003a      	movs	r2, r7
 8001ece:	3808      	subs	r0, #8
 8001ed0:	4082      	lsls	r2, r0
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x390>
 8001ed6:	e08a      	b.n	8001fee <__aeabi_dsub+0x4a6>
 8001ed8:	1b5b      	subs	r3, r3, r5
 8001eda:	1c58      	adds	r0, r3, #1
 8001edc:	281f      	cmp	r0, #31
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dsub+0x39a>
 8001ee0:	e1d8      	b.n	8002294 <__aeabi_dsub+0x74c>
 8001ee2:	0017      	movs	r7, r2
 8001ee4:	3b1f      	subs	r3, #31
 8001ee6:	40df      	lsrs	r7, r3
 8001ee8:	2820      	cmp	r0, #32
 8001eea:	d005      	beq.n	8001ef8 <__aeabi_dsub+0x3b0>
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	1e53      	subs	r3, r2, #1
 8001ef4:	419a      	sbcs	r2, r3
 8001ef6:	4317      	orrs	r7, r2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x3b8>
 8001efe:	e0e5      	b.n	80020cc <__aeabi_dsub+0x584>
 8001f00:	077b      	lsls	r3, r7, #29
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x3be>
 8001f04:	e6ab      	b.n	8001c5e <__aeabi_dsub+0x116>
 8001f06:	002c      	movs	r4, r5
 8001f08:	e7c6      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f0a:	08c0      	lsrs	r0, r0, #3
 8001f0c:	e7c6      	b.n	8001e9c <__aeabi_dsub+0x354>
 8001f0e:	2700      	movs	r7, #0
 8001f10:	2400      	movs	r4, #0
 8001f12:	4dd1      	ldr	r5, [pc, #836]	@ (8002258 <__aeabi_dsub+0x710>)
 8001f14:	e7ac      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001f16:	4fd1      	ldr	r7, [pc, #836]	@ (800225c <__aeabi_dsub+0x714>)
 8001f18:	1c6b      	adds	r3, r5, #1
 8001f1a:	423b      	tst	r3, r7
 8001f1c:	d171      	bne.n	8002002 <__aeabi_dsub+0x4ba>
 8001f1e:	0023      	movs	r3, r4
 8001f20:	4303      	orrs	r3, r0
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e0>
 8001f26:	e14e      	b.n	80021c6 <__aeabi_dsub+0x67e>
 8001f28:	4657      	mov	r7, sl
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x3e8>
 8001f2e:	e1b5      	b.n	800229c <__aeabi_dsub+0x754>
 8001f30:	2f00      	cmp	r7, #0
 8001f32:	d00d      	beq.n	8001f50 <__aeabi_dsub+0x408>
 8001f34:	1883      	adds	r3, r0, r2
 8001f36:	4283      	cmp	r3, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	445c      	add	r4, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1824      	adds	r4, r4, r0
 8001f40:	0222      	lsls	r2, r4, #8
 8001f42:	d500      	bpl.n	8001f46 <__aeabi_dsub+0x3fe>
 8001f44:	e1c8      	b.n	80022d8 <__aeabi_dsub+0x790>
 8001f46:	001f      	movs	r7, r3
 8001f48:	4698      	mov	r8, r3
 8001f4a:	4327      	orrs	r7, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x408>
 8001f4e:	e0bc      	b.n	80020ca <__aeabi_dsub+0x582>
 8001f50:	4643      	mov	r3, r8
 8001f52:	0767      	lsls	r7, r4, #29
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	431f      	orrs	r7, r3
 8001f58:	08e5      	lsrs	r5, r4, #3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e04c      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001f5e:	1a83      	subs	r3, r0, r2
 8001f60:	4698      	mov	r8, r3
 8001f62:	465b      	mov	r3, fp
 8001f64:	4540      	cmp	r0, r8
 8001f66:	41bf      	sbcs	r7, r7
 8001f68:	1ae3      	subs	r3, r4, r3
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1bdb      	subs	r3, r3, r7
 8001f6e:	021f      	lsls	r7, r3, #8
 8001f70:	d47c      	bmi.n	800206c <__aeabi_dsub+0x524>
 8001f72:	4647      	mov	r7, r8
 8001f74:	431f      	orrs	r7, r3
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x432>
 8001f78:	e0a6      	b.n	80020c8 <__aeabi_dsub+0x580>
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	e645      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8001f80:	4cb7      	ldr	r4, [pc, #732]	@ (8002260 <__aeabi_dsub+0x718>)
 8001f82:	1aed      	subs	r5, r5, r3
 8001f84:	4014      	ands	r4, r2
 8001f86:	077b      	lsls	r3, r7, #29
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x444>
 8001f8a:	e780      	b.n	8001e8e <__aeabi_dsub+0x346>
 8001f8c:	e784      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f8e:	464b      	mov	r3, r9
 8001f90:	0025      	movs	r5, r4
 8001f92:	4305      	orrs	r5, r0
 8001f94:	d066      	beq.n	8002064 <__aeabi_dsub+0x51c>
 8001f96:	1e5f      	subs	r7, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x456>
 8001f9c:	e0fc      	b.n	8002198 <__aeabi_dsub+0x650>
 8001f9e:	4dae      	ldr	r5, [pc, #696]	@ (8002258 <__aeabi_dsub+0x710>)
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x45e>
 8001fa4:	e15e      	b.n	8002264 <__aeabi_dsub+0x71c>
 8001fa6:	4666      	mov	r6, ip
 8001fa8:	2f38      	cmp	r7, #56	@ 0x38
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dsub+0x466>
 8001fac:	e0b4      	b.n	8002118 <__aeabi_dsub+0x5d0>
 8001fae:	2001      	movs	r0, #1
 8001fb0:	1a17      	subs	r7, r2, r0
 8001fb2:	42ba      	cmp	r2, r7
 8001fb4:	4192      	sbcs	r2, r2
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	4252      	negs	r2, r2
 8001fba:	464d      	mov	r5, r9
 8001fbc:	1a9c      	subs	r4, r3, r2
 8001fbe:	e620      	b.n	8001c02 <__aeabi_dsub+0xba>
 8001fc0:	0767      	lsls	r7, r4, #29
 8001fc2:	08c0      	lsrs	r0, r0, #3
 8001fc4:	4307      	orrs	r7, r0
 8001fc6:	08e5      	lsrs	r5, r4, #3
 8001fc8:	e6ba      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001fca:	001f      	movs	r7, r3
 8001fcc:	4659      	mov	r1, fp
 8001fce:	3f20      	subs	r7, #32
 8001fd0:	40f9      	lsrs	r1, r7
 8001fd2:	000f      	movs	r7, r1
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x49c>
 8001fd8:	2140      	movs	r1, #64	@ 0x40
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	4659      	mov	r1, fp
 8001fde:	4099      	lsls	r1, r3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	4193      	sbcs	r3, r2
 8001fea:	431f      	orrs	r7, r3
 8001fec:	e604      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001fee:	1aeb      	subs	r3, r5, r3
 8001ff0:	4d9b      	ldr	r5, [pc, #620]	@ (8002260 <__aeabi_dsub+0x718>)
 8001ff2:	4015      	ands	r5, r2
 8001ff4:	076f      	lsls	r7, r5, #29
 8001ff6:	08ed      	lsrs	r5, r5, #3
 8001ff8:	032c      	lsls	r4, r5, #12
 8001ffa:	055d      	lsls	r5, r3, #21
 8001ffc:	0b24      	lsrs	r4, r4, #12
 8001ffe:	0d6d      	lsrs	r5, r5, #21
 8002000:	e736      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002002:	4d95      	ldr	r5, [pc, #596]	@ (8002258 <__aeabi_dsub+0x710>)
 8002004:	42ab      	cmp	r3, r5
 8002006:	d100      	bne.n	800200a <__aeabi_dsub+0x4c2>
 8002008:	e0d6      	b.n	80021b8 <__aeabi_dsub+0x670>
 800200a:	1882      	adds	r2, r0, r2
 800200c:	0021      	movs	r1, r4
 800200e:	4282      	cmp	r2, r0
 8002010:	4180      	sbcs	r0, r0
 8002012:	4459      	add	r1, fp
 8002014:	4240      	negs	r0, r0
 8002016:	1808      	adds	r0, r1, r0
 8002018:	07c7      	lsls	r7, r0, #31
 800201a:	0852      	lsrs	r2, r2, #1
 800201c:	4317      	orrs	r7, r2
 800201e:	0844      	lsrs	r4, r0, #1
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x4de>
 8002024:	e185      	b.n	8002332 <__aeabi_dsub+0x7ea>
 8002026:	220f      	movs	r2, #15
 8002028:	001d      	movs	r5, r3
 800202a:	403a      	ands	r2, r7
 800202c:	2a04      	cmp	r2, #4
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x4ea>
 8002030:	e61a      	b.n	8001c68 <__aeabi_dsub+0x120>
 8002032:	08ff      	lsrs	r7, r7, #3
 8002034:	0764      	lsls	r4, r4, #29
 8002036:	4327      	orrs	r7, r4
 8002038:	0905      	lsrs	r5, r0, #4
 800203a:	e7dd      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800203c:	465b      	mov	r3, fp
 800203e:	08d2      	lsrs	r2, r2, #3
 8002040:	075f      	lsls	r7, r3, #29
 8002042:	4317      	orrs	r7, r2
 8002044:	08dd      	lsrs	r5, r3, #3
 8002046:	e67b      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002048:	2700      	movs	r7, #0
 800204a:	2400      	movs	r4, #0
 800204c:	e710      	b.n	8001e70 <__aeabi_dsub+0x328>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x50c>
 8002052:	e0d6      	b.n	8002202 <__aeabi_dsub+0x6ba>
 8002054:	2900      	cmp	r1, #0
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x512>
 8002058:	e12f      	b.n	80022ba <__aeabi_dsub+0x772>
 800205a:	2480      	movs	r4, #128	@ 0x80
 800205c:	2600      	movs	r6, #0
 800205e:	4d7e      	ldr	r5, [pc, #504]	@ (8002258 <__aeabi_dsub+0x710>)
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	e705      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002064:	4666      	mov	r6, ip
 8002066:	465c      	mov	r4, fp
 8002068:	08d0      	lsrs	r0, r2, #3
 800206a:	e717      	b.n	8001e9c <__aeabi_dsub+0x354>
 800206c:	465b      	mov	r3, fp
 800206e:	1a17      	subs	r7, r2, r0
 8002070:	42ba      	cmp	r2, r7
 8002072:	4192      	sbcs	r2, r2
 8002074:	1b1c      	subs	r4, r3, r4
 8002076:	2601      	movs	r6, #1
 8002078:	4663      	mov	r3, ip
 800207a:	4252      	negs	r2, r2
 800207c:	1aa4      	subs	r4, r4, r2
 800207e:	401e      	ands	r6, r3
 8002080:	e5c4      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8002082:	1883      	adds	r3, r0, r2
 8002084:	4283      	cmp	r3, r0
 8002086:	4180      	sbcs	r0, r0
 8002088:	445c      	add	r4, fp
 800208a:	4240      	negs	r0, r0
 800208c:	1825      	adds	r5, r4, r0
 800208e:	022a      	lsls	r2, r5, #8
 8002090:	d400      	bmi.n	8002094 <__aeabi_dsub+0x54c>
 8002092:	e0da      	b.n	800224a <__aeabi_dsub+0x702>
 8002094:	4a72      	ldr	r2, [pc, #456]	@ (8002260 <__aeabi_dsub+0x718>)
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	4015      	ands	r5, r2
 800209a:	07ea      	lsls	r2, r5, #31
 800209c:	431a      	orrs	r2, r3
 800209e:	0869      	lsrs	r1, r5, #1
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x55e>
 80020a4:	e14a      	b.n	800233c <__aeabi_dsub+0x7f4>
 80020a6:	230f      	movs	r3, #15
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x568>
 80020ae:	e0fc      	b.n	80022aa <__aeabi_dsub+0x762>
 80020b0:	1d17      	adds	r7, r2, #4
 80020b2:	4297      	cmp	r7, r2
 80020b4:	41a4      	sbcs	r4, r4
 80020b6:	4264      	negs	r4, r4
 80020b8:	2502      	movs	r5, #2
 80020ba:	1864      	adds	r4, r4, r1
 80020bc:	e6ec      	b.n	8001e98 <__aeabi_dsub+0x350>
 80020be:	4647      	mov	r7, r8
 80020c0:	001c      	movs	r4, r3
 80020c2:	431f      	orrs	r7, r3
 80020c4:	d000      	beq.n	80020c8 <__aeabi_dsub+0x580>
 80020c6:	e743      	b.n	8001f50 <__aeabi_dsub+0x408>
 80020c8:	2600      	movs	r6, #0
 80020ca:	2500      	movs	r5, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6cf      	b.n	8001e70 <__aeabi_dsub+0x328>
 80020d0:	08c0      	lsrs	r0, r0, #3
 80020d2:	0767      	lsls	r7, r4, #29
 80020d4:	4307      	orrs	r7, r0
 80020d6:	08e5      	lsrs	r5, r4, #3
 80020d8:	e632      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80020da:	1a87      	subs	r7, r0, r2
 80020dc:	465b      	mov	r3, fp
 80020de:	42b8      	cmp	r0, r7
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	1ae4      	subs	r4, r4, r3
 80020e4:	4240      	negs	r0, r0
 80020e6:	1a24      	subs	r4, r4, r0
 80020e8:	0223      	lsls	r3, r4, #8
 80020ea:	d428      	bmi.n	800213e <__aeabi_dsub+0x5f6>
 80020ec:	0763      	lsls	r3, r4, #29
 80020ee:	08ff      	lsrs	r7, r7, #3
 80020f0:	431f      	orrs	r7, r3
 80020f2:	08e5      	lsrs	r5, r4, #3
 80020f4:	2301      	movs	r3, #1
 80020f6:	e77f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x5b6>
 80020fc:	e673      	b.n	8001de6 <__aeabi_dsub+0x29e>
 80020fe:	464b      	mov	r3, r9
 8002100:	1b5f      	subs	r7, r3, r5
 8002102:	003b      	movs	r3, r7
 8002104:	2d00      	cmp	r5, #0
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x5c2>
 8002108:	e742      	b.n	8001f90 <__aeabi_dsub+0x448>
 800210a:	2f38      	cmp	r7, #56	@ 0x38
 800210c:	dd00      	ble.n	8002110 <__aeabi_dsub+0x5c8>
 800210e:	e0ec      	b.n	80022ea <__aeabi_dsub+0x7a2>
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	000e      	movs	r6, r1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431c      	orrs	r4, r3
 8002118:	2f1f      	cmp	r7, #31
 800211a:	dc25      	bgt.n	8002168 <__aeabi_dsub+0x620>
 800211c:	2520      	movs	r5, #32
 800211e:	0023      	movs	r3, r4
 8002120:	1bed      	subs	r5, r5, r7
 8002122:	0001      	movs	r1, r0
 8002124:	40a8      	lsls	r0, r5
 8002126:	40ab      	lsls	r3, r5
 8002128:	40f9      	lsrs	r1, r7
 800212a:	1e45      	subs	r5, r0, #1
 800212c:	41a8      	sbcs	r0, r5
 800212e:	430b      	orrs	r3, r1
 8002130:	40fc      	lsrs	r4, r7
 8002132:	4318      	orrs	r0, r3
 8002134:	465b      	mov	r3, fp
 8002136:	1b1b      	subs	r3, r3, r4
 8002138:	469b      	mov	fp, r3
 800213a:	e739      	b.n	8001fb0 <__aeabi_dsub+0x468>
 800213c:	4666      	mov	r6, ip
 800213e:	2501      	movs	r5, #1
 8002140:	e562      	b.n	8001c08 <__aeabi_dsub+0xc0>
 8002142:	001f      	movs	r7, r3
 8002144:	4659      	mov	r1, fp
 8002146:	3f20      	subs	r7, #32
 8002148:	40f9      	lsrs	r1, r7
 800214a:	468c      	mov	ip, r1
 800214c:	2b20      	cmp	r3, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x614>
 8002150:	2740      	movs	r7, #64	@ 0x40
 8002152:	4659      	mov	r1, fp
 8002154:	1afb      	subs	r3, r7, r3
 8002156:	4099      	lsls	r1, r3
 8002158:	430a      	orrs	r2, r1
 800215a:	4692      	mov	sl, r2
 800215c:	4657      	mov	r7, sl
 800215e:	1e7b      	subs	r3, r7, #1
 8002160:	419f      	sbcs	r7, r3
 8002162:	4663      	mov	r3, ip
 8002164:	431f      	orrs	r7, r3
 8002166:	e5c1      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8002168:	003b      	movs	r3, r7
 800216a:	0025      	movs	r5, r4
 800216c:	3b20      	subs	r3, #32
 800216e:	40dd      	lsrs	r5, r3
 8002170:	2f20      	cmp	r7, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x636>
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	1bdb      	subs	r3, r3, r7
 8002178:	409c      	lsls	r4, r3
 800217a:	4320      	orrs	r0, r4
 800217c:	4680      	mov	r8, r0
 800217e:	4640      	mov	r0, r8
 8002180:	1e43      	subs	r3, r0, #1
 8002182:	4198      	sbcs	r0, r3
 8002184:	4328      	orrs	r0, r5
 8002186:	e713      	b.n	8001fb0 <__aeabi_dsub+0x468>
 8002188:	2900      	cmp	r1, #0
 800218a:	d09d      	beq.n	80020c8 <__aeabi_dsub+0x580>
 800218c:	2601      	movs	r6, #1
 800218e:	4663      	mov	r3, ip
 8002190:	465c      	mov	r4, fp
 8002192:	4690      	mov	r8, r2
 8002194:	401e      	ands	r6, r3
 8002196:	e6db      	b.n	8001f50 <__aeabi_dsub+0x408>
 8002198:	1a17      	subs	r7, r2, r0
 800219a:	465b      	mov	r3, fp
 800219c:	42ba      	cmp	r2, r7
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1b1c      	subs	r4, r3, r4
 80021a2:	4252      	negs	r2, r2
 80021a4:	1aa4      	subs	r4, r4, r2
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	d4c8      	bmi.n	800213c <__aeabi_dsub+0x5f4>
 80021aa:	0763      	lsls	r3, r4, #29
 80021ac:	08ff      	lsrs	r7, r7, #3
 80021ae:	431f      	orrs	r7, r3
 80021b0:	4666      	mov	r6, ip
 80021b2:	2301      	movs	r3, #1
 80021b4:	08e5      	lsrs	r5, r4, #3
 80021b6:	e71f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80021b8:	001d      	movs	r5, r3
 80021ba:	2400      	movs	r4, #0
 80021bc:	2700      	movs	r7, #0
 80021be:	e657      	b.n	8001e70 <__aeabi_dsub+0x328>
 80021c0:	465c      	mov	r4, fp
 80021c2:	08d0      	lsrs	r0, r2, #3
 80021c4:	e66a      	b.n	8001e9c <__aeabi_dsub+0x354>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x684>
 80021ca:	e737      	b.n	800203c <__aeabi_dsub+0x4f4>
 80021cc:	4653      	mov	r3, sl
 80021ce:	08c0      	lsrs	r0, r0, #3
 80021d0:	0767      	lsls	r7, r4, #29
 80021d2:	4307      	orrs	r7, r0
 80021d4:	08e5      	lsrs	r5, r4, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x694>
 80021da:	e5b1      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	421d      	tst	r5, r3
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x6ae>
 80021e4:	4659      	mov	r1, fp
 80021e6:	08c8      	lsrs	r0, r1, #3
 80021e8:	4218      	tst	r0, r3
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x6ae>
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	0749      	lsls	r1, r1, #29
 80021f0:	430a      	orrs	r2, r1
 80021f2:	0017      	movs	r7, r2
 80021f4:	0005      	movs	r5, r0
 80021f6:	0f7b      	lsrs	r3, r7, #29
 80021f8:	00ff      	lsls	r7, r7, #3
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	075b      	lsls	r3, r3, #29
 80021fe:	431f      	orrs	r7, r3
 8002200:	e59e      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002202:	08c0      	lsrs	r0, r0, #3
 8002204:	0763      	lsls	r3, r4, #29
 8002206:	4318      	orrs	r0, r3
 8002208:	08e5      	lsrs	r5, r4, #3
 800220a:	2900      	cmp	r1, #0
 800220c:	d053      	beq.n	80022b6 <__aeabi_dsub+0x76e>
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	421d      	tst	r5, r3
 8002214:	d00a      	beq.n	800222c <__aeabi_dsub+0x6e4>
 8002216:	4659      	mov	r1, fp
 8002218:	08cc      	lsrs	r4, r1, #3
 800221a:	421c      	tst	r4, r3
 800221c:	d106      	bne.n	800222c <__aeabi_dsub+0x6e4>
 800221e:	2601      	movs	r6, #1
 8002220:	4663      	mov	r3, ip
 8002222:	0025      	movs	r5, r4
 8002224:	08d0      	lsrs	r0, r2, #3
 8002226:	0749      	lsls	r1, r1, #29
 8002228:	4308      	orrs	r0, r1
 800222a:	401e      	ands	r6, r3
 800222c:	0f47      	lsrs	r7, r0, #29
 800222e:	00c0      	lsls	r0, r0, #3
 8002230:	08c0      	lsrs	r0, r0, #3
 8002232:	077f      	lsls	r7, r7, #29
 8002234:	4307      	orrs	r7, r0
 8002236:	e583      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002238:	1883      	adds	r3, r0, r2
 800223a:	4293      	cmp	r3, r2
 800223c:	4192      	sbcs	r2, r2
 800223e:	445c      	add	r4, fp
 8002240:	4252      	negs	r2, r2
 8002242:	18a5      	adds	r5, r4, r2
 8002244:	022a      	lsls	r2, r5, #8
 8002246:	d500      	bpl.n	800224a <__aeabi_dsub+0x702>
 8002248:	e724      	b.n	8002094 <__aeabi_dsub+0x54c>
 800224a:	076f      	lsls	r7, r5, #29
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	431f      	orrs	r7, r3
 8002250:	08ed      	lsrs	r5, r5, #3
 8002252:	2301      	movs	r3, #1
 8002254:	e6d0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	000007fe 	.word	0x000007fe
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	465b      	mov	r3, fp
 8002266:	08d2      	lsrs	r2, r2, #3
 8002268:	075f      	lsls	r7, r3, #29
 800226a:	4666      	mov	r6, ip
 800226c:	4317      	orrs	r7, r2
 800226e:	08dd      	lsrs	r5, r3, #3
 8002270:	e566      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002272:	0025      	movs	r5, r4
 8002274:	3b20      	subs	r3, #32
 8002276:	40dd      	lsrs	r5, r3
 8002278:	4663      	mov	r3, ip
 800227a:	2b20      	cmp	r3, #32
 800227c:	d005      	beq.n	800228a <__aeabi_dsub+0x742>
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	4661      	mov	r1, ip
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	409c      	lsls	r4, r3
 8002286:	4320      	orrs	r0, r4
 8002288:	4680      	mov	r8, r0
 800228a:	4647      	mov	r7, r8
 800228c:	1e7b      	subs	r3, r7, #1
 800228e:	419f      	sbcs	r7, r3
 8002290:	432f      	orrs	r7, r5
 8002292:	e5a0      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002294:	2120      	movs	r1, #32
 8002296:	2700      	movs	r7, #0
 8002298:	1a09      	subs	r1, r1, r0
 800229a:	e4d2      	b.n	8001c42 <__aeabi_dsub+0xfa>
 800229c:	2f00      	cmp	r7, #0
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x75a>
 80022a0:	e713      	b.n	80020ca <__aeabi_dsub+0x582>
 80022a2:	465c      	mov	r4, fp
 80022a4:	0017      	movs	r7, r2
 80022a6:	2500      	movs	r5, #0
 80022a8:	e5f6      	b.n	8001e98 <__aeabi_dsub+0x350>
 80022aa:	08d7      	lsrs	r7, r2, #3
 80022ac:	0749      	lsls	r1, r1, #29
 80022ae:	2302      	movs	r3, #2
 80022b0:	430f      	orrs	r7, r1
 80022b2:	092d      	lsrs	r5, r5, #4
 80022b4:	e6a0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80022b6:	0007      	movs	r7, r0
 80022b8:	e542      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022ba:	465b      	mov	r3, fp
 80022bc:	2601      	movs	r6, #1
 80022be:	075f      	lsls	r7, r3, #29
 80022c0:	08dd      	lsrs	r5, r3, #3
 80022c2:	4663      	mov	r3, ip
 80022c4:	08d2      	lsrs	r2, r2, #3
 80022c6:	4317      	orrs	r7, r2
 80022c8:	401e      	ands	r6, r3
 80022ca:	e539      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022cc:	465b      	mov	r3, fp
 80022ce:	08d2      	lsrs	r2, r2, #3
 80022d0:	075f      	lsls	r7, r3, #29
 80022d2:	4317      	orrs	r7, r2
 80022d4:	08dd      	lsrs	r5, r3, #3
 80022d6:	e533      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002354 <__aeabi_dsub+0x80c>)
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	4022      	ands	r2, r4
 80022de:	0757      	lsls	r7, r2, #29
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	2501      	movs	r5, #1
 80022e4:	431f      	orrs	r7, r3
 80022e6:	0b14      	lsrs	r4, r2, #12
 80022e8:	e5c2      	b.n	8001e70 <__aeabi_dsub+0x328>
 80022ea:	000e      	movs	r6, r1
 80022ec:	2001      	movs	r0, #1
 80022ee:	e65f      	b.n	8001fb0 <__aeabi_dsub+0x468>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <__aeabi_dsub+0x7c8>
 80022f4:	464b      	mov	r3, r9
 80022f6:	1b5b      	subs	r3, r3, r5
 80022f8:	469c      	mov	ip, r3
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x7b8>
 80022fe:	e548      	b.n	8001d92 <__aeabi_dsub+0x24a>
 8002300:	2701      	movs	r7, #1
 8002302:	2b38      	cmp	r3, #56	@ 0x38
 8002304:	dd00      	ble.n	8002308 <__aeabi_dsub+0x7c0>
 8002306:	e566      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431c      	orrs	r4, r3
 800230e:	e550      	b.n	8001db2 <__aeabi_dsub+0x26a>
 8002310:	1c6b      	adds	r3, r5, #1
 8002312:	4d11      	ldr	r5, [pc, #68]	@ (8002358 <__aeabi_dsub+0x810>)
 8002314:	422b      	tst	r3, r5
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x7d2>
 8002318:	e673      	b.n	8002002 <__aeabi_dsub+0x4ba>
 800231a:	4659      	mov	r1, fp
 800231c:	0023      	movs	r3, r4
 800231e:	4311      	orrs	r1, r2
 8002320:	468a      	mov	sl, r1
 8002322:	4303      	orrs	r3, r0
 8002324:	e600      	b.n	8001f28 <__aeabi_dsub+0x3e0>
 8002326:	0767      	lsls	r7, r4, #29
 8002328:	08c0      	lsrs	r0, r0, #3
 800232a:	2300      	movs	r3, #0
 800232c:	4307      	orrs	r7, r0
 800232e:	08e5      	lsrs	r5, r4, #3
 8002330:	e662      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002332:	0764      	lsls	r4, r4, #29
 8002334:	08ff      	lsrs	r7, r7, #3
 8002336:	4327      	orrs	r7, r4
 8002338:	0905      	lsrs	r5, r0, #4
 800233a:	e65d      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800233c:	08d2      	lsrs	r2, r2, #3
 800233e:	0749      	lsls	r1, r1, #29
 8002340:	4311      	orrs	r1, r2
 8002342:	000f      	movs	r7, r1
 8002344:	2302      	movs	r3, #2
 8002346:	092d      	lsrs	r5, r5, #4
 8002348:	e656      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800234a:	0007      	movs	r7, r0
 800234c:	e5a4      	b.n	8001e98 <__aeabi_dsub+0x350>
 800234e:	0038      	movs	r0, r7
 8002350:	e48f      	b.n	8001c72 <__aeabi_dsub+0x12a>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	ff7fffff 	.word	0xff7fffff
 8002358:	000007fe 	.word	0x000007fe

0800235c <__aeabi_dcmpun>:
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	46c6      	mov	lr, r8
 8002360:	031e      	lsls	r6, r3, #12
 8002362:	0b36      	lsrs	r6, r6, #12
 8002364:	46b0      	mov	r8, r6
 8002366:	4e0d      	ldr	r6, [pc, #52]	@ (800239c <__aeabi_dcmpun+0x40>)
 8002368:	030c      	lsls	r4, r1, #12
 800236a:	004d      	lsls	r5, r1, #1
 800236c:	005f      	lsls	r7, r3, #1
 800236e:	b500      	push	{lr}
 8002370:	0b24      	lsrs	r4, r4, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	0d7f      	lsrs	r7, r7, #21
 8002376:	42b5      	cmp	r5, r6
 8002378:	d00b      	beq.n	8002392 <__aeabi_dcmpun+0x36>
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <__aeabi_dcmpun+0x40>)
 800237c:	2000      	movs	r0, #0
 800237e:	428f      	cmp	r7, r1
 8002380:	d104      	bne.n	800238c <__aeabi_dcmpun+0x30>
 8002382:	4646      	mov	r6, r8
 8002384:	4316      	orrs	r6, r2
 8002386:	0030      	movs	r0, r6
 8002388:	1e43      	subs	r3, r0, #1
 800238a:	4198      	sbcs	r0, r3
 800238c:	bc80      	pop	{r7}
 800238e:	46b8      	mov	r8, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002392:	4304      	orrs	r4, r0
 8002394:	2001      	movs	r0, #1
 8002396:	2c00      	cmp	r4, #0
 8002398:	d1f8      	bne.n	800238c <__aeabi_dcmpun+0x30>
 800239a:	e7ee      	b.n	800237a <__aeabi_dcmpun+0x1e>
 800239c:	000007ff 	.word	0x000007ff

080023a0 <__aeabi_d2iz>:
 80023a0:	000b      	movs	r3, r1
 80023a2:	0002      	movs	r2, r0
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d16      	ldr	r5, [pc, #88]	@ (8002400 <__aeabi_d2iz+0x60>)
 80023a8:	030c      	lsls	r4, r1, #12
 80023aa:	b082      	sub	sp, #8
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0fde      	lsrs	r6, r3, #31
 80023ba:	42a9      	cmp	r1, r5
 80023bc:	dd04      	ble.n	80023c8 <__aeabi_d2iz+0x28>
 80023be:	4811      	ldr	r0, [pc, #68]	@ (8002404 <__aeabi_d2iz+0x64>)
 80023c0:	4281      	cmp	r1, r0
 80023c2:	dd03      	ble.n	80023cc <__aeabi_d2iz+0x2c>
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <__aeabi_d2iz+0x68>)
 80023c6:	18f0      	adds	r0, r6, r3
 80023c8:	b002      	add	sp, #8
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	2080      	movs	r0, #128	@ 0x80
 80023ce:	0340      	lsls	r0, r0, #13
 80023d0:	4320      	orrs	r0, r4
 80023d2:	4c0e      	ldr	r4, [pc, #56]	@ (800240c <__aeabi_d2iz+0x6c>)
 80023d4:	1a64      	subs	r4, r4, r1
 80023d6:	2c1f      	cmp	r4, #31
 80023d8:	dd08      	ble.n	80023ec <__aeabi_d2iz+0x4c>
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <__aeabi_d2iz+0x70>)
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	40d8      	lsrs	r0, r3
 80023e0:	0003      	movs	r3, r0
 80023e2:	4258      	negs	r0, r3
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	d1ef      	bne.n	80023c8 <__aeabi_d2iz+0x28>
 80023e8:	0018      	movs	r0, r3
 80023ea:	e7ed      	b.n	80023c8 <__aeabi_d2iz+0x28>
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <__aeabi_d2iz+0x74>)
 80023ee:	9a00      	ldr	r2, [sp, #0]
 80023f0:	469c      	mov	ip, r3
 80023f2:	0003      	movs	r3, r0
 80023f4:	4461      	add	r1, ip
 80023f6:	408b      	lsls	r3, r1
 80023f8:	40e2      	lsrs	r2, r4
 80023fa:	4313      	orrs	r3, r2
 80023fc:	e7f1      	b.n	80023e2 <__aeabi_d2iz+0x42>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	000003fe 	.word	0x000003fe
 8002404:	0000041d 	.word	0x0000041d
 8002408:	7fffffff 	.word	0x7fffffff
 800240c:	00000433 	.word	0x00000433
 8002410:	00000413 	.word	0x00000413
 8002414:	fffffbed 	.word	0xfffffbed

08002418 <__aeabi_i2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2800      	cmp	r0, #0
 800241c:	d016      	beq.n	800244c <__aeabi_i2d+0x34>
 800241e:	17c3      	asrs	r3, r0, #31
 8002420:	18c5      	adds	r5, r0, r3
 8002422:	405d      	eors	r5, r3
 8002424:	0fc4      	lsrs	r4, r0, #31
 8002426:	0028      	movs	r0, r5
 8002428:	f000 f848 	bl	80024bc <__clzsi2>
 800242c:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <__aeabi_i2d+0x58>)
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	280a      	cmp	r0, #10
 8002436:	dc14      	bgt.n	8002462 <__aeabi_i2d+0x4a>
 8002438:	0002      	movs	r2, r0
 800243a:	002e      	movs	r6, r5
 800243c:	3215      	adds	r2, #21
 800243e:	4096      	lsls	r6, r2
 8002440:	220b      	movs	r2, #11
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d5      	lsrs	r5, r2
 8002446:	032d      	lsls	r5, r5, #12
 8002448:	0b2d      	lsrs	r5, r5, #12
 800244a:	e003      	b.n	8002454 <__aeabi_i2d+0x3c>
 800244c:	2400      	movs	r4, #0
 800244e:	2300      	movs	r3, #0
 8002450:	2500      	movs	r5, #0
 8002452:	2600      	movs	r6, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	432b      	orrs	r3, r5
 8002458:	07e4      	lsls	r4, r4, #31
 800245a:	4323      	orrs	r3, r4
 800245c:	0030      	movs	r0, r6
 800245e:	0019      	movs	r1, r3
 8002460:	bd70      	pop	{r4, r5, r6, pc}
 8002462:	380b      	subs	r0, #11
 8002464:	4085      	lsls	r5, r0
 8002466:	032d      	lsls	r5, r5, #12
 8002468:	2600      	movs	r6, #0
 800246a:	0b2d      	lsrs	r5, r5, #12
 800246c:	e7f2      	b.n	8002454 <__aeabi_i2d+0x3c>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	0000041e 	.word	0x0000041e

08002474 <__aeabi_ui2d>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e04      	subs	r4, r0, #0
 8002478:	d010      	beq.n	800249c <__aeabi_ui2d+0x28>
 800247a:	f000 f81f 	bl	80024bc <__clzsi2>
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <__aeabi_ui2d+0x44>)
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	280a      	cmp	r0, #10
 8002488:	dc0f      	bgt.n	80024aa <__aeabi_ui2d+0x36>
 800248a:	220b      	movs	r2, #11
 800248c:	0021      	movs	r1, r4
 800248e:	1a12      	subs	r2, r2, r0
 8002490:	40d1      	lsrs	r1, r2
 8002492:	3015      	adds	r0, #21
 8002494:	030a      	lsls	r2, r1, #12
 8002496:	4084      	lsls	r4, r0
 8002498:	0b12      	lsrs	r2, r2, #12
 800249a:	e001      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	4313      	orrs	r3, r2
 80024a4:	0020      	movs	r0, r4
 80024a6:	0019      	movs	r1, r3
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	0022      	movs	r2, r4
 80024ac:	380b      	subs	r0, #11
 80024ae:	4082      	lsls	r2, r0
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	2400      	movs	r4, #0
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	e7f3      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	@ (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <Oled_init>:
#include <stdio.h>
#include "OLED_WS0010.h"

Oled_HandleTypeDef Oled_init(GPIO_TypeDef* rs_port, uint16_t rs_pin,
		GPIO_TypeDef* en_port, uint16_t en_pin, GPIO_TypeDef* data_port[],
		uint16_t data_pin[]) {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
	Oled_HandleTypeDef oled;
	oled.rs_pin = rs_pin;
 8002508:	2110      	movs	r1, #16
 800250a:	187b      	adds	r3, r7, r1
 800250c:	1dba      	adds	r2, r7, #6
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	809a      	strh	r2, [r3, #4]
	oled.rs_port = rs_port;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
	oled.enable_pin = en_pin;
 8002518:	187a      	adds	r2, r7, r1
 800251a:	2338      	movs	r3, #56	@ 0x38
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	8193      	strh	r3, [r2, #12]
	oled.enable_port = en_port;
 8002522:	000c      	movs	r4, r1
 8002524:	193b      	adds	r3, r7, r4
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]
	oled.data_pin = data_pin;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800252e:	615a      	str	r2, [r3, #20]
	oled.data_port = data_port;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	611a      	str	r2, [r3, #16]

	Oled_writeCommand(&oled, 0x33);
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2133      	movs	r1, #51	@ 0x33
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f975 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x32);
 8002540:	193b      	adds	r3, r7, r4
 8002542:	2132      	movs	r1, #50	@ 0x32
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f970 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x28);
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2128      	movs	r1, #40	@ 0x28
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f96b 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002554:	193b      	adds	r3, r7, r4
 8002556:	2101      	movs	r1, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f966 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x08 | 0x04);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	210c      	movs	r1, #12
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f961 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x02);
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2106      	movs	r1, #6
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f95c 	bl	800282a <Oled_writeCommand>

	//WS0010
	Oled_writeCommand(&oled, 0x08);
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2108      	movs	r1, #8
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f957 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x17);
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2117      	movs	r1, #23
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f952 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2101      	movs	r1, #1
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f94d 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x08);
 8002590:	193b      	adds	r3, r7, r4
 8002592:	210c      	movs	r1, #12
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f948 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, OLED_CLEAR_DISPLAY);
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f943 	bl	800282a <Oled_writeCommand>

	return oled;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025aa:	c313      	stmia	r3!, {r0, r1, r4}
 80025ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ae:	c313      	stmia	r3!, {r0, r1, r4}
}
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00b      	add	sp, #44	@ 0x2c
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <refresh_displayed_info>:
void refresh_displayed_info( Oled_HandleTypeDef *oled, double set_temp_inside, double current_temp_inside){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b08d      	sub	sp, #52	@ 0x34
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	603a      	str	r2, [r7, #0]
 80025c2:	607b      	str	r3, [r7, #4]
	char set_temp_inside_string [8] = {0};
 80025c4:	2420      	movs	r4, #32
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00d fca0 	bl	800ff14 <memset>
	char current_temp_inside_string [8] = {0};
 80025d4:	2518      	movs	r5, #24
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	0018      	movs	r0, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f00d fc98 	bl	800ff14 <memset>
	char celsius_unit[] = {223, 'C', '\0'}; // 223 stands for °
 80025e4:	2614      	movs	r6, #20
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <refresh_displayed_info+0xe4>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	8019      	strh	r1, [r3, #0]
 80025ee:	7892      	ldrb	r2, [r2, #2]
 80025f0:	709a      	strb	r2, [r3, #2]

	Oled_cursor(oled, 0, 0);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f869 	bl	80026d0 <Oled_cursor>
	memset(set_temp_inside_string, (int)' ', 8);
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	2208      	movs	r2, #8
 8002602:	2120      	movs	r1, #32
 8002604:	0018      	movs	r0, r3
 8002606:	f00d fc85 	bl	800ff14 <memset>
	snprintf(set_temp_inside_string,8,"%.1lf",set_temp_inside);
 800260a:	4925      	ldr	r1, [pc, #148]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800260c:	1938      	adds	r0, r7, r4
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	000a      	movs	r2, r1
 8002618:	2108      	movs	r1, #8
 800261a:	f00d fbf9 	bl	800fe10 <sniprintf>
	Oled_string(oled, set_temp_inside_string);
 800261e:	193a      	adds	r2, r7, r4
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f886 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 0,6);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2206      	movs	r2, #6
 800262e:	2100      	movs	r1, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f84d 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002636:	19ba      	adds	r2, r7, r6
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f87a 	bl	8002736 <Oled_string>

	Oled_cursor(oled, 1, 0);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f841 	bl	80026d0 <Oled_cursor>
	memset(current_temp_inside_string, (int)' ', 8);
 800264e:	197b      	adds	r3, r7, r5
 8002650:	2208      	movs	r2, #8
 8002652:	2120      	movs	r1, #32
 8002654:	0018      	movs	r0, r3
 8002656:	f00d fc5d 	bl	800ff14 <memset>
	snprintf(current_temp_inside_string,8,"%.1lf",current_temp_inside);
 800265a:	4911      	ldr	r1, [pc, #68]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800265c:	1978      	adds	r0, r7, r5
 800265e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	9200      	str	r2, [sp, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	000a      	movs	r2, r1
 8002668:	2108      	movs	r1, #8
 800266a:	f00d fbd1 	bl	800fe10 <sniprintf>
	Oled_string(oled, current_temp_inside_string);
 800266e:	197a      	adds	r2, r7, r5
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f85e 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 1,6);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2206      	movs	r2, #6
 800267e:	2101      	movs	r1, #1
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f825 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002686:	19ba      	adds	r2, r7, r6
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f852 	bl	8002736 <Oled_string>
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b00b      	add	sp, #44	@ 0x2c
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	08012b28 	.word	0x08012b28
 80026a0:	08012b20 	.word	0x08012b20

080026a4 <Oled_resupply_power>:

void Oled_resupply_power(Oled_HandleTypeDef *oled){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	uint8_t command = OLED_PWRDWN;
 80026ac:	210f      	movs	r1, #15
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2213      	movs	r2, #19
 80026b2:	701a      	strb	r2, [r3, #0]
	Oled_writeCommand(oled,command);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f8b4 	bl	800282a <Oled_writeCommand>
	HAL_Delay(100);
 80026c2:	2064      	movs	r0, #100	@ 0x64
 80026c4:	f001 ff04 	bl	80044d0 <HAL_Delay>
//	command = OLED_PWRUP;
//	Oled_writeCommand(oled,command);

}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <Oled_cursor>:
	char buf[17];
	sprintf(buf, "%d", value);
	Oled_string(oled, buf);
}

void Oled_cursor(Oled_HandleTypeDef *oled, uint8_t row, uint8_t col) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	1cfb      	adds	r3, r7, #3
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c0a      	adds	r2, r1, #0
 80026e6:	701a      	strb	r2, [r3, #0]
	uint8_t ROW[] = { 0x00, 0x40, 0x10, 0x50 };
 80026e8:	210c      	movs	r1, #12
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <Oled_cursor+0x48>)
 80026ee:	601a      	str	r2, [r3, #0]
	Oled_writeCommand(oled, 0x80 + ROW[row] + col);
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	5cd2      	ldrb	r2, [r2, r3]
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b80      	subs	r3, #128	@ 0x80
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f88e 	bl	800282a <Oled_writeCommand>
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	50104000 	.word	0x50104000

0800271c <Oled_clear>:

void Oled_blink(Oled_HandleTypeDef *oled) {
	Oled_writeCommand(oled, 0x08 | 0x04 | 0x02 | 0x01);
}

void Oled_clear(Oled_HandleTypeDef *oled) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	Oled_writeCommand(oled, OLED_CLEAR_DISPLAY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2101      	movs	r1, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f87e 	bl	800282a <Oled_writeCommand>
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <Oled_string>:
	if (0 <= y && y <= 1) {
		Oled_writeCommand(oled, 0x80 | y);
	}
}

void Oled_string(Oled_HandleTypeDef *oled, char * string) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	char temp;
	while ((temp = *string++)) {
 8002740:	e007      	b.n	8002752 <Oled_string+0x1c>
		Oled_writeData(oled, temp);
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f892 	bl	8002876 <Oled_writeData>
	while ((temp = *string++)) {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	603a      	str	r2, [r7, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	187a      	adds	r2, r7, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	7013      	strb	r3, [r2, #0]
 8002760:	187b      	adds	r3, r7, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ec      	bne.n	8002742 <Oled_string+0xc>
	}
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <Oled_write>:

void Oled_write(Oled_HandleTypeDef *oled, uint8_t data) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	000a      	movs	r2, r1
 800277c:	1cfb      	adds	r3, r7, #3
 800277e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(oled->data_port[0], oled->data_pin[0], data & (1 << 0));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	8819      	ldrh	r1, [r3, #0]
 800278c:	1cfb      	adds	r3, r7, #3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	f002 ff27 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[1], oled->data_pin[1], data & (1 << 1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	3304      	adds	r3, #4
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	3302      	adds	r3, #2
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	1cfb      	adds	r3, r7, #3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	001a      	movs	r2, r3
 80027b8:	f002 ff17 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[2], oled->data_pin[2], data & (1 << 2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	3308      	adds	r3, #8
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	3304      	adds	r3, #4
 80027ca:	8819      	ldrh	r1, [r3, #0]
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	f002 ff07 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[3], oled->data_pin[3], data & (1 << 3));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	3306      	adds	r3, #6
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	1cfb      	adds	r3, r7, #3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	f002 fef7 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	899b      	ldrh	r3, [r3, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	0019      	movs	r1, r3
 8002808:	f002 feef 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f001 fe5f 	bl	80044d0 <HAL_Delay>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	899b      	ldrh	r3, [r3, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	0019      	movs	r1, r3
 800281e:	f002 fee4 	bl	80055ea <HAL_GPIO_WritePin>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b002      	add	sp, #8
 8002828:	bd80      	pop	{r7, pc}

0800282a <Oled_writeCommand>:

void Oled_writeCommand(Oled_HandleTypeDef *oled, uint8_t command) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	000a      	movs	r2, r1
 8002834:	1cfb      	adds	r3, r7, #3
 8002836:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f002 fed1 	bl	80055ea <HAL_GPIO_WritePin>
	Oled_write(oled, (command >> 4));
 8002848:	1cfb      	adds	r3, r7, #3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff8c 	bl	8002772 <Oled_write>
	Oled_write(oled, command & 0x0F);
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ff82 	bl	8002772 <Oled_write>

}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <Oled_writeData>:

void Oled_writeData(Oled_HandleTypeDef *oled, uint8_t data) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	000a      	movs	r2, r1
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	0019      	movs	r1, r3
 8002890:	f002 feab 	bl	80055ea <HAL_GPIO_WritePin>
	Oled_write(oled, data >> 4);
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff66 	bl	8002772 <Oled_write>
	Oled_write(oled, data & 0x0F);
 80028a6:	1cfb      	adds	r3, r7, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220f      	movs	r2, #15
 80028ac:	4013      	ands	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff5c 	bl	8002772 <Oled_write>

}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <LT8722_Init>:
#include <stdint.h>
#include "main.h"
#include "lt8722.h"

int LT8722_Init(SPI_HandleTypeDef *hspi){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	// Initialization is done based on LT8722 datasheet provided steps

	// --- Step #1 Enable_REQ bit to 1 ---

	// Take the default SPIS_REG value and add 1 to [0] place
	uint8_t data_to_send[4] = {0x00, 0x0A, 0xA2, 0x15};
 80028cc:	2110      	movs	r1, #16
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <LT8722_Init+0x128>)
 80028d2:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_Command_Reg_Addr;
 80028d4:	200f      	movs	r0, #15
 80028d6:	183b      	adds	r3, r7, r0
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	1839      	adds	r1, r7, r0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	2304      	movs	r3, #4
 80028e4:	f000 f96e 	bl	8002bc4 <write_lt8722_reg>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <LT8722_Init+0x2c>
		return 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e078      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #2 Set SPIS_DAC register to 0xFF00 0000
	data_to_send[0] = 0xFF;
 80028f0:	2110      	movs	r1, #16
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x00;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0x00;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x00;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	70da      	strb	r2, [r3, #3]
	reg = SPIS_DAC_Reg_Addr;
 800290a:	200f      	movs	r0, #15
 800290c:	183b      	adds	r3, r7, r0
 800290e:	2208      	movs	r2, #8
 8002910:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002912:	187a      	adds	r2, r7, r1
 8002914:	1839      	adds	r1, r7, r0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	2304      	movs	r3, #4
 800291a:	f000 f953 	bl	8002bc4 <write_lt8722_reg>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d001      	beq.n	8002926 <LT8722_Init+0x62>
		return 1;
 8002922:	2301      	movs	r3, #1
 8002924:	e05d      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #3 Clear SPI_Status register

	data_to_send[0] = 0x00;
 8002926:	2110      	movs	r1, #16
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	reg = SPIS_Status_Reg_Addr;
 800292e:	200f      	movs	r0, #15
 8002930:	183b      	adds	r3, r7, r0
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002936:	187a      	adds	r2, r7, r1
 8002938:	1839      	adds	r1, r7, r0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	2304      	movs	r3, #4
 800293e:	f000 f941 	bl	8002bc4 <write_lt8722_reg>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <LT8722_Init+0x86>
		return 1;
 8002946:	2301      	movs	r3, #1
 8002948:	e04b      	b.n	80029e2 <LT8722_Init+0x11e>

	HAL_Delay(1); //Waiting for prebiased output condition to dissipate
 800294a:	2001      	movs	r0, #1
 800294c:	f001 fdc0 	bl	80044d0 <HAL_Delay>

	// --- Step #4 Slowly turn down SPIS_DAC code to 0x0000 0000
	// This should be done not quicker than in 5 ms.

	reg = SPIS_DAC_Reg_Addr;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2208      	movs	r2, #8
 8002956:	701a      	strb	r2, [r3, #0]

	for(int i=1; i <= 17;i++){
 8002958:	2301      	movs	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e01b      	b.n	8002996 <LT8722_Init+0xd2>
		data_to_send[0] = 255 - 15*i;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	1c1a      	adds	r2, r3, #0
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	2110      	movs	r1, #16
 8002970:	187b      	adds	r3, r7, r1
 8002972:	701a      	strb	r2, [r3, #0]
		if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002974:	187a      	adds	r2, r7, r1
 8002976:	230f      	movs	r3, #15
 8002978:	18f9      	adds	r1, r7, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	2304      	movs	r3, #4
 800297e:	f000 f921 	bl	8002bc4 <write_lt8722_reg>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <LT8722_Init+0xc6>
			return 1;
 8002986:	2301      	movs	r3, #1
 8002988:	e02b      	b.n	80029e2 <LT8722_Init+0x11e>
		HAL_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f001 fda0 	bl	80044d0 <HAL_Delay>
	for(int i=1; i <= 17;i++){
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b11      	cmp	r3, #17
 800299a:	dde0      	ble.n	800295e <LT8722_Init+0x9a>
	}

	// --- Step #5 Enable PWM switching by raising the SWEN pin and writing SWEN_REQ bit 1

	HAL_GPIO_WritePin(LT8722_SWEN_GPIO_Port,LT8722_SWEN_Pin, SET);
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4813      	ldr	r0, [pc, #76]	@ (80029f0 <LT8722_Init+0x12c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	0019      	movs	r1, r3
 80029a6:	f002 fe20 	bl	80055ea <HAL_GPIO_WritePin>

	data_to_send[0] = 0x00;
 80029aa:	2110      	movs	r1, #16
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x0A;
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	220a      	movs	r2, #10
 80029b6:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0xA2;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	22a2      	movs	r2, #162	@ 0xa2
 80029bc:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x17;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2217      	movs	r2, #23
 80029c2:	70da      	strb	r2, [r3, #3]
	reg = SPIS_Command_Reg_Addr;
 80029c4:	200f      	movs	r0, #15
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80029cc:	187a      	adds	r2, r7, r1
 80029ce:	1839      	adds	r1, r7, r0
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	2304      	movs	r3, #4
 80029d4:	f000 f8f6 	bl	8002bc4 <write_lt8722_reg>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <LT8722_Init+0x11c>
		return 1;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LT8722_Init+0x11e>

	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	15a20a00 	.word	0x15a20a00
 80029f0:	50000400 	.word	0x50000400

080029f4 <set_vout>:
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);

	return 0;
}

int set_vout(SPI_HandleTypeDef *hspi, double vout){
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	603a      	str	r2, [r7, #0]
 80029fe:	607b      	str	r3, [r7, #4]
	uint8_t SPIS_DAC_Code[4] = {0};
 8002a00:	2418      	movs	r4, #24
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_DAC_Reg_Addr;
 8002a08:	2517      	movs	r5, #23
 8002a0a:	197b      	adds	r3, r7, r5
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	701a      	strb	r2, [r3, #0]
	uint32_t code = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]

	if(vout > MAX_POS_Vout){
 8002a14:	4a65      	ldr	r2, [pc, #404]	@ (8002bac <set_vout+0x1b8>)
 8002a16:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <set_vout+0x1bc>)
 8002a18:	6838      	ldr	r0, [r7, #0]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f7fd fd2c 	bl	8000478 <__aeabi_dcmpgt>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d014      	beq.n	8002a4e <set_vout+0x5a>
		SPIS_DAC_Code[0] = 0xFF;
 8002a24:	0021      	movs	r1, r4
 8002a26:	187b      	adds	r3, r7, r1
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002a2c:	187b      	adds	r3, r7, r1
 8002a2e:	227a      	movs	r2, #122	@ 0x7a
 8002a30:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002a32:	187b      	adds	r3, r7, r1
 8002a34:	2200      	movs	r2, #0
 8002a36:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x000000FF));
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002a3e:	187a      	adds	r2, r7, r1
 8002a40:	1979      	adds	r1, r7, r5
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	2304      	movs	r3, #4
 8002a46:	f000 f8bd 	bl	8002bc4 <write_lt8722_reg>
		return 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e0a9      	b.n	8002ba2 <set_vout+0x1ae>
	}
	if(vout > 0){
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2300      	movs	r3, #0
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	f7fd fd0f 	bl	8000478 <__aeabi_dcmpgt>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d041      	beq.n	8002ae2 <set_vout+0xee>
		code = (MIN_POS_SPIS_DAC_Code & 0xFFFFFF) + ((MAX_POS_Vout-vout)/MAX_POS_Vout) * (0xFFFFFF - (MIN_POS_SPIS_DAC_Code & 0xFFFFFF));
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4852      	ldr	r0, [pc, #328]	@ (8002bac <set_vout+0x1b8>)
 8002a64:	4952      	ldr	r1, [pc, #328]	@ (8002bb0 <set_vout+0x1bc>)
 8002a66:	f7ff f86f 	bl	8001b48 <__aeabi_dsub>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	000b      	movs	r3, r1
 8002a6e:	0010      	movs	r0, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	4a4e      	ldr	r2, [pc, #312]	@ (8002bac <set_vout+0x1b8>)
 8002a74:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb0 <set_vout+0x1bc>)
 8002a76:	f7fe f947 	bl	8000d08 <__aeabi_ddiv>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	0010      	movs	r0, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	22e0      	movs	r2, #224	@ 0xe0
 8002a84:	0612      	lsls	r2, r2, #24
 8002a86:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb4 <set_vout+0x1c0>)
 8002a88:	f7fe fd78 	bl	800157c <__aeabi_dmul>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	000b      	movs	r3, r1
 8002a90:	0010      	movs	r0, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	4b48      	ldr	r3, [pc, #288]	@ (8002bb8 <set_vout+0x1c4>)
 8002a98:	f7fd fd70 	bl	800057c <__aeabi_dadd>
 8002a9c:	0002      	movs	r2, r0
 8002a9e:	000b      	movs	r3, r1
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	f7fd fcfc 	bl	80004a0 <__aeabi_d2uiz>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0xFF;
 8002aac:	2118      	movs	r1, #24
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	22ff      	movs	r2, #255	@ 0xff
 8002ab2:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002ad0:	187a      	adds	r2, r7, r1
 8002ad2:	2317      	movs	r3, #23
 8002ad4:	18f9      	adds	r1, r7, r3
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	2304      	movs	r3, #4
 8002ada:	f000 f873 	bl	8002bc4 <write_lt8722_reg>
		return 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e05f      	b.n	8002ba2 <set_vout+0x1ae>
	}
	if(vout < MAX_NEG_Vout){
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <set_vout+0x1c8>)
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	f7fd fcb1 	bl	8000450 <__aeabi_dcmplt>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d015      	beq.n	8002b1e <set_vout+0x12a>
		SPIS_DAC_Code[0] = 0x00;
 8002af2:	2118      	movs	r1, #24
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	228b      	movs	r2, #139	@ 0x8b
 8002afe:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2200      	movs	r2, #0
 8002b04:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x000000FF));
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002b0c:	187a      	adds	r2, r7, r1
 8002b0e:	2317      	movs	r3, #23
 8002b10:	18f9      	adds	r1, r7, r3
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	2304      	movs	r3, #4
 8002b16:	f000 f855 	bl	8002bc4 <write_lt8722_reg>
		return 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e041      	b.n	8002ba2 <set_vout+0x1ae>
	}
	if(vout < 0){
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2300      	movs	r3, #0
 8002b22:	6838      	ldr	r0, [r7, #0]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	f7fd fc93 	bl	8000450 <__aeabi_dcmplt>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d030      	beq.n	8002b90 <set_vout+0x19c>
		code = (vout/MAX_NEG_Vout) * (MAX_NEG_SPIS_DAC_Code & 0x00FFFFFF);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <set_vout+0x1c8>)
 8002b32:	6838      	ldr	r0, [r7, #0]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	f7fe f8e7 	bl	8000d08 <__aeabi_ddiv>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	000b      	movs	r3, r1
 8002b3e:	0010      	movs	r0, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	2200      	movs	r2, #0
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <set_vout+0x1cc>)
 8002b46:	f7fe fd19 	bl	800157c <__aeabi_dmul>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	0010      	movs	r0, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	f7fd fca5 	bl	80004a0 <__aeabi_d2uiz>
 8002b56:	0003      	movs	r3, r0
 8002b58:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0x00;
 8002b5a:	2118      	movs	r1, #24
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002b7e:	187a      	adds	r2, r7, r1
 8002b80:	2317      	movs	r3, #23
 8002b82:	18f9      	adds	r1, r7, r3
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	2304      	movs	r3, #4
 8002b88:	f000 f81c 	bl	8002bc4 <write_lt8722_reg>
		return 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e008      	b.n	8002ba2 <set_vout+0x1ae>
	}
	write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002b90:	2318      	movs	r3, #24
 8002b92:	18fa      	adds	r2, r7, r3
 8002b94:	2317      	movs	r3, #23
 8002b96:	18f9      	adds	r1, r7, r3
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	f000 f812 	bl	8002bc4 <write_lt8722_reg>
	return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b008      	add	sp, #32
 8002ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	147ae148 	.word	0x147ae148
 8002bb0:	402447ae 	.word	0x402447ae
 8002bb4:	4160bfff 	.word	0x4160bfff
 8002bb8:	415e8000 	.word	0x415e8000
 8002bbc:	c0250000 	.word	0xc0250000
 8002bc0:	41616000 	.word	0x41616000

08002bc4 <write_lt8722_reg>:


int write_lt8722_reg(SPI_HandleTypeDef *hspi, uint8_t *reg_addr, uint8_t *data, uint8_t size){
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b08c      	sub	sp, #48	@ 0x30
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	1cfb      	adds	r3, r7, #3
 8002bd4:	701a      	strb	r2, [r3, #0]

	if (size > 4)
 8002bd6:	1cfb      	adds	r3, r7, #3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d901      	bls.n	8002be2 <write_lt8722_reg+0x1e>
		return 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05c      	b.n	8002c9c <write_lt8722_reg+0xd8>

	uint8_t tx_data[8] = {Data_Write_Command,*reg_addr,0x00,0x00,0x00,0x00,0x00,0x00};
 8002be2:	211c      	movs	r1, #28
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	22f2      	movs	r2, #242	@ 0xf2
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	705a      	strb	r2, [r3, #1]
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	709a      	strb	r2, [r3, #2]
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	70da      	strb	r2, [r3, #3]
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2200      	movs	r2, #0
 8002c02:	711a      	strb	r2, [r3, #4]
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	2200      	movs	r2, #0
 8002c08:	715a      	strb	r2, [r3, #5]
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	719a      	strb	r2, [r3, #6]
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	71da      	strb	r2, [r3, #7]

	for (int i=0;i<size;i++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1a:	e00b      	b.n	8002c34 <write_lt8722_reg+0x70>
		tx_data[i+2] = data[i];
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	18d2      	adds	r2, r2, r3
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	3302      	adds	r3, #2
 8002c26:	7811      	ldrb	r1, [r2, #0]
 8002c28:	221c      	movs	r2, #28
 8002c2a:	18ba      	adds	r2, r7, r2
 8002c2c:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<size;i++){
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	1cfb      	adds	r3, r7, #3
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbee      	blt.n	8002c1c <write_lt8722_reg+0x58>
	}
	uint8_t rx_data[8] = {0};
 8002c3e:	2414      	movs	r4, #20
 8002c40:	193b      	adds	r3, r7, r4
 8002c42:	0018      	movs	r0, r3
 8002c44:	2308      	movs	r3, #8
 8002c46:	001a      	movs	r2, r3
 8002c48:	2100      	movs	r1, #0
 8002c4a:	f00d f963 	bl	800ff14 <memset>

	tx_data[6] = get_CRC8(tx_data, 6);
 8002c4e:	251c      	movs	r5, #28
 8002c50:	197b      	adds	r3, r7, r5
 8002c52:	2106      	movs	r1, #6
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f825 	bl	8002ca4 <get_CRC8>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	197b      	adds	r3, r7, r5
 8002c60:	719a      	strb	r2, [r3, #6]

	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, RESET);
 8002c62:	23a0      	movs	r3, #160	@ 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2200      	movs	r2, #0
 8002c68:	2140      	movs	r1, #64	@ 0x40
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 fcbd 	bl	80055ea <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 8, 100);
 8002c70:	193a      	adds	r2, r7, r4
 8002c72:	1979      	adds	r1, r7, r5
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	2364      	movs	r3, #100	@ 0x64
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	f006 f804 	bl	8008c88 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
 8002c80:	23a0      	movs	r3, #160	@ 0xa0
 8002c82:	05db      	lsls	r3, r3, #23
 8002c84:	2201      	movs	r2, #1
 8002c86:	2140      	movs	r1, #64	@ 0x40
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f002 fcae 	bl	80055ea <HAL_GPIO_WritePin>
	if(rx_data[7] != SLAVE_ACK)
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	79db      	ldrb	r3, [r3, #7]
 8002c92:	2ba5      	cmp	r3, #165	@ 0xa5
 8002c94:	d001      	beq.n	8002c9a <write_lt8722_reg+0xd6>
		return 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <write_lt8722_reg+0xd8>

	return 0;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b00a      	add	sp, #40	@ 0x28
 8002ca2:	bdb0      	pop	{r4, r5, r7, pc}

08002ca4 <get_CRC8>:
		return 1;
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
	return 0;
}

uint8_t get_CRC8(const uint8_t *data, uint16_t length) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	000a      	movs	r2, r1
 8002cae:	1cbb      	adds	r3, r7, #2
 8002cb0:	801a      	strh	r2, [r3, #0]
    uint8_t crc = 0x00;               // Initial value
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
    uint8_t polynomial = 0x07;        // CRC-8 polynomial
 8002cba:	230a      	movs	r3, #10
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	701a      	strb	r2, [r3, #0]

    for (uint16_t i = 0; i < length; i++) {
 8002cc2:	230c      	movs	r3, #12
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	e03b      	b.n	8002d44 <get_CRC8+0xa0>
        crc ^= data[i];               // XOR-in byte into CRC
 8002ccc:	230c      	movs	r3, #12
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	18d3      	adds	r3, r2, r3
 8002cd6:	7819      	ldrb	r1, [r3, #0]
 8002cd8:	220f      	movs	r2, #15
 8002cda:	18bb      	adds	r3, r7, r2
 8002cdc:	18ba      	adds	r2, r7, r2
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	404a      	eors	r2, r1
 8002ce2:	701a      	strb	r2, [r3, #0]

        for (uint8_t j = 0; j < 8; j++) {
 8002ce4:	230b      	movs	r3, #11
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e01f      	b.n	8002d2e <get_CRC8+0x8a>
            if (crc & 0x80) {
 8002cee:	210f      	movs	r1, #15
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b25b      	sxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da0d      	bge.n	8002d16 <get_CRC8+0x72>
                crc = (crc << 1) ^ polynomial;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	18db      	adds	r3, r3, r3
 8002d02:	b25a      	sxtb	r2, r3
 8002d04:	230a      	movs	r3, #10
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	4053      	eors	r3, r2
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e005      	b.n	8002d22 <get_CRC8+0x7e>
            } else {
                crc <<= 1;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fa      	adds	r2, r7, r3
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	18db      	adds	r3, r3, r3
 8002d20:	7013      	strb	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8002d22:	210b      	movs	r1, #11
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	3201      	adds	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	230b      	movs	r3, #11
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	d9da      	bls.n	8002cee <get_CRC8+0x4a>
    for (uint16_t i = 0; i < length; i++) {
 8002d38:	210c      	movs	r1, #12
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	187b      	adds	r3, r7, r1
 8002d40:	3201      	adds	r2, #1
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	230c      	movs	r3, #12
 8002d46:	18fa      	adds	r2, r7, r3
 8002d48:	1cbb      	adds	r3, r7, #2
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d3bc      	bcc.n	8002ccc <get_CRC8+0x28>
            }
        }
    }

    return crc;
 8002d52:	230f      	movs	r3, #15
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b004      	add	sp, #16
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	b099      	sub	sp, #100	@ 0x64
 8002d64:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d66:	f001 fb2d 	bl	80043c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d6a:	f000 f929 	bl	8002fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d6e:	f000 faf9 	bl	8003364 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8002d72:	f00a ff33 	bl	800dbdc <MX_USB_Device_Init>
  MX_I2C2_Init();
 8002d76:	f000 f9e7 	bl	8003148 <MX_I2C2_Init>
  MX_ADC1_Init();
 8002d7a:	f000 f979 	bl	8003070 <MX_ADC1_Init>
  MX_TIM17_Init();
 8002d7e:	f000 fac7 	bl	8003310 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002d82:	f000 fa21 	bl	80031c8 <MX_SPI2_Init>
  MX_TIM16_Init();
 8002d86:	f000 fa99 	bl	80032bc <MX_TIM16_Init>
  MX_TIM7_Init();
 8002d8a:	f000 fa5b 	bl	8003244 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50); // Stabilize voltage for OLED
 8002d8e:	2032      	movs	r0, #50	@ 0x32
 8002d90:	f001 fb9e 	bl	80044d0 <HAL_Delay>
  GPIO_TypeDef *data_ports[] = {OLED_D04_GPIO_Port, OLED_D05_GPIO_Port, OLED_D06_GPIO_Port, OLED_D07_GPIO_Port};
 8002d94:	2530      	movs	r5, #48	@ 0x30
 8002d96:	197b      	adds	r3, r7, r5
 8002d98:	4a78      	ldr	r2, [pc, #480]	@ (8002f7c <main+0x21c>)
 8002d9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002d9c:	c313      	stmia	r3!, {r0, r1, r4}
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	601a      	str	r2, [r3, #0]
  uint16_t data_pins[] = {OLED_D04_Pin, OLED_D05_Pin, OLED_D06_Pin, OLED_D07_Pin};
 8002da2:	2428      	movs	r4, #40	@ 0x28
 8002da4:	193b      	adds	r3, r7, r4
 8002da6:	4a76      	ldr	r2, [pc, #472]	@ (8002f80 <main+0x220>)
 8002da8:	ca03      	ldmia	r2!, {r0, r1}
 8002daa:	c303      	stmia	r3!, {r0, r1}
  Oled_HandleTypeDef oled = Oled_init(OLED_RS_GPIO_Port, OLED_RS_Pin, OLED_EN_GPIO_Port, OLED_EN_Pin, data_ports, data_pins);
 8002dac:	2610      	movs	r6, #16
 8002dae:	19b8      	adds	r0, r7, r6
 8002db0:	4a74      	ldr	r2, [pc, #464]	@ (8002f84 <main+0x224>)
 8002db2:	4974      	ldr	r1, [pc, #464]	@ (8002f84 <main+0x224>)
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	9302      	str	r3, [sp, #8]
 8002db8:	197b      	adds	r3, r7, r5
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f7ff fb98 	bl	80024f8 <Oled_init>
  Oled_resupply_power(&oled);
 8002dc8:	19bb      	adds	r3, r7, r6
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff fc6a 	bl	80026a4 <Oled_resupply_power>


  double current_temp_inside = 0;
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	60fb      	str	r3, [r7, #12]
  double current_temp_outside = 0;
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2300      	movs	r3, #0
 8002ddc:	603a      	str	r2, [r7, #0]
 8002dde:	607b      	str	r3, [r7, #4]
  // Check if Thermometers are connected
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002de0:	e01d      	b.n	8002e1e <main+0xbe>
	  Oled_cursor(&oled, 0, 0);
 8002de2:	2410      	movs	r4, #16
 8002de4:	193b      	adds	r3, r7, r4
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7ff fc70 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 8002df0:	4a65      	ldr	r2, [pc, #404]	@ (8002f88 <main+0x228>)
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff fc9d 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2101      	movs	r1, #1
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fc64 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Thermo");
 8002e08:	4a60      	ldr	r2, [pc, #384]	@ (8002f8c <main+0x22c>)
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff fc91 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002e14:	23fa      	movs	r3, #250	@ 0xfa
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f001 fb59 	bl	80044d0 <HAL_Delay>
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002e1e:	003a      	movs	r2, r7
 8002e20:	4b5b      	ldr	r3, [pc, #364]	@ (8002f90 <main+0x230>)
 8002e22:	2190      	movs	r1, #144	@ 0x90
 8002e24:	0018      	movs	r0, r3
 8002e26:	f001 f995 	bl	8004154 <read_temp>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d1d9      	bne.n	8002de2 <main+0x82>
 8002e2e:	2308      	movs	r3, #8
 8002e30:	18fa      	adds	r2, r7, r3
 8002e32:	4b57      	ldr	r3, [pc, #348]	@ (8002f90 <main+0x230>)
 8002e34:	2192      	movs	r1, #146	@ 0x92
 8002e36:	0018      	movs	r0, r3
 8002e38:	f001 f98c 	bl	8004154 <read_temp>
 8002e3c:	1e03      	subs	r3, r0, #0
 8002e3e:	d1d0      	bne.n	8002de2 <main+0x82>
  }

  Oled_clear(&oled);
 8002e40:	2310      	movs	r3, #16
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7ff fc69 	bl	800271c <Oled_clear>

  while(LT8722_Init(&hspi2)!=0){
 8002e4a:	e01d      	b.n	8002e88 <main+0x128>
	  Oled_cursor(&oled, 0, 0);
 8002e4c:	2410      	movs	r4, #16
 8002e4e:	193b      	adds	r3, r7, r4
 8002e50:	2200      	movs	r2, #0
 8002e52:	2100      	movs	r1, #0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fc3b 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Failed");
 8002e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002f94 <main+0x234>)
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f7ff fc68 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002e66:	193b      	adds	r3, r7, r4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fc2f 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "init");
 8002e72:	4a49      	ldr	r2, [pc, #292]	@ (8002f98 <main+0x238>)
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f7ff fc5c 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002e7e:	23fa      	movs	r3, #250	@ 0xfa
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	0018      	movs	r0, r3
 8002e84:	f001 fb24 	bl	80044d0 <HAL_Delay>
  while(LT8722_Init(&hspi2)!=0){
 8002e88:	4b44      	ldr	r3, [pc, #272]	@ (8002f9c <main+0x23c>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff fd1a 	bl	80028c4 <LT8722_Init>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d1db      	bne.n	8002e4c <main+0xec>
//	  Oled_cursor(&oled, 1, 0);
//	  Oled_string(&oled, "Peltier");
//	  HAL_Delay(500);
//  }

  while(read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0){}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	2308      	movs	r3, #8
 8002e98:	18fa      	adds	r2, r7, r3
 8002e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f90 <main+0x230>)
 8002e9c:	2192      	movs	r1, #146	@ 0x92
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f001 f958 	bl	8004154 <read_temp>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d1f6      	bne.n	8002e96 <main+0x136>
  set_temp_inside = current_temp_inside;
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	493c      	ldr	r1, [pc, #240]	@ (8002fa0 <main+0x240>)
 8002eae:	600a      	str	r2, [r1, #0]
 8002eb0:	604b      	str	r3, [r1, #4]
  double pid_output = 0;
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eb8:	647b      	str	r3, [r7, #68]	@ 0x44

  HAL_TIM_Base_Start_IT(&htim17); // Starting PID timer. Period 1 second.
 8002eba:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa4 <main+0x244>)
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f006 fa93 	bl	80093e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Starting OLED refreshing timer. Period 33 miliseconds.
 8002ec2:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <main+0x248>)
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f006 fa8f 	bl	80093e8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(time_to_rerun_PID_loop){
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <main+0x24c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d03d      	beq.n	8002f4e <main+0x1ee>
		read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside);
 8002ed2:	2308      	movs	r3, #8
 8002ed4:	18fa      	adds	r2, r7, r3
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8002f90 <main+0x230>)
 8002ed8:	2192      	movs	r1, #146	@ 0x92
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 f93a 	bl	8004154 <read_temp>
		read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside);
 8002ee0:	003a      	movs	r2, r7
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <main+0x230>)
 8002ee4:	2190      	movs	r1, #144	@ 0x90
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f001 f934 	bl	8004154 <read_temp>
		pid_output = compute_pid_output(current_temp_inside, set_temp_inside, current_temp_outside, &Kp_Part, &Ki_Part, &Kd_Part);
 8002eec:	68b8      	ldr	r0, [r7, #8]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <main+0x240>)
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	685d      	ldr	r5, [r3, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4e2d      	ldr	r6, [pc, #180]	@ (8002fb0 <main+0x250>)
 8002efc:	9604      	str	r6, [sp, #16]
 8002efe:	4e2d      	ldr	r6, [pc, #180]	@ (8002fb4 <main+0x254>)
 8002f00:	9603      	str	r6, [sp, #12]
 8002f02:	4e2d      	ldr	r6, [pc, #180]	@ (8002fb8 <main+0x258>)
 8002f04:	9602      	str	r6, [sp, #8]
 8002f06:	9200      	str	r2, [sp, #0]
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	0022      	movs	r2, r4
 8002f0c:	002b      	movs	r3, r5
 8002f0e:	f000 fc2f 	bl	8003770 <compute_pid_output>
 8002f12:	0002      	movs	r2, r0
 8002f14:	000b      	movs	r3, r1
 8002f16:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f18:	647b      	str	r3, [r7, #68]	@ 0x44
		set_vout(&hspi2, pid_output);
 8002f1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1e:	491f      	ldr	r1, [pc, #124]	@ (8002f9c <main+0x23c>)
 8002f20:	0008      	movs	r0, r1
 8002f22:	f7ff fd67 	bl	80029f4 <set_vout>

		send_temps_via_usb(current_temp_inside, current_temp_outside, set_temp_inside);
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	68f9      	ldr	r1, [r7, #12]
 8002f2a:	683c      	ldr	r4, [r7, #0]
 8002f2c:	687d      	ldr	r5, [r7, #4]
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <main+0x240>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	9200      	str	r2, [sp, #0]
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	0022      	movs	r2, r4
 8002f3a:	002b      	movs	r3, r5
 8002f3c:	f001 f975 	bl	800422a <send_temps_via_usb>
		listen_for_temp_change_sent_via_usb(&set_temp_inside);
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <main+0x240>)
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 f99a 	bl	800427c <listen_for_temp_change_sent_via_usb>

		time_to_rerun_PID_loop = 0;
 8002f48:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <main+0x24c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
	}
	if(time_to_refresh_OLED){
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fbc <main+0x25c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0b9      	beq.n	8002eca <main+0x16a>
		refresh_displayed_info(&oled, set_temp_inside, current_temp_inside);
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <main+0x240>)
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2410      	movs	r4, #16
 8002f62:	193c      	adds	r4, r7, r4
 8002f64:	9200      	str	r2, [sp, #0]
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	0002      	movs	r2, r0
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f7ff fb23 	bl	80025b8 <refresh_displayed_info>
		time_to_refresh_OLED = 0;
 8002f72:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <main+0x25c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
	if(time_to_rerun_PID_loop){
 8002f78:	e7a7      	b.n	8002eca <main+0x16a>
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	08012b58 	.word	0x08012b58
 8002f80:	08012b68 	.word	0x08012b68
 8002f84:	50000400 	.word	0x50000400
 8002f88:	08012b38 	.word	0x08012b38
 8002f8c:	08012b40 	.word	0x08012b40
 8002f90:	200003d8 	.word	0x200003d8
 8002f94:	08012b48 	.word	0x08012b48
 8002f98:	08012b50 	.word	0x08012b50
 8002f9c:	2000042c 	.word	0x2000042c
 8002fa0:	20000588 	.word	0x20000588
 8002fa4:	20000528 	.word	0x20000528
 8002fa8:	20000490 	.word	0x20000490
 8002fac:	20000574 	.word	0x20000574
 8002fb0:	200005a0 	.word	0x200005a0
 8002fb4:	20000598 	.word	0x20000598
 8002fb8:	20000590 	.word	0x20000590
 8002fbc:	20000578 	.word	0x20000578

08002fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b093      	sub	sp, #76	@ 0x4c
 8002fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc6:	2410      	movs	r4, #16
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	0018      	movs	r0, r3
 8002fcc:	2338      	movs	r3, #56	@ 0x38
 8002fce:	001a      	movs	r2, r3
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f00c ff9f 	bl	800ff14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd6:	003b      	movs	r3, r7
 8002fd8:	0018      	movs	r0, r3
 8002fda:	2310      	movs	r3, #16
 8002fdc:	001a      	movs	r2, r3
 8002fde:	2100      	movs	r1, #0
 8002fe0:	f00c ff98 	bl	800ff14 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f004 ff29 	bl	8007e40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	0252      	lsls	r2, r2, #9
 8002ffa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ffc:	0021      	movs	r1, r4
 8002ffe:	187b      	adds	r3, r7, r1
 8003000:	2202      	movs	r2, #2
 8003002:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003004:	187b      	adds	r3, r7, r1
 8003006:	2203      	movs	r2, #3
 8003008:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2200      	movs	r2, #0
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8003010:	187b      	adds	r3, r7, r1
 8003012:	220c      	movs	r2, #12
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2280      	movs	r2, #128	@ 0x80
 800301a:	0292      	lsls	r2, r2, #10
 800301c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800301e:	187b      	adds	r3, r7, r1
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	0492      	lsls	r2, r2, #18
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2280      	movs	r2, #128	@ 0x80
 800302a:	0592      	lsls	r2, r2, #22
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800302e:	187b      	adds	r3, r7, r1
 8003030:	0018      	movs	r0, r3
 8003032:	f004 ff45 	bl	8007ec0 <HAL_RCC_OscConfig>
 8003036:	1e03      	subs	r3, r0, #0
 8003038:	d001      	beq.n	800303e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800303a:	f000 fb93 	bl	8003764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800303e:	003b      	movs	r3, r7
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003044:	003b      	movs	r3, r7
 8003046:	2202      	movs	r2, #2
 8003048:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800304a:	003b      	movs	r3, r7
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003050:	003b      	movs	r3, r7
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003056:	003b      	movs	r3, r7
 8003058:	2101      	movs	r1, #1
 800305a:	0018      	movs	r0, r3
 800305c:	f005 fa4a 	bl	80084f4 <HAL_RCC_ClockConfig>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003064:	f000 fb7e 	bl	8003764 <Error_Handler>
  }
}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b013      	add	sp, #76	@ 0x4c
 800306e:	bd90      	pop	{r4, r7, pc}

08003070 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	0018      	movs	r0, r3
 800307a:	230c      	movs	r3, #12
 800307c:	001a      	movs	r2, r3
 800307e:	2100      	movs	r1, #0
 8003080:	f00c ff48 	bl	800ff14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003084:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <MX_ADC1_Init+0xcc>)
 8003086:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <MX_ADC1_Init+0xd0>)
 8003088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800308a:	4b2c      	ldr	r3, [pc, #176]	@ (800313c <MX_ADC1_Init+0xcc>)
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	05d2      	lsls	r2, r2, #23
 8003090:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <MX_ADC1_Init+0xcc>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003098:	4b28      	ldr	r3, [pc, #160]	@ (800313c <MX_ADC1_Init+0xcc>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030a6:	2204      	movs	r2, #4
 80030a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80030b0:	4b22      	ldr	r3, [pc, #136]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80030bc:	4b1f      	ldr	r3, [pc, #124]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030be:	2201      	movs	r2, #1
 80030c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030c4:	2220      	movs	r2, #32
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030ca:	4b1c      	ldr	r3, [pc, #112]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80030d0:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030d6:	4b19      	ldr	r3, [pc, #100]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030d8:	222c      	movs	r2, #44	@ 0x2c
 80030da:	2100      	movs	r1, #0
 80030dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030de:	4b17      	ldr	r3, [pc, #92]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030e6:	2205      	movs	r2, #5
 80030e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80030ea:	4b14      	ldr	r3, [pc, #80]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030ec:	2205      	movs	r2, #5
 80030ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030f2:	223c      	movs	r2, #60	@ 0x3c
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <MX_ADC1_Init+0xcc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030fe:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <MX_ADC1_Init+0xcc>)
 8003100:	0018      	movs	r0, r3
 8003102:	f001 fb3b 	bl	800477c <HAL_ADC_Init>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d001      	beq.n	800310e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800310a:	f000 fb2b 	bl	8003764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <MX_ADC1_Init+0xd4>)
 8003112:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003120:	1d3a      	adds	r2, r7, #4
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <MX_ADC1_Init+0xcc>)
 8003124:	0011      	movs	r1, r2
 8003126:	0018      	movs	r0, r3
 8003128:	f001 fe00 	bl	8004d2c <HAL_ADC_ConfigChannel>
 800312c:	1e03      	subs	r3, r0, #0
 800312e:	d001      	beq.n	8003134 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003130:	f000 fb18 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000374 	.word	0x20000374
 8003140:	40012400 	.word	0x40012400
 8003144:	1c000080 	.word	0x1c000080

08003148 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <MX_I2C2_Init+0x74>)
 800314e:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <MX_I2C2_Init+0x78>)
 8003150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003154:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <MX_I2C2_Init+0x7c>)
 8003156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <MX_I2C2_Init+0x74>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003160:	2201      	movs	r2, #1
 8003162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <MX_I2C2_Init+0x74>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003178:	2200      	movs	r2, #0
 800317a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <MX_I2C2_Init+0x74>)
 800317e:	2200      	movs	r2, #0
 8003180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003182:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003184:	0018      	movs	r0, r3
 8003186:	f002 fa9d 	bl	80056c4 <HAL_I2C_Init>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d001      	beq.n	8003192 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800318e:	f000 fae9 	bl	8003764 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003194:	2100      	movs	r1, #0
 8003196:	0018      	movs	r0, r3
 8003198:	f003 f840 	bl	800621c <HAL_I2CEx_ConfigAnalogFilter>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80031a0:	f000 fae0 	bl	8003764 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <MX_I2C2_Init+0x74>)
 80031a6:	2100      	movs	r1, #0
 80031a8:	0018      	movs	r0, r3
 80031aa:	f003 f883 	bl	80062b4 <HAL_I2CEx_ConfigDigitalFilter>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80031b2:	f000 fad7 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200003d8 	.word	0x200003d8
 80031c0:	40005800 	.word	0x40005800
 80031c4:	0090194b 	.word	0x0090194b

080031c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <MX_SPI2_Init+0x74>)
 80031ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <MX_SPI2_Init+0x78>)
 80031d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <MX_SPI2_Init+0x74>)
 80031d4:	2282      	movs	r2, #130	@ 0x82
 80031d6:	0052      	lsls	r2, r2, #1
 80031d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <MX_SPI2_Init+0x74>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e0:	4b16      	ldr	r3, [pc, #88]	@ (800323c <MX_SPI2_Init+0x74>)
 80031e2:	22e0      	movs	r2, #224	@ 0xe0
 80031e4:	00d2      	lsls	r2, r2, #3
 80031e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e8:	4b14      	ldr	r3, [pc, #80]	@ (800323c <MX_SPI2_Init+0x74>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031ee:	4b13      	ldr	r3, [pc, #76]	@ (800323c <MX_SPI2_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <MX_SPI2_Init+0x74>)
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0092      	lsls	r2, r2, #2
 80031fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <MX_SPI2_Init+0x74>)
 80031fe:	2210      	movs	r2, #16
 8003200:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003202:	4b0e      	ldr	r3, [pc, #56]	@ (800323c <MX_SPI2_Init+0x74>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003208:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <MX_SPI2_Init+0x74>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320e:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <MX_SPI2_Init+0x74>)
 8003210:	2200      	movs	r2, #0
 8003212:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <MX_SPI2_Init+0x74>)
 8003216:	2207      	movs	r2, #7
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800321a:	4b08      	ldr	r3, [pc, #32]	@ (800323c <MX_SPI2_Init+0x74>)
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <MX_SPI2_Init+0x74>)
 8003222:	2208      	movs	r2, #8
 8003224:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <MX_SPI2_Init+0x74>)
 8003228:	0018      	movs	r0, r3
 800322a:	f005 fc75 	bl	8008b18 <HAL_SPI_Init>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d001      	beq.n	8003236 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003232:	f000 fa97 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000042c 	.word	0x2000042c
 8003240:	40003800 	.word	0x40003800

08003244 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	0018      	movs	r0, r3
 800324e:	230c      	movs	r3, #12
 8003250:	001a      	movs	r2, r3
 8003252:	2100      	movs	r1, #0
 8003254:	f00c fe5e 	bl	800ff14 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003258:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 800325a:	4a16      	ldr	r2, [pc, #88]	@ (80032b4 <MX_TIM7_Init+0x70>)
 800325c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000-1;
 800325e:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003260:	4a15      	ldr	r2, [pc, #84]	@ (80032b8 <MX_TIM7_Init+0x74>)
 8003262:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003264:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33-1;
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 800326c:	2220      	movs	r2, #32
 800326e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003270:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003272:	2200      	movs	r2, #0
 8003274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003278:	0018      	movs	r0, r3
 800327a:	f006 f85d 	bl	8009338 <HAL_TIM_Base_Init>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003282:	f000 fa6f 	bl	8003764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003292:	1d3a      	adds	r2, r7, #4
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <MX_TIM7_Init+0x6c>)
 8003296:	0011      	movs	r1, r2
 8003298:	0018      	movs	r0, r3
 800329a:	f006 fae5 	bl	8009868 <HAL_TIMEx_MasterConfigSynchronization>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80032a2:	f000 fa5f 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	20000490 	.word	0x20000490
 80032b4:	40001400 	.word	0x40001400
 80032b8:	0000bb7f 	.word	0x0000bb7f

080032bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80032c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032c2:	4a10      	ldr	r2, [pc, #64]	@ (8003304 <MX_TIM16_Init+0x48>)
 80032c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 80032c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003308 <MX_TIM16_Init+0x4c>)
 80032ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <MX_TIM16_Init+0x50>)
 80032d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80032de:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <MX_TIM16_Init+0x44>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f006 f823 	bl	8009338 <HAL_TIM_Base_Init>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80032f6:	f000 fa35 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200004dc 	.word	0x200004dc
 8003304:	40014400 	.word	0x40014400
 8003308:	0000bb7f 	.word	0x0000bb7f
 800330c:	000003e7 	.word	0x000003e7

08003310 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <MX_TIM17_Init+0x44>)
 8003316:	4a10      	ldr	r2, [pc, #64]	@ (8003358 <MX_TIM17_Init+0x48>)
 8003318:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <MX_TIM17_Init+0x44>)
 800331c:	4a0f      	ldr	r2, [pc, #60]	@ (800335c <MX_TIM17_Init+0x4c>)
 800331e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <MX_TIM17_Init+0x44>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8003326:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <MX_TIM17_Init+0x44>)
 8003328:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <MX_TIM17_Init+0x50>)
 800332a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <MX_TIM17_Init+0x44>)
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <MX_TIM17_Init+0x44>)
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <MX_TIM17_Init+0x44>)
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800333e:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <MX_TIM17_Init+0x44>)
 8003340:	0018      	movs	r0, r3
 8003342:	f005 fff9 	bl	8009338 <HAL_TIM_Base_Init>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800334a:	f000 fa0b 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000528 	.word	0x20000528
 8003358:	40014800 	.word	0x40014800
 800335c:	0000bb7f 	.word	0x0000bb7f
 8003360:	000003e7 	.word	0x000003e7

08003364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b08b      	sub	sp, #44	@ 0x2c
 8003368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	2414      	movs	r4, #20
 800336c:	193b      	adds	r3, r7, r4
 800336e:	0018      	movs	r0, r3
 8003370:	2314      	movs	r3, #20
 8003372:	001a      	movs	r2, r3
 8003374:	2100      	movs	r1, #0
 8003376:	f00c fdcd 	bl	800ff14 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800337a:	4b6d      	ldr	r3, [pc, #436]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	4b6c      	ldr	r3, [pc, #432]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 8003380:	2120      	movs	r1, #32
 8003382:	430a      	orrs	r2, r1
 8003384:	635a      	str	r2, [r3, #52]	@ 0x34
 8003386:	4b6a      	ldr	r3, [pc, #424]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	2220      	movs	r2, #32
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 8003394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003396:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34
 800339e:	4b64      	ldr	r3, [pc, #400]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ae:	4b60      	ldr	r3, [pc, #384]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033b0:	2102      	movs	r1, #2
 80033b2:	430a      	orrs	r2, r1
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	2202      	movs	r2, #2
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033c8:	2104      	movs	r1, #4
 80033ca:	430a      	orrs	r2, r1
 80033cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ce:	4b58      	ldr	r3, [pc, #352]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	2204      	movs	r2, #4
 80033d4:	4013      	ands	r3, r2
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033da:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033de:	4b54      	ldr	r3, [pc, #336]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033e0:	2108      	movs	r1, #8
 80033e2:	430a      	orrs	r2, r1
 80033e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033e6:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <MX_GPIO_Init+0x1cc>)
 80033e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ea:	2208      	movs	r2, #8
 80033ec:	4013      	ands	r3, r2
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, GPIO_PIN_RESET);
 80033f2:	23a0      	movs	r3, #160	@ 0xa0
 80033f4:	05db      	lsls	r3, r3, #23
 80033f6:	2200      	movs	r2, #0
 80033f8:	2140      	movs	r1, #64	@ 0x40
 80033fa:	0018      	movs	r0, r3
 80033fc:	f002 f8f5 	bl	80055ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin, GPIO_PIN_RESET);
 8003400:	2387      	movs	r3, #135	@ 0x87
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	484b      	ldr	r0, [pc, #300]	@ (8003534 <MX_GPIO_Init+0x1d0>)
 8003406:	2200      	movs	r2, #0
 8003408:	0019      	movs	r1, r3
 800340a:	f002 f8ee 	bl	80055ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800340e:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <MX_GPIO_Init+0x1d4>)
 8003410:	2200      	movs	r2, #0
 8003412:	2140      	movs	r1, #64	@ 0x40
 8003414:	0018      	movs	r0, r3
 8003416:	f002 f8e8 	bl	80055ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin, GPIO_PIN_RESET);
 800341a:	4b48      	ldr	r3, [pc, #288]	@ (800353c <MX_GPIO_Init+0x1d8>)
 800341c:	2200      	movs	r2, #0
 800341e:	210f      	movs	r1, #15
 8003420:	0018      	movs	r0, r3
 8003422:	f002 f8e2 	bl	80055ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Temp_Down_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Down_Btn_Pin;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	2202      	movs	r2, #2
 800342a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800342c:	193b      	adds	r3, r7, r4
 800342e:	2284      	movs	r2, #132	@ 0x84
 8003430:	0392      	lsls	r2, r2, #14
 8003432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	193b      	adds	r3, r7, r4
 8003436:	2200      	movs	r2, #0
 8003438:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Down_Btn_GPIO_Port, &GPIO_InitStruct);
 800343a:	193a      	adds	r2, r7, r4
 800343c:	23a0      	movs	r3, #160	@ 0xa0
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f001 ff48 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LT8722_CS_Pin */
  GPIO_InitStruct.Pin = LT8722_CS_Pin;
 8003448:	193b      	adds	r3, r7, r4
 800344a:	2240      	movs	r2, #64	@ 0x40
 800344c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800344e:	193b      	adds	r3, r7, r4
 8003450:	2201      	movs	r2, #1
 8003452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	193b      	adds	r3, r7, r4
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	193b      	adds	r3, r7, r4
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LT8722_CS_GPIO_Port, &GPIO_InitStruct);
 8003460:	193a      	adds	r2, r7, r4
 8003462:	23a0      	movs	r3, #160	@ 0xa0
 8003464:	05db      	lsls	r3, r3, #23
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f001 ff35 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LT8722_SWEN_Pin OLED_RW_Pin OLED_EN_Pin OLED_RS_Pin */
  GPIO_InitStruct.Pin = LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin;
 800346e:	0021      	movs	r1, r4
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2287      	movs	r2, #135	@ 0x87
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003478:	000c      	movs	r4, r1
 800347a:	193b      	adds	r3, r7, r4
 800347c:	2201      	movs	r2, #1
 800347e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	193b      	adds	r3, r7, r4
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	193b      	adds	r3, r7, r4
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348c:	193b      	adds	r3, r7, r4
 800348e:	4a29      	ldr	r2, [pc, #164]	@ (8003534 <MX_GPIO_Init+0x1d0>)
 8003490:	0019      	movs	r1, r3
 8003492:	0010      	movs	r0, r2
 8003494:	f001 ff20 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Up_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Up_Btn_Pin;
 8003498:	0021      	movs	r1, r4
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2280      	movs	r2, #128	@ 0x80
 800349e:	0152      	lsls	r2, r2, #5
 80034a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034a2:	187b      	adds	r3, r7, r1
 80034a4:	2284      	movs	r2, #132	@ 0x84
 80034a6:	0392      	lsls	r2, r2, #14
 80034a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	000c      	movs	r4, r1
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Up_Btn_GPIO_Port, &GPIO_InitStruct);
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003534 <MX_GPIO_Init+0x1d0>)
 80034b6:	0019      	movs	r1, r3
 80034b8:	0010      	movs	r0, r2
 80034ba:	f001 ff0d 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	2240      	movs	r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	2201      	movs	r2, #1
 80034c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	2200      	movs	r2, #0
 80034ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	193b      	adds	r3, r7, r4
 80034d2:	2200      	movs	r2, #0
 80034d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	4a17      	ldr	r2, [pc, #92]	@ (8003538 <MX_GPIO_Init+0x1d4>)
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f001 fefb 	bl	80052d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_D07_Pin OLED_D06_Pin OLED_D04_Pin OLED_D05_Pin */
  GPIO_InitStruct.Pin = OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin;
 80034e2:	0021      	movs	r1, r4
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	220f      	movs	r2, #15
 80034e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2201      	movs	r2, #1
 80034ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2200      	movs	r2, #0
 80034fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	4a0f      	ldr	r2, [pc, #60]	@ (800353c <MX_GPIO_Init+0x1d8>)
 8003500:	0019      	movs	r1, r3
 8003502:	0010      	movs	r0, r2
 8003504:	f001 fee8 	bl	80052d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2100      	movs	r1, #0
 800350c:	2005      	movs	r0, #5
 800350e:	f001 feb1 	bl	8005274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003512:	2005      	movs	r0, #5
 8003514:	f001 fec3 	bl	800529e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2100      	movs	r1, #0
 800351c:	2007      	movs	r0, #7
 800351e:	f001 fea9 	bl	8005274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003522:	2007      	movs	r0, #7
 8003524:	f001 febb 	bl	800529e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b00b      	add	sp, #44	@ 0x2c
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	50000400 	.word	0x50000400
 8003538:	50000800 	.word	0x50000800
 800353c:	50000c00 	.word	0x50000c00

08003540 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b08b      	sub	sp, #44	@ 0x2c
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) { //PID and USB timer
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a51      	ldr	r2, [pc, #324]	@ (8003694 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d107      	bne.n	8003562 <HAL_TIM_PeriodElapsedCallback+0x22>
    	time_to_rerun_PID_loop = 1;
 8003552:	4b51      	ldr	r3, [pc, #324]	@ (8003698 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003554:	2201      	movs	r2, #1
 8003556:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8003558:	4b50      	ldr	r3, [pc, #320]	@ (800369c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800355a:	2140      	movs	r1, #64	@ 0x40
 800355c:	0018      	movs	r0, r3
 800355e:	f002 f861 	bl	8005624 <HAL_GPIO_TogglePin>
    }

    if (htim->Instance == TIM16) { //Button pressed time counting timer
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4e      	ldr	r2, [pc, #312]	@ (80036a0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d000      	beq.n	800356e <HAL_TIM_PeriodElapsedCallback+0x2e>
 800356c:	e086      	b.n	800367c <HAL_TIM_PeriodElapsedCallback+0x13c>

    	// ----------- REVISIT THIS. SPEED CARRIES OVER IF DIFFERENT BUTTON IS PRESSED RIGHT AFTER ANOTHER IS RELEASED -----------------

    	double temp_change_speeds[] = {0.5, 1, 2, 5};
 800356e:	2408      	movs	r4, #8
 8003570:	193a      	adds	r2, r7, r4
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003574:	0010      	movs	r0, r2
 8003576:	0019      	movs	r1, r3
 8003578:	2320      	movs	r3, #32
 800357a:	001a      	movs	r2, r3
 800357c:	f00c fd6e 	bl	801005c <memcpy>
    	static int speed_index = 0;
    	static int period_counter = 0;
    	if(temp_down_btn_is_pressed_down){
 8003580:	4b49      	ldr	r3, [pc, #292]	@ (80036a8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d039      	beq.n	80035fc <HAL_TIM_PeriodElapsedCallback+0xbc>
			if(HAL_GPIO_ReadPin(Temp_Down_Btn_GPIO_Port, Temp_Down_Btn_Pin) == 0){
 8003588:	23a0      	movs	r3, #160	@ 0xa0
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	2102      	movs	r1, #2
 800358e:	0018      	movs	r0, r3
 8003590:	f002 f80e 	bl	80055b0 <HAL_GPIO_ReadPin>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d124      	bne.n	80035e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
				set_temp_inside -= temp_change_speeds[speed_index];
 8003598:	4b44      	ldr	r3, [pc, #272]	@ (80036ac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	4b44      	ldr	r3, [pc, #272]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	193a      	adds	r2, r7, r4
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f7fe facc 	bl	8001b48 <__aeabi_dsub>
 80035b0:	0002      	movs	r2, r0
 80035b2:	000b      	movs	r3, r1
 80035b4:	493d      	ldr	r1, [pc, #244]	@ (80036ac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80035b6:	600a      	str	r2, [r1, #0]
 80035b8:	604b      	str	r3, [r1, #4]
				period_counter++;
 80035ba:	4b3e      	ldr	r3, [pc, #248]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	4b3c      	ldr	r3, [pc, #240]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80035c2:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d017      	beq.n	80035fc <HAL_TIM_PeriodElapsedCallback+0xbc>
					speed_index = period_counter/3;
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2103      	movs	r1, #3
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fc fe3a 	bl	800024c <__divsi3>
 80035d8:	0003      	movs	r3, r0
 80035da:	001a      	movs	r2, r3
 80035dc:	4b34      	ldr	r3, [pc, #208]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e00c      	b.n	80035fc <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else{
				temp_down_btn_is_pressed_down = 0;
 80035e2:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 80035e8:	4b33      	ldr	r3, [pc, #204]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f005 ff58 	bl	80094a0 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 80035f0:	4b30      	ldr	r3, [pc, #192]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 80035f6:	4b2e      	ldr	r3, [pc, #184]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
			}
    	}
    	if(temp_up_btn_is_pressed_down){
 80035fc:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03b      	beq.n	800367c <HAL_TIM_PeriodElapsedCallback+0x13c>
			if(HAL_GPIO_ReadPin(Temp_Up_Btn_GPIO_Port, Temp_Up_Btn_Pin) == 0){
 8003604:	2380      	movs	r3, #128	@ 0x80
 8003606:	015b      	lsls	r3, r3, #5
 8003608:	4a2d      	ldr	r2, [pc, #180]	@ (80036c0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f001 ffcf 	bl	80055b0 <HAL_GPIO_ReadPin>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d125      	bne.n	8003662 <HAL_TIM_PeriodElapsedCallback+0x122>
				set_temp_inside += temp_change_speeds[speed_index];;
 8003616:	4b26      	ldr	r3, [pc, #152]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2208      	movs	r2, #8
 800361c:	18ba      	adds	r2, r7, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f7fc ffa6 	bl	800057c <__aeabi_dadd>
 8003630:	0002      	movs	r2, r0
 8003632:	000b      	movs	r3, r1
 8003634:	491d      	ldr	r1, [pc, #116]	@ (80036ac <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003636:	600a      	str	r2, [r1, #0]
 8003638:	604b      	str	r3, [r1, #4]
				period_counter++;
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003642:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 8003644:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d017      	beq.n	800367c <HAL_TIM_PeriodElapsedCallback+0x13c>
					speed_index = period_counter/3;
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2103      	movs	r1, #3
 8003652:	0018      	movs	r0, r3
 8003654:	f7fc fdfa 	bl	800024c <__divsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	001a      	movs	r2, r3
 800365c:	4b14      	ldr	r3, [pc, #80]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e00c      	b.n	800367c <HAL_TIM_PeriodElapsedCallback+0x13c>
			}
			else{
				temp_up_btn_is_pressed_down = 0;
 8003662:	4b16      	ldr	r3, [pc, #88]	@ (80036bc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 8003668:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800366a:	0018      	movs	r0, r3
 800366c:	f005 ff18 	bl	80094a0 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 8003670:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 8003676:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
			}
    	}

    }

    if (htim->Instance == TIM7) { //Display refresh timer
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d102      	bne.n	800368c <HAL_TIM_PeriodElapsedCallback+0x14c>
    	time_to_refresh_OLED = 1;
 8003686:	4b10      	ldr	r3, [pc, #64]	@ (80036c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
    }


}
 800368c:	46c0      	nop			@ (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b00b      	add	sp, #44	@ 0x2c
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	40014800 	.word	0x40014800
 8003698:	20000574 	.word	0x20000574
 800369c:	50000800 	.word	0x50000800
 80036a0:	40014400 	.word	0x40014400
 80036a4:	08012b70 	.word	0x08012b70
 80036a8:	2000057c 	.word	0x2000057c
 80036ac:	20000588 	.word	0x20000588
 80036b0:	200005a8 	.word	0x200005a8
 80036b4:	200005ac 	.word	0x200005ac
 80036b8:	200004dc 	.word	0x200004dc
 80036bc:	20000580 	.word	0x20000580
 80036c0:	50000400 	.word	0x50000400
 80036c4:	40001400 	.word	0x40001400
 80036c8:	20000578 	.word	0x20000578

080036cc <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	0002      	movs	r2, r0
 80036d4:	1dbb      	adds	r3, r7, #6
 80036d6:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == Temp_Down_Btn_Pin) {
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d10e      	bne.n	80036fe <HAL_GPIO_EXTI_Falling_Callback+0x32>
    	set_temp_inside -= 0.1 ;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	@ (800374c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003750 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80036e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003754 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80036ea:	f7fe fa2d 	bl	8001b48 <__aeabi_dsub>
 80036ee:	0002      	movs	r2, r0
 80036f0:	000b      	movs	r3, r1
 80036f2:	4916      	ldr	r1, [pc, #88]	@ (800374c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80036f4:	600a      	str	r2, [r1, #0]
 80036f6:	604b      	str	r3, [r1, #4]
    	temp_down_btn_is_pressed_down = 1;
 80036f8:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == Temp_Up_Btn_Pin) {
 80036fe:	1dbb      	adds	r3, r7, #6
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	015b      	lsls	r3, r3, #5
 8003706:	429a      	cmp	r2, r3
 8003708:	d10e      	bne.n	8003728 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
    	set_temp_inside += 0.1 ;
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	4a0f      	ldr	r2, [pc, #60]	@ (8003750 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003712:	4b10      	ldr	r3, [pc, #64]	@ (8003754 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003714:	f7fc ff32 	bl	800057c <__aeabi_dadd>
 8003718:	0002      	movs	r2, r0
 800371a:	000b      	movs	r3, r1
 800371c:	490b      	ldr	r1, [pc, #44]	@ (800374c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800371e:	600a      	str	r2, [r1, #0]
 8003720:	604b      	str	r3, [r1, #4]
    	temp_up_btn_is_pressed_down = 1;
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    }
    htim16.Instance->CNT = 0;
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2200      	movs	r2, #0
 800372e:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE); // So that timer ran for the first time does not immediately raise an interrupt
 8003730:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2202      	movs	r2, #2
 8003736:	4252      	negs	r2, r2
 8003738:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim16);
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 800373c:	0018      	movs	r0, r3
 800373e:	f005 fe53 	bl	80093e8 <HAL_TIM_Base_Start_IT>
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b002      	add	sp, #8
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	20000588 	.word	0x20000588
 8003750:	9999999a 	.word	0x9999999a
 8003754:	3fb99999 	.word	0x3fb99999
 8003758:	2000057c 	.word	0x2000057c
 800375c:	20000580 	.word	0x20000580
 8003760:	200004dc 	.word	0x200004dc

08003764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003768:	b672      	cpsid	i
}
 800376a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	e7fd      	b.n	800376c <Error_Handler+0x8>

08003770 <compute_pid_output>:
// Temp points (realtive to room temperature) where we'll estimate PID integral part values
static int Integral_Temp_Table[] = {-15,-10,-5,0,5,10,15,20,25,30,35,40};
// These values have not been found experimentally but rather are assigned logically and roughly making asssumptionns
static double Integral_Part_Table[] = {-12,-8,-4,0,1.5,3,4.5,6,7.5,9,10.5,12};

double compute_pid_output(double current_temp, double set_temp, double outside_temp, double *Kp_part, double *Ki_part, double *Kd_part){
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60b8      	str	r0, [r7, #8]
 8003778:	60f9      	str	r1, [r7, #12]
 800377a:	603a      	str	r2, [r7, #0]
 800377c:	607b      	str	r3, [r7, #4]
	static double integral = 0;
	static double previous_error[Number_Of_points_For_Kd_calc] = {0};
	static double previous_set_temp = 0;
	static int points_collected_since_set_temp_reset = 0;
	static double integral_estimate = 0;
	double error = 0;
 800377e:	2200      	movs	r2, #0
 8003780:	2300      	movs	r3, #0
 8003782:	613a      	str	r2, [r7, #16]
 8003784:	617b      	str	r3, [r7, #20]

	if(set_temp != previous_set_temp){
 8003786:	4b84      	ldr	r3, [pc, #528]	@ (8003998 <compute_pid_output+0x228>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	f7fc fe58 	bl	8000444 <__aeabi_dcmpeq>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d111      	bne.n	80037bc <compute_pid_output+0x4c>
		memset(previous_error, 0, Number_Of_points_For_Kd_calc*sizeof(double));
 8003798:	23c8      	movs	r3, #200	@ 0xc8
 800379a:	005a      	lsls	r2, r3, #1
 800379c:	4b7f      	ldr	r3, [pc, #508]	@ (800399c <compute_pid_output+0x22c>)
 800379e:	2100      	movs	r1, #0
 80037a0:	0018      	movs	r0, r3
 80037a2:	f00c fbb7 	bl	800ff14 <memset>
		points_collected_since_set_temp_reset = 0;
 80037a6:	4b7e      	ldr	r3, [pc, #504]	@ (80039a0 <compute_pid_output+0x230>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
		integral_on = 0;
 80037ac:	4b7d      	ldr	r3, [pc, #500]	@ (80039a4 <compute_pid_output+0x234>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
		integral = 0;
 80037b2:	497d      	ldr	r1, [pc, #500]	@ (80039a8 <compute_pid_output+0x238>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	2300      	movs	r3, #0
 80037b8:	600a      	str	r2, [r1, #0]
 80037ba:	604b      	str	r3, [r1, #4]
	}

	previous_set_temp = set_temp;
 80037bc:	4976      	ldr	r1, [pc, #472]	@ (8003998 <compute_pid_output+0x228>)
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	600a      	str	r2, [r1, #0]
 80037c4:	604b      	str	r3, [r1, #4]
	error = set_temp - current_temp;
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	f7fe f9bb 	bl	8001b48 <__aeabi_dsub>
 80037d2:	0002      	movs	r2, r0
 80037d4:	000b      	movs	r3, r1
 80037d6:	613a      	str	r2, [r7, #16]
 80037d8:	617b      	str	r3, [r7, #20]

	if( (abs(current_temp - set_temp) / set_temp) <= 1 - Ki_introduction_point && integral_on == 0){
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	f7fe f9b1 	bl	8001b48 <__aeabi_dsub>
 80037e6:	0002      	movs	r2, r0
 80037e8:	000b      	movs	r3, r1
 80037ea:	0010      	movs	r0, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	f7fe fdd7 	bl	80023a0 <__aeabi_d2iz>
 80037f2:	0003      	movs	r3, r0
 80037f4:	17da      	asrs	r2, r3, #31
 80037f6:	189b      	adds	r3, r3, r2
 80037f8:	4053      	eors	r3, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fe fe0c 	bl	8002418 <__aeabi_i2d>
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f7fd fa80 	bl	8000d08 <__aeabi_ddiv>
 8003808:	0002      	movs	r2, r0
 800380a:	000b      	movs	r3, r1
 800380c:	0010      	movs	r0, r2
 800380e:	0019      	movs	r1, r3
 8003810:	4a66      	ldr	r2, [pc, #408]	@ (80039ac <compute_pid_output+0x23c>)
 8003812:	4b67      	ldr	r3, [pc, #412]	@ (80039b0 <compute_pid_output+0x240>)
 8003814:	f7fc fe26 	bl	8000464 <__aeabi_dcmple>
 8003818:	1e03      	subs	r3, r0, #0
 800381a:	d017      	beq.n	800384c <compute_pid_output+0xdc>
 800381c:	4b61      	ldr	r3, [pc, #388]	@ (80039a4 <compute_pid_output+0x234>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <compute_pid_output+0xdc>
		integral_estimate = assign_integral_value(set_temp, outside_temp);
 8003824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	6838      	ldr	r0, [r7, #0]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	f000 f8cc 	bl	80039c8 <assign_integral_value>
 8003830:	0002      	movs	r2, r0
 8003832:	000b      	movs	r3, r1
 8003834:	495f      	ldr	r1, [pc, #380]	@ (80039b4 <compute_pid_output+0x244>)
 8003836:	600a      	str	r2, [r1, #0]
 8003838:	604b      	str	r3, [r1, #4]
		integral = integral_estimate;
 800383a:	4b5e      	ldr	r3, [pc, #376]	@ (80039b4 <compute_pid_output+0x244>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4959      	ldr	r1, [pc, #356]	@ (80039a8 <compute_pid_output+0x238>)
 8003842:	600a      	str	r2, [r1, #0]
 8003844:	604b      	str	r3, [r1, #4]
		integral_on = 1;
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <compute_pid_output+0x234>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
	}

	if(integral_on && abs(Ki*integral_estimate - (Ki*(integral + error * dT))) <= Integral_max_deviation ){
 800384c:	4b55      	ldr	r3, [pc, #340]	@ (80039a4 <compute_pid_output+0x234>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05d      	beq.n	8003910 <compute_pid_output+0x1a0>
 8003854:	4b57      	ldr	r3, [pc, #348]	@ (80039b4 <compute_pid_output+0x244>)
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	4a57      	ldr	r2, [pc, #348]	@ (80039b8 <compute_pid_output+0x248>)
 800385c:	4b57      	ldr	r3, [pc, #348]	@ (80039bc <compute_pid_output+0x24c>)
 800385e:	f7fd fe8d 	bl	800157c <__aeabi_dmul>
 8003862:	0002      	movs	r2, r0
 8003864:	000b      	movs	r3, r1
 8003866:	0014      	movs	r4, r2
 8003868:	001d      	movs	r5, r3
 800386a:	4b4f      	ldr	r3, [pc, #316]	@ (80039a8 <compute_pid_output+0x238>)
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f7fc fe82 	bl	800057c <__aeabi_dadd>
 8003878:	0002      	movs	r2, r0
 800387a:	000b      	movs	r3, r1
 800387c:	0010      	movs	r0, r2
 800387e:	0019      	movs	r1, r3
 8003880:	4a4d      	ldr	r2, [pc, #308]	@ (80039b8 <compute_pid_output+0x248>)
 8003882:	4b4e      	ldr	r3, [pc, #312]	@ (80039bc <compute_pid_output+0x24c>)
 8003884:	f7fd fe7a 	bl	800157c <__aeabi_dmul>
 8003888:	0002      	movs	r2, r0
 800388a:	000b      	movs	r3, r1
 800388c:	0020      	movs	r0, r4
 800388e:	0029      	movs	r1, r5
 8003890:	f7fe f95a 	bl	8001b48 <__aeabi_dsub>
 8003894:	0002      	movs	r2, r0
 8003896:	000b      	movs	r3, r1
 8003898:	0010      	movs	r0, r2
 800389a:	0019      	movs	r1, r3
 800389c:	f7fe fd80 	bl	80023a0 <__aeabi_d2iz>
 80038a0:	0003      	movs	r3, r0
 80038a2:	3302      	adds	r3, #2
 80038a4:	db34      	blt.n	8003910 <compute_pid_output+0x1a0>
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <compute_pid_output+0x244>)
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	4a42      	ldr	r2, [pc, #264]	@ (80039b8 <compute_pid_output+0x248>)
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <compute_pid_output+0x24c>)
 80038b0:	f7fd fe64 	bl	800157c <__aeabi_dmul>
 80038b4:	0002      	movs	r2, r0
 80038b6:	000b      	movs	r3, r1
 80038b8:	0014      	movs	r4, r2
 80038ba:	001d      	movs	r5, r3
 80038bc:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <compute_pid_output+0x238>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f7fc fe59 	bl	800057c <__aeabi_dadd>
 80038ca:	0002      	movs	r2, r0
 80038cc:	000b      	movs	r3, r1
 80038ce:	0010      	movs	r0, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	4a39      	ldr	r2, [pc, #228]	@ (80039b8 <compute_pid_output+0x248>)
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <compute_pid_output+0x24c>)
 80038d6:	f7fd fe51 	bl	800157c <__aeabi_dmul>
 80038da:	0002      	movs	r2, r0
 80038dc:	000b      	movs	r3, r1
 80038de:	0020      	movs	r0, r4
 80038e0:	0029      	movs	r1, r5
 80038e2:	f7fe f931 	bl	8001b48 <__aeabi_dsub>
 80038e6:	0002      	movs	r2, r0
 80038e8:	000b      	movs	r3, r1
 80038ea:	0010      	movs	r0, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	f7fe fd57 	bl	80023a0 <__aeabi_d2iz>
 80038f2:	0003      	movs	r3, r0
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	dc0b      	bgt.n	8003910 <compute_pid_output+0x1a0>
		integral += error * dT;
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <compute_pid_output+0x238>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f7fc fe3b 	bl	800057c <__aeabi_dadd>
 8003906:	0002      	movs	r2, r0
 8003908:	000b      	movs	r3, r1
 800390a:	4927      	ldr	r1, [pc, #156]	@ (80039a8 <compute_pid_output+0x238>)
 800390c:	600a      	str	r2, [r1, #0]
 800390e:	604b      	str	r3, [r1, #4]
	}

	(*Kp_part) = Kp * error;
 8003910:	2200      	movs	r2, #0
 8003912:	4b2b      	ldr	r3, [pc, #172]	@ (80039c0 <compute_pid_output+0x250>)
 8003914:	6938      	ldr	r0, [r7, #16]
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	f7fd fe30 	bl	800157c <__aeabi_dmul>
 800391c:	0002      	movs	r2, r0
 800391e:	000b      	movs	r3, r1
 8003920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003922:	600a      	str	r2, [r1, #0]
 8003924:	604b      	str	r3, [r1, #4]
	(*Ki_part) = Ki * integral;
 8003926:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <compute_pid_output+0x238>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <compute_pid_output+0x248>)
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <compute_pid_output+0x24c>)
 8003930:	f7fd fe24 	bl	800157c <__aeabi_dmul>
 8003934:	0002      	movs	r2, r0
 8003936:	000b      	movs	r3, r1
 8003938:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800393a:	600a      	str	r2, [r1, #0]
 800393c:	604b      	str	r3, [r1, #4]
	(*Kd_part) = Kd * compute_derivative_part(error, previous_error, points_collected_since_set_temp_reset);
 800393e:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <compute_pid_output+0x230>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a16      	ldr	r2, [pc, #88]	@ (800399c <compute_pid_output+0x22c>)
 8003944:	6938      	ldr	r0, [r7, #16]
 8003946:	6979      	ldr	r1, [r7, #20]
 8003948:	f000 f8bc 	bl	8003ac4 <compute_derivative_part>
 800394c:	2200      	movs	r2, #0
 800394e:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <compute_pid_output+0x254>)
 8003950:	f7fd fe14 	bl	800157c <__aeabi_dmul>
 8003954:	0002      	movs	r2, r0
 8003956:	000b      	movs	r3, r1
 8003958:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800395a:	600a      	str	r2, [r1, #0]
 800395c:	604b      	str	r3, [r1, #4]
	points_collected_since_set_temp_reset++;
 800395e:	4b10      	ldr	r3, [pc, #64]	@ (80039a0 <compute_pid_output+0x230>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <compute_pid_output+0x230>)
 8003966:	601a      	str	r2, [r3, #0]

	return (*Kp_part) + (*Ki_part) + (*Kd_part);
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f7fc fe02 	bl	800057c <__aeabi_dadd>
 8003978:	0002      	movs	r2, r0
 800397a:	000b      	movs	r3, r1
 800397c:	0010      	movs	r0, r2
 800397e:	0019      	movs	r1, r3
 8003980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f7fc fdf9 	bl	800057c <__aeabi_dadd>
 800398a:	0002      	movs	r2, r0
 800398c:	000b      	movs	r3, r1
}
 800398e:	0010      	movs	r0, r2
 8003990:	0019      	movs	r1, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b006      	add	sp, #24
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	200005b0 	.word	0x200005b0
 800399c:	200005b8 	.word	0x200005b8
 80039a0:	20000748 	.word	0x20000748
 80039a4:	2000074c 	.word	0x2000074c
 80039a8:	20000750 	.word	0x20000750
 80039ac:	99999998 	.word	0x99999998
 80039b0:	3fb99999 	.word	0x3fb99999
 80039b4:	20000758 	.word	0x20000758
 80039b8:	47ae147b 	.word	0x47ae147b
 80039bc:	3f847ae1 	.word	0x3f847ae1
 80039c0:	40120000 	.word	0x40120000
 80039c4:	40813000 	.word	0x40813000

080039c8 <assign_integral_value>:

double assign_integral_value(double set_temp, double outside_temp){
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	@ 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60b8      	str	r0, [r7, #8]
 80039d0:	60f9      	str	r1, [r7, #12]
 80039d2:	603a      	str	r2, [r7, #0]
 80039d4:	607b      	str	r3, [r7, #4]
	double temp_diff = set_temp - outside_temp;
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68b8      	ldr	r0, [r7, #8]
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	f7fe f8b3 	bl	8001b48 <__aeabi_dsub>
 80039e2:	0002      	movs	r2, r0
 80039e4:	000b      	movs	r3, r1
 80039e6:	613a      	str	r2, [r7, #16]
 80039e8:	617b      	str	r3, [r7, #20]
	double previous_closeness = 999;
 80039ea:	2200      	movs	r2, #0
 80039ec:	4b30      	ldr	r3, [pc, #192]	@ (8003ab0 <assign_integral_value+0xe8>)
 80039ee:	623a      	str	r2, [r7, #32]
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < 12; i++){
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e051      	b.n	8003a9c <assign_integral_value+0xd4>
		if (abs(temp_diff - Integral_Temp_Table[i]) < previous_closeness){
 80039f8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab4 <assign_integral_value+0xec>)
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	58d3      	ldr	r3, [r2, r3]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7fe fd09 	bl	8002418 <__aeabi_i2d>
 8003a06:	0002      	movs	r2, r0
 8003a08:	000b      	movs	r3, r1
 8003a0a:	6938      	ldr	r0, [r7, #16]
 8003a0c:	6979      	ldr	r1, [r7, #20]
 8003a0e:	f7fe f89b 	bl	8001b48 <__aeabi_dsub>
 8003a12:	0002      	movs	r2, r0
 8003a14:	000b      	movs	r3, r1
 8003a16:	0010      	movs	r0, r2
 8003a18:	0019      	movs	r1, r3
 8003a1a:	f7fe fcc1 	bl	80023a0 <__aeabi_d2iz>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	17da      	asrs	r2, r3, #31
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	4053      	eors	r3, r2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fe fcf6 	bl	8002418 <__aeabi_i2d>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	000b      	movs	r3, r1
 8003a30:	6a38      	ldr	r0, [r7, #32]
 8003a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a34:	f7fc fd20 	bl	8000478 <__aeabi_dcmpgt>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d01e      	beq.n	8003a7a <assign_integral_value+0xb2>
			previous_closeness = abs(temp_diff - Integral_Temp_Table[i]);
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <assign_integral_value+0xec>)
 8003a3e:	69fa      	ldr	r2, [r7, #28]
 8003a40:	0092      	lsls	r2, r2, #2
 8003a42:	58d3      	ldr	r3, [r2, r3]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7fe fce7 	bl	8002418 <__aeabi_i2d>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	000b      	movs	r3, r1
 8003a4e:	6938      	ldr	r0, [r7, #16]
 8003a50:	6979      	ldr	r1, [r7, #20]
 8003a52:	f7fe f879 	bl	8001b48 <__aeabi_dsub>
 8003a56:	0002      	movs	r2, r0
 8003a58:	000b      	movs	r3, r1
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	f7fe fc9f 	bl	80023a0 <__aeabi_d2iz>
 8003a62:	0003      	movs	r3, r0
 8003a64:	17da      	asrs	r2, r3, #31
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	4053      	eors	r3, r2
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fe fcd4 	bl	8002418 <__aeabi_i2d>
 8003a70:	0002      	movs	r2, r0
 8003a72:	000b      	movs	r3, r1
 8003a74:	623a      	str	r2, [r7, #32]
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a78:	e00d      	b.n	8003a96 <assign_integral_value+0xce>
		}
		else{
			return Integral_Part_Table[i-1] / Ki;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <assign_integral_value+0xf0>)
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	18d3      	adds	r3, r2, r3
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <assign_integral_value+0xf4>)
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <assign_integral_value+0xf8>)
 8003a8c:	f7fd f93c 	bl	8000d08 <__aeabi_ddiv>
 8003a90:	0002      	movs	r2, r0
 8003a92:	000b      	movs	r3, r1
 8003a94:	e007      	b.n	8003aa6 <assign_integral_value+0xde>
	for(int i = 0; i < 12; i++){
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b0b      	cmp	r3, #11
 8003aa0:	ddaa      	ble.n	80039f8 <assign_integral_value+0x30>
		}
	}
	return 0;
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b00a      	add	sp, #40	@ 0x28
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	408f3800 	.word	0x408f3800
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000030 	.word	0x20000030
 8003abc:	47ae147b 	.word	0x47ae147b
 8003ac0:	3f847ae1 	.word	0x3f847ae1

08003ac4 <compute_derivative_part>:

double compute_derivative_part(double current_error, double *error_history, int points_collected_since_set_temp_reset){
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60b8      	str	r0, [r7, #8]
 8003acc:	60f9      	str	r1, [r7, #12]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
	double avg_speed = 0;
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613a      	str	r2, [r7, #16]
 8003ad8:	617b      	str	r3, [r7, #20]

	// Push every element to the left and add to the right
	for(int i = 0; i < Number_Of_points_For_Kd_calc -1; i++){
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ade:	e00f      	b.n	8003b00 <compute_derivative_part+0x3c>
		error_history[i] = error_history[i+1];
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aec:	00d2      	lsls	r2, r2, #3
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	1889      	adds	r1, r1, r2
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	600a      	str	r2, [r1, #0]
 8003af8:	604b      	str	r3, [r1, #4]
	for(int i = 0; i < Number_Of_points_For_Kd_calc -1; i++){
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	3301      	adds	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	2b30      	cmp	r3, #48	@ 0x30
 8003b04:	ddec      	ble.n	8003ae0 <compute_derivative_part+0x1c>
	}
	error_history[Number_Of_points_For_Kd_calc-1] = current_error;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3389      	adds	r3, #137	@ 0x89
 8003b0a:	33ff      	adds	r3, #255	@ 0xff
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	600a      	str	r2, [r1, #0]
 8003b14:	604b      	str	r3, [r1, #4]

	// Calc the avg speed
	double earliest_error = 0;
 8003b16:	2200      	movs	r2, #0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61ba      	str	r2, [r7, #24]
 8003b1c:	61fb      	str	r3, [r7, #28]
	if (points_collected_since_set_temp_reset < Number_Of_points_For_Kd_calc){
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b31      	cmp	r3, #49	@ 0x31
 8003b22:	dc0a      	bgt.n	8003b3a <compute_derivative_part+0x76>
		earliest_error = error_history[Number_Of_points_For_Kd_calc - 1 - points_collected_since_set_temp_reset];
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2231      	movs	r2, #49	@ 0x31
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	61ba      	str	r2, [r7, #24]
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e004      	b.n	8003b44 <compute_derivative_part+0x80>
	}
	else{
		earliest_error = error_history[0];
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	61ba      	str	r2, [r7, #24]
 8003b42:	61fb      	str	r3, [r7, #28]
	}
	avg_speed = (error_history[Number_Of_points_For_Kd_calc-1] - earliest_error) / (Number_Of_points_For_Kd_calc*dT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3389      	adds	r3, #137	@ 0x89
 8003b48:	33ff      	adds	r3, #255	@ 0xff
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f7fd fff9 	bl	8001b48 <__aeabi_dsub>
 8003b56:	0002      	movs	r2, r0
 8003b58:	000b      	movs	r3, r1
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <compute_derivative_part+0xb8>)
 8003b62:	f7fd f8d1 	bl	8000d08 <__aeabi_ddiv>
 8003b66:	0002      	movs	r2, r0
 8003b68:	000b      	movs	r3, r1
 8003b6a:	613a      	str	r2, [r7, #16]
 8003b6c:	617b      	str	r3, [r7, #20]
	return avg_speed;
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	697b      	ldr	r3, [r7, #20]
}
 8003b72:	0010      	movs	r0, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b00a      	add	sp, #40	@ 0x28
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40490000 	.word	0x40490000

08003b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b8a:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b92:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2201      	movs	r2, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003ba4:	2180      	movs	r1, #128	@ 0x80
 8003ba6:	0549      	lsls	r1, r1, #21
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bac:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <HAL_MspInit+0x4c>)
 8003bae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	055b      	lsls	r3, r3, #21
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003bba:	23c0      	movs	r3, #192	@ 0xc0
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f000 fcaa 	bl	8004518 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b08b      	sub	sp, #44	@ 0x2c
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	2414      	movs	r4, #20
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	0018      	movs	r0, r3
 8003bde:	2314      	movs	r3, #20
 8003be0:	001a      	movs	r2, r3
 8003be2:	2100      	movs	r1, #0
 8003be4:	f00c f996 	bl	800ff14 <memset>
  if(hadc->Instance==ADC1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	@ (8003c60 <HAL_ADC_MspInit+0x90>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d131      	bne.n	8003c56 <HAL_ADC_MspInit+0x86>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003bf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003bf8:	2180      	movs	r1, #128	@ 0x80
 8003bfa:	0349      	lsls	r1, r1, #13
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c00:	4b18      	ldr	r3, [pc, #96]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c04:	2380      	movs	r3, #128	@ 0x80
 8003c06:	035b      	lsls	r3, r3, #13
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c12:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003c14:	2101      	movs	r1, #1
 8003c16:	430a      	orrs	r2, r1
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c1a:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_ADC_MspInit+0x94>)
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c26:	193b      	adds	r3, r7, r4
 8003c28:	2280      	movs	r2, #128	@ 0x80
 8003c2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c2c:	193b      	adds	r3, r7, r4
 8003c2e:	2203      	movs	r2, #3
 8003c30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	2200      	movs	r2, #0
 8003c36:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c38:	193a      	adds	r2, r7, r4
 8003c3a:	23a0      	movs	r3, #160	@ 0xa0
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f001 fb49 	bl	80052d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	200c      	movs	r0, #12
 8003c4c:	f001 fb12 	bl	8005274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003c50:	200c      	movs	r0, #12
 8003c52:	f001 fb24 	bl	800529e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b00b      	add	sp, #44	@ 0x2c
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	40012400 	.word	0x40012400
 8003c64:	40021000 	.word	0x40021000

08003c68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b097      	sub	sp, #92	@ 0x5c
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c70:	2344      	movs	r3, #68	@ 0x44
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	0018      	movs	r0, r3
 8003c76:	2314      	movs	r3, #20
 8003c78:	001a      	movs	r2, r3
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f00c f94a 	bl	800ff14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c80:	2418      	movs	r4, #24
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	0018      	movs	r0, r3
 8003c86:	232c      	movs	r3, #44	@ 0x2c
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f00c f942 	bl	800ff14 <memset>
  if(hi2c->Instance==I2C2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a35      	ldr	r2, [pc, #212]	@ (8003d6c <HAL_I2C_MspInit+0x104>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d163      	bne.n	8003d62 <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003c9a:	193b      	adds	r3, r7, r4
 8003c9c:	2240      	movs	r2, #64	@ 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003ca0:	193b      	adds	r3, r7, r4
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca6:	193b      	adds	r3, r7, r4
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f004 fdad 	bl	8008808 <HAL_RCCEx_PeriphCLKConfig>
 8003cae:	1e03      	subs	r3, r0, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cb2:	f7ff fd57 	bl	8003764 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cba:	4b2d      	ldr	r3, [pc, #180]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4013      	ands	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b28      	ldr	r3, [pc, #160]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cd2:	4b27      	ldr	r3, [pc, #156]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cda:	4b25      	ldr	r3, [pc, #148]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ce6:	2144      	movs	r1, #68	@ 0x44
 8003ce8:	187b      	adds	r3, r7, r1
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	01d2      	lsls	r2, r2, #7
 8003cee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cf0:	000c      	movs	r4, r1
 8003cf2:	193b      	adds	r3, r7, r4
 8003cf4:	2212      	movs	r2, #18
 8003cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	2200      	movs	r2, #0
 8003d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	2206      	movs	r2, #6
 8003d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_I2C_MspInit+0x10c>)
 8003d0e:	0019      	movs	r1, r3
 8003d10:	0010      	movs	r0, r2
 8003d12:	f001 fae1 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d16:	0021      	movs	r1, r4
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2280      	movs	r2, #128	@ 0x80
 8003d1c:	0092      	lsls	r2, r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2212      	movs	r2, #18
 8003d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2201      	movs	r2, #1
 8003d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2208      	movs	r2, #8
 8003d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	23a0      	movs	r3, #160	@ 0xa0
 8003d3c:	05db      	lsls	r3, r3, #23
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f001 fac9 	bl	80052d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d46:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003d4c:	2180      	movs	r1, #128	@ 0x80
 8003d4e:	03c9      	lsls	r1, r1, #15
 8003d50:	430a      	orrs	r2, r1
 8003d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_I2C_MspInit+0x108>)
 8003d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	03db      	lsls	r3, r3, #15
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b017      	add	sp, #92	@ 0x5c
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	40005800 	.word	0x40005800
 8003d70:	40021000 	.word	0x40021000
 8003d74:	50000400 	.word	0x50000400

08003d78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08b      	sub	sp, #44	@ 0x2c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	2414      	movs	r4, #20
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	0018      	movs	r0, r3
 8003d86:	2314      	movs	r3, #20
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f00c f8c2 	bl	800ff14 <memset>
  if(hspi->Instance==SPI2)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	@ (8003e30 <HAL_SPI_MspInit+0xb8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d146      	bne.n	8003e28 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d9a:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9e:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003da0:	2180      	movs	r1, #128	@ 0x80
 8003da2:	01c9      	lsls	r1, r1, #7
 8003da4:	430a      	orrs	r2, r1
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003da8:	4b22      	ldr	r3, [pc, #136]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	01db      	lsls	r3, r3, #7
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003db8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <HAL_SPI_MspInit+0xbc>)
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003dce:	193b      	adds	r3, r7, r4
 8003dd0:	2209      	movs	r2, #9
 8003dd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd4:	193b      	adds	r3, r7, r4
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	2200      	movs	r2, #0
 8003dde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	2200      	movs	r2, #0
 8003de4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003de6:	193b      	adds	r3, r7, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dec:	193a      	adds	r2, r7, r4
 8003dee:	23a0      	movs	r3, #160	@ 0xa0
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f001 fa6f 	bl	80052d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003dfa:	0021      	movs	r1, r4
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	2210      	movs	r2, #16
 8003e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	187b      	adds	r3, r7, r1
 8003e04:	2202      	movs	r2, #2
 8003e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2201      	movs	r2, #1
 8003e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1a:	187a      	adds	r2, r7, r1
 8003e1c:	23a0      	movs	r3, #160	@ 0xa0
 8003e1e:	05db      	lsls	r3, r3, #23
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f001 fa58 	bl	80052d8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b00b      	add	sp, #44	@ 0x2c
 8003e2e:	bd90      	pop	{r4, r7, pc}
 8003e30:	40003800 	.word	0x40003800
 8003e34:	40021000 	.word	0x40021000

08003e38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <HAL_TIM_Base_MspInit+0xb4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d114      	bne.n	8003e74 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e4e:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e50:	2120      	movs	r1, #32
 8003e52:	430a      	orrs	r2, r1
 8003e54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e56:	4b26      	ldr	r3, [pc, #152]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e62:	2200      	movs	r2, #0
 8003e64:	2100      	movs	r1, #0
 8003e66:	2012      	movs	r0, #18
 8003e68:	f001 fa04 	bl	8005274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e6c:	2012      	movs	r0, #18
 8003e6e:	f001 fa16 	bl	800529e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003e72:	e036      	b.n	8003ee2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM16)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <HAL_TIM_Base_MspInit+0xbc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d116      	bne.n	8003eac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e84:	2180      	movs	r1, #128	@ 0x80
 8003e86:	0289      	lsls	r1, r1, #10
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	029b      	lsls	r3, r3, #10
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	2015      	movs	r0, #21
 8003ea0:	f001 f9e8 	bl	8005274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003ea4:	2015      	movs	r0, #21
 8003ea6:	f001 f9fa 	bl	800529e <HAL_NVIC_EnableIRQ>
}
 8003eaa:	e01a      	b.n	8003ee2 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM17)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d115      	bne.n	8003ee2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	02c9      	lsls	r1, r1, #11
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_TIM_Base_MspInit+0xb8>)
 8003ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	02db      	lsls	r3, r3, #11
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2016      	movs	r0, #22
 8003ed8:	f001 f9cc 	bl	8005274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003edc:	2016      	movs	r0, #22
 8003ede:	f001 f9de 	bl	800529e <HAL_NVIC_EnableIRQ>
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b006      	add	sp, #24
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	40001400 	.word	0x40001400
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40014400 	.word	0x40014400
 8003ef8:	40014800 	.word	0x40014800

08003efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	e7fd      	b.n	8003f00 <NMI_Handler+0x4>

08003f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	e7fd      	b.n	8003f08 <HardFault_Handler+0x4>

08003f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f10:	46c0      	nop			@ (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f24:	f000 fab8 	bl	8004498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Down_Btn_Pin);
 8003f32:	2002      	movs	r0, #2
 8003f34:	f001 fb92 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Up_Btn_Pin);
 8003f42:	2380      	movs	r3, #128	@ 0x80
 8003f44:	015b      	lsls	r3, r3, #5
 8003f46:	0018      	movs	r0, r3
 8003f48:	f001 fb88 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <USB_IRQHandler>:

/**
  * @brief This function handles USB interrupt.
  */
void USB_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <USB_IRQHandler+0x14>)
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f002 fb7c 	bl	8006658 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003f60:	46c0      	nop			@ (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	20001c5c 	.word	0x20001c5c

08003f6c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 Interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <ADC1_IRQHandler+0x14>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 fdaa 	bl	8004acc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	20000374 	.word	0x20000374

08003f84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global Interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f88:	4b03      	ldr	r3, [pc, #12]	@ (8003f98 <TIM7_IRQHandler+0x14>)
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f005 fab6 	bl	80094fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	20000490 	.word	0x20000490

08003f9c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <TIM16_IRQHandler+0x14>)
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f005 faaa 	bl	80094fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	200004dc 	.word	0x200004dc

08003fb4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <TIM17_IRQHandler+0x14>)
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f005 fa9e 	bl	80094fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	20000528 	.word	0x20000528

08003fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  return 1;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_kill>:

int _kill(int pid, int sig)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fe2:	f00c f803 	bl	800ffec <__errno>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	2216      	movs	r2, #22
 8003fea:	601a      	str	r2, [r3, #0]
  return -1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	425b      	negs	r3, r3
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <_exit>:

void _exit (int status)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004000:	2301      	movs	r3, #1
 8004002:	425a      	negs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0011      	movs	r1, r2
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff ffe5 	bl	8003fd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	e7fd      	b.n	800400e <_exit+0x16>

08004012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b086      	sub	sp, #24
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e00a      	b.n	800403a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004024:	e000      	b.n	8004028 <_read+0x16>
 8004026:	bf00      	nop
 8004028:	0001      	movs	r1, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	60ba      	str	r2, [r7, #8]
 8004030:	b2ca      	uxtb	r2, r1
 8004032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf0      	blt.n	8004024 <_read+0x12>
  }

  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b006      	add	sp, #24
 800404a:	bd80      	pop	{r7, pc}

0800404c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e009      	b.n	8004072 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	60ba      	str	r2, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	0018      	movs	r0, r3
 8004068:	e000      	b.n	800406c <_write+0x20>
 800406a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	429a      	cmp	r2, r3
 8004078:	dbf1      	blt.n	800405e <_write+0x12>
  }
  return len;
 800407a:	687b      	ldr	r3, [r7, #4]
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b006      	add	sp, #24
 8004082:	bd80      	pop	{r7, pc}

08004084 <_close>:

int _close(int file)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800408c:	2301      	movs	r3, #1
 800408e:	425b      	negs	r3, r3
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}

08004098 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2280      	movs	r2, #128	@ 0x80
 80040a6:	0192      	lsls	r2, r2, #6
 80040a8:	605a      	str	r2, [r3, #4]
  return 0;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_isatty>:

int _isatty(int file)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040bc:	2301      	movs	r3, #1
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b002      	add	sp, #8
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	@ (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	@ (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	@ (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	@ (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f00b ff6e 	bl	800ffec <__errno>
 8004110:	0003      	movs	r3, r0
 8004112:	220c      	movs	r2, #12
 8004114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004116:	2301      	movs	r3, #1
 8004118:	425b      	negs	r3, r3
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	18d2      	adds	r2, r2, r3
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <_sbrk+0x64>)
 800412c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b006      	add	sp, #24
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20024000 	.word	0x20024000
 800413c:	00000400 	.word	0x00000400
 8004140:	20000760 	.word	0x20000760
 8004144:	200022a8 	.word	0x200022a8

08004148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800414c:	46c0      	nop			@ (mov r8, r8)
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <read_temp>:
#include "main.h"
#include "tmp1075.h"

int read_temp(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, double *temp){
 8004154:	b590      	push	{r4, r7, lr}
 8004156:	b089      	sub	sp, #36	@ 0x24
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	200b      	movs	r0, #11
 8004160:	183b      	adds	r3, r7, r0
 8004162:	1c0a      	adds	r2, r1, #0
 8004164:	701a      	strb	r2, [r3, #0]
	uint8_t raw_data[2] = {0};
 8004166:	2414      	movs	r4, #20
 8004168:	193b      	adds	r3, r7, r4
 800416a:	2200      	movs	r2, #0
 800416c:	801a      	strh	r2, [r3, #0]
	if(read_reg(hi2c,dev_addr,TEMP_reg_addr,raw_data,2) != 0)
 800416e:	183b      	adds	r3, r7, r0
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b299      	uxth	r1, r3
 8004174:	193b      	adds	r3, r7, r4
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	2202      	movs	r2, #2
 800417a:	9200      	str	r2, [sp, #0]
 800417c:	2200      	movs	r2, #0
 800417e:	f000 f821 	bl	80041c4 <read_reg>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d001      	beq.n	800418a <read_temp+0x36>
		return 1;
 8004186:	2301      	movs	r3, #1
 8004188:	e015      	b.n	80041b6 <read_temp+0x62>
	*temp = ((raw_data[0] << 4) | (raw_data[1]) >> 4) * 0.0625; //0.0625C per LSB
 800418a:	2214      	movs	r2, #20
 800418c:	18bb      	adds	r3, r7, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	18ba      	adds	r2, r7, r2
 8004194:	7852      	ldrb	r2, [r2, #1]
 8004196:	0912      	lsrs	r2, r2, #4
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	4313      	orrs	r3, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f7fe f93b 	bl	8002418 <__aeabi_i2d>
 80041a2:	2200      	movs	r2, #0
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <read_temp+0x6c>)
 80041a6:	f7fd f9e9 	bl	800157c <__aeabi_dmul>
 80041aa:	0002      	movs	r2, r0
 80041ac:	000b      	movs	r3, r1
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	600a      	str	r2, [r1, #0]
 80041b2:	604b      	str	r3, [r1, #4]
	return 0;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b007      	add	sp, #28
 80041bc:	bd90      	pop	{r4, r7, pc}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	3fb00000 	.word	0x3fb00000

080041c4 <read_reg>:

int read_reg(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint8_t reg_addr, uint8_t *rx_data, uint8_t size){
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	0008      	movs	r0, r1
 80041ce:	0011      	movs	r1, r2
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	240a      	movs	r4, #10
 80041d4:	193b      	adds	r3, r7, r4
 80041d6:	1c02      	adds	r2, r0, #0
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	2009      	movs	r0, #9
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	1c0a      	adds	r2, r1, #0
 80041e0:	701a      	strb	r2, [r3, #0]

	if(HAL_I2C_Master_Transmit(hi2c, dev_addr, &reg_addr, 1, 100) != HAL_OK)
 80041e2:	183a      	adds	r2, r7, r0
 80041e4:	193b      	adds	r3, r7, r4
 80041e6:	8819      	ldrh	r1, [r3, #0]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	2364      	movs	r3, #100	@ 0x64
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	2301      	movs	r3, #1
 80041f0:	f001 fb0e 	bl	8005810 <HAL_I2C_Master_Transmit>
 80041f4:	1e03      	subs	r3, r0, #0
 80041f6:	d001      	beq.n	80041fc <read_reg+0x38>
		return 1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e012      	b.n	8004222 <read_reg+0x5e>

	if(HAL_I2C_Master_Receive(hi2c, dev_addr, rx_data, size, 100) != HAL_OK)
 80041fc:	2320      	movs	r3, #32
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b29c      	uxth	r4, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	230a      	movs	r3, #10
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	8819      	ldrh	r1, [r3, #0]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	2364      	movs	r3, #100	@ 0x64
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	0023      	movs	r3, r4
 8004214:	f001 fc26 	bl	8005a64 <HAL_I2C_Master_Receive>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <read_reg+0x5c>
		return 1;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <read_reg+0x5e>

	return 0;
 8004220:	2300      	movs	r3, #0
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b005      	add	sp, #20
 8004228:	bd90      	pop	{r4, r7, pc}

0800422a <send_temps_via_usb>:
#include <string.h>
#include "usb_helpers.h"
#include "usbd_cdc_if.h"


void send_temps_via_usb(double current_temp_inside, double current_temp_outside, double set_temp_inside){
 800422a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422c:	b091      	sub	sp, #68	@ 0x44
 800422e:	af04      	add	r7, sp, #16
 8004230:	60b8      	str	r0, [r7, #8]
 8004232:	60f9      	str	r1, [r7, #12]
 8004234:	603a      	str	r2, [r7, #0]
 8004236:	607b      	str	r3, [r7, #4]
	uint8_t usb_tx_data[25] = {0};
 8004238:	2614      	movs	r6, #20
 800423a:	19bb      	adds	r3, r7, r6
 800423c:	0018      	movs	r0, r3
 800423e:	2319      	movs	r3, #25
 8004240:	001a      	movs	r2, r3
 8004242:	2100      	movs	r1, #0
 8004244:	f00b fe66 	bl	800ff14 <memset>
	put_temps_into_char_array(current_temp_inside, current_temp_outside, set_temp_inside, usb_tx_data, 25);
 8004248:	683c      	ldr	r4, [r7, #0]
 800424a:	687d      	ldr	r5, [r7, #4]
 800424c:	68b8      	ldr	r0, [r7, #8]
 800424e:	68f9      	ldr	r1, [r7, #12]
 8004250:	2319      	movs	r3, #25
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	19bb      	adds	r3, r7, r6
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800425a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800425c:	9200      	str	r2, [sp, #0]
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	0022      	movs	r2, r4
 8004262:	002b      	movs	r3, r5
 8004264:	f000 f85a 	bl	800431c <put_temps_into_char_array>
	CDC_Transmit_FS(usb_tx_data, 25);
 8004268:	19bb      	adds	r3, r7, r6
 800426a:	2119      	movs	r1, #25
 800426c:	0018      	movs	r0, r3
 800426e:	f009 fd49 	bl	800dd04 <CDC_Transmit_FS>
}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b00d      	add	sp, #52	@ 0x34
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800427c <listen_for_temp_change_sent_via_usb>:

void listen_for_temp_change_sent_via_usb(double *set_temp_inside){
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
	uint32_t len = 20;
 8004284:	2314      	movs	r3, #20
 8004286:	60fb      	str	r3, [r7, #12]
	static uint8_t usb_rx_data[20] = {0};
	CDC_Receive(usb_rx_data, &len);
 8004288:	230c      	movs	r3, #12
 800428a:	18fa      	adds	r2, r7, r3
 800428c:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <listen_for_temp_change_sent_via_usb+0x48>)
 800428e:	0011      	movs	r1, r2
 8004290:	0018      	movs	r0, r3
 8004292:	f009 fcd7 	bl	800dc44 <CDC_Receive>

	if(usb_rx_data[0] != '\0' && string_to_double(usb_rx_data, 20, set_temp_inside) != 1){
 8004296:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <listen_for_temp_change_sent_via_usb+0x48>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <listen_for_temp_change_sent_via_usb+0x40>
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <listen_for_temp_change_sent_via_usb+0x48>)
 80042a2:	2114      	movs	r1, #20
 80042a4:	0018      	movs	r0, r3
 80042a6:	f000 f80f 	bl	80042c8 <string_to_double>
 80042aa:	0003      	movs	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <listen_for_temp_change_sent_via_usb+0x40>
		memset(usb_rx_data, 0, 20);
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <listen_for_temp_change_sent_via_usb+0x48>)
 80042b2:	2214      	movs	r2, #20
 80042b4:	2100      	movs	r1, #0
 80042b6:	0018      	movs	r0, r3
 80042b8:	f00b fe2c 	bl	800ff14 <memset>
	}
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b004      	add	sp, #16
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000764 	.word	0x20000764

080042c8 <string_to_double>:


int string_to_double(uint8_t *data, uint8_t size, double *result){
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	230b      	movs	r3, #11
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	1c0a      	adds	r2, r1, #0
 80042d8:	701a      	strb	r2, [r3, #0]
	char *endptr = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
	double temp = strtod((const char*)data, &endptr);
 80042de:	2314      	movs	r3, #20
 80042e0:	18fa      	adds	r2, r7, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f00b f860 	bl	800f3ac <strtod>
 80042ec:	0002      	movs	r2, r0
 80042ee:	000b      	movs	r3, r1
 80042f0:	61ba      	str	r2, [r7, #24]
 80042f2:	61fb      	str	r3, [r7, #28]

	if (*endptr != '\0' && *endptr != '\n')
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <string_to_double+0x40>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b0a      	cmp	r3, #10
 8004302:	d001      	beq.n	8004308 <string_to_double+0x40>
		return 1;
 8004304:	2301      	movs	r3, #1
 8004306:	e005      	b.n	8004314 <string_to_double+0x4c>

	*result = temp;
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	600a      	str	r2, [r1, #0]
 8004310:	604b      	str	r3, [r1, #4]
	return 0;
 8004312:	2300      	movs	r3, #0

}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b008      	add	sp, #32
 800431a:	bd80      	pop	{r7, pc}

0800431c <put_temps_into_char_array>:
int put_temps_into_char_array(double temp1, double temp2, double temp3, uint8_t *char_array, uint8_t size){
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08b      	sub	sp, #44	@ 0x2c
 8004320:	af06      	add	r7, sp, #24
 8004322:	60b8      	str	r0, [r7, #8]
 8004324:	60f9      	str	r1, [r7, #12]
 8004326:	603a      	str	r2, [r7, #0]
 8004328:	607b      	str	r3, [r7, #4]
	memset(char_array,0, size);
 800432a:	242c      	movs	r4, #44	@ 0x2c
 800432c:	193b      	adds	r3, r7, r4
 800432e:	781a      	ldrb	r2, [r3, #0]
 8004330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004332:	2100      	movs	r1, #0
 8004334:	0018      	movs	r0, r3
 8004336:	f00b fded 	bl	800ff14 <memset>
	snprintf((char*)char_array, size, "%.1lf, %.1lf, %.1lf\n\r", temp1, temp2, temp3);
 800433a:	193b      	adds	r3, r7, r4
 800433c:	7819      	ldrb	r1, [r3, #0]
 800433e:	4c0b      	ldr	r4, [pc, #44]	@ (800436c <put_temps_into_char_array+0x50>)
 8004340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004342:	6a3a      	ldr	r2, [r7, #32]
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	9204      	str	r2, [sp, #16]
 8004348:	9305      	str	r3, [sp, #20]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	9202      	str	r2, [sp, #8]
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	9200      	str	r2, [sp, #0]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	0022      	movs	r2, r4
 800435c:	f00b fd58 	bl	800fe10 <sniprintf>
	return 0;
 8004360:	2300      	movs	r3, #0
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b005      	add	sp, #20
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	08012b90 	.word	0x08012b90

08004370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004370:	480d      	ldr	r0, [pc, #52]	@ (80043a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004372:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004374:	f7ff fee8 	bl	8004148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004378:	480c      	ldr	r0, [pc, #48]	@ (80043ac <LoopForever+0x6>)
  ldr r1, =_edata
 800437a:	490d      	ldr	r1, [pc, #52]	@ (80043b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800437c:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <LoopForever+0xe>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004380:	e002      	b.n	8004388 <LoopCopyDataInit>

08004382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004386:	3304      	adds	r3, #4

08004388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800438c:	d3f9      	bcc.n	8004382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438e:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004390:	4c0a      	ldr	r4, [pc, #40]	@ (80043bc <LoopForever+0x16>)
  movs r3, #0
 8004392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004394:	e001      	b.n	800439a <LoopFillZerobss>

08004396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004398:	3204      	adds	r2, #4

0800439a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800439c:	d3fb      	bcc.n	8004396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800439e:	f00b fe2b 	bl	800fff8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80043a2:	f7fe fcdd 	bl	8002d60 <main>

080043a6 <LoopForever>:

LoopForever:
  b LoopForever
 80043a6:	e7fe      	b.n	80043a6 <LoopForever>
  ldr   r0, =_estack
 80043a8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80043ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 80043b4:	080131b4 	.word	0x080131b4
  ldr r2, =_sbss
 80043b8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 80043bc:	200022a8 	.word	0x200022a8

080043c0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043c0:	e7fe      	b.n	80043c0 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>
	...

080043c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_Init+0x3c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <HAL_Init+0x3c>)
 80043d6:	2180      	movs	r1, #128	@ 0x80
 80043d8:	0049      	lsls	r1, r1, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043de:	2003      	movs	r0, #3
 80043e0:	f000 f810 	bl	8004404 <HAL_InitTick>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e001      	b.n	80043f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80043f0:	f7ff fbc6 	bl	8003b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043f4:	1dfb      	adds	r3, r7, #7
 80043f6:	781b      	ldrb	r3, [r3, #0]
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b002      	add	sp, #8
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40022000 	.word	0x40022000

08004404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800440c:	230f      	movs	r3, #15
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004414:	4b1d      	ldr	r3, [pc, #116]	@ (800448c <HAL_InitTick+0x88>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02b      	beq.n	8004474 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800441c:	4b1c      	ldr	r3, [pc, #112]	@ (8004490 <HAL_InitTick+0x8c>)
 800441e:	681c      	ldr	r4, [r3, #0]
 8004420:	4b1a      	ldr	r3, [pc, #104]	@ (800448c <HAL_InitTick+0x88>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	0019      	movs	r1, r3
 8004426:	23fa      	movs	r3, #250	@ 0xfa
 8004428:	0098      	lsls	r0, r3, #2
 800442a:	f7fb fe85 	bl	8000138 <__udivsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	0019      	movs	r1, r3
 8004432:	0020      	movs	r0, r4
 8004434:	f7fb fe80 	bl	8000138 <__udivsi3>
 8004438:	0003      	movs	r3, r0
 800443a:	0018      	movs	r0, r3
 800443c:	f000 ff3f 	bl	80052be <HAL_SYSTICK_Config>
 8004440:	1e03      	subs	r3, r0, #0
 8004442:	d112      	bne.n	800446a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d80a      	bhi.n	8004460 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	2301      	movs	r3, #1
 800444e:	425b      	negs	r3, r3
 8004450:	2200      	movs	r2, #0
 8004452:	0018      	movs	r0, r3
 8004454:	f000 ff0e 	bl	8005274 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004458:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <HAL_InitTick+0x90>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00d      	b.n	800447c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004460:	230f      	movs	r3, #15
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e008      	b.n	800447c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800446a:	230f      	movs	r3, #15
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e003      	b.n	800447c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004474:	230f      	movs	r3, #15
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800447c:	230f      	movs	r3, #15
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	781b      	ldrb	r3, [r3, #0]
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b005      	add	sp, #20
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	20000098 	.word	0x20000098
 8004490:	20000090 	.word	0x20000090
 8004494:	20000094 	.word	0x20000094

08004498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_IncTick+0x1c>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	001a      	movs	r2, r3
 80044a2:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <HAL_IncTick+0x20>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	18d2      	adds	r2, r2, r3
 80044a8:	4b03      	ldr	r3, [pc, #12]	@ (80044b8 <HAL_IncTick+0x20>)
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	20000098 	.word	0x20000098
 80044b8:	20000778 	.word	0x20000778

080044bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  return uwTick;
 80044c0:	4b02      	ldr	r3, [pc, #8]	@ (80044cc <HAL_GetTick+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	20000778 	.word	0x20000778

080044d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7ff fff0 	bl	80044bc <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3301      	adds	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_Delay+0x44>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	001a      	movs	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	f7ff ffe0 	bl	80044bc <HAL_GetTick>
 80044fc:	0002      	movs	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	429a      	cmp	r2, r3
 8004506:	d8f7      	bhi.n	80044f8 <HAL_Delay+0x28>
  {
  }
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b004      	add	sp, #16
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	20000098 	.word	0x20000098

08004518 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a06      	ldr	r2, [pc, #24]	@ (8004540 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	4b04      	ldr	r3, [pc, #16]	@ (800453c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]
}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	40010000 	.word	0x40010000
 8004540:	fffff9ff 	.word	0xfffff9ff

08004544 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004554:	401a      	ands	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	b002      	add	sp, #8
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			@ (mov r8, r8)
 8004568:	fe3fffff 	.word	0xfe3fffff

0800456c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	23e0      	movs	r3, #224	@ 0xe0
 800457a:	045b      	lsls	r3, r3, #17
 800457c:	4013      	ands	r3, r2
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}

08004586 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	2104      	movs	r1, #4
 800459a:	400a      	ands	r2, r1
 800459c:	2107      	movs	r1, #7
 800459e:	4091      	lsls	r1, r2
 80045a0:	000a      	movs	r2, r1
 80045a2:	43d2      	mvns	r2, r2
 80045a4:	401a      	ands	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2104      	movs	r1, #4
 80045aa:	400b      	ands	r3, r1
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4099      	lsls	r1, r3
 80045b0:	000b      	movs	r3, r1
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80045b8:	46c0      	nop			@ (mov r8, r8)
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}

080045c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	2104      	movs	r1, #4
 80045d2:	400a      	ands	r2, r1
 80045d4:	2107      	movs	r1, #7
 80045d6:	4091      	lsls	r1, r2
 80045d8:	000a      	movs	r2, r1
 80045da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2104      	movs	r1, #4
 80045e0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80045e2:	40da      	lsrs	r2, r3
 80045e4:	0013      	movs	r3, r2
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b002      	add	sp, #8
 80045ec:	bd80      	pop	{r7, pc}

080045ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	23c0      	movs	r3, #192	@ 0xc0
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4013      	ands	r3, r2
 8004600:	d101      	bne.n	8004606 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004606:	2300      	movs	r3, #0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}

08004610 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	211f      	movs	r1, #31
 8004624:	400a      	ands	r2, r1
 8004626:	210f      	movs	r1, #15
 8004628:	4091      	lsls	r1, r2
 800462a:	000a      	movs	r2, r1
 800462c:	43d2      	mvns	r2, r2
 800462e:	401a      	ands	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0e9b      	lsrs	r3, r3, #26
 8004634:	210f      	movs	r1, #15
 8004636:	4019      	ands	r1, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	201f      	movs	r0, #31
 800463c:	4003      	ands	r3, r0
 800463e:	4099      	lsls	r1, r3
 8004640:	000b      	movs	r3, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}

08004650 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	035b      	lsls	r3, r3, #13
 8004662:	0b5b      	lsrs	r3, r3, #13
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b002      	add	sp, #8
 8004670:	bd80      	pop	{r7, pc}

08004672 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	0352      	lsls	r2, r2, #13
 8004684:	0b52      	lsrs	r2, r2, #13
 8004686:	43d2      	mvns	r2, r2
 8004688:	401a      	ands	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}

08004696 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2203      	movs	r2, #3
 80046a4:	4013      	ands	r3, r2
}
 80046a6:	0018      	movs	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	b002      	add	sp, #8
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	0212      	lsls	r2, r2, #8
 80046c4:	43d2      	mvns	r2, r2
 80046c6:	401a      	ands	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	400b      	ands	r3, r1
 80046d0:	4904      	ldr	r1, [pc, #16]	@ (80046e4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80046d2:	400b      	ands	r3, r1
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	07ffff00 	.word	0x07ffff00

080046e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a05      	ldr	r2, [pc, #20]	@ (800470c <LL_ADC_EnableInternalRegulator+0x24>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	2280      	movs	r2, #128	@ 0x80
 80046fa:	0552      	lsls	r2, r2, #21
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	46bd      	mov	sp, r7
 8004706:	b002      	add	sp, #8
 8004708:	bd80      	pop	{r7, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	6fffffe8 	.word	0x6fffffe8

08004710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	2380      	movs	r3, #128	@ 0x80
 800471e:	055b      	lsls	r3, r3, #21
 8004720:	401a      	ands	r2, r3
 8004722:	2380      	movs	r3, #128	@ 0x80
 8004724:	055b      	lsls	r3, r3, #21
 8004726:	429a      	cmp	r2, r3
 8004728:	d101      	bne.n	800472e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800472e:	2300      	movs	r3, #0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b002      	add	sp, #8
 8004736:	bd80      	pop	{r7, pc}

08004738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2201      	movs	r2, #1
 8004746:	4013      	ands	r3, r2
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <LL_ADC_IsEnabled+0x18>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <LL_ADC_IsEnabled+0x1a>
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}

0800475a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2204      	movs	r2, #4
 8004768:	4013      	ands	r3, r2
 800476a:	2b04      	cmp	r3, #4
 800476c:	d101      	bne.n	8004772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004772:	2300      	movs	r3, #0
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b002      	add	sp, #8
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004784:	231f      	movs	r3, #31
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e17f      	b.n	8004aa2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7ff fa0f 	bl	8003bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2254      	movs	r2, #84	@ 0x54
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff ffa3 	bl	8004710 <LL_ADC_IsInternalRegulatorEnabled>
 80047ca:	1e03      	subs	r3, r0, #0
 80047cc:	d115      	bne.n	80047fa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff ff88 	bl	80046e8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047d8:	4bb4      	ldr	r3, [pc, #720]	@ (8004aac <HAL_ADC_Init+0x330>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	49b4      	ldr	r1, [pc, #720]	@ (8004ab0 <HAL_ADC_Init+0x334>)
 80047de:	0018      	movs	r0, r3
 80047e0:	f7fb fcaa 	bl	8000138 <__udivsi3>
 80047e4:	0003      	movs	r3, r0
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80047ec:	e002      	b.n	80047f4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f9      	bne.n	80047ee <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	0018      	movs	r0, r3
 8004800:	f7ff ff86 	bl	8004710 <LL_ADC_IsInternalRegulatorEnabled>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d10f      	bne.n	8004828 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	2210      	movs	r2, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004818:	2201      	movs	r2, #1
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004820:	231f      	movs	r3, #31
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0018      	movs	r0, r3
 800482e:	f7ff ff94 	bl	800475a <LL_ADC_REG_IsConversionOngoing>
 8004832:	0003      	movs	r3, r0
 8004834:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	2210      	movs	r2, #16
 800483c:	4013      	ands	r3, r2
 800483e:	d000      	beq.n	8004842 <HAL_ADC_Init+0xc6>
 8004840:	e122      	b.n	8004a88 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d000      	beq.n	800484a <HAL_ADC_Init+0xce>
 8004848:	e11e      	b.n	8004a88 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484e:	4a99      	ldr	r2, [pc, #612]	@ (8004ab4 <HAL_ADC_Init+0x338>)
 8004850:	4013      	ands	r3, r2
 8004852:	2202      	movs	r2, #2
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	0018      	movs	r0, r3
 8004860:	f7ff ff6a 	bl	8004738 <LL_ADC_IsEnabled>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d000      	beq.n	800486a <HAL_ADC_Init+0xee>
 8004868:	e0ad      	b.n	80049c6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004874:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	7e5b      	ldrb	r3, [r3, #25]
 800487a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800487c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	7e9b      	ldrb	r3, [r3, #26]
 8004882:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004884:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_ADC_Init+0x118>
 800488e:	2380      	movs	r3, #128	@ 0x80
 8004890:	015b      	lsls	r3, r3, #5
 8004892:	e000      	b.n	8004896 <HAL_ADC_Init+0x11a>
 8004894:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004896:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800489c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da04      	bge.n	80048b0 <HAL_ADC_Init+0x134>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	e001      	b.n	80048b4 <HAL_ADC_Init+0x138>
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80048b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	212c      	movs	r1, #44	@ 0x2c
 80048ba:	5c5b      	ldrb	r3, [r3, r1]
 80048bc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80048be:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	5c9b      	ldrb	r3, [r3, r2]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d115      	bne.n	80048fc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	7e9b      	ldrb	r3, [r3, #26]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	0252      	lsls	r2, r2, #9
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e00b      	b.n	80048fc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	2220      	movs	r2, #32
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	2201      	movs	r2, #1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004908:	23e0      	movs	r3, #224	@ 0xe0
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004912:	4313      	orrs	r3, r2
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a65      	ldr	r2, [pc, #404]	@ (8004ab8 <HAL_ADC_Init+0x33c>)
 8004922:	4013      	ands	r3, r2
 8004924:	0019      	movs	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	430a      	orrs	r2, r1
 800492e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0f9b      	lsrs	r3, r3, #30
 8004936:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800493c:	4313      	orrs	r3, r2
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	223c      	movs	r2, #60	@ 0x3c
 8004948:	5c9b      	ldrb	r3, [r3, r2]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d111      	bne.n	8004972 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	0f9b      	lsrs	r3, r3, #30
 8004954:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800495a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004960:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004966:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	2201      	movs	r2, #1
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	4a50      	ldr	r2, [pc, #320]	@ (8004abc <HAL_ADC_Init+0x340>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	430a      	orrs	r2, r1
 8004986:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	23c0      	movs	r3, #192	@ 0xc0
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	429a      	cmp	r2, r3
 8004992:	d018      	beq.n	80049c6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	05db      	lsls	r3, r3, #23
 800499c:	429a      	cmp	r2, r3
 800499e:	d012      	beq.n	80049c6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d00c      	beq.n	80049c6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80049ac:	4b44      	ldr	r3, [pc, #272]	@ (8004ac0 <HAL_ADC_Init+0x344>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a44      	ldr	r2, [pc, #272]	@ (8004ac4 <HAL_ADC_Init+0x348>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	23f0      	movs	r3, #240	@ 0xf0
 80049bc:	039b      	lsls	r3, r3, #14
 80049be:	401a      	ands	r2, r3
 80049c0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac0 <HAL_ADC_Init+0x344>)
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	001a      	movs	r2, r3
 80049d0:	2100      	movs	r1, #0
 80049d2:	f7ff fdd8 	bl	8004586 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	493a      	ldr	r1, [pc, #232]	@ (8004ac8 <HAL_ADC_Init+0x34c>)
 80049e0:	001a      	movs	r2, r3
 80049e2:	f7ff fdd0 	bl	8004586 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2110      	movs	r1, #16
 80049fa:	4249      	negs	r1, r1
 80049fc:	430a      	orrs	r2, r1
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a00:	e018      	b.n	8004a34 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	039b      	lsls	r3, r3, #14
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d112      	bne.n	8004a34 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	221c      	movs	r2, #28
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2210      	movs	r2, #16
 8004a22:	4252      	negs	r2, r2
 8004a24:	409a      	lsls	r2, r3
 8004a26:	0011      	movs	r1, r2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7ff fdc0 	bl	80045c0 <LL_ADC_GetSamplingTimeCommonChannels>
 8004a40:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10b      	bne.n	8004a62 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a54:	2203      	movs	r2, #3
 8004a56:	4393      	bics	r3, r2
 8004a58:	2201      	movs	r2, #1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a60:	e01c      	b.n	8004a9c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	2212      	movs	r2, #18
 8004a68:	4393      	bics	r3, r2
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a76:	2201      	movs	r2, #1
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004a7e:	231f      	movs	r3, #31
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a86:	e009      	b.n	8004a9c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a94:	231f      	movs	r3, #31
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004a9c:	231f      	movs	r3, #31
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	781b      	ldrb	r3, [r3, #0]
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b008      	add	sp, #32
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	20000090 	.word	0x20000090
 8004ab0:	00030d40 	.word	0x00030d40
 8004ab4:	fffffefd 	.word	0xfffffefd
 8004ab8:	ffde0201 	.word	0xffde0201
 8004abc:	1ffffc02 	.word	0x1ffffc02
 8004ac0:	40012708 	.word	0x40012708
 8004ac4:	ffc3ffff 	.word	0xffc3ffff
 8004ac8:	07ffff04 	.word	0x07ffff04

08004acc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2202      	movs	r2, #2
 8004aec:	4013      	ands	r3, r2
 8004aee:	d017      	beq.n	8004b20 <HAL_ADC_IRQHandler+0x54>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	4013      	ands	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afc:	2210      	movs	r2, #16
 8004afe:	4013      	ands	r3, r2
 8004b00:	d106      	bne.n	8004b10 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	2280      	movs	r2, #128	@ 0x80
 8004b08:	0112      	lsls	r2, r2, #4
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 faf2 	bl	80050fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2204      	movs	r2, #4
 8004b24:	4013      	ands	r3, r2
 8004b26:	d003      	beq.n	8004b30 <HAL_ADC_IRQHandler+0x64>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d107      	bne.n	8004b40 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2208      	movs	r2, #8
 8004b34:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004b36:	d04d      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d049      	beq.n	8004bd4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	2210      	movs	r2, #16
 8004b46:	4013      	ands	r3, r2
 8004b48:	d106      	bne.n	8004b58 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4e:	2280      	movs	r2, #128	@ 0x80
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff fd46 	bl	80045ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d02e      	beq.n	8004bc4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7e9b      	ldrb	r3, [r3, #26]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d12a      	bne.n	8004bc4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2208      	movs	r2, #8
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d123      	bne.n	8004bc4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7ff fdea 	bl	800475a <LL_ADC_REG_IsConversionOngoing>
 8004b86:	1e03      	subs	r3, r0, #0
 8004b88:	d110      	bne.n	8004bac <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	210c      	movs	r1, #12
 8004b96:	438a      	bics	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	4a56      	ldr	r2, [pc, #344]	@ (8004cf8 <HAL_ADC_IRQHandler+0x22c>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004baa:	e00b      	b.n	8004bc4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f898 	bl	8004cfc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	220c      	movs	r2, #12
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2280      	movs	r2, #128	@ 0x80
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d012      	beq.n	8004c02 <HAL_ADC_IRQHandler+0x136>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2280      	movs	r2, #128	@ 0x80
 8004be0:	4013      	ands	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	2280      	movs	r2, #128	@ 0x80
 8004bea:	0252      	lsls	r2, r2, #9
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 f889 	bl	8004d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2280      	movs	r2, #128	@ 0x80
 8004c00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d014      	beq.n	8004c36 <HAL_ADC_IRQHandler+0x16a>
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	2380      	movs	r3, #128	@ 0x80
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	4013      	ands	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	0292      	lsls	r2, r2, #10
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 fa58 	bl	80050dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2280      	movs	r2, #128	@ 0x80
 8004c32:	0052      	lsls	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d014      	beq.n	8004c6a <HAL_ADC_IRQHandler+0x19e>
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	02d2      	lsls	r2, r2, #11
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fa46 	bl	80050ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	@ 0x80
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d02b      	beq.n	8004cca <HAL_ADC_IRQHandler+0x1fe>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2210      	movs	r2, #16
 8004c76:	4013      	ands	r3, r2
 8004c78:	d027      	beq.n	8004cca <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e008      	b.n	8004c9a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff fd02 	bl	8004696 <LL_ADC_REG_GetDMATransfer>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d110      	bne.n	8004cc2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	2280      	movs	r2, #128	@ 0x80
 8004ca6:	00d2      	lsls	r2, r2, #3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 f82d 	bl	8004d1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	019b      	lsls	r3, r3, #6
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_ADC_IRQHandler+0x224>
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d008      	beq.n	8004cf0 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 fa13 	bl	800510c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2280      	movs	r2, #128	@ 0x80
 8004cec:	0192      	lsls	r2, r2, #6
 8004cee:	601a      	str	r2, [r3, #0]
  }
}
 8004cf0:	46c0      	nop			@ (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b006      	add	sp, #24
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	fffffefe 	.word	0xfffffefe

08004cfc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d14:	46c0      	nop			@ (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d36:	2317      	movs	r3, #23
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2254      	movs	r2, #84	@ 0x54
 8004d46:	5c9b      	ldrb	r3, [r3, r2]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x24>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e1c0      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x3a6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2254      	movs	r2, #84	@ 0x54
 8004d54:	2101      	movs	r1, #1
 8004d56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7ff fcfc 	bl	800475a <LL_ADC_REG_IsConversionOngoing>
 8004d62:	1e03      	subs	r3, r0, #0
 8004d64:	d000      	beq.n	8004d68 <HAL_ADC_ConfigChannel+0x3c>
 8004d66:	e1a3      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d100      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x46>
 8004d70:	e143      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	2380      	movs	r3, #128	@ 0x80
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d004      	beq.n	8004d88 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d82:	4ac1      	ldr	r2, [pc, #772]	@ (8005088 <HAL_ADC_ConfigChannel+0x35c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0019      	movs	r1, r3
 8004d92:	0010      	movs	r0, r2
 8004d94:	f7ff fc5c 	bl	8004650 <LL_ADC_REG_SetSequencerChAdd>
 8004d98:	e0c9      	b.n	8004f2e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	211f      	movs	r1, #31
 8004da4:	400b      	ands	r3, r1
 8004da6:	210f      	movs	r1, #15
 8004da8:	4099      	lsls	r1, r3
 8004daa:	000b      	movs	r3, r1
 8004dac:	43db      	mvns	r3, r3
 8004dae:	4013      	ands	r3, r2
 8004db0:	0019      	movs	r1, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	035b      	lsls	r3, r3, #13
 8004db8:	0b5b      	lsrs	r3, r3, #13
 8004dba:	d105      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x9c>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0e9b      	lsrs	r3, r3, #26
 8004dc2:	221f      	movs	r2, #31
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	e098      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d000      	beq.n	8004dd4 <HAL_ADC_ConfigChannel+0xa8>
 8004dd2:	e091      	b.n	8004ef8 <HAL_ADC_ConfigChannel+0x1cc>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d000      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0xb4>
 8004dde:	e089      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x1c8>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	4013      	ands	r3, r2
 8004de8:	d000      	beq.n	8004dec <HAL_ADC_ConfigChannel+0xc0>
 8004dea:	e081      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x1c4>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2208      	movs	r2, #8
 8004df2:	4013      	ands	r3, r2
 8004df4:	d000      	beq.n	8004df8 <HAL_ADC_ConfigChannel+0xcc>
 8004df6:	e079      	b.n	8004eec <HAL_ADC_ConfigChannel+0x1c0>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d000      	beq.n	8004e04 <HAL_ADC_ConfigChannel+0xd8>
 8004e02:	e071      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x1bc>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d000      	beq.n	8004e10 <HAL_ADC_ConfigChannel+0xe4>
 8004e0e:	e069      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x1b8>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2240      	movs	r2, #64	@ 0x40
 8004e16:	4013      	ands	r3, r2
 8004e18:	d000      	beq.n	8004e1c <HAL_ADC_ConfigChannel+0xf0>
 8004e1a:	e061      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x1b4>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2280      	movs	r2, #128	@ 0x80
 8004e22:	4013      	ands	r3, r2
 8004e24:	d000      	beq.n	8004e28 <HAL_ADC_ConfigChannel+0xfc>
 8004e26:	e059      	b.n	8004edc <HAL_ADC_ConfigChannel+0x1b0>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4013      	ands	r3, r2
 8004e32:	d151      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x1ac>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d149      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x1a8>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d141      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x1a4>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	@ 0x80
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	4013      	ands	r3, r2
 8004e56:	d139      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1a0>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	015b      	lsls	r3, r3, #5
 8004e60:	4013      	ands	r3, r2
 8004e62:	d131      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x19c>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	019b      	lsls	r3, r3, #6
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d129      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x198>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	01db      	lsls	r3, r3, #7
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d121      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x194>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4013      	ands	r3, r2
 8004e86:	d119      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x190>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	025b      	lsls	r3, r3, #9
 8004e90:	4013      	ands	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x18c>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	029b      	lsls	r3, r3, #10
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	d109      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x188>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2380      	movs	r3, #128	@ 0x80
 8004ea6:	02db      	lsls	r3, r3, #11
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d001      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x184>
 8004eac:	2312      	movs	r3, #18
 8004eae:	e024      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e022      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004eb4:	2311      	movs	r3, #17
 8004eb6:	e020      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	e01e      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ebc:	230f      	movs	r3, #15
 8004ebe:	e01c      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ec0:	230e      	movs	r3, #14
 8004ec2:	e01a      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ec4:	230d      	movs	r3, #13
 8004ec6:	e018      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ec8:	230c      	movs	r3, #12
 8004eca:	e016      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ecc:	230b      	movs	r3, #11
 8004ece:	e014      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ed0:	230a      	movs	r3, #10
 8004ed2:	e012      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ed4:	2309      	movs	r3, #9
 8004ed6:	e010      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	e00e      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004edc:	2307      	movs	r3, #7
 8004ede:	e00c      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ee0:	2306      	movs	r3, #6
 8004ee2:	e00a      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ee4:	2305      	movs	r3, #5
 8004ee6:	e008      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e006      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004eec:	2303      	movs	r3, #3
 8004eee:	e004      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e002      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_ADC_ConfigChannel+0x1ce>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	6852      	ldr	r2, [r2, #4]
 8004efe:	201f      	movs	r0, #31
 8004f00:	4002      	ands	r2, r0
 8004f02:	4093      	lsls	r3, r2
 8004f04:	000a      	movs	r2, r1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	089b      	lsrs	r3, r3, #2
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d808      	bhi.n	8004f2e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6859      	ldr	r1, [r3, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	001a      	movs	r2, r3
 8004f2a:	f7ff fb71 	bl	8004610 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	f7ff fbb8 	bl	80046b0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db00      	blt.n	8004f4a <HAL_ADC_ConfigChannel+0x21e>
 8004f48:	e0bc      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f4a:	4b50      	ldr	r3, [pc, #320]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f7ff fb0d 	bl	800456c <LL_ADC_GetCommonPathInternalCh>
 8004f52:	0003      	movs	r3, r0
 8004f54:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005090 <HAL_ADC_ConfigChannel+0x364>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d122      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004f68:	d11d      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2280      	movs	r2, #128	@ 0x80
 8004f6e:	0412      	lsls	r2, r2, #16
 8004f70:	4313      	orrs	r3, r2
 8004f72:	4a46      	ldr	r2, [pc, #280]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8004f74:	0019      	movs	r1, r3
 8004f76:	0010      	movs	r0, r2
 8004f78:	f7ff fae4 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7c:	4b45      	ldr	r3, [pc, #276]	@ (8005094 <HAL_ADC_ConfigChannel+0x368>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4945      	ldr	r1, [pc, #276]	@ (8005098 <HAL_ADC_ConfigChannel+0x36c>)
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7fb f8d8 	bl	8000138 <__udivsi3>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	0013      	movs	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	189b      	adds	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f96:	e002      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f9      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004fa4:	e08e      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a3c      	ldr	r2, [pc, #240]	@ (800509c <HAL_ADC_ConfigChannel+0x370>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10e      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	045b      	lsls	r3, r3, #17
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d109      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	0452      	lsls	r2, r2, #17
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	4a32      	ldr	r2, [pc, #200]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	0010      	movs	r0, r2
 8004fc8:	f7ff fabc 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
 8004fcc:	e07a      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a33      	ldr	r2, [pc, #204]	@ (80050a0 <HAL_ADC_ConfigChannel+0x374>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d000      	beq.n	8004fda <HAL_ADC_ConfigChannel+0x2ae>
 8004fd8:	e074      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	03db      	lsls	r3, r3, #15
 8004fe0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004fe2:	d000      	beq.n	8004fe6 <HAL_ADC_ConfigChannel+0x2ba>
 8004fe4:	e06e      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2280      	movs	r2, #128	@ 0x80
 8004fea:	03d2      	lsls	r2, r2, #15
 8004fec:	4313      	orrs	r3, r2
 8004fee:	4a27      	ldr	r2, [pc, #156]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	0010      	movs	r0, r2
 8004ff4:	f7ff faa6 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
 8004ff8:	e064      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	429a      	cmp	r2, r3
 8005004:	d004      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800500a:	4a1f      	ldr	r2, [pc, #124]	@ (8005088 <HAL_ADC_ConfigChannel+0x35c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d107      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0019      	movs	r1, r3
 800501a:	0010      	movs	r0, r2
 800501c:	f7ff fb29 	bl	8004672 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	da4d      	bge.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005028:	4b18      	ldr	r3, [pc, #96]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 800502a:	0018      	movs	r0, r3
 800502c:	f7ff fa9e 	bl	800456c <LL_ADC_GetCommonPathInternalCh>
 8005030:	0003      	movs	r3, r0
 8005032:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_ADC_ConfigChannel+0x364>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_ADC_ConfigChannel+0x378>)
 8005042:	4013      	ands	r3, r2
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8005046:	0019      	movs	r1, r3
 8005048:	0010      	movs	r0, r2
 800504a:	f7ff fa7b 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
 800504e:	e039      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a11      	ldr	r2, [pc, #68]	@ (800509c <HAL_ADC_ConfigChannel+0x370>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4a12      	ldr	r2, [pc, #72]	@ (80050a8 <HAL_ADC_ConfigChannel+0x37c>)
 800505e:	4013      	ands	r3, r2
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 8005062:	0019      	movs	r1, r3
 8005064:	0010      	movs	r0, r2
 8005066:	f7ff fa6d 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
 800506a:	e02b      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0b      	ldr	r2, [pc, #44]	@ (80050a0 <HAL_ADC_ConfigChannel+0x374>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d126      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <HAL_ADC_ConfigChannel+0x380>)
 800507a:	4013      	ands	r3, r2
 800507c:	4a03      	ldr	r2, [pc, #12]	@ (800508c <HAL_ADC_ConfigChannel+0x360>)
 800507e:	0019      	movs	r1, r3
 8005080:	0010      	movs	r0, r2
 8005082:	f7ff fa5f 	bl	8004544 <LL_ADC_SetCommonPathInternalCh>
 8005086:	e01d      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x398>
 8005088:	80000004 	.word	0x80000004
 800508c:	40012708 	.word	0x40012708
 8005090:	b0001000 	.word	0xb0001000
 8005094:	20000090 	.word	0x20000090
 8005098:	00030d40 	.word	0x00030d40
 800509c:	b8004000 	.word	0xb8004000
 80050a0:	b4002000 	.word	0xb4002000
 80050a4:	ff7fffff 	.word	0xff7fffff
 80050a8:	feffffff 	.word	0xfeffffff
 80050ac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b4:	2220      	movs	r2, #32
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80050bc:	2317      	movs	r3, #23
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2254      	movs	r2, #84	@ 0x54
 80050c8:	2100      	movs	r1, #0
 80050ca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80050cc:	2317      	movs	r3, #23
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b006      	add	sp, #24
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)

080050dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80050f4:	46c0      	nop			@ (mov r8, r8)
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b002      	add	sp, #8
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005104:	46c0      	nop			@ (mov r8, r8)
 8005106:	46bd      	mov	sp, r7
 8005108:	b002      	add	sp, #8
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}

0800511c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	0002      	movs	r2, r0
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005128:	1dfb      	adds	r3, r7, #7
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b7f      	cmp	r3, #127	@ 0x7f
 800512e:	d809      	bhi.n	8005144 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	001a      	movs	r2, r3
 8005136:	231f      	movs	r3, #31
 8005138:	401a      	ands	r2, r3
 800513a:	4b04      	ldr	r3, [pc, #16]	@ (800514c <__NVIC_EnableIRQ+0x30>)
 800513c:	2101      	movs	r1, #1
 800513e:	4091      	lsls	r1, r2
 8005140:	000a      	movs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005144:	46c0      	nop			@ (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	0002      	movs	r2, r0
 8005158:	6039      	str	r1, [r7, #0]
 800515a:	1dfb      	adds	r3, r7, #7
 800515c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800515e:	1dfb      	adds	r3, r7, #7
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b7f      	cmp	r3, #127	@ 0x7f
 8005164:	d828      	bhi.n	80051b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005166:	4a2f      	ldr	r2, [pc, #188]	@ (8005224 <__NVIC_SetPriority+0xd4>)
 8005168:	1dfb      	adds	r3, r7, #7
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	b25b      	sxtb	r3, r3
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	33c0      	adds	r3, #192	@ 0xc0
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	589b      	ldr	r3, [r3, r2]
 8005176:	1dfa      	adds	r2, r7, #7
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	0011      	movs	r1, r2
 800517c:	2203      	movs	r2, #3
 800517e:	400a      	ands	r2, r1
 8005180:	00d2      	lsls	r2, r2, #3
 8005182:	21ff      	movs	r1, #255	@ 0xff
 8005184:	4091      	lsls	r1, r2
 8005186:	000a      	movs	r2, r1
 8005188:	43d2      	mvns	r2, r2
 800518a:	401a      	ands	r2, r3
 800518c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	22ff      	movs	r2, #255	@ 0xff
 8005194:	401a      	ands	r2, r3
 8005196:	1dfb      	adds	r3, r7, #7
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	0018      	movs	r0, r3
 800519c:	2303      	movs	r3, #3
 800519e:	4003      	ands	r3, r0
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051a4:	481f      	ldr	r0, [pc, #124]	@ (8005224 <__NVIC_SetPriority+0xd4>)
 80051a6:	1dfb      	adds	r3, r7, #7
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	089b      	lsrs	r3, r3, #2
 80051ae:	430a      	orrs	r2, r1
 80051b0:	33c0      	adds	r3, #192	@ 0xc0
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051b6:	e031      	b.n	800521c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <__NVIC_SetPriority+0xd8>)
 80051ba:	1dfb      	adds	r3, r7, #7
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	0019      	movs	r1, r3
 80051c0:	230f      	movs	r3, #15
 80051c2:	400b      	ands	r3, r1
 80051c4:	3b08      	subs	r3, #8
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	3306      	adds	r3, #6
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18d3      	adds	r3, r2, r3
 80051ce:	3304      	adds	r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1dfa      	adds	r2, r7, #7
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	0011      	movs	r1, r2
 80051d8:	2203      	movs	r2, #3
 80051da:	400a      	ands	r2, r1
 80051dc:	00d2      	lsls	r2, r2, #3
 80051de:	21ff      	movs	r1, #255	@ 0xff
 80051e0:	4091      	lsls	r1, r2
 80051e2:	000a      	movs	r2, r1
 80051e4:	43d2      	mvns	r2, r2
 80051e6:	401a      	ands	r2, r3
 80051e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	22ff      	movs	r2, #255	@ 0xff
 80051f0:	401a      	ands	r2, r3
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	0018      	movs	r0, r3
 80051f8:	2303      	movs	r3, #3
 80051fa:	4003      	ands	r3, r0
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005200:	4809      	ldr	r0, [pc, #36]	@ (8005228 <__NVIC_SetPriority+0xd8>)
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	001c      	movs	r4, r3
 8005208:	230f      	movs	r3, #15
 800520a:	4023      	ands	r3, r4
 800520c:	3b08      	subs	r3, #8
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	430a      	orrs	r2, r1
 8005212:	3306      	adds	r3, #6
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18c3      	adds	r3, r0, r3
 8005218:	3304      	adds	r3, #4
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	46c0      	nop			@ (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	b003      	add	sp, #12
 8005222:	bd90      	pop	{r4, r7, pc}
 8005224:	e000e100 	.word	0xe000e100
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	2380      	movs	r3, #128	@ 0x80
 800523a:	045b      	lsls	r3, r3, #17
 800523c:	429a      	cmp	r2, r3
 800523e:	d301      	bcc.n	8005244 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005240:	2301      	movs	r3, #1
 8005242:	e010      	b.n	8005266 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005244:	4b0a      	ldr	r3, [pc, #40]	@ (8005270 <SysTick_Config+0x44>)
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	3a01      	subs	r2, #1
 800524a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800524c:	2301      	movs	r3, #1
 800524e:	425b      	negs	r3, r3
 8005250:	2103      	movs	r1, #3
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff ff7c 	bl	8005150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005258:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <SysTick_Config+0x44>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800525e:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <SysTick_Config+0x44>)
 8005260:	2207      	movs	r2, #7
 8005262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b002      	add	sp, #8
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	e000e010 	.word	0xe000e010

08005274 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	210f      	movs	r1, #15
 8005280:	187b      	adds	r3, r7, r1
 8005282:	1c02      	adds	r2, r0, #0
 8005284:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	187b      	adds	r3, r7, r1
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b25b      	sxtb	r3, r3
 800528e:	0011      	movs	r1, r2
 8005290:	0018      	movs	r0, r3
 8005292:	f7ff ff5d 	bl	8005150 <__NVIC_SetPriority>
}
 8005296:	46c0      	nop			@ (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b004      	add	sp, #16
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	0002      	movs	r2, r0
 80052a6:	1dfb      	adds	r3, r7, #7
 80052a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052aa:	1dfb      	adds	r3, r7, #7
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7ff ff33 	bl	800511c <__NVIC_EnableIRQ>
}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b002      	add	sp, #8
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f7ff ffaf 	bl	800522c <SysTick_Config>
 80052ce:	0003      	movs	r3, r0
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052e6:	e14d      	b.n	8005584 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4091      	lsls	r1, r2
 80052f2:	000a      	movs	r2, r1
 80052f4:	4013      	ands	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d100      	bne.n	8005300 <HAL_GPIO_Init+0x28>
 80052fe:	e13e      	b.n	800557e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2203      	movs	r2, #3
 8005306:	4013      	ands	r3, r2
 8005308:	2b01      	cmp	r3, #1
 800530a:	d005      	beq.n	8005318 <HAL_GPIO_Init+0x40>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2203      	movs	r2, #3
 8005312:	4013      	ands	r3, r2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d130      	bne.n	800537a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	409a      	lsls	r2, r3
 8005326:	0013      	movs	r3, r2
 8005328:	43da      	mvns	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	409a      	lsls	r2, r3
 800533a:	0013      	movs	r3, r2
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800534e:	2201      	movs	r2, #1
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	409a      	lsls	r2, r3
 8005354:	0013      	movs	r3, r2
 8005356:	43da      	mvns	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4013      	ands	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	2201      	movs	r2, #1
 8005366:	401a      	ands	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	409a      	lsls	r2, r3
 800536c:	0013      	movs	r3, r2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2203      	movs	r2, #3
 8005380:	4013      	ands	r3, r2
 8005382:	2b03      	cmp	r3, #3
 8005384:	d017      	beq.n	80053b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	2203      	movs	r2, #3
 8005392:	409a      	lsls	r2, r3
 8005394:	0013      	movs	r3, r2
 8005396:	43da      	mvns	r2, r3
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	409a      	lsls	r2, r3
 80053a8:	0013      	movs	r3, r2
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2203      	movs	r2, #3
 80053bc:	4013      	ands	r3, r2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d123      	bne.n	800540a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	08da      	lsrs	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	0092      	lsls	r2, r2, #2
 80053cc:	58d3      	ldr	r3, [r2, r3]
 80053ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2207      	movs	r2, #7
 80053d4:	4013      	ands	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	220f      	movs	r2, #15
 80053da:	409a      	lsls	r2, r3
 80053dc:	0013      	movs	r3, r2
 80053de:	43da      	mvns	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2107      	movs	r1, #7
 80053ee:	400b      	ands	r3, r1
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	409a      	lsls	r2, r3
 80053f4:	0013      	movs	r3, r2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	409a      	lsls	r2, r3
 8005418:	0013      	movs	r3, r2
 800541a:	43da      	mvns	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2203      	movs	r2, #3
 8005428:	401a      	ands	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	0013      	movs	r3, r2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	23c0      	movs	r3, #192	@ 0xc0
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	4013      	ands	r3, r2
 8005448:	d100      	bne.n	800544c <HAL_GPIO_Init+0x174>
 800544a:	e098      	b.n	800557e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800544c:	4a53      	ldr	r2, [pc, #332]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3318      	adds	r3, #24
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	589b      	ldr	r3, [r3, r2]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2203      	movs	r2, #3
 800545e:	4013      	ands	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	220f      	movs	r2, #15
 8005464:	409a      	lsls	r2, r3
 8005466:	0013      	movs	r3, r2
 8005468:	43da      	mvns	r2, r3
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	23a0      	movs	r3, #160	@ 0xa0
 8005474:	05db      	lsls	r3, r3, #23
 8005476:	429a      	cmp	r2, r3
 8005478:	d019      	beq.n	80054ae <HAL_GPIO_Init+0x1d6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a48      	ldr	r2, [pc, #288]	@ (80055a0 <HAL_GPIO_Init+0x2c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_GPIO_Init+0x1d2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a47      	ldr	r2, [pc, #284]	@ (80055a4 <HAL_GPIO_Init+0x2cc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00d      	beq.n	80054a6 <HAL_GPIO_Init+0x1ce>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a46      	ldr	r2, [pc, #280]	@ (80055a8 <HAL_GPIO_Init+0x2d0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d007      	beq.n	80054a2 <HAL_GPIO_Init+0x1ca>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a45      	ldr	r2, [pc, #276]	@ (80055ac <HAL_GPIO_Init+0x2d4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_GPIO_Init+0x1c6>
 800549a:	2304      	movs	r3, #4
 800549c:	e008      	b.n	80054b0 <HAL_GPIO_Init+0x1d8>
 800549e:	2305      	movs	r3, #5
 80054a0:	e006      	b.n	80054b0 <HAL_GPIO_Init+0x1d8>
 80054a2:	2303      	movs	r3, #3
 80054a4:	e004      	b.n	80054b0 <HAL_GPIO_Init+0x1d8>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e002      	b.n	80054b0 <HAL_GPIO_Init+0x1d8>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <HAL_GPIO_Init+0x1d8>
 80054ae:	2300      	movs	r3, #0
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	2103      	movs	r1, #3
 80054b4:	400a      	ands	r2, r1
 80054b6:	00d2      	lsls	r2, r2, #3
 80054b8:	4093      	lsls	r3, r2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80054c0:	4936      	ldr	r1, [pc, #216]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	089b      	lsrs	r3, r3, #2
 80054c6:	3318      	adds	r3, #24
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ce:	4b33      	ldr	r3, [pc, #204]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	43da      	mvns	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	035b      	lsls	r3, r3, #13
 80054e6:	4013      	ands	r3, r2
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054f2:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80054f8:	4b28      	ldr	r3, [pc, #160]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43da      	mvns	r2, r3
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	039b      	lsls	r3, r3, #14
 8005510:	4013      	ands	r3, r2
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800551c:	4b1f      	ldr	r3, [pc, #124]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005522:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 8005524:	2384      	movs	r3, #132	@ 0x84
 8005526:	58d3      	ldr	r3, [r2, r3]
 8005528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	43da      	mvns	r2, r3
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	4013      	ands	r3, r2
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005548:	4914      	ldr	r1, [pc, #80]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 800554a:	2284      	movs	r2, #132	@ 0x84
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005550:	4a12      	ldr	r2, [pc, #72]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	58d3      	ldr	r3, [r2, r3]
 8005556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	43da      	mvns	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	025b      	lsls	r3, r3, #9
 800556a:	4013      	ands	r3, r2
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005576:	4909      	ldr	r1, [pc, #36]	@ (800559c <HAL_GPIO_Init+0x2c4>)
 8005578:	2280      	movs	r2, #128	@ 0x80
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3301      	adds	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	40da      	lsrs	r2, r3
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	d000      	beq.n	8005592 <HAL_GPIO_Init+0x2ba>
 8005590:	e6aa      	b.n	80052e8 <HAL_GPIO_Init+0x10>
  }
}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	46c0      	nop			@ (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b006      	add	sp, #24
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40021800 	.word	0x40021800
 80055a0:	50000400 	.word	0x50000400
 80055a4:	50000800 	.word	0x50000800
 80055a8:	50000c00 	.word	0x50000c00
 80055ac:	50001000 	.word	0x50001000

080055b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	000a      	movs	r2, r1
 80055ba:	1cbb      	adds	r3, r7, #2
 80055bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	1cba      	adds	r2, r7, #2
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	4013      	ands	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80055ca:	230f      	movs	r3, #15
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e003      	b.n	80055dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055d4:	230f      	movs	r3, #15
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80055dc:	230f      	movs	r3, #15
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	781b      	ldrb	r3, [r3, #0]
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b004      	add	sp, #16
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	0008      	movs	r0, r1
 80055f4:	0011      	movs	r1, r2
 80055f6:	1cbb      	adds	r3, r7, #2
 80055f8:	1c02      	adds	r2, r0, #0
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	1c7b      	adds	r3, r7, #1
 80055fe:	1c0a      	adds	r2, r1, #0
 8005600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005602:	1c7b      	adds	r3, r7, #1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800560a:	1cbb      	adds	r3, r7, #2
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005612:	e003      	b.n	800561c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005614:	1cbb      	adds	r3, r7, #2
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	000a      	movs	r2, r1
 800562e:	1cbb      	adds	r3, r7, #2
 8005630:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005638:	1cbb      	adds	r3, r7, #2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	041a      	lsls	r2, r3, #16
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	43db      	mvns	r3, r3
 8005646:	1cb9      	adds	r1, r7, #2
 8005648:	8809      	ldrh	r1, [r1, #0]
 800564a:	400b      	ands	r3, r1
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	619a      	str	r2, [r3, #24]
}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b004      	add	sp, #16
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	0002      	movs	r2, r0
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005668:	4b10      	ldr	r3, [pc, #64]	@ (80056ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	1dba      	adds	r2, r7, #6
 800566e:	8812      	ldrh	r2, [r2, #0]
 8005670:	4013      	ands	r3, r2
 8005672:	d008      	beq.n	8005686 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005674:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005676:	1dba      	adds	r2, r7, #6
 8005678:	8812      	ldrh	r2, [r2, #0]
 800567a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800567c:	1dbb      	adds	r3, r7, #6
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	0018      	movs	r0, r3
 8005682:	f000 f815 	bl	80056b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	1dba      	adds	r2, r7, #6
 800568c:	8812      	ldrh	r2, [r2, #0]
 800568e:	4013      	ands	r3, r2
 8005690:	d008      	beq.n	80056a4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005694:	1dba      	adds	r2, r7, #6
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800569a:	1dbb      	adds	r3, r7, #6
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fe f814 	bl	80036cc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80056a4:	46c0      	nop			@ (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40021800 	.word	0x40021800

080056b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	0002      	movs	r2, r0
 80056b8:	1dbb      	adds	r3, r7, #6
 80056ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b002      	add	sp, #8
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e08f      	b.n	80057f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2241      	movs	r2, #65	@ 0x41
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d107      	bne.n	80056f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2240      	movs	r2, #64	@ 0x40
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fe fabb 	bl	8003c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2241      	movs	r2, #65	@ 0x41
 80056f6:	2124      	movs	r1, #36	@ 0x24
 80056f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	438a      	bics	r2, r1
 8005708:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	493b      	ldr	r1, [pc, #236]	@ (8005800 <HAL_I2C_Init+0x13c>)
 8005714:	400a      	ands	r2, r1
 8005716:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4938      	ldr	r1, [pc, #224]	@ (8005804 <HAL_I2C_Init+0x140>)
 8005724:	400a      	ands	r2, r1
 8005726:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d108      	bne.n	8005742 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2180      	movs	r1, #128	@ 0x80
 800573a:	0209      	lsls	r1, r1, #8
 800573c:	430a      	orrs	r2, r1
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	e007      	b.n	8005752 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2184      	movs	r1, #132	@ 0x84
 800574c:	0209      	lsls	r1, r1, #8
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d109      	bne.n	800576e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2180      	movs	r1, #128	@ 0x80
 8005766:	0109      	lsls	r1, r1, #4
 8005768:	430a      	orrs	r2, r1
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e007      	b.n	800577e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4923      	ldr	r1, [pc, #140]	@ (8005808 <HAL_I2C_Init+0x144>)
 800577a:	400a      	ands	r2, r1
 800577c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4920      	ldr	r1, [pc, #128]	@ (800580c <HAL_I2C_Init+0x148>)
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	491a      	ldr	r1, [pc, #104]	@ (8005804 <HAL_I2C_Init+0x140>)
 800579a:	400a      	ands	r2, r1
 800579c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69d9      	ldr	r1, [r3, #28]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1a      	ldr	r2, [r3, #32]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2101      	movs	r1, #1
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2241      	movs	r2, #65	@ 0x41
 80057e2:	2120      	movs	r1, #32
 80057e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2242      	movs	r2, #66	@ 0x42
 80057f0:	2100      	movs	r1, #0
 80057f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	f0ffffff 	.word	0xf0ffffff
 8005804:	ffff7fff 	.word	0xffff7fff
 8005808:	fffff7ff 	.word	0xfffff7ff
 800580c:	02008000 	.word	0x02008000

08005810 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b089      	sub	sp, #36	@ 0x24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	0008      	movs	r0, r1
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	0019      	movs	r1, r3
 800581e:	230a      	movs	r3, #10
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	1c02      	adds	r2, r0, #0
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	2308      	movs	r3, #8
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	1c0a      	adds	r2, r1, #0
 800582c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2241      	movs	r2, #65	@ 0x41
 8005832:	5c9b      	ldrb	r3, [r3, r2]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b20      	cmp	r3, #32
 8005838:	d000      	beq.n	800583c <HAL_I2C_Master_Transmit+0x2c>
 800583a:	e10a      	b.n	8005a52 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2240      	movs	r2, #64	@ 0x40
 8005840:	5c9b      	ldrb	r3, [r3, r2]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_I2C_Master_Transmit+0x3a>
 8005846:	2302      	movs	r3, #2
 8005848:	e104      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2240      	movs	r2, #64	@ 0x40
 800584e:	2101      	movs	r1, #1
 8005850:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005852:	f7fe fe33 	bl	80044bc <HAL_GetTick>
 8005856:	0003      	movs	r3, r0
 8005858:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800585a:	2380      	movs	r3, #128	@ 0x80
 800585c:	0219      	lsls	r1, r3, #8
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	2319      	movs	r3, #25
 8005866:	2201      	movs	r2, #1
 8005868:	f000 fa26 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 800586c:	1e03      	subs	r3, r0, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0ef      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2241      	movs	r2, #65	@ 0x41
 8005878:	2121      	movs	r1, #33	@ 0x21
 800587a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2242      	movs	r2, #66	@ 0x42
 8005880:	2110      	movs	r1, #16
 8005882:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2208      	movs	r2, #8
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2bff      	cmp	r3, #255	@ 0xff
 80058a8:	d906      	bls.n	80058b8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	@ 0xff
 80058ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	045b      	lsls	r3, r3, #17
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e007      	b.n	80058c8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	049b      	lsls	r3, r3, #18
 80058c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d027      	beq.n	8005920 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3301      	adds	r3, #1
 8005908:	b2da      	uxtb	r2, r3
 800590a:	697c      	ldr	r4, [r7, #20]
 800590c:	230a      	movs	r3, #10
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	8819      	ldrh	r1, [r3, #0]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <HAL_I2C_Master_Transmit+0x24c>)
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	0023      	movs	r3, r4
 800591a:	f000 fc45 	bl	80061a8 <I2C_TransferConfig>
 800591e:	e06f      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005924:	b2da      	uxtb	r2, r3
 8005926:	697c      	ldr	r4, [r7, #20]
 8005928:	230a      	movs	r3, #10
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	8819      	ldrh	r1, [r3, #0]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	4b4a      	ldr	r3, [pc, #296]	@ (8005a5c <HAL_I2C_Master_Transmit+0x24c>)
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0023      	movs	r3, r4
 8005936:	f000 fc37 	bl	80061a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800593a:	e061      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	0018      	movs	r0, r3
 8005944:	f000 fa10 	bl	8005d68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005948:	1e03      	subs	r3, r0, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e081      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d03a      	beq.n	8005a00 <HAL_I2C_Master_Transmit+0x1f0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d136      	bne.n	8005a00 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	0013      	movs	r3, r2
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	@ 0x80
 80059a0:	f000 f98a 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 80059a4:	1e03      	subs	r3, r0, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e053      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	2bff      	cmp	r3, #255	@ 0xff
 80059b4:	d911      	bls.n	80059da <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	22ff      	movs	r2, #255	@ 0xff
 80059ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	045c      	lsls	r4, r3, #17
 80059c6:	230a      	movs	r3, #10
 80059c8:	18fb      	adds	r3, r7, r3
 80059ca:	8819      	ldrh	r1, [r3, #0]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	0023      	movs	r3, r4
 80059d4:	f000 fbe8 	bl	80061a8 <I2C_TransferConfig>
 80059d8:	e012      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	2380      	movs	r3, #128	@ 0x80
 80059ec:	049c      	lsls	r4, r3, #18
 80059ee:	230a      	movs	r3, #10
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	8819      	ldrh	r1, [r3, #0]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	0023      	movs	r3, r4
 80059fc:	f000 fbd4 	bl	80061a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d198      	bne.n	800593c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 f9ef 	bl	8005df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a16:	1e03      	subs	r3, r0, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e01a      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2220      	movs	r2, #32
 8005a24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	490b      	ldr	r1, [pc, #44]	@ (8005a60 <HAL_I2C_Master_Transmit+0x250>)
 8005a32:	400a      	ands	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2241      	movs	r2, #65	@ 0x41
 8005a3a:	2120      	movs	r1, #32
 8005a3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2242      	movs	r2, #66	@ 0x42
 8005a42:	2100      	movs	r1, #0
 8005a44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2240      	movs	r2, #64	@ 0x40
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e000      	b.n	8005a54 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
  }
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b007      	add	sp, #28
 8005a5a:	bd90      	pop	{r4, r7, pc}
 8005a5c:	80002000 	.word	0x80002000
 8005a60:	fe00e800 	.word	0xfe00e800

08005a64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b089      	sub	sp, #36	@ 0x24
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	0008      	movs	r0, r1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	0019      	movs	r1, r3
 8005a72:	230a      	movs	r3, #10
 8005a74:	18fb      	adds	r3, r7, r3
 8005a76:	1c02      	adds	r2, r0, #0
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	18fb      	adds	r3, r7, r3
 8005a7e:	1c0a      	adds	r2, r1, #0
 8005a80:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2241      	movs	r2, #65	@ 0x41
 8005a86:	5c9b      	ldrb	r3, [r3, r2]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d000      	beq.n	8005a90 <HAL_I2C_Master_Receive+0x2c>
 8005a8e:	e0e8      	b.n	8005c62 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2240      	movs	r2, #64	@ 0x40
 8005a94:	5c9b      	ldrb	r3, [r3, r2]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_I2C_Master_Receive+0x3a>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0e2      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2240      	movs	r2, #64	@ 0x40
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fe fd09 	bl	80044bc <HAL_GetTick>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	0219      	lsls	r1, r3, #8
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2319      	movs	r3, #25
 8005aba:	2201      	movs	r2, #1
 8005abc:	f000 f8fc 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0cd      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2241      	movs	r2, #65	@ 0x41
 8005acc:	2122      	movs	r1, #34	@ 0x22
 8005ace:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2242      	movs	r2, #66	@ 0x42
 8005ad4:	2110      	movs	r1, #16
 8005ad6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	18ba      	adds	r2, r7, r2
 8005aea:	8812      	ldrh	r2, [r2, #0]
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2bff      	cmp	r3, #255	@ 0xff
 8005afc:	d911      	bls.n	8005b22 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	@ 0xff
 8005b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	2380      	movs	r3, #128	@ 0x80
 8005b0c:	045c      	lsls	r4, r3, #17
 8005b0e:	230a      	movs	r3, #10
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	8819      	ldrh	r1, [r3, #0]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	4b55      	ldr	r3, [pc, #340]	@ (8005c6c <HAL_I2C_Master_Receive+0x208>)
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	0023      	movs	r3, r4
 8005b1c:	f000 fb44 	bl	80061a8 <I2C_TransferConfig>
 8005b20:	e076      	b.n	8005c10 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	049c      	lsls	r4, r3, #18
 8005b36:	230a      	movs	r3, #10
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	8819      	ldrh	r1, [r3, #0]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8005c6c <HAL_I2C_Master_Receive+0x208>)
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	0023      	movs	r3, r4
 8005b44:	f000 fb30 	bl	80061a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005b48:	e062      	b.n	8005c10 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 f993 	bl	8005e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b56:	1e03      	subs	r3, r0, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e082      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03a      	beq.n	8005c10 <HAL_I2C_Master_Receive+0x1ac>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d136      	bne.n	8005c10 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	0013      	movs	r3, r2
 8005bac:	2200      	movs	r2, #0
 8005bae:	2180      	movs	r1, #128	@ 0x80
 8005bb0:	f000 f882 	bl	8005cb8 <I2C_WaitOnFlagUntilTimeout>
 8005bb4:	1e03      	subs	r3, r0, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e053      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2bff      	cmp	r3, #255	@ 0xff
 8005bc4:	d911      	bls.n	8005bea <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	@ 0xff
 8005bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	2380      	movs	r3, #128	@ 0x80
 8005bd4:	045c      	lsls	r4, r3, #17
 8005bd6:	230a      	movs	r3, #10
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	8819      	ldrh	r1, [r3, #0]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	0023      	movs	r3, r4
 8005be4:	f000 fae0 	bl	80061a8 <I2C_TransferConfig>
 8005be8:	e012      	b.n	8005c10 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	2380      	movs	r3, #128	@ 0x80
 8005bfc:	049c      	lsls	r4, r3, #18
 8005bfe:	230a      	movs	r3, #10
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	8819      	ldrh	r1, [r3, #0]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	2300      	movs	r3, #0
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	f000 facc 	bl	80061a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d197      	bne.n	8005b4a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 f8e7 	bl	8005df4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e01a      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2220      	movs	r2, #32
 8005c34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	490b      	ldr	r1, [pc, #44]	@ (8005c70 <HAL_I2C_Master_Receive+0x20c>)
 8005c42:	400a      	ands	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2241      	movs	r2, #65	@ 0x41
 8005c4a:	2120      	movs	r1, #32
 8005c4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2242      	movs	r2, #66	@ 0x42
 8005c52:	2100      	movs	r1, #0
 8005c54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2240      	movs	r2, #64	@ 0x40
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e000      	b.n	8005c64 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8005c62:	2302      	movs	r3, #2
  }
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b007      	add	sp, #28
 8005c6a:	bd90      	pop	{r4, r7, pc}
 8005c6c:	80002400 	.word	0x80002400
 8005c70:	fe00e800 	.word	0xfe00e800

08005c74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	2202      	movs	r2, #2
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d103      	bne.n	8005c92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d007      	beq.n	8005cb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2101      	movs	r1, #1
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
  }
}
 8005cb0:	46c0      	nop			@ (mov r8, r8)
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	1dfb      	adds	r3, r7, #7
 8005cc6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cc8:	e03a      	b.n	8005d40 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f971 	bl	8005fb8 <I2C_IsErrorOccurred>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d001      	beq.n	8005cde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e040      	b.n	8005d60 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	d02d      	beq.n	8005d40 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fe fbea 	bl	80044bc <HAL_GetTick>
 8005ce8:	0002      	movs	r2, r0
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x42>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d122      	bne.n	8005d40 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	425a      	negs	r2, r3
 8005d0a:	4153      	adcs	r3, r2
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	001a      	movs	r2, r3
 8005d10:	1dfb      	adds	r3, r7, #7
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d113      	bne.n	8005d40 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2241      	movs	r2, #65	@ 0x41
 8005d28:	2120      	movs	r1, #32
 8005d2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2242      	movs	r2, #66	@ 0x42
 8005d30:	2100      	movs	r1, #0
 8005d32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	2100      	movs	r1, #0
 8005d3a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e00f      	b.n	8005d60 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	425a      	negs	r2, r3
 8005d50:	4153      	adcs	r3, r2
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	001a      	movs	r2, r3
 8005d56:	1dfb      	adds	r3, r7, #7
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d0b5      	beq.n	8005cca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d74:	e032      	b.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 f91b 	bl	8005fb8 <I2C_IsErrorOccurred>
 8005d82:	1e03      	subs	r3, r0, #0
 8005d84:	d001      	beq.n	8005d8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e030      	b.n	8005dec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	d025      	beq.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fe fb94 	bl	80044bc <HAL_GetTick>
 8005d94:	0002      	movs	r2, r0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d11a      	bne.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2202      	movs	r2, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d013      	beq.n	8005ddc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db8:	2220      	movs	r2, #32
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2241      	movs	r2, #65	@ 0x41
 8005dc4:	2120      	movs	r1, #32
 8005dc6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2242      	movs	r2, #66	@ 0x42
 8005dcc:	2100      	movs	r1, #0
 8005dce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2240      	movs	r2, #64	@ 0x40
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e007      	b.n	8005dec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2202      	movs	r2, #2
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d1c5      	bne.n	8005d76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	0018      	movs	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b004      	add	sp, #16
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e00:	e02f      	b.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 f8d5 	bl	8005fb8 <I2C_IsErrorOccurred>
 8005e0e:	1e03      	subs	r3, r0, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e02d      	b.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e16:	f7fe fb51 	bl	80044bc <HAL_GetTick>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d302      	bcc.n	8005e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11a      	bne.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2220      	movs	r2, #32
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d013      	beq.n	8005e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	2220      	movs	r2, #32
 8005e40:	431a      	orrs	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2241      	movs	r2, #65	@ 0x41
 8005e4a:	2120      	movs	r1, #32
 8005e4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2242      	movs	r2, #66	@ 0x42
 8005e52:	2100      	movs	r1, #0
 8005e54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2240      	movs	r2, #64	@ 0x40
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e007      	b.n	8005e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d1c8      	bne.n	8005e02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	0018      	movs	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2317      	movs	r3, #23
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005e90:	e07b      	b.n	8005f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 f88d 	bl	8005fb8 <I2C_IsErrorOccurred>
 8005e9e:	1e03      	subs	r3, r0, #0
 8005ea0:	d003      	beq.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005ea2:	2317      	movs	r3, #23
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b20      	cmp	r3, #32
 8005eb6:	d140      	bne.n	8005f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005eb8:	2117      	movs	r1, #23
 8005eba:	187b      	adds	r3, r7, r1
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d13b      	bne.n	8005f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d106      	bne.n	8005ede <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005ed8:	187b      	adds	r3, r7, r1
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d123      	bne.n	8005f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2220      	movs	r2, #32
 8005f00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4929      	ldr	r1, [pc, #164]	@ (8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2241      	movs	r2, #65	@ 0x41
 8005f16:	2120      	movs	r1, #32
 8005f18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2242      	movs	r2, #66	@ 0x42
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2240      	movs	r2, #64	@ 0x40
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005f2a:	2317      	movs	r3, #23
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005f3a:	f7fe fabf 	bl	80044bc <HAL_GetTick>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11c      	bne.n	8005f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8005f50:	2017      	movs	r0, #23
 8005f52:	183b      	adds	r3, r7, r0
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d117      	bne.n	8005f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2204      	movs	r2, #4
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d010      	beq.n	8005f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2241      	movs	r2, #65	@ 0x41
 8005f78:	2120      	movs	r1, #32
 8005f7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2240      	movs	r2, #64	@ 0x40
 8005f80:	2100      	movs	r1, #0
 8005f82:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005f84:	183b      	adds	r3, r7, r0
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2204      	movs	r2, #4
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d005      	beq.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005f98:	2317      	movs	r3, #23
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d100      	bne.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005fa2:	e776      	b.n	8005e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005fa4:	2317      	movs	r3, #23
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	781b      	ldrb	r3, [r3, #0]
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b006      	add	sp, #24
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	fe00e800 	.word	0xfe00e800

08005fb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc4:	2327      	movs	r3, #39	@ 0x27
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	2200      	movs	r2, #0
 8005fca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <I2C_IsErrorOccurred+0x2e>
 8005fe4:	e079      	b.n	80060da <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2210      	movs	r2, #16
 8005fec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fee:	e057      	b.n	80060a0 <I2C_IsErrorOccurred+0xe8>
 8005ff0:	2227      	movs	r2, #39	@ 0x27
 8005ff2:	18bb      	adds	r3, r7, r2
 8005ff4:	18ba      	adds	r2, r7, r2
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d04f      	beq.n	80060a0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006000:	f7fe fa5c 	bl	80044bc <HAL_GetTick>
 8006004:	0002      	movs	r2, r0
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	d302      	bcc.n	8006016 <I2C_IsErrorOccurred+0x5e>
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d144      	bne.n	80060a0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	2380      	movs	r3, #128	@ 0x80
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	4013      	ands	r3, r2
 8006022:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006024:	2013      	movs	r0, #19
 8006026:	183b      	adds	r3, r7, r0
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	2142      	movs	r1, #66	@ 0x42
 800602c:	5c52      	ldrb	r2, [r2, r1]
 800602e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	2380      	movs	r3, #128	@ 0x80
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	401a      	ands	r2, r3
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	021b      	lsls	r3, r3, #8
 8006040:	429a      	cmp	r2, r3
 8006042:	d126      	bne.n	8006092 <I2C_IsErrorOccurred+0xda>
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	01db      	lsls	r3, r3, #7
 800604a:	429a      	cmp	r2, r3
 800604c:	d021      	beq.n	8006092 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800604e:	183b      	adds	r3, r7, r0
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b20      	cmp	r3, #32
 8006054:	d01d      	beq.n	8006092 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2180      	movs	r1, #128	@ 0x80
 8006062:	01c9      	lsls	r1, r1, #7
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006068:	f7fe fa28 	bl	80044bc <HAL_GetTick>
 800606c:	0003      	movs	r3, r0
 800606e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006070:	e00f      	b.n	8006092 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006072:	f7fe fa23 	bl	80044bc <HAL_GetTick>
 8006076:	0002      	movs	r2, r0
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b19      	cmp	r3, #25
 800607e:	d908      	bls.n	8006092 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2220      	movs	r2, #32
 8006084:	4313      	orrs	r3, r2
 8006086:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006088:	2327      	movs	r3, #39	@ 0x27
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]

              break;
 8006090:	e006      	b.n	80060a0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2220      	movs	r2, #32
 800609a:	4013      	ands	r3, r2
 800609c:	2b20      	cmp	r3, #32
 800609e:	d1e8      	bne.n	8006072 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	2220      	movs	r2, #32
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d004      	beq.n	80060b8 <I2C_IsErrorOccurred+0x100>
 80060ae:	2327      	movs	r3, #39	@ 0x27
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d09b      	beq.n	8005ff0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060b8:	2327      	movs	r3, #39	@ 0x27
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2220      	movs	r2, #32
 80060c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2204      	movs	r2, #4
 80060ce:	4313      	orrs	r3, r2
 80060d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060d2:	2327      	movs	r3, #39	@ 0x27
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d00c      	beq.n	8006106 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2201      	movs	r2, #1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2280      	movs	r2, #128	@ 0x80
 80060fa:	0052      	lsls	r2, r2, #1
 80060fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060fe:	2327      	movs	r3, #39	@ 0x27
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4013      	ands	r3, r2
 800610e:	d00c      	beq.n	800612a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2208      	movs	r2, #8
 8006114:	4313      	orrs	r3, r2
 8006116:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2280      	movs	r2, #128	@ 0x80
 800611e:	00d2      	lsls	r2, r2, #3
 8006120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006122:	2327      	movs	r3, #39	@ 0x27
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2201      	movs	r2, #1
 8006128:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	2380      	movs	r3, #128	@ 0x80
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4013      	ands	r3, r2
 8006132:	d00c      	beq.n	800614e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	2202      	movs	r2, #2
 8006138:	4313      	orrs	r3, r2
 800613a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2280      	movs	r2, #128	@ 0x80
 8006142:	0092      	lsls	r2, r2, #2
 8006144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006146:	2327      	movs	r3, #39	@ 0x27
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800614e:	2327      	movs	r3, #39	@ 0x27
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01d      	beq.n	8006194 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	0018      	movs	r0, r3
 800615c:	f7ff fd8a 	bl	8005c74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	490e      	ldr	r1, [pc, #56]	@ (80061a4 <I2C_IsErrorOccurred+0x1ec>)
 800616c:	400a      	ands	r2, r1
 800616e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2241      	movs	r2, #65	@ 0x41
 8006180:	2120      	movs	r1, #32
 8006182:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2242      	movs	r2, #66	@ 0x42
 8006188:	2100      	movs	r1, #0
 800618a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2240      	movs	r2, #64	@ 0x40
 8006190:	2100      	movs	r1, #0
 8006192:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006194:	2327      	movs	r3, #39	@ 0x27
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	781b      	ldrb	r3, [r3, #0]
}
 800619a:	0018      	movs	r0, r3
 800619c:	46bd      	mov	sp, r7
 800619e:	b00a      	add	sp, #40	@ 0x28
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	fe00e800 	.word	0xfe00e800

080061a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061a8:	b590      	push	{r4, r7, lr}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	0008      	movs	r0, r1
 80061b2:	0011      	movs	r1, r2
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	240a      	movs	r4, #10
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	1c02      	adds	r2, r0, #0
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	2009      	movs	r0, #9
 80061c0:	183b      	adds	r3, r7, r0
 80061c2:	1c0a      	adds	r2, r1, #0
 80061c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061c6:	193b      	adds	r3, r7, r4
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	059b      	lsls	r3, r3, #22
 80061cc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061ce:	183b      	adds	r3, r7, r0
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	0419      	lsls	r1, r3, #16
 80061d4:	23ff      	movs	r3, #255	@ 0xff
 80061d6:	041b      	lsls	r3, r3, #16
 80061d8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061da:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e2:	4313      	orrs	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f2:	0d51      	lsrs	r1, r2, #21
 80061f4:	2280      	movs	r2, #128	@ 0x80
 80061f6:	00d2      	lsls	r2, r2, #3
 80061f8:	400a      	ands	r2, r1
 80061fa:	4907      	ldr	r1, [pc, #28]	@ (8006218 <I2C_TransferConfig+0x70>)
 80061fc:	430a      	orrs	r2, r1
 80061fe:	43d2      	mvns	r2, r2
 8006200:	401a      	ands	r2, r3
 8006202:	0011      	movs	r1, r2
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b007      	add	sp, #28
 8006214:	bd90      	pop	{r4, r7, pc}
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	03ff63ff 	.word	0x03ff63ff

0800621c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2241      	movs	r2, #65	@ 0x41
 800622a:	5c9b      	ldrb	r3, [r3, r2]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b20      	cmp	r3, #32
 8006230:	d138      	bne.n	80062a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2240      	movs	r2, #64	@ 0x40
 8006236:	5c9b      	ldrb	r3, [r3, r2]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800623c:	2302      	movs	r3, #2
 800623e:	e032      	b.n	80062a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	2101      	movs	r1, #1
 8006246:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2241      	movs	r2, #65	@ 0x41
 800624c:	2124      	movs	r1, #36	@ 0x24
 800624e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2101      	movs	r1, #1
 800625c:	438a      	bics	r2, r1
 800625e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4911      	ldr	r1, [pc, #68]	@ (80062b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800626c:	400a      	ands	r2, r1
 800626e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2101      	movs	r1, #1
 800628c:	430a      	orrs	r2, r1
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2241      	movs	r2, #65	@ 0x41
 8006294:	2120      	movs	r1, #32
 8006296:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	2100      	movs	r1, #0
 800629e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
  }
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b002      	add	sp, #8
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	ffffefff 	.word	0xffffefff

080062b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2241      	movs	r2, #65	@ 0x41
 80062c2:	5c9b      	ldrb	r3, [r3, r2]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d139      	bne.n	800633e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2240      	movs	r2, #64	@ 0x40
 80062ce:	5c9b      	ldrb	r3, [r3, r2]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e033      	b.n	8006340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2240      	movs	r2, #64	@ 0x40
 80062dc:	2101      	movs	r1, #1
 80062de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2241      	movs	r2, #65	@ 0x41
 80062e4:	2124      	movs	r1, #36	@ 0x24
 80062e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2101      	movs	r1, #1
 80062f4:	438a      	bics	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a11      	ldr	r2, [pc, #68]	@ (8006348 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006304:	4013      	ands	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2101      	movs	r1, #1
 8006326:	430a      	orrs	r2, r1
 8006328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2241      	movs	r2, #65	@ 0x41
 800632e:	2120      	movs	r1, #32
 8006330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2240      	movs	r2, #64	@ 0x40
 8006336:	2100      	movs	r1, #0
 8006338:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	e000      	b.n	8006340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800633e:	2302      	movs	r3, #2
  }
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	b004      	add	sp, #16
 8006346:	bd80      	pop	{r7, pc}
 8006348:	fffff0ff 	.word	0xfffff0ff

0800634c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	000a      	movs	r2, r1
 8006356:	1cbb      	adds	r3, r7, #2
 8006358:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800635a:	230a      	movs	r3, #10
 800635c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800635e:	e002      	b.n	8006366 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3b01      	subs	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f9      	bne.n	8006360 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800636c:	1cbb      	adds	r3, r7, #2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4a06      	ldr	r2, [pc, #24]	@ (800638c <PCD_GET_EP_RX_CNT+0x40>)
 8006374:	4694      	mov	ip, r2
 8006376:	4463      	add	r3, ip
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	0c1b      	lsrs	r3, r3, #16
 800637c:	b29b      	uxth	r3, r3
 800637e:	059b      	lsls	r3, r3, #22
 8006380:	0d9b      	lsrs	r3, r3, #22
 8006382:	b29b      	uxth	r3, r3
}
 8006384:	0018      	movs	r0, r3
 8006386:	46bd      	mov	sp, r7
 8006388:	b004      	add	sp, #16
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40009800 	.word	0x40009800

08006390 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	000a      	movs	r2, r1
 800639a:	1cbb      	adds	r3, r7, #2
 800639c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800639e:	230a      	movs	r3, #10
 80063a0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80063a2:	e002      	b.n	80063aa <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f9      	bne.n	80063a4 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80063b0:	1cbb      	adds	r3, r7, #2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4a06      	ldr	r2, [pc, #24]	@ (80063d0 <PCD_GET_EP_DBUF0_CNT+0x40>)
 80063b8:	4694      	mov	ip, r2
 80063ba:	4463      	add	r3, ip
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	0c1b      	lsrs	r3, r3, #16
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	059b      	lsls	r3, r3, #22
 80063c4:	0d9b      	lsrs	r3, r3, #22
 80063c6:	b29b      	uxth	r3, r3
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b004      	add	sp, #16
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40009800 	.word	0x40009800

080063d4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	000a      	movs	r2, r1
 80063de:	1cbb      	adds	r3, r7, #2
 80063e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80063e2:	230a      	movs	r3, #10
 80063e4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80063e6:	e002      	b.n	80063ee <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1f9      	bne.n	80063e8 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80063f4:	1cbb      	adds	r3, r7, #2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4a06      	ldr	r2, [pc, #24]	@ (8006414 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80063fc:	4694      	mov	ip, r2
 80063fe:	4463      	add	r3, ip
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	0c1b      	lsrs	r3, r3, #16
 8006404:	b29b      	uxth	r3, r3
 8006406:	059b      	lsls	r3, r3, #22
 8006408:	0d9b      	lsrs	r3, r3, #22
 800640a:	b29b      	uxth	r3, r3
}
 800640c:	0018      	movs	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	b004      	add	sp, #16
 8006412:	bd80      	pop	{r7, pc}
 8006414:	40009800 	.word	0x40009800

08006418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b087      	sub	sp, #28
 800641c:	af02      	add	r7, sp, #8
 800641e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e0ea      	b.n	8006600 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a76      	ldr	r2, [pc, #472]	@ (8006608 <HAL_PCD_Init+0x1f0>)
 800642e:	5c9b      	ldrb	r3, [r3, r2]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	23a5      	movs	r3, #165	@ 0xa5
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	2100      	movs	r1, #0
 800643e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f007 fdce 	bl	800dfe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a6f      	ldr	r2, [pc, #444]	@ (8006608 <HAL_PCD_Init+0x1f0>)
 800644c:	2103      	movs	r1, #3
 800644e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	0018      	movs	r0, r3
 8006456:	f003 faa3 	bl	80099a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800645a:	230f      	movs	r3, #15
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e049      	b.n	80064f8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006464:	200f      	movs	r0, #15
 8006466:	183b      	adds	r3, r7, r0
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	0013      	movs	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	189b      	adds	r3, r3, r2
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	18cb      	adds	r3, r1, r3
 8006476:	3315      	adds	r3, #21
 8006478:	2201      	movs	r2, #1
 800647a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800647c:	183b      	adds	r3, r7, r0
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	0013      	movs	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	189b      	adds	r3, r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	18cb      	adds	r3, r1, r3
 800648c:	3314      	adds	r3, #20
 800648e:	183a      	adds	r2, r7, r0
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006494:	183b      	adds	r3, r7, r0
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	0013      	movs	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	189b      	adds	r3, r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	18cb      	adds	r3, r1, r3
 80064a4:	3317      	adds	r3, #23
 80064a6:	2200      	movs	r2, #0
 80064a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064aa:	183b      	adds	r3, r7, r0
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	0013      	movs	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	189b      	adds	r3, r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	18cb      	adds	r3, r1, r3
 80064ba:	3324      	adds	r3, #36	@ 0x24
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064c0:	183b      	adds	r3, r7, r0
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	0013      	movs	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	189b      	adds	r3, r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	18cb      	adds	r3, r1, r3
 80064d0:	3328      	adds	r3, #40	@ 0x28
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	0013      	movs	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	18cb      	adds	r3, r1, r3
 80064e8:	3304      	adds	r3, #4
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ee:	183b      	adds	r3, r7, r0
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	183b      	adds	r3, r7, r0
 80064f4:	3201      	adds	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	791b      	ldrb	r3, [r3, #4]
 80064fc:	210f      	movs	r1, #15
 80064fe:	187a      	adds	r2, r7, r1
 8006500:	7812      	ldrb	r2, [r2, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d3ae      	bcc.n	8006464 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006506:	187b      	adds	r3, r7, r1
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e056      	b.n	80065bc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800650e:	240f      	movs	r4, #15
 8006510:	193b      	adds	r3, r7, r4
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	2356      	movs	r3, #86	@ 0x56
 8006518:	33ff      	adds	r3, #255	@ 0xff
 800651a:	0019      	movs	r1, r3
 800651c:	0013      	movs	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	189b      	adds	r3, r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	18c3      	adds	r3, r0, r3
 8006526:	185b      	adds	r3, r3, r1
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800652c:	193b      	adds	r3, r7, r4
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	23aa      	movs	r3, #170	@ 0xaa
 8006534:	0059      	lsls	r1, r3, #1
 8006536:	0013      	movs	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	189b      	adds	r3, r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	18c3      	adds	r3, r0, r3
 8006540:	185b      	adds	r3, r3, r1
 8006542:	193a      	adds	r2, r7, r4
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006548:	193b      	adds	r3, r7, r4
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	2358      	movs	r3, #88	@ 0x58
 8006550:	33ff      	adds	r3, #255	@ 0xff
 8006552:	0019      	movs	r1, r3
 8006554:	0013      	movs	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	189b      	adds	r3, r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	18c3      	adds	r3, r0, r3
 800655e:	185b      	adds	r3, r3, r1
 8006560:	2200      	movs	r2, #0
 8006562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006564:	193b      	adds	r3, r7, r4
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	23b2      	movs	r3, #178	@ 0xb2
 800656c:	0059      	lsls	r1, r3, #1
 800656e:	0013      	movs	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	189b      	adds	r3, r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	18c3      	adds	r3, r0, r3
 8006578:	185b      	adds	r3, r3, r1
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800657e:	193b      	adds	r3, r7, r4
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	23b4      	movs	r3, #180	@ 0xb4
 8006586:	0059      	lsls	r1, r3, #1
 8006588:	0013      	movs	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	189b      	adds	r3, r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	18c3      	adds	r3, r0, r3
 8006592:	185b      	adds	r3, r3, r1
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006598:	193b      	adds	r3, r7, r4
 800659a:	781a      	ldrb	r2, [r3, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	23b6      	movs	r3, #182	@ 0xb6
 80065a0:	0059      	lsls	r1, r3, #1
 80065a2:	0013      	movs	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	189b      	adds	r3, r3, r2
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	18c3      	adds	r3, r0, r3
 80065ac:	185b      	adds	r3, r3, r1
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065b2:	193b      	adds	r3, r7, r4
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	193b      	adds	r3, r7, r4
 80065b8:	3201      	adds	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	791b      	ldrb	r3, [r3, #4]
 80065c0:	220f      	movs	r2, #15
 80065c2:	18ba      	adds	r2, r7, r2
 80065c4:	7812      	ldrb	r2, [r2, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3a1      	bcc.n	800650e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	466a      	mov	r2, sp
 80065d2:	7c19      	ldrb	r1, [r3, #16]
 80065d4:	7011      	strb	r1, [r2, #0]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 fa19 	bl	8009a12 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a07      	ldr	r2, [pc, #28]	@ (8006608 <HAL_PCD_Init+0x1f0>)
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	7b1b      	ldrb	r3, [r3, #12]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d103      	bne.n	80065fe <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f001 fbf1 	bl	8007de0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b005      	add	sp, #20
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	00000295 	.word	0x00000295

0800660c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	23a5      	movs	r3, #165	@ 0xa5
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	5cd3      	ldrb	r3, [r2, r3]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_PCD_Start+0x18>
 8006620:	2302      	movs	r3, #2
 8006622:	e014      	b.n	800664e <HAL_PCD_Start+0x42>
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	23a5      	movs	r3, #165	@ 0xa5
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	2101      	movs	r1, #1
 800662c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	0018      	movs	r0, r3
 8006634:	f003 f9a0 	bl	8009978 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	0018      	movs	r0, r3
 800663e:	f004 ffaa 	bl	800b596 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	23a5      	movs	r3, #165	@ 0xa5
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	2100      	movs	r1, #0
 800664a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	0018      	movs	r0, r3
 8006650:	46bd      	mov	sp, r7
 8006652:	b002      	add	sp, #8
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	0018      	movs	r0, r3
 8006666:	f004 ffa6 	bl	800b5b6 <USB_ReadInterrupts>
 800666a:	0003      	movs	r3, r0
 800666c:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800666e:	4a7c      	ldr	r2, [pc, #496]	@ (8006860 <HAL_PCD_IRQHandler+0x208>)
 8006670:	23a0      	movs	r3, #160	@ 0xa0
 8006672:	58d3      	ldr	r3, [r2, r3]
 8006674:	2204      	movs	r2, #4
 8006676:	4013      	ands	r3, r2
 8006678:	d100      	bne.n	800667c <HAL_PCD_IRQHandler+0x24>
 800667a:	e0ed      	b.n	8006858 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	2380      	movs	r3, #128	@ 0x80
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	4013      	ands	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 fb35 	bl	8006cf8 <PCD_EP_ISR_Handler>

    return;
 800668e:	e0e4      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	2380      	movs	r3, #128	@ 0x80
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4013      	ands	r3, r2
 8006698:	d011      	beq.n	80066be <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	496f      	ldr	r1, [pc, #444]	@ (8006864 <HAL_PCD_IRQHandler+0x20c>)
 80066a6:	400a      	ands	r2, r1
 80066a8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f007 fd5c 	bl	800e16a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2100      	movs	r1, #0
 80066b6:	0018      	movs	r0, r3
 80066b8:	f000 f8e4 	bl	8006884 <HAL_PCD_SetAddress>

    return;
 80066bc:	e0cd      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	2380      	movs	r3, #128	@ 0x80
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	4013      	ands	r3, r2
 80066c6:	d008      	beq.n	80066da <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4965      	ldr	r1, [pc, #404]	@ (8006868 <HAL_PCD_IRQHandler+0x210>)
 80066d4:	400a      	ands	r2, r1
 80066d6:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80066d8:	e0bf      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	019b      	lsls	r3, r3, #6
 80066e0:	4013      	ands	r3, r2
 80066e2:	d008      	beq.n	80066f6 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	495f      	ldr	r1, [pc, #380]	@ (800686c <HAL_PCD_IRQHandler+0x214>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80066f4:	e0b1      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	015b      	lsls	r3, r3, #5
 80066fc:	4013      	ands	r3, r2
 80066fe:	d02c      	beq.n	800675a <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2104      	movs	r1, #4
 800670c:	438a      	bics	r2, r1
 800670e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2108      	movs	r1, #8
 800671c:	438a      	bics	r2, r1
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	23b3      	movs	r3, #179	@ 0xb3
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	5cd3      	ldrb	r3, [r2, r3]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d109      	bne.n	8006740 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	23b3      	movs	r3, #179	@ 0xb3
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	2100      	movs	r1, #0
 8006734:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2100      	movs	r1, #0
 800673a:	0018      	movs	r0, r3
 800673c:	f007 ff94 	bl	800e668 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f007 fd52 	bl	800e1ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4947      	ldr	r1, [pc, #284]	@ (8006870 <HAL_PCD_IRQHandler+0x218>)
 8006754:	400a      	ands	r2, r1
 8006756:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006758:	e07f      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	2380      	movs	r3, #128	@ 0x80
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4013      	ands	r3, r2
 8006762:	d01c      	beq.n	800679e <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2108      	movs	r1, #8
 8006770:	430a      	orrs	r2, r1
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	493d      	ldr	r1, [pc, #244]	@ (8006874 <HAL_PCD_IRQHandler+0x21c>)
 8006780:	400a      	ands	r2, r1
 8006782:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2104      	movs	r1, #4
 8006790:	430a      	orrs	r2, r1
 8006792:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	0018      	movs	r0, r3
 8006798:	f007 fd0c 	bl	800e1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800679c:	e05d      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	4013      	ands	r3, r2
 80067a4:	d038      	beq.n	8006818 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4931      	ldr	r1, [pc, #196]	@ (8006878 <HAL_PCD_IRQHandler+0x220>)
 80067b2:	400a      	ands	r2, r1
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	23b3      	movs	r3, #179	@ 0xb3
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	5cd3      	ldrb	r3, [r2, r3]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d125      	bne.n	800680e <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2104      	movs	r1, #4
 80067ce:	430a      	orrs	r2, r1
 80067d0:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2108      	movs	r1, #8
 80067de:	430a      	orrs	r2, r1
 80067e0:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	23b3      	movs	r3, #179	@ 0xb3
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	2101      	movs	r1, #1
 80067ea:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	223c      	movs	r2, #60	@ 0x3c
 80067f6:	4013      	ands	r3, r2
 80067f8:	0019      	movs	r1, r3
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	23b4      	movs	r3, #180	@ 0xb4
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2101      	movs	r1, #1
 8006806:	0018      	movs	r0, r3
 8006808:	f007 ff2e 	bl	800e668 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800680c:	e025      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f007 fccf 	bl	800e1b4 <HAL_PCD_SuspendCallback>
    return;
 8006816:	e020      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	2380      	movs	r3, #128	@ 0x80
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4013      	ands	r3, r2
 8006820:	d00c      	beq.n	800683c <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4913      	ldr	r1, [pc, #76]	@ (800687c <HAL_PCD_IRQHandler+0x224>)
 800682e:	400a      	ands	r2, r1
 8006830:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f007 fc89 	bl	800e14c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800683a:	e00e      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	2380      	movs	r3, #128	@ 0x80
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	4013      	ands	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	490b      	ldr	r1, [pc, #44]	@ (8006880 <HAL_PCD_IRQHandler+0x228>)
 8006852:	400a      	ands	r2, r1
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006856:	e000      	b.n	800685a <HAL_PCD_IRQHandler+0x202>
    return;
 8006858:	46c0      	nop			@ (mov r8, r8)
  }
}
 800685a:	46bd      	mov	sp, r7
 800685c:	b004      	add	sp, #16
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40010000 	.word	0x40010000
 8006864:	0000fbff 	.word	0x0000fbff
 8006868:	0000bfff 	.word	0x0000bfff
 800686c:	0000dfff 	.word	0x0000dfff
 8006870:	0000efff 	.word	0x0000efff
 8006874:	0000f7ff 	.word	0x0000f7ff
 8006878:	0000ff7f 	.word	0x0000ff7f
 800687c:	0000fdff 	.word	0x0000fdff
 8006880:	0000feff 	.word	0x0000feff

08006884 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	000a      	movs	r2, r1
 800688e:	1cfb      	adds	r3, r7, #3
 8006890:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	23a5      	movs	r3, #165	@ 0xa5
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	5cd3      	ldrb	r3, [r2, r3]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_PCD_SetAddress+0x1e>
 800689e:	2302      	movs	r3, #2
 80068a0:	e016      	b.n	80068d0 <HAL_PCD_SetAddress+0x4c>
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	23a5      	movs	r3, #165	@ 0xa5
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	2101      	movs	r1, #1
 80068aa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1cfa      	adds	r2, r7, #3
 80068b0:	7812      	ldrb	r2, [r2, #0]
 80068b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	0019      	movs	r1, r3
 80068be:	0010      	movs	r0, r2
 80068c0:	f004 fe56 	bl	800b570 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	23a5      	movs	r3, #165	@ 0xa5
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	2100      	movs	r1, #0
 80068cc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b002      	add	sp, #8
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	000c      	movs	r4, r1
 80068e2:	0010      	movs	r0, r2
 80068e4:	0019      	movs	r1, r3
 80068e6:	1cfb      	adds	r3, r7, #3
 80068e8:	1c22      	adds	r2, r4, #0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	003b      	movs	r3, r7
 80068ee:	1c02      	adds	r2, r0, #0
 80068f0:	801a      	strh	r2, [r3, #0]
 80068f2:	1cbb      	adds	r3, r7, #2
 80068f4:	1c0a      	adds	r2, r1, #0
 80068f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80068f8:	230b      	movs	r3, #11
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006900:	1cfb      	adds	r3, r7, #3
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b25b      	sxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	da10      	bge.n	800692c <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800690a:	1cfb      	adds	r3, r7, #3
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2207      	movs	r2, #7
 8006910:	401a      	ands	r2, r3
 8006912:	0013      	movs	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	189b      	adds	r3, r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	3310      	adds	r3, #16
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	18d3      	adds	r3, r2, r3
 8006920:	3304      	adds	r3, #4
 8006922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	705a      	strb	r2, [r3, #1]
 800692a:	e010      	b.n	800694e <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800692c:	1cfb      	adds	r3, r7, #3
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2207      	movs	r2, #7
 8006932:	401a      	ands	r2, r3
 8006934:	0013      	movs	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	189b      	adds	r3, r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	3351      	adds	r3, #81	@ 0x51
 800693e:	33ff      	adds	r3, #255	@ 0xff
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	18d3      	adds	r3, r2, r3
 8006944:	3304      	adds	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800694e:	1cfb      	adds	r3, r7, #3
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2207      	movs	r2, #7
 8006954:	4013      	ands	r3, r2
 8006956:	b2da      	uxtb	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800695c:	003b      	movs	r3, r7
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1cba      	adds	r2, r7, #2
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800696c:	1cbb      	adds	r3, r7, #2
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d102      	bne.n	800697a <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	23a5      	movs	r3, #165	@ 0xa5
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	5cd3      	ldrb	r3, [r2, r3]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_PCD_EP_Open+0xb2>
 8006986:	2302      	movs	r3, #2
 8006988:	e013      	b.n	80069b2 <HAL_PCD_EP_Open+0xda>
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	23a5      	movs	r3, #165	@ 0xa5
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	2101      	movs	r1, #1
 8006992:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f003 f863 	bl	8009a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	23a5      	movs	r3, #165	@ 0xa5
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	2100      	movs	r1, #0
 80069aa:	54d1      	strb	r1, [r2, r3]

  return ret;
 80069ac:	230b      	movs	r3, #11
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	781b      	ldrb	r3, [r3, #0]
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b005      	add	sp, #20
 80069b8:	bd90      	pop	{r4, r7, pc}

080069ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	000a      	movs	r2, r1
 80069c4:	1cfb      	adds	r3, r7, #3
 80069c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069c8:	1cfb      	adds	r3, r7, #3
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da10      	bge.n	80069f4 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069d2:	1cfb      	adds	r3, r7, #3
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2207      	movs	r2, #7
 80069d8:	401a      	ands	r2, r3
 80069da:	0013      	movs	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	3310      	adds	r3, #16
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	3304      	adds	r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	705a      	strb	r2, [r3, #1]
 80069f2:	e010      	b.n	8006a16 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069f4:	1cfb      	adds	r3, r7, #3
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2207      	movs	r2, #7
 80069fa:	401a      	ands	r2, r3
 80069fc:	0013      	movs	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	189b      	adds	r3, r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	3351      	adds	r3, #81	@ 0x51
 8006a06:	33ff      	adds	r3, #255	@ 0xff
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a16:	1cfb      	adds	r3, r7, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	23a5      	movs	r3, #165	@ 0xa5
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	5cd3      	ldrb	r3, [r2, r3]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_PCD_EP_Close+0x7a>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e011      	b.n	8006a58 <HAL_PCD_EP_Close+0x9e>
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	23a5      	movs	r3, #165	@ 0xa5
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	0011      	movs	r1, r2
 8006a46:	0018      	movs	r0, r3
 8006a48:	f003 fb42 	bl	800a0d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	23a5      	movs	r3, #165	@ 0xa5
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	2100      	movs	r1, #0
 8006a54:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b004      	add	sp, #16
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	200b      	movs	r0, #11
 8006a6e:	183b      	adds	r3, r7, r0
 8006a70:	1c0a      	adds	r2, r1, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a74:	0001      	movs	r1, r0
 8006a76:	187b      	adds	r3, r7, r1
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2207      	movs	r2, #7
 8006a7c:	401a      	ands	r2, r3
 8006a7e:	0013      	movs	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	3351      	adds	r3, #81	@ 0x51
 8006a88:	33ff      	adds	r3, #255	@ 0xff
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	18d3      	adds	r3, r2, r3
 8006a8e:	3304      	adds	r3, #4
 8006a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aaa:	187b      	adds	r3, r7, r1
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2207      	movs	r2, #7
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	0011      	movs	r1, r2
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f003 fc6b 	bl	800a39c <USB_EPStartXfer>

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	0018      	movs	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	b006      	add	sp, #24
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	000a      	movs	r2, r1
 8006ada:	1cfb      	adds	r3, r7, #3
 8006adc:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ade:	1cfb      	adds	r3, r7, #3
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2207      	movs	r2, #7
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	23b8      	movs	r3, #184	@ 0xb8
 8006aea:	0059      	lsls	r1, r3, #1
 8006aec:	0013      	movs	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	18c3      	adds	r3, r0, r3
 8006af6:	185b      	adds	r3, r3, r1
 8006af8:	681b      	ldr	r3, [r3, #0]
}
 8006afa:	0018      	movs	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b002      	add	sp, #8
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	200b      	movs	r0, #11
 8006b10:	183b      	adds	r3, r7, r0
 8006b12:	1c0a      	adds	r2, r1, #0
 8006b14:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b16:	183b      	adds	r3, r7, r0
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	0013      	movs	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	3310      	adds	r3, #16
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2224      	movs	r2, #36	@ 0x24
 8006b40:	2101      	movs	r1, #1
 8006b42:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2201      	movs	r2, #1
 8006b54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b56:	183b      	adds	r3, r7, r0
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2207      	movs	r2, #7
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	0011      	movs	r1, r2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f003 fc15 	bl	800a39c <USB_EPStartXfer>

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b006      	add	sp, #24
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	000a      	movs	r2, r1
 8006b86:	1cfb      	adds	r3, r7, #3
 8006b88:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b8a:	1cfb      	adds	r3, r7, #3
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	7912      	ldrb	r2, [r2, #4]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e048      	b.n	8006c30 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b9e:	1cfb      	adds	r3, r7, #3
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da10      	bge.n	8006bca <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ba8:	1cfb      	adds	r3, r7, #3
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2207      	movs	r2, #7
 8006bae:	401a      	ands	r2, r3
 8006bb0:	0013      	movs	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	3310      	adds	r3, #16
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	18d3      	adds	r3, r2, r3
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	705a      	strb	r2, [r3, #1]
 8006bc8:	e00e      	b.n	8006be8 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bca:	1cfb      	adds	r3, r7, #3
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	0013      	movs	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	189b      	adds	r3, r3, r2
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	3351      	adds	r3, #81	@ 0x51
 8006bd8:	33ff      	adds	r3, #255	@ 0xff
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	18d3      	adds	r3, r2, r3
 8006bde:	3304      	adds	r3, #4
 8006be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2201      	movs	r2, #1
 8006bec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bee:	1cfb      	adds	r3, r7, #3
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	23a5      	movs	r3, #165	@ 0xa5
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	5cd3      	ldrb	r3, [r2, r3]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_PCD_EP_SetStall+0x90>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e011      	b.n	8006c30 <HAL_PCD_EP_SetStall+0xb4>
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	23a5      	movs	r3, #165	@ 0xa5
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	2101      	movs	r1, #1
 8006c14:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	0011      	movs	r1, r2
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f004 fbd2 	bl	800b3c8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	23a5      	movs	r3, #165	@ 0xa5
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	0018      	movs	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b004      	add	sp, #16
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	000a      	movs	r2, r1
 8006c42:	1cfb      	adds	r3, r7, #3
 8006c44:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c46:	1cfb      	adds	r3, r7, #3
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	220f      	movs	r2, #15
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	7912      	ldrb	r2, [r2, #4]
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e04a      	b.n	8006cf0 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c5a:	1cfb      	adds	r3, r7, #3
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da10      	bge.n	8006c86 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c64:	1cfb      	adds	r3, r7, #3
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2207      	movs	r2, #7
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	3310      	adds	r3, #16
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	18d3      	adds	r3, r2, r3
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	705a      	strb	r2, [r3, #1]
 8006c84:	e010      	b.n	8006ca8 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c86:	1cfb      	adds	r3, r7, #3
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2207      	movs	r2, #7
 8006c8c:	401a      	ands	r2, r3
 8006c8e:	0013      	movs	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	189b      	adds	r3, r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	3351      	adds	r3, #81	@ 0x51
 8006c98:	33ff      	adds	r3, #255	@ 0xff
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	18d3      	adds	r3, r2, r3
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cae:	1cfb      	adds	r3, r7, #3
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	23a5      	movs	r3, #165	@ 0xa5
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	5cd3      	ldrb	r3, [r2, r3]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_PCD_EP_ClrStall+0x94>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e011      	b.n	8006cf0 <HAL_PCD_EP_ClrStall+0xb8>
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	23a5      	movs	r3, #165	@ 0xa5
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	0011      	movs	r1, r2
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f004 fbb4 	bl	800b44c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	23a5      	movs	r3, #165	@ 0xa5
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	2100      	movs	r1, #0
 8006cec:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b004      	add	sp, #16
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006cf8:	b5b0      	push	{r4, r5, r7, lr}
 8006cfa:	b08e      	sub	sp, #56	@ 0x38
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d00:	e355      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d08:	2022      	movs	r0, #34	@ 0x22
 8006d0a:	183b      	adds	r3, r7, r0
 8006d0c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	2421      	movs	r4, #33	@ 0x21
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	210f      	movs	r1, #15
 8006d1a:	400a      	ands	r2, r1
 8006d1c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d000      	beq.n	8006d28 <PCD_EP_ISR_Handler+0x30>
 8006d26:	e12b      	b.n	8006f80 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d28:	183b      	adds	r3, r7, r0
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	2210      	movs	r2, #16
 8006d2e:	4013      	ands	r3, r2
 8006d30:	d140      	bne.n	8006db4 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4ac5      	ldr	r2, [pc, #788]	@ (8007050 <PCD_EP_ISR_Handler+0x358>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	2180      	movs	r1, #128	@ 0x80
 8006d46:	0209      	lsls	r1, r1, #8
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4abe      	ldr	r2, [pc, #760]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006d5a:	4694      	mov	ip, r2
 8006d5c:	4463      	add	r3, ip
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	059b      	lsls	r3, r3, #22
 8006d64:	0d9a      	lsrs	r2, r3, #22
 8006d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	18d2      	adds	r2, r2, r3
 8006d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d76:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f007 f9c7 	bl	800e110 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c5b      	ldrb	r3, [r3, #17]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d100      	bne.n	8006d8e <PCD_EP_ISR_Handler+0x96>
 8006d8c:	e30f      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d000      	beq.n	8006d98 <PCD_EP_ISR_Handler+0xa0>
 8006d96:	e30a      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7c5b      	ldrb	r3, [r3, #17]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2280      	movs	r2, #128	@ 0x80
 8006da0:	4252      	negs	r2, r2
 8006da2:	4313      	orrs	r3, r2
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	745a      	strb	r2, [r3, #17]
 8006db2:	e2fc      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3355      	adds	r3, #85	@ 0x55
 8006db8:	33ff      	adds	r3, #255	@ 0xff
 8006dba:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	2132      	movs	r1, #50	@ 0x32
 8006dc4:	187b      	adds	r3, r7, r1
 8006dc6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d029      	beq.n	8006e28 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	0019      	movs	r1, r3
 8006dde:	0010      	movs	r0, r2
 8006de0:	f7ff fab4 	bl	800634c <PCD_GET_EP_RX_CNT>
 8006de4:	0003      	movs	r3, r0
 8006de6:	001a      	movs	r2, r3
 8006de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	22a7      	movs	r2, #167	@ 0xa7
 8006df4:	0092      	lsls	r2, r2, #2
 8006df6:	1899      	adds	r1, r3, r2
 8006df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f004 fc5b 	bl	800b6bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a92      	ldr	r2, [pc, #584]	@ (8007058 <PCD_EP_ISR_Handler+0x360>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	2180      	movs	r1, #128	@ 0x80
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f007 f93f 	bl	800e0a4 <HAL_PCD_SetupStageCallback>
 8006e26:	e2c2      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8006e28:	2332      	movs	r3, #50	@ 0x32
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	5e9b      	ldrsh	r3, [r3, r2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db00      	blt.n	8006e36 <PCD_EP_ISR_Handler+0x13e>
 8006e34:	e2bb      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a86      	ldr	r2, [pc, #536]	@ (8007058 <PCD_EP_ISR_Handler+0x360>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e48:	2180      	movs	r1, #128	@ 0x80
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	0019      	movs	r1, r3
 8006e58:	0010      	movs	r0, r2
 8006e5a:	f7ff fa77 	bl	800634c <PCD_GET_EP_RX_CNT>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	001a      	movs	r2, r3
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d01a      	beq.n	8006ea4 <PCD_EP_ISR_Handler+0x1ac>
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d016      	beq.n	8006ea4 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	6959      	ldr	r1, [r3, #20]
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e80:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e84:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f004 fc18 	bl	800b6bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	18d2      	adds	r2, r2, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f007 f915 	bl	800e0ce <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	2132      	movs	r1, #50	@ 0x32
 8006eac:	187b      	adds	r3, r7, r1
 8006eae:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006eb0:	187b      	adds	r3, r7, r1
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	2380      	movs	r3, #128	@ 0x80
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	4013      	ands	r3, r2
 8006eba:	d000      	beq.n	8006ebe <PCD_EP_ISR_Handler+0x1c6>
 8006ebc:	e277      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
 8006ebe:	187b      	adds	r3, r7, r1
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	23c0      	movs	r3, #192	@ 0xc0
 8006ec4:	019b      	lsls	r3, r3, #6
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	23c0      	movs	r3, #192	@ 0xc0
 8006eca:	019b      	lsls	r3, r3, #6
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d100      	bne.n	8006ed2 <PCD_EP_ISR_Handler+0x1da>
 8006ed0:	e26d      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ed2:	4b60      	ldr	r3, [pc, #384]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006ed8:	0192      	lsls	r2, r2, #6
 8006eda:	0992      	lsrs	r2, r2, #6
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ee4:	d916      	bls.n	8006f14 <PCD_EP_ISR_Handler+0x21c>
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	095b      	lsrs	r3, r3, #5
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	221f      	movs	r2, #31
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d102      	bne.n	8006efe <PCD_EP_ISR_Handler+0x206>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	4b55      	ldr	r3, [pc, #340]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	069b      	lsls	r3, r3, #26
 8006f06:	431a      	orrs	r2, r3
 8006f08:	4b52      	ldr	r3, [pc, #328]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f0a:	2180      	movs	r1, #128	@ 0x80
 8006f0c:	0609      	lsls	r1, r1, #24
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	e01e      	b.n	8006f52 <PCD_EP_ISR_Handler+0x25a>
 8006f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d107      	bne.n	8006f2c <PCD_EP_ISR_Handler+0x234>
 8006f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	4b4c      	ldr	r3, [pc, #304]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f22:	2180      	movs	r1, #128	@ 0x80
 8006f24:	0609      	lsls	r1, r1, #24
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	e012      	b.n	8006f52 <PCD_EP_ISR_Handler+0x25a>
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d002      	beq.n	8006f44 <PCD_EP_ISR_Handler+0x24c>
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3301      	adds	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	4b43      	ldr	r3, [pc, #268]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	069a      	lsls	r2, r3, #26
 8006f4c:	4b41      	ldr	r3, [pc, #260]	@ (8007054 <PCD_EP_ISR_Handler+0x35c>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a40      	ldr	r2, [pc, #256]	@ (800705c <PCD_EP_ISR_Handler+0x364>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2280      	movs	r2, #128	@ 0x80
 8006f62:	0152      	lsls	r2, r2, #5
 8006f64:	4053      	eors	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2280      	movs	r2, #128	@ 0x80
 8006f6c:	0192      	lsls	r2, r2, #6
 8006f6e:	4053      	eors	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4939      	ldr	r1, [pc, #228]	@ (8007060 <PCD_EP_ISR_Handler+0x368>)
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e216      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	001a      	movs	r2, r3
 8006f86:	2121      	movs	r1, #33	@ 0x21
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	18d3      	adds	r3, r2, r3
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	2032      	movs	r0, #50	@ 0x32
 8006f94:	183b      	adds	r3, r7, r0
 8006f96:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8006f98:	183b      	adds	r3, r7, r0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	5e9b      	ldrsh	r3, [r3, r2]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	db00      	blt.n	8006fa4 <PCD_EP_ISR_Handler+0x2ac>
 8006fa2:	e0e0      	b.n	8007166 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	001a      	movs	r2, r3
 8006faa:	187b      	adds	r3, r7, r1
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	18d3      	adds	r3, r2, r3
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a28      	ldr	r2, [pc, #160]	@ (8007058 <PCD_EP_ISR_Handler+0x360>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	0008      	movs	r0, r1
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	2180      	movs	r1, #128	@ 0x80
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	781a      	ldrb	r2, [r3, #0]
 8006fd6:	0013      	movs	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	3351      	adds	r3, #81	@ 0x51
 8006fe0:	33ff      	adds	r3, #255	@ 0xff
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	18d3      	adds	r3, r2, r3
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	7b1b      	ldrb	r3, [r3, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d11c      	bne.n	800702c <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2524      	movs	r5, #36	@ 0x24
 8006ffc:	197c      	adds	r4, r7, r5
 8006ffe:	0019      	movs	r1, r3
 8007000:	0010      	movs	r0, r2
 8007002:	f7ff f9a3 	bl	800634c <PCD_GET_EP_RX_CNT>
 8007006:	0003      	movs	r3, r0
 8007008:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800700a:	002c      	movs	r4, r5
 800700c:	193b      	adds	r3, r7, r4
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d100      	bne.n	8007016 <PCD_EP_ISR_Handler+0x31e>
 8007014:	e07f      	b.n	8007116 <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701c:	6959      	ldr	r1, [r3, #20]
 800701e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007020:	88da      	ldrh	r2, [r3, #6]
 8007022:	193b      	adds	r3, r7, r4
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	f004 fb49 	bl	800b6bc <USB_ReadPMA>
 800702a:	e074      	b.n	8007116 <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800702c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702e:	78db      	ldrb	r3, [r3, #3]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d117      	bne.n	8007064 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007034:	2324      	movs	r3, #36	@ 0x24
 8007036:	18fc      	adds	r4, r7, r3
 8007038:	2332      	movs	r3, #50	@ 0x32
 800703a:	18fb      	adds	r3, r7, r3
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 f9c8 	bl	80073d8 <HAL_PCD_EP_DB_Receive>
 8007048:	0003      	movs	r3, r0
 800704a:	8023      	strh	r3, [r4, #0]
 800704c:	e063      	b.n	8007116 <PCD_EP_ISR_Handler+0x41e>
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	07ff8f0f 	.word	0x07ff8f0f
 8007054:	40009800 	.word	0x40009800
 8007058:	07ff0f8f 	.word	0x07ff0f8f
 800705c:	07ffbf8f 	.word	0x07ffbf8f
 8007060:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	001a      	movs	r2, r3
 800706a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	18d3      	adds	r3, r2, r3
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4ad4      	ldr	r2, [pc, #848]	@ (80073c8 <PCD_EP_ISR_Handler+0x6d0>)
 8007076:	4013      	ands	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	001a      	movs	r2, r3
 8007080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	18d3      	adds	r3, r2, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	49d0      	ldr	r1, [pc, #832]	@ (80073cc <PCD_EP_ISR_Handler+0x6d4>)
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	001a      	movs	r2, r3
 8007096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	18d3      	adds	r3, r2, r3
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	2380      	movs	r3, #128	@ 0x80
 80070a2:	01db      	lsls	r3, r3, #7
 80070a4:	4013      	ands	r3, r2
 80070a6:	d01b      	beq.n	80070e0 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2524      	movs	r5, #36	@ 0x24
 80070b2:	197c      	adds	r4, r7, r5
 80070b4:	0019      	movs	r1, r3
 80070b6:	0010      	movs	r0, r2
 80070b8:	f7ff f96a 	bl	8006390 <PCD_GET_EP_DBUF0_CNT>
 80070bc:	0003      	movs	r3, r0
 80070be:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80070c0:	002c      	movs	r4, r5
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d025      	beq.n	8007116 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	6959      	ldr	r1, [r3, #20]
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	891a      	ldrh	r2, [r3, #8]
 80070d6:	193b      	adds	r3, r7, r4
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	f004 faef 	bl	800b6bc <USB_ReadPMA>
 80070de:	e01a      	b.n	8007116 <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2524      	movs	r5, #36	@ 0x24
 80070ea:	197c      	adds	r4, r7, r5
 80070ec:	0019      	movs	r1, r3
 80070ee:	0010      	movs	r0, r2
 80070f0:	f7ff f970 	bl	80063d4 <PCD_GET_EP_DBUF1_CNT>
 80070f4:	0003      	movs	r3, r0
 80070f6:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80070f8:	002c      	movs	r4, r5
 80070fa:	193b      	adds	r3, r7, r4
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
 8007106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007108:	6959      	ldr	r1, [r3, #20]
 800710a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710c:	895a      	ldrh	r2, [r3, #10]
 800710e:	193b      	adds	r3, r7, r4
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	f004 fad3 	bl	800b6bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	2124      	movs	r1, #36	@ 0x24
 800711c:	187b      	adds	r3, r7, r1
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	18d2      	adds	r2, r2, r3
 8007122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007124:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007128:	695a      	ldr	r2, [r3, #20]
 800712a:	187b      	adds	r3, r7, r1
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	18d2      	adds	r2, r2, r3
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <PCD_EP_ISR_Handler+0x450>
 800713c:	187b      	adds	r3, r7, r1
 800713e:	881a      	ldrh	r2, [r3, #0]
 8007140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	429a      	cmp	r2, r3
 8007146:	d207      	bcs.n	8007158 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0011      	movs	r1, r2
 8007150:	0018      	movs	r0, r3
 8007152:	f006 ffbc 	bl	800e0ce <HAL_PCD_DataOutStageCallback>
 8007156:	e006      	b.n	8007166 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800715e:	0011      	movs	r1, r2
 8007160:	0018      	movs	r0, r3
 8007162:	f003 f91b 	bl	800a39c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8007166:	2032      	movs	r0, #50	@ 0x32
 8007168:	183b      	adds	r3, r7, r0
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	2280      	movs	r2, #128	@ 0x80
 800716e:	4013      	ands	r3, r2
 8007170:	d100      	bne.n	8007174 <PCD_EP_ISR_Handler+0x47c>
 8007172:	e11c      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 8007174:	2121      	movs	r1, #33	@ 0x21
 8007176:	187b      	adds	r3, r7, r1
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	0013      	movs	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	189b      	adds	r3, r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	3310      	adds	r3, #16
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	18d3      	adds	r3, r2, r3
 8007188:	3304      	adds	r3, #4
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	001a      	movs	r2, r3
 8007192:	187b      	adds	r3, r7, r1
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	18d3      	adds	r3, r2, r3
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a8c      	ldr	r2, [pc, #560]	@ (80073d0 <PCD_EP_ISR_Handler+0x6d8>)
 800719e:	4013      	ands	r3, r2
 80071a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	001a      	movs	r2, r3
 80071a8:	187b      	adds	r3, r7, r1
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071b2:	2180      	movs	r1, #128	@ 0x80
 80071b4:	0209      	lsls	r1, r1, #8
 80071b6:	430a      	orrs	r2, r1
 80071b8:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80071ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071bc:	78db      	ldrb	r3, [r3, #3]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d000      	beq.n	80071c4 <PCD_EP_ISR_Handler+0x4cc>
 80071c2:	e0a3      	b.n	800730c <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 80071c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c6:	2200      	movs	r2, #0
 80071c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80071ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071cc:	7b1b      	ldrb	r3, [r3, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d100      	bne.n	80071d4 <PCD_EP_ISR_Handler+0x4dc>
 80071d2:	e093      	b.n	80072fc <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071d4:	183b      	adds	r3, r7, r0
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	2240      	movs	r2, #64	@ 0x40
 80071da:	4013      	ands	r3, r2
 80071dc:	d047      	beq.n	800726e <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d121      	bne.n	800722a <PCD_EP_ISR_Handler+0x532>
 80071e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	4a79      	ldr	r2, [pc, #484]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80071ee:	4694      	mov	ip, r2
 80071f0:	4463      	add	r3, ip
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	4976      	ldr	r1, [pc, #472]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80071fc:	468c      	mov	ip, r1
 80071fe:	4463      	add	r3, ip
 8007200:	0192      	lsls	r2, r2, #6
 8007202:	0992      	lsrs	r2, r2, #6
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4a71      	ldr	r2, [pc, #452]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800720e:	4694      	mov	ip, r2
 8007210:	4463      	add	r3, ip
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	496e      	ldr	r1, [pc, #440]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800721c:	468c      	mov	ip, r1
 800721e:	4463      	add	r3, ip
 8007220:	2180      	movs	r1, #128	@ 0x80
 8007222:	0609      	lsls	r1, r1, #24
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e068      	b.n	80072fc <PCD_EP_ISR_Handler+0x604>
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d164      	bne.n	80072fc <PCD_EP_ISR_Handler+0x604>
 8007232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4a66      	ldr	r2, [pc, #408]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800723a:	4694      	mov	ip, r2
 800723c:	4463      	add	r3, ip
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4963      	ldr	r1, [pc, #396]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 8007248:	468c      	mov	ip, r1
 800724a:	4463      	add	r3, ip
 800724c:	0412      	lsls	r2, r2, #16
 800724e:	0c12      	lsrs	r2, r2, #16
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4a5e      	ldr	r2, [pc, #376]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800725a:	189a      	adds	r2, r3, r2
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	495c      	ldr	r1, [pc, #368]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 8007264:	468c      	mov	ip, r1
 8007266:	4463      	add	r3, ip
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e046      	b.n	80072fc <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d121      	bne.n	80072ba <PCD_EP_ISR_Handler+0x5c2>
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	4a55      	ldr	r2, [pc, #340]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800727e:	4694      	mov	ip, r2
 8007280:	4463      	add	r3, ip
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4952      	ldr	r1, [pc, #328]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800728c:	468c      	mov	ip, r1
 800728e:	4463      	add	r3, ip
 8007290:	0192      	lsls	r2, r2, #6
 8007292:	0992      	lsrs	r2, r2, #6
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4a4d      	ldr	r2, [pc, #308]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 800729e:	4694      	mov	ip, r2
 80072a0:	4463      	add	r3, ip
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	494a      	ldr	r1, [pc, #296]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80072ac:	468c      	mov	ip, r1
 80072ae:	4463      	add	r3, ip
 80072b0:	2180      	movs	r1, #128	@ 0x80
 80072b2:	0609      	lsls	r1, r1, #24
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
 80072b8:	e020      	b.n	80072fc <PCD_EP_ISR_Handler+0x604>
 80072ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d11c      	bne.n	80072fc <PCD_EP_ISR_Handler+0x604>
 80072c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4a42      	ldr	r2, [pc, #264]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80072ca:	4694      	mov	ip, r2
 80072cc:	4463      	add	r3, ip
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	493f      	ldr	r1, [pc, #252]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80072d8:	468c      	mov	ip, r1
 80072da:	4463      	add	r3, ip
 80072dc:	0412      	lsls	r2, r2, #16
 80072de:	0c12      	lsrs	r2, r2, #16
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4a3a      	ldr	r2, [pc, #232]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80072ea:	189a      	adds	r2, r3, r2
 80072ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	4938      	ldr	r1, [pc, #224]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 80072f4:	468c      	mov	ip, r1
 80072f6:	4463      	add	r3, ip
 80072f8:	6852      	ldr	r2, [r2, #4]
 80072fa:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fe:	781a      	ldrb	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0011      	movs	r1, r2
 8007304:	0018      	movs	r0, r3
 8007306:	f006 ff03 	bl	800e110 <HAL_PCD_DataInStageCallback>
 800730a:	e050      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800730c:	2332      	movs	r3, #50	@ 0x32
 800730e:	18fb      	adds	r3, r7, r3
 8007310:	881a      	ldrh	r2, [r3, #0]
 8007312:	2380      	movs	r3, #128	@ 0x80
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	4013      	ands	r3, r2
 8007318:	d141      	bne.n	800739e <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4a2c      	ldr	r2, [pc, #176]	@ (80073d4 <PCD_EP_ISR_Handler+0x6dc>)
 8007322:	4694      	mov	ip, r2
 8007324:	4463      	add	r3, ip
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	b29a      	uxth	r2, r3
 800732c:	2126      	movs	r1, #38	@ 0x26
 800732e:	187b      	adds	r3, r7, r1
 8007330:	0592      	lsls	r2, r2, #22
 8007332:	0d92      	lsrs	r2, r2, #22
 8007334:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	187b      	adds	r3, r7, r1
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d907      	bls.n	8007352 <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 8007342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	187b      	adds	r3, r7, r1
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734e:	619a      	str	r2, [r3, #24]
 8007350:	e002      	b.n	8007358 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 8007352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007354:	2200      	movs	r2, #0
 8007356:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d107      	bne.n	8007370 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	781a      	ldrb	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	0011      	movs	r1, r2
 8007368:	0018      	movs	r0, r3
 800736a:	f006 fed1 	bl	800e110 <HAL_PCD_DataInStageCallback>
 800736e:	e01e      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007372:	695a      	ldr	r2, [r3, #20]
 8007374:	2126      	movs	r1, #38	@ 0x26
 8007376:	187b      	adds	r3, r7, r1
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	18d2      	adds	r2, r2, r3
 800737c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	187b      	adds	r3, r7, r1
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	18d2      	adds	r2, r2, r3
 800738a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007394:	0011      	movs	r1, r2
 8007396:	0018      	movs	r0, r3
 8007398:	f003 f800 	bl	800a39c <USB_EPStartXfer>
 800739c:	e007      	b.n	80073ae <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800739e:	2332      	movs	r3, #50	@ 0x32
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	881a      	ldrh	r2, [r3, #0]
 80073a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0018      	movs	r0, r3
 80073aa:	f000 f8ff 	bl	80075ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073b4:	2380      	movs	r3, #128	@ 0x80
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	4013      	ands	r3, r2
 80073ba:	d000      	beq.n	80073be <PCD_EP_ISR_Handler+0x6c6>
 80073bc:	e4a1      	b.n	8006d02 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	0018      	movs	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b00e      	add	sp, #56	@ 0x38
 80073c6:	bdb0      	pop	{r4, r5, r7, pc}
 80073c8:	07ff8f8f 	.word	0x07ff8f8f
 80073cc:	000080c0 	.word	0x000080c0
 80073d0:	07ff8f0f 	.word	0x07ff8f0f
 80073d4:	40009800 	.word	0x40009800

080073d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b08a      	sub	sp, #40	@ 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	1dbb      	adds	r3, r7, #6
 80073e4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073e6:	1dbb      	adds	r3, r7, #6
 80073e8:	881a      	ldrh	r2, [r3, #0]
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	4013      	ands	r3, r2
 80073f0:	d067      	beq.n	80074c2 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	251e      	movs	r5, #30
 80073fc:	197c      	adds	r4, r7, r5
 80073fe:	0019      	movs	r1, r3
 8007400:	0010      	movs	r0, r2
 8007402:	f7fe ffc5 	bl	8006390 <PCD_GET_EP_DBUF0_CNT>
 8007406:	0003      	movs	r3, r0
 8007408:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	197b      	adds	r3, r7, r5
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d307      	bcc.n	8007426 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	197b      	adds	r3, r7, r5
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	619a      	str	r2, [r3, #24]
 8007424:	e002      	b.n	800742c <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11a      	bne.n	800746a <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	001a      	movs	r2, r3
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	18d3      	adds	r3, r2, r3
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a55      	ldr	r2, [pc, #340]	@ (800759c <HAL_PCD_EP_DB_Receive+0x1c4>)
 8007446:	4013      	ands	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2280      	movs	r2, #128	@ 0x80
 800744e:	0192      	lsls	r2, r2, #6
 8007450:	4053      	eors	r3, r2
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	001a      	movs	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	18d3      	adds	r3, r2, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	494e      	ldr	r1, [pc, #312]	@ (80075a0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007466:	430a      	orrs	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800746a:	1dbb      	adds	r3, r7, #6
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	2240      	movs	r2, #64	@ 0x40
 8007470:	4013      	ands	r3, r2
 8007472:	d015      	beq.n	80074a0 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	001a      	movs	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	18d3      	adds	r3, r2, r3
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a47      	ldr	r2, [pc, #284]	@ (80075a4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007486:	4013      	ands	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	001a      	movs	r2, r3
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	18d3      	adds	r3, r2, r3
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4943      	ldr	r1, [pc, #268]	@ (80075a8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800749c:	430a      	orrs	r2, r1
 800749e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80074a0:	241e      	movs	r4, #30
 80074a2:	193b      	adds	r3, r7, r4
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d100      	bne.n	80074ac <HAL_PCD_EP_DB_Receive+0xd4>
 80074aa:	e070      	b.n	800758e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	6959      	ldr	r1, [r3, #20]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	891a      	ldrh	r2, [r3, #8]
 80074b8:	193b      	adds	r3, r7, r4
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	f004 f8fe 	bl	800b6bc <USB_ReadPMA>
 80074c0:	e065      	b.n	800758e <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	251e      	movs	r5, #30
 80074cc:	197c      	adds	r4, r7, r5
 80074ce:	0019      	movs	r1, r3
 80074d0:	0010      	movs	r0, r2
 80074d2:	f7fe ff7f 	bl	80063d4 <PCD_GET_EP_DBUF1_CNT>
 80074d6:	0003      	movs	r3, r0
 80074d8:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	197b      	adds	r3, r7, r5
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d307      	bcc.n	80074f6 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	197b      	adds	r3, r7, r5
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	619a      	str	r2, [r3, #24]
 80074f4:	e002      	b.n	80074fc <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2200      	movs	r2, #0
 80074fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d11a      	bne.n	800753a <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	001a      	movs	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a21      	ldr	r2, [pc, #132]	@ (800759c <HAL_PCD_EP_DB_Receive+0x1c4>)
 8007516:	4013      	ands	r3, r2
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	2280      	movs	r2, #128	@ 0x80
 800751e:	0192      	lsls	r2, r2, #6
 8007520:	4053      	eors	r3, r2
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	001a      	movs	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	18d3      	adds	r3, r2, r3
 8007532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007534:	491a      	ldr	r1, [pc, #104]	@ (80075a0 <HAL_PCD_EP_DB_Receive+0x1c8>)
 8007536:	430a      	orrs	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800753a:	1dbb      	adds	r3, r7, #6
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	2240      	movs	r2, #64	@ 0x40
 8007540:	4013      	ands	r3, r2
 8007542:	d115      	bne.n	8007570 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	001a      	movs	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	18d3      	adds	r3, r2, r3
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a13      	ldr	r2, [pc, #76]	@ (80075a4 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007556:	4013      	ands	r3, r2
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	001a      	movs	r2, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	490f      	ldr	r1, [pc, #60]	@ (80075a8 <HAL_PCD_EP_DB_Receive+0x1d0>)
 800756c:	430a      	orrs	r2, r1
 800756e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007570:	241e      	movs	r4, #30
 8007572:	193b      	adds	r3, r7, r4
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6959      	ldr	r1, [r3, #20]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	895a      	ldrh	r2, [r3, #10]
 8007586:	193b      	adds	r3, r7, r4
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	f004 f897 	bl	800b6bc <USB_ReadPMA>
    }
  }

  return count;
 800758e:	231e      	movs	r3, #30
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	881b      	ldrh	r3, [r3, #0]
}
 8007594:	0018      	movs	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	b00a      	add	sp, #40	@ 0x28
 800759a:	bdb0      	pop	{r4, r5, r7, pc}
 800759c:	07ffbf8f 	.word	0x07ffbf8f
 80075a0:	00008080 	.word	0x00008080
 80075a4:	07ff8f8f 	.word	0x07ff8f8f
 80075a8:	000080c0 	.word	0x000080c0

080075ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80075ac:	b5b0      	push	{r4, r5, r7, lr}
 80075ae:	b08e      	sub	sp, #56	@ 0x38
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	1dbb      	adds	r3, r7, #6
 80075b8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075ba:	1dbb      	adds	r3, r7, #6
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	2240      	movs	r2, #64	@ 0x40
 80075c0:	4013      	ands	r3, r2
 80075c2:	d100      	bne.n	80075c6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80075c4:	e1c3      	b.n	800794e <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	251e      	movs	r5, #30
 80075d0:	197c      	adds	r4, r7, r5
 80075d2:	0019      	movs	r1, r3
 80075d4:	0010      	movs	r0, r2
 80075d6:	f7fe fedb 	bl	8006390 <PCD_GET_EP_DBUF0_CNT>
 80075da:	0003      	movs	r3, r0
 80075dc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	197b      	adds	r3, r7, r5
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d907      	bls.n	80075fa <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	197b      	adds	r3, r7, r5
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	1ad2      	subs	r2, r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	619a      	str	r2, [r3, #24]
 80075f8:	e002      	b.n	8007600 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d000      	beq.n	800760a <HAL_PCD_EP_DB_Transmit+0x5e>
 8007608:	e0b2      	b.n	8007770 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d121      	bne.n	8007656 <HAL_PCD_EP_DB_Transmit+0xaa>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4ada      	ldr	r2, [pc, #872]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800761a:	4694      	mov	ip, r2
 800761c:	4463      	add	r3, ip
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	49d7      	ldr	r1, [pc, #860]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007628:	468c      	mov	ip, r1
 800762a:	4463      	add	r3, ip
 800762c:	0192      	lsls	r2, r2, #6
 800762e:	0992      	lsrs	r2, r2, #6
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4ad2      	ldr	r2, [pc, #840]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800763a:	4694      	mov	ip, r2
 800763c:	4463      	add	r3, ip
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	49cf      	ldr	r1, [pc, #828]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007648:	468c      	mov	ip, r1
 800764a:	4463      	add	r3, ip
 800764c:	2180      	movs	r1, #128	@ 0x80
 800764e:	0609      	lsls	r1, r1, #24
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e020      	b.n	8007698 <HAL_PCD_EP_DB_Transmit+0xec>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d11c      	bne.n	8007698 <HAL_PCD_EP_DB_Transmit+0xec>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	4ac7      	ldr	r2, [pc, #796]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007666:	4694      	mov	ip, r2
 8007668:	4463      	add	r3, ip
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	49c4      	ldr	r1, [pc, #784]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007674:	468c      	mov	ip, r1
 8007676:	4463      	add	r3, ip
 8007678:	0412      	lsls	r2, r2, #16
 800767a:	0c12      	lsrs	r2, r2, #16
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	4abf      	ldr	r2, [pc, #764]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007686:	189a      	adds	r2, r3, r2
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	49bd      	ldr	r1, [pc, #756]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007690:	468c      	mov	ip, r1
 8007692:	4463      	add	r3, ip
 8007694:	6812      	ldr	r2, [r2, #0]
 8007696:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d121      	bne.n	80076e4 <HAL_PCD_EP_DB_Transmit+0x138>
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4ab7      	ldr	r2, [pc, #732]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80076a8:	4694      	mov	ip, r2
 80076aa:	4463      	add	r3, ip
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	49b3      	ldr	r1, [pc, #716]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80076b6:	468c      	mov	ip, r1
 80076b8:	4463      	add	r3, ip
 80076ba:	0192      	lsls	r2, r2, #6
 80076bc:	0992      	lsrs	r2, r2, #6
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4aaf      	ldr	r2, [pc, #700]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80076c8:	4694      	mov	ip, r2
 80076ca:	4463      	add	r3, ip
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	49ab      	ldr	r1, [pc, #684]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80076d6:	468c      	mov	ip, r1
 80076d8:	4463      	add	r3, ip
 80076da:	2180      	movs	r1, #128	@ 0x80
 80076dc:	0609      	lsls	r1, r1, #24
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
 80076e2:	e020      	b.n	8007726 <HAL_PCD_EP_DB_Transmit+0x17a>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d11c      	bne.n	8007726 <HAL_PCD_EP_DB_Transmit+0x17a>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4aa4      	ldr	r2, [pc, #656]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80076f4:	4694      	mov	ip, r2
 80076f6:	4463      	add	r3, ip
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	49a0      	ldr	r1, [pc, #640]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007702:	468c      	mov	ip, r1
 8007704:	4463      	add	r3, ip
 8007706:	0412      	lsls	r2, r2, #16
 8007708:	0c12      	lsrs	r2, r2, #16
 800770a:	605a      	str	r2, [r3, #4]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	4a9c      	ldr	r2, [pc, #624]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007714:	189a      	adds	r2, r3, r2
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4999      	ldr	r1, [pc, #612]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800771e:	468c      	mov	ip, r1
 8007720:	4463      	add	r3, ip
 8007722:	6852      	ldr	r2, [r2, #4]
 8007724:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f006 fcee 	bl	800e110 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007734:	1dbb      	adds	r3, r7, #6
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	2380      	movs	r3, #128	@ 0x80
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	4013      	ands	r3, r2
 800773e:	d100      	bne.n	8007742 <HAL_PCD_EP_DB_Transmit+0x196>
 8007740:	e2d5      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	001a      	movs	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a8d      	ldr	r2, [pc, #564]	@ (8007988 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8007754:	4013      	ands	r3, r2
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	001a      	movs	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	18d3      	adds	r3, r2, r3
 8007766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007768:	4988      	ldr	r1, [pc, #544]	@ (800798c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800776a:	430a      	orrs	r2, r1
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e2be      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007770:	1dbb      	adds	r3, r7, #6
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	2380      	movs	r3, #128	@ 0x80
 8007776:	01db      	lsls	r3, r3, #7
 8007778:	4013      	ands	r3, r2
 800777a:	d015      	beq.n	80077a8 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	001a      	movs	r2, r3
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a7e      	ldr	r2, [pc, #504]	@ (8007988 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800778e:	4013      	ands	r3, r2
 8007790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	001a      	movs	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	18d3      	adds	r3, r2, r3
 80077a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077a2:	497a      	ldr	r1, [pc, #488]	@ (800798c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80077a4:	430a      	orrs	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2224      	movs	r2, #36	@ 0x24
 80077ac:	5c9b      	ldrb	r3, [r3, r2]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d000      	beq.n	80077b4 <HAL_PCD_EP_DB_Transmit+0x208>
 80077b2:	e29c      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	211e      	movs	r1, #30
 80077ba:	187b      	adds	r3, r7, r1
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	18d2      	adds	r2, r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	187b      	adds	r3, r7, r1
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	18d2      	adds	r2, r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6a1a      	ldr	r2, [r3, #32]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d309      	bcc.n	80077f2 <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	621a      	str	r2, [r3, #32]
 80077f0:	e016      	b.n	8007820 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d108      	bne.n	800780c <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 80077fa:	231e      	movs	r3, #30
 80077fc:	18fb      	adds	r3, r7, r3
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2224      	movs	r2, #36	@ 0x24
 8007806:	2100      	movs	r1, #0
 8007808:	5499      	strb	r1, [r3, r2]
 800780a:	e009      	b.n	8007820 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2224      	movs	r2, #36	@ 0x24
 8007810:	2100      	movs	r1, #0
 8007812:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2200      	movs	r2, #0
 800781e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d162      	bne.n	80078ee <HAL_PCD_EP_DB_Transmit+0x342>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4a55      	ldr	r2, [pc, #340]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007830:	4694      	mov	ip, r2
 8007832:	4463      	add	r3, ip
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4951      	ldr	r1, [pc, #324]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800783e:	468c      	mov	ip, r1
 8007840:	4463      	add	r3, ip
 8007842:	0192      	lsls	r2, r2, #6
 8007844:	0992      	lsrs	r2, r2, #6
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b3e      	cmp	r3, #62	@ 0x3e
 800784c:	d91e      	bls.n	800788c <HAL_PCD_EP_DB_Transmit+0x2e0>
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	221f      	movs	r2, #31
 8007858:	4013      	ands	r3, r2
 800785a:	d102      	bne.n	8007862 <HAL_PCD_EP_DB_Transmit+0x2b6>
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	3b01      	subs	r3, #1
 8007860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4a46      	ldr	r2, [pc, #280]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800786a:	4694      	mov	ip, r2
 800786c:	4463      	add	r3, ip
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007872:	069b      	lsls	r3, r3, #26
 8007874:	431a      	orrs	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4941      	ldr	r1, [pc, #260]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800787e:	468c      	mov	ip, r1
 8007880:	4463      	add	r3, ip
 8007882:	2180      	movs	r1, #128	@ 0x80
 8007884:	0609      	lsls	r1, r1, #24
 8007886:	430a      	orrs	r2, r1
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e055      	b.n	8007938 <HAL_PCD_EP_DB_Transmit+0x38c>
 800788c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788e:	2b00      	cmp	r3, #0
 8007890:	d111      	bne.n	80078b6 <HAL_PCD_EP_DB_Transmit+0x30a>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4a3a      	ldr	r2, [pc, #232]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800789a:	4694      	mov	ip, r2
 800789c:	4463      	add	r3, ip
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4937      	ldr	r1, [pc, #220]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80078a8:	468c      	mov	ip, r1
 80078aa:	4463      	add	r3, ip
 80078ac:	2180      	movs	r1, #128	@ 0x80
 80078ae:	0609      	lsls	r1, r1, #24
 80078b0:	430a      	orrs	r2, r1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e040      	b.n	8007938 <HAL_PCD_EP_DB_Transmit+0x38c>
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	2201      	movs	r2, #1
 80078c0:	4013      	ands	r3, r2
 80078c2:	d002      	beq.n	80078ca <HAL_PCD_EP_DB_Transmit+0x31e>
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	3301      	adds	r3, #1
 80078c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80078d2:	4694      	mov	ip, r2
 80078d4:	4463      	add	r3, ip
 80078d6:	6819      	ldr	r1, [r3, #0]
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	069a      	lsls	r2, r3, #26
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	4828      	ldr	r0, [pc, #160]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80078e4:	4684      	mov	ip, r0
 80078e6:	4463      	add	r3, ip
 80078e8:	430a      	orrs	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e024      	b.n	8007938 <HAL_PCD_EP_DB_Transmit+0x38c>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d120      	bne.n	8007938 <HAL_PCD_EP_DB_Transmit+0x38c>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4a21      	ldr	r2, [pc, #132]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80078fe:	4694      	mov	ip, r2
 8007900:	4463      	add	r3, ip
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	491e      	ldr	r1, [pc, #120]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800790c:	468c      	mov	ip, r1
 800790e:	4463      	add	r3, ip
 8007910:	0412      	lsls	r2, r2, #16
 8007912:	0c12      	lsrs	r2, r2, #16
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4a19      	ldr	r2, [pc, #100]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800791e:	4694      	mov	ip, r2
 8007920:	4463      	add	r3, ip
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	041a      	lsls	r2, r3, #16
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	4815      	ldr	r0, [pc, #84]	@ (8007984 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007930:	4684      	mov	ip, r0
 8007932:	4463      	add	r3, ip
 8007934:	430a      	orrs	r2, r1
 8007936:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6959      	ldr	r1, [r3, #20]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	891a      	ldrh	r2, [r3, #8]
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	b29b      	uxth	r3, r3
 8007948:	f003 fe42 	bl	800b5d0 <USB_WritePMA>
 800794c:	e1cf      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	251e      	movs	r5, #30
 8007958:	197c      	adds	r4, r7, r5
 800795a:	0019      	movs	r1, r3
 800795c:	0010      	movs	r0, r2
 800795e:	f7fe fd39 	bl	80063d4 <PCD_GET_EP_DBUF1_CNT>
 8007962:	0003      	movs	r3, r0
 8007964:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	197b      	adds	r3, r7, r5
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d30e      	bcc.n	8007990 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	197b      	adds	r3, r7, r5
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	1ad2      	subs	r2, r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	619a      	str	r2, [r3, #24]
 8007980:	e009      	b.n	8007996 <HAL_PCD_EP_DB_Transmit+0x3ea>
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	40009800 	.word	0x40009800
 8007988:	07ff8f8f 	.word	0x07ff8f8f
 800798c:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d000      	beq.n	80079a0 <HAL_PCD_EP_DB_Transmit+0x3f4>
 800799e:	e0b2      	b.n	8007b06 <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d121      	bne.n	80079ec <HAL_PCD_EP_DB_Transmit+0x440>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	4ab5      	ldr	r2, [pc, #724]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80079b0:	4694      	mov	ip, r2
 80079b2:	4463      	add	r3, ip
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	49b1      	ldr	r1, [pc, #708]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80079be:	468c      	mov	ip, r1
 80079c0:	4463      	add	r3, ip
 80079c2:	0192      	lsls	r2, r2, #6
 80079c4:	0992      	lsrs	r2, r2, #6
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4aad      	ldr	r2, [pc, #692]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80079d0:	4694      	mov	ip, r2
 80079d2:	4463      	add	r3, ip
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	49a9      	ldr	r1, [pc, #676]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80079de:	468c      	mov	ip, r1
 80079e0:	4463      	add	r3, ip
 80079e2:	2180      	movs	r1, #128	@ 0x80
 80079e4:	0609      	lsls	r1, r1, #24
 80079e6:	430a      	orrs	r2, r1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e020      	b.n	8007a2e <HAL_PCD_EP_DB_Transmit+0x482>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d11c      	bne.n	8007a2e <HAL_PCD_EP_DB_Transmit+0x482>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4aa2      	ldr	r2, [pc, #648]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80079fc:	4694      	mov	ip, r2
 80079fe:	4463      	add	r3, ip
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	499e      	ldr	r1, [pc, #632]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a0a:	468c      	mov	ip, r1
 8007a0c:	4463      	add	r3, ip
 8007a0e:	0412      	lsls	r2, r2, #16
 8007a10:	0c12      	lsrs	r2, r2, #16
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	4a9a      	ldr	r2, [pc, #616]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a1c:	189a      	adds	r2, r3, r2
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4997      	ldr	r1, [pc, #604]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a26:	468c      	mov	ip, r1
 8007a28:	4463      	add	r3, ip
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d121      	bne.n	8007a7a <HAL_PCD_EP_DB_Transmit+0x4ce>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4a91      	ldr	r2, [pc, #580]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a3e:	4694      	mov	ip, r2
 8007a40:	4463      	add	r3, ip
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	498e      	ldr	r1, [pc, #568]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a4c:	468c      	mov	ip, r1
 8007a4e:	4463      	add	r3, ip
 8007a50:	0192      	lsls	r2, r2, #6
 8007a52:	0992      	lsrs	r2, r2, #6
 8007a54:	605a      	str	r2, [r3, #4]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4a89      	ldr	r2, [pc, #548]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a5e:	4694      	mov	ip, r2
 8007a60:	4463      	add	r3, ip
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	4986      	ldr	r1, [pc, #536]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a6c:	468c      	mov	ip, r1
 8007a6e:	4463      	add	r3, ip
 8007a70:	2180      	movs	r1, #128	@ 0x80
 8007a72:	0609      	lsls	r1, r1, #24
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	e020      	b.n	8007abc <HAL_PCD_EP_DB_Transmit+0x510>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d11c      	bne.n	8007abc <HAL_PCD_EP_DB_Transmit+0x510>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4a7e      	ldr	r2, [pc, #504]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a8a:	4694      	mov	ip, r2
 8007a8c:	4463      	add	r3, ip
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	497b      	ldr	r1, [pc, #492]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007a98:	468c      	mov	ip, r1
 8007a9a:	4463      	add	r3, ip
 8007a9c:	0412      	lsls	r2, r2, #16
 8007a9e:	0c12      	lsrs	r2, r2, #16
 8007aa0:	605a      	str	r2, [r3, #4]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4a76      	ldr	r2, [pc, #472]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007aaa:	189a      	adds	r2, r3, r2
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4974      	ldr	r1, [pc, #464]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007ab4:	468c      	mov	ip, r1
 8007ab6:	4463      	add	r3, ip
 8007ab8:	6852      	ldr	r2, [r2, #4]
 8007aba:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f006 fb23 	bl	800e110 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007aca:	1dbb      	adds	r3, r7, #6
 8007acc:	881a      	ldrh	r2, [r3, #0]
 8007ace:	2380      	movs	r3, #128	@ 0x80
 8007ad0:	01db      	lsls	r3, r3, #7
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d000      	beq.n	8007ad8 <HAL_PCD_EP_DB_Transmit+0x52c>
 8007ad6:	e10a      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	001a      	movs	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a67      	ldr	r2, [pc, #412]	@ (8007c88 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	623b      	str	r3, [r7, #32]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	001a      	movs	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	4963      	ldr	r1, [pc, #396]	@ (8007c8c <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8007b00:	430a      	orrs	r2, r1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e0f3      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007b06:	1dbb      	adds	r3, r7, #6
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	2380      	movs	r3, #128	@ 0x80
 8007b0c:	01db      	lsls	r3, r3, #7
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d115      	bne.n	8007b3e <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	001a      	movs	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	18d3      	adds	r3, r2, r3
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a59      	ldr	r2, [pc, #356]	@ (8007c88 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	18d3      	adds	r3, r2, r3
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4954      	ldr	r1, [pc, #336]	@ (8007c8c <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	5c9b      	ldrb	r3, [r3, r2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d000      	beq.n	8007b4a <HAL_PCD_EP_DB_Transmit+0x59e>
 8007b48:	e0d1      	b.n	8007cee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	211e      	movs	r1, #30
 8007b50:	187b      	adds	r3, r7, r1
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	18d2      	adds	r2, r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	69da      	ldr	r2, [r3, #28]
 8007b5e:	187b      	adds	r3, r7, r1
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	18d2      	adds	r2, r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6a1a      	ldr	r2, [r3, #32]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d309      	bcc.n	8007b88 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	1ad2      	subs	r2, r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	621a      	str	r2, [r3, #32]
 8007b86:	e016      	b.n	8007bb6 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d108      	bne.n	8007ba2 <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 8007b90:	231e      	movs	r3, #30
 8007b92:	18fb      	adds	r3, r7, r3
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2224      	movs	r2, #36	@ 0x24
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	5499      	strb	r1, [r3, r2]
 8007ba0:	e009      	b.n	8007bb6 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2224      	movs	r2, #36	@ 0x24
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d168      	bne.n	8007c90 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007bc6:	4694      	mov	ip, r2
 8007bc8:	4463      	add	r3, ip
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	492c      	ldr	r1, [pc, #176]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007bd4:	468c      	mov	ip, r1
 8007bd6:	4463      	add	r3, ip
 8007bd8:	0192      	lsls	r2, r2, #6
 8007bda:	0992      	lsrs	r2, r2, #6
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007be2:	d91e      	bls.n	8007c22 <HAL_PCD_EP_DB_Transmit+0x676>
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	221f      	movs	r2, #31
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d102      	bne.n	8007bf8 <HAL_PCD_EP_DB_Transmit+0x64c>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	4a21      	ldr	r2, [pc, #132]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c00:	4694      	mov	ip, r2
 8007c02:	4463      	add	r3, ip
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	069b      	lsls	r3, r3, #26
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	491c      	ldr	r1, [pc, #112]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c14:	468c      	mov	ip, r1
 8007c16:	4463      	add	r3, ip
 8007c18:	2180      	movs	r1, #128	@ 0x80
 8007c1a:	0609      	lsls	r1, r1, #24
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	e05b      	b.n	8007cda <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d111      	bne.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x6a0>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c30:	4694      	mov	ip, r2
 8007c32:	4463      	add	r3, ip
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	4911      	ldr	r1, [pc, #68]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c3e:	468c      	mov	ip, r1
 8007c40:	4463      	add	r3, ip
 8007c42:	2180      	movs	r1, #128	@ 0x80
 8007c44:	0609      	lsls	r1, r1, #24
 8007c46:	430a      	orrs	r2, r1
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e046      	b.n	8007cda <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	2201      	movs	r2, #1
 8007c56:	4013      	ands	r3, r2
 8007c58:	d002      	beq.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x6b4>
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4a07      	ldr	r2, [pc, #28]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c68:	4694      	mov	ip, r2
 8007c6a:	4463      	add	r3, ip
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	069a      	lsls	r2, r3, #26
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4802      	ldr	r0, [pc, #8]	@ (8007c84 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007c7a:	4684      	mov	ip, r0
 8007c7c:	4463      	add	r3, ip
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	e02a      	b.n	8007cda <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c84:	40009800 	.word	0x40009800
 8007c88:	07ff8f8f 	.word	0x07ff8f8f
 8007c8c:	0000c080 	.word	0x0000c080
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d120      	bne.n	8007cda <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	4a25      	ldr	r2, [pc, #148]	@ (8007d34 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007ca0:	4694      	mov	ip, r2
 8007ca2:	4463      	add	r3, ip
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4921      	ldr	r1, [pc, #132]	@ (8007d34 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007cae:	468c      	mov	ip, r1
 8007cb0:	4463      	add	r3, ip
 8007cb2:	0412      	lsls	r2, r2, #16
 8007cb4:	0c12      	lsrs	r2, r2, #16
 8007cb6:	605a      	str	r2, [r3, #4]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8007d34 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007cc0:	4694      	mov	ip, r2
 8007cc2:	4463      	add	r3, ip
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	041a      	lsls	r2, r3, #16
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4818      	ldr	r0, [pc, #96]	@ (8007d34 <HAL_PCD_EP_DB_Transmit+0x788>)
 8007cd2:	4684      	mov	ip, r0
 8007cd4:	4463      	add	r3, ip
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6959      	ldr	r1, [r3, #20]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	895a      	ldrh	r2, [r3, #10]
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f003 fc71 	bl	800b5d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	001a      	movs	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	18d3      	adds	r3, r2, r3
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8007d38 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	2210      	movs	r2, #16
 8007d08:	4053      	eors	r3, r2
 8007d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	2220      	movs	r2, #32
 8007d10:	4053      	eors	r3, r2
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	001a      	movs	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	18d3      	adds	r3, r2, r3
 8007d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d24:	4905      	ldr	r1, [pc, #20]	@ (8007d3c <HAL_PCD_EP_DB_Transmit+0x790>)
 8007d26:	430a      	orrs	r2, r1
 8007d28:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	0018      	movs	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b00e      	add	sp, #56	@ 0x38
 8007d32:	bdb0      	pop	{r4, r5, r7, pc}
 8007d34:	40009800 	.word	0x40009800
 8007d38:	07ff8fbf 	.word	0x07ff8fbf
 8007d3c:	00008080 	.word	0x00008080

08007d40 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007d40:	b590      	push	{r4, r7, lr}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	0008      	movs	r0, r1
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	240a      	movs	r4, #10
 8007d50:	193b      	adds	r3, r7, r4
 8007d52:	1c02      	adds	r2, r0, #0
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	2308      	movs	r3, #8
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	1c0a      	adds	r2, r1, #0
 8007d5c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007d5e:	0021      	movs	r1, r4
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	2280      	movs	r2, #128	@ 0x80
 8007d66:	4013      	ands	r3, r2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d6e:	187b      	adds	r3, r7, r1
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	2207      	movs	r2, #7
 8007d74:	401a      	ands	r2, r3
 8007d76:	0013      	movs	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	189b      	adds	r3, r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	3310      	adds	r3, #16
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	18d3      	adds	r3, r2, r3
 8007d84:	3304      	adds	r3, #4
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e00c      	b.n	8007da4 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	18fb      	adds	r3, r7, r3
 8007d8e:	881a      	ldrh	r2, [r3, #0]
 8007d90:	0013      	movs	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	3351      	adds	r3, #81	@ 0x51
 8007d9a:	33ff      	adds	r3, #255	@ 0xff
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	18d3      	adds	r3, r2, r3
 8007da0:	3304      	adds	r3, #4
 8007da2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007da4:	2308      	movs	r3, #8
 8007da6:	18fb      	adds	r3, r7, r3
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d107      	bne.n	8007dbe <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	80da      	strh	r2, [r3, #6]
 8007dbc:	e00b      	b.n	8007dd6 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0c1b      	lsrs	r3, r3, #16
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	0018      	movs	r0, r3
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b007      	add	sp, #28
 8007dde:	bd90      	pop	{r4, r7, pc}

08007de0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	23b5      	movs	r3, #181	@ 0xb5
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	2101      	movs	r1, #1
 8007df6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	23b3      	movs	r3, #179	@ 0xb3
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	2100      	movs	r1, #0
 8007e00:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	2201      	movs	r2, #1
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e12:	2202      	movs	r2, #2
 8007e14:	431a      	orrs	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b004      	add	sp, #16
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007e28:	4b04      	ldr	r3, [pc, #16]	@ (8007e3c <HAL_PWREx_EnableVddUSB+0x18>)
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b03      	ldr	r3, [pc, #12]	@ (8007e3c <HAL_PWREx_EnableVddUSB+0x18>)
 8007e2e:	2180      	movs	r1, #128	@ 0x80
 8007e30:	00c9      	lsls	r1, r1, #3
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
}
 8007e36:	46c0      	nop			@ (mov r8, r8)
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40007000 	.word	0x40007000

08007e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a19      	ldr	r2, [pc, #100]	@ (8007eb4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	0019      	movs	r1, r3
 8007e52:	4b17      	ldr	r3, [pc, #92]	@ (8007eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d11f      	bne.n	8007ea4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007e64:	4b14      	ldr	r3, [pc, #80]	@ (8007eb8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	0013      	movs	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	189b      	adds	r3, r3, r2
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	4912      	ldr	r1, [pc, #72]	@ (8007ebc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007e72:	0018      	movs	r0, r3
 8007e74:	f7f8 f960 	bl	8000138 <__udivsi3>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e7e:	e008      	b.n	8007e92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e001      	b.n	8007e92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e009      	b.n	8007ea6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e92:	4b07      	ldr	r3, [pc, #28]	@ (8007eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e94:	695a      	ldr	r2, [r3, #20]
 8007e96:	2380      	movs	r3, #128	@ 0x80
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	401a      	ands	r2, r3
 8007e9c:	2380      	movs	r3, #128	@ 0x80
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d0ed      	beq.n	8007e80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	b004      	add	sp, #16
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	46c0      	nop			@ (mov r8, r8)
 8007eb0:	40007000 	.word	0x40007000
 8007eb4:	fffff9ff 	.word	0xfffff9ff
 8007eb8:	20000090 	.word	0x20000090
 8007ebc:	000f4240 	.word	0x000f4240

08007ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e2fe      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d100      	bne.n	8007ede <HAL_RCC_OscConfig+0x1e>
 8007edc:	e07c      	b.n	8007fd8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ede:	4bc3      	ldr	r3, [pc, #780]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2238      	movs	r2, #56	@ 0x38
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ee8:	4bc0      	ldr	r3, [pc, #768]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2203      	movs	r2, #3
 8007eee:	4013      	ands	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d102      	bne.n	8007efe <HAL_RCC_OscConfig+0x3e>
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d002      	beq.n	8007f04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d10b      	bne.n	8007f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f04:	4bb9      	ldr	r3, [pc, #740]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	2380      	movs	r3, #128	@ 0x80
 8007f0a:	029b      	lsls	r3, r3, #10
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d062      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x116>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d15e      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e2d9      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	025b      	lsls	r3, r3, #9
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_OscConfig+0x78>
 8007f28:	4bb0      	ldr	r3, [pc, #704]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	4baf      	ldr	r3, [pc, #700]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	0249      	lsls	r1, r1, #9
 8007f32:	430a      	orrs	r2, r1
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e020      	b.n	8007f7a <HAL_RCC_OscConfig+0xba>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	23a0      	movs	r3, #160	@ 0xa0
 8007f3e:	02db      	lsls	r3, r3, #11
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d10e      	bne.n	8007f62 <HAL_RCC_OscConfig+0xa2>
 8007f44:	4ba9      	ldr	r3, [pc, #676]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	4ba8      	ldr	r3, [pc, #672]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	02c9      	lsls	r1, r1, #11
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	4ba6      	ldr	r3, [pc, #664]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4ba5      	ldr	r3, [pc, #660]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f58:	2180      	movs	r1, #128	@ 0x80
 8007f5a:	0249      	lsls	r1, r1, #9
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e00b      	b.n	8007f7a <HAL_RCC_OscConfig+0xba>
 8007f62:	4ba2      	ldr	r3, [pc, #648]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4ba1      	ldr	r3, [pc, #644]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f68:	49a1      	ldr	r1, [pc, #644]	@ (80081f0 <HAL_RCC_OscConfig+0x330>)
 8007f6a:	400a      	ands	r2, r1
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	4b9f      	ldr	r3, [pc, #636]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b9e      	ldr	r3, [pc, #632]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007f74:	499f      	ldr	r1, [pc, #636]	@ (80081f4 <HAL_RCC_OscConfig+0x334>)
 8007f76:	400a      	ands	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f82:	f7fc fa9b 	bl	80044bc <HAL_GetTick>
 8007f86:	0003      	movs	r3, r0
 8007f88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f8c:	f7fc fa96 	bl	80044bc <HAL_GetTick>
 8007f90:	0002      	movs	r2, r0
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b64      	cmp	r3, #100	@ 0x64
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e298      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f9e:	4b93      	ldr	r3, [pc, #588]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	2380      	movs	r3, #128	@ 0x80
 8007fa4:	029b      	lsls	r3, r3, #10
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	d0f0      	beq.n	8007f8c <HAL_RCC_OscConfig+0xcc>
 8007faa:	e015      	b.n	8007fd8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fac:	f7fc fa86 	bl	80044bc <HAL_GetTick>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb6:	f7fc fa81 	bl	80044bc <HAL_GetTick>
 8007fba:	0002      	movs	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b64      	cmp	r3, #100	@ 0x64
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e283      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fc8:	4b88      	ldr	r3, [pc, #544]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	029b      	lsls	r3, r3, #10
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	d1f0      	bne.n	8007fb6 <HAL_RCC_OscConfig+0xf6>
 8007fd4:	e000      	b.n	8007fd8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d100      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x124>
 8007fe2:	e099      	b.n	8008118 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe4:	4b81      	ldr	r3, [pc, #516]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2238      	movs	r2, #56	@ 0x38
 8007fea:	4013      	ands	r3, r2
 8007fec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fee:	4b7f      	ldr	r3, [pc, #508]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	d102      	bne.n	8008004 <HAL_RCC_OscConfig+0x144>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d002      	beq.n	800800a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d135      	bne.n	8008076 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800a:	4b78      	ldr	r3, [pc, #480]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	2380      	movs	r3, #128	@ 0x80
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	4013      	ands	r3, r2
 8008014:	d005      	beq.n	8008022 <HAL_RCC_OscConfig+0x162>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e256      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008022:	4b72      	ldr	r3, [pc, #456]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4a74      	ldr	r2, [pc, #464]	@ (80081f8 <HAL_RCC_OscConfig+0x338>)
 8008028:	4013      	ands	r3, r2
 800802a:	0019      	movs	r1, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	4b6e      	ldr	r3, [pc, #440]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d112      	bne.n	8008064 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800803e:	4b6b      	ldr	r3, [pc, #428]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a6e      	ldr	r2, [pc, #440]	@ (80081fc <HAL_RCC_OscConfig+0x33c>)
 8008044:	4013      	ands	r3, r2
 8008046:	0019      	movs	r1, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	4b67      	ldr	r3, [pc, #412]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 800804e:	430a      	orrs	r2, r1
 8008050:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008052:	4b66      	ldr	r3, [pc, #408]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	0adb      	lsrs	r3, r3, #11
 8008058:	2207      	movs	r2, #7
 800805a:	4013      	ands	r3, r2
 800805c:	4a68      	ldr	r2, [pc, #416]	@ (8008200 <HAL_RCC_OscConfig+0x340>)
 800805e:	40da      	lsrs	r2, r3
 8008060:	4b68      	ldr	r3, [pc, #416]	@ (8008204 <HAL_RCC_OscConfig+0x344>)
 8008062:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008064:	4b68      	ldr	r3, [pc, #416]	@ (8008208 <HAL_RCC_OscConfig+0x348>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	0018      	movs	r0, r3
 800806a:	f7fc f9cb 	bl	8004404 <HAL_InitTick>
 800806e:	1e03      	subs	r3, r0, #0
 8008070:	d051      	beq.n	8008116 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e22c      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d030      	beq.n	80080e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800807e:	4b5b      	ldr	r3, [pc, #364]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a5e      	ldr	r2, [pc, #376]	@ (80081fc <HAL_RCC_OscConfig+0x33c>)
 8008084:	4013      	ands	r3, r2
 8008086:	0019      	movs	r1, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	4b57      	ldr	r3, [pc, #348]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 800808e:	430a      	orrs	r2, r1
 8008090:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008092:	4b56      	ldr	r3, [pc, #344]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b55      	ldr	r3, [pc, #340]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008098:	2180      	movs	r1, #128	@ 0x80
 800809a:	0049      	lsls	r1, r1, #1
 800809c:	430a      	orrs	r2, r1
 800809e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7fc fa0c 	bl	80044bc <HAL_GetTick>
 80080a4:	0003      	movs	r3, r0
 80080a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080aa:	f7fc fa07 	bl	80044bc <HAL_GetTick>
 80080ae:	0002      	movs	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e209      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080bc:	4b4b      	ldr	r3, [pc, #300]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4013      	ands	r3, r2
 80080c6:	d0f0      	beq.n	80080aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c8:	4b48      	ldr	r3, [pc, #288]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a4a      	ldr	r2, [pc, #296]	@ (80081f8 <HAL_RCC_OscConfig+0x338>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	0019      	movs	r1, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	021a      	lsls	r2, r3, #8
 80080d8:	4b44      	ldr	r3, [pc, #272]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
 80080de:	e01b      	b.n	8008118 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80080e0:	4b42      	ldr	r3, [pc, #264]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4b41      	ldr	r3, [pc, #260]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80080e6:	4949      	ldr	r1, [pc, #292]	@ (800820c <HAL_RCC_OscConfig+0x34c>)
 80080e8:	400a      	ands	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fc f9e6 	bl	80044bc <HAL_GetTick>
 80080f0:	0003      	movs	r3, r0
 80080f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080f4:	e008      	b.n	8008108 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f6:	f7fc f9e1 	bl	80044bc <HAL_GetTick>
 80080fa:	0002      	movs	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e1e3      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008108:	4b38      	ldr	r3, [pc, #224]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	2380      	movs	r3, #128	@ 0x80
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	4013      	ands	r3, r2
 8008112:	d1f0      	bne.n	80080f6 <HAL_RCC_OscConfig+0x236>
 8008114:	e000      	b.n	8008118 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008116:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2208      	movs	r2, #8
 800811e:	4013      	ands	r3, r2
 8008120:	d047      	beq.n	80081b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008122:	4b32      	ldr	r3, [pc, #200]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2238      	movs	r2, #56	@ 0x38
 8008128:	4013      	ands	r3, r2
 800812a:	2b18      	cmp	r3, #24
 800812c:	d10a      	bne.n	8008144 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800812e:	4b2f      	ldr	r3, [pc, #188]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008132:	2202      	movs	r2, #2
 8008134:	4013      	ands	r3, r2
 8008136:	d03c      	beq.n	80081b2 <HAL_RCC_OscConfig+0x2f2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d138      	bne.n	80081b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e1c5      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d019      	beq.n	8008180 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800814c:	4b27      	ldr	r3, [pc, #156]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 800814e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008150:	4b26      	ldr	r3, [pc, #152]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008152:	2101      	movs	r1, #1
 8008154:	430a      	orrs	r2, r1
 8008156:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008158:	f7fc f9b0 	bl	80044bc <HAL_GetTick>
 800815c:	0003      	movs	r3, r0
 800815e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008162:	f7fc f9ab 	bl	80044bc <HAL_GetTick>
 8008166:	0002      	movs	r2, r0
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e1ad      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008174:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008178:	2202      	movs	r2, #2
 800817a:	4013      	ands	r3, r2
 800817c:	d0f1      	beq.n	8008162 <HAL_RCC_OscConfig+0x2a2>
 800817e:	e018      	b.n	80081b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008180:	4b1a      	ldr	r3, [pc, #104]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008182:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008184:	4b19      	ldr	r3, [pc, #100]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 8008186:	2101      	movs	r1, #1
 8008188:	438a      	bics	r2, r1
 800818a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818c:	f7fc f996 	bl	80044bc <HAL_GetTick>
 8008190:	0003      	movs	r3, r0
 8008192:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008196:	f7fc f991 	bl	80044bc <HAL_GetTick>
 800819a:	0002      	movs	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e193      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081a8:	4b10      	ldr	r3, [pc, #64]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80081aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ac:	2202      	movs	r2, #2
 80081ae:	4013      	ands	r3, r2
 80081b0:	d1f1      	bne.n	8008196 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2204      	movs	r2, #4
 80081b8:	4013      	ands	r3, r2
 80081ba:	d100      	bne.n	80081be <HAL_RCC_OscConfig+0x2fe>
 80081bc:	e0c6      	b.n	800834c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081be:	231f      	movs	r3, #31
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80081c6:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2238      	movs	r2, #56	@ 0x38
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d11e      	bne.n	8008210 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80081d2:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <HAL_RCC_OscConfig+0x32c>)
 80081d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081d6:	2202      	movs	r2, #2
 80081d8:	4013      	ands	r3, r2
 80081da:	d100      	bne.n	80081de <HAL_RCC_OscConfig+0x31e>
 80081dc:	e0b6      	b.n	800834c <HAL_RCC_OscConfig+0x48c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d000      	beq.n	80081e8 <HAL_RCC_OscConfig+0x328>
 80081e6:	e0b1      	b.n	800834c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e171      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
 80081ec:	40021000 	.word	0x40021000
 80081f0:	fffeffff 	.word	0xfffeffff
 80081f4:	fffbffff 	.word	0xfffbffff
 80081f8:	ffff80ff 	.word	0xffff80ff
 80081fc:	ffffc7ff 	.word	0xffffc7ff
 8008200:	00f42400 	.word	0x00f42400
 8008204:	20000090 	.word	0x20000090
 8008208:	20000094 	.word	0x20000094
 800820c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008210:	4bb1      	ldr	r3, [pc, #708]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008214:	2380      	movs	r3, #128	@ 0x80
 8008216:	055b      	lsls	r3, r3, #21
 8008218:	4013      	ands	r3, r2
 800821a:	d101      	bne.n	8008220 <HAL_RCC_OscConfig+0x360>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <HAL_RCC_OscConfig+0x362>
 8008220:	2300      	movs	r3, #0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d011      	beq.n	800824a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008226:	4bac      	ldr	r3, [pc, #688]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800822a:	4bab      	ldr	r3, [pc, #684]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800822c:	2180      	movs	r1, #128	@ 0x80
 800822e:	0549      	lsls	r1, r1, #21
 8008230:	430a      	orrs	r2, r1
 8008232:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008234:	4ba8      	ldr	r3, [pc, #672]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008238:	2380      	movs	r3, #128	@ 0x80
 800823a:	055b      	lsls	r3, r3, #21
 800823c:	4013      	ands	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008242:	231f      	movs	r3, #31
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	2201      	movs	r2, #1
 8008248:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800824a:	4ba4      	ldr	r3, [pc, #656]	@ (80084dc <HAL_RCC_OscConfig+0x61c>)
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	2380      	movs	r3, #128	@ 0x80
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4013      	ands	r3, r2
 8008254:	d11a      	bne.n	800828c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008256:	4ba1      	ldr	r3, [pc, #644]	@ (80084dc <HAL_RCC_OscConfig+0x61c>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4ba0      	ldr	r3, [pc, #640]	@ (80084dc <HAL_RCC_OscConfig+0x61c>)
 800825c:	2180      	movs	r1, #128	@ 0x80
 800825e:	0049      	lsls	r1, r1, #1
 8008260:	430a      	orrs	r2, r1
 8008262:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008264:	f7fc f92a 	bl	80044bc <HAL_GetTick>
 8008268:	0003      	movs	r3, r0
 800826a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800826e:	f7fc f925 	bl	80044bc <HAL_GetTick>
 8008272:	0002      	movs	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e127      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008280:	4b96      	ldr	r3, [pc, #600]	@ (80084dc <HAL_RCC_OscConfig+0x61c>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	2380      	movs	r3, #128	@ 0x80
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	4013      	ands	r3, r2
 800828a:	d0f0      	beq.n	800826e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d106      	bne.n	80082a2 <HAL_RCC_OscConfig+0x3e2>
 8008294:	4b90      	ldr	r3, [pc, #576]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008296:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008298:	4b8f      	ldr	r3, [pc, #572]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800829a:	2101      	movs	r1, #1
 800829c:	430a      	orrs	r2, r1
 800829e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082a0:	e01c      	b.n	80082dc <HAL_RCC_OscConfig+0x41c>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d10c      	bne.n	80082c4 <HAL_RCC_OscConfig+0x404>
 80082aa:	4b8b      	ldr	r3, [pc, #556]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082ae:	4b8a      	ldr	r3, [pc, #552]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082b0:	2104      	movs	r1, #4
 80082b2:	430a      	orrs	r2, r1
 80082b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082b6:	4b88      	ldr	r3, [pc, #544]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082ba:	4b87      	ldr	r3, [pc, #540]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082bc:	2101      	movs	r1, #1
 80082be:	430a      	orrs	r2, r1
 80082c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082c2:	e00b      	b.n	80082dc <HAL_RCC_OscConfig+0x41c>
 80082c4:	4b84      	ldr	r3, [pc, #528]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082c8:	4b83      	ldr	r3, [pc, #524]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082ca:	2101      	movs	r1, #1
 80082cc:	438a      	bics	r2, r1
 80082ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082d0:	4b81      	ldr	r3, [pc, #516]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082d4:	4b80      	ldr	r3, [pc, #512]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80082d6:	2104      	movs	r1, #4
 80082d8:	438a      	bics	r2, r1
 80082da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d014      	beq.n	800830e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fc f8ea 	bl	80044bc <HAL_GetTick>
 80082e8:	0003      	movs	r3, r0
 80082ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ec:	e009      	b.n	8008302 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ee:	f7fc f8e5 	bl	80044bc <HAL_GetTick>
 80082f2:	0002      	movs	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	4a79      	ldr	r2, [pc, #484]	@ (80084e0 <HAL_RCC_OscConfig+0x620>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e0e6      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008302:	4b75      	ldr	r3, [pc, #468]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008306:	2202      	movs	r2, #2
 8008308:	4013      	ands	r3, r2
 800830a:	d0f0      	beq.n	80082ee <HAL_RCC_OscConfig+0x42e>
 800830c:	e013      	b.n	8008336 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830e:	f7fc f8d5 	bl	80044bc <HAL_GetTick>
 8008312:	0003      	movs	r3, r0
 8008314:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008316:	e009      	b.n	800832c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008318:	f7fc f8d0 	bl	80044bc <HAL_GetTick>
 800831c:	0002      	movs	r2, r0
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	4a6f      	ldr	r2, [pc, #444]	@ (80084e0 <HAL_RCC_OscConfig+0x620>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d901      	bls.n	800832c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e0d1      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800832c:	4b6a      	ldr	r3, [pc, #424]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800832e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008330:	2202      	movs	r2, #2
 8008332:	4013      	ands	r3, r2
 8008334:	d1f0      	bne.n	8008318 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008336:	231f      	movs	r3, #31
 8008338:	18fb      	adds	r3, r7, r3
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d105      	bne.n	800834c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008340:	4b65      	ldr	r3, [pc, #404]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008344:	4b64      	ldr	r3, [pc, #400]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008346:	4967      	ldr	r1, [pc, #412]	@ (80084e4 <HAL_RCC_OscConfig+0x624>)
 8008348:	400a      	ands	r2, r1
 800834a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d100      	bne.n	8008356 <HAL_RCC_OscConfig+0x496>
 8008354:	e0bb      	b.n	80084ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008356:	4b60      	ldr	r3, [pc, #384]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	2238      	movs	r2, #56	@ 0x38
 800835c:	4013      	ands	r3, r2
 800835e:	2b10      	cmp	r3, #16
 8008360:	d100      	bne.n	8008364 <HAL_RCC_OscConfig+0x4a4>
 8008362:	e07b      	b.n	800845c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d156      	bne.n	800841a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800836c:	4b5a      	ldr	r3, [pc, #360]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	4b59      	ldr	r3, [pc, #356]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008372:	495d      	ldr	r1, [pc, #372]	@ (80084e8 <HAL_RCC_OscConfig+0x628>)
 8008374:	400a      	ands	r2, r1
 8008376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008378:	f7fc f8a0 	bl	80044bc <HAL_GetTick>
 800837c:	0003      	movs	r3, r0
 800837e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008380:	e008      	b.n	8008394 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008382:	f7fc f89b 	bl	80044bc <HAL_GetTick>
 8008386:	0002      	movs	r2, r0
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	2b02      	cmp	r3, #2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e09d      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008394:	4b50      	ldr	r3, [pc, #320]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	2380      	movs	r3, #128	@ 0x80
 800839a:	049b      	lsls	r3, r3, #18
 800839c:	4013      	ands	r3, r2
 800839e:	d1f0      	bne.n	8008382 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083a0:	4b4d      	ldr	r3, [pc, #308]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	4a51      	ldr	r2, [pc, #324]	@ (80084ec <HAL_RCC_OscConfig+0x62c>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	0019      	movs	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1a      	ldr	r2, [r3, #32]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083cc:	431a      	orrs	r2, r3
 80083ce:	4b42      	ldr	r3, [pc, #264]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083d0:	430a      	orrs	r2, r1
 80083d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083d4:	4b40      	ldr	r3, [pc, #256]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	4b3f      	ldr	r3, [pc, #252]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083da:	2180      	movs	r1, #128	@ 0x80
 80083dc:	0449      	lsls	r1, r1, #17
 80083de:	430a      	orrs	r2, r1
 80083e0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80083e2:	4b3d      	ldr	r3, [pc, #244]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	4b3c      	ldr	r3, [pc, #240]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 80083e8:	2180      	movs	r1, #128	@ 0x80
 80083ea:	0549      	lsls	r1, r1, #21
 80083ec:	430a      	orrs	r2, r1
 80083ee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f0:	f7fc f864 	bl	80044bc <HAL_GetTick>
 80083f4:	0003      	movs	r3, r0
 80083f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083fa:	f7fc f85f 	bl	80044bc <HAL_GetTick>
 80083fe:	0002      	movs	r2, r0
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e061      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800840c:	4b32      	ldr	r3, [pc, #200]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	2380      	movs	r3, #128	@ 0x80
 8008412:	049b      	lsls	r3, r3, #18
 8008414:	4013      	ands	r3, r2
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x53a>
 8008418:	e059      	b.n	80084ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800841a:	4b2f      	ldr	r3, [pc, #188]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4b2e      	ldr	r3, [pc, #184]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008420:	4931      	ldr	r1, [pc, #196]	@ (80084e8 <HAL_RCC_OscConfig+0x628>)
 8008422:	400a      	ands	r2, r1
 8008424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fc f849 	bl	80044bc <HAL_GetTick>
 800842a:	0003      	movs	r3, r0
 800842c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008430:	f7fc f844 	bl	80044bc <HAL_GetTick>
 8008434:	0002      	movs	r2, r0
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e046      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008442:	4b25      	ldr	r3, [pc, #148]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	049b      	lsls	r3, r3, #18
 800844a:	4013      	ands	r3, r2
 800844c:	d1f0      	bne.n	8008430 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800844e:	4b22      	ldr	r3, [pc, #136]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	4b21      	ldr	r3, [pc, #132]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 8008454:	4926      	ldr	r1, [pc, #152]	@ (80084f0 <HAL_RCC_OscConfig+0x630>)
 8008456:	400a      	ands	r2, r1
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e038      	b.n	80084ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e033      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008468:	4b1b      	ldr	r3, [pc, #108]	@ (80084d8 <HAL_RCC_OscConfig+0x618>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2203      	movs	r2, #3
 8008472:	401a      	ands	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	429a      	cmp	r2, r3
 800847a:	d126      	bne.n	80084ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2270      	movs	r2, #112	@ 0x70
 8008480:	401a      	ands	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008486:	429a      	cmp	r2, r3
 8008488:	d11f      	bne.n	80084ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	23fe      	movs	r3, #254	@ 0xfe
 800848e:	01db      	lsls	r3, r3, #7
 8008490:	401a      	ands	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008496:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008498:	429a      	cmp	r2, r3
 800849a:	d116      	bne.n	80084ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	23f8      	movs	r3, #248	@ 0xf8
 80084a0:	039b      	lsls	r3, r3, #14
 80084a2:	401a      	ands	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d10e      	bne.n	80084ca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	23e0      	movs	r3, #224	@ 0xe0
 80084b0:	051b      	lsls	r3, r3, #20
 80084b2:	401a      	ands	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d106      	bne.n	80084ca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	0f5b      	lsrs	r3, r3, #29
 80084c0:	075a      	lsls	r2, r3, #29
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d001      	beq.n	80084ce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b008      	add	sp, #32
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40021000 	.word	0x40021000
 80084dc:	40007000 	.word	0x40007000
 80084e0:	00001388 	.word	0x00001388
 80084e4:	efffffff 	.word	0xefffffff
 80084e8:	feffffff 	.word	0xfeffffff
 80084ec:	11c1808c 	.word	0x11c1808c
 80084f0:	eefefffc 	.word	0xeefefffc

080084f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0e9      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008508:	4b76      	ldr	r3, [pc, #472]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2207      	movs	r2, #7
 800850e:	4013      	ands	r3, r2
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d91e      	bls.n	8008554 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008516:	4b73      	ldr	r3, [pc, #460]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2207      	movs	r2, #7
 800851c:	4393      	bics	r3, r2
 800851e:	0019      	movs	r1, r3
 8008520:	4b70      	ldr	r3, [pc, #448]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008528:	f7fb ffc8 	bl	80044bc <HAL_GetTick>
 800852c:	0003      	movs	r3, r0
 800852e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008530:	e009      	b.n	8008546 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008532:	f7fb ffc3 	bl	80044bc <HAL_GetTick>
 8008536:	0002      	movs	r2, r0
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	4a6a      	ldr	r2, [pc, #424]	@ (80086e8 <HAL_RCC_ClockConfig+0x1f4>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e0ca      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008546:	4b67      	ldr	r3, [pc, #412]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2207      	movs	r2, #7
 800854c:	4013      	ands	r3, r2
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d1ee      	bne.n	8008532 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2202      	movs	r2, #2
 800855a:	4013      	ands	r3, r2
 800855c:	d015      	beq.n	800858a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2204      	movs	r2, #4
 8008564:	4013      	ands	r3, r2
 8008566:	d006      	beq.n	8008576 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008568:	4b60      	ldr	r3, [pc, #384]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	4b5f      	ldr	r3, [pc, #380]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 800856e:	21e0      	movs	r1, #224	@ 0xe0
 8008570:	01c9      	lsls	r1, r1, #7
 8008572:	430a      	orrs	r2, r1
 8008574:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008576:	4b5d      	ldr	r3, [pc, #372]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4a5d      	ldr	r2, [pc, #372]	@ (80086f0 <HAL_RCC_ClockConfig+0x1fc>)
 800857c:	4013      	ands	r3, r2
 800857e:	0019      	movs	r1, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	4b59      	ldr	r3, [pc, #356]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2201      	movs	r2, #1
 8008590:	4013      	ands	r3, r2
 8008592:	d057      	beq.n	8008644 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d107      	bne.n	80085ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800859c:	4b53      	ldr	r3, [pc, #332]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	@ 0x80
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	4013      	ands	r3, r2
 80085a6:	d12b      	bne.n	8008600 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e097      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d107      	bne.n	80085c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085b4:	4b4d      	ldr	r3, [pc, #308]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	049b      	lsls	r3, r3, #18
 80085bc:	4013      	ands	r3, r2
 80085be:	d11f      	bne.n	8008600 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e08b      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d107      	bne.n	80085dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085cc:	4b47      	ldr	r3, [pc, #284]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4013      	ands	r3, r2
 80085d6:	d113      	bne.n	8008600 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e07f      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d106      	bne.n	80085f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085e4:	4b41      	ldr	r3, [pc, #260]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80085e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e8:	2202      	movs	r2, #2
 80085ea:	4013      	ands	r3, r2
 80085ec:	d108      	bne.n	8008600 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e074      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f2:	4b3e      	ldr	r3, [pc, #248]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80085f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085f6:	2202      	movs	r2, #2
 80085f8:	4013      	ands	r3, r2
 80085fa:	d101      	bne.n	8008600 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e06d      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008600:	4b3a      	ldr	r3, [pc, #232]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2207      	movs	r2, #7
 8008606:	4393      	bics	r3, r2
 8008608:	0019      	movs	r1, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b37      	ldr	r3, [pc, #220]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 8008610:	430a      	orrs	r2, r1
 8008612:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008614:	f7fb ff52 	bl	80044bc <HAL_GetTick>
 8008618:	0003      	movs	r3, r0
 800861a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861c:	e009      	b.n	8008632 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861e:	f7fb ff4d 	bl	80044bc <HAL_GetTick>
 8008622:	0002      	movs	r2, r0
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	4a2f      	ldr	r2, [pc, #188]	@ (80086e8 <HAL_RCC_ClockConfig+0x1f4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e054      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008632:	4b2e      	ldr	r3, [pc, #184]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	2238      	movs	r2, #56	@ 0x38
 8008638:	401a      	ands	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	429a      	cmp	r2, r3
 8008642:	d1ec      	bne.n	800861e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008644:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2207      	movs	r2, #7
 800864a:	4013      	ands	r3, r2
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d21e      	bcs.n	8008690 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008652:	4b24      	ldr	r3, [pc, #144]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2207      	movs	r2, #7
 8008658:	4393      	bics	r3, r2
 800865a:	0019      	movs	r1, r3
 800865c:	4b21      	ldr	r3, [pc, #132]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008664:	f7fb ff2a 	bl	80044bc <HAL_GetTick>
 8008668:	0003      	movs	r3, r0
 800866a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800866c:	e009      	b.n	8008682 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800866e:	f7fb ff25 	bl	80044bc <HAL_GetTick>
 8008672:	0002      	movs	r2, r0
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	4a1b      	ldr	r2, [pc, #108]	@ (80086e8 <HAL_RCC_ClockConfig+0x1f4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e02c      	b.n	80086dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008682:	4b18      	ldr	r3, [pc, #96]	@ (80086e4 <HAL_RCC_ClockConfig+0x1f0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2207      	movs	r2, #7
 8008688:	4013      	ands	r3, r2
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d1ee      	bne.n	800866e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2204      	movs	r2, #4
 8008696:	4013      	ands	r3, r2
 8008698:	d009      	beq.n	80086ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800869a:	4b14      	ldr	r3, [pc, #80]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	4a15      	ldr	r2, [pc, #84]	@ (80086f4 <HAL_RCC_ClockConfig+0x200>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	0019      	movs	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	4b10      	ldr	r3, [pc, #64]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80086aa:	430a      	orrs	r2, r1
 80086ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80086ae:	f000 f829 	bl	8008704 <HAL_RCC_GetSysClockFreq>
 80086b2:	0001      	movs	r1, r0
 80086b4:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <HAL_RCC_ClockConfig+0x1f8>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	0a1b      	lsrs	r3, r3, #8
 80086ba:	220f      	movs	r2, #15
 80086bc:	401a      	ands	r2, r3
 80086be:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <HAL_RCC_ClockConfig+0x204>)
 80086c0:	0092      	lsls	r2, r2, #2
 80086c2:	58d3      	ldr	r3, [r2, r3]
 80086c4:	221f      	movs	r2, #31
 80086c6:	4013      	ands	r3, r2
 80086c8:	000a      	movs	r2, r1
 80086ca:	40da      	lsrs	r2, r3
 80086cc:	4b0b      	ldr	r3, [pc, #44]	@ (80086fc <HAL_RCC_ClockConfig+0x208>)
 80086ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80086d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008700 <HAL_RCC_ClockConfig+0x20c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	0018      	movs	r0, r3
 80086d6:	f7fb fe95 	bl	8004404 <HAL_InitTick>
 80086da:	0003      	movs	r3, r0
}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40022000 	.word	0x40022000
 80086e8:	00001388 	.word	0x00001388
 80086ec:	40021000 	.word	0x40021000
 80086f0:	fffff0ff 	.word	0xfffff0ff
 80086f4:	ffff8fff 	.word	0xffff8fff
 80086f8:	08012c30 	.word	0x08012c30
 80086fc:	20000090 	.word	0x20000090
 8008700:	20000094 	.word	0x20000094

08008704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800870a:	4b3c      	ldr	r3, [pc, #240]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2238      	movs	r2, #56	@ 0x38
 8008710:	4013      	ands	r3, r2
 8008712:	d10f      	bne.n	8008734 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008714:	4b39      	ldr	r3, [pc, #228]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	0adb      	lsrs	r3, r3, #11
 800871a:	2207      	movs	r2, #7
 800871c:	4013      	ands	r3, r2
 800871e:	2201      	movs	r2, #1
 8008720:	409a      	lsls	r2, r3
 8008722:	0013      	movs	r3, r2
 8008724:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	4835      	ldr	r0, [pc, #212]	@ (8008800 <HAL_RCC_GetSysClockFreq+0xfc>)
 800872a:	f7f7 fd05 	bl	8000138 <__udivsi3>
 800872e:	0003      	movs	r3, r0
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e05d      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008734:	4b31      	ldr	r3, [pc, #196]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	2238      	movs	r2, #56	@ 0x38
 800873a:	4013      	ands	r3, r2
 800873c:	2b08      	cmp	r3, #8
 800873e:	d102      	bne.n	8008746 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008740:	4b30      	ldr	r3, [pc, #192]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x100>)
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	e054      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008746:	4b2d      	ldr	r3, [pc, #180]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2238      	movs	r2, #56	@ 0x38
 800874c:	4013      	ands	r3, r2
 800874e:	2b10      	cmp	r3, #16
 8008750:	d138      	bne.n	80087c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008752:	4b2a      	ldr	r3, [pc, #168]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	2203      	movs	r2, #3
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800875c:	4b27      	ldr	r3, [pc, #156]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	2207      	movs	r2, #7
 8008764:	4013      	ands	r3, r2
 8008766:	3301      	adds	r3, #1
 8008768:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d10d      	bne.n	800878c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	4824      	ldr	r0, [pc, #144]	@ (8008804 <HAL_RCC_GetSysClockFreq+0x100>)
 8008774:	f7f7 fce0 	bl	8000138 <__udivsi3>
 8008778:	0003      	movs	r3, r0
 800877a:	0019      	movs	r1, r3
 800877c:	4b1f      	ldr	r3, [pc, #124]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	0a1b      	lsrs	r3, r3, #8
 8008782:	227f      	movs	r2, #127	@ 0x7f
 8008784:	4013      	ands	r3, r2
 8008786:	434b      	muls	r3, r1
 8008788:	617b      	str	r3, [r7, #20]
        break;
 800878a:	e00d      	b.n	80087a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	481c      	ldr	r0, [pc, #112]	@ (8008800 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008790:	f7f7 fcd2 	bl	8000138 <__udivsi3>
 8008794:	0003      	movs	r3, r0
 8008796:	0019      	movs	r1, r3
 8008798:	4b18      	ldr	r3, [pc, #96]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	227f      	movs	r2, #127	@ 0x7f
 80087a0:	4013      	ands	r3, r2
 80087a2:	434b      	muls	r3, r1
 80087a4:	617b      	str	r3, [r7, #20]
        break;
 80087a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	0f5b      	lsrs	r3, r3, #29
 80087ae:	2207      	movs	r2, #7
 80087b0:	4013      	ands	r3, r2
 80087b2:	3301      	adds	r3, #1
 80087b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	6978      	ldr	r0, [r7, #20]
 80087ba:	f7f7 fcbd 	bl	8000138 <__udivsi3>
 80087be:	0003      	movs	r3, r0
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	e015      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80087c4:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2238      	movs	r2, #56	@ 0x38
 80087ca:	4013      	ands	r3, r2
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d103      	bne.n	80087d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80087d0:	2380      	movs	r3, #128	@ 0x80
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	e00b      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80087d8:	4b08      	ldr	r3, [pc, #32]	@ (80087fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2238      	movs	r2, #56	@ 0x38
 80087de:	4013      	ands	r3, r2
 80087e0:	2b18      	cmp	r3, #24
 80087e2:	d103      	bne.n	80087ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80087e4:	23fa      	movs	r3, #250	@ 0xfa
 80087e6:	01db      	lsls	r3, r3, #7
 80087e8:	613b      	str	r3, [r7, #16]
 80087ea:	e001      	b.n	80087f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087f0:	693b      	ldr	r3, [r7, #16]
}
 80087f2:	0018      	movs	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	b006      	add	sp, #24
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	46c0      	nop			@ (mov r8, r8)
 80087fc:	40021000 	.word	0x40021000
 8008800:	00f42400 	.word	0x00f42400
 8008804:	007a1200 	.word	0x007a1200

08008808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008810:	2313      	movs	r3, #19
 8008812:	18fb      	adds	r3, r7, r3
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008818:	2312      	movs	r3, #18
 800881a:	18fb      	adds	r3, r7, r3
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	2380      	movs	r3, #128	@ 0x80
 8008826:	029b      	lsls	r3, r3, #10
 8008828:	4013      	ands	r3, r2
 800882a:	d100      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800882c:	e0a3      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800882e:	2011      	movs	r0, #17
 8008830:	183b      	adds	r3, r7, r0
 8008832:	2200      	movs	r2, #0
 8008834:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008836:	4bb0      	ldr	r3, [pc, #704]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800883a:	2380      	movs	r3, #128	@ 0x80
 800883c:	055b      	lsls	r3, r3, #21
 800883e:	4013      	ands	r3, r2
 8008840:	d110      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008842:	4bad      	ldr	r3, [pc, #692]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008846:	4bac      	ldr	r3, [pc, #688]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008848:	2180      	movs	r1, #128	@ 0x80
 800884a:	0549      	lsls	r1, r1, #21
 800884c:	430a      	orrs	r2, r1
 800884e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008850:	4ba9      	ldr	r3, [pc, #676]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008854:	2380      	movs	r3, #128	@ 0x80
 8008856:	055b      	lsls	r3, r3, #21
 8008858:	4013      	ands	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]
 800885c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800885e:	183b      	adds	r3, r7, r0
 8008860:	2201      	movs	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008864:	4ba5      	ldr	r3, [pc, #660]	@ (8008afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4ba4      	ldr	r3, [pc, #656]	@ (8008afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800886a:	2180      	movs	r1, #128	@ 0x80
 800886c:	0049      	lsls	r1, r1, #1
 800886e:	430a      	orrs	r2, r1
 8008870:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008872:	f7fb fe23 	bl	80044bc <HAL_GetTick>
 8008876:	0003      	movs	r3, r0
 8008878:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800887a:	e00b      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800887c:	f7fb fe1e 	bl	80044bc <HAL_GetTick>
 8008880:	0002      	movs	r2, r0
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d904      	bls.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800888a:	2313      	movs	r3, #19
 800888c:	18fb      	adds	r3, r7, r3
 800888e:	2203      	movs	r2, #3
 8008890:	701a      	strb	r2, [r3, #0]
        break;
 8008892:	e005      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008894:	4b99      	ldr	r3, [pc, #612]	@ (8008afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	2380      	movs	r3, #128	@ 0x80
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	4013      	ands	r3, r2
 800889e:	d0ed      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80088a0:	2313      	movs	r3, #19
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d154      	bne.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088aa:	4b93      	ldr	r3, [pc, #588]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088ae:	23c0      	movs	r3, #192	@ 0xc0
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4013      	ands	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d019      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d014      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088c6:	4b8c      	ldr	r3, [pc, #560]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ca:	4a8d      	ldr	r2, [pc, #564]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088d0:	4b89      	ldr	r3, [pc, #548]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088d4:	4b88      	ldr	r3, [pc, #544]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088d6:	2180      	movs	r1, #128	@ 0x80
 80088d8:	0249      	lsls	r1, r1, #9
 80088da:	430a      	orrs	r2, r1
 80088dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088de:	4b86      	ldr	r3, [pc, #536]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088e2:	4b85      	ldr	r3, [pc, #532]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088e4:	4987      	ldr	r1, [pc, #540]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80088e6:	400a      	ands	r2, r1
 80088e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088ea:	4b83      	ldr	r3, [pc, #524]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2201      	movs	r2, #1
 80088f4:	4013      	ands	r3, r2
 80088f6:	d016      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f8:	f7fb fde0 	bl	80044bc <HAL_GetTick>
 80088fc:	0003      	movs	r3, r0
 80088fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008900:	e00c      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008902:	f7fb fddb 	bl	80044bc <HAL_GetTick>
 8008906:	0002      	movs	r2, r0
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	4a7e      	ldr	r2, [pc, #504]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d904      	bls.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008912:	2313      	movs	r3, #19
 8008914:	18fb      	adds	r3, r7, r3
 8008916:	2203      	movs	r2, #3
 8008918:	701a      	strb	r2, [r3, #0]
            break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800891c:	4b76      	ldr	r3, [pc, #472]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800891e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008920:	2202      	movs	r2, #2
 8008922:	4013      	ands	r3, r2
 8008924:	d0ed      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008926:	2313      	movs	r3, #19
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008930:	4b71      	ldr	r3, [pc, #452]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008934:	4a72      	ldr	r2, [pc, #456]	@ (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008936:	4013      	ands	r3, r2
 8008938:	0019      	movs	r1, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800893e:	4b6e      	ldr	r3, [pc, #440]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008940:	430a      	orrs	r2, r1
 8008942:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008944:	e00c      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008946:	2312      	movs	r3, #18
 8008948:	18fb      	adds	r3, r7, r3
 800894a:	2213      	movs	r2, #19
 800894c:	18ba      	adds	r2, r7, r2
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e005      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008954:	2312      	movs	r3, #18
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	2213      	movs	r2, #19
 800895a:	18ba      	adds	r2, r7, r2
 800895c:	7812      	ldrb	r2, [r2, #0]
 800895e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008960:	2311      	movs	r3, #17
 8008962:	18fb      	adds	r3, r7, r3
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d105      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800896a:	4b63      	ldr	r3, [pc, #396]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800896c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800896e:	4b62      	ldr	r3, [pc, #392]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008970:	4966      	ldr	r1, [pc, #408]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008972:	400a      	ands	r2, r1
 8008974:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2201      	movs	r2, #1
 800897c:	4013      	ands	r3, r2
 800897e:	d009      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008980:	4b5d      	ldr	r3, [pc, #372]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008984:	2203      	movs	r2, #3
 8008986:	4393      	bics	r3, r2
 8008988:	0019      	movs	r1, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	4b5a      	ldr	r3, [pc, #360]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008990:	430a      	orrs	r2, r1
 8008992:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2202      	movs	r2, #2
 800899a:	4013      	ands	r3, r2
 800899c:	d009      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800899e:	4b56      	ldr	r3, [pc, #344]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a2:	220c      	movs	r2, #12
 80089a4:	4393      	bics	r3, r2
 80089a6:	0019      	movs	r1, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	4b52      	ldr	r3, [pc, #328]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089ae:	430a      	orrs	r2, r1
 80089b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2204      	movs	r2, #4
 80089b8:	4013      	ands	r3, r2
 80089ba:	d009      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089bc:	4b4e      	ldr	r3, [pc, #312]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c0:	2230      	movs	r2, #48	@ 0x30
 80089c2:	4393      	bics	r3, r2
 80089c4:	0019      	movs	r1, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	4b4b      	ldr	r3, [pc, #300]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089cc:	430a      	orrs	r2, r1
 80089ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2220      	movs	r2, #32
 80089d6:	4013      	ands	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089da:	4b47      	ldr	r3, [pc, #284]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089de:	4a4c      	ldr	r2, [pc, #304]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	0019      	movs	r1, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	4b43      	ldr	r3, [pc, #268]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089ea:	430a      	orrs	r2, r1
 80089ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2240      	movs	r2, #64	@ 0x40
 80089f4:	4013      	ands	r3, r2
 80089f6:	d009      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80089f8:	4b3f      	ldr	r3, [pc, #252]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80089fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fc:	4a45      	ldr	r2, [pc, #276]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	0019      	movs	r1, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	695a      	ldr	r2, [r3, #20]
 8008a06:	4b3c      	ldr	r3, [pc, #240]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	2380      	movs	r3, #128	@ 0x80
 8008a12:	01db      	lsls	r3, r3, #7
 8008a14:	4013      	ands	r3, r2
 8008a16:	d015      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a18:	4b37      	ldr	r3, [pc, #220]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	0899      	lsrs	r1, r3, #2
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1a      	ldr	r2, [r3, #32]
 8008a24:	4b34      	ldr	r3, [pc, #208]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a26:	430a      	orrs	r2, r1
 8008a28:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1a      	ldr	r2, [r3, #32]
 8008a2e:	2380      	movs	r3, #128	@ 0x80
 8008a30:	05db      	lsls	r3, r3, #23
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d106      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a36:	4b30      	ldr	r3, [pc, #192]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a3c:	2180      	movs	r1, #128	@ 0x80
 8008a3e:	0249      	lsls	r1, r1, #9
 8008a40:	430a      	orrs	r2, r1
 8008a42:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	2380      	movs	r3, #128	@ 0x80
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d014      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008a50:	4b29      	ldr	r3, [pc, #164]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a54:	2203      	movs	r2, #3
 8008a56:	4393      	bics	r3, r2
 8008a58:	0019      	movs	r1, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	4b26      	ldr	r3, [pc, #152]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a60:	430a      	orrs	r2, r1
 8008a62:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a6c:	4b22      	ldr	r3, [pc, #136]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a72:	2180      	movs	r1, #128	@ 0x80
 8008a74:	0249      	lsls	r1, r1, #9
 8008a76:	430a      	orrs	r2, r1
 8008a78:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	2380      	movs	r3, #128	@ 0x80
 8008a80:	019b      	lsls	r3, r3, #6
 8008a82:	4013      	ands	r3, r2
 8008a84:	d014      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008a86:	4b1c      	ldr	r3, [pc, #112]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8a:	220c      	movs	r2, #12
 8008a8c:	4393      	bics	r3, r2
 8008a8e:	0019      	movs	r1, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	4b18      	ldr	r3, [pc, #96]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008a96:	430a      	orrs	r2, r1
 8008a98:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d106      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008aa2:	4b15      	ldr	r3, [pc, #84]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008aa8:	2180      	movs	r1, #128	@ 0x80
 8008aaa:	0249      	lsls	r1, r1, #9
 8008aac:	430a      	orrs	r2, r1
 8008aae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	2380      	movs	r3, #128	@ 0x80
 8008ab6:	045b      	lsls	r3, r3, #17
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d016      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008abc:	4b0e      	ldr	r3, [pc, #56]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac0:	4a13      	ldr	r2, [pc, #76]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aca:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008acc:	430a      	orrs	r2, r1
 8008ace:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	019b      	lsls	r3, r3, #6
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	4b05      	ldr	r3, [pc, #20]	@ (8008af8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	0449      	lsls	r1, r1, #17
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008aea:	2312      	movs	r3, #18
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	781b      	ldrb	r3, [r3, #0]
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b006      	add	sp, #24
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40021000 	.word	0x40021000
 8008afc:	40007000 	.word	0x40007000
 8008b00:	fffffcff 	.word	0xfffffcff
 8008b04:	fffeffff 	.word	0xfffeffff
 8008b08:	00001388 	.word	0x00001388
 8008b0c:	efffffff 	.word	0xefffffff
 8008b10:	ffffcfff 	.word	0xffffcfff
 8008b14:	ffff3fff 	.word	0xffff3fff

08008b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e0a8      	b.n	8008c7c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d109      	bne.n	8008b46 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	2382      	movs	r3, #130	@ 0x82
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d009      	beq.n	8008b52 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	61da      	str	r2, [r3, #28]
 8008b44:	e005      	b.n	8008b52 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	225d      	movs	r2, #93	@ 0x5d
 8008b5c:	5c9b      	ldrb	r3, [r3, r2]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d107      	bne.n	8008b74 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	225c      	movs	r2, #92	@ 0x5c
 8008b68:	2100      	movs	r1, #0
 8008b6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f7fb f902 	bl	8003d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	225d      	movs	r2, #93	@ 0x5d
 8008b78:	2102      	movs	r1, #2
 8008b7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2140      	movs	r1, #64	@ 0x40
 8008b88:	438a      	bics	r2, r1
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	23e0      	movs	r3, #224	@ 0xe0
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d902      	bls.n	8008b9e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e002      	b.n	8008ba4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b9e:	2380      	movs	r3, #128	@ 0x80
 8008ba0:	015b      	lsls	r3, r3, #5
 8008ba2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	23f0      	movs	r3, #240	@ 0xf0
 8008baa:	011b      	lsls	r3, r3, #4
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d008      	beq.n	8008bc2 <HAL_SPI_Init+0xaa>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	23e0      	movs	r3, #224	@ 0xe0
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d002      	beq.n	8008bc2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	2382      	movs	r3, #130	@ 0x82
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	401a      	ands	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6899      	ldr	r1, [r3, #8]
 8008bd0:	2384      	movs	r3, #132	@ 0x84
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	400b      	ands	r3, r1
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	2102      	movs	r1, #2
 8008bde:	400b      	ands	r3, r1
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	2101      	movs	r1, #1
 8008be8:	400b      	ands	r3, r1
 8008bea:	431a      	orrs	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6999      	ldr	r1, [r3, #24]
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	400b      	ands	r3, r1
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	2138      	movs	r1, #56	@ 0x38
 8008bfe:	400b      	ands	r3, r1
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	2180      	movs	r1, #128	@ 0x80
 8008c08:	400b      	ands	r3, r1
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	0011      	movs	r1, r2
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c12:	2380      	movs	r3, #128	@ 0x80
 8008c14:	019b      	lsls	r3, r3, #6
 8008c16:	401a      	ands	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	2204      	movs	r2, #4
 8008c28:	401a      	ands	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2e:	2110      	movs	r1, #16
 8008c30:	400b      	ands	r3, r1
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c38:	2108      	movs	r1, #8
 8008c3a:	400b      	ands	r3, r1
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68d9      	ldr	r1, [r3, #12]
 8008c42:	23f0      	movs	r3, #240	@ 0xf0
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	400b      	ands	r3, r1
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	2380      	movs	r3, #128	@ 0x80
 8008c50:	015b      	lsls	r3, r3, #5
 8008c52:	401a      	ands	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69da      	ldr	r2, [r3, #28]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4907      	ldr	r1, [pc, #28]	@ (8008c84 <HAL_SPI_Init+0x16c>)
 8008c68:	400a      	ands	r2, r1
 8008c6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	225d      	movs	r2, #93	@ 0x5d
 8008c76:	2101      	movs	r1, #1
 8008c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b004      	add	sp, #16
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	fffff7ff 	.word	0xfffff7ff

08008c88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	@ 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
 8008c94:	001a      	movs	r2, r3
 8008c96:	1cbb      	adds	r3, r7, #2
 8008c98:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c9e:	2323      	movs	r3, #35	@ 0x23
 8008ca0:	18fb      	adds	r3, r7, r3
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	225c      	movs	r2, #92	@ 0x5c
 8008caa:	5c9b      	ldrb	r3, [r3, r2]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_SPI_TransmitReceive+0x2c>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e1c4      	b.n	800903e <HAL_SPI_TransmitReceive+0x3b6>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	225c      	movs	r2, #92	@ 0x5c
 8008cb8:	2101      	movs	r1, #1
 8008cba:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cbc:	f7fb fbfe 	bl	80044bc <HAL_GetTick>
 8008cc0:	0003      	movs	r3, r0
 8008cc2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cc4:	201b      	movs	r0, #27
 8008cc6:	183b      	adds	r3, r7, r0
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	215d      	movs	r1, #93	@ 0x5d
 8008ccc:	5c52      	ldrb	r2, [r2, r1]
 8008cce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008cd6:	2312      	movs	r3, #18
 8008cd8:	18fb      	adds	r3, r7, r3
 8008cda:	1cba      	adds	r2, r7, #2
 8008cdc:	8812      	ldrh	r2, [r2, #0]
 8008cde:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ce0:	183b      	adds	r3, r7, r0
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d011      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x84>
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	2382      	movs	r3, #130	@ 0x82
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d107      	bne.n	8008d02 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <HAL_SPI_TransmitReceive+0x7a>
 8008cfa:	183b      	adds	r3, r7, r0
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d004      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008d02:	2323      	movs	r3, #35	@ 0x23
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	2202      	movs	r2, #2
 8008d08:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d0a:	e191      	b.n	8009030 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d006      	beq.n	8008d20 <HAL_SPI_TransmitReceive+0x98>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <HAL_SPI_TransmitReceive+0x98>
 8008d18:	1cbb      	adds	r3, r7, #2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008d20:	2323      	movs	r3, #35	@ 0x23
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]
    goto error;
 8008d28:	e182      	b.n	8009030 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	225d      	movs	r2, #93	@ 0x5d
 8008d2e:	5c9b      	ldrb	r3, [r3, r2]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d003      	beq.n	8008d3e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	225d      	movs	r2, #93	@ 0x5d
 8008d3a:	2105      	movs	r1, #5
 8008d3c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	1cba      	adds	r2, r7, #2
 8008d4e:	2146      	movs	r1, #70	@ 0x46
 8008d50:	8812      	ldrh	r2, [r2, #0]
 8008d52:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1cba      	adds	r2, r7, #2
 8008d58:	2144      	movs	r1, #68	@ 0x44
 8008d5a:	8812      	ldrh	r2, [r2, #0]
 8008d5c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	1cba      	adds	r2, r7, #2
 8008d68:	8812      	ldrh	r2, [r2, #0]
 8008d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	1cba      	adds	r2, r7, #2
 8008d70:	8812      	ldrh	r2, [r2, #0]
 8008d72:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	23e0      	movs	r3, #224	@ 0xe0
 8008d86:	00db      	lsls	r3, r3, #3
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d908      	bls.n	8008d9e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	49ac      	ldr	r1, [pc, #688]	@ (8009048 <HAL_SPI_TransmitReceive+0x3c0>)
 8008d98:	400a      	ands	r2, r1
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	e008      	b.n	8008db0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2180      	movs	r1, #128	@ 0x80
 8008daa:	0149      	lsls	r1, r1, #5
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2240      	movs	r2, #64	@ 0x40
 8008db8:	4013      	ands	r3, r2
 8008dba:	2b40      	cmp	r3, #64	@ 0x40
 8008dbc:	d007      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2140      	movs	r1, #64	@ 0x40
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	23e0      	movs	r3, #224	@ 0xe0
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d800      	bhi.n	8008ddc <HAL_SPI_TransmitReceive+0x154>
 8008dda:	e083      	b.n	8008ee4 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <HAL_SPI_TransmitReceive+0x168>
 8008de4:	2312      	movs	r3, #18
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d000      	beq.n	8008df0 <HAL_SPI_TransmitReceive+0x168>
 8008dee:	e06d      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df4:	881a      	ldrh	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e00:	1c9a      	adds	r2, r3, #2
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e14:	e05a      	b.n	8008ecc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d11b      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x1d4>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d016      	beq.n	8008e5c <HAL_SPI_TransmitReceive+0x1d4>
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d113      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e38:	881a      	ldrh	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e44:	1c9a      	adds	r2, r3, #2
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2201      	movs	r2, #1
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d11c      	bne.n	8008ea4 <HAL_SPI_TransmitReceive+0x21c>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2246      	movs	r2, #70	@ 0x46
 8008e6e:	5a9b      	ldrh	r3, [r3, r2]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e80:	b292      	uxth	r2, r2
 8008e82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e88:	1c9a      	adds	r2, r3, #2
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2246      	movs	r2, #70	@ 0x46
 8008e92:	5a9b      	ldrh	r3, [r3, r2]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b299      	uxth	r1, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2246      	movs	r2, #70	@ 0x46
 8008e9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ea4:	f7fb fb0a 	bl	80044bc <HAL_GetTick>
 8008ea8:	0002      	movs	r2, r0
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d80b      	bhi.n	8008ecc <HAL_SPI_TransmitReceive+0x244>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	d008      	beq.n	8008ecc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8008eba:	2323      	movs	r3, #35	@ 0x23
 8008ebc:	18fb      	adds	r3, r7, r3
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	225d      	movs	r2, #93	@ 0x5d
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	5499      	strb	r1, [r3, r2]
        goto error;
 8008eca:	e0b1      	b.n	8009030 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d19f      	bne.n	8008e16 <HAL_SPI_TransmitReceive+0x18e>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2246      	movs	r2, #70	@ 0x46
 8008eda:	5a9b      	ldrh	r3, [r3, r2]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d199      	bne.n	8008e16 <HAL_SPI_TransmitReceive+0x18e>
 8008ee2:	e089      	b.n	8008ff8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x270>
 8008eec:	2312      	movs	r3, #18
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d000      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x270>
 8008ef6:	e074      	b.n	8008fe2 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f1e:	e060      	b.n	8008fe2 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	2202      	movs	r2, #2
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d11c      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x2e0>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d017      	beq.n	8008f68 <HAL_SPI_TransmitReceive+0x2e0>
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d114      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	330c      	adds	r3, #12
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d11e      	bne.n	8008fb4 <HAL_SPI_TransmitReceive+0x32c>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2246      	movs	r2, #70	@ 0x46
 8008f7a:	5a9b      	ldrh	r3, [r3, r2]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d018      	beq.n	8008fb4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	001a      	movs	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2246      	movs	r2, #70	@ 0x46
 8008fa2:	5a9b      	ldrh	r3, [r3, r2]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b299      	uxth	r1, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2246      	movs	r2, #70	@ 0x46
 8008fae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fb4:	f7fb fa82 	bl	80044bc <HAL_GetTick>
 8008fb8:	0002      	movs	r2, r0
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d802      	bhi.n	8008fca <HAL_SPI_TransmitReceive+0x342>
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x348>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d108      	bne.n	8008fe2 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8008fd0:	2323      	movs	r3, #35	@ 0x23
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	225d      	movs	r2, #93	@ 0x5d
 8008fdc:	2101      	movs	r1, #1
 8008fde:	5499      	strb	r1, [r3, r2]
        goto error;
 8008fe0:	e026      	b.n	8009030 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d199      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x298>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2246      	movs	r2, #70	@ 0x46
 8008ff0:	5a9b      	ldrh	r3, [r3, r2]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d193      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	0018      	movs	r0, r3
 8009000:	f000 f954 	bl	80092ac <SPI_EndRxTxTransaction>
 8009004:	1e03      	subs	r3, r0, #0
 8009006:	d006      	beq.n	8009016 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009008:	2323      	movs	r3, #35	@ 0x23
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	2201      	movs	r2, #1
 800900e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2220      	movs	r2, #32
 8009014:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800901e:	2323      	movs	r3, #35	@ 0x23
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	2201      	movs	r2, #1
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	e003      	b.n	8009030 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	225d      	movs	r2, #93	@ 0x5d
 800902c:	2101      	movs	r1, #1
 800902e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	225c      	movs	r2, #92	@ 0x5c
 8009034:	2100      	movs	r1, #0
 8009036:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009038:	2323      	movs	r3, #35	@ 0x23
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	781b      	ldrb	r3, [r3, #0]
}
 800903e:	0018      	movs	r0, r3
 8009040:	46bd      	mov	sp, r7
 8009042:	b00a      	add	sp, #40	@ 0x28
 8009044:	bd80      	pop	{r7, pc}
 8009046:	46c0      	nop			@ (mov r8, r8)
 8009048:	ffffefff 	.word	0xffffefff

0800904c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	1dfb      	adds	r3, r7, #7
 800905a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800905c:	f7fb fa2e 	bl	80044bc <HAL_GetTick>
 8009060:	0002      	movs	r2, r0
 8009062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800906c:	f7fb fa26 	bl	80044bc <HAL_GetTick>
 8009070:	0003      	movs	r3, r0
 8009072:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009074:	4b3a      	ldr	r3, [pc, #232]	@ (8009160 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	015b      	lsls	r3, r3, #5
 800907a:	0d1b      	lsrs	r3, r3, #20
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	4353      	muls	r3, r2
 8009080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009082:	e058      	b.n	8009136 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	d055      	beq.n	8009136 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800908a:	f7fb fa17 	bl	80044bc <HAL_GetTick>
 800908e:	0002      	movs	r2, r0
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	429a      	cmp	r2, r3
 8009098:	d902      	bls.n	80090a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d142      	bne.n	8009126 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	21e0      	movs	r1, #224	@ 0xe0
 80090ac:	438a      	bics	r2, r1
 80090ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	2382      	movs	r3, #130	@ 0x82
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d113      	bne.n	80090e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689a      	ldr	r2, [r3, #8]
 80090c0:	2380      	movs	r3, #128	@ 0x80
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d005      	beq.n	80090d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689a      	ldr	r2, [r3, #8]
 80090cc:	2380      	movs	r3, #128	@ 0x80
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d107      	bne.n	80090e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2140      	movs	r1, #64	@ 0x40
 80090e0:	438a      	bics	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090e8:	2380      	movs	r3, #128	@ 0x80
 80090ea:	019b      	lsls	r3, r3, #6
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d110      	bne.n	8009112 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	491a      	ldr	r1, [pc, #104]	@ (8009164 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80090fc:	400a      	ands	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2180      	movs	r1, #128	@ 0x80
 800910c:	0189      	lsls	r1, r1, #6
 800910e:	430a      	orrs	r2, r1
 8009110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	225d      	movs	r2, #93	@ 0x5d
 8009116:	2101      	movs	r1, #1
 8009118:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	225c      	movs	r2, #92	@ 0x5c
 800911e:	2100      	movs	r1, #0
 8009120:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e017      	b.n	8009156 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	3b01      	subs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	4013      	ands	r3, r2
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	425a      	negs	r2, r3
 8009146:	4153      	adcs	r3, r2
 8009148:	b2db      	uxtb	r3, r3
 800914a:	001a      	movs	r2, r3
 800914c:	1dfb      	adds	r3, r7, #7
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d197      	bne.n	8009084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	0018      	movs	r0, r3
 8009158:	46bd      	mov	sp, r7
 800915a:	b008      	add	sp, #32
 800915c:	bd80      	pop	{r7, pc}
 800915e:	46c0      	nop			@ (mov r8, r8)
 8009160:	20000090 	.word	0x20000090
 8009164:	ffffdfff 	.word	0xffffdfff

08009168 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	@ 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
 8009174:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009176:	2317      	movs	r3, #23
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800917e:	f7fb f99d 	bl	80044bc <HAL_GetTick>
 8009182:	0002      	movs	r2, r0
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	18d3      	adds	r3, r2, r3
 800918c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800918e:	f7fb f995 	bl	80044bc <HAL_GetTick>
 8009192:	0003      	movs	r3, r0
 8009194:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800919e:	4b41      	ldr	r3, [pc, #260]	@ (80092a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	0013      	movs	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	189b      	adds	r3, r3, r2
 80091a8:	00da      	lsls	r2, r3, #3
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	0d1b      	lsrs	r3, r3, #20
 80091ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b0:	4353      	muls	r3, r2
 80091b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80091b4:	e068      	b.n	8009288 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	23c0      	movs	r3, #192	@ 0xc0
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	429a      	cmp	r2, r3
 80091be:	d10a      	bne.n	80091d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d107      	bne.n	80091d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	2117      	movs	r1, #23
 80091ce:	187b      	adds	r3, r7, r1
 80091d0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80091d2:	187b      	adds	r3, r7, r1
 80091d4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	d055      	beq.n	8009288 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091dc:	f7fb f96e 	bl	80044bc <HAL_GetTick>
 80091e0:	0002      	movs	r2, r0
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d902      	bls.n	80091f2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80091ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d142      	bne.n	8009278 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	21e0      	movs	r1, #224	@ 0xe0
 80091fe:	438a      	bics	r2, r1
 8009200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	2382      	movs	r3, #130	@ 0x82
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d113      	bne.n	8009236 <SPI_WaitFifoStateUntilTimeout+0xce>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	689a      	ldr	r2, [r3, #8]
 8009212:	2380      	movs	r3, #128	@ 0x80
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	429a      	cmp	r2, r3
 8009218:	d005      	beq.n	8009226 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	2380      	movs	r3, #128	@ 0x80
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	429a      	cmp	r2, r3
 8009224:	d107      	bne.n	8009236 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2140      	movs	r1, #64	@ 0x40
 8009232:	438a      	bics	r2, r1
 8009234:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800923a:	2380      	movs	r3, #128	@ 0x80
 800923c:	019b      	lsls	r3, r3, #6
 800923e:	429a      	cmp	r2, r3
 8009240:	d110      	bne.n	8009264 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4916      	ldr	r1, [pc, #88]	@ (80092a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800924e:	400a      	ands	r2, r1
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2180      	movs	r1, #128	@ 0x80
 800925e:	0189      	lsls	r1, r1, #6
 8009260:	430a      	orrs	r2, r1
 8009262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	225d      	movs	r2, #93	@ 0x5d
 8009268:	2101      	movs	r1, #1
 800926a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	225c      	movs	r2, #92	@ 0x5c
 8009270:	2100      	movs	r1, #0
 8009272:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e010      	b.n	800929a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	3b01      	subs	r3, #1
 8009286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	4013      	ands	r3, r2
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d18e      	bne.n	80091b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	0018      	movs	r0, r3
 800929c:	46bd      	mov	sp, r7
 800929e:	b00a      	add	sp, #40	@ 0x28
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	46c0      	nop			@ (mov r8, r8)
 80092a4:	20000090 	.word	0x20000090
 80092a8:	ffffdfff 	.word	0xffffdfff

080092ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	23c0      	movs	r3, #192	@ 0xc0
 80092bc:	0159      	lsls	r1, r3, #5
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	0013      	movs	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7ff ff4e 	bl	8009168 <SPI_WaitFifoStateUntilTimeout>
 80092cc:	1e03      	subs	r3, r0, #0
 80092ce:	d007      	beq.n	80092e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092d4:	2220      	movs	r2, #32
 80092d6:	431a      	orrs	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e027      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	0013      	movs	r3, r2
 80092ea:	2200      	movs	r2, #0
 80092ec:	2180      	movs	r1, #128	@ 0x80
 80092ee:	f7ff fead 	bl	800904c <SPI_WaitFlagStateUntilTimeout>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d007      	beq.n	8009306 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092fa:	2220      	movs	r2, #32
 80092fc:	431a      	orrs	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e014      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	23c0      	movs	r3, #192	@ 0xc0
 800930a:	00d9      	lsls	r1, r3, #3
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	0013      	movs	r3, r2
 8009314:	2200      	movs	r2, #0
 8009316:	f7ff ff27 	bl	8009168 <SPI_WaitFifoStateUntilTimeout>
 800931a:	1e03      	subs	r3, r0, #0
 800931c:	d007      	beq.n	800932e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009322:	2220      	movs	r2, #32
 8009324:	431a      	orrs	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e000      	b.n	8009330 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	0018      	movs	r0, r3
 8009332:	46bd      	mov	sp, r7
 8009334:	b004      	add	sp, #16
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e04a      	b.n	80093e0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	223d      	movs	r2, #61	@ 0x3d
 800934e:	5c9b      	ldrb	r3, [r3, r2]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d107      	bne.n	8009366 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	223c      	movs	r2, #60	@ 0x3c
 800935a:	2100      	movs	r1, #0
 800935c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	0018      	movs	r0, r3
 8009362:	f7fa fd69 	bl	8003e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	223d      	movs	r2, #61	@ 0x3d
 800936a:	2102      	movs	r1, #2
 800936c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3304      	adds	r3, #4
 8009376:	0019      	movs	r1, r3
 8009378:	0010      	movs	r0, r2
 800937a:	f000 f9e7 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2248      	movs	r2, #72	@ 0x48
 8009382:	2101      	movs	r1, #1
 8009384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	223e      	movs	r2, #62	@ 0x3e
 800938a:	2101      	movs	r1, #1
 800938c:	5499      	strb	r1, [r3, r2]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	223f      	movs	r2, #63	@ 0x3f
 8009392:	2101      	movs	r1, #1
 8009394:	5499      	strb	r1, [r3, r2]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2240      	movs	r2, #64	@ 0x40
 800939a:	2101      	movs	r1, #1
 800939c:	5499      	strb	r1, [r3, r2]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2241      	movs	r2, #65	@ 0x41
 80093a2:	2101      	movs	r1, #1
 80093a4:	5499      	strb	r1, [r3, r2]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2242      	movs	r2, #66	@ 0x42
 80093aa:	2101      	movs	r1, #1
 80093ac:	5499      	strb	r1, [r3, r2]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2243      	movs	r2, #67	@ 0x43
 80093b2:	2101      	movs	r1, #1
 80093b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2244      	movs	r2, #68	@ 0x44
 80093ba:	2101      	movs	r1, #1
 80093bc:	5499      	strb	r1, [r3, r2]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2245      	movs	r2, #69	@ 0x45
 80093c2:	2101      	movs	r1, #1
 80093c4:	5499      	strb	r1, [r3, r2]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2246      	movs	r2, #70	@ 0x46
 80093ca:	2101      	movs	r1, #1
 80093cc:	5499      	strb	r1, [r3, r2]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2247      	movs	r2, #71	@ 0x47
 80093d2:	2101      	movs	r1, #1
 80093d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	223d      	movs	r2, #61	@ 0x3d
 80093da:	2101      	movs	r1, #1
 80093dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	0018      	movs	r0, r3
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b002      	add	sp, #8
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	223d      	movs	r2, #61	@ 0x3d
 80093f4:	5c9b      	ldrb	r3, [r3, r2]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d001      	beq.n	8009400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e041      	b.n	8009484 <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	223d      	movs	r2, #61	@ 0x3d
 8009404:	2102      	movs	r1, #2
 8009406:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2101      	movs	r1, #1
 8009414:	430a      	orrs	r2, r1
 8009416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a1b      	ldr	r2, [pc, #108]	@ (800948c <HAL_TIM_Base_Start_IT+0xa4>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d00e      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x58>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a1a      	ldr	r2, [pc, #104]	@ (8009490 <HAL_TIM_Base_Start_IT+0xa8>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d009      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x58>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a18      	ldr	r2, [pc, #96]	@ (8009494 <HAL_TIM_Base_Start_IT+0xac>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d004      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x58>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a17      	ldr	r2, [pc, #92]	@ (8009498 <HAL_TIM_Base_Start_IT+0xb0>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d116      	bne.n	800946e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	4a15      	ldr	r2, [pc, #84]	@ (800949c <HAL_TIM_Base_Start_IT+0xb4>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b06      	cmp	r3, #6
 8009450:	d016      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x98>
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	2380      	movs	r3, #128	@ 0x80
 8009456:	025b      	lsls	r3, r3, #9
 8009458:	429a      	cmp	r2, r3
 800945a:	d011      	beq.n	8009480 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2101      	movs	r1, #1
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946c:	e008      	b.n	8009480 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2101      	movs	r1, #1
 800947a:	430a      	orrs	r2, r1
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	e000      	b.n	8009482 <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009480:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	0018      	movs	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	b004      	add	sp, #16
 800948a:	bd80      	pop	{r7, pc}
 800948c:	40012c00 	.word	0x40012c00
 8009490:	40000400 	.word	0x40000400
 8009494:	40000800 	.word	0x40000800
 8009498:	40014000 	.word	0x40014000
 800949c:	00010007 	.word	0x00010007

080094a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2101      	movs	r1, #1
 80094b4:	438a      	bics	r2, r1
 80094b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	4a0d      	ldr	r2, [pc, #52]	@ (80094f4 <HAL_TIM_Base_Stop_IT+0x54>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	d10d      	bne.n	80094e0 <HAL_TIM_Base_Stop_IT+0x40>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	4a0b      	ldr	r2, [pc, #44]	@ (80094f8 <HAL_TIM_Base_Stop_IT+0x58>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	d107      	bne.n	80094e0 <HAL_TIM_Base_Stop_IT+0x40>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2101      	movs	r1, #1
 80094dc:	438a      	bics	r2, r1
 80094de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	223d      	movs	r2, #61	@ 0x3d
 80094e4:	2101      	movs	r1, #1
 80094e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	0018      	movs	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			@ (mov r8, r8)
 80094f4:	00001111 	.word	0x00001111
 80094f8:	00000444 	.word	0x00000444

080094fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2202      	movs	r2, #2
 8009518:	4013      	ands	r3, r2
 800951a:	d021      	beq.n	8009560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2202      	movs	r2, #2
 8009520:	4013      	ands	r3, r2
 8009522:	d01d      	beq.n	8009560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2203      	movs	r2, #3
 800952a:	4252      	negs	r2, r2
 800952c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2203      	movs	r2, #3
 800953c:	4013      	ands	r3, r2
 800953e:	d004      	beq.n	800954a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	0018      	movs	r0, r3
 8009544:	f000 f8ea 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 8009548:	e007      	b.n	800955a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	0018      	movs	r0, r3
 800954e:	f000 f8dd 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	0018      	movs	r0, r3
 8009556:	f000 f8e9 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2204      	movs	r2, #4
 8009564:	4013      	ands	r3, r2
 8009566:	d022      	beq.n	80095ae <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2204      	movs	r2, #4
 800956c:	4013      	ands	r3, r2
 800956e:	d01e      	beq.n	80095ae <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2205      	movs	r2, #5
 8009576:	4252      	negs	r2, r2
 8009578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2202      	movs	r2, #2
 800957e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	23c0      	movs	r3, #192	@ 0xc0
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4013      	ands	r3, r2
 800958c:	d004      	beq.n	8009598 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	0018      	movs	r0, r3
 8009592:	f000 f8c3 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 8009596:	e007      	b.n	80095a8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	0018      	movs	r0, r3
 800959c:	f000 f8b6 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	0018      	movs	r0, r3
 80095a4:	f000 f8c2 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2208      	movs	r2, #8
 80095b2:	4013      	ands	r3, r2
 80095b4:	d021      	beq.n	80095fa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2208      	movs	r2, #8
 80095ba:	4013      	ands	r3, r2
 80095bc:	d01d      	beq.n	80095fa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2209      	movs	r2, #9
 80095c4:	4252      	negs	r2, r2
 80095c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2204      	movs	r2, #4
 80095cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	2203      	movs	r2, #3
 80095d6:	4013      	ands	r3, r2
 80095d8:	d004      	beq.n	80095e4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	0018      	movs	r0, r3
 80095de:	f000 f89d 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 80095e2:	e007      	b.n	80095f4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f000 f890 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 f89c 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2210      	movs	r2, #16
 80095fe:	4013      	ands	r3, r2
 8009600:	d022      	beq.n	8009648 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2210      	movs	r2, #16
 8009606:	4013      	ands	r3, r2
 8009608:	d01e      	beq.n	8009648 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2211      	movs	r2, #17
 8009610:	4252      	negs	r2, r2
 8009612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2208      	movs	r2, #8
 8009618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	23c0      	movs	r3, #192	@ 0xc0
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4013      	ands	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	0018      	movs	r0, r3
 800962c:	f000 f876 	bl	800971c <HAL_TIM_IC_CaptureCallback>
 8009630:	e007      	b.n	8009642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	0018      	movs	r0, r3
 8009636:	f000 f869 	bl	800970c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f000 f875 	bl	800972c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2201      	movs	r2, #1
 800964c:	4013      	ands	r3, r2
 800964e:	d00c      	beq.n	800966a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2201      	movs	r2, #1
 8009654:	4013      	ands	r3, r2
 8009656:	d008      	beq.n	800966a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2202      	movs	r2, #2
 800965e:	4252      	negs	r2, r2
 8009660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	0018      	movs	r0, r3
 8009666:	f7f9 ff6b 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2280      	movs	r2, #128	@ 0x80
 800966e:	4013      	ands	r3, r2
 8009670:	d104      	bne.n	800967c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	019b      	lsls	r3, r3, #6
 8009678:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800967a:	d00b      	beq.n	8009694 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2280      	movs	r2, #128	@ 0x80
 8009680:	4013      	ands	r3, r2
 8009682:	d007      	beq.n	8009694 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1e      	ldr	r2, [pc, #120]	@ (8009704 <HAL_TIM_IRQHandler+0x208>)
 800968a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	0018      	movs	r0, r3
 8009690:	f000 f962 	bl	8009958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	2380      	movs	r3, #128	@ 0x80
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	4013      	ands	r3, r2
 800969c:	d00b      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2280      	movs	r2, #128	@ 0x80
 80096a2:	4013      	ands	r3, r2
 80096a4:	d007      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a17      	ldr	r2, [pc, #92]	@ (8009708 <HAL_TIM_IRQHandler+0x20c>)
 80096ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	0018      	movs	r0, r3
 80096b2:	f000 f959 	bl	8009968 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2240      	movs	r2, #64	@ 0x40
 80096ba:	4013      	ands	r3, r2
 80096bc:	d00c      	beq.n	80096d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2240      	movs	r2, #64	@ 0x40
 80096c2:	4013      	ands	r3, r2
 80096c4:	d008      	beq.n	80096d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2241      	movs	r2, #65	@ 0x41
 80096cc:	4252      	negs	r2, r2
 80096ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	0018      	movs	r0, r3
 80096d4:	f000 f832 	bl	800973c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2220      	movs	r2, #32
 80096dc:	4013      	ands	r3, r2
 80096de:	d00c      	beq.n	80096fa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	4013      	ands	r3, r2
 80096e6:	d008      	beq.n	80096fa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2221      	movs	r2, #33	@ 0x21
 80096ee:	4252      	negs	r2, r2
 80096f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f000 f927 	bl	8009948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096fa:	46c0      	nop			@ (mov r8, r8)
 80096fc:	46bd      	mov	sp, r7
 80096fe:	b004      	add	sp, #16
 8009700:	bd80      	pop	{r7, pc}
 8009702:	46c0      	nop			@ (mov r8, r8)
 8009704:	ffffdf7f 	.word	0xffffdf7f
 8009708:	fffffeff 	.word	0xfffffeff

0800970c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009714:	46c0      	nop			@ (mov r8, r8)
 8009716:	46bd      	mov	sp, r7
 8009718:	b002      	add	sp, #8
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009724:	46c0      	nop			@ (mov r8, r8)
 8009726:	46bd      	mov	sp, r7
 8009728:	b002      	add	sp, #8
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009734:	46c0      	nop			@ (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b002      	add	sp, #8
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009744:	46c0      	nop			@ (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	b002      	add	sp, #8
 800974a:	bd80      	pop	{r7, pc}

0800974c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a3a      	ldr	r2, [pc, #232]	@ (8009848 <TIM_Base_SetConfig+0xfc>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d007      	beq.n	8009774 <TIM_Base_SetConfig+0x28>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a39      	ldr	r2, [pc, #228]	@ (800984c <TIM_Base_SetConfig+0x100>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d003      	beq.n	8009774 <TIM_Base_SetConfig+0x28>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a38      	ldr	r2, [pc, #224]	@ (8009850 <TIM_Base_SetConfig+0x104>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d108      	bne.n	8009786 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2270      	movs	r2, #112	@ 0x70
 8009778:	4393      	bics	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a2f      	ldr	r2, [pc, #188]	@ (8009848 <TIM_Base_SetConfig+0xfc>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d017      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a2e      	ldr	r2, [pc, #184]	@ (800984c <TIM_Base_SetConfig+0x100>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d013      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a2d      	ldr	r2, [pc, #180]	@ (8009850 <TIM_Base_SetConfig+0x104>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00f      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009854 <TIM_Base_SetConfig+0x108>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00b      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <TIM_Base_SetConfig+0x10c>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d007      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a2a      	ldr	r2, [pc, #168]	@ (800985c <TIM_Base_SetConfig+0x110>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d003      	beq.n	80097be <TIM_Base_SetConfig+0x72>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a29      	ldr	r2, [pc, #164]	@ (8009860 <TIM_Base_SetConfig+0x114>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d108      	bne.n	80097d0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4a28      	ldr	r2, [pc, #160]	@ (8009864 <TIM_Base_SetConfig+0x118>)
 80097c2:	4013      	ands	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2280      	movs	r2, #128	@ 0x80
 80097d4:	4393      	bics	r3, r2
 80097d6:	001a      	movs	r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	695b      	ldr	r3, [r3, #20]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a13      	ldr	r2, [pc, #76]	@ (8009848 <TIM_Base_SetConfig+0xfc>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00b      	beq.n	8009816 <TIM_Base_SetConfig+0xca>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a15      	ldr	r2, [pc, #84]	@ (8009858 <TIM_Base_SetConfig+0x10c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d007      	beq.n	8009816 <TIM_Base_SetConfig+0xca>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a14      	ldr	r2, [pc, #80]	@ (800985c <TIM_Base_SetConfig+0x110>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d003      	beq.n	8009816 <TIM_Base_SetConfig+0xca>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a13      	ldr	r2, [pc, #76]	@ (8009860 <TIM_Base_SetConfig+0x114>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d103      	bne.n	800981e <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2201      	movs	r2, #1
 800982a:	4013      	ands	r3, r2
 800982c:	2b01      	cmp	r3, #1
 800982e:	d106      	bne.n	800983e <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2201      	movs	r2, #1
 8009836:	4393      	bics	r3, r2
 8009838:	001a      	movs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	611a      	str	r2, [r3, #16]
  }
}
 800983e:	46c0      	nop			@ (mov r8, r8)
 8009840:	46bd      	mov	sp, r7
 8009842:	b004      	add	sp, #16
 8009844:	bd80      	pop	{r7, pc}
 8009846:	46c0      	nop			@ (mov r8, r8)
 8009848:	40012c00 	.word	0x40012c00
 800984c:	40000400 	.word	0x40000400
 8009850:	40000800 	.word	0x40000800
 8009854:	40002000 	.word	0x40002000
 8009858:	40014000 	.word	0x40014000
 800985c:	40014400 	.word	0x40014400
 8009860:	40014800 	.word	0x40014800
 8009864:	fffffcff 	.word	0xfffffcff

08009868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	223c      	movs	r2, #60	@ 0x3c
 8009876:	5c9b      	ldrb	r3, [r3, r2]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800987c:	2302      	movs	r3, #2
 800987e:	e054      	b.n	800992a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	223c      	movs	r2, #60	@ 0x3c
 8009884:	2101      	movs	r1, #1
 8009886:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	223d      	movs	r2, #61	@ 0x3d
 800988c:	2102      	movs	r1, #2
 800988e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a23      	ldr	r2, [pc, #140]	@ (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d108      	bne.n	80098bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4a22      	ldr	r2, [pc, #136]	@ (8009938 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2270      	movs	r2, #112	@ 0x70
 80098c0:	4393      	bics	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a16      	ldr	r2, [pc, #88]	@ (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00e      	beq.n	80098fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a15      	ldr	r2, [pc, #84]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d009      	beq.n	80098fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a14      	ldr	r2, [pc, #80]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d004      	beq.n	80098fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a12      	ldr	r2, [pc, #72]	@ (8009944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d10c      	bne.n	8009918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	2280      	movs	r2, #128	@ 0x80
 8009902:	4393      	bics	r3, r2
 8009904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	4313      	orrs	r3, r2
 800990e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	223d      	movs	r2, #61	@ 0x3d
 800991c:	2101      	movs	r1, #1
 800991e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	223c      	movs	r2, #60	@ 0x3c
 8009924:	2100      	movs	r1, #0
 8009926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	0018      	movs	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	b004      	add	sp, #16
 8009930:	bd80      	pop	{r7, pc}
 8009932:	46c0      	nop			@ (mov r8, r8)
 8009934:	40012c00 	.word	0x40012c00
 8009938:	ff0fffff 	.word	0xff0fffff
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40014000 	.word	0x40014000

08009948 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b002      	add	sp, #8
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	46bd      	mov	sp, r7
 8009964:	b002      	add	sp, #8
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009970:	46c0      	nop			@ (mov r8, r8)
 8009972:	46bd      	mov	sp, r7
 8009974:	b002      	add	sp, #8
 8009976:	bd80      	pop	{r7, pc}

08009978 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009986:	4b05      	ldr	r3, [pc, #20]	@ (800999c <USB_EnableGlobalInt+0x24>)
 8009988:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	0018      	movs	r0, r3
 8009994:	46bd      	mov	sp, r7
 8009996:	b004      	add	sp, #16
 8009998:	bd80      	pop	{r7, pc}
 800999a:	46c0      	nop			@ (mov r8, r8)
 800999c:	0000bf80 	.word	0x0000bf80

080099a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80099a8:	4b06      	ldr	r3, [pc, #24]	@ (80099c4 <USB_DisableGlobalInt+0x24>)
 80099aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	43d2      	mvns	r2, r2
 80099b4:	401a      	ands	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	0018      	movs	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	b004      	add	sp, #16
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	0000bf80 	.word	0x0000bf80

080099c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	000a      	movs	r2, r1
 80099d2:	1cfb      	adds	r3, r7, #3
 80099d4:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 80099d6:	1cfb      	adds	r3, r7, #3
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e2:	005b      	lsls	r3, r3, #1
 80099e4:	085a      	lsrs	r2, r3, #1
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80099ea:	e00d      	b.n	8009a08 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 80099ec:	1cfb      	adds	r3, r7, #3
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d107      	bne.n	8009a04 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f8:	2280      	movs	r2, #128	@ 0x80
 80099fa:	0612      	lsls	r2, r2, #24
 80099fc:	431a      	orrs	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	641a      	str	r2, [r3, #64]	@ 0x40
 8009a02:	e001      	b.n	8009a08 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	0018      	movs	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	b002      	add	sp, #8
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009a12:	b084      	sub	sp, #16
 8009a14:	b5b0      	push	{r4, r5, r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	2004      	movs	r0, #4
 8009a1e:	2420      	movs	r4, #32
 8009a20:	1900      	adds	r0, r0, r4
 8009a22:	19c0      	adds	r0, r0, r7
 8009a24:	6001      	str	r1, [r0, #0]
 8009a26:	6042      	str	r2, [r0, #4]
 8009a28:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a34:	2201      	movs	r2, #1
 8009a36:	4393      	bics	r3, r2
 8009a38:	001a      	movs	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009a3e:	250f      	movs	r5, #15
 8009a40:	197c      	adds	r4, r7, r5
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2100      	movs	r1, #0
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7ff ffbe 	bl	80099c8 <USB_SetCurrentMode>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009a56:	197b      	adds	r3, r7, r5
 8009a58:	781b      	ldrb	r3, [r3, #0]
}
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	b004      	add	sp, #16
 8009a60:	bcb0      	pop	{r4, r5, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	b004      	add	sp, #16
 8009a66:	4718      	bx	r3

08009a68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b09e      	sub	sp, #120	@ 0x78
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a72:	2377      	movs	r3, #119	@ 0x77
 8009a74:	18fb      	adds	r3, r7, r3
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	18d3      	adds	r3, r2, r3
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4adc      	ldr	r2, [pc, #880]	@ (8009df8 <USB_ActivateEndpoint+0x390>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	78db      	ldrb	r3, [r3, #3]
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d00e      	beq.n	8009ab2 <USB_ActivateEndpoint+0x4a>
 8009a94:	dc19      	bgt.n	8009aca <USB_ActivateEndpoint+0x62>
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d01c      	beq.n	8009ad4 <USB_ActivateEndpoint+0x6c>
 8009a9a:	dc16      	bgt.n	8009aca <USB_ActivateEndpoint+0x62>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <USB_ActivateEndpoint+0x3e>
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d00c      	beq.n	8009abe <USB_ActivateEndpoint+0x56>
 8009aa4:	e011      	b.n	8009aca <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009aa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009aa8:	2280      	movs	r2, #128	@ 0x80
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	4313      	orrs	r3, r2
 8009aae:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009ab0:	e011      	b.n	8009ad6 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009ab2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ab4:	22c0      	movs	r2, #192	@ 0xc0
 8009ab6:	00d2      	lsls	r2, r2, #3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009abc:	e00b      	b.n	8009ad6 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ac0:	2280      	movs	r2, #128	@ 0x80
 8009ac2:	00d2      	lsls	r2, r2, #3
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009ac8:	e005      	b.n	8009ad6 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8009aca:	2377      	movs	r3, #119	@ 0x77
 8009acc:	18fb      	adds	r3, r7, r3
 8009ace:	2201      	movs	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
      break;
 8009ad2:	e000      	b.n	8009ad6 <USB_ActivateEndpoint+0x6e>
      break;
 8009ad4:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	18d3      	adds	r3, r2, r3
 8009ae0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009ae2:	49c6      	ldr	r1, [pc, #792]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4ac2      	ldr	r2, [pc, #776]	@ (8009e00 <USB_ActivateEndpoint+0x398>)
 8009af6:	4013      	ands	r3, r2
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	7812      	ldrb	r2, [r2, #0]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009b0c:	49bb      	ldr	r1, [pc, #748]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	7b1b      	ldrb	r3, [r3, #12]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d000      	beq.n	8009b1c <USB_ActivateEndpoint+0xb4>
 8009b1a:	e155      	b.n	8009dc8 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	785b      	ldrb	r3, [r3, #1]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d06e      	beq.n	8009c02 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4ab6      	ldr	r2, [pc, #728]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009b2c:	4694      	mov	ip, r2
 8009b2e:	4463      	add	r3, ip
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	49b2      	ldr	r1, [pc, #712]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009b3a:	468c      	mov	ip, r1
 8009b3c:	4463      	add	r3, ip
 8009b3e:	0c12      	lsrs	r2, r2, #16
 8009b40:	0412      	lsls	r2, r2, #16
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	4aae      	ldr	r2, [pc, #696]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009b4c:	4694      	mov	ip, r2
 8009b4e:	4463      	add	r3, ip
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	88db      	ldrh	r3, [r3, #6]
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	009a      	lsls	r2, r3, #2
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	00db      	lsls	r3, r3, #3
 8009b62:	48a8      	ldr	r0, [pc, #672]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009b64:	4684      	mov	ip, r0
 8009b66:	4463      	add	r3, ip
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	18d3      	adds	r3, r2, r3
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2240      	movs	r2, #64	@ 0x40
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d011      	beq.n	8009ba6 <USB_ActivateEndpoint+0x13e>
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	18d3      	adds	r3, r2, r3
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a9c      	ldr	r2, [pc, #624]	@ (8009e00 <USB_ActivateEndpoint+0x398>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	18d3      	adds	r3, r2, r3
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4999      	ldr	r1, [pc, #612]	@ (8009e08 <USB_ActivateEndpoint+0x3a0>)
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	78db      	ldrb	r3, [r3, #3]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d016      	beq.n	8009bdc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a94      	ldr	r2, [pc, #592]	@ (8009e0c <USB_ActivateEndpoint+0x3a4>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	4053      	eors	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	18d3      	adds	r3, r2, r3
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4989      	ldr	r1, [pc, #548]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	e261      	b.n	800a0a0 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	18d3      	adds	r3, r2, r3
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a88      	ldr	r2, [pc, #544]	@ (8009e0c <USB_ActivateEndpoint+0x3a4>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	18d3      	adds	r3, r2, r3
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4980      	ldr	r1, [pc, #512]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	e24e      	b.n	800a0a0 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	4a7e      	ldr	r2, [pc, #504]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c0a:	4694      	mov	ip, r2
 8009c0c:	4463      	add	r3, ip
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	497b      	ldr	r1, [pc, #492]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c18:	468c      	mov	ip, r1
 8009c1a:	4463      	add	r3, ip
 8009c1c:	0c12      	lsrs	r2, r2, #16
 8009c1e:	0412      	lsls	r2, r2, #16
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	4a76      	ldr	r2, [pc, #472]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c2a:	4694      	mov	ip, r2
 8009c2c:	4463      	add	r3, ip
 8009c2e:	6859      	ldr	r1, [r3, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	88db      	ldrh	r3, [r3, #6]
 8009c34:	089b      	lsrs	r3, r3, #2
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	009a      	lsls	r2, r3, #2
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	4870      	ldr	r0, [pc, #448]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c42:	4684      	mov	ip, r0
 8009c44:	4463      	add	r3, ip
 8009c46:	430a      	orrs	r2, r1
 8009c48:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	00db      	lsls	r3, r3, #3
 8009c50:	4a6c      	ldr	r2, [pc, #432]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c52:	4694      	mov	ip, r2
 8009c54:	4463      	add	r3, ip
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4969      	ldr	r1, [pc, #420]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c60:	468c      	mov	ip, r1
 8009c62:	4463      	add	r3, ip
 8009c64:	0192      	lsls	r2, r2, #6
 8009c66:	0992      	lsrs	r2, r2, #6
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c70:	d920      	bls.n	8009cb4 <USB_ActivateEndpoint+0x24c>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	221f      	movs	r2, #31
 8009c80:	4013      	ands	r3, r2
 8009c82:	d102      	bne.n	8009c8a <USB_ActivateEndpoint+0x222>
 8009c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c86:	3b01      	subs	r3, #1
 8009c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	4a5c      	ldr	r2, [pc, #368]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009c92:	4694      	mov	ip, r2
 8009c94:	4463      	add	r3, ip
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c9a:	069b      	lsls	r3, r3, #26
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4957      	ldr	r1, [pc, #348]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009ca6:	468c      	mov	ip, r1
 8009ca8:	4463      	add	r3, ip
 8009caa:	2180      	movs	r1, #128	@ 0x80
 8009cac:	0609      	lsls	r1, r1, #24
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
 8009cb2:	e032      	b.n	8009d1a <USB_ActivateEndpoint+0x2b2>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d111      	bne.n	8009ce0 <USB_ActivateEndpoint+0x278>
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	4a50      	ldr	r2, [pc, #320]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009cc4:	4694      	mov	ip, r2
 8009cc6:	4463      	add	r3, ip
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	494c      	ldr	r1, [pc, #304]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009cd2:	468c      	mov	ip, r1
 8009cd4:	4463      	add	r3, ip
 8009cd6:	2180      	movs	r1, #128	@ 0x80
 8009cd8:	0609      	lsls	r1, r1, #24
 8009cda:	430a      	orrs	r2, r1
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	e01c      	b.n	8009d1a <USB_ActivateEndpoint+0x2b2>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	085b      	lsrs	r3, r3, #1
 8009ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	2201      	movs	r2, #1
 8009cee:	4013      	ands	r3, r2
 8009cf0:	d002      	beq.n	8009cf8 <USB_ActivateEndpoint+0x290>
 8009cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	4a41      	ldr	r2, [pc, #260]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009d00:	4694      	mov	ip, r2
 8009d02:	4463      	add	r3, ip
 8009d04:	6859      	ldr	r1, [r3, #4]
 8009d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d08:	069a      	lsls	r2, r3, #26
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	483c      	ldr	r0, [pc, #240]	@ (8009e04 <USB_ActivateEndpoint+0x39c>)
 8009d12:	4684      	mov	ip, r0
 8009d14:	4463      	add	r3, ip
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	18d3      	adds	r3, r2, r3
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d2a:	2380      	movs	r3, #128	@ 0x80
 8009d2c:	01db      	lsls	r3, r3, #7
 8009d2e:	4013      	ands	r3, r2
 8009d30:	d011      	beq.n	8009d56 <USB_ActivateEndpoint+0x2ee>
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	18d3      	adds	r3, r2, r3
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a30      	ldr	r2, [pc, #192]	@ (8009e00 <USB_ActivateEndpoint+0x398>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	18d3      	adds	r3, r2, r3
 8009d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d50:	492f      	ldr	r1, [pc, #188]	@ (8009e10 <USB_ActivateEndpoint+0x3a8>)
 8009d52:	430a      	orrs	r2, r1
 8009d54:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d11c      	bne.n	8009d98 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	18d3      	adds	r3, r2, r3
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009e14 <USB_ActivateEndpoint+0x3ac>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	61fb      	str	r3, [r7, #28]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2280      	movs	r2, #128	@ 0x80
 8009d74:	0152      	lsls	r2, r2, #5
 8009d76:	4053      	eors	r3, r2
 8009d78:	61fb      	str	r3, [r7, #28]
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2280      	movs	r2, #128	@ 0x80
 8009d7e:	0192      	lsls	r2, r2, #6
 8009d80:	4053      	eors	r3, r2
 8009d82:	61fb      	str	r3, [r7, #28]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	18d3      	adds	r3, r2, r3
 8009d8e:	69fa      	ldr	r2, [r7, #28]
 8009d90:	491a      	ldr	r1, [pc, #104]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009d92:	430a      	orrs	r2, r1
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	e183      	b.n	800a0a0 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	18d3      	adds	r3, r2, r3
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e14 <USB_ActivateEndpoint+0x3ac>)
 8009da6:	4013      	ands	r3, r2
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	2280      	movs	r2, #128	@ 0x80
 8009dae:	0192      	lsls	r2, r2, #6
 8009db0:	4053      	eors	r3, r2
 8009db2:	623b      	str	r3, [r7, #32]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	18d3      	adds	r3, r2, r3
 8009dbe:	6a3a      	ldr	r2, [r7, #32]
 8009dc0:	490e      	ldr	r1, [pc, #56]	@ (8009dfc <USB_ActivateEndpoint+0x394>)
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	e16b      	b.n	800a0a0 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	78db      	ldrb	r3, [r3, #3]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d125      	bne.n	8009e1c <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	18d3      	adds	r3, r2, r3
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a08      	ldr	r2, [pc, #32]	@ (8009e00 <USB_ActivateEndpoint+0x398>)
 8009dde:	4013      	ands	r3, r2
 8009de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	18d3      	adds	r3, r2, r3
 8009dec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009dee:	490a      	ldr	r1, [pc, #40]	@ (8009e18 <USB_ActivateEndpoint+0x3b0>)
 8009df0:	430a      	orrs	r2, r1
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e024      	b.n	8009e40 <USB_ActivateEndpoint+0x3d8>
 8009df6:	46c0      	nop			@ (mov r8, r8)
 8009df8:	07ff898f 	.word	0x07ff898f
 8009dfc:	00008080 	.word	0x00008080
 8009e00:	07ff8f8f 	.word	0x07ff8f8f
 8009e04:	40009800 	.word	0x40009800
 8009e08:	000080c0 	.word	0x000080c0
 8009e0c:	07ff8fbf 	.word	0x07ff8fbf
 8009e10:	0000c080 	.word	0x0000c080
 8009e14:	07ffbf8f 	.word	0x07ffbf8f
 8009e18:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	18d3      	adds	r3, r2, r3
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4aa1      	ldr	r2, [pc, #644]	@ (800a0b0 <USB_ActivateEndpoint+0x648>)
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	18d3      	adds	r3, r2, r3
 8009e38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e3a:	499e      	ldr	r1, [pc, #632]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	00db      	lsls	r3, r3, #3
 8009e46:	4a9c      	ldr	r2, [pc, #624]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e48:	4694      	mov	ip, r2
 8009e4a:	4463      	add	r3, ip
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	4998      	ldr	r1, [pc, #608]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e56:	468c      	mov	ip, r1
 8009e58:	4463      	add	r3, ip
 8009e5a:	0c12      	lsrs	r2, r2, #16
 8009e5c:	0412      	lsls	r2, r2, #16
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4a94      	ldr	r2, [pc, #592]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e68:	4694      	mov	ip, r2
 8009e6a:	4463      	add	r3, ip
 8009e6c:	6819      	ldr	r1, [r3, #0]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	891b      	ldrh	r3, [r3, #8]
 8009e72:	089b      	lsrs	r3, r3, #2
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	009a      	lsls	r2, r3, #2
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	488e      	ldr	r0, [pc, #568]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e80:	4684      	mov	ip, r0
 8009e82:	4463      	add	r3, ip
 8009e84:	430a      	orrs	r2, r1
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	4a8a      	ldr	r2, [pc, #552]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e90:	4694      	mov	ip, r2
 8009e92:	4463      	add	r3, ip
 8009e94:	685a      	ldr	r2, [r3, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	4986      	ldr	r1, [pc, #536]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009e9e:	468c      	mov	ip, r1
 8009ea0:	4463      	add	r3, ip
 8009ea2:	0c12      	lsrs	r2, r2, #16
 8009ea4:	0412      	lsls	r2, r2, #16
 8009ea6:	605a      	str	r2, [r3, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	4a82      	ldr	r2, [pc, #520]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009eb0:	4694      	mov	ip, r2
 8009eb2:	4463      	add	r3, ip
 8009eb4:	6859      	ldr	r1, [r3, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	895b      	ldrh	r3, [r3, #10]
 8009eba:	089b      	lsrs	r3, r3, #2
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	009a      	lsls	r2, r3, #2
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	487c      	ldr	r0, [pc, #496]	@ (800a0b8 <USB_ActivateEndpoint+0x650>)
 8009ec8:	4684      	mov	ip, r0
 8009eca:	4463      	add	r3, ip
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d169      	bne.n	8009fac <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	18d3      	adds	r3, r2, r3
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ee8:	2380      	movs	r3, #128	@ 0x80
 8009eea:	01db      	lsls	r3, r3, #7
 8009eec:	4013      	ands	r3, r2
 8009eee:	d011      	beq.n	8009f14 <USB_ActivateEndpoint+0x4ac>
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	18d3      	adds	r3, r2, r3
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a6f      	ldr	r2, [pc, #444]	@ (800a0bc <USB_ActivateEndpoint+0x654>)
 8009efe:	4013      	ands	r3, r2
 8009f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	18d3      	adds	r3, r2, r3
 8009f0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009f0e:	496c      	ldr	r1, [pc, #432]	@ (800a0c0 <USB_ActivateEndpoint+0x658>)
 8009f10:	430a      	orrs	r2, r1
 8009f12:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	18d3      	adds	r3, r2, r3
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	2240      	movs	r2, #64	@ 0x40
 8009f26:	4013      	ands	r3, r2
 8009f28:	d011      	beq.n	8009f4e <USB_ActivateEndpoint+0x4e6>
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	18d3      	adds	r3, r2, r3
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a61      	ldr	r2, [pc, #388]	@ (800a0bc <USB_ActivateEndpoint+0x654>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	18d3      	adds	r3, r2, r3
 8009f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f48:	495e      	ldr	r1, [pc, #376]	@ (800a0c4 <USB_ActivateEndpoint+0x65c>)
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	18d3      	adds	r3, r2, r3
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a5b      	ldr	r2, [pc, #364]	@ (800a0c8 <USB_ActivateEndpoint+0x660>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	2280      	movs	r2, #128	@ 0x80
 8009f64:	0152      	lsls	r2, r2, #5
 8009f66:	4053      	eors	r3, r2
 8009f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6c:	2280      	movs	r2, #128	@ 0x80
 8009f6e:	0192      	lsls	r2, r2, #6
 8009f70:	4053      	eors	r3, r2
 8009f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	18d3      	adds	r3, r2, r3
 8009f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f80:	494c      	ldr	r1, [pc, #304]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 8009f82:	430a      	orrs	r2, r1
 8009f84:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	18d3      	adds	r3, r2, r3
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a4e      	ldr	r2, [pc, #312]	@ (800a0cc <USB_ActivateEndpoint+0x664>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	18d3      	adds	r3, r2, r3
 8009fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa4:	4943      	ldr	r1, [pc, #268]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	e079      	b.n	800a0a0 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	18d3      	adds	r3, r2, r3
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	01db      	lsls	r3, r3, #7
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d011      	beq.n	8009fe8 <USB_ActivateEndpoint+0x580>
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	18d3      	adds	r3, r2, r3
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a3a      	ldr	r2, [pc, #232]	@ (800a0bc <USB_ActivateEndpoint+0x654>)
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	18d3      	adds	r3, r2, r3
 8009fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009fe2:	4937      	ldr	r1, [pc, #220]	@ (800a0c0 <USB_ActivateEndpoint+0x658>)
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	18d3      	adds	r3, r2, r3
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff8:	2240      	movs	r2, #64	@ 0x40
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d011      	beq.n	800a022 <USB_ActivateEndpoint+0x5ba>
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	18d3      	adds	r3, r2, r3
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a2c      	ldr	r2, [pc, #176]	@ (800a0bc <USB_ActivateEndpoint+0x654>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	18d3      	adds	r3, r2, r3
 800a01a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a01c:	4929      	ldr	r1, [pc, #164]	@ (800a0c4 <USB_ActivateEndpoint+0x65c>)
 800a01e:	430a      	orrs	r2, r1
 800a020:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	78db      	ldrb	r3, [r3, #3]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d016      	beq.n	800a058 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	18d3      	adds	r3, r2, r3
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a25      	ldr	r2, [pc, #148]	@ (800a0cc <USB_ActivateEndpoint+0x664>)
 800a038:	4013      	ands	r3, r2
 800a03a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a03e:	2220      	movs	r2, #32
 800a040:	4053      	eors	r3, r2
 800a042:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	18d3      	adds	r3, r2, r3
 800a04e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a050:	4918      	ldr	r1, [pc, #96]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 800a052:	430a      	orrs	r2, r1
 800a054:	601a      	str	r2, [r3, #0]
 800a056:	e011      	b.n	800a07c <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	18d3      	adds	r3, r2, r3
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a19      	ldr	r2, [pc, #100]	@ (800a0cc <USB_ActivateEndpoint+0x664>)
 800a066:	4013      	ands	r3, r2
 800a068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	18d3      	adds	r3, r2, r3
 800a074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a076:	490f      	ldr	r1, [pc, #60]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 800a078:	430a      	orrs	r2, r1
 800a07a:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	18d3      	adds	r3, r2, r3
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a0f      	ldr	r2, [pc, #60]	@ (800a0c8 <USB_ActivateEndpoint+0x660>)
 800a08a:	4013      	ands	r3, r2
 800a08c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	18d3      	adds	r3, r2, r3
 800a098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a09a:	4906      	ldr	r1, [pc, #24]	@ (800a0b4 <USB_ActivateEndpoint+0x64c>)
 800a09c:	430a      	orrs	r2, r1
 800a09e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a0a0:	2377      	movs	r3, #119	@ 0x77
 800a0a2:	18fb      	adds	r3, r7, r3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
}
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	b01e      	add	sp, #120	@ 0x78
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	46c0      	nop			@ (mov r8, r8)
 800a0b0:	07ff8e8f 	.word	0x07ff8e8f
 800a0b4:	00008080 	.word	0x00008080
 800a0b8:	40009800 	.word	0x40009800
 800a0bc:	07ff8f8f 	.word	0x07ff8f8f
 800a0c0:	0000c080 	.word	0x0000c080
 800a0c4:	000080c0 	.word	0x000080c0
 800a0c8:	07ffbf8f 	.word	0x07ffbf8f
 800a0cc:	07ff8fbf 	.word	0x07ff8fbf

0800a0d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b096      	sub	sp, #88	@ 0x58
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	7b1b      	ldrb	r3, [r3, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d164      	bne.n	800a1ac <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d02f      	beq.n	800a14a <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	18d3      	adds	r3, r2, r3
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	2240      	movs	r2, #64	@ 0x40
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	d011      	beq.n	800a124 <USB_DeactivateEndpoint+0x54>
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	18d3      	adds	r3, r2, r3
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a9d      	ldr	r2, [pc, #628]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a10e:	4013      	ands	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	18d3      	adds	r3, r2, r3
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	499a      	ldr	r1, [pc, #616]	@ (800a388 <USB_DeactivateEndpoint+0x2b8>)
 800a120:	430a      	orrs	r2, r1
 800a122:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	18d3      	adds	r3, r2, r3
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a96      	ldr	r2, [pc, #600]	@ (800a38c <USB_DeactivateEndpoint+0x2bc>)
 800a132:	4013      	ands	r3, r2
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	18d3      	adds	r3, r2, r3
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	4993      	ldr	r1, [pc, #588]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a144:	430a      	orrs	r2, r1
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	e117      	b.n	800a37a <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	18d3      	adds	r3, r2, r3
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	2380      	movs	r3, #128	@ 0x80
 800a15c:	01db      	lsls	r3, r3, #7
 800a15e:	4013      	ands	r3, r2
 800a160:	d011      	beq.n	800a186 <USB_DeactivateEndpoint+0xb6>
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	18d3      	adds	r3, r2, r3
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a85      	ldr	r2, [pc, #532]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a170:	4013      	ands	r3, r2
 800a172:	61bb      	str	r3, [r7, #24]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	18d3      	adds	r3, r2, r3
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	4984      	ldr	r1, [pc, #528]	@ (800a394 <USB_DeactivateEndpoint+0x2c4>)
 800a182:	430a      	orrs	r2, r1
 800a184:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	18d3      	adds	r3, r2, r3
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a81      	ldr	r2, [pc, #516]	@ (800a398 <USB_DeactivateEndpoint+0x2c8>)
 800a194:	4013      	ands	r3, r2
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	18d3      	adds	r3, r2, r3
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	497a      	ldr	r1, [pc, #488]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	e0e6      	b.n	800a37a <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d171      	bne.n	800a298 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	18d3      	adds	r3, r2, r3
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1c4:	2380      	movs	r3, #128	@ 0x80
 800a1c6:	01db      	lsls	r3, r3, #7
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	d011      	beq.n	800a1f0 <USB_DeactivateEndpoint+0x120>
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	18d3      	adds	r3, r2, r3
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a6a      	ldr	r2, [pc, #424]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	18d3      	adds	r3, r2, r3
 800a1e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1ea:	496a      	ldr	r1, [pc, #424]	@ (800a394 <USB_DeactivateEndpoint+0x2c4>)
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	18d3      	adds	r3, r2, r3
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a200:	2240      	movs	r2, #64	@ 0x40
 800a202:	4013      	ands	r3, r2
 800a204:	d011      	beq.n	800a22a <USB_DeactivateEndpoint+0x15a>
 800a206:	687a      	ldr	r2, [r7, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	18d3      	adds	r3, r2, r3
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a5c      	ldr	r2, [pc, #368]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a214:	4013      	ands	r3, r2
 800a216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a224:	4958      	ldr	r1, [pc, #352]	@ (800a388 <USB_DeactivateEndpoint+0x2b8>)
 800a226:	430a      	orrs	r2, r1
 800a228:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	18d3      	adds	r3, r2, r3
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a53      	ldr	r2, [pc, #332]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a238:	4013      	ands	r3, r2
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	18d3      	adds	r3, r2, r3
 800a246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a248:	494f      	ldr	r1, [pc, #316]	@ (800a388 <USB_DeactivateEndpoint+0x2b8>)
 800a24a:	430a      	orrs	r2, r1
 800a24c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	18d3      	adds	r3, r2, r3
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a4f      	ldr	r2, [pc, #316]	@ (800a398 <USB_DeactivateEndpoint+0x2c8>)
 800a25c:	4013      	ands	r3, r2
 800a25e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	18d3      	adds	r3, r2, r3
 800a26a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a26c:	4948      	ldr	r1, [pc, #288]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a26e:	430a      	orrs	r2, r1
 800a270:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	18d3      	adds	r3, r2, r3
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a43      	ldr	r2, [pc, #268]	@ (800a38c <USB_DeactivateEndpoint+0x2bc>)
 800a280:	4013      	ands	r3, r2
 800a282:	623b      	str	r3, [r7, #32]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	18d3      	adds	r3, r2, r3
 800a28e:	6a3a      	ldr	r2, [r7, #32]
 800a290:	493f      	ldr	r1, [pc, #252]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a292:	430a      	orrs	r2, r1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e070      	b.n	800a37a <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	18d3      	adds	r3, r2, r3
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2a8:	2380      	movs	r3, #128	@ 0x80
 800a2aa:	01db      	lsls	r3, r3, #7
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	d011      	beq.n	800a2d4 <USB_DeactivateEndpoint+0x204>
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	18d3      	adds	r3, r2, r3
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a31      	ldr	r2, [pc, #196]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a2be:	4013      	ands	r3, r2
 800a2c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	18d3      	adds	r3, r2, r3
 800a2cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a2ce:	4931      	ldr	r1, [pc, #196]	@ (800a394 <USB_DeactivateEndpoint+0x2c4>)
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	18d3      	adds	r3, r2, r3
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2e4:	2240      	movs	r2, #64	@ 0x40
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	d011      	beq.n	800a30e <USB_DeactivateEndpoint+0x23e>
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	18d3      	adds	r3, r2, r3
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a23      	ldr	r2, [pc, #140]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	18d3      	adds	r3, r2, r3
 800a306:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a308:	491f      	ldr	r1, [pc, #124]	@ (800a388 <USB_DeactivateEndpoint+0x2b8>)
 800a30a:	430a      	orrs	r2, r1
 800a30c:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	18d3      	adds	r3, r2, r3
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1a      	ldr	r2, [pc, #104]	@ (800a384 <USB_DeactivateEndpoint+0x2b4>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	18d3      	adds	r3, r2, r3
 800a32a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a32c:	4919      	ldr	r1, [pc, #100]	@ (800a394 <USB_DeactivateEndpoint+0x2c4>)
 800a32e:	430a      	orrs	r2, r1
 800a330:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	18d3      	adds	r3, r2, r3
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a13      	ldr	r2, [pc, #76]	@ (800a38c <USB_DeactivateEndpoint+0x2bc>)
 800a340:	4013      	ands	r3, r2
 800a342:	643b      	str	r3, [r7, #64]	@ 0x40
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a350:	490f      	ldr	r1, [pc, #60]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a352:	430a      	orrs	r2, r1
 800a354:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	18d3      	adds	r3, r2, r3
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a0d      	ldr	r2, [pc, #52]	@ (800a398 <USB_DeactivateEndpoint+0x2c8>)
 800a364:	4013      	ands	r3, r2
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	18d3      	adds	r3, r2, r3
 800a372:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a374:	4906      	ldr	r1, [pc, #24]	@ (800a390 <USB_DeactivateEndpoint+0x2c0>)
 800a376:	430a      	orrs	r2, r1
 800a378:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	0018      	movs	r0, r3
 800a37e:	46bd      	mov	sp, r7
 800a380:	b016      	add	sp, #88	@ 0x58
 800a382:	bd80      	pop	{r7, pc}
 800a384:	07ff8f8f 	.word	0x07ff8f8f
 800a388:	000080c0 	.word	0x000080c0
 800a38c:	07ff8fbf 	.word	0x07ff8fbf
 800a390:	00008080 	.word	0x00008080
 800a394:	0000c080 	.word	0x0000c080
 800a398:	07ffbf8f 	.word	0x07ffbf8f

0800a39c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b097      	sub	sp, #92	@ 0x5c
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	785b      	ldrb	r3, [r3, #1]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d001      	beq.n	800a3b2 <USB_EPStartXfer+0x16>
 800a3ae:	f000 fcbf 	bl	800ad30 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d903      	bls.n	800a3c6 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3c4:	e002      	b.n	800a3cc <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	7b1b      	ldrb	r3, [r3, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d12b      	bne.n	800a42c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	6959      	ldr	r1, [r3, #20]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	88da      	ldrh	r2, [r3, #6]
 800a3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f001 f8f5 	bl	800b5d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	4ace      	ldr	r2, [pc, #824]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a3ee:	4694      	mov	ip, r2
 800a3f0:	4463      	add	r3, ip
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	49cb      	ldr	r1, [pc, #812]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a3fc:	468c      	mov	ip, r1
 800a3fe:	4463      	add	r3, ip
 800a400:	0412      	lsls	r2, r2, #16
 800a402:	0c12      	lsrs	r2, r2, #16
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	00db      	lsls	r3, r3, #3
 800a40c:	4ac6      	ldr	r2, [pc, #792]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a40e:	4694      	mov	ip, r2
 800a410:	4463      	add	r3, ip
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a416:	041a      	lsls	r2, r3, #16
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	00db      	lsls	r3, r3, #3
 800a41e:	48c2      	ldr	r0, [pc, #776]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a420:	4684      	mov	ip, r0
 800a422:	4463      	add	r3, ip
 800a424:	430a      	orrs	r2, r1
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	f000 fc67 	bl	800acfa <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	78db      	ldrb	r3, [r3, #3]
 800a430:	2b02      	cmp	r3, #2
 800a432:	d000      	beq.n	800a436 <USB_EPStartXfer+0x9a>
 800a434:	e31a      	b.n	800aa6c <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6a1a      	ldr	r2, [r3, #32]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d800      	bhi.n	800a444 <USB_EPStartXfer+0xa8>
 800a442:	e2c7      	b.n	800a9d4 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	18d3      	adds	r3, r2, r3
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4ab6      	ldr	r2, [pc, #728]	@ (800a72c <USB_EPStartXfer+0x390>)
 800a452:	4013      	ands	r3, r2
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	18d3      	adds	r3, r2, r3
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	49b3      	ldr	r1, [pc, #716]	@ (800a730 <USB_EPStartXfer+0x394>)
 800a464:	430a      	orrs	r2, r1
 800a466:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	6a1a      	ldr	r2, [r3, #32]
 800a46c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	18d3      	adds	r3, r2, r3
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2240      	movs	r2, #64	@ 0x40
 800a482:	4013      	ands	r3, r2
 800a484:	d100      	bne.n	800a488 <USB_EPStartXfer+0xec>
 800a486:	e155      	b.n	800a734 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	785b      	ldrb	r3, [r3, #1]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d162      	bne.n	800a556 <USB_EPStartXfer+0x1ba>
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4aa4      	ldr	r2, [pc, #656]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a498:	4694      	mov	ip, r2
 800a49a:	4463      	add	r3, ip
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	49a0      	ldr	r1, [pc, #640]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a4a6:	468c      	mov	ip, r1
 800a4a8:	4463      	add	r3, ip
 800a4aa:	0192      	lsls	r2, r2, #6
 800a4ac:	0992      	lsrs	r2, r2, #6
 800a4ae:	605a      	str	r2, [r3, #4]
 800a4b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4b4:	d91e      	bls.n	800a4f4 <USB_EPStartXfer+0x158>
 800a4b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b8:	095b      	lsrs	r3, r3, #5
 800a4ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4be:	221f      	movs	r2, #31
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	d102      	bne.n	800a4ca <USB_EPStartXfer+0x12e>
 800a4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	4a95      	ldr	r2, [pc, #596]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a4d2:	4694      	mov	ip, r2
 800a4d4:	4463      	add	r3, ip
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4da:	069b      	lsls	r3, r3, #26
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	4990      	ldr	r1, [pc, #576]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a4e6:	468c      	mov	ip, r1
 800a4e8:	4463      	add	r3, ip
 800a4ea:	2180      	movs	r1, #128	@ 0x80
 800a4ec:	0609      	lsls	r1, r1, #24
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	e055      	b.n	800a5a0 <USB_EPStartXfer+0x204>
 800a4f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d111      	bne.n	800a51e <USB_EPStartXfer+0x182>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	4a89      	ldr	r2, [pc, #548]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a502:	4694      	mov	ip, r2
 800a504:	4463      	add	r3, ip
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	4986      	ldr	r1, [pc, #536]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a510:	468c      	mov	ip, r1
 800a512:	4463      	add	r3, ip
 800a514:	2180      	movs	r1, #128	@ 0x80
 800a516:	0609      	lsls	r1, r1, #24
 800a518:	430a      	orrs	r2, r1
 800a51a:	605a      	str	r2, [r3, #4]
 800a51c:	e040      	b.n	800a5a0 <USB_EPStartXfer+0x204>
 800a51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a520:	085b      	lsrs	r3, r3, #1
 800a522:	653b      	str	r3, [r7, #80]	@ 0x50
 800a524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a526:	2201      	movs	r2, #1
 800a528:	4013      	ands	r3, r2
 800a52a:	d002      	beq.n	800a532 <USB_EPStartXfer+0x196>
 800a52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a52e:	3301      	adds	r3, #1
 800a530:	653b      	str	r3, [r7, #80]	@ 0x50
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	4a7b      	ldr	r2, [pc, #492]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a53a:	4694      	mov	ip, r2
 800a53c:	4463      	add	r3, ip
 800a53e:	6859      	ldr	r1, [r3, #4]
 800a540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a542:	069a      	lsls	r2, r3, #26
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4877      	ldr	r0, [pc, #476]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a54c:	4684      	mov	ip, r0
 800a54e:	4463      	add	r3, ip
 800a550:	430a      	orrs	r2, r1
 800a552:	605a      	str	r2, [r3, #4]
 800a554:	e024      	b.n	800a5a0 <USB_EPStartXfer+0x204>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d120      	bne.n	800a5a0 <USB_EPStartXfer+0x204>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	4a70      	ldr	r2, [pc, #448]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a566:	4694      	mov	ip, r2
 800a568:	4463      	add	r3, ip
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	496d      	ldr	r1, [pc, #436]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a574:	468c      	mov	ip, r1
 800a576:	4463      	add	r3, ip
 800a578:	0412      	lsls	r2, r2, #16
 800a57a:	0c12      	lsrs	r2, r2, #16
 800a57c:	605a      	str	r2, [r3, #4]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	4a68      	ldr	r2, [pc, #416]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a586:	4694      	mov	ip, r2
 800a588:	4463      	add	r3, ip
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a58e:	041a      	lsls	r2, r3, #16
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	4864      	ldr	r0, [pc, #400]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a598:	4684      	mov	ip, r0
 800a59a:	4463      	add	r3, ip
 800a59c:	430a      	orrs	r2, r1
 800a59e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800a5a0:	201a      	movs	r0, #26
 800a5a2:	183b      	adds	r3, r7, r0
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	8952      	ldrh	r2, [r2, #10]
 800a5a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6959      	ldr	r1, [r3, #20]
 800a5ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5b0:	b29c      	uxth	r4, r3
 800a5b2:	183b      	adds	r3, r7, r0
 800a5b4:	881a      	ldrh	r2, [r3, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	0023      	movs	r3, r4
 800a5ba:	f001 f809 	bl	800b5d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	695a      	ldr	r2, [r3, #20]
 800a5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5c4:	18d2      	adds	r2, r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	6a1a      	ldr	r2, [r3, #32]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d906      	bls.n	800a5e4 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	6a1a      	ldr	r2, [r3, #32]
 800a5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5dc:	1ad2      	subs	r2, r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	621a      	str	r2, [r3, #32]
 800a5e2:	e005      	b.n	800a5f0 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d162      	bne.n	800a6be <USB_EPStartXfer+0x322>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	4a4a      	ldr	r2, [pc, #296]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a600:	4694      	mov	ip, r2
 800a602:	4463      	add	r3, ip
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4946      	ldr	r1, [pc, #280]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a60e:	468c      	mov	ip, r1
 800a610:	4463      	add	r3, ip
 800a612:	0192      	lsls	r2, r2, #6
 800a614:	0992      	lsrs	r2, r2, #6
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a61a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a61c:	d91e      	bls.n	800a65c <USB_EPStartXfer+0x2c0>
 800a61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a620:	095b      	lsrs	r3, r3, #5
 800a622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a626:	221f      	movs	r2, #31
 800a628:	4013      	ands	r3, r2
 800a62a:	d102      	bne.n	800a632 <USB_EPStartXfer+0x296>
 800a62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62e:	3b01      	subs	r3, #1
 800a630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	4a3b      	ldr	r2, [pc, #236]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a63a:	4694      	mov	ip, r2
 800a63c:	4463      	add	r3, ip
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a642:	069b      	lsls	r3, r3, #26
 800a644:	431a      	orrs	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	4936      	ldr	r1, [pc, #216]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a64e:	468c      	mov	ip, r1
 800a650:	4463      	add	r3, ip
 800a652:	2180      	movs	r1, #128	@ 0x80
 800a654:	0609      	lsls	r1, r1, #24
 800a656:	430a      	orrs	r2, r1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	e055      	b.n	800a708 <USB_EPStartXfer+0x36c>
 800a65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d111      	bne.n	800a686 <USB_EPStartXfer+0x2ea>
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	4a2f      	ldr	r2, [pc, #188]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a66a:	4694      	mov	ip, r2
 800a66c:	4463      	add	r3, ip
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	492c      	ldr	r1, [pc, #176]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a678:	468c      	mov	ip, r1
 800a67a:	4463      	add	r3, ip
 800a67c:	2180      	movs	r1, #128	@ 0x80
 800a67e:	0609      	lsls	r1, r1, #24
 800a680:	430a      	orrs	r2, r1
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	e040      	b.n	800a708 <USB_EPStartXfer+0x36c>
 800a686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a68c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a68e:	2201      	movs	r2, #1
 800a690:	4013      	ands	r3, r2
 800a692:	d002      	beq.n	800a69a <USB_EPStartXfer+0x2fe>
 800a694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a696:	3301      	adds	r3, #1
 800a698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	4a21      	ldr	r2, [pc, #132]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a6a2:	4694      	mov	ip, r2
 800a6a4:	4463      	add	r3, ip
 800a6a6:	6819      	ldr	r1, [r3, #0]
 800a6a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6aa:	069a      	lsls	r2, r3, #26
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	481d      	ldr	r0, [pc, #116]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a6b4:	4684      	mov	ip, r0
 800a6b6:	4463      	add	r3, ip
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	e024      	b.n	800a708 <USB_EPStartXfer+0x36c>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d120      	bne.n	800a708 <USB_EPStartXfer+0x36c>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	4a16      	ldr	r2, [pc, #88]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a6ce:	4694      	mov	ip, r2
 800a6d0:	4463      	add	r3, ip
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	4913      	ldr	r1, [pc, #76]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a6dc:	468c      	mov	ip, r1
 800a6de:	4463      	add	r3, ip
 800a6e0:	0412      	lsls	r2, r2, #16
 800a6e2:	0c12      	lsrs	r2, r2, #16
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4a0e      	ldr	r2, [pc, #56]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a6ee:	4694      	mov	ip, r2
 800a6f0:	4463      	add	r3, ip
 800a6f2:	6819      	ldr	r1, [r3, #0]
 800a6f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6f6:	041a      	lsls	r2, r3, #16
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	480a      	ldr	r0, [pc, #40]	@ (800a728 <USB_EPStartXfer+0x38c>)
 800a700:	4684      	mov	ip, r0
 800a702:	4463      	add	r3, ip
 800a704:	430a      	orrs	r2, r1
 800a706:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a708:	201a      	movs	r0, #26
 800a70a:	183b      	adds	r3, r7, r0
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	8912      	ldrh	r2, [r2, #8]
 800a710:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	6959      	ldr	r1, [r3, #20]
 800a716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a718:	b29c      	uxth	r4, r3
 800a71a:	183b      	adds	r3, r7, r0
 800a71c:	881a      	ldrh	r2, [r3, #0]
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	0023      	movs	r3, r4
 800a722:	f000 ff55 	bl	800b5d0 <USB_WritePMA>
 800a726:	e2e8      	b.n	800acfa <USB_EPStartXfer+0x95e>
 800a728:	40009800 	.word	0x40009800
 800a72c:	07ff8f8f 	.word	0x07ff8f8f
 800a730:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	785b      	ldrb	r3, [r3, #1]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d162      	bne.n	800a802 <USB_EPStartXfer+0x466>
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	4ac7      	ldr	r2, [pc, #796]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a744:	4694      	mov	ip, r2
 800a746:	4463      	add	r3, ip
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	49c3      	ldr	r1, [pc, #780]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a752:	468c      	mov	ip, r1
 800a754:	4463      	add	r3, ip
 800a756:	0192      	lsls	r2, r2, #6
 800a758:	0992      	lsrs	r2, r2, #6
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a75e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a760:	d91e      	bls.n	800a7a0 <USB_EPStartXfer+0x404>
 800a762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a764:	095b      	lsrs	r3, r3, #5
 800a766:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a76a:	221f      	movs	r2, #31
 800a76c:	4013      	ands	r3, r2
 800a76e:	d102      	bne.n	800a776 <USB_EPStartXfer+0x3da>
 800a770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a772:	3b01      	subs	r3, #1
 800a774:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	00db      	lsls	r3, r3, #3
 800a77c:	4ab8      	ldr	r2, [pc, #736]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a77e:	4694      	mov	ip, r2
 800a780:	4463      	add	r3, ip
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a786:	069b      	lsls	r3, r3, #26
 800a788:	431a      	orrs	r2, r3
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	49b3      	ldr	r1, [pc, #716]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a792:	468c      	mov	ip, r1
 800a794:	4463      	add	r3, ip
 800a796:	2180      	movs	r1, #128	@ 0x80
 800a798:	0609      	lsls	r1, r1, #24
 800a79a:	430a      	orrs	r2, r1
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e055      	b.n	800a84c <USB_EPStartXfer+0x4b0>
 800a7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d111      	bne.n	800a7ca <USB_EPStartXfer+0x42e>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	4aac      	ldr	r2, [pc, #688]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a7ae:	4694      	mov	ip, r2
 800a7b0:	4463      	add	r3, ip
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	49a9      	ldr	r1, [pc, #676]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a7bc:	468c      	mov	ip, r1
 800a7be:	4463      	add	r3, ip
 800a7c0:	2180      	movs	r1, #128	@ 0x80
 800a7c2:	0609      	lsls	r1, r1, #24
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	e040      	b.n	800a84c <USB_EPStartXfer+0x4b0>
 800a7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d002      	beq.n	800a7de <USB_EPStartXfer+0x442>
 800a7d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7da:	3301      	adds	r3, #1
 800a7dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	4a9e      	ldr	r2, [pc, #632]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a7e6:	4694      	mov	ip, r2
 800a7e8:	4463      	add	r3, ip
 800a7ea:	6819      	ldr	r1, [r3, #0]
 800a7ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ee:	069a      	lsls	r2, r3, #26
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	00db      	lsls	r3, r3, #3
 800a7f6:	489a      	ldr	r0, [pc, #616]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a7f8:	4684      	mov	ip, r0
 800a7fa:	4463      	add	r3, ip
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e024      	b.n	800a84c <USB_EPStartXfer+0x4b0>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785b      	ldrb	r3, [r3, #1]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d120      	bne.n	800a84c <USB_EPStartXfer+0x4b0>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	4a93      	ldr	r2, [pc, #588]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a812:	4694      	mov	ip, r2
 800a814:	4463      	add	r3, ip
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	00db      	lsls	r3, r3, #3
 800a81e:	4990      	ldr	r1, [pc, #576]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a820:	468c      	mov	ip, r1
 800a822:	4463      	add	r3, ip
 800a824:	0412      	lsls	r2, r2, #16
 800a826:	0c12      	lsrs	r2, r2, #16
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	4a8b      	ldr	r2, [pc, #556]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a832:	4694      	mov	ip, r2
 800a834:	4463      	add	r3, ip
 800a836:	6819      	ldr	r1, [r3, #0]
 800a838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a83a:	041a      	lsls	r2, r3, #16
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	00db      	lsls	r3, r3, #3
 800a842:	4887      	ldr	r0, [pc, #540]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a844:	4684      	mov	ip, r0
 800a846:	4463      	add	r3, ip
 800a848:	430a      	orrs	r2, r1
 800a84a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a84c:	201a      	movs	r0, #26
 800a84e:	183b      	adds	r3, r7, r0
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	8912      	ldrh	r2, [r2, #8]
 800a854:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6959      	ldr	r1, [r3, #20]
 800a85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a85c:	b29c      	uxth	r4, r3
 800a85e:	183b      	adds	r3, r7, r0
 800a860:	881a      	ldrh	r2, [r3, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	0023      	movs	r3, r4
 800a866:	f000 feb3 	bl	800b5d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	695a      	ldr	r2, [r3, #20]
 800a86e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a870:	18d2      	adds	r2, r2, r3
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	6a1a      	ldr	r2, [r3, #32]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d906      	bls.n	800a890 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6a1a      	ldr	r2, [r3, #32]
 800a886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a888:	1ad2      	subs	r2, r2, r3
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	621a      	str	r2, [r3, #32]
 800a88e:	e005      	b.n	800a89c <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2200      	movs	r2, #0
 800a89a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	785b      	ldrb	r3, [r3, #1]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d162      	bne.n	800a96a <USB_EPStartXfer+0x5ce>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	00db      	lsls	r3, r3, #3
 800a8aa:	4a6d      	ldr	r2, [pc, #436]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a8ac:	4694      	mov	ip, r2
 800a8ae:	4463      	add	r3, ip
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	4969      	ldr	r1, [pc, #420]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a8ba:	468c      	mov	ip, r1
 800a8bc:	4463      	add	r3, ip
 800a8be:	0192      	lsls	r2, r2, #6
 800a8c0:	0992      	lsrs	r2, r2, #6
 800a8c2:	605a      	str	r2, [r3, #4]
 800a8c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8c8:	d91e      	bls.n	800a908 <USB_EPStartXfer+0x56c>
 800a8ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8cc:	095b      	lsrs	r3, r3, #5
 800a8ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d2:	221f      	movs	r2, #31
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	d102      	bne.n	800a8de <USB_EPStartXfer+0x542>
 800a8d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4a5e      	ldr	r2, [pc, #376]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a8e6:	4694      	mov	ip, r2
 800a8e8:	4463      	add	r3, ip
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ee:	069b      	lsls	r3, r3, #26
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	4959      	ldr	r1, [pc, #356]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a8fa:	468c      	mov	ip, r1
 800a8fc:	4463      	add	r3, ip
 800a8fe:	2180      	movs	r1, #128	@ 0x80
 800a900:	0609      	lsls	r1, r1, #24
 800a902:	430a      	orrs	r2, r1
 800a904:	605a      	str	r2, [r3, #4]
 800a906:	e055      	b.n	800a9b4 <USB_EPStartXfer+0x618>
 800a908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d111      	bne.n	800a932 <USB_EPStartXfer+0x596>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	4a52      	ldr	r2, [pc, #328]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a916:	4694      	mov	ip, r2
 800a918:	4463      	add	r3, ip
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	00db      	lsls	r3, r3, #3
 800a922:	494f      	ldr	r1, [pc, #316]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a924:	468c      	mov	ip, r1
 800a926:	4463      	add	r3, ip
 800a928:	2180      	movs	r1, #128	@ 0x80
 800a92a:	0609      	lsls	r1, r1, #24
 800a92c:	430a      	orrs	r2, r1
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	e040      	b.n	800a9b4 <USB_EPStartXfer+0x618>
 800a932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	647b      	str	r3, [r7, #68]	@ 0x44
 800a938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a93a:	2201      	movs	r2, #1
 800a93c:	4013      	ands	r3, r2
 800a93e:	d002      	beq.n	800a946 <USB_EPStartXfer+0x5aa>
 800a940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a942:	3301      	adds	r3, #1
 800a944:	647b      	str	r3, [r7, #68]	@ 0x44
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	4a44      	ldr	r2, [pc, #272]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a94e:	4694      	mov	ip, r2
 800a950:	4463      	add	r3, ip
 800a952:	6859      	ldr	r1, [r3, #4]
 800a954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a956:	069a      	lsls	r2, r3, #26
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4840      	ldr	r0, [pc, #256]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a960:	4684      	mov	ip, r0
 800a962:	4463      	add	r3, ip
 800a964:	430a      	orrs	r2, r1
 800a966:	605a      	str	r2, [r3, #4]
 800a968:	e024      	b.n	800a9b4 <USB_EPStartXfer+0x618>
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d120      	bne.n	800a9b4 <USB_EPStartXfer+0x618>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	4a39      	ldr	r2, [pc, #228]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a97a:	4694      	mov	ip, r2
 800a97c:	4463      	add	r3, ip
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	4936      	ldr	r1, [pc, #216]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a988:	468c      	mov	ip, r1
 800a98a:	4463      	add	r3, ip
 800a98c:	0412      	lsls	r2, r2, #16
 800a98e:	0c12      	lsrs	r2, r2, #16
 800a990:	605a      	str	r2, [r3, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	4a31      	ldr	r2, [pc, #196]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a99a:	4694      	mov	ip, r2
 800a99c:	4463      	add	r3, ip
 800a99e:	6859      	ldr	r1, [r3, #4]
 800a9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9a2:	041a      	lsls	r2, r3, #16
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	482d      	ldr	r0, [pc, #180]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800a9ac:	4684      	mov	ip, r0
 800a9ae:	4463      	add	r3, ip
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800a9b4:	201a      	movs	r0, #26
 800a9b6:	183b      	adds	r3, r7, r0
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	8952      	ldrh	r2, [r2, #10]
 800a9bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9c4:	b29c      	uxth	r4, r3
 800a9c6:	183b      	adds	r3, r7, r0
 800a9c8:	881a      	ldrh	r2, [r3, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	0023      	movs	r3, r4
 800a9ce:	f000 fdff 	bl	800b5d0 <USB_WritePMA>
 800a9d2:	e192      	b.n	800acfa <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	18d3      	adds	r3, r2, r3
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a1f      	ldr	r2, [pc, #124]	@ (800aa64 <USB_EPStartXfer+0x6c8>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	18d3      	adds	r3, r2, r3
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	491b      	ldr	r1, [pc, #108]	@ (800aa68 <USB_EPStartXfer+0x6cc>)
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	4a16      	ldr	r2, [pc, #88]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800aa06:	4694      	mov	ip, r2
 800aa08:	4463      	add	r3, ip
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	4913      	ldr	r1, [pc, #76]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800aa14:	468c      	mov	ip, r1
 800aa16:	4463      	add	r3, ip
 800aa18:	0412      	lsls	r2, r2, #16
 800aa1a:	0c12      	lsrs	r2, r2, #16
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	4a0e      	ldr	r2, [pc, #56]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800aa26:	4694      	mov	ip, r2
 800aa28:	4463      	add	r3, ip
 800aa2a:	6819      	ldr	r1, [r3, #0]
 800aa2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa2e:	041a      	lsls	r2, r3, #16
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	480a      	ldr	r0, [pc, #40]	@ (800aa60 <USB_EPStartXfer+0x6c4>)
 800aa38:	4684      	mov	ip, r0
 800aa3a:	4463      	add	r3, ip
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa40:	201a      	movs	r0, #26
 800aa42:	183b      	adds	r3, r7, r0
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	8912      	ldrh	r2, [r2, #8]
 800aa48:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6959      	ldr	r1, [r3, #20]
 800aa4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa50:	b29c      	uxth	r4, r3
 800aa52:	183b      	adds	r3, r7, r0
 800aa54:	881a      	ldrh	r2, [r3, #0]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	0023      	movs	r3, r4
 800aa5a:	f000 fdb9 	bl	800b5d0 <USB_WritePMA>
 800aa5e:	e14c      	b.n	800acfa <USB_EPStartXfer+0x95e>
 800aa60:	40009800 	.word	0x40009800
 800aa64:	07ff8e8f 	.word	0x07ff8e8f
 800aa68:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	6a1a      	ldr	r2, [r3, #32]
 800aa70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	18d3      	adds	r3, r2, r3
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2240      	movs	r2, #64	@ 0x40
 800aa86:	4013      	ands	r3, r2
 800aa88:	d100      	bne.n	800aa8c <USB_EPStartXfer+0x6f0>
 800aa8a:	e09b      	b.n	800abc4 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d162      	bne.n	800ab5a <USB_EPStartXfer+0x7be>
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	4ad6      	ldr	r2, [pc, #856]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800aa9c:	4694      	mov	ip, r2
 800aa9e:	4463      	add	r3, ip
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	49d2      	ldr	r1, [pc, #840]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800aaaa:	468c      	mov	ip, r1
 800aaac:	4463      	add	r3, ip
 800aaae:	0192      	lsls	r2, r2, #6
 800aab0:	0992      	lsrs	r2, r2, #6
 800aab2:	605a      	str	r2, [r3, #4]
 800aab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aab6:	2b3e      	cmp	r3, #62	@ 0x3e
 800aab8:	d91e      	bls.n	800aaf8 <USB_EPStartXfer+0x75c>
 800aaba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aabc:	095b      	lsrs	r3, r3, #5
 800aabe:	643b      	str	r3, [r7, #64]	@ 0x40
 800aac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aac2:	221f      	movs	r2, #31
 800aac4:	4013      	ands	r3, r2
 800aac6:	d102      	bne.n	800aace <USB_EPStartXfer+0x732>
 800aac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaca:	3b01      	subs	r3, #1
 800aacc:	643b      	str	r3, [r7, #64]	@ 0x40
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	4ac7      	ldr	r2, [pc, #796]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aade:	069b      	lsls	r3, r3, #26
 800aae0:	431a      	orrs	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	49c2      	ldr	r1, [pc, #776]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800aaea:	468c      	mov	ip, r1
 800aaec:	4463      	add	r3, ip
 800aaee:	2180      	movs	r1, #128	@ 0x80
 800aaf0:	0609      	lsls	r1, r1, #24
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
 800aaf6:	e055      	b.n	800aba4 <USB_EPStartXfer+0x808>
 800aaf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d111      	bne.n	800ab22 <USB_EPStartXfer+0x786>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4abb      	ldr	r2, [pc, #748]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab06:	4694      	mov	ip, r2
 800ab08:	4463      	add	r3, ip
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	49b8      	ldr	r1, [pc, #736]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab14:	468c      	mov	ip, r1
 800ab16:	4463      	add	r3, ip
 800ab18:	2180      	movs	r1, #128	@ 0x80
 800ab1a:	0609      	lsls	r1, r1, #24
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	605a      	str	r2, [r3, #4]
 800ab20:	e040      	b.n	800aba4 <USB_EPStartXfer+0x808>
 800ab22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab24:	085b      	lsrs	r3, r3, #1
 800ab26:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	d002      	beq.n	800ab36 <USB_EPStartXfer+0x79a>
 800ab30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab32:	3301      	adds	r3, #1
 800ab34:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	4aad      	ldr	r2, [pc, #692]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab3e:	4694      	mov	ip, r2
 800ab40:	4463      	add	r3, ip
 800ab42:	6859      	ldr	r1, [r3, #4]
 800ab44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab46:	069a      	lsls	r2, r3, #26
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	48a9      	ldr	r0, [pc, #676]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab50:	4684      	mov	ip, r0
 800ab52:	4463      	add	r3, ip
 800ab54:	430a      	orrs	r2, r1
 800ab56:	605a      	str	r2, [r3, #4]
 800ab58:	e024      	b.n	800aba4 <USB_EPStartXfer+0x808>
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d120      	bne.n	800aba4 <USB_EPStartXfer+0x808>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	4aa2      	ldr	r2, [pc, #648]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab6a:	4694      	mov	ip, r2
 800ab6c:	4463      	add	r3, ip
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	499f      	ldr	r1, [pc, #636]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab78:	468c      	mov	ip, r1
 800ab7a:	4463      	add	r3, ip
 800ab7c:	0412      	lsls	r2, r2, #16
 800ab7e:	0c12      	lsrs	r2, r2, #16
 800ab80:	605a      	str	r2, [r3, #4]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	4a9a      	ldr	r2, [pc, #616]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab8a:	4694      	mov	ip, r2
 800ab8c:	4463      	add	r3, ip
 800ab8e:	6859      	ldr	r1, [r3, #4]
 800ab90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab92:	041a      	lsls	r2, r3, #16
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	4896      	ldr	r0, [pc, #600]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ab9c:	4684      	mov	ip, r0
 800ab9e:	4463      	add	r3, ip
 800aba0:	430a      	orrs	r2, r1
 800aba2:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800aba4:	201a      	movs	r0, #26
 800aba6:	183b      	adds	r3, r7, r0
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	8952      	ldrh	r2, [r2, #10]
 800abac:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6959      	ldr	r1, [r3, #20]
 800abb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abb4:	b29c      	uxth	r4, r3
 800abb6:	183b      	adds	r3, r7, r0
 800abb8:	881a      	ldrh	r2, [r3, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	0023      	movs	r3, r4
 800abbe:	f000 fd07 	bl	800b5d0 <USB_WritePMA>
 800abc2:	e09a      	b.n	800acfa <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	785b      	ldrb	r3, [r3, #1]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d162      	bne.n	800ac92 <USB_EPStartXfer+0x8f6>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	4a88      	ldr	r2, [pc, #544]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800abd4:	4694      	mov	ip, r2
 800abd6:	4463      	add	r3, ip
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4984      	ldr	r1, [pc, #528]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800abe2:	468c      	mov	ip, r1
 800abe4:	4463      	add	r3, ip
 800abe6:	0192      	lsls	r2, r2, #6
 800abe8:	0992      	lsrs	r2, r2, #6
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abee:	2b3e      	cmp	r3, #62	@ 0x3e
 800abf0:	d91e      	bls.n	800ac30 <USB_EPStartXfer+0x894>
 800abf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf4:	095b      	lsrs	r3, r3, #5
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abfa:	221f      	movs	r2, #31
 800abfc:	4013      	ands	r3, r2
 800abfe:	d102      	bne.n	800ac06 <USB_EPStartXfer+0x86a>
 800ac00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac02:	3b01      	subs	r3, #1
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	4a79      	ldr	r2, [pc, #484]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac0e:	4694      	mov	ip, r2
 800ac10:	4463      	add	r3, ip
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac16:	069b      	lsls	r3, r3, #26
 800ac18:	431a      	orrs	r2, r3
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	4974      	ldr	r1, [pc, #464]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac22:	468c      	mov	ip, r1
 800ac24:	4463      	add	r3, ip
 800ac26:	2180      	movs	r1, #128	@ 0x80
 800ac28:	0609      	lsls	r1, r1, #24
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	e055      	b.n	800acdc <USB_EPStartXfer+0x940>
 800ac30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d111      	bne.n	800ac5a <USB_EPStartXfer+0x8be>
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	4a6d      	ldr	r2, [pc, #436]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac3e:	4694      	mov	ip, r2
 800ac40:	4463      	add	r3, ip
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	496a      	ldr	r1, [pc, #424]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac4c:	468c      	mov	ip, r1
 800ac4e:	4463      	add	r3, ip
 800ac50:	2180      	movs	r1, #128	@ 0x80
 800ac52:	0609      	lsls	r1, r1, #24
 800ac54:	430a      	orrs	r2, r1
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	e040      	b.n	800acdc <USB_EPStartXfer+0x940>
 800ac5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac5c:	085b      	lsrs	r3, r3, #1
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac62:	2201      	movs	r2, #1
 800ac64:	4013      	ands	r3, r2
 800ac66:	d002      	beq.n	800ac6e <USB_EPStartXfer+0x8d2>
 800ac68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	4a5f      	ldr	r2, [pc, #380]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac76:	4694      	mov	ip, r2
 800ac78:	4463      	add	r3, ip
 800ac7a:	6819      	ldr	r1, [r3, #0]
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7e:	069a      	lsls	r2, r3, #26
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	00db      	lsls	r3, r3, #3
 800ac86:	485b      	ldr	r0, [pc, #364]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ac88:	4684      	mov	ip, r0
 800ac8a:	4463      	add	r3, ip
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	601a      	str	r2, [r3, #0]
 800ac90:	e024      	b.n	800acdc <USB_EPStartXfer+0x940>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d120      	bne.n	800acdc <USB_EPStartXfer+0x940>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	4a54      	ldr	r2, [pc, #336]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800aca2:	4694      	mov	ip, r2
 800aca4:	4463      	add	r3, ip
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	4951      	ldr	r1, [pc, #324]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800acb0:	468c      	mov	ip, r1
 800acb2:	4463      	add	r3, ip
 800acb4:	0412      	lsls	r2, r2, #16
 800acb6:	0c12      	lsrs	r2, r2, #16
 800acb8:	601a      	str	r2, [r3, #0]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	00db      	lsls	r3, r3, #3
 800acc0:	4a4c      	ldr	r2, [pc, #304]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800acc2:	4694      	mov	ip, r2
 800acc4:	4463      	add	r3, ip
 800acc6:	6819      	ldr	r1, [r3, #0]
 800acc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acca:	041a      	lsls	r2, r3, #16
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	00db      	lsls	r3, r3, #3
 800acd2:	4848      	ldr	r0, [pc, #288]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800acd4:	4684      	mov	ip, r0
 800acd6:	4463      	add	r3, ip
 800acd8:	430a      	orrs	r2, r1
 800acda:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800acdc:	201a      	movs	r0, #26
 800acde:	183b      	adds	r3, r7, r0
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	8912      	ldrh	r2, [r2, #8]
 800ace4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	6959      	ldr	r1, [r3, #20]
 800acea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acec:	b29c      	uxth	r4, r3
 800acee:	183b      	adds	r3, r7, r0
 800acf0:	881a      	ldrh	r2, [r3, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	0023      	movs	r3, r4
 800acf6:	f000 fc6b 	bl	800b5d0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	18d3      	adds	r3, r2, r3
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a3c      	ldr	r2, [pc, #240]	@ (800adf8 <USB_EPStartXfer+0xa5c>)
 800ad08:	4013      	ands	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2210      	movs	r2, #16
 800ad10:	4053      	eors	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2220      	movs	r2, #32
 800ad18:	4053      	eors	r3, r2
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	18d3      	adds	r3, r2, r3
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	4934      	ldr	r1, [pc, #208]	@ (800adfc <USB_EPStartXfer+0xa60>)
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	e340      	b.n	800b3b2 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	7b1b      	ldrb	r3, [r3, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d000      	beq.n	800ad3a <USB_EPStartXfer+0x99e>
 800ad38:	e07e      	b.n	800ae38 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	699a      	ldr	r2, [r3, #24]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d909      	bls.n	800ad5a <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad52:	1ad2      	subs	r2, r2, r3
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	619a      	str	r2, [r3, #24]
 800ad58:	e005      	b.n	800ad66 <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	4a21      	ldr	r2, [pc, #132]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ad6e:	4694      	mov	ip, r2
 800ad70:	4463      	add	r3, ip
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	00db      	lsls	r3, r3, #3
 800ad7a:	491e      	ldr	r1, [pc, #120]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ad7c:	468c      	mov	ip, r1
 800ad7e:	4463      	add	r3, ip
 800ad80:	0192      	lsls	r2, r2, #6
 800ad82:	0992      	lsrs	r2, r2, #6
 800ad84:	605a      	str	r2, [r3, #4]
 800ad86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad88:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad8a:	d91e      	bls.n	800adca <USB_EPStartXfer+0xa2e>
 800ad8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad8e:	095b      	lsrs	r3, r3, #5
 800ad90:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad94:	221f      	movs	r2, #31
 800ad96:	4013      	ands	r3, r2
 800ad98:	d102      	bne.n	800ada0 <USB_EPStartXfer+0xa04>
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	4a13      	ldr	r2, [pc, #76]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ada8:	4694      	mov	ip, r2
 800adaa:	4463      	add	r3, ip
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb0:	069b      	lsls	r3, r3, #26
 800adb2:	431a      	orrs	r2, r3
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	00db      	lsls	r3, r3, #3
 800adba:	490e      	ldr	r1, [pc, #56]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800adbc:	468c      	mov	ip, r1
 800adbe:	4463      	add	r3, ip
 800adc0:	2180      	movs	r1, #128	@ 0x80
 800adc2:	0609      	lsls	r1, r1, #24
 800adc4:	430a      	orrs	r2, r1
 800adc6:	605a      	str	r2, [r3, #4]
 800adc8:	e2d7      	b.n	800b37a <USB_EPStartXfer+0xfde>
 800adca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d117      	bne.n	800ae00 <USB_EPStartXfer+0xa64>
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	4a07      	ldr	r2, [pc, #28]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800add8:	4694      	mov	ip, r2
 800adda:	4463      	add	r3, ip
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4903      	ldr	r1, [pc, #12]	@ (800adf4 <USB_EPStartXfer+0xa58>)
 800ade6:	468c      	mov	ip, r1
 800ade8:	4463      	add	r3, ip
 800adea:	2180      	movs	r1, #128	@ 0x80
 800adec:	0609      	lsls	r1, r1, #24
 800adee:	430a      	orrs	r2, r1
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	e2c2      	b.n	800b37a <USB_EPStartXfer+0xfde>
 800adf4:	40009800 	.word	0x40009800
 800adf8:	07ff8fbf 	.word	0x07ff8fbf
 800adfc:	00008080 	.word	0x00008080
 800ae00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae08:	2201      	movs	r2, #1
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	d002      	beq.n	800ae14 <USB_EPStartXfer+0xa78>
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae10:	3301      	adds	r3, #1
 800ae12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	4ac4      	ldr	r2, [pc, #784]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800ae1c:	4694      	mov	ip, r2
 800ae1e:	4463      	add	r3, ip
 800ae20:	6859      	ldr	r1, [r3, #4]
 800ae22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae24:	069a      	lsls	r2, r3, #26
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	48bf      	ldr	r0, [pc, #764]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800ae2e:	4684      	mov	ip, r0
 800ae30:	4463      	add	r3, ip
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	e2a0      	b.n	800b37a <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	78db      	ldrb	r3, [r3, #3]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d000      	beq.n	800ae42 <USB_EPStartXfer+0xaa6>
 800ae40:	e15f      	b.n	800b102 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	785b      	ldrb	r3, [r3, #1]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d168      	bne.n	800af1c <USB_EPStartXfer+0xb80>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4ab6      	ldr	r2, [pc, #728]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800ae52:	4694      	mov	ip, r2
 800ae54:	4463      	add	r3, ip
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	00db      	lsls	r3, r3, #3
 800ae5e:	49b3      	ldr	r1, [pc, #716]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800ae60:	468c      	mov	ip, r1
 800ae62:	4463      	add	r3, ip
 800ae64:	0192      	lsls	r2, r2, #6
 800ae66:	0992      	lsrs	r2, r2, #6
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae70:	d920      	bls.n	800aeb4 <USB_EPStartXfer+0xb18>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	221f      	movs	r2, #31
 800ae80:	4013      	ands	r3, r2
 800ae82:	d102      	bne.n	800ae8a <USB_EPStartXfer+0xaee>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae86:	3b01      	subs	r3, #1
 800ae88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4aa6      	ldr	r2, [pc, #664]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800ae92:	4694      	mov	ip, r2
 800ae94:	4463      	add	r3, ip
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9a:	069b      	lsls	r3, r3, #26
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	49a1      	ldr	r1, [pc, #644]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800aea6:	468c      	mov	ip, r1
 800aea8:	4463      	add	r3, ip
 800aeaa:	2180      	movs	r1, #128	@ 0x80
 800aeac:	0609      	lsls	r1, r1, #24
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e059      	b.n	800af68 <USB_EPStartXfer+0xbcc>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d111      	bne.n	800aee0 <USB_EPStartXfer+0xb44>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	00db      	lsls	r3, r3, #3
 800aec2:	4a9a      	ldr	r2, [pc, #616]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800aec4:	4694      	mov	ip, r2
 800aec6:	4463      	add	r3, ip
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	4996      	ldr	r1, [pc, #600]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800aed2:	468c      	mov	ip, r1
 800aed4:	4463      	add	r3, ip
 800aed6:	2180      	movs	r1, #128	@ 0x80
 800aed8:	0609      	lsls	r1, r1, #24
 800aeda:	430a      	orrs	r2, r1
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e043      	b.n	800af68 <USB_EPStartXfer+0xbcc>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	085b      	lsrs	r3, r3, #1
 800aee6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	2201      	movs	r2, #1
 800aeee:	4013      	ands	r3, r2
 800aef0:	d002      	beq.n	800aef8 <USB_EPStartXfer+0xb5c>
 800aef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef4:	3301      	adds	r3, #1
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	00db      	lsls	r3, r3, #3
 800aefe:	4a8b      	ldr	r2, [pc, #556]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af00:	4694      	mov	ip, r2
 800af02:	4463      	add	r3, ip
 800af04:	6819      	ldr	r1, [r3, #0]
 800af06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af08:	069a      	lsls	r2, r3, #26
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	00db      	lsls	r3, r3, #3
 800af10:	4886      	ldr	r0, [pc, #536]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af12:	4684      	mov	ip, r0
 800af14:	4463      	add	r3, ip
 800af16:	430a      	orrs	r2, r1
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e025      	b.n	800af68 <USB_EPStartXfer+0xbcc>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d121      	bne.n	800af68 <USB_EPStartXfer+0xbcc>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	4a80      	ldr	r2, [pc, #512]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af2c:	4694      	mov	ip, r2
 800af2e:	4463      	add	r3, ip
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	497c      	ldr	r1, [pc, #496]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af3a:	468c      	mov	ip, r1
 800af3c:	4463      	add	r3, ip
 800af3e:	0412      	lsls	r2, r2, #16
 800af40:	0c12      	lsrs	r2, r2, #16
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	4a78      	ldr	r2, [pc, #480]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af4c:	4694      	mov	ip, r2
 800af4e:	4463      	add	r3, ip
 800af50:	6819      	ldr	r1, [r3, #0]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	041a      	lsls	r2, r3, #16
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	00db      	lsls	r3, r3, #3
 800af5e:	4873      	ldr	r0, [pc, #460]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af60:	4684      	mov	ip, r0
 800af62:	4463      	add	r3, ip
 800af64:	430a      	orrs	r2, r1
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d168      	bne.n	800b042 <USB_EPStartXfer+0xca6>
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	00db      	lsls	r3, r3, #3
 800af76:	4a6d      	ldr	r2, [pc, #436]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af78:	4694      	mov	ip, r2
 800af7a:	4463      	add	r3, ip
 800af7c:	685a      	ldr	r2, [r3, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	4969      	ldr	r1, [pc, #420]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800af86:	468c      	mov	ip, r1
 800af88:	4463      	add	r3, ip
 800af8a:	0192      	lsls	r2, r2, #6
 800af8c:	0992      	lsrs	r2, r2, #6
 800af8e:	605a      	str	r2, [r3, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b3e      	cmp	r3, #62	@ 0x3e
 800af96:	d920      	bls.n	800afda <USB_EPStartXfer+0xc3e>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	095b      	lsrs	r3, r3, #5
 800af9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	221f      	movs	r2, #31
 800afa6:	4013      	ands	r3, r2
 800afa8:	d102      	bne.n	800afb0 <USB_EPStartXfer+0xc14>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	3b01      	subs	r3, #1
 800afae:	633b      	str	r3, [r7, #48]	@ 0x30
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	00db      	lsls	r3, r3, #3
 800afb6:	4a5d      	ldr	r2, [pc, #372]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800afb8:	4694      	mov	ip, r2
 800afba:	4463      	add	r3, ip
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	069b      	lsls	r3, r3, #26
 800afc2:	431a      	orrs	r2, r3
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4958      	ldr	r1, [pc, #352]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800afcc:	468c      	mov	ip, r1
 800afce:	4463      	add	r3, ip
 800afd0:	2180      	movs	r1, #128	@ 0x80
 800afd2:	0609      	lsls	r1, r1, #24
 800afd4:	430a      	orrs	r2, r1
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	e059      	b.n	800b08e <USB_EPStartXfer+0xcf2>
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d111      	bne.n	800b006 <USB_EPStartXfer+0xc6a>
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	4a50      	ldr	r2, [pc, #320]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800afea:	4694      	mov	ip, r2
 800afec:	4463      	add	r3, ip
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	494d      	ldr	r1, [pc, #308]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800aff8:	468c      	mov	ip, r1
 800affa:	4463      	add	r3, ip
 800affc:	2180      	movs	r1, #128	@ 0x80
 800affe:	0609      	lsls	r1, r1, #24
 800b000:	430a      	orrs	r2, r1
 800b002:	605a      	str	r2, [r3, #4]
 800b004:	e043      	b.n	800b08e <USB_EPStartXfer+0xcf2>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2201      	movs	r2, #1
 800b014:	4013      	ands	r3, r2
 800b016:	d002      	beq.n	800b01e <USB_EPStartXfer+0xc82>
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	3301      	adds	r3, #1
 800b01c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	4a41      	ldr	r2, [pc, #260]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b026:	4694      	mov	ip, r2
 800b028:	4463      	add	r3, ip
 800b02a:	6859      	ldr	r1, [r3, #4]
 800b02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02e:	069a      	lsls	r2, r3, #26
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	483d      	ldr	r0, [pc, #244]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b038:	4684      	mov	ip, r0
 800b03a:	4463      	add	r3, ip
 800b03c:	430a      	orrs	r2, r1
 800b03e:	605a      	str	r2, [r3, #4]
 800b040:	e025      	b.n	800b08e <USB_EPStartXfer+0xcf2>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	785b      	ldrb	r3, [r3, #1]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d121      	bne.n	800b08e <USB_EPStartXfer+0xcf2>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	4a36      	ldr	r2, [pc, #216]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b052:	4694      	mov	ip, r2
 800b054:	4463      	add	r3, ip
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	4933      	ldr	r1, [pc, #204]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b060:	468c      	mov	ip, r1
 800b062:	4463      	add	r3, ip
 800b064:	0412      	lsls	r2, r2, #16
 800b066:	0c12      	lsrs	r2, r2, #16
 800b068:	605a      	str	r2, [r3, #4]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	4a2e      	ldr	r2, [pc, #184]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b072:	4694      	mov	ip, r2
 800b074:	4463      	add	r3, ip
 800b076:	6859      	ldr	r1, [r3, #4]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	041a      	lsls	r2, r3, #16
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	4829      	ldr	r0, [pc, #164]	@ (800b12c <USB_EPStartXfer+0xd90>)
 800b086:	4684      	mov	ip, r0
 800b088:	4463      	add	r3, ip
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d100      	bne.n	800b098 <USB_EPStartXfer+0xcfc>
 800b096:	e170      	b.n	800b37a <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	18d3      	adds	r3, r2, r3
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	2126      	movs	r1, #38	@ 0x26
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b0aa:	187b      	adds	r3, r7, r1
 800b0ac:	881a      	ldrh	r2, [r3, #0]
 800b0ae:	2380      	movs	r3, #128	@ 0x80
 800b0b0:	01db      	lsls	r3, r3, #7
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	d004      	beq.n	800b0c0 <USB_EPStartXfer+0xd24>
 800b0b6:	187b      	adds	r3, r7, r1
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	2240      	movs	r2, #64	@ 0x40
 800b0bc:	4013      	ands	r3, r2
 800b0be:	d10d      	bne.n	800b0dc <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b0c0:	2126      	movs	r1, #38	@ 0x26
 800b0c2:	187b      	adds	r3, r7, r1
 800b0c4:	881a      	ldrh	r2, [r3, #0]
 800b0c6:	2380      	movs	r3, #128	@ 0x80
 800b0c8:	01db      	lsls	r3, r3, #7
 800b0ca:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b0cc:	d000      	beq.n	800b0d0 <USB_EPStartXfer+0xd34>
 800b0ce:	e154      	b.n	800b37a <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b0d0:	187b      	adds	r3, r7, r1
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	2240      	movs	r2, #64	@ 0x40
 800b0d6:	4013      	ands	r3, r2
 800b0d8:	d000      	beq.n	800b0dc <USB_EPStartXfer+0xd40>
 800b0da:	e14e      	b.n	800b37a <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	18d3      	adds	r3, r2, r3
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a11      	ldr	r2, [pc, #68]	@ (800b130 <USB_EPStartXfer+0xd94>)
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	623b      	str	r3, [r7, #32]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	18d3      	adds	r3, r2, r3
 800b0f8:	6a3a      	ldr	r2, [r7, #32]
 800b0fa:	490e      	ldr	r1, [pc, #56]	@ (800b134 <USB_EPStartXfer+0xd98>)
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	e13b      	b.n	800b37a <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	78db      	ldrb	r3, [r3, #3]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d000      	beq.n	800b10c <USB_EPStartXfer+0xd70>
 800b10a:	e134      	b.n	800b376 <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	699a      	ldr	r2, [r3, #24]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	429a      	cmp	r2, r3
 800b116:	d90f      	bls.n	800b138 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b124:	1ad2      	subs	r2, r2, r3
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	619a      	str	r2, [r3, #24]
 800b12a:	e00b      	b.n	800b144 <USB_EPStartXfer+0xda8>
 800b12c:	40009800 	.word	0x40009800
 800b130:	07ff8f8f 	.word	0x07ff8f8f
 800b134:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2200      	movs	r2, #0
 800b142:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d162      	bne.n	800b212 <USB_EPStartXfer+0xe76>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	4a9a      	ldr	r2, [pc, #616]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b154:	4694      	mov	ip, r2
 800b156:	4463      	add	r3, ip
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4996      	ldr	r1, [pc, #600]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b162:	468c      	mov	ip, r1
 800b164:	4463      	add	r3, ip
 800b166:	0192      	lsls	r2, r2, #6
 800b168:	0992      	lsrs	r2, r2, #6
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b16e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b170:	d91e      	bls.n	800b1b0 <USB_EPStartXfer+0xe14>
 800b172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b174:	095b      	lsrs	r3, r3, #5
 800b176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b17a:	221f      	movs	r2, #31
 800b17c:	4013      	ands	r3, r2
 800b17e:	d102      	bne.n	800b186 <USB_EPStartXfer+0xdea>
 800b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b182:	3b01      	subs	r3, #1
 800b184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	4a8b      	ldr	r2, [pc, #556]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b18e:	4694      	mov	ip, r2
 800b190:	4463      	add	r3, ip
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b196:	069b      	lsls	r3, r3, #26
 800b198:	431a      	orrs	r2, r3
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	4986      	ldr	r1, [pc, #536]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b1a2:	468c      	mov	ip, r1
 800b1a4:	4463      	add	r3, ip
 800b1a6:	2180      	movs	r1, #128	@ 0x80
 800b1a8:	0609      	lsls	r1, r1, #24
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e055      	b.n	800b25c <USB_EPStartXfer+0xec0>
 800b1b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d111      	bne.n	800b1da <USB_EPStartXfer+0xe3e>
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	00db      	lsls	r3, r3, #3
 800b1bc:	4a7f      	ldr	r2, [pc, #508]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b1be:	4694      	mov	ip, r2
 800b1c0:	4463      	add	r3, ip
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	00db      	lsls	r3, r3, #3
 800b1ca:	497c      	ldr	r1, [pc, #496]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b1cc:	468c      	mov	ip, r1
 800b1ce:	4463      	add	r3, ip
 800b1d0:	2180      	movs	r1, #128	@ 0x80
 800b1d2:	0609      	lsls	r1, r1, #24
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	e040      	b.n	800b25c <USB_EPStartXfer+0xec0>
 800b1da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1dc:	085b      	lsrs	r3, r3, #1
 800b1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	d002      	beq.n	800b1ee <USB_EPStartXfer+0xe52>
 800b1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	4a71      	ldr	r2, [pc, #452]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b1f6:	4694      	mov	ip, r2
 800b1f8:	4463      	add	r3, ip
 800b1fa:	6819      	ldr	r1, [r3, #0]
 800b1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fe:	069a      	lsls	r2, r3, #26
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	00db      	lsls	r3, r3, #3
 800b206:	486d      	ldr	r0, [pc, #436]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b208:	4684      	mov	ip, r0
 800b20a:	4463      	add	r3, ip
 800b20c:	430a      	orrs	r2, r1
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	e024      	b.n	800b25c <USB_EPStartXfer+0xec0>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	785b      	ldrb	r3, [r3, #1]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d120      	bne.n	800b25c <USB_EPStartXfer+0xec0>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	4a66      	ldr	r2, [pc, #408]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b222:	4694      	mov	ip, r2
 800b224:	4463      	add	r3, ip
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	4963      	ldr	r1, [pc, #396]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b230:	468c      	mov	ip, r1
 800b232:	4463      	add	r3, ip
 800b234:	0412      	lsls	r2, r2, #16
 800b236:	0c12      	lsrs	r2, r2, #16
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	00db      	lsls	r3, r3, #3
 800b240:	4a5e      	ldr	r2, [pc, #376]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b242:	4694      	mov	ip, r2
 800b244:	4463      	add	r3, ip
 800b246:	6819      	ldr	r1, [r3, #0]
 800b248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b24a:	041a      	lsls	r2, r3, #16
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	485a      	ldr	r0, [pc, #360]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b254:	4684      	mov	ip, r0
 800b256:	4463      	add	r3, ip
 800b258:	430a      	orrs	r2, r1
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d162      	bne.n	800b32a <USB_EPStartXfer+0xf8e>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	00db      	lsls	r3, r3, #3
 800b26a:	4a54      	ldr	r2, [pc, #336]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b26c:	4694      	mov	ip, r2
 800b26e:	4463      	add	r3, ip
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	4950      	ldr	r1, [pc, #320]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b27a:	468c      	mov	ip, r1
 800b27c:	4463      	add	r3, ip
 800b27e:	0192      	lsls	r2, r2, #6
 800b280:	0992      	lsrs	r2, r2, #6
 800b282:	605a      	str	r2, [r3, #4]
 800b284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b286:	2b3e      	cmp	r3, #62	@ 0x3e
 800b288:	d91e      	bls.n	800b2c8 <USB_EPStartXfer+0xf2c>
 800b28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b28c:	095b      	lsrs	r3, r3, #5
 800b28e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b292:	221f      	movs	r2, #31
 800b294:	4013      	ands	r3, r2
 800b296:	d102      	bne.n	800b29e <USB_EPStartXfer+0xf02>
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	3b01      	subs	r3, #1
 800b29c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	00db      	lsls	r3, r3, #3
 800b2a4:	4a45      	ldr	r2, [pc, #276]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b2a6:	4694      	mov	ip, r2
 800b2a8:	4463      	add	r3, ip
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	069b      	lsls	r3, r3, #26
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	4940      	ldr	r1, [pc, #256]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b2ba:	468c      	mov	ip, r1
 800b2bc:	4463      	add	r3, ip
 800b2be:	2180      	movs	r1, #128	@ 0x80
 800b2c0:	0609      	lsls	r1, r1, #24
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	e058      	b.n	800b37a <USB_EPStartXfer+0xfde>
 800b2c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d111      	bne.n	800b2f2 <USB_EPStartXfer+0xf56>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	00db      	lsls	r3, r3, #3
 800b2d4:	4a39      	ldr	r2, [pc, #228]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b2d6:	4694      	mov	ip, r2
 800b2d8:	4463      	add	r3, ip
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	00db      	lsls	r3, r3, #3
 800b2e2:	4936      	ldr	r1, [pc, #216]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b2e4:	468c      	mov	ip, r1
 800b2e6:	4463      	add	r3, ip
 800b2e8:	2180      	movs	r1, #128	@ 0x80
 800b2ea:	0609      	lsls	r1, r1, #24
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	e043      	b.n	800b37a <USB_EPStartXfer+0xfde>
 800b2f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2f4:	085b      	lsrs	r3, r3, #1
 800b2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	d002      	beq.n	800b306 <USB_EPStartXfer+0xf6a>
 800b300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b302:	3301      	adds	r3, #1
 800b304:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	00db      	lsls	r3, r3, #3
 800b30c:	4a2b      	ldr	r2, [pc, #172]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b30e:	4694      	mov	ip, r2
 800b310:	4463      	add	r3, ip
 800b312:	6859      	ldr	r1, [r3, #4]
 800b314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b316:	069a      	lsls	r2, r3, #26
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	00db      	lsls	r3, r3, #3
 800b31e:	4827      	ldr	r0, [pc, #156]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b320:	4684      	mov	ip, r0
 800b322:	4463      	add	r3, ip
 800b324:	430a      	orrs	r2, r1
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	e027      	b.n	800b37a <USB_EPStartXfer+0xfde>
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d123      	bne.n	800b37a <USB_EPStartXfer+0xfde>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	4a20      	ldr	r2, [pc, #128]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b33a:	4694      	mov	ip, r2
 800b33c:	4463      	add	r3, ip
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	00db      	lsls	r3, r3, #3
 800b346:	491d      	ldr	r1, [pc, #116]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b348:	468c      	mov	ip, r1
 800b34a:	4463      	add	r3, ip
 800b34c:	0412      	lsls	r2, r2, #16
 800b34e:	0c12      	lsrs	r2, r2, #16
 800b350:	605a      	str	r2, [r3, #4]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	4a18      	ldr	r2, [pc, #96]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b35a:	4694      	mov	ip, r2
 800b35c:	4463      	add	r3, ip
 800b35e:	6859      	ldr	r1, [r3, #4]
 800b360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b362:	041a      	lsls	r2, r3, #16
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	4814      	ldr	r0, [pc, #80]	@ (800b3bc <USB_EPStartXfer+0x1020>)
 800b36c:	4684      	mov	ip, r0
 800b36e:	4463      	add	r3, ip
 800b370:	430a      	orrs	r2, r1
 800b372:	605a      	str	r2, [r3, #4]
 800b374:	e001      	b.n	800b37a <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e01c      	b.n	800b3b4 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	18d3      	adds	r3, r2, r3
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a0e      	ldr	r2, [pc, #56]	@ (800b3c0 <USB_EPStartXfer+0x1024>)
 800b388:	4013      	ands	r3, r2
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2280      	movs	r2, #128	@ 0x80
 800b390:	0152      	lsls	r2, r2, #5
 800b392:	4053      	eors	r3, r2
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2280      	movs	r2, #128	@ 0x80
 800b39a:	0192      	lsls	r2, r2, #6
 800b39c:	4053      	eors	r3, r2
 800b39e:	61fb      	str	r3, [r7, #28]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	18d3      	adds	r3, r2, r3
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	4905      	ldr	r1, [pc, #20]	@ (800b3c4 <USB_EPStartXfer+0x1028>)
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	b017      	add	sp, #92	@ 0x5c
 800b3ba:	bd90      	pop	{r4, r7, pc}
 800b3bc:	40009800 	.word	0x40009800
 800b3c0:	07ffbf8f 	.word	0x07ffbf8f
 800b3c4:	00008080 	.word	0x00008080

0800b3c8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	785b      	ldrb	r3, [r3, #1]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d016      	beq.n	800b408 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	18d3      	adds	r3, r2, r3
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a16      	ldr	r2, [pc, #88]	@ (800b440 <USB_EPSetStall+0x78>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	60bb      	str	r3, [r7, #8]
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2210      	movs	r2, #16
 800b3f0:	4053      	eors	r3, r2
 800b3f2:	60bb      	str	r3, [r7, #8]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	18d3      	adds	r3, r2, r3
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	4910      	ldr	r1, [pc, #64]	@ (800b444 <USB_EPSetStall+0x7c>)
 800b402:	430a      	orrs	r2, r1
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	e016      	b.n	800b436 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	18d3      	adds	r3, r2, r3
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a0c      	ldr	r2, [pc, #48]	@ (800b448 <USB_EPSetStall+0x80>)
 800b416:	4013      	ands	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2280      	movs	r2, #128	@ 0x80
 800b41e:	0152      	lsls	r2, r2, #5
 800b420:	4053      	eors	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	18d3      	adds	r3, r2, r3
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4904      	ldr	r1, [pc, #16]	@ (800b444 <USB_EPSetStall+0x7c>)
 800b432:	430a      	orrs	r2, r1
 800b434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	0018      	movs	r0, r3
 800b43a:	46bd      	mov	sp, r7
 800b43c:	b004      	add	sp, #16
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	07ff8fbf 	.word	0x07ff8fbf
 800b444:	00008080 	.word	0x00008080
 800b448:	07ffbf8f 	.word	0x07ffbf8f

0800b44c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	7b1b      	ldrb	r3, [r3, #12]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d000      	beq.n	800b460 <USB_EPClearStall+0x14>
 800b45e:	e075      	b.n	800b54c <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d037      	beq.n	800b4d8 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	18d3      	adds	r3, r2, r3
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2240      	movs	r2, #64	@ 0x40
 800b47a:	4013      	ands	r3, r2
 800b47c:	d011      	beq.n	800b4a2 <USB_EPClearStall+0x56>
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	18d3      	adds	r3, r2, r3
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a33      	ldr	r2, [pc, #204]	@ (800b558 <USB_EPClearStall+0x10c>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	18d3      	adds	r3, r2, r3
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	492f      	ldr	r1, [pc, #188]	@ (800b55c <USB_EPClearStall+0x110>)
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	78db      	ldrb	r3, [r3, #3]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d050      	beq.n	800b54c <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	18d3      	adds	r3, r2, r3
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b560 <USB_EPClearStall+0x114>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	60bb      	str	r3, [r7, #8]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2220      	movs	r2, #32
 800b4c0:	4053      	eors	r3, r2
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	18d3      	adds	r3, r2, r3
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	4924      	ldr	r1, [pc, #144]	@ (800b564 <USB_EPClearStall+0x118>)
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	601a      	str	r2, [r3, #0]
 800b4d6:	e039      	b.n	800b54c <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	18d3      	adds	r3, r2, r3
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	69fa      	ldr	r2, [r7, #28]
 800b4e8:	2380      	movs	r3, #128	@ 0x80
 800b4ea:	01db      	lsls	r3, r3, #7
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	d011      	beq.n	800b514 <USB_EPClearStall+0xc8>
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	18d3      	adds	r3, r2, r3
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a16      	ldr	r2, [pc, #88]	@ (800b558 <USB_EPClearStall+0x10c>)
 800b4fe:	4013      	ands	r3, r2
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	18d3      	adds	r3, r2, r3
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	4916      	ldr	r1, [pc, #88]	@ (800b568 <USB_EPClearStall+0x11c>)
 800b510:	430a      	orrs	r2, r1
 800b512:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	18d3      	adds	r3, r2, r3
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a12      	ldr	r2, [pc, #72]	@ (800b56c <USB_EPClearStall+0x120>)
 800b522:	4013      	ands	r3, r2
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2280      	movs	r2, #128	@ 0x80
 800b52a:	0152      	lsls	r2, r2, #5
 800b52c:	4053      	eors	r3, r2
 800b52e:	617b      	str	r3, [r7, #20]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2280      	movs	r2, #128	@ 0x80
 800b534:	0192      	lsls	r2, r2, #6
 800b536:	4053      	eors	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	18d3      	adds	r3, r2, r3
 800b544:	697a      	ldr	r2, [r7, #20]
 800b546:	4907      	ldr	r1, [pc, #28]	@ (800b564 <USB_EPClearStall+0x118>)
 800b548:	430a      	orrs	r2, r1
 800b54a:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	0018      	movs	r0, r3
 800b550:	46bd      	mov	sp, r7
 800b552:	b008      	add	sp, #32
 800b554:	bd80      	pop	{r7, pc}
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	07ff8f8f 	.word	0x07ff8f8f
 800b55c:	000080c0 	.word	0x000080c0
 800b560:	07ff8fbf 	.word	0x07ff8fbf
 800b564:	00008080 	.word	0x00008080
 800b568:	0000c080 	.word	0x0000c080
 800b56c:	07ffbf8f 	.word	0x07ffbf8f

0800b570 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	000a      	movs	r2, r1
 800b57a:	1cfb      	adds	r3, r7, #3
 800b57c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b57e:	1cfb      	adds	r3, r7, #3
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2280      	movs	r2, #128	@ 0x80
 800b58a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	0018      	movs	r0, r3
 800b590:	46bd      	mov	sp, r7
 800b592:	b002      	add	sp, #8
 800b594:	bd80      	pop	{r7, pc}

0800b596 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5a2:	2280      	movs	r2, #128	@ 0x80
 800b5a4:	0212      	lsls	r2, r2, #8
 800b5a6:	431a      	orrs	r2, r3
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	0018      	movs	r0, r3
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	b002      	add	sp, #8
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
}
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	b004      	add	sp, #16
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	@ 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	0019      	movs	r1, r3
 800b5dc:	1dbb      	adds	r3, r7, #6
 800b5de:	801a      	strh	r2, [r3, #0]
 800b5e0:	1d3b      	adds	r3, r7, #4
 800b5e2:	1c0a      	adds	r2, r1, #0
 800b5e4:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800b5e6:	1d3b      	adds	r3, r7, #4
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	3303      	adds	r3, #3
 800b5ec:	089b      	lsrs	r3, r3, #2
 800b5ee:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800b5f0:	2016      	movs	r0, #22
 800b5f2:	183b      	adds	r3, r7, r0
 800b5f4:	1d3a      	adds	r2, r7, #4
 800b5f6:	8812      	ldrh	r2, [r2, #0]
 800b5f8:	2103      	movs	r1, #3
 800b5fa:	400a      	ands	r2, r1
 800b5fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800b602:	183b      	adds	r3, r7, r0
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <USB_WritePMA+0x40>
  {
    NbWords--;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800b610:	1dbb      	adds	r3, r7, #6
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	4a28      	ldr	r2, [pc, #160]	@ (800b6b8 <USB_WritePMA+0xe8>)
 800b616:	4694      	mov	ip, r2
 800b618:	4463      	add	r3, ip
 800b61a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	623b      	str	r3, [r7, #32]
 800b620:	e01f      	b.n	800b662 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	781a      	ldrb	r2, [r3, #0]
 800b626:	7859      	ldrb	r1, [r3, #1]
 800b628:	0209      	lsls	r1, r1, #8
 800b62a:	430a      	orrs	r2, r1
 800b62c:	7899      	ldrb	r1, [r3, #2]
 800b62e:	0409      	lsls	r1, r1, #16
 800b630:	430a      	orrs	r2, r1
 800b632:	78db      	ldrb	r3, [r3, #3]
 800b634:	061b      	lsls	r3, r3, #24
 800b636:	4313      	orrs	r3, r2
 800b638:	001a      	movs	r2, r3
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	3304      	adds	r3, #4
 800b642:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	3301      	adds	r3, #1
 800b648:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3301      	adds	r3, #1
 800b64e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	3301      	adds	r3, #1
 800b654:	613b      	str	r3, [r7, #16]
    pBuf++;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	3301      	adds	r3, #1
 800b65a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	3b01      	subs	r3, #1
 800b660:	623b      	str	r3, [r7, #32]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1dc      	bne.n	800b622 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800b668:	2316      	movs	r3, #22
 800b66a:	18fb      	adds	r3, r7, r3
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d01e      	beq.n	800b6b0 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	001a      	movs	r2, r3
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	409a      	lsls	r2, r3
 800b682:	0013      	movs	r3, r2
 800b684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b686:	4313      	orrs	r3, r2
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	3301      	adds	r3, #1
 800b68e:	623b      	str	r3, [r7, #32]
      pBuf++;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	3301      	adds	r3, #1
 800b694:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800b696:	2116      	movs	r1, #22
 800b698:	187b      	adds	r3, r7, r1
 800b69a:	881a      	ldrh	r2, [r3, #0]
 800b69c:	187b      	adds	r3, r7, r1
 800b69e:	3a01      	subs	r2, #1
 800b6a0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800b6a2:	187b      	adds	r3, r7, r1
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e5      	bne.n	800b676 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ae:	601a      	str	r2, [r3, #0]
  }
}
 800b6b0:	46c0      	nop			@ (mov r8, r8)
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	b00a      	add	sp, #40	@ 0x28
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	40009800 	.word	0x40009800

0800b6bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b6bc:	b590      	push	{r4, r7, lr}
 800b6be:	b08b      	sub	sp, #44	@ 0x2c
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	0019      	movs	r1, r3
 800b6c8:	1dbb      	adds	r3, r7, #6
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	1d3b      	adds	r3, r7, #4
 800b6ce:	1c0a      	adds	r2, r1, #0
 800b6d0:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800b6d2:	1d3b      	adds	r3, r7, #4
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	089b      	lsrs	r3, r3, #2
 800b6da:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800b6dc:	201a      	movs	r0, #26
 800b6de:	183b      	adds	r3, r7, r0
 800b6e0:	1d3a      	adds	r2, r7, #4
 800b6e2:	8812      	ldrh	r2, [r2, #0]
 800b6e4:	2103      	movs	r1, #3
 800b6e6:	400a      	ands	r2, r1
 800b6e8:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800b6ee:	1dbb      	adds	r3, r7, #6
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	4a39      	ldr	r2, [pc, #228]	@ (800b7d8 <USB_ReadPMA+0x11c>)
 800b6f4:	4694      	mov	ip, r2
 800b6f6:	4463      	add	r3, ip
 800b6f8:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800b6fa:	183b      	adds	r3, r7, r0
 800b6fc:	881b      	ldrh	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	3b01      	subs	r3, #1
 800b706:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b70c:	e03c      	b.n	800b788 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	21ff      	movs	r1, #255	@ 0xff
 800b716:	4011      	ands	r1, r2
 800b718:	000c      	movs	r4, r1
 800b71a:	7819      	ldrb	r1, [r3, #0]
 800b71c:	2000      	movs	r0, #0
 800b71e:	4001      	ands	r1, r0
 800b720:	1c08      	adds	r0, r1, #0
 800b722:	1c21      	adds	r1, r4, #0
 800b724:	4301      	orrs	r1, r0
 800b726:	7019      	strb	r1, [r3, #0]
 800b728:	0a11      	lsrs	r1, r2, #8
 800b72a:	20ff      	movs	r0, #255	@ 0xff
 800b72c:	4001      	ands	r1, r0
 800b72e:	000c      	movs	r4, r1
 800b730:	7859      	ldrb	r1, [r3, #1]
 800b732:	2000      	movs	r0, #0
 800b734:	4001      	ands	r1, r0
 800b736:	1c08      	adds	r0, r1, #0
 800b738:	1c21      	adds	r1, r4, #0
 800b73a:	4301      	orrs	r1, r0
 800b73c:	7059      	strb	r1, [r3, #1]
 800b73e:	0c11      	lsrs	r1, r2, #16
 800b740:	20ff      	movs	r0, #255	@ 0xff
 800b742:	4001      	ands	r1, r0
 800b744:	000c      	movs	r4, r1
 800b746:	7899      	ldrb	r1, [r3, #2]
 800b748:	2000      	movs	r0, #0
 800b74a:	4001      	ands	r1, r0
 800b74c:	1c08      	adds	r0, r1, #0
 800b74e:	1c21      	adds	r1, r4, #0
 800b750:	4301      	orrs	r1, r0
 800b752:	7099      	strb	r1, [r3, #2]
 800b754:	0e10      	lsrs	r0, r2, #24
 800b756:	78da      	ldrb	r2, [r3, #3]
 800b758:	2100      	movs	r1, #0
 800b75a:	400a      	ands	r2, r1
 800b75c:	1c11      	adds	r1, r2, #0
 800b75e:	1c02      	adds	r2, r0, #0
 800b760:	430a      	orrs	r2, r1
 800b762:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	3304      	adds	r3, #4
 800b768:	623b      	str	r3, [r7, #32]
    pBuf++;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	3301      	adds	r3, #1
 800b76e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	3301      	adds	r3, #1
 800b774:	617b      	str	r3, [r7, #20]
    pBuf++;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	3301      	adds	r3, #1
 800b77a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	3301      	adds	r3, #1
 800b780:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800b782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b784:	3b01      	subs	r3, #1
 800b786:	627b      	str	r3, [r7, #36]	@ 0x24
 800b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1bf      	bne.n	800b70e <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800b78e:	231a      	movs	r3, #26
 800b790:	18fb      	adds	r3, r7, r3
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01b      	beq.n	800b7d0 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	00db      	lsls	r3, r3, #3
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	40da      	lsrs	r2, r3
 800b7a8:	0013      	movs	r3, r2
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	701a      	strb	r2, [r3, #0]
      count++;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800b7bc:	211a      	movs	r1, #26
 800b7be:	187b      	adds	r3, r7, r1
 800b7c0:	881a      	ldrh	r2, [r3, #0]
 800b7c2:	187b      	adds	r3, r7, r1
 800b7c4:	3a01      	subs	r2, #1
 800b7c6:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800b7c8:	187b      	adds	r3, r7, r1
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e6      	bne.n	800b79e <USB_ReadPMA+0xe2>
  }
}
 800b7d0:	46c0      	nop			@ (mov r8, r8)
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	b00b      	add	sp, #44	@ 0x2c
 800b7d6:	bd90      	pop	{r4, r7, pc}
 800b7d8:	40009800 	.word	0x40009800

0800b7dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	000a      	movs	r2, r1
 800b7e6:	1cfb      	adds	r3, r7, #3
 800b7e8:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b7ea:	2387      	movs	r3, #135	@ 0x87
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	0018      	movs	r0, r3
 800b7f0:	f002 ff74 	bl	800e6dc <USBD_static_malloc>
 800b7f4:	0003      	movs	r3, r0
 800b7f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	23b5      	movs	r3, #181	@ 0xb5
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	58d2      	ldr	r2, [r2, r3]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	32b0      	adds	r2, #176	@ 0xb0
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	2100      	movs	r1, #0
 800b80e:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800b810:	2302      	movs	r3, #2
 800b812:	e0e9      	b.n	800b9e8 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b814:	2387      	movs	r3, #135	@ 0x87
 800b816:	009a      	lsls	r2, r3, #2
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2100      	movs	r1, #0
 800b81c:	0018      	movs	r0, r3
 800b81e:	f004 fb79 	bl	800ff14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	23b5      	movs	r3, #181	@ 0xb5
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	58d2      	ldr	r2, [r2, r3]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	32b0      	adds	r2, #176	@ 0xb0
 800b82e:	0092      	lsls	r2, r2, #2
 800b830:	68f9      	ldr	r1, [r7, #12]
 800b832:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	23b5      	movs	r3, #181	@ 0xb5
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	58d2      	ldr	r2, [r2, r3]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	32b0      	adds	r2, #176	@ 0xb0
 800b840:	0092      	lsls	r2, r2, #2
 800b842:	58d1      	ldr	r1, [r2, r3]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	23af      	movs	r3, #175	@ 0xaf
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7c1b      	ldrb	r3, [r3, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d13c      	bne.n	800b8ce <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b854:	4b66      	ldr	r3, [pc, #408]	@ (800b9f0 <USBD_CDC_Init+0x214>)
 800b856:	7819      	ldrb	r1, [r3, #0]
 800b858:	2380      	movs	r3, #128	@ 0x80
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f002 fd79 	bl	800e356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b864:	4b62      	ldr	r3, [pc, #392]	@ (800b9f0 <USBD_CDC_Init+0x214>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	001a      	movs	r2, r3
 800b86a:	230f      	movs	r3, #15
 800b86c:	401a      	ands	r2, r3
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	0013      	movs	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	189b      	adds	r3, r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	18cb      	adds	r3, r1, r3
 800b87a:	3324      	adds	r3, #36	@ 0x24
 800b87c:	2201      	movs	r2, #1
 800b87e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b880:	4b5c      	ldr	r3, [pc, #368]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b882:	7819      	ldrb	r1, [r3, #0]
 800b884:	2380      	movs	r3, #128	@ 0x80
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f002 fd63 	bl	800e356 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b890:	4b58      	ldr	r3, [pc, #352]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	001a      	movs	r2, r3
 800b896:	230f      	movs	r3, #15
 800b898:	401a      	ands	r2, r3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	23b2      	movs	r3, #178	@ 0xb2
 800b89e:	0059      	lsls	r1, r3, #1
 800b8a0:	0013      	movs	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	189b      	adds	r3, r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	18c3      	adds	r3, r0, r3
 800b8aa:	185b      	adds	r3, r3, r1
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8b0:	4b51      	ldr	r3, [pc, #324]	@ (800b9f8 <USBD_CDC_Init+0x21c>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	001a      	movs	r2, r3
 800b8b6:	230f      	movs	r3, #15
 800b8b8:	401a      	ands	r2, r3
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	0013      	movs	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	189b      	adds	r3, r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	18cb      	adds	r3, r1, r3
 800b8c6:	3326      	adds	r3, #38	@ 0x26
 800b8c8:	2210      	movs	r2, #16
 800b8ca:	801a      	strh	r2, [r3, #0]
 800b8cc:	e039      	b.n	800b942 <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b8ce:	4b48      	ldr	r3, [pc, #288]	@ (800b9f0 <USBD_CDC_Init+0x214>)
 800b8d0:	7819      	ldrb	r1, [r3, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	2340      	movs	r3, #64	@ 0x40
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f002 fd3d 	bl	800e356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8dc:	4b44      	ldr	r3, [pc, #272]	@ (800b9f0 <USBD_CDC_Init+0x214>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	001a      	movs	r2, r3
 800b8e2:	230f      	movs	r3, #15
 800b8e4:	401a      	ands	r2, r3
 800b8e6:	6879      	ldr	r1, [r7, #4]
 800b8e8:	0013      	movs	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	189b      	adds	r3, r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	18cb      	adds	r3, r1, r3
 800b8f2:	3324      	adds	r3, #36	@ 0x24
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b8fa:	7819      	ldrb	r1, [r3, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	2340      	movs	r3, #64	@ 0x40
 800b900:	2202      	movs	r2, #2
 800b902:	f002 fd28 	bl	800e356 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b906:	4b3b      	ldr	r3, [pc, #236]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	001a      	movs	r2, r3
 800b90c:	230f      	movs	r3, #15
 800b90e:	401a      	ands	r2, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	23b2      	movs	r3, #178	@ 0xb2
 800b914:	0059      	lsls	r1, r3, #1
 800b916:	0013      	movs	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	189b      	adds	r3, r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	18c3      	adds	r3, r0, r3
 800b920:	185b      	adds	r3, r3, r1
 800b922:	2201      	movs	r2, #1
 800b924:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b926:	4b34      	ldr	r3, [pc, #208]	@ (800b9f8 <USBD_CDC_Init+0x21c>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	001a      	movs	r2, r3
 800b92c:	230f      	movs	r3, #15
 800b92e:	401a      	ands	r2, r3
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	0013      	movs	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	189b      	adds	r3, r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	18cb      	adds	r3, r1, r3
 800b93c:	3326      	adds	r3, #38	@ 0x26
 800b93e:	2210      	movs	r2, #16
 800b940:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b942:	4b2d      	ldr	r3, [pc, #180]	@ (800b9f8 <USBD_CDC_Init+0x21c>)
 800b944:	7819      	ldrb	r1, [r3, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	2308      	movs	r3, #8
 800b94a:	2203      	movs	r2, #3
 800b94c:	f002 fd03 	bl	800e356 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b950:	4b29      	ldr	r3, [pc, #164]	@ (800b9f8 <USBD_CDC_Init+0x21c>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	001a      	movs	r2, r3
 800b956:	230f      	movs	r3, #15
 800b958:	401a      	ands	r2, r3
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	0013      	movs	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	189b      	adds	r3, r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	18cb      	adds	r3, r1, r3
 800b966:	3324      	adds	r3, #36	@ 0x24
 800b968:	2201      	movs	r2, #1
 800b96a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	2381      	movs	r3, #129	@ 0x81
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	2100      	movs	r1, #0
 800b974:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	23b5      	movs	r3, #181	@ 0xb5
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	58d3      	ldr	r3, [r2, r3]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	33b0      	adds	r3, #176	@ 0xb0
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	18d3      	adds	r3, r2, r3
 800b986:	3304      	adds	r3, #4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	2385      	movs	r3, #133	@ 0x85
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	2100      	movs	r1, #0
 800b996:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	2386      	movs	r3, #134	@ 0x86
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	2100      	movs	r1, #0
 800b9a0:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	2381      	movs	r3, #129	@ 0x81
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	58d3      	ldr	r3, [r2, r3]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	e01a      	b.n	800b9e8 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	7c1b      	ldrb	r3, [r3, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10b      	bne.n	800b9d2 <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b9bc:	7819      	ldrb	r1, [r3, #0]
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	2381      	movs	r3, #129	@ 0x81
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	58d2      	ldr	r2, [r2, r3]
 800b9c6:	2380      	movs	r3, #128	@ 0x80
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f002 fe06 	bl	800e5dc <USBD_LL_PrepareReceive>
 800b9d0:	e009      	b.n	800b9e6 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d2:	4b08      	ldr	r3, [pc, #32]	@ (800b9f4 <USBD_CDC_Init+0x218>)
 800b9d4:	7819      	ldrb	r1, [r3, #0]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	2381      	movs	r3, #129	@ 0x81
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	58d2      	ldr	r2, [r2, r3]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	2340      	movs	r3, #64	@ 0x40
 800b9e2:	f002 fdfb 	bl	800e5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	0018      	movs	r0, r3
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	b004      	add	sp, #16
 800b9ee:	bd80      	pop	{r7, pc}
 800b9f0:	20000123 	.word	0x20000123
 800b9f4:	20000124 	.word	0x20000124
 800b9f8:	20000125 	.word	0x20000125

0800b9fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	000a      	movs	r2, r1
 800ba06:	1cfb      	adds	r3, r7, #3
 800ba08:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba0a:	4b41      	ldr	r3, [pc, #260]	@ (800bb10 <USBD_CDC_DeInit+0x114>)
 800ba0c:	781a      	ldrb	r2, [r3, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	0011      	movs	r1, r2
 800ba12:	0018      	movs	r0, r3
 800ba14:	f002 fcd6 	bl	800e3c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba18:	4b3d      	ldr	r3, [pc, #244]	@ (800bb10 <USBD_CDC_DeInit+0x114>)
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	001a      	movs	r2, r3
 800ba1e:	230f      	movs	r3, #15
 800ba20:	401a      	ands	r2, r3
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	0013      	movs	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	189b      	adds	r3, r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	18cb      	adds	r3, r1, r3
 800ba2e:	3324      	adds	r3, #36	@ 0x24
 800ba30:	2200      	movs	r2, #0
 800ba32:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba34:	4b37      	ldr	r3, [pc, #220]	@ (800bb14 <USBD_CDC_DeInit+0x118>)
 800ba36:	781a      	ldrb	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	0011      	movs	r1, r2
 800ba3c:	0018      	movs	r0, r3
 800ba3e:	f002 fcc1 	bl	800e3c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba42:	4b34      	ldr	r3, [pc, #208]	@ (800bb14 <USBD_CDC_DeInit+0x118>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	001a      	movs	r2, r3
 800ba48:	230f      	movs	r3, #15
 800ba4a:	401a      	ands	r2, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	23b2      	movs	r3, #178	@ 0xb2
 800ba50:	0059      	lsls	r1, r3, #1
 800ba52:	0013      	movs	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	189b      	adds	r3, r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	18c3      	adds	r3, r0, r3
 800ba5c:	185b      	adds	r3, r3, r1
 800ba5e:	2200      	movs	r2, #0
 800ba60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba62:	4b2d      	ldr	r3, [pc, #180]	@ (800bb18 <USBD_CDC_DeInit+0x11c>)
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	0011      	movs	r1, r2
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f002 fcaa 	bl	800e3c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba70:	4b29      	ldr	r3, [pc, #164]	@ (800bb18 <USBD_CDC_DeInit+0x11c>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	001a      	movs	r2, r3
 800ba76:	230f      	movs	r3, #15
 800ba78:	401a      	ands	r2, r3
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	0013      	movs	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	189b      	adds	r3, r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	18cb      	adds	r3, r1, r3
 800ba86:	3324      	adds	r3, #36	@ 0x24
 800ba88:	2200      	movs	r2, #0
 800ba8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ba8c:	4b22      	ldr	r3, [pc, #136]	@ (800bb18 <USBD_CDC_DeInit+0x11c>)
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	001a      	movs	r2, r3
 800ba92:	230f      	movs	r3, #15
 800ba94:	401a      	ands	r2, r3
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	0013      	movs	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	189b      	adds	r3, r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	18cb      	adds	r3, r1, r3
 800baa2:	3326      	adds	r3, #38	@ 0x26
 800baa4:	2200      	movs	r2, #0
 800baa6:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	23b5      	movs	r3, #181	@ 0xb5
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	58d2      	ldr	r2, [r2, r3]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	32b0      	adds	r2, #176	@ 0xb0
 800bab4:	0092      	lsls	r2, r2, #2
 800bab6:	58d3      	ldr	r3, [r2, r3]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d024      	beq.n	800bb06 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	23b5      	movs	r3, #181	@ 0xb5
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	58d3      	ldr	r3, [r2, r3]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	33b0      	adds	r3, #176	@ 0xb0
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	18d3      	adds	r3, r2, r3
 800bacc:	3304      	adds	r3, #4
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	23b5      	movs	r3, #181	@ 0xb5
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	58d2      	ldr	r2, [r2, r3]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	32b0      	adds	r2, #176	@ 0xb0
 800bae0:	0092      	lsls	r2, r2, #2
 800bae2:	58d3      	ldr	r3, [r2, r3]
 800bae4:	0018      	movs	r0, r3
 800bae6:	f002 fe05 	bl	800e6f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	23b5      	movs	r3, #181	@ 0xb5
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	58d2      	ldr	r2, [r2, r3]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	32b0      	adds	r2, #176	@ 0xb0
 800baf6:	0092      	lsls	r2, r2, #2
 800baf8:	2100      	movs	r1, #0
 800bafa:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	23af      	movs	r3, #175	@ 0xaf
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	2100      	movs	r1, #0
 800bb04:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	0018      	movs	r0, r3
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	b002      	add	sp, #8
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000123 	.word	0x20000123
 800bb14:	20000124 	.word	0x20000124
 800bb18:	20000125 	.word	0x20000125

0800bb1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	23b5      	movs	r3, #181	@ 0xb5
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	58d2      	ldr	r2, [r2, r3]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32b0      	adds	r2, #176	@ 0xb0
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	58d3      	ldr	r3, [r2, r3]
 800bb36:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb38:	230d      	movs	r3, #13
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bb40:	230a      	movs	r3, #10
 800bb42:	18fb      	adds	r3, r7, r3
 800bb44:	2200      	movs	r2, #0
 800bb46:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb48:	2317      	movs	r3, #23
 800bb4a:	18fb      	adds	r3, r7, r3
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d101      	bne.n	800bb5a <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e0d1      	b.n	800bcfe <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	001a      	movs	r2, r3
 800bb60:	2360      	movs	r3, #96	@ 0x60
 800bb62:	4013      	ands	r3, r2
 800bb64:	d05b      	beq.n	800bc1e <USBD_CDC_Setup+0x102>
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	d000      	beq.n	800bb6c <USBD_CDC_Setup+0x50>
 800bb6a:	e0ba      	b.n	800bce2 <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	88db      	ldrh	r3, [r3, #6]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d043      	beq.n	800bbfc <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da22      	bge.n	800bbc4 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	23b5      	movs	r3, #181	@ 0xb5
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	58d3      	ldr	r3, [r2, r3]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	33b0      	adds	r3, #176	@ 0xb0
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	18d3      	adds	r3, r2, r3
 800bb8e:	3304      	adds	r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb9a:	683a      	ldr	r2, [r7, #0]
 800bb9c:	88d2      	ldrh	r2, [r2, #6]
 800bb9e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	88db      	ldrh	r3, [r3, #6]
 800bba4:	220e      	movs	r2, #14
 800bba6:	18ba      	adds	r2, r7, r2
 800bba8:	b299      	uxth	r1, r3
 800bbaa:	2907      	cmp	r1, #7
 800bbac:	d900      	bls.n	800bbb0 <USBD_CDC_Setup+0x94>
 800bbae:	2307      	movs	r3, #7
 800bbb0:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bbb2:	6939      	ldr	r1, [r7, #16]
 800bbb4:	230e      	movs	r3, #14
 800bbb6:	18fb      	adds	r3, r7, r3
 800bbb8:	881a      	ldrh	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f001 ff87 	bl	800dad0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bbc2:	e099      	b.n	800bcf8 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	7859      	ldrb	r1, [r3, #1]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	2380      	movs	r3, #128	@ 0x80
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	88db      	ldrh	r3, [r3, #6]
 800bbd4:	2b3f      	cmp	r3, #63	@ 0x3f
 800bbd6:	d803      	bhi.n	800bbe0 <USBD_CDC_Setup+0xc4>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	88db      	ldrh	r3, [r3, #6]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	e000      	b.n	800bbe2 <USBD_CDC_Setup+0xc6>
 800bbe0:	2240      	movs	r2, #64	@ 0x40
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	4948      	ldr	r1, [pc, #288]	@ (800bd08 <USBD_CDC_Setup+0x1ec>)
 800bbe6:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bbe8:	6939      	ldr	r1, [r7, #16]
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	4a46      	ldr	r2, [pc, #280]	@ (800bd08 <USBD_CDC_Setup+0x1ec>)
 800bbee:	5c9b      	ldrb	r3, [r3, r2]
 800bbf0:	001a      	movs	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	0018      	movs	r0, r3
 800bbf6:	f001 ff98 	bl	800db2a <USBD_CtlPrepareRx>
      break;
 800bbfa:	e07d      	b.n	800bcf8 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	23b5      	movs	r3, #181	@ 0xb5
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	58d3      	ldr	r3, [r2, r3]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	33b0      	adds	r3, #176	@ 0xb0
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	18d3      	adds	r3, r2, r3
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	683a      	ldr	r2, [r7, #0]
 800bc14:	7850      	ldrb	r0, [r2, #1]
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4798      	blx	r3
      break;
 800bc1c:	e06c      	b.n	800bcf8 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	785b      	ldrb	r3, [r3, #1]
 800bc22:	2b0b      	cmp	r3, #11
 800bc24:	d03c      	beq.n	800bca0 <USBD_CDC_Setup+0x184>
 800bc26:	dc4d      	bgt.n	800bcc4 <USBD_CDC_Setup+0x1a8>
 800bc28:	2b0a      	cmp	r3, #10
 800bc2a:	d01f      	beq.n	800bc6c <USBD_CDC_Setup+0x150>
 800bc2c:	dc4a      	bgt.n	800bcc4 <USBD_CDC_Setup+0x1a8>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <USBD_CDC_Setup+0x11c>
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d051      	beq.n	800bcda <USBD_CDC_Setup+0x1be>
 800bc36:	e045      	b.n	800bcc4 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	23a7      	movs	r3, #167	@ 0xa7
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	5cd3      	ldrb	r3, [r2, r3]
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d107      	bne.n	800bc56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc46:	230a      	movs	r3, #10
 800bc48:	18f9      	adds	r1, r7, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f001 ff3e 	bl	800dad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc54:	e044      	b.n	800bce0 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	0011      	movs	r1, r2
 800bc5c:	0018      	movs	r0, r3
 800bc5e:	f001 feaf 	bl	800d9c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc62:	2317      	movs	r3, #23
 800bc64:	18fb      	adds	r3, r7, r3
 800bc66:	2203      	movs	r2, #3
 800bc68:	701a      	strb	r2, [r3, #0]
          break;
 800bc6a:	e039      	b.n	800bce0 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	23a7      	movs	r3, #167	@ 0xa7
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	5cd3      	ldrb	r3, [r2, r3]
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d107      	bne.n	800bc8a <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc7a:	230d      	movs	r3, #13
 800bc7c:	18f9      	adds	r1, r7, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	0018      	movs	r0, r3
 800bc84:	f001 ff24 	bl	800dad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc88:	e02a      	b.n	800bce0 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	0011      	movs	r1, r2
 800bc90:	0018      	movs	r0, r3
 800bc92:	f001 fe95 	bl	800d9c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc96:	2317      	movs	r3, #23
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	2203      	movs	r2, #3
 800bc9c:	701a      	strb	r2, [r3, #0]
          break;
 800bc9e:	e01f      	b.n	800bce0 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	23a7      	movs	r3, #167	@ 0xa7
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	5cd3      	ldrb	r3, [r2, r3]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d017      	beq.n	800bcde <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	0011      	movs	r1, r2
 800bcb4:	0018      	movs	r0, r3
 800bcb6:	f001 fe83 	bl	800d9c0 <USBD_CtlError>
            ret = USBD_FAIL;
 800bcba:	2317      	movs	r3, #23
 800bcbc:	18fb      	adds	r3, r7, r3
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	701a      	strb	r2, [r3, #0]
          }
          break;
 800bcc2:	e00c      	b.n	800bcde <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	0011      	movs	r1, r2
 800bcca:	0018      	movs	r0, r3
 800bccc:	f001 fe78 	bl	800d9c0 <USBD_CtlError>
          ret = USBD_FAIL;
 800bcd0:	2317      	movs	r3, #23
 800bcd2:	18fb      	adds	r3, r7, r3
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	701a      	strb	r2, [r3, #0]
          break;
 800bcd8:	e002      	b.n	800bce0 <USBD_CDC_Setup+0x1c4>
          break;
 800bcda:	46c0      	nop			@ (mov r8, r8)
 800bcdc:	e00c      	b.n	800bcf8 <USBD_CDC_Setup+0x1dc>
          break;
 800bcde:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bce0:	e00a      	b.n	800bcf8 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	0011      	movs	r1, r2
 800bce8:	0018      	movs	r0, r3
 800bcea:	f001 fe69 	bl	800d9c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800bcee:	2317      	movs	r3, #23
 800bcf0:	18fb      	adds	r3, r7, r3
 800bcf2:	2203      	movs	r2, #3
 800bcf4:	701a      	strb	r2, [r3, #0]
      break;
 800bcf6:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 800bcf8:	2317      	movs	r3, #23
 800bcfa:	18fb      	adds	r3, r7, r3
 800bcfc:	781b      	ldrb	r3, [r3, #0]
}
 800bcfe:	0018      	movs	r0, r3
 800bd00:	46bd      	mov	sp, r7
 800bd02:	b006      	add	sp, #24
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	46c0      	nop			@ (mov r8, r8)
 800bd08:	00000201 	.word	0x00000201

0800bd0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	000a      	movs	r2, r1
 800bd16:	1cfb      	adds	r3, r7, #3
 800bd18:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	23b2      	movs	r3, #178	@ 0xb2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	58d3      	ldr	r3, [r2, r3]
 800bd22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	23b5      	movs	r3, #181	@ 0xb5
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	58d2      	ldr	r2, [r2, r3]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	32b0      	adds	r2, #176	@ 0xb0
 800bd30:	0092      	lsls	r2, r2, #2
 800bd32:	58d3      	ldr	r3, [r2, r3]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e072      	b.n	800be22 <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	23b5      	movs	r3, #181	@ 0xb5
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	58d2      	ldr	r2, [r2, r3]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	32b0      	adds	r2, #176	@ 0xb0
 800bd48:	0092      	lsls	r2, r2, #2
 800bd4a:	58d3      	ldr	r3, [r2, r3]
 800bd4c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd4e:	1cfb      	adds	r3, r7, #3
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	220f      	movs	r2, #15
 800bd54:	401a      	ands	r2, r3
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	0013      	movs	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	18cb      	adds	r3, r1, r3
 800bd62:	3318      	adds	r3, #24
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d031      	beq.n	800bdce <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd6a:	1cfb      	adds	r3, r7, #3
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	220f      	movs	r2, #15
 800bd70:	401a      	ands	r2, r3
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	0013      	movs	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	189b      	adds	r3, r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	18cb      	adds	r3, r1, r3
 800bd7e:	3318      	adds	r3, #24
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	1cfb      	adds	r3, r7, #3
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	220f      	movs	r2, #15
 800bd88:	401a      	ands	r2, r3
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	0013      	movs	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	189b      	adds	r3, r3, r2
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	18cb      	adds	r3, r1, r3
 800bd96:	3324      	adds	r3, #36	@ 0x24
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	0019      	movs	r1, r3
 800bd9c:	f7f4 fa52 	bl	8000244 <__aeabi_uidivmod>
 800bda0:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bda2:	d114      	bne.n	800bdce <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bda4:	1cfb      	adds	r3, r7, #3
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	220f      	movs	r2, #15
 800bdaa:	401a      	ands	r2, r3
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	0013      	movs	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	189b      	adds	r3, r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	18cb      	adds	r3, r1, r3
 800bdb8:	3318      	adds	r3, #24
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bdbe:	1cfb      	adds	r3, r7, #3
 800bdc0:	7819      	ldrb	r1, [r3, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f002 fbd8 	bl	800e57c <USBD_LL_Transmit>
 800bdcc:	e028      	b.n	800be20 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	2385      	movs	r3, #133	@ 0x85
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	23b5      	movs	r3, #181	@ 0xb5
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	58d3      	ldr	r3, [r2, r3]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	33b0      	adds	r3, #176	@ 0xb0
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	18d3      	adds	r3, r2, r3
 800bde8:	3304      	adds	r3, #4
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d016      	beq.n	800be20 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	23b5      	movs	r3, #181	@ 0xb5
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	58d3      	ldr	r3, [r2, r3]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	33b0      	adds	r3, #176	@ 0xb0
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	18d3      	adds	r3, r2, r3
 800be02:	3304      	adds	r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	691c      	ldr	r4, [r3, #16]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	2382      	movs	r3, #130	@ 0x82
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	58d0      	ldr	r0, [r2, r3]
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2284      	movs	r2, #132	@ 0x84
 800be14:	0092      	lsls	r2, r2, #2
 800be16:	1899      	adds	r1, r3, r2
 800be18:	1cfb      	adds	r3, r7, #3
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	001a      	movs	r2, r3
 800be1e:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	0018      	movs	r0, r3
 800be24:	46bd      	mov	sp, r7
 800be26:	b005      	add	sp, #20
 800be28:	bd90      	pop	{r4, r7, pc}

0800be2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	000a      	movs	r2, r1
 800be34:	1cfb      	adds	r3, r7, #3
 800be36:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	23b5      	movs	r3, #181	@ 0xb5
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	58d2      	ldr	r2, [r2, r3]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	32b0      	adds	r2, #176	@ 0xb0
 800be44:	0092      	lsls	r2, r2, #2
 800be46:	58d3      	ldr	r3, [r2, r3]
 800be48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	23b5      	movs	r3, #181	@ 0xb5
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	58d2      	ldr	r2, [r2, r3]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32b0      	adds	r2, #176	@ 0xb0
 800be56:	0092      	lsls	r2, r2, #2
 800be58:	58d3      	ldr	r3, [r2, r3]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	e022      	b.n	800bea8 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be62:	1cfb      	adds	r3, r7, #3
 800be64:	781a      	ldrb	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	0011      	movs	r1, r2
 800be6a:	0018      	movs	r0, r3
 800be6c:	f002 fbe6 	bl	800e63c <USBD_LL_GetRxDataSize>
 800be70:	0001      	movs	r1, r0
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	2383      	movs	r3, #131	@ 0x83
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	23b5      	movs	r3, #181	@ 0xb5
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	58d3      	ldr	r3, [r2, r3]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	33b0      	adds	r3, #176	@ 0xb0
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	18d3      	adds	r3, r2, r3
 800be8a:	3304      	adds	r3, #4
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	68f9      	ldr	r1, [r7, #12]
 800be92:	2381      	movs	r3, #129	@ 0x81
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	58c8      	ldr	r0, [r1, r3]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2183      	movs	r1, #131	@ 0x83
 800be9c:	0089      	lsls	r1, r1, #2
 800be9e:	468c      	mov	ip, r1
 800bea0:	4463      	add	r3, ip
 800bea2:	0019      	movs	r1, r3
 800bea4:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800beb0:	b590      	push	{r4, r7, lr}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	23b5      	movs	r3, #181	@ 0xb5
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	58d2      	ldr	r2, [r2, r3]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	32b0      	adds	r2, #176	@ 0xb0
 800bec4:	0092      	lsls	r2, r2, #2
 800bec6:	58d3      	ldr	r3, [r2, r3]
 800bec8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e02b      	b.n	800bf2c <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	23b5      	movs	r3, #181	@ 0xb5
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	58d3      	ldr	r3, [r2, r3]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	33b0      	adds	r3, #176	@ 0xb0
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	18d3      	adds	r3, r2, r3
 800bee4:	3304      	adds	r3, #4
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01e      	beq.n	800bf2a <USBD_CDC_EP0_RxReady+0x7a>
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	2380      	movs	r3, #128	@ 0x80
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	5cd3      	ldrb	r3, [r2, r3]
 800bef4:	2bff      	cmp	r3, #255	@ 0xff
 800bef6:	d018      	beq.n	800bf2a <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	23b5      	movs	r3, #181	@ 0xb5
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	58d3      	ldr	r3, [r2, r3]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	33b0      	adds	r3, #176	@ 0xb0
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	18d3      	adds	r3, r2, r3
 800bf08:	3304      	adds	r3, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	68f9      	ldr	r1, [r7, #12]
 800bf10:	2280      	movs	r2, #128	@ 0x80
 800bf12:	0092      	lsls	r2, r2, #2
 800bf14:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800bf16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	4c06      	ldr	r4, [pc, #24]	@ (800bf34 <USBD_CDC_EP0_RxReady+0x84>)
 800bf1c:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	2380      	movs	r3, #128	@ 0x80
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	21ff      	movs	r1, #255	@ 0xff
 800bf28:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	0018      	movs	r0, r3
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	b005      	add	sp, #20
 800bf32:	bd90      	pop	{r4, r7, pc}
 800bf34:	00000201 	.word	0x00000201

0800bf38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf40:	4b20      	ldr	r3, [pc, #128]	@ (800bfc4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800bf42:	2182      	movs	r1, #130	@ 0x82
 800bf44:	0018      	movs	r0, r3
 800bf46:	f000 fd9c 	bl	800ca82 <USBD_GetEpDesc>
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bfc4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800bf50:	2101      	movs	r1, #1
 800bf52:	0018      	movs	r0, r3
 800bf54:	f000 fd95 	bl	800ca82 <USBD_GetEpDesc>
 800bf58:	0003      	movs	r3, r0
 800bf5a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf5c:	4b19      	ldr	r3, [pc, #100]	@ (800bfc4 <USBD_CDC_GetFSCfgDesc+0x8c>)
 800bf5e:	2181      	movs	r1, #129	@ 0x81
 800bf60:	0018      	movs	r0, r3
 800bf62:	f000 fd8e 	bl	800ca82 <USBD_GetEpDesc>
 800bf66:	0003      	movs	r3, r0
 800bf68:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2210      	movs	r2, #16
 800bf74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	791a      	ldrb	r2, [r3, #4]
 800bf80:	2100      	movs	r1, #0
 800bf82:	400a      	ands	r2, r1
 800bf84:	1c11      	adds	r1, r2, #0
 800bf86:	2240      	movs	r2, #64	@ 0x40
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	711a      	strb	r2, [r3, #4]
 800bf8c:	795a      	ldrb	r2, [r3, #5]
 800bf8e:	2100      	movs	r1, #0
 800bf90:	400a      	ands	r2, r1
 800bf92:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	791a      	ldrb	r2, [r3, #4]
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	400a      	ands	r2, r1
 800bfa2:	1c11      	adds	r1, r2, #0
 800bfa4:	2240      	movs	r2, #64	@ 0x40
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	711a      	strb	r2, [r3, #4]
 800bfaa:	795a      	ldrb	r2, [r3, #5]
 800bfac:	2100      	movs	r1, #0
 800bfae:	400a      	ands	r2, r1
 800bfb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2243      	movs	r2, #67	@ 0x43
 800bfb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfb8:	4b02      	ldr	r3, [pc, #8]	@ (800bfc4 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800bfba:	0018      	movs	r0, r3
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	b006      	add	sp, #24
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	46c0      	nop			@ (mov r8, r8)
 800bfc4:	200000e0 	.word	0x200000e0

0800bfc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfd0:	4b20      	ldr	r3, [pc, #128]	@ (800c054 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800bfd2:	2182      	movs	r1, #130	@ 0x82
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f000 fd54 	bl	800ca82 <USBD_GetEpDesc>
 800bfda:	0003      	movs	r3, r0
 800bfdc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfde:	4b1d      	ldr	r3, [pc, #116]	@ (800c054 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	0018      	movs	r0, r3
 800bfe4:	f000 fd4d 	bl	800ca82 <USBD_GetEpDesc>
 800bfe8:	0003      	movs	r3, r0
 800bfea:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfec:	4b19      	ldr	r3, [pc, #100]	@ (800c054 <USBD_CDC_GetHSCfgDesc+0x8c>)
 800bfee:	2181      	movs	r1, #129	@ 0x81
 800bff0:	0018      	movs	r0, r3
 800bff2:	f000 fd46 	bl	800ca82 <USBD_GetEpDesc>
 800bff6:	0003      	movs	r3, r0
 800bff8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d002      	beq.n	800c006 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2210      	movs	r2, #16
 800c004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	791a      	ldrb	r2, [r3, #4]
 800c010:	2100      	movs	r1, #0
 800c012:	400a      	ands	r2, r1
 800c014:	711a      	strb	r2, [r3, #4]
 800c016:	795a      	ldrb	r2, [r3, #5]
 800c018:	2100      	movs	r1, #0
 800c01a:	400a      	ands	r2, r1
 800c01c:	1c11      	adds	r1, r2, #0
 800c01e:	2202      	movs	r2, #2
 800c020:	430a      	orrs	r2, r1
 800c022:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00b      	beq.n	800c042 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	791a      	ldrb	r2, [r3, #4]
 800c02e:	2100      	movs	r1, #0
 800c030:	400a      	ands	r2, r1
 800c032:	711a      	strb	r2, [r3, #4]
 800c034:	795a      	ldrb	r2, [r3, #5]
 800c036:	2100      	movs	r1, #0
 800c038:	400a      	ands	r2, r1
 800c03a:	1c11      	adds	r1, r2, #0
 800c03c:	2202      	movs	r2, #2
 800c03e:	430a      	orrs	r2, r1
 800c040:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2243      	movs	r2, #67	@ 0x43
 800c046:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c048:	4b02      	ldr	r3, [pc, #8]	@ (800c054 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800c04a:	0018      	movs	r0, r3
 800c04c:	46bd      	mov	sp, r7
 800c04e:	b006      	add	sp, #24
 800c050:	bd80      	pop	{r7, pc}
 800c052:	46c0      	nop			@ (mov r8, r8)
 800c054:	200000e0 	.word	0x200000e0

0800c058 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c060:	4b20      	ldr	r3, [pc, #128]	@ (800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c062:	2182      	movs	r1, #130	@ 0x82
 800c064:	0018      	movs	r0, r3
 800c066:	f000 fd0c 	bl	800ca82 <USBD_GetEpDesc>
 800c06a:	0003      	movs	r3, r0
 800c06c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c06e:	4b1d      	ldr	r3, [pc, #116]	@ (800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c070:	2101      	movs	r1, #1
 800c072:	0018      	movs	r0, r3
 800c074:	f000 fd05 	bl	800ca82 <USBD_GetEpDesc>
 800c078:	0003      	movs	r3, r0
 800c07a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c07c:	4b19      	ldr	r3, [pc, #100]	@ (800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c07e:	2181      	movs	r1, #129	@ 0x81
 800c080:	0018      	movs	r0, r3
 800c082:	f000 fcfe 	bl	800ca82 <USBD_GetEpDesc>
 800c086:	0003      	movs	r3, r0
 800c088:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2210      	movs	r2, #16
 800c094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00b      	beq.n	800c0b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	791a      	ldrb	r2, [r3, #4]
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	400a      	ands	r2, r1
 800c0a4:	1c11      	adds	r1, r2, #0
 800c0a6:	2240      	movs	r2, #64	@ 0x40
 800c0a8:	430a      	orrs	r2, r1
 800c0aa:	711a      	strb	r2, [r3, #4]
 800c0ac:	795a      	ldrb	r2, [r3, #5]
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	400a      	ands	r2, r1
 800c0b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	791a      	ldrb	r2, [r3, #4]
 800c0be:	2100      	movs	r1, #0
 800c0c0:	400a      	ands	r2, r1
 800c0c2:	1c11      	adds	r1, r2, #0
 800c0c4:	2240      	movs	r2, #64	@ 0x40
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	711a      	strb	r2, [r3, #4]
 800c0ca:	795a      	ldrb	r2, [r3, #5]
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	400a      	ands	r2, r1
 800c0d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2243      	movs	r2, #67	@ 0x43
 800c0d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0d8:	4b02      	ldr	r3, [pc, #8]	@ (800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800c0da:	0018      	movs	r0, r3
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	b006      	add	sp, #24
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	46c0      	nop			@ (mov r8, r8)
 800c0e4:	200000e0 	.word	0x200000e0

0800c0e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	220a      	movs	r2, #10
 800c0f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c0f6:	4b02      	ldr	r3, [pc, #8]	@ (800c100 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	b002      	add	sp, #8
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	2000009c 	.word	0x2000009c

0800c104 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c114:	2303      	movs	r3, #3
 800c116:	e00b      	b.n	800c130 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	23b5      	movs	r3, #181	@ 0xb5
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	58d3      	ldr	r3, [r2, r3]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	33b0      	adds	r3, #176	@ 0xb0
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	18d3      	adds	r3, r2, r3
 800c128:	3304      	adds	r3, #4
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	0018      	movs	r0, r3
 800c132:	46bd      	mov	sp, r7
 800c134:	b002      	add	sp, #8
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	23b5      	movs	r3, #181	@ 0xb5
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	58d2      	ldr	r2, [r2, r3]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	32b0      	adds	r2, #176	@ 0xb0
 800c150:	0092      	lsls	r2, r2, #2
 800c152:	58d3      	ldr	r3, [r2, r3]
 800c154:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e00a      	b.n	800c176 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	2382      	movs	r3, #130	@ 0x82
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	2384      	movs	r3, #132	@ 0x84
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	0018      	movs	r0, r3
 800c178:	46bd      	mov	sp, r7
 800c17a:	b006      	add	sp, #24
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	23b5      	movs	r3, #181	@ 0xb5
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	58d2      	ldr	r2, [r2, r3]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	32b0      	adds	r2, #176	@ 0xb0
 800c194:	0092      	lsls	r2, r2, #2
 800c196:	58d3      	ldr	r3, [r2, r3]
 800c198:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e005      	b.n	800c1b0 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	2381      	movs	r3, #129	@ 0x81
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	b004      	add	sp, #16
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	23b5      	movs	r3, #181	@ 0xb5
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	58d2      	ldr	r2, [r2, r3]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	32b0      	adds	r2, #176	@ 0xb0
 800c1cc:	0092      	lsls	r2, r2, #2
 800c1ce:	58d3      	ldr	r3, [r2, r3]
 800c1d0:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1d2:	230f      	movs	r3, #15
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e030      	b.n	800c246 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	2385      	movs	r3, #133	@ 0x85
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	58d3      	ldr	r3, [r2, r3]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d127      	bne.n	800c240 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	2385      	movs	r3, #133	@ 0x85
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c1fa:	4b15      	ldr	r3, [pc, #84]	@ (800c250 <USBD_CDC_TransmitPacket+0x98>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	001a      	movs	r2, r3
 800c200:	230f      	movs	r3, #15
 800c202:	401a      	ands	r2, r3
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	2384      	movs	r3, #132	@ 0x84
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	58c9      	ldr	r1, [r1, r3]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	0013      	movs	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	189b      	adds	r3, r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	18c3      	adds	r3, r0, r3
 800c218:	3318      	adds	r3, #24
 800c21a:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c21c:	4b0c      	ldr	r3, [pc, #48]	@ (800c250 <USBD_CDC_TransmitPacket+0x98>)
 800c21e:	7819      	ldrb	r1, [r3, #0]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	2382      	movs	r3, #130	@ 0x82
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	58d4      	ldr	r4, [r2, r3]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	2384      	movs	r3, #132	@ 0x84
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	58d3      	ldr	r3, [r2, r3]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	0022      	movs	r2, r4
 800c234:	f002 f9a2 	bl	800e57c <USBD_LL_Transmit>

    ret = USBD_OK;
 800c238:	230f      	movs	r3, #15
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	2200      	movs	r2, #0
 800c23e:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 800c240:	230f      	movs	r3, #15
 800c242:	18fb      	adds	r3, r7, r3
 800c244:	781b      	ldrb	r3, [r3, #0]
}
 800c246:	0018      	movs	r0, r3
 800c248:	46bd      	mov	sp, r7
 800c24a:	b005      	add	sp, #20
 800c24c:	bd90      	pop	{r4, r7, pc}
 800c24e:	46c0      	nop			@ (mov r8, r8)
 800c250:	20000123 	.word	0x20000123

0800c254 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	23b5      	movs	r3, #181	@ 0xb5
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	58d2      	ldr	r2, [r2, r3]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	32b0      	adds	r2, #176	@ 0xb0
 800c268:	0092      	lsls	r2, r2, #2
 800c26a:	58d3      	ldr	r3, [r2, r3]
 800c26c:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	23b5      	movs	r3, #181	@ 0xb5
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	58d2      	ldr	r2, [r2, r3]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	32b0      	adds	r2, #176	@ 0xb0
 800c27a:	0092      	lsls	r2, r2, #2
 800c27c:	58d3      	ldr	r3, [r2, r3]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c282:	2303      	movs	r3, #3
 800c284:	e01a      	b.n	800c2bc <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	7c1b      	ldrb	r3, [r3, #16]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c28e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <USBD_CDC_ReceivePacket+0x70>)
 800c290:	7819      	ldrb	r1, [r3, #0]
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	2381      	movs	r3, #129	@ 0x81
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	58d2      	ldr	r2, [r2, r3]
 800c29a:	2380      	movs	r3, #128	@ 0x80
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f002 f99c 	bl	800e5dc <USBD_LL_PrepareReceive>
 800c2a4:	e009      	b.n	800c2ba <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2a6:	4b07      	ldr	r3, [pc, #28]	@ (800c2c4 <USBD_CDC_ReceivePacket+0x70>)
 800c2a8:	7819      	ldrb	r1, [r3, #0]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	2381      	movs	r3, #129	@ 0x81
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	58d2      	ldr	r2, [r2, r3]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	2340      	movs	r3, #64	@ 0x40
 800c2b6:	f002 f991 	bl	800e5dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	0018      	movs	r0, r3
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	b004      	add	sp, #16
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	20000124 	.word	0x20000124

0800c2c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	1dfb      	adds	r3, r7, #7
 800c2d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e029      	b.n	800c334 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	23ae      	movs	r3, #174	@ 0xae
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	23b1      	movs	r3, #177	@ 0xb1
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	23b4      	movs	r3, #180	@ 0xb4
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d004      	beq.n	800c30e <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	23ad      	movs	r3, #173	@ 0xad
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	23a7      	movs	r3, #167	@ 0xa7
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	2101      	movs	r1, #1
 800c316:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	1dfa      	adds	r2, r7, #7
 800c31c:	7812      	ldrb	r2, [r2, #0]
 800c31e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c320:	2517      	movs	r5, #23
 800c322:	197c      	adds	r4, r7, r5
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	0018      	movs	r0, r3
 800c328:	f001 ff7e 	bl	800e228 <USBD_LL_Init>
 800c32c:	0003      	movs	r3, r0
 800c32e:	7023      	strb	r3, [r4, #0]

  return ret;
 800c330:	197b      	adds	r3, r7, r5
 800c332:	781b      	ldrb	r3, [r3, #0]
}
 800c334:	0018      	movs	r0, r3
 800c336:	46bd      	mov	sp, r7
 800c338:	b006      	add	sp, #24
 800c33a:	bdb0      	pop	{r4, r5, r7, pc}

0800c33c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c346:	230e      	movs	r3, #14
 800c348:	18fb      	adds	r3, r7, r3
 800c34a:	2200      	movs	r2, #0
 800c34c:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c354:	2303      	movs	r3, #3
 800c356:	e02b      	b.n	800c3b0 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	23ae      	movs	r3, #174	@ 0xae
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	23b5      	movs	r3, #181	@ 0xb5
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	58d2      	ldr	r2, [r2, r3]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	32ae      	adds	r2, #174	@ 0xae
 800c36e:	0092      	lsls	r2, r2, #2
 800c370:	58d3      	ldr	r3, [r2, r3]
 800c372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c374:	2b00      	cmp	r3, #0
 800c376:	d011      	beq.n	800c39c <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	23b5      	movs	r3, #181	@ 0xb5
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	58d2      	ldr	r2, [r2, r3]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	32ae      	adds	r2, #174	@ 0xae
 800c384:	0092      	lsls	r2, r2, #2
 800c386:	58d3      	ldr	r3, [r2, r3]
 800c388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38a:	220e      	movs	r2, #14
 800c38c:	18ba      	adds	r2, r7, r2
 800c38e:	0010      	movs	r0, r2
 800c390:	4798      	blx	r3
 800c392:	0001      	movs	r1, r0
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	23b4      	movs	r3, #180	@ 0xb4
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	23b6      	movs	r3, #182	@ 0xb6
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	58d3      	ldr	r3, [r2, r3]
 800c3a4:	1c59      	adds	r1, r3, #1
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	23b6      	movs	r3, #182	@ 0xb6
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	0018      	movs	r0, r3
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	b004      	add	sp, #16
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f001 ffa2 	bl	800e30c <USBD_LL_Start>
 800c3c8:	0003      	movs	r3, r0
}
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	b002      	add	sp, #8
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3da:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c3dc:	0018      	movs	r0, r3
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	b002      	add	sp, #8
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3e4:	b590      	push	{r4, r7, lr}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	000a      	movs	r2, r1
 800c3ee:	1cfb      	adds	r3, r7, #3
 800c3f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	210f      	movs	r1, #15
 800c3f4:	187b      	adds	r3, r7, r1
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	23ae      	movs	r3, #174	@ 0xae
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	58d3      	ldr	r3, [r2, r3]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00c      	beq.n	800c420 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	23ae      	movs	r3, #174	@ 0xae
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	58d3      	ldr	r3, [r2, r3]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	187c      	adds	r4, r7, r1
 800c412:	1cfa      	adds	r2, r7, #3
 800c414:	7811      	ldrb	r1, [r2, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	0010      	movs	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	0003      	movs	r3, r0
 800c41e:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c420:	230f      	movs	r3, #15
 800c422:	18fb      	adds	r3, r7, r3
 800c424:	781b      	ldrb	r3, [r3, #0]
}
 800c426:	0018      	movs	r0, r3
 800c428:	46bd      	mov	sp, r7
 800c42a:	b005      	add	sp, #20
 800c42c:	bd90      	pop	{r4, r7, pc}

0800c42e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c42e:	b590      	push	{r4, r7, lr}
 800c430:	b085      	sub	sp, #20
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	000a      	movs	r2, r1
 800c438:	1cfb      	adds	r3, r7, #3
 800c43a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c43c:	240f      	movs	r4, #15
 800c43e:	193b      	adds	r3, r7, r4
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	23ae      	movs	r3, #174	@ 0xae
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	58d3      	ldr	r3, [r2, r3]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	1cfa      	adds	r2, r7, #3
 800c450:	7811      	ldrb	r1, [r2, #0]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	0010      	movs	r0, r2
 800c456:	4798      	blx	r3
 800c458:	1e03      	subs	r3, r0, #0
 800c45a:	d002      	beq.n	800c462 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 800c45c:	193b      	adds	r3, r7, r4
 800c45e:	2203      	movs	r2, #3
 800c460:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c462:	230f      	movs	r3, #15
 800c464:	18fb      	adds	r3, r7, r3
 800c466:	781b      	ldrb	r3, [r3, #0]
}
 800c468:	0018      	movs	r0, r3
 800c46a:	46bd      	mov	sp, r7
 800c46c:	b005      	add	sp, #20
 800c46e:	bd90      	pop	{r4, r7, pc}

0800c470 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c470:	b590      	push	{r4, r7, lr}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a30      	ldr	r2, [pc, #192]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c47e:	4694      	mov	ip, r2
 800c480:	4463      	add	r3, ip
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	0011      	movs	r1, r2
 800c486:	0018      	movs	r0, r3
 800c488:	f001 fa5d 	bl	800d946 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	23a5      	movs	r3, #165	@ 0xa5
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	2101      	movs	r1, #1
 800c494:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	23ac      	movs	r3, #172	@ 0xac
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	5ad3      	ldrh	r3, [r2, r3]
 800c49e:	0019      	movs	r1, r3
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	23a6      	movs	r3, #166	@ 0xa6
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a25      	ldr	r2, [pc, #148]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c4ac:	5c9b      	ldrb	r3, [r3, r2]
 800c4ae:	001a      	movs	r2, r3
 800c4b0:	231f      	movs	r3, #31
 800c4b2:	4013      	ands	r3, r2
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d01f      	beq.n	800c4f8 <USBD_LL_SetupStage+0x88>
 800c4b8:	d82b      	bhi.n	800c512 <USBD_LL_SetupStage+0xa2>
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <USBD_LL_SetupStage+0x54>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d00d      	beq.n	800c4de <USBD_LL_SetupStage+0x6e>
 800c4c2:	e026      	b.n	800c512 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c4c8:	189a      	adds	r2, r3, r2
 800c4ca:	230f      	movs	r3, #15
 800c4cc:	18fc      	adds	r4, r7, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	0011      	movs	r1, r2
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	f000 fb5c 	bl	800cb90 <USBD_StdDevReq>
 800c4d8:	0003      	movs	r3, r0
 800c4da:	7023      	strb	r3, [r4, #0]
      break;
 800c4dc:	e029      	b.n	800c532 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a17      	ldr	r2, [pc, #92]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c4e2:	189a      	adds	r2, r3, r2
 800c4e4:	230f      	movs	r3, #15
 800c4e6:	18fc      	adds	r4, r7, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	0011      	movs	r1, r2
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f000 fbcd 	bl	800cc8c <USBD_StdItfReq>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	7023      	strb	r3, [r4, #0]
      break;
 800c4f6:	e01c      	b.n	800c532 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a11      	ldr	r2, [pc, #68]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c4fc:	189a      	adds	r2, r3, r2
 800c4fe:	230f      	movs	r3, #15
 800c500:	18fc      	adds	r4, r7, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	0011      	movs	r1, r2
 800c506:	0018      	movs	r0, r3
 800c508:	f000 fc4d 	bl	800cda6 <USBD_StdEPReq>
 800c50c:	0003      	movs	r3, r0
 800c50e:	7023      	strb	r3, [r4, #0]
      break;
 800c510:	e00f      	b.n	800c532 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a0a      	ldr	r2, [pc, #40]	@ (800c540 <USBD_LL_SetupStage+0xd0>)
 800c516:	5c9b      	ldrb	r3, [r3, r2]
 800c518:	227f      	movs	r2, #127	@ 0x7f
 800c51a:	4393      	bics	r3, r2
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	230f      	movs	r3, #15
 800c520:	18fc      	adds	r4, r7, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	0011      	movs	r1, r2
 800c526:	0018      	movs	r0, r3
 800c528:	f001 ff77 	bl	800e41a <USBD_LL_StallEP>
 800c52c:	0003      	movs	r3, r0
 800c52e:	7023      	strb	r3, [r4, #0]
      break;
 800c530:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c532:	230f      	movs	r3, #15
 800c534:	18fb      	adds	r3, r7, r3
 800c536:	781b      	ldrb	r3, [r3, #0]
}
 800c538:	0018      	movs	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	b005      	add	sp, #20
 800c53e:	bd90      	pop	{r4, r7, pc}
 800c540:	000002aa 	.word	0x000002aa

0800c544 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	607a      	str	r2, [r7, #4]
 800c54e:	200b      	movs	r0, #11
 800c550:	183b      	adds	r3, r7, r0
 800c552:	1c0a      	adds	r2, r1, #0
 800c554:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c556:	2317      	movs	r3, #23
 800c558:	18fb      	adds	r3, r7, r3
 800c55a:	2200      	movs	r2, #0
 800c55c:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 800c55e:	183b      	adds	r3, r7, r0
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d000      	beq.n	800c568 <USBD_LL_DataOutStage+0x24>
 800c566:	e084      	b.n	800c672 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3355      	adds	r3, #85	@ 0x55
 800c56c:	33ff      	adds	r3, #255	@ 0xff
 800c56e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	23a5      	movs	r3, #165	@ 0xa5
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	58d3      	ldr	r3, [r2, r3]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d000      	beq.n	800c57e <USBD_LL_DataOutStage+0x3a>
 800c57c:	e0c0      	b.n	800c700 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	689a      	ldr	r2, [r3, #8]
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	429a      	cmp	r2, r3
 800c588:	d914      	bls.n	800c5b4 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	1ad2      	subs	r2, r2, r3
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	68d9      	ldr	r1, [r3, #12]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	689a      	ldr	r2, [r3, #8]
 800c5a0:	000b      	movs	r3, r1
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d900      	bls.n	800c5a8 <USBD_LL_DataOutStage+0x64>
 800c5a6:	0013      	movs	r3, r2
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	001a      	movs	r2, r3
 800c5ae:	f001 fadc 	bl	800db6a <USBD_CtlContinueRx>
 800c5b2:	e0a5      	b.n	800c700 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4a55      	ldr	r2, [pc, #340]	@ (800c70c <USBD_LL_DataOutStage+0x1c8>)
 800c5b8:	5c9b      	ldrb	r3, [r3, r2]
 800c5ba:	001a      	movs	r2, r3
 800c5bc:	231f      	movs	r3, #31
 800c5be:	4013      	ands	r3, r2
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d018      	beq.n	800c5f6 <USBD_LL_DataOutStage+0xb2>
 800c5c4:	d825      	bhi.n	800c612 <USBD_LL_DataOutStage+0xce>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <USBD_LL_DataOutStage+0x8c>
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d005      	beq.n	800c5da <USBD_LL_DataOutStage+0x96>
 800c5ce:	e020      	b.n	800c612 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c5d0:	2316      	movs	r3, #22
 800c5d2:	18fb      	adds	r3, r7, r3
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	701a      	strb	r2, [r3, #0]
            break;
 800c5d8:	e020      	b.n	800c61c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	4a4c      	ldr	r2, [pc, #304]	@ (800c710 <USBD_LL_DataOutStage+0x1cc>)
 800c5de:	5a9b      	ldrh	r3, [r3, r2]
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	2316      	movs	r3, #22
 800c5e4:	18fc      	adds	r4, r7, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	0011      	movs	r1, r2
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 fa31 	bl	800ca52 <USBD_CoreFindIF>
 800c5f0:	0003      	movs	r3, r0
 800c5f2:	7023      	strb	r3, [r4, #0]
            break;
 800c5f4:	e012      	b.n	800c61c <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	4a45      	ldr	r2, [pc, #276]	@ (800c710 <USBD_LL_DataOutStage+0x1cc>)
 800c5fa:	5a9b      	ldrh	r3, [r3, r2]
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	2316      	movs	r3, #22
 800c600:	18fc      	adds	r4, r7, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	0011      	movs	r1, r2
 800c606:	0018      	movs	r0, r3
 800c608:	f000 fa2f 	bl	800ca6a <USBD_CoreFindEP>
 800c60c:	0003      	movs	r3, r0
 800c60e:	7023      	strb	r3, [r4, #0]
            break;
 800c610:	e004      	b.n	800c61c <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c612:	2316      	movs	r3, #22
 800c614:	18fb      	adds	r3, r7, r3
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
            break;
 800c61a:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c61c:	2116      	movs	r1, #22
 800c61e:	187b      	adds	r3, r7, r1
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d120      	bne.n	800c668 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	23a7      	movs	r3, #167	@ 0xa7
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	5cd3      	ldrb	r3, [r2, r3]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b03      	cmp	r3, #3
 800c632:	d119      	bne.n	800c668 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c634:	187b      	adds	r3, r7, r1
 800c636:	781a      	ldrb	r2, [r3, #0]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	32ae      	adds	r2, #174	@ 0xae
 800c63c:	0092      	lsls	r2, r2, #2
 800c63e:	58d3      	ldr	r3, [r2, r3]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d010      	beq.n	800c668 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 800c646:	0008      	movs	r0, r1
 800c648:	187b      	adds	r3, r7, r1
 800c64a:	7819      	ldrb	r1, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	23b5      	movs	r3, #181	@ 0xb5
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c654:	183b      	adds	r3, r7, r0
 800c656:	781a      	ldrb	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	32ae      	adds	r2, #174	@ 0xae
 800c65c:	0092      	lsls	r2, r2, #2
 800c65e:	58d3      	ldr	r3, [r2, r3]
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	0010      	movs	r0, r2
 800c666:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	0018      	movs	r0, r3
 800c66c:	f001 fa8e 	bl	800db8c <USBD_CtlSendStatus>
 800c670:	e046      	b.n	800c700 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c672:	260b      	movs	r6, #11
 800c674:	19bb      	adds	r3, r7, r6
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	227f      	movs	r2, #127	@ 0x7f
 800c67a:	4013      	ands	r3, r2
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	2516      	movs	r5, #22
 800c680:	197c      	adds	r4, r7, r5
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	0011      	movs	r1, r2
 800c686:	0018      	movs	r0, r3
 800c688:	f000 f9ef 	bl	800ca6a <USBD_CoreFindEP>
 800c68c:	0003      	movs	r3, r0
 800c68e:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c690:	0029      	movs	r1, r5
 800c692:	187b      	adds	r3, r7, r1
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	2bff      	cmp	r3, #255	@ 0xff
 800c698:	d032      	beq.n	800c700 <USBD_LL_DataOutStage+0x1bc>
 800c69a:	187b      	adds	r3, r7, r1
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d12e      	bne.n	800c700 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	23a7      	movs	r3, #167	@ 0xa7
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	5cd3      	ldrb	r3, [r2, r3]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d11f      	bne.n	800c6f0 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c6b0:	187b      	adds	r3, r7, r1
 800c6b2:	781a      	ldrb	r2, [r3, #0]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	32ae      	adds	r2, #174	@ 0xae
 800c6b8:	0092      	lsls	r2, r2, #2
 800c6ba:	58d3      	ldr	r3, [r2, r3]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d016      	beq.n	800c6f0 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 800c6c2:	0008      	movs	r0, r1
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	7819      	ldrb	r1, [r3, #0]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	23b5      	movs	r3, #181	@ 0xb5
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c6d0:	183b      	adds	r3, r7, r0
 800c6d2:	781a      	ldrb	r2, [r3, #0]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	32ae      	adds	r2, #174	@ 0xae
 800c6d8:	0092      	lsls	r2, r2, #2
 800c6da:	58d3      	ldr	r3, [r2, r3]
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	2217      	movs	r2, #23
 800c6e0:	18bc      	adds	r4, r7, r2
 800c6e2:	19ba      	adds	r2, r7, r6
 800c6e4:	7811      	ldrb	r1, [r2, #0]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	0010      	movs	r0, r2
 800c6ea:	4798      	blx	r3
 800c6ec:	0003      	movs	r3, r0
 800c6ee:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 800c6f0:	2217      	movs	r2, #23
 800c6f2:	18bb      	adds	r3, r7, r2
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d002      	beq.n	800c700 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 800c6fa:	18bb      	adds	r3, r7, r2
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	e000      	b.n	800c702 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	0018      	movs	r0, r3
 800c704:	46bd      	mov	sp, r7
 800c706:	b007      	add	sp, #28
 800c708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c70a:	46c0      	nop			@ (mov r8, r8)
 800c70c:	000002aa 	.word	0x000002aa
 800c710:	000002ae 	.word	0x000002ae

0800c714 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	607a      	str	r2, [r7, #4]
 800c71e:	200b      	movs	r0, #11
 800c720:	183b      	adds	r3, r7, r0
 800c722:	1c0a      	adds	r2, r1, #0
 800c724:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c726:	183b      	adds	r3, r7, r0
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d000      	beq.n	800c730 <USBD_LL_DataInStage+0x1c>
 800c72e:	e07d      	b.n	800c82c <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3314      	adds	r3, #20
 800c734:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	23a5      	movs	r3, #165	@ 0xa5
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	58d3      	ldr	r3, [r2, r3]
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d164      	bne.n	800c80c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	689a      	ldr	r2, [r3, #8]
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d914      	bls.n	800c778 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	1ad2      	subs	r2, r2, r3
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	6879      	ldr	r1, [r7, #4]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	0018      	movs	r0, r3
 800c766:	f001 f9cf 	bl	800db08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	2300      	movs	r3, #0
 800c76e:	2200      	movs	r2, #0
 800c770:	2100      	movs	r1, #0
 800c772:	f001 ff33 	bl	800e5dc <USBD_LL_PrepareReceive>
 800c776:	e049      	b.n	800c80c <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	429a      	cmp	r2, r3
 800c782:	d11f      	bne.n	800c7c4 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	685a      	ldr	r2, [r3, #4]
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d319      	bcc.n	800c7c4 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	68f9      	ldr	r1, [r7, #12]
 800c796:	23a6      	movs	r3, #166	@ 0xa6
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d211      	bcs.n	800c7c4 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	f001 f9ae 	bl	800db08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	23a6      	movs	r3, #166	@ 0xa6
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f001 ff0d 	bl	800e5dc <USBD_LL_PrepareReceive>
 800c7c2:	e023      	b.n	800c80c <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	23a7      	movs	r3, #167	@ 0xa7
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	5cd3      	ldrb	r3, [r2, r3]
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d113      	bne.n	800c7fa <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	23ae      	movs	r3, #174	@ 0xae
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	58d3      	ldr	r3, [r2, r3]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00c      	beq.n	800c7fa <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	23b5      	movs	r3, #181	@ 0xb5
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	23ae      	movs	r3, #174	@ 0xae
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	58d3      	ldr	r3, [r2, r3]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	0010      	movs	r0, r2
 800c7f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2180      	movs	r1, #128	@ 0x80
 800c7fe:	0018      	movs	r0, r3
 800c800:	f001 fe0b 	bl	800e41a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	0018      	movs	r0, r3
 800c808:	f001 f9d4 	bl	800dbb4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	23a8      	movs	r3, #168	@ 0xa8
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	5cd3      	ldrb	r3, [r2, r3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d050      	beq.n	800c8ba <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7ff fdd9 	bl	800c3d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	23a8      	movs	r3, #168	@ 0xa8
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	2100      	movs	r1, #0
 800c828:	54d1      	strb	r1, [r2, r3]
 800c82a:	e046      	b.n	800c8ba <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c82c:	260b      	movs	r6, #11
 800c82e:	19bb      	adds	r3, r7, r6
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	2280      	movs	r2, #128	@ 0x80
 800c834:	4252      	negs	r2, r2
 800c836:	4313      	orrs	r3, r2
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	2517      	movs	r5, #23
 800c83c:	197c      	adds	r4, r7, r5
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	0011      	movs	r1, r2
 800c842:	0018      	movs	r0, r3
 800c844:	f000 f911 	bl	800ca6a <USBD_CoreFindEP>
 800c848:	0003      	movs	r3, r0
 800c84a:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c84c:	0029      	movs	r1, r5
 800c84e:	187b      	adds	r3, r7, r1
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2bff      	cmp	r3, #255	@ 0xff
 800c854:	d031      	beq.n	800c8ba <USBD_LL_DataInStage+0x1a6>
 800c856:	187b      	adds	r3, r7, r1
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d12d      	bne.n	800c8ba <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	23a7      	movs	r3, #167	@ 0xa7
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	5cd3      	ldrb	r3, [r2, r3]
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d126      	bne.n	800c8ba <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c86c:	187b      	adds	r3, r7, r1
 800c86e:	781a      	ldrb	r2, [r3, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	32ae      	adds	r2, #174	@ 0xae
 800c874:	0092      	lsls	r2, r2, #2
 800c876:	58d3      	ldr	r3, [r2, r3]
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d01d      	beq.n	800c8ba <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 800c87e:	0008      	movs	r0, r1
 800c880:	187b      	adds	r3, r7, r1
 800c882:	7819      	ldrb	r1, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	23b5      	movs	r3, #181	@ 0xb5
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c88c:	183b      	adds	r3, r7, r0
 800c88e:	781a      	ldrb	r2, [r3, #0]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	32ae      	adds	r2, #174	@ 0xae
 800c894:	0092      	lsls	r2, r2, #2
 800c896:	58d3      	ldr	r3, [r2, r3]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	2516      	movs	r5, #22
 800c89c:	197c      	adds	r4, r7, r5
 800c89e:	19ba      	adds	r2, r7, r6
 800c8a0:	7811      	ldrb	r1, [r2, #0]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	0010      	movs	r0, r2
 800c8a6:	4798      	blx	r3
 800c8a8:	0003      	movs	r3, r0
 800c8aa:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 800c8ac:	197b      	adds	r3, r7, r5
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 800c8b4:	197b      	adds	r3, r7, r5
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	e000      	b.n	800c8bc <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	0018      	movs	r0, r3
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	b007      	add	sp, #28
 800c8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8c4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8cc:	240f      	movs	r4, #15
 800c8ce:	193b      	adds	r3, r7, r4
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	23a7      	movs	r3, #167	@ 0xa7
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	2101      	movs	r1, #1
 800c8dc:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	23a5      	movs	r3, #165	@ 0xa5
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	23a9      	movs	r3, #169	@ 0xa9
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	23a8      	movs	r3, #168	@ 0xa8
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	2100      	movs	r1, #0
 800c900:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	23ae      	movs	r3, #174	@ 0xae
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	58d3      	ldr	r3, [r2, r3]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d016      	beq.n	800c93c <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	23ae      	movs	r3, #174	@ 0xae
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	58d3      	ldr	r3, [r2, r3]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00f      	beq.n	800c93c <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	23ae      	movs	r3, #174	@ 0xae
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	58d3      	ldr	r3, [r2, r3]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	b2d9      	uxtb	r1, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	0018      	movs	r0, r3
 800c930:	4790      	blx	r2
 800c932:	1e03      	subs	r3, r0, #0
 800c934:	d002      	beq.n	800c93c <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800c936:	193b      	adds	r3, r7, r4
 800c938:	2203      	movs	r2, #3
 800c93a:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	2340      	movs	r3, #64	@ 0x40
 800c940:	2200      	movs	r2, #0
 800c942:	2100      	movs	r1, #0
 800c944:	f001 fd07 	bl	800e356 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	23b2      	movs	r3, #178	@ 0xb2
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	2101      	movs	r1, #1
 800c950:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	23b0      	movs	r3, #176	@ 0xb0
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	2140      	movs	r1, #64	@ 0x40
 800c95a:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	2340      	movs	r3, #64	@ 0x40
 800c960:	2200      	movs	r2, #0
 800c962:	2180      	movs	r1, #128	@ 0x80
 800c964:	f001 fcf7 	bl	800e356 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2240      	movs	r2, #64	@ 0x40
 800c972:	621a      	str	r2, [r3, #32]

  return ret;
 800c974:	230f      	movs	r3, #15
 800c976:	18fb      	adds	r3, r7, r3
 800c978:	781b      	ldrb	r3, [r3, #0]
}
 800c97a:	0018      	movs	r0, r3
 800c97c:	46bd      	mov	sp, r7
 800c97e:	b005      	add	sp, #20
 800c980:	bd90      	pop	{r4, r7, pc}

0800c982 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	000a      	movs	r2, r1
 800c98c:	1cfb      	adds	r3, r7, #3
 800c98e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	1cfa      	adds	r2, r7, #3
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	0018      	movs	r0, r3
 800c99c:	46bd      	mov	sp, r7
 800c99e:	b002      	add	sp, #8
 800c9a0:	bd80      	pop	{r7, pc}
	...

0800c9a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	23a7      	movs	r3, #167	@ 0xa7
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	5cd3      	ldrb	r3, [r2, r3]
 800c9b4:	b2d9      	uxtb	r1, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a05      	ldr	r2, [pc, #20]	@ (800c9d0 <USBD_LL_Suspend+0x2c>)
 800c9ba:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	23a7      	movs	r3, #167	@ 0xa7
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	2104      	movs	r1, #4
 800c9c4:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	b002      	add	sp, #8
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	0000029d 	.word	0x0000029d

0800c9d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	23a7      	movs	r3, #167	@ 0xa7
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	5cd3      	ldrb	r3, [r2, r3]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d107      	bne.n	800c9fa <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a05      	ldr	r2, [pc, #20]	@ (800ca04 <USBD_LL_Resume+0x30>)
 800c9ee:	5c9b      	ldrb	r3, [r3, r2]
 800c9f0:	b2d9      	uxtb	r1, r3
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	23a7      	movs	r3, #167	@ 0xa7
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	b002      	add	sp, #8
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	0000029d 	.word	0x0000029d

0800ca08 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	23a7      	movs	r3, #167	@ 0xa7
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	5cd3      	ldrb	r3, [r2, r3]
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d114      	bne.n	800ca48 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	23ae      	movs	r3, #174	@ 0xae
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	58d3      	ldr	r3, [r2, r3]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00e      	beq.n	800ca48 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	23ae      	movs	r3, #174	@ 0xae
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	58d3      	ldr	r3, [r2, r3]
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d007      	beq.n	800ca48 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	23ae      	movs	r3, #174	@ 0xae
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	58d3      	ldr	r3, [r2, r3]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	0010      	movs	r0, r2
 800ca46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ca48:	2300      	movs	r3, #0
}
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	b002      	add	sp, #8
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b082      	sub	sp, #8
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	000a      	movs	r2, r1
 800ca5c:	1cfb      	adds	r3, r7, #3
 800ca5e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca62:	0018      	movs	r0, r3
 800ca64:	46bd      	mov	sp, r7
 800ca66:	b002      	add	sp, #8
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	000a      	movs	r2, r1
 800ca74:	1cfb      	adds	r3, r7, #3
 800ca76:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b002      	add	sp, #8
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b086      	sub	sp, #24
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
 800ca8a:	000a      	movs	r2, r1
 800ca8c:	1cfb      	adds	r3, r7, #3
 800ca8e:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	789a      	ldrb	r2, [r3, #2]
 800caa0:	78db      	ldrb	r3, [r3, #3]
 800caa2:	021b      	lsls	r3, r3, #8
 800caa4:	4313      	orrs	r3, r2
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	7812      	ldrb	r2, [r2, #0]
 800caac:	4293      	cmp	r3, r2
 800caae:	d92a      	bls.n	800cb06 <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	001a      	movs	r2, r3
 800cab6:	230a      	movs	r3, #10
 800cab8:	18fb      	adds	r3, r7, r3
 800caba:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800cabc:	e016      	b.n	800caec <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cabe:	230a      	movs	r3, #10
 800cac0:	18fa      	adds	r2, r7, r3
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	0011      	movs	r1, r2
 800cac6:	0018      	movs	r0, r3
 800cac8:	f000 f822 	bl	800cb10 <USBD_GetNextDesc>
 800cacc:	0003      	movs	r3, r0
 800cace:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	785b      	ldrb	r3, [r3, #1]
 800cad4:	2b05      	cmp	r3, #5
 800cad6:	d109      	bne.n	800caec <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	789b      	ldrb	r3, [r3, #2]
 800cae0:	1cfa      	adds	r2, r7, #3
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d00d      	beq.n	800cb04 <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	789a      	ldrb	r2, [r3, #2]
 800caf0:	78db      	ldrb	r3, [r3, #3]
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	4313      	orrs	r3, r2
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	230a      	movs	r3, #10
 800cafa:	18fb      	adds	r3, r7, r3
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d8dd      	bhi.n	800cabe <USBD_GetEpDesc+0x3c>
 800cb02:	e000      	b.n	800cb06 <USBD_GetEpDesc+0x84>
          break;
 800cb04:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb06:	693b      	ldr	r3, [r7, #16]
}
 800cb08:	0018      	movs	r0, r3
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	b006      	add	sp, #24
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	7812      	ldrb	r2, [r2, #0]
 800cb26:	189b      	adds	r3, r3, r2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	001a      	movs	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	189b      	adds	r3, r3, r2
 800cb38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b004      	add	sp, #16
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	781a      	ldrb	r2, [r3, #0]
 800cb54:	2112      	movs	r1, #18
 800cb56:	187b      	adds	r3, r7, r1
 800cb58:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	2010      	movs	r0, #16
 800cb66:	183b      	adds	r3, r7, r0
 800cb68:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb6a:	183b      	adds	r3, r7, r0
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	5e9b      	ldrsh	r3, [r3, r2]
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	b21a      	sxth	r2, r3
 800cb74:	187b      	adds	r3, r7, r1
 800cb76:	2100      	movs	r1, #0
 800cb78:	5e5b      	ldrsh	r3, [r3, r1]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	b21a      	sxth	r2, r3
 800cb7e:	210e      	movs	r1, #14
 800cb80:	187b      	adds	r3, r7, r1
 800cb82:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800cb84:	187b      	adds	r3, r7, r1
 800cb86:	881b      	ldrh	r3, [r3, #0]
}
 800cb88:	0018      	movs	r0, r3
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	b006      	add	sp, #24
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9a:	230f      	movs	r3, #15
 800cb9c:	18fb      	adds	r3, r7, r3
 800cb9e:	2200      	movs	r2, #0
 800cba0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	001a      	movs	r2, r3
 800cba8:	2360      	movs	r3, #96	@ 0x60
 800cbaa:	4013      	ands	r3, r2
 800cbac:	2b40      	cmp	r3, #64	@ 0x40
 800cbae:	d004      	beq.n	800cbba <USBD_StdDevReq+0x2a>
 800cbb0:	d85b      	bhi.n	800cc6a <USBD_StdDevReq+0xda>
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d013      	beq.n	800cbde <USBD_StdDevReq+0x4e>
 800cbb6:	2b20      	cmp	r3, #32
 800cbb8:	d157      	bne.n	800cc6a <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	23b5      	movs	r3, #181	@ 0xb5
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	58d2      	ldr	r2, [r2, r3]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	32ae      	adds	r2, #174	@ 0xae
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	58d3      	ldr	r3, [r2, r3]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	220f      	movs	r2, #15
 800cbce:	18bc      	adds	r4, r7, r2
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	0010      	movs	r0, r2
 800cbd6:	4798      	blx	r3
 800cbd8:	0003      	movs	r3, r0
 800cbda:	7023      	strb	r3, [r4, #0]
      break;
 800cbdc:	e04c      	b.n	800cc78 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2b09      	cmp	r3, #9
 800cbe4:	d839      	bhi.n	800cc5a <USBD_StdDevReq+0xca>
 800cbe6:	009a      	lsls	r2, r3, #2
 800cbe8:	4b27      	ldr	r3, [pc, #156]	@ (800cc88 <USBD_StdDevReq+0xf8>)
 800cbea:	18d3      	adds	r3, r2, r3
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	0011      	movs	r1, r2
 800cbf6:	0018      	movs	r0, r3
 800cbf8:	f000 fada 	bl	800d1b0 <USBD_GetDescriptor>
          break;
 800cbfc:	e034      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	0011      	movs	r1, r2
 800cc04:	0018      	movs	r0, r3
 800cc06:	f000 fcad 	bl	800d564 <USBD_SetAddress>
          break;
 800cc0a:	e02d      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc0c:	230f      	movs	r3, #15
 800cc0e:	18fc      	adds	r4, r7, r3
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	0011      	movs	r1, r2
 800cc16:	0018      	movs	r0, r3
 800cc18:	f000 fcfa 	bl	800d610 <USBD_SetConfig>
 800cc1c:	0003      	movs	r3, r0
 800cc1e:	7023      	strb	r3, [r4, #0]
          break;
 800cc20:	e022      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	0011      	movs	r1, r2
 800cc28:	0018      	movs	r0, r3
 800cc2a:	f000 fdbf 	bl	800d7ac <USBD_GetConfig>
          break;
 800cc2e:	e01b      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc30:	683a      	ldr	r2, [r7, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	0011      	movs	r1, r2
 800cc36:	0018      	movs	r0, r3
 800cc38:	f000 fdf4 	bl	800d824 <USBD_GetStatus>
          break;
 800cc3c:	e014      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	0011      	movs	r1, r2
 800cc44:	0018      	movs	r0, r3
 800cc46:	f000 fe28 	bl	800d89a <USBD_SetFeature>
          break;
 800cc4a:	e00d      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	0011      	movs	r1, r2
 800cc52:	0018      	movs	r0, r3
 800cc54:	f000 fe50 	bl	800d8f8 <USBD_ClrFeature>
          break;
 800cc58:	e006      	b.n	800cc68 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	0011      	movs	r1, r2
 800cc60:	0018      	movs	r0, r3
 800cc62:	f000 fead 	bl	800d9c0 <USBD_CtlError>
          break;
 800cc66:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800cc68:	e006      	b.n	800cc78 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	0011      	movs	r1, r2
 800cc70:	0018      	movs	r0, r3
 800cc72:	f000 fea5 	bl	800d9c0 <USBD_CtlError>
      break;
 800cc76:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800cc78:	230f      	movs	r3, #15
 800cc7a:	18fb      	adds	r3, r7, r3
 800cc7c:	781b      	ldrb	r3, [r3, #0]
}
 800cc7e:	0018      	movs	r0, r3
 800cc80:	46bd      	mov	sp, r7
 800cc82:	b005      	add	sp, #20
 800cc84:	bd90      	pop	{r4, r7, pc}
 800cc86:	46c0      	nop			@ (mov r8, r8)
 800cc88:	08012c70 	.word	0x08012c70

0800cc8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc8c:	b5b0      	push	{r4, r5, r7, lr}
 800cc8e:	b084      	sub	sp, #16
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc96:	230f      	movs	r3, #15
 800cc98:	18fb      	adds	r3, r7, r3
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	001a      	movs	r2, r3
 800cca4:	2360      	movs	r3, #96	@ 0x60
 800cca6:	4013      	ands	r3, r2
 800cca8:	2b40      	cmp	r3, #64	@ 0x40
 800ccaa:	d005      	beq.n	800ccb8 <USBD_StdItfReq+0x2c>
 800ccac:	d900      	bls.n	800ccb0 <USBD_StdItfReq+0x24>
 800ccae:	e06c      	b.n	800cd8a <USBD_StdItfReq+0xfe>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <USBD_StdItfReq+0x2c>
 800ccb4:	2b20      	cmp	r3, #32
 800ccb6:	d168      	bne.n	800cd8a <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	23a7      	movs	r3, #167	@ 0xa7
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	5cd3      	ldrb	r3, [r2, r3]
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d857      	bhi.n	800cd78 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	889b      	ldrh	r3, [r3, #4]
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d84b      	bhi.n	800cd6a <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	889b      	ldrh	r3, [r3, #4]
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	250e      	movs	r5, #14
 800ccda:	197c      	adds	r4, r7, r5
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	0011      	movs	r1, r2
 800cce0:	0018      	movs	r0, r3
 800cce2:	f7ff feb6 	bl	800ca52 <USBD_CoreFindIF>
 800cce6:	0003      	movs	r3, r0
 800cce8:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccea:	0029      	movs	r1, r5
 800ccec:	187b      	adds	r3, r7, r1
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2bff      	cmp	r3, #255	@ 0xff
 800ccf2:	d028      	beq.n	800cd46 <USBD_StdItfReq+0xba>
 800ccf4:	187b      	adds	r3, r7, r1
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d124      	bne.n	800cd46 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ccfc:	187b      	adds	r3, r7, r1
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	32ae      	adds	r2, #174	@ 0xae
 800cd04:	0092      	lsls	r2, r2, #2
 800cd06:	58d3      	ldr	r3, [r2, r3]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d016      	beq.n	800cd3c <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 800cd0e:	0008      	movs	r0, r1
 800cd10:	187b      	adds	r3, r7, r1
 800cd12:	7819      	ldrb	r1, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	23b5      	movs	r3, #181	@ 0xb5
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd1c:	183b      	adds	r3, r7, r0
 800cd1e:	781a      	ldrb	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	32ae      	adds	r2, #174	@ 0xae
 800cd24:	0092      	lsls	r2, r2, #2
 800cd26:	58d3      	ldr	r3, [r2, r3]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	220f      	movs	r2, #15
 800cd2c:	18bc      	adds	r4, r7, r2
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	0010      	movs	r0, r2
 800cd34:	4798      	blx	r3
 800cd36:	0003      	movs	r3, r0
 800cd38:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd3a:	e008      	b.n	800cd4e <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd3c:	230f      	movs	r3, #15
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	2203      	movs	r2, #3
 800cd42:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd44:	e003      	b.n	800cd4e <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd46:	230f      	movs	r3, #15
 800cd48:	18fb      	adds	r3, r7, r3
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	88db      	ldrh	r3, [r3, #6]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d117      	bne.n	800cd86 <USBD_StdItfReq+0xfa>
 800cd56:	230f      	movs	r3, #15
 800cd58:	18fb      	adds	r3, r7, r3
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d112      	bne.n	800cd86 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	0018      	movs	r0, r3
 800cd64:	f000 ff12 	bl	800db8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd68:	e00d      	b.n	800cd86 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	0011      	movs	r1, r2
 800cd70:	0018      	movs	r0, r3
 800cd72:	f000 fe25 	bl	800d9c0 <USBD_CtlError>
          break;
 800cd76:	e006      	b.n	800cd86 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	0011      	movs	r1, r2
 800cd7e:	0018      	movs	r0, r3
 800cd80:	f000 fe1e 	bl	800d9c0 <USBD_CtlError>
          break;
 800cd84:	e000      	b.n	800cd88 <USBD_StdItfReq+0xfc>
          break;
 800cd86:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800cd88:	e006      	b.n	800cd98 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	0011      	movs	r1, r2
 800cd90:	0018      	movs	r0, r3
 800cd92:	f000 fe15 	bl	800d9c0 <USBD_CtlError>
      break;
 800cd96:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800cd98:	230f      	movs	r3, #15
 800cd9a:	18fb      	adds	r3, r7, r3
 800cd9c:	781b      	ldrb	r3, [r3, #0]
}
 800cd9e:	0018      	movs	r0, r3
 800cda0:	46bd      	mov	sp, r7
 800cda2:	b004      	add	sp, #16
 800cda4:	bdb0      	pop	{r4, r5, r7, pc}

0800cda6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda6:	b5b0      	push	{r4, r5, r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdb0:	230f      	movs	r3, #15
 800cdb2:	18fb      	adds	r3, r7, r3
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	889a      	ldrh	r2, [r3, #4]
 800cdbc:	230e      	movs	r3, #14
 800cdbe:	18fb      	adds	r3, r7, r3
 800cdc0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	001a      	movs	r2, r3
 800cdc8:	2360      	movs	r3, #96	@ 0x60
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b40      	cmp	r3, #64	@ 0x40
 800cdce:	d006      	beq.n	800cdde <USBD_StdEPReq+0x38>
 800cdd0:	d900      	bls.n	800cdd4 <USBD_StdEPReq+0x2e>
 800cdd2:	e1de      	b.n	800d192 <USBD_StdEPReq+0x3ec>
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d039      	beq.n	800ce4c <USBD_StdEPReq+0xa6>
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	d000      	beq.n	800cdde <USBD_StdEPReq+0x38>
 800cddc:	e1d9      	b.n	800d192 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdde:	250d      	movs	r5, #13
 800cde0:	197c      	adds	r4, r7, r5
 800cde2:	230e      	movs	r3, #14
 800cde4:	18fb      	adds	r3, r7, r3
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	0011      	movs	r1, r2
 800cdec:	0018      	movs	r0, r3
 800cdee:	f7ff fe3c 	bl	800ca6a <USBD_CoreFindEP>
 800cdf2:	0003      	movs	r3, r0
 800cdf4:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdf6:	197b      	adds	r3, r7, r5
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2bff      	cmp	r3, #255	@ 0xff
 800cdfc:	d100      	bne.n	800ce00 <USBD_StdEPReq+0x5a>
 800cdfe:	e1cf      	b.n	800d1a0 <USBD_StdEPReq+0x3fa>
 800ce00:	197b      	adds	r3, r7, r5
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d000      	beq.n	800ce0a <USBD_StdEPReq+0x64>
 800ce08:	e1ca      	b.n	800d1a0 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800ce0a:	197b      	adds	r3, r7, r5
 800ce0c:	7819      	ldrb	r1, [r3, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	23b5      	movs	r3, #181	@ 0xb5
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ce16:	0029      	movs	r1, r5
 800ce18:	187b      	adds	r3, r7, r1
 800ce1a:	781a      	ldrb	r2, [r3, #0]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	32ae      	adds	r2, #174	@ 0xae
 800ce20:	0092      	lsls	r2, r2, #2
 800ce22:	58d3      	ldr	r3, [r2, r3]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d100      	bne.n	800ce2c <USBD_StdEPReq+0x86>
 800ce2a:	e1b9      	b.n	800d1a0 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ce2c:	187b      	adds	r3, r7, r1
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	32ae      	adds	r2, #174	@ 0xae
 800ce34:	0092      	lsls	r2, r2, #2
 800ce36:	58d3      	ldr	r3, [r2, r3]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	220f      	movs	r2, #15
 800ce3c:	18bc      	adds	r4, r7, r2
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	0010      	movs	r0, r2
 800ce44:	4798      	blx	r3
 800ce46:	0003      	movs	r3, r0
 800ce48:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 800ce4a:	e1a9      	b.n	800d1a0 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d007      	beq.n	800ce64 <USBD_StdEPReq+0xbe>
 800ce54:	dd00      	ble.n	800ce58 <USBD_StdEPReq+0xb2>
 800ce56:	e194      	b.n	800d182 <USBD_StdEPReq+0x3dc>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d100      	bne.n	800ce5e <USBD_StdEPReq+0xb8>
 800ce5c:	e0c9      	b.n	800cff2 <USBD_StdEPReq+0x24c>
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d04d      	beq.n	800cefe <USBD_StdEPReq+0x158>
 800ce62:	e18e      	b.n	800d182 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	23a7      	movs	r3, #167	@ 0xa7
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	5cd3      	ldrb	r3, [r2, r3]
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d002      	beq.n	800ce78 <USBD_StdEPReq+0xd2>
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d01e      	beq.n	800ceb4 <USBD_StdEPReq+0x10e>
 800ce76:	e03a      	b.n	800ceee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce78:	220e      	movs	r2, #14
 800ce7a:	18bb      	adds	r3, r7, r2
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d011      	beq.n	800cea6 <USBD_StdEPReq+0x100>
 800ce82:	18bb      	adds	r3, r7, r2
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	2b80      	cmp	r3, #128	@ 0x80
 800ce88:	d00d      	beq.n	800cea6 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce8a:	18bb      	adds	r3, r7, r2
 800ce8c:	781a      	ldrb	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	0011      	movs	r1, r2
 800ce92:	0018      	movs	r0, r3
 800ce94:	f001 fac1 	bl	800e41a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2180      	movs	r1, #128	@ 0x80
 800ce9c:	0018      	movs	r0, r3
 800ce9e:	f001 fabc 	bl	800e41a <USBD_LL_StallEP>
 800cea2:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cea4:	e02a      	b.n	800cefc <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	0011      	movs	r1, r2
 800ceac:	0018      	movs	r0, r3
 800ceae:	f000 fd87 	bl	800d9c0 <USBD_CtlError>
              break;
 800ceb2:	e023      	b.n	800cefc <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	885b      	ldrh	r3, [r3, #2]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d113      	bne.n	800cee4 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cebc:	220e      	movs	r2, #14
 800cebe:	18bb      	adds	r3, r7, r2
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00e      	beq.n	800cee4 <USBD_StdEPReq+0x13e>
 800cec6:	18bb      	adds	r3, r7, r2
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	2b80      	cmp	r3, #128	@ 0x80
 800cecc:	d00a      	beq.n	800cee4 <USBD_StdEPReq+0x13e>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	88db      	ldrh	r3, [r3, #6]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ced6:	18bb      	adds	r3, r7, r2
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	0011      	movs	r1, r2
 800cede:	0018      	movs	r0, r3
 800cee0:	f001 fa9b 	bl	800e41a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	0018      	movs	r0, r3
 800cee8:	f000 fe50 	bl	800db8c <USBD_CtlSendStatus>

              break;
 800ceec:	e006      	b.n	800cefc <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	0011      	movs	r1, r2
 800cef4:	0018      	movs	r0, r3
 800cef6:	f000 fd63 	bl	800d9c0 <USBD_CtlError>
              break;
 800cefa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cefc:	e148      	b.n	800d190 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	23a7      	movs	r3, #167	@ 0xa7
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	5cd3      	ldrb	r3, [r2, r3]
 800cf06:	b2db      	uxtb	r3, r3
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d002      	beq.n	800cf12 <USBD_StdEPReq+0x16c>
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d01e      	beq.n	800cf4e <USBD_StdEPReq+0x1a8>
 800cf10:	e066      	b.n	800cfe0 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf12:	220e      	movs	r2, #14
 800cf14:	18bb      	adds	r3, r7, r2
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d011      	beq.n	800cf40 <USBD_StdEPReq+0x19a>
 800cf1c:	18bb      	adds	r3, r7, r2
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b80      	cmp	r3, #128	@ 0x80
 800cf22:	d00d      	beq.n	800cf40 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf24:	18bb      	adds	r3, r7, r2
 800cf26:	781a      	ldrb	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	0011      	movs	r1, r2
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	f001 fa74 	bl	800e41a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2180      	movs	r1, #128	@ 0x80
 800cf36:	0018      	movs	r0, r3
 800cf38:	f001 fa6f 	bl	800e41a <USBD_LL_StallEP>
 800cf3c:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf3e:	e057      	b.n	800cff0 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	0011      	movs	r1, r2
 800cf46:	0018      	movs	r0, r3
 800cf48:	f000 fd3a 	bl	800d9c0 <USBD_CtlError>
              break;
 800cf4c:	e050      	b.n	800cff0 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	885b      	ldrh	r3, [r3, #2]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d14b      	bne.n	800cfee <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf56:	210e      	movs	r1, #14
 800cf58:	187b      	adds	r3, r7, r1
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	227f      	movs	r2, #127	@ 0x7f
 800cf5e:	4013      	ands	r3, r2
 800cf60:	d006      	beq.n	800cf70 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf62:	187b      	adds	r3, r7, r1
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	0011      	movs	r1, r2
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f001 fa80 	bl	800e470 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	0018      	movs	r0, r3
 800cf74:	f000 fe0a 	bl	800db8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf78:	250d      	movs	r5, #13
 800cf7a:	197c      	adds	r4, r7, r5
 800cf7c:	230e      	movs	r3, #14
 800cf7e:	18fb      	adds	r3, r7, r3
 800cf80:	781a      	ldrb	r2, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	0011      	movs	r1, r2
 800cf86:	0018      	movs	r0, r3
 800cf88:	f7ff fd6f 	bl	800ca6a <USBD_CoreFindEP>
 800cf8c:	0003      	movs	r3, r0
 800cf8e:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf90:	197b      	adds	r3, r7, r5
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2bff      	cmp	r3, #255	@ 0xff
 800cf96:	d02a      	beq.n	800cfee <USBD_StdEPReq+0x248>
 800cf98:	197b      	adds	r3, r7, r5
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d126      	bne.n	800cfee <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 800cfa0:	197b      	adds	r3, r7, r5
 800cfa2:	7819      	ldrb	r1, [r3, #0]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	23b5      	movs	r3, #181	@ 0xb5
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cfac:	0029      	movs	r1, r5
 800cfae:	187b      	adds	r3, r7, r1
 800cfb0:	781a      	ldrb	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	32ae      	adds	r2, #174	@ 0xae
 800cfb6:	0092      	lsls	r2, r2, #2
 800cfb8:	58d3      	ldr	r3, [r2, r3]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d016      	beq.n	800cfee <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cfc0:	187b      	adds	r3, r7, r1
 800cfc2:	781a      	ldrb	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32ae      	adds	r2, #174	@ 0xae
 800cfc8:	0092      	lsls	r2, r2, #2
 800cfca:	58d3      	ldr	r3, [r2, r3]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	220f      	movs	r2, #15
 800cfd0:	18bc      	adds	r4, r7, r2
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	0010      	movs	r0, r2
 800cfd8:	4798      	blx	r3
 800cfda:	0003      	movs	r3, r0
 800cfdc:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 800cfde:	e006      	b.n	800cfee <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	0011      	movs	r1, r2
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f000 fcea 	bl	800d9c0 <USBD_CtlError>
              break;
 800cfec:	e000      	b.n	800cff0 <USBD_StdEPReq+0x24a>
              break;
 800cfee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800cff0:	e0ce      	b.n	800d190 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	23a7      	movs	r3, #167	@ 0xa7
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	5cd3      	ldrb	r3, [r2, r3]
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d002      	beq.n	800d006 <USBD_StdEPReq+0x260>
 800d000:	2b03      	cmp	r3, #3
 800d002:	d03c      	beq.n	800d07e <USBD_StdEPReq+0x2d8>
 800d004:	e0b5      	b.n	800d172 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d006:	220e      	movs	r2, #14
 800d008:	18bb      	adds	r3, r7, r2
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00a      	beq.n	800d026 <USBD_StdEPReq+0x280>
 800d010:	18bb      	adds	r3, r7, r2
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	2b80      	cmp	r3, #128	@ 0x80
 800d016:	d006      	beq.n	800d026 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	0011      	movs	r1, r2
 800d01e:	0018      	movs	r0, r3
 800d020:	f000 fcce 	bl	800d9c0 <USBD_CtlError>
                break;
 800d024:	e0ac      	b.n	800d180 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d026:	220e      	movs	r2, #14
 800d028:	18bb      	adds	r3, r7, r2
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b25b      	sxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	da0c      	bge.n	800d04c <USBD_StdEPReq+0x2a6>
 800d032:	18bb      	adds	r3, r7, r2
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	227f      	movs	r2, #127	@ 0x7f
 800d038:	401a      	ands	r2, r3
 800d03a:	0013      	movs	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	189b      	adds	r3, r3, r2
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	3310      	adds	r3, #16
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	18d3      	adds	r3, r2, r3
 800d048:	3304      	adds	r3, #4
 800d04a:	e00d      	b.n	800d068 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d04c:	230e      	movs	r3, #14
 800d04e:	18fb      	adds	r3, r7, r3
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	227f      	movs	r2, #127	@ 0x7f
 800d054:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d056:	0013      	movs	r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	189b      	adds	r3, r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	3351      	adds	r3, #81	@ 0x51
 800d060:	33ff      	adds	r3, #255	@ 0xff
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	18d3      	adds	r3, r2, r3
 800d066:	3304      	adds	r3, #4
 800d068:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d070:	68b9      	ldr	r1, [r7, #8]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2202      	movs	r2, #2
 800d076:	0018      	movs	r0, r3
 800d078:	f000 fd2a 	bl	800dad0 <USBD_CtlSendData>
              break;
 800d07c:	e080      	b.n	800d180 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d07e:	220e      	movs	r2, #14
 800d080:	18bb      	adds	r3, r7, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	b25b      	sxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	da14      	bge.n	800d0b4 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d08a:	18bb      	adds	r3, r7, r2
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	220f      	movs	r2, #15
 800d090:	401a      	ands	r2, r3
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	0013      	movs	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	189b      	adds	r3, r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	18cb      	adds	r3, r1, r3
 800d09e:	3324      	adds	r3, #36	@ 0x24
 800d0a0:	881b      	ldrh	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d11e      	bne.n	800d0e4 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	0011      	movs	r1, r2
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f000 fc87 	bl	800d9c0 <USBD_CtlError>
                  break;
 800d0b2:	e065      	b.n	800d180 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d0b4:	230e      	movs	r3, #14
 800d0b6:	18fb      	adds	r3, r7, r3
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	220f      	movs	r2, #15
 800d0bc:	401a      	ands	r2, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	23b2      	movs	r3, #178	@ 0xb2
 800d0c2:	0059      	lsls	r1, r3, #1
 800d0c4:	0013      	movs	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	18c3      	adds	r3, r0, r3
 800d0ce:	185b      	adds	r3, r3, r1
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	0011      	movs	r1, r2
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f000 fc6f 	bl	800d9c0 <USBD_CtlError>
                  break;
 800d0e2:	e04d      	b.n	800d180 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0e4:	220e      	movs	r2, #14
 800d0e6:	18bb      	adds	r3, r7, r2
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	b25b      	sxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	da0c      	bge.n	800d10a <USBD_StdEPReq+0x364>
 800d0f0:	18bb      	adds	r3, r7, r2
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	227f      	movs	r2, #127	@ 0x7f
 800d0f6:	401a      	ands	r2, r3
 800d0f8:	0013      	movs	r3, r2
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	189b      	adds	r3, r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	3310      	adds	r3, #16
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	18d3      	adds	r3, r2, r3
 800d106:	3304      	adds	r3, #4
 800d108:	e00d      	b.n	800d126 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d10a:	230e      	movs	r3, #14
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	227f      	movs	r2, #127	@ 0x7f
 800d112:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d114:	0013      	movs	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	189b      	adds	r3, r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	3351      	adds	r3, #81	@ 0x51
 800d11e:	33ff      	adds	r3, #255	@ 0xff
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	18d3      	adds	r3, r2, r3
 800d124:	3304      	adds	r3, #4
 800d126:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d128:	220e      	movs	r2, #14
 800d12a:	18bb      	adds	r3, r7, r2
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d003      	beq.n	800d13a <USBD_StdEPReq+0x394>
 800d132:	18bb      	adds	r3, r7, r2
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b80      	cmp	r3, #128	@ 0x80
 800d138:	d103      	bne.n	800d142 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	e010      	b.n	800d164 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d142:	230e      	movs	r3, #14
 800d144:	18fb      	adds	r3, r7, r3
 800d146:	781a      	ldrb	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	0011      	movs	r1, r2
 800d14c:	0018      	movs	r0, r3
 800d14e:	f001 f9ba 	bl	800e4c6 <USBD_LL_IsStallEP>
 800d152:	1e03      	subs	r3, r0, #0
 800d154:	d003      	beq.n	800d15e <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	2201      	movs	r2, #1
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	e002      	b.n	800d164 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2200      	movs	r2, #0
 800d162:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d164:	68b9      	ldr	r1, [r7, #8]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2202      	movs	r2, #2
 800d16a:	0018      	movs	r0, r3
 800d16c:	f000 fcb0 	bl	800dad0 <USBD_CtlSendData>
              break;
 800d170:	e006      	b.n	800d180 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	0011      	movs	r1, r2
 800d178:	0018      	movs	r0, r3
 800d17a:	f000 fc21 	bl	800d9c0 <USBD_CtlError>
              break;
 800d17e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d180:	e006      	b.n	800d190 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	0011      	movs	r1, r2
 800d188:	0018      	movs	r0, r3
 800d18a:	f000 fc19 	bl	800d9c0 <USBD_CtlError>
          break;
 800d18e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d190:	e007      	b.n	800d1a2 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	0011      	movs	r1, r2
 800d198:	0018      	movs	r0, r3
 800d19a:	f000 fc11 	bl	800d9c0 <USBD_CtlError>
      break;
 800d19e:	e000      	b.n	800d1a2 <USBD_StdEPReq+0x3fc>
      break;
 800d1a0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d1a2:	230f      	movs	r3, #15
 800d1a4:	18fb      	adds	r3, r7, r3
 800d1a6:	781b      	ldrb	r3, [r3, #0]
}
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	b004      	add	sp, #16
 800d1ae:	bdb0      	pop	{r4, r5, r7, pc}

0800d1b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1ba:	2308      	movs	r3, #8
 800d1bc:	18fb      	adds	r3, r7, r3
 800d1be:	2200      	movs	r2, #0
 800d1c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d1c6:	230b      	movs	r3, #11
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	885b      	ldrh	r3, [r3, #2]
 800d1d2:	0a1b      	lsrs	r3, r3, #8
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	2b0f      	cmp	r3, #15
 800d1d8:	d900      	bls.n	800d1dc <USBD_GetDescriptor+0x2c>
 800d1da:	e17b      	b.n	800d4d4 <USBD_GetDescriptor+0x324>
 800d1dc:	009a      	lsls	r2, r3, #2
 800d1de:	4bdd      	ldr	r3, [pc, #884]	@ (800d554 <USBD_GetDescriptor+0x3a4>)
 800d1e0:	18d3      	adds	r3, r2, r3
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	23ad      	movs	r3, #173	@ 0xad
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	58d3      	ldr	r3, [r2, r3]
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00d      	beq.n	800d210 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	23ad      	movs	r3, #173	@ 0xad
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	58d3      	ldr	r3, [r2, r3]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	7c12      	ldrb	r2, [r2, #16]
 800d202:	2108      	movs	r1, #8
 800d204:	1879      	adds	r1, r7, r1
 800d206:	0010      	movs	r0, r2
 800d208:	4798      	blx	r3
 800d20a:	0003      	movs	r3, r0
 800d20c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d20e:	e16e      	b.n	800d4ee <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	0011      	movs	r1, r2
 800d216:	0018      	movs	r0, r3
 800d218:	f000 fbd2 	bl	800d9c0 <USBD_CtlError>
        err++;
 800d21c:	210b      	movs	r1, #11
 800d21e:	187b      	adds	r3, r7, r1
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	187b      	adds	r3, r7, r1
 800d224:	3201      	adds	r2, #1
 800d226:	701a      	strb	r2, [r3, #0]
      break;
 800d228:	e161      	b.n	800d4ee <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	23ad      	movs	r3, #173	@ 0xad
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	58d3      	ldr	r3, [r2, r3]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	7c12      	ldrb	r2, [r2, #16]
 800d238:	2108      	movs	r1, #8
 800d23a:	1879      	adds	r1, r7, r1
 800d23c:	0010      	movs	r0, r2
 800d23e:	4798      	blx	r3
 800d240:	0003      	movs	r3, r0
 800d242:	60fb      	str	r3, [r7, #12]
      break;
 800d244:	e153      	b.n	800d4ee <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	7c1b      	ldrb	r3, [r3, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10f      	bne.n	800d26e <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	23ae      	movs	r3, #174	@ 0xae
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	58d3      	ldr	r3, [r2, r3]
 800d256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d258:	2208      	movs	r2, #8
 800d25a:	18ba      	adds	r2, r7, r2
 800d25c:	0010      	movs	r0, r2
 800d25e:	4798      	blx	r3
 800d260:	0003      	movs	r3, r0
 800d262:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3301      	adds	r3, #1
 800d268:	2202      	movs	r2, #2
 800d26a:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d26c:	e13f      	b.n	800d4ee <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	23ae      	movs	r3, #174	@ 0xae
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	58d3      	ldr	r3, [r2, r3]
 800d276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d278:	2208      	movs	r2, #8
 800d27a:	18ba      	adds	r2, r7, r2
 800d27c:	0010      	movs	r0, r2
 800d27e:	4798      	blx	r3
 800d280:	0003      	movs	r3, r0
 800d282:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	3301      	adds	r3, #1
 800d288:	2202      	movs	r2, #2
 800d28a:	701a      	strb	r2, [r3, #0]
      break;
 800d28c:	e12f      	b.n	800d4ee <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	885b      	ldrh	r3, [r3, #2]
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b05      	cmp	r3, #5
 800d296:	d900      	bls.n	800d29a <USBD_GetDescriptor+0xea>
 800d298:	e0d0      	b.n	800d43c <USBD_GetDescriptor+0x28c>
 800d29a:	009a      	lsls	r2, r3, #2
 800d29c:	4bae      	ldr	r3, [pc, #696]	@ (800d558 <USBD_GetDescriptor+0x3a8>)
 800d29e:	18d3      	adds	r3, r2, r3
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	23ad      	movs	r3, #173	@ 0xad
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	58d3      	ldr	r3, [r2, r3]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00d      	beq.n	800d2ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	23ad      	movs	r3, #173	@ 0xad
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	58d3      	ldr	r3, [r2, r3]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	7c12      	ldrb	r2, [r2, #16]
 800d2c0:	2108      	movs	r1, #8
 800d2c2:	1879      	adds	r1, r7, r1
 800d2c4:	0010      	movs	r0, r2
 800d2c6:	4798      	blx	r3
 800d2c8:	0003      	movs	r3, r0
 800d2ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2cc:	e0c3      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	0011      	movs	r1, r2
 800d2d4:	0018      	movs	r0, r3
 800d2d6:	f000 fb73 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d2da:	210b      	movs	r1, #11
 800d2dc:	187b      	adds	r3, r7, r1
 800d2de:	781a      	ldrb	r2, [r3, #0]
 800d2e0:	187b      	adds	r3, r7, r1
 800d2e2:	3201      	adds	r2, #1
 800d2e4:	701a      	strb	r2, [r3, #0]
          break;
 800d2e6:	e0b6      	b.n	800d456 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	23ad      	movs	r3, #173	@ 0xad
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	58d3      	ldr	r3, [r2, r3]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00d      	beq.n	800d312 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	23ad      	movs	r3, #173	@ 0xad
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	58d3      	ldr	r3, [r2, r3]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	7c12      	ldrb	r2, [r2, #16]
 800d304:	2108      	movs	r1, #8
 800d306:	1879      	adds	r1, r7, r1
 800d308:	0010      	movs	r0, r2
 800d30a:	4798      	blx	r3
 800d30c:	0003      	movs	r3, r0
 800d30e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d310:	e0a1      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	0011      	movs	r1, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	f000 fb51 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d31e:	210b      	movs	r1, #11
 800d320:	187b      	adds	r3, r7, r1
 800d322:	781a      	ldrb	r2, [r3, #0]
 800d324:	187b      	adds	r3, r7, r1
 800d326:	3201      	adds	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
          break;
 800d32a:	e094      	b.n	800d456 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	23ad      	movs	r3, #173	@ 0xad
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	58d3      	ldr	r3, [r2, r3]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00d      	beq.n	800d356 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	23ad      	movs	r3, #173	@ 0xad
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	58d3      	ldr	r3, [r2, r3]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	7c12      	ldrb	r2, [r2, #16]
 800d348:	2108      	movs	r1, #8
 800d34a:	1879      	adds	r1, r7, r1
 800d34c:	0010      	movs	r0, r2
 800d34e:	4798      	blx	r3
 800d350:	0003      	movs	r3, r0
 800d352:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d354:	e07f      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d356:	683a      	ldr	r2, [r7, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	0011      	movs	r1, r2
 800d35c:	0018      	movs	r0, r3
 800d35e:	f000 fb2f 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d362:	210b      	movs	r1, #11
 800d364:	187b      	adds	r3, r7, r1
 800d366:	781a      	ldrb	r2, [r3, #0]
 800d368:	187b      	adds	r3, r7, r1
 800d36a:	3201      	adds	r2, #1
 800d36c:	701a      	strb	r2, [r3, #0]
          break;
 800d36e:	e072      	b.n	800d456 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	23ad      	movs	r3, #173	@ 0xad
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	58d3      	ldr	r3, [r2, r3]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00d      	beq.n	800d39a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	23ad      	movs	r3, #173	@ 0xad
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	58d3      	ldr	r3, [r2, r3]
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	7c12      	ldrb	r2, [r2, #16]
 800d38c:	2108      	movs	r1, #8
 800d38e:	1879      	adds	r1, r7, r1
 800d390:	0010      	movs	r0, r2
 800d392:	4798      	blx	r3
 800d394:	0003      	movs	r3, r0
 800d396:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d398:	e05d      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	0011      	movs	r1, r2
 800d3a0:	0018      	movs	r0, r3
 800d3a2:	f000 fb0d 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d3a6:	210b      	movs	r1, #11
 800d3a8:	187b      	adds	r3, r7, r1
 800d3aa:	781a      	ldrb	r2, [r3, #0]
 800d3ac:	187b      	adds	r3, r7, r1
 800d3ae:	3201      	adds	r2, #1
 800d3b0:	701a      	strb	r2, [r3, #0]
          break;
 800d3b2:	e050      	b.n	800d456 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	23ad      	movs	r3, #173	@ 0xad
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	58d3      	ldr	r3, [r2, r3]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00d      	beq.n	800d3de <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	23ad      	movs	r3, #173	@ 0xad
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	58d3      	ldr	r3, [r2, r3]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	7c12      	ldrb	r2, [r2, #16]
 800d3d0:	2108      	movs	r1, #8
 800d3d2:	1879      	adds	r1, r7, r1
 800d3d4:	0010      	movs	r0, r2
 800d3d6:	4798      	blx	r3
 800d3d8:	0003      	movs	r3, r0
 800d3da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3dc:	e03b      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d3de:	683a      	ldr	r2, [r7, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	0011      	movs	r1, r2
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	f000 faeb 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d3ea:	210b      	movs	r1, #11
 800d3ec:	187b      	adds	r3, r7, r1
 800d3ee:	781a      	ldrb	r2, [r3, #0]
 800d3f0:	187b      	adds	r3, r7, r1
 800d3f2:	3201      	adds	r2, #1
 800d3f4:	701a      	strb	r2, [r3, #0]
          break;
 800d3f6:	e02e      	b.n	800d456 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	23ad      	movs	r3, #173	@ 0xad
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	58d3      	ldr	r3, [r2, r3]
 800d400:	699b      	ldr	r3, [r3, #24]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00d      	beq.n	800d422 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	23ad      	movs	r3, #173	@ 0xad
 800d40a:	009b      	lsls	r3, r3, #2
 800d40c:	58d3      	ldr	r3, [r2, r3]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	7c12      	ldrb	r2, [r2, #16]
 800d414:	2108      	movs	r1, #8
 800d416:	1879      	adds	r1, r7, r1
 800d418:	0010      	movs	r0, r2
 800d41a:	4798      	blx	r3
 800d41c:	0003      	movs	r3, r0
 800d41e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d420:	e019      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	0011      	movs	r1, r2
 800d428:	0018      	movs	r0, r3
 800d42a:	f000 fac9 	bl	800d9c0 <USBD_CtlError>
            err++;
 800d42e:	210b      	movs	r1, #11
 800d430:	187b      	adds	r3, r7, r1
 800d432:	781a      	ldrb	r2, [r3, #0]
 800d434:	187b      	adds	r3, r7, r1
 800d436:	3201      	adds	r2, #1
 800d438:	701a      	strb	r2, [r3, #0]
          break;
 800d43a:	e00c      	b.n	800d456 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	0011      	movs	r1, r2
 800d442:	0018      	movs	r0, r3
 800d444:	f000 fabc 	bl	800d9c0 <USBD_CtlError>
          err++;
 800d448:	210b      	movs	r1, #11
 800d44a:	187b      	adds	r3, r7, r1
 800d44c:	781a      	ldrb	r2, [r3, #0]
 800d44e:	187b      	adds	r3, r7, r1
 800d450:	3201      	adds	r2, #1
 800d452:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d454:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d456:	e04a      	b.n	800d4ee <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7c1b      	ldrb	r3, [r3, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10b      	bne.n	800d478 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	23ae      	movs	r3, #174	@ 0xae
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	58d3      	ldr	r3, [r2, r3]
 800d468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d46a:	2208      	movs	r2, #8
 800d46c:	18ba      	adds	r2, r7, r2
 800d46e:	0010      	movs	r0, r2
 800d470:	4798      	blx	r3
 800d472:	0003      	movs	r3, r0
 800d474:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d476:	e03a      	b.n	800d4ee <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	0011      	movs	r1, r2
 800d47e:	0018      	movs	r0, r3
 800d480:	f000 fa9e 	bl	800d9c0 <USBD_CtlError>
        err++;
 800d484:	210b      	movs	r1, #11
 800d486:	187b      	adds	r3, r7, r1
 800d488:	781a      	ldrb	r2, [r3, #0]
 800d48a:	187b      	adds	r3, r7, r1
 800d48c:	3201      	adds	r2, #1
 800d48e:	701a      	strb	r2, [r3, #0]
      break;
 800d490:	e02d      	b.n	800d4ee <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	7c1b      	ldrb	r3, [r3, #16]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10f      	bne.n	800d4ba <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	23ae      	movs	r3, #174	@ 0xae
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	58d3      	ldr	r3, [r2, r3]
 800d4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a4:	2208      	movs	r2, #8
 800d4a6:	18ba      	adds	r2, r7, r2
 800d4a8:	0010      	movs	r0, r2
 800d4aa:	4798      	blx	r3
 800d4ac:	0003      	movs	r3, r0
 800d4ae:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	2207      	movs	r2, #7
 800d4b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4b8:	e019      	b.n	800d4ee <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	0011      	movs	r1, r2
 800d4c0:	0018      	movs	r0, r3
 800d4c2:	f000 fa7d 	bl	800d9c0 <USBD_CtlError>
        err++;
 800d4c6:	210b      	movs	r1, #11
 800d4c8:	187b      	adds	r3, r7, r1
 800d4ca:	781a      	ldrb	r2, [r3, #0]
 800d4cc:	187b      	adds	r3, r7, r1
 800d4ce:	3201      	adds	r2, #1
 800d4d0:	701a      	strb	r2, [r3, #0]
      break;
 800d4d2:	e00c      	b.n	800d4ee <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 800d4d4:	683a      	ldr	r2, [r7, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	0011      	movs	r1, r2
 800d4da:	0018      	movs	r0, r3
 800d4dc:	f000 fa70 	bl	800d9c0 <USBD_CtlError>
      err++;
 800d4e0:	210b      	movs	r1, #11
 800d4e2:	187b      	adds	r3, r7, r1
 800d4e4:	781a      	ldrb	r2, [r3, #0]
 800d4e6:	187b      	adds	r3, r7, r1
 800d4e8:	3201      	adds	r2, #1
 800d4ea:	701a      	strb	r2, [r3, #0]
      break;
 800d4ec:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800d4ee:	230b      	movs	r3, #11
 800d4f0:	18fb      	adds	r3, r7, r3
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d131      	bne.n	800d55c <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	88db      	ldrh	r3, [r3, #6]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d023      	beq.n	800d548 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800d500:	2108      	movs	r1, #8
 800d502:	187b      	adds	r3, r7, r1
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d017      	beq.n	800d53a <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	88da      	ldrh	r2, [r3, #6]
 800d50e:	187b      	adds	r3, r7, r1
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	1c18      	adds	r0, r3, #0
 800d514:	1c11      	adds	r1, r2, #0
 800d516:	b28a      	uxth	r2, r1
 800d518:	b283      	uxth	r3, r0
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d900      	bls.n	800d520 <USBD_GetDescriptor+0x370>
 800d51e:	1c01      	adds	r1, r0, #0
 800d520:	b28a      	uxth	r2, r1
 800d522:	2108      	movs	r1, #8
 800d524:	187b      	adds	r3, r7, r1
 800d526:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d528:	187b      	adds	r3, r7, r1
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	001a      	movs	r2, r3
 800d52e:	68f9      	ldr	r1, [r7, #12]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	0018      	movs	r0, r3
 800d534:	f000 facc 	bl	800dad0 <USBD_CtlSendData>
 800d538:	e011      	b.n	800d55e <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	0011      	movs	r1, r2
 800d540:	0018      	movs	r0, r3
 800d542:	f000 fa3d 	bl	800d9c0 <USBD_CtlError>
 800d546:	e00a      	b.n	800d55e <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	0018      	movs	r0, r3
 800d54c:	f000 fb1e 	bl	800db8c <USBD_CtlSendStatus>
 800d550:	e005      	b.n	800d55e <USBD_GetDescriptor+0x3ae>
 800d552:	46c0      	nop			@ (mov r8, r8)
 800d554:	08012c98 	.word	0x08012c98
 800d558:	08012cd8 	.word	0x08012cd8
    return;
 800d55c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d55e:	46bd      	mov	sp, r7
 800d560:	b004      	add	sp, #16
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d564:	b590      	push	{r4, r7, lr}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	889b      	ldrh	r3, [r3, #4]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d13e      	bne.n	800d5f4 <USBD_SetAddress+0x90>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	88db      	ldrh	r3, [r3, #6]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d13a      	bne.n	800d5f4 <USBD_SetAddress+0x90>
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	885b      	ldrh	r3, [r3, #2]
 800d582:	2b7f      	cmp	r3, #127	@ 0x7f
 800d584:	d836      	bhi.n	800d5f4 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	885b      	ldrh	r3, [r3, #2]
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	230f      	movs	r3, #15
 800d58e:	18fb      	adds	r3, r7, r3
 800d590:	217f      	movs	r1, #127	@ 0x7f
 800d592:	400a      	ands	r2, r1
 800d594:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	23a7      	movs	r3, #167	@ 0xa7
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	5cd3      	ldrb	r3, [r2, r3]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d106      	bne.n	800d5b2 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	0011      	movs	r1, r2
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f000 fa08 	bl	800d9c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b0:	e027      	b.n	800d602 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	240f      	movs	r4, #15
 800d5b6:	193a      	adds	r2, r7, r4
 800d5b8:	4914      	ldr	r1, [pc, #80]	@ (800d60c <USBD_SetAddress+0xa8>)
 800d5ba:	7812      	ldrb	r2, [r2, #0]
 800d5bc:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5be:	193b      	adds	r3, r7, r4
 800d5c0:	781a      	ldrb	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	0011      	movs	r1, r2
 800d5c6:	0018      	movs	r0, r3
 800d5c8:	f000 ffad 	bl	800e526 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	f000 fadc 	bl	800db8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5d4:	193b      	adds	r3, r7, r4
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	23a7      	movs	r3, #167	@ 0xa7
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	2102      	movs	r1, #2
 800d5e4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e6:	e00c      	b.n	800d602 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	23a7      	movs	r3, #167	@ 0xa7
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5f2:	e006      	b.n	800d602 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d5f4:	683a      	ldr	r2, [r7, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	0011      	movs	r1, r2
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f000 f9e0 	bl	800d9c0 <USBD_CtlError>
  }
}
 800d600:	46c0      	nop			@ (mov r8, r8)
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b005      	add	sp, #20
 800d608:	bd90      	pop	{r4, r7, pc}
 800d60a:	46c0      	nop			@ (mov r8, r8)
 800d60c:	0000029e 	.word	0x0000029e

0800d610 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d610:	b5b0      	push	{r4, r5, r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d61a:	230f      	movs	r3, #15
 800d61c:	18fb      	adds	r3, r7, r3
 800d61e:	2200      	movs	r2, #0
 800d620:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	b2da      	uxtb	r2, r3
 800d628:	4b5f      	ldr	r3, [pc, #380]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d62a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d62c:	4b5e      	ldr	r3, [pc, #376]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d907      	bls.n	800d644 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	0011      	movs	r1, r2
 800d63a:	0018      	movs	r0, r3
 800d63c:	f000 f9c0 	bl	800d9c0 <USBD_CtlError>
    return USBD_FAIL;
 800d640:	2303      	movs	r3, #3
 800d642:	e0ac      	b.n	800d79e <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 800d644:	687a      	ldr	r2, [r7, #4]
 800d646:	23a7      	movs	r3, #167	@ 0xa7
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	5cd3      	ldrb	r3, [r2, r3]
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d002      	beq.n	800d658 <USBD_SetConfig+0x48>
 800d652:	2b03      	cmp	r3, #3
 800d654:	d033      	beq.n	800d6be <USBD_SetConfig+0xae>
 800d656:	e08d      	b.n	800d774 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d658:	4b53      	ldr	r3, [pc, #332]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d029      	beq.n	800d6b4 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 800d660:	4b51      	ldr	r3, [pc, #324]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	001a      	movs	r2, r3
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d66a:	4b4f      	ldr	r3, [pc, #316]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d66c:	781a      	ldrb	r2, [r3, #0]
 800d66e:	250f      	movs	r5, #15
 800d670:	197c      	adds	r4, r7, r5
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	0011      	movs	r1, r2
 800d676:	0018      	movs	r0, r3
 800d678:	f7fe feb4 	bl	800c3e4 <USBD_SetClassConfig>
 800d67c:	0003      	movs	r3, r0
 800d67e:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800d680:	197b      	adds	r3, r7, r5
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d00b      	beq.n	800d6a0 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 800d688:	683a      	ldr	r2, [r7, #0]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	0011      	movs	r1, r2
 800d68e:	0018      	movs	r0, r3
 800d690:	f000 f996 	bl	800d9c0 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	23a7      	movs	r3, #167	@ 0xa7
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	2102      	movs	r1, #2
 800d69c:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d69e:	e07b      	b.n	800d798 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	0018      	movs	r0, r3
 800d6a4:	f000 fa72 	bl	800db8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	23a7      	movs	r3, #167	@ 0xa7
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	2103      	movs	r1, #3
 800d6b0:	54d1      	strb	r1, [r2, r3]
      break;
 800d6b2:	e071      	b.n	800d798 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	0018      	movs	r0, r3
 800d6b8:	f000 fa68 	bl	800db8c <USBD_CtlSendStatus>
      break;
 800d6bc:	e06c      	b.n	800d798 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d6be:	4b3a      	ldr	r3, [pc, #232]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d115      	bne.n	800d6f2 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	23a7      	movs	r3, #167	@ 0xa7
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	2102      	movs	r1, #2
 800d6ce:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800d6d0:	4b35      	ldr	r3, [pc, #212]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	001a      	movs	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6da:	4b33      	ldr	r3, [pc, #204]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d6dc:	781a      	ldrb	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	0011      	movs	r1, r2
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	f7fe fea3 	bl	800c42e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	0018      	movs	r0, r3
 800d6ec:	f000 fa4e 	bl	800db8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6f0:	e052      	b.n	800d798 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 800d6f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	001a      	movs	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d034      	beq.n	800d76a <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	b2da      	uxtb	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	0011      	movs	r1, r2
 800d70a:	0018      	movs	r0, r3
 800d70c:	f7fe fe8f 	bl	800c42e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d710:	4b25      	ldr	r3, [pc, #148]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	001a      	movs	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d71a:	4b23      	ldr	r3, [pc, #140]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d71c:	781a      	ldrb	r2, [r3, #0]
 800d71e:	250f      	movs	r5, #15
 800d720:	197c      	adds	r4, r7, r5
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	0011      	movs	r1, r2
 800d726:	0018      	movs	r0, r3
 800d728:	f7fe fe5c 	bl	800c3e4 <USBD_SetClassConfig>
 800d72c:	0003      	movs	r3, r0
 800d72e:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800d730:	197b      	adds	r3, r7, r5
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d013      	beq.n	800d760 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	0011      	movs	r1, r2
 800d73e:	0018      	movs	r0, r3
 800d740:	f000 f93e 	bl	800d9c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	0011      	movs	r1, r2
 800d74e:	0018      	movs	r0, r3
 800d750:	f7fe fe6d 	bl	800c42e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	23a7      	movs	r3, #167	@ 0xa7
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	2102      	movs	r1, #2
 800d75c:	54d1      	strb	r1, [r2, r3]
      break;
 800d75e:	e01b      	b.n	800d798 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	0018      	movs	r0, r3
 800d764:	f000 fa12 	bl	800db8c <USBD_CtlSendStatus>
      break;
 800d768:	e016      	b.n	800d798 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	0018      	movs	r0, r3
 800d76e:	f000 fa0d 	bl	800db8c <USBD_CtlSendStatus>
      break;
 800d772:	e011      	b.n	800d798 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 800d774:	683a      	ldr	r2, [r7, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	0011      	movs	r1, r2
 800d77a:	0018      	movs	r0, r3
 800d77c:	f000 f920 	bl	800d9c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d780:	4b09      	ldr	r3, [pc, #36]	@ (800d7a8 <USBD_SetConfig+0x198>)
 800d782:	781a      	ldrb	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	0011      	movs	r1, r2
 800d788:	0018      	movs	r0, r3
 800d78a:	f7fe fe50 	bl	800c42e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d78e:	230f      	movs	r3, #15
 800d790:	18fb      	adds	r3, r7, r3
 800d792:	2203      	movs	r2, #3
 800d794:	701a      	strb	r2, [r3, #0]
      break;
 800d796:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d798:	230f      	movs	r3, #15
 800d79a:	18fb      	adds	r3, r7, r3
 800d79c:	781b      	ldrb	r3, [r3, #0]
}
 800d79e:	0018      	movs	r0, r3
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	b004      	add	sp, #16
 800d7a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7a6:	46c0      	nop			@ (mov r8, r8)
 800d7a8:	2000077c 	.word	0x2000077c

0800d7ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	88db      	ldrh	r3, [r3, #6]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d006      	beq.n	800d7cc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	0011      	movs	r1, r2
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	f000 f8fb 	bl	800d9c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7ca:	e027      	b.n	800d81c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	23a7      	movs	r3, #167	@ 0xa7
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	5cd3      	ldrb	r3, [r2, r3]
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	dc02      	bgt.n	800d7e0 <USBD_GetConfig+0x34>
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	dc03      	bgt.n	800d7e6 <USBD_GetConfig+0x3a>
 800d7de:	e016      	b.n	800d80e <USBD_GetConfig+0x62>
 800d7e0:	2b03      	cmp	r3, #3
 800d7e2:	d00c      	beq.n	800d7fe <USBD_GetConfig+0x52>
 800d7e4:	e013      	b.n	800d80e <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3308      	adds	r3, #8
 800d7f0:	0019      	movs	r1, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	0018      	movs	r0, r3
 800d7f8:	f000 f96a 	bl	800dad0 <USBD_CtlSendData>
        break;
 800d7fc:	e00e      	b.n	800d81c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	1d19      	adds	r1, r3, #4
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2201      	movs	r2, #1
 800d806:	0018      	movs	r0, r3
 800d808:	f000 f962 	bl	800dad0 <USBD_CtlSendData>
        break;
 800d80c:	e006      	b.n	800d81c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	0011      	movs	r1, r2
 800d814:	0018      	movs	r0, r3
 800d816:	f000 f8d3 	bl	800d9c0 <USBD_CtlError>
        break;
 800d81a:	46c0      	nop			@ (mov r8, r8)
}
 800d81c:	46c0      	nop			@ (mov r8, r8)
 800d81e:	46bd      	mov	sp, r7
 800d820:	b002      	add	sp, #8
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	23a7      	movs	r3, #167	@ 0xa7
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	5cd3      	ldrb	r3, [r2, r3]
 800d836:	b2db      	uxtb	r3, r3
 800d838:	3b01      	subs	r3, #1
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d822      	bhi.n	800d884 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	88db      	ldrh	r3, [r3, #6]
 800d842:	2b02      	cmp	r3, #2
 800d844:	d006      	beq.n	800d854 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	0011      	movs	r1, r2
 800d84c:	0018      	movs	r0, r3
 800d84e:	f000 f8b7 	bl	800d9c0 <USBD_CtlError>
        break;
 800d852:	e01e      	b.n	800d892 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	23a9      	movs	r3, #169	@ 0xa9
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	58d3      	ldr	r3, [r2, r3]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d005      	beq.n	800d872 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	2202      	movs	r2, #2
 800d86c:	431a      	orrs	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	330c      	adds	r3, #12
 800d876:	0019      	movs	r1, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	0018      	movs	r0, r3
 800d87e:	f000 f927 	bl	800dad0 <USBD_CtlSendData>
      break;
 800d882:	e006      	b.n	800d892 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	0011      	movs	r1, r2
 800d88a:	0018      	movs	r0, r3
 800d88c:	f000 f898 	bl	800d9c0 <USBD_CtlError>
      break;
 800d890:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d892:	46c0      	nop			@ (mov r8, r8)
 800d894:	46bd      	mov	sp, r7
 800d896:	b002      	add	sp, #8
 800d898:	bd80      	pop	{r7, pc}

0800d89a <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b082      	sub	sp, #8
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	885b      	ldrh	r3, [r3, #2]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d109      	bne.n	800d8c0 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	23a9      	movs	r3, #169	@ 0xa9
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f000 f967 	bl	800db8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d8be:	e017      	b.n	800d8f0 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	885b      	ldrh	r3, [r3, #2]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d10d      	bne.n	800d8e4 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	889b      	ldrh	r3, [r3, #4]
 800d8cc:	0a1b      	lsrs	r3, r3, #8
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	b2d9      	uxtb	r1, r3
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	23a8      	movs	r3, #168	@ 0xa8
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f000 f955 	bl	800db8c <USBD_CtlSendStatus>
}
 800d8e2:	e005      	b.n	800d8f0 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	0011      	movs	r1, r2
 800d8ea:	0018      	movs	r0, r3
 800d8ec:	f000 f868 	bl	800d9c0 <USBD_CtlError>
}
 800d8f0:	46c0      	nop			@ (mov r8, r8)
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	b002      	add	sp, #8
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	23a7      	movs	r3, #167	@ 0xa7
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	5cd3      	ldrb	r3, [r2, r3]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	3b01      	subs	r3, #1
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d80d      	bhi.n	800d92e <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d110      	bne.n	800d93c <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	23a9      	movs	r3, #169	@ 0xa9
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	2100      	movs	r1, #0
 800d922:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	0018      	movs	r0, r3
 800d928:	f000 f930 	bl	800db8c <USBD_CtlSendStatus>
      }
      break;
 800d92c:	e006      	b.n	800d93c <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800d92e:	683a      	ldr	r2, [r7, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	0011      	movs	r1, r2
 800d934:	0018      	movs	r0, r3
 800d936:	f000 f843 	bl	800d9c0 <USBD_CtlError>
      break;
 800d93a:	e000      	b.n	800d93e <USBD_ClrFeature+0x46>
      break;
 800d93c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	46bd      	mov	sp, r7
 800d942:	b002      	add	sp, #8
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b084      	sub	sp, #16
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	3301      	adds	r3, #1
 800d960:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	781a      	ldrb	r2, [r3, #0]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3301      	adds	r3, #1
 800d96e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	0018      	movs	r0, r3
 800d974:	f7ff f8e6 	bl	800cb44 <SWAPBYTE>
 800d978:	0003      	movs	r3, r0
 800d97a:	001a      	movs	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	3301      	adds	r3, #1
 800d984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3301      	adds	r3, #1
 800d98a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	0018      	movs	r0, r3
 800d990:	f7ff f8d8 	bl	800cb44 <SWAPBYTE>
 800d994:	0003      	movs	r3, r0
 800d996:	001a      	movs	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	0018      	movs	r0, r3
 800d9ac:	f7ff f8ca 	bl	800cb44 <SWAPBYTE>
 800d9b0:	0003      	movs	r3, r0
 800d9b2:	001a      	movs	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	80da      	strh	r2, [r3, #6]
}
 800d9b8:	46c0      	nop			@ (mov r8, r8)
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	b004      	add	sp, #16
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2180      	movs	r1, #128	@ 0x80
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	f000 fd23 	bl	800e41a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f000 fd1e 	bl	800e41a <USBD_LL_StallEP>
}
 800d9de:	46c0      	nop			@ (mov r8, r8)
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	b002      	add	sp, #8
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9e6:	b590      	push	{r4, r7, lr}
 800d9e8:	b087      	sub	sp, #28
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	60f8      	str	r0, [r7, #12]
 800d9ee:	60b9      	str	r1, [r7, #8]
 800d9f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9f2:	2417      	movs	r4, #23
 800d9f4:	193b      	adds	r3, r7, r4
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d044      	beq.n	800da8a <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	0018      	movs	r0, r3
 800da08:	f000 f843 	bl	800da92 <USBD_GetLen>
 800da0c:	0003      	movs	r3, r0
 800da0e:	3301      	adds	r3, #1
 800da10:	b29b      	uxth	r3, r3
 800da12:	18db      	adds	r3, r3, r3
 800da14:	b29a      	uxth	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da1a:	193b      	adds	r3, r7, r4
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	18d3      	adds	r3, r2, r3
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	7812      	ldrb	r2, [r2, #0]
 800da26:	701a      	strb	r2, [r3, #0]
  idx++;
 800da28:	193b      	adds	r3, r7, r4
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	193b      	adds	r3, r7, r4
 800da2e:	3201      	adds	r2, #1
 800da30:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da32:	193b      	adds	r3, r7, r4
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	18d3      	adds	r3, r2, r3
 800da3a:	2203      	movs	r2, #3
 800da3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800da3e:	193b      	adds	r3, r7, r4
 800da40:	781a      	ldrb	r2, [r3, #0]
 800da42:	193b      	adds	r3, r7, r4
 800da44:	3201      	adds	r2, #1
 800da46:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800da48:	e01a      	b.n	800da80 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800da4a:	2117      	movs	r1, #23
 800da4c:	187b      	adds	r3, r7, r1
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	18d3      	adds	r3, r2, r3
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	7812      	ldrb	r2, [r2, #0]
 800da58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	3301      	adds	r3, #1
 800da5e:	613b      	str	r3, [r7, #16]
    idx++;
 800da60:	187b      	adds	r3, r7, r1
 800da62:	781a      	ldrb	r2, [r3, #0]
 800da64:	187b      	adds	r3, r7, r1
 800da66:	3201      	adds	r2, #1
 800da68:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800da6a:	187b      	adds	r3, r7, r1
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	68ba      	ldr	r2, [r7, #8]
 800da70:	18d3      	adds	r3, r2, r3
 800da72:	2200      	movs	r2, #0
 800da74:	701a      	strb	r2, [r3, #0]
    idx++;
 800da76:	187b      	adds	r3, r7, r1
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	187b      	adds	r3, r7, r1
 800da7c:	3201      	adds	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1e0      	bne.n	800da4a <USBD_GetString+0x64>
 800da88:	e000      	b.n	800da8c <USBD_GetString+0xa6>
    return;
 800da8a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800da8c:	46bd      	mov	sp, r7
 800da8e:	b007      	add	sp, #28
 800da90:	bd90      	pop	{r4, r7, pc}

0800da92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da9a:	230f      	movs	r3, #15
 800da9c:	18fb      	adds	r3, r7, r3
 800da9e:	2200      	movs	r2, #0
 800daa0:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800daa6:	e008      	b.n	800daba <USBD_GetLen+0x28>
  {
    len++;
 800daa8:	210f      	movs	r1, #15
 800daaa:	187b      	adds	r3, r7, r1
 800daac:	781a      	ldrb	r2, [r3, #0]
 800daae:	187b      	adds	r3, r7, r1
 800dab0:	3201      	adds	r2, #1
 800dab2:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f2      	bne.n	800daa8 <USBD_GetLen+0x16>
  }

  return len;
 800dac2:	230f      	movs	r3, #15
 800dac4:	18fb      	adds	r3, r7, r3
 800dac6:	781b      	ldrb	r3, [r3, #0]
}
 800dac8:	0018      	movs	r0, r3
 800daca:	46bd      	mov	sp, r7
 800dacc:	b004      	add	sp, #16
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	23a5      	movs	r3, #165	@ 0xa5
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	2102      	movs	r1, #2
 800dae4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	2100      	movs	r1, #0
 800dafa:	f000 fd3f 	bl	800e57c <USBD_LL_Transmit>

  return USBD_OK;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	0018      	movs	r0, r3
 800db02:	46bd      	mov	sp, r7
 800db04:	b004      	add	sp, #16
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	2100      	movs	r1, #0
 800db1c:	f000 fd2e 	bl	800e57c <USBD_LL_Transmit>

  return USBD_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	0018      	movs	r0, r3
 800db24:	46bd      	mov	sp, r7
 800db26:	b004      	add	sp, #16
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	23a5      	movs	r3, #165	@ 0xa5
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	2103      	movs	r1, #3
 800db3e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	23ac      	movs	r3, #172	@ 0xac
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	6879      	ldr	r1, [r7, #4]
 800db48:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	23ae      	movs	r3, #174	@ 0xae
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	2100      	movs	r1, #0
 800db5c:	f000 fd3e 	bl	800e5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	0018      	movs	r0, r3
 800db64:	46bd      	mov	sp, r7
 800db66:	b004      	add	sp, #16
 800db68:	bd80      	pop	{r7, pc}

0800db6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b084      	sub	sp, #16
 800db6e:	af00      	add	r7, sp, #0
 800db70:	60f8      	str	r0, [r7, #12]
 800db72:	60b9      	str	r1, [r7, #8]
 800db74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	2100      	movs	r1, #0
 800db7e:	f000 fd2d 	bl	800e5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	0018      	movs	r0, r3
 800db86:	46bd      	mov	sp, r7
 800db88:	b004      	add	sp, #16
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	23a5      	movs	r3, #165	@ 0xa5
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	2104      	movs	r1, #4
 800db9c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	2300      	movs	r3, #0
 800dba2:	2200      	movs	r2, #0
 800dba4:	2100      	movs	r1, #0
 800dba6:	f000 fce9 	bl	800e57c <USBD_LL_Transmit>

  return USBD_OK;
 800dbaa:	2300      	movs	r3, #0
}
 800dbac:	0018      	movs	r0, r3
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	b002      	add	sp, #8
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	23a5      	movs	r3, #165	@ 0xa5
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	2105      	movs	r1, #5
 800dbc4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2100      	movs	r1, #0
 800dbce:	f000 fd05 	bl	800e5dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	0018      	movs	r0, r3
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	b002      	add	sp, #8
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dbe0:	4914      	ldr	r1, [pc, #80]	@ (800dc34 <MX_USB_Device_Init+0x58>)
 800dbe2:	4b15      	ldr	r3, [pc, #84]	@ (800dc38 <MX_USB_Device_Init+0x5c>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	0018      	movs	r0, r3
 800dbe8:	f7fe fb6e 	bl	800c2c8 <USBD_Init>
 800dbec:	1e03      	subs	r3, r0, #0
 800dbee:	d001      	beq.n	800dbf4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dbf0:	f7f5 fdb8 	bl	8003764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dbf4:	4a11      	ldr	r2, [pc, #68]	@ (800dc3c <MX_USB_Device_Init+0x60>)
 800dbf6:	4b10      	ldr	r3, [pc, #64]	@ (800dc38 <MX_USB_Device_Init+0x5c>)
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f7fe fb9e 	bl	800c33c <USBD_RegisterClass>
 800dc00:	1e03      	subs	r3, r0, #0
 800dc02:	d001      	beq.n	800dc08 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800dc04:	f7f5 fdae 	bl	8003764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dc08:	4a0d      	ldr	r2, [pc, #52]	@ (800dc40 <MX_USB_Device_Init+0x64>)
 800dc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <MX_USB_Device_Init+0x5c>)
 800dc0c:	0011      	movs	r1, r2
 800dc0e:	0018      	movs	r0, r3
 800dc10:	f7fe fa78 	bl	800c104 <USBD_CDC_RegisterInterface>
 800dc14:	1e03      	subs	r3, r0, #0
 800dc16:	d001      	beq.n	800dc1c <MX_USB_Device_Init+0x40>
    Error_Handler();
 800dc18:	f7f5 fda4 	bl	8003764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dc1c:	4b06      	ldr	r3, [pc, #24]	@ (800dc38 <MX_USB_Device_Init+0x5c>)
 800dc1e:	0018      	movs	r0, r3
 800dc20:	f7fe fbca 	bl	800c3b8 <USBD_Start>
 800dc24:	1e03      	subs	r3, r0, #0
 800dc26:	d001      	beq.n	800dc2c <MX_USB_Device_Init+0x50>
    Error_Handler();
 800dc28:	f7f5 fd9c 	bl	8003764 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dc2c:	46c0      	nop			@ (mov r8, r8)
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	46c0      	nop			@ (mov r8, r8)
 800dc34:	2000013c 	.word	0x2000013c
 800dc38:	20000780 	.word	0x20000780
 800dc3c:	200000a8 	.word	0x200000a8
 800dc40:	20000128 	.word	0x20000128

0800dc44 <CDC_Receive>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

int8_t CDC_Receive(uint8_t* pbuf, uint32_t *Len){
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
	CDC_Receive_FS(pbuf, Len);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	0011      	movs	r1, r2
 800dc54:	0018      	movs	r0, r3
 800dc56:	f000 f83f 	bl	800dcd8 <CDC_Receive_FS>
	return USBD_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	b002      	add	sp, #8
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc68:	4907      	ldr	r1, [pc, #28]	@ (800dc88 <CDC_Init_FS+0x24>)
 800dc6a:	4b08      	ldr	r3, [pc, #32]	@ (800dc8c <CDC_Init_FS+0x28>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	0018      	movs	r0, r3
 800dc70:	f7fe fa62 	bl	800c138 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc74:	4a06      	ldr	r2, [pc, #24]	@ (800dc90 <CDC_Init_FS+0x2c>)
 800dc76:	4b05      	ldr	r3, [pc, #20]	@ (800dc8c <CDC_Init_FS+0x28>)
 800dc78:	0011      	movs	r1, r2
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f7fe fa7f 	bl	800c17e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc80:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dc82:	0018      	movs	r0, r3
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	2000125c 	.word	0x2000125c
 800dc8c:	20000780 	.word	0x20000780
 800dc90:	20000a5c 	.word	0x20000a5c

0800dc94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6039      	str	r1, [r7, #0]
 800dca8:	0011      	movs	r1, r2
 800dcaa:	1dfb      	adds	r3, r7, #7
 800dcac:	1c02      	adds	r2, r0, #0
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	1d3b      	adds	r3, r7, #4
 800dcb2:	1c0a      	adds	r2, r1, #0
 800dcb4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dcb6:	1dfb      	adds	r3, r7, #7
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	2b23      	cmp	r3, #35	@ 0x23
 800dcbc:	d804      	bhi.n	800dcc8 <CDC_Control_FS+0x28>
 800dcbe:	009a      	lsls	r2, r3, #2
 800dcc0:	4b04      	ldr	r3, [pc, #16]	@ (800dcd4 <CDC_Control_FS+0x34>)
 800dcc2:	18d3      	adds	r3, r2, r3
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dcc8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800dcca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dccc:	0018      	movs	r0, r3
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	08012cf0 	.word	0x08012cf0

0800dcd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	4b06      	ldr	r3, [pc, #24]	@ (800dd00 <CDC_Receive_FS+0x28>)
 800dce6:	0011      	movs	r1, r2
 800dce8:	0018      	movs	r0, r3
 800dcea:	f7fe fa48 	bl	800c17e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcee:	4b04      	ldr	r3, [pc, #16]	@ (800dd00 <CDC_Receive_FS+0x28>)
 800dcf0:	0018      	movs	r0, r3
 800dcf2:	f7fe faaf 	bl	800c254 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dcf6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	b002      	add	sp, #8
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	20000780 	.word	0x20000780

0800dd04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd04:	b5b0      	push	{r4, r5, r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	000a      	movs	r2, r1
 800dd0e:	1cbb      	adds	r3, r7, #2
 800dd10:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800dd12:	230f      	movs	r3, #15
 800dd14:	18fb      	adds	r3, r7, r3
 800dd16:	2200      	movs	r2, #0
 800dd18:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd1a:	4a11      	ldr	r2, [pc, #68]	@ (800dd60 <CDC_Transmit_FS+0x5c>)
 800dd1c:	23af      	movs	r3, #175	@ 0xaf
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	58d3      	ldr	r3, [r2, r3]
 800dd22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	2385      	movs	r3, #133	@ 0x85
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	58d3      	ldr	r3, [r2, r3]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e010      	b.n	800dd56 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd34:	1cbb      	adds	r3, r7, #2
 800dd36:	881a      	ldrh	r2, [r3, #0]
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	4b09      	ldr	r3, [pc, #36]	@ (800dd60 <CDC_Transmit_FS+0x5c>)
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f7fe f9fb 	bl	800c138 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd42:	250f      	movs	r5, #15
 800dd44:	197c      	adds	r4, r7, r5
 800dd46:	4b06      	ldr	r3, [pc, #24]	@ (800dd60 <CDC_Transmit_FS+0x5c>)
 800dd48:	0018      	movs	r0, r3
 800dd4a:	f7fe fa35 	bl	800c1b8 <USBD_CDC_TransmitPacket>
 800dd4e:	0003      	movs	r3, r0
 800dd50:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800dd52:	197b      	adds	r3, r7, r5
 800dd54:	781b      	ldrb	r3, [r3, #0]
}
 800dd56:	0018      	movs	r0, r3
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	b004      	add	sp, #16
 800dd5c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd5e:	46c0      	nop			@ (mov r8, r8)
 800dd60:	20000780 	.word	0x20000780

0800dd64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	1dfb      	adds	r3, r7, #7
 800dd70:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800dd72:	2117      	movs	r1, #23
 800dd74:	187b      	adds	r3, r7, r1
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd7a:	187b      	adds	r3, r7, r1
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	b25b      	sxtb	r3, r3
}
 800dd80:	0018      	movs	r0, r3
 800dd82:	46bd      	mov	sp, r7
 800dd84:	b006      	add	sp, #24
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	0002      	movs	r2, r0
 800dd90:	6039      	str	r1, [r7, #0]
 800dd92:	1dfb      	adds	r3, r7, #7
 800dd94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	2212      	movs	r2, #18
 800dd9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800dd9c:	4b02      	ldr	r3, [pc, #8]	@ (800dda8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800dd9e:	0018      	movs	r0, r3
 800dda0:	46bd      	mov	sp, r7
 800dda2:	b002      	add	sp, #8
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	46c0      	nop			@ (mov r8, r8)
 800dda8:	2000015c 	.word	0x2000015c

0800ddac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	0002      	movs	r2, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	1dfb      	adds	r3, r7, #7
 800ddb8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	2204      	movs	r2, #4
 800ddbe:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddc0:	4b02      	ldr	r3, [pc, #8]	@ (800ddcc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	b002      	add	sp, #8
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	46c0      	nop			@ (mov r8, r8)
 800ddcc:	20000170 	.word	0x20000170

0800ddd0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	0002      	movs	r2, r0
 800ddd8:	6039      	str	r1, [r7, #0]
 800ddda:	1dfb      	adds	r3, r7, #7
 800dddc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ddde:	1dfb      	adds	r3, r7, #7
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4908      	ldr	r1, [pc, #32]	@ (800de0c <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ddea:	4b09      	ldr	r3, [pc, #36]	@ (800de10 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ddec:	0018      	movs	r0, r3
 800ddee:	f7ff fdfa 	bl	800d9e6 <USBD_GetString>
 800ddf2:	e005      	b.n	800de00 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	4905      	ldr	r1, [pc, #20]	@ (800de0c <USBD_CDC_ProductStrDescriptor+0x3c>)
 800ddf8:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <USBD_CDC_ProductStrDescriptor+0x40>)
 800ddfa:	0018      	movs	r0, r3
 800ddfc:	f7ff fdf3 	bl	800d9e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800de02:	0018      	movs	r0, r3
 800de04:	46bd      	mov	sp, r7
 800de06:	b002      	add	sp, #8
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	20001a5c 	.word	0x20001a5c
 800de10:	08012ba8 	.word	0x08012ba8

0800de14 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	0002      	movs	r2, r0
 800de1c:	6039      	str	r1, [r7, #0]
 800de1e:	1dfb      	adds	r3, r7, #7
 800de20:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	4904      	ldr	r1, [pc, #16]	@ (800de38 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800de26:	4b05      	ldr	r3, [pc, #20]	@ (800de3c <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800de28:	0018      	movs	r0, r3
 800de2a:	f7ff fddc 	bl	800d9e6 <USBD_GetString>
  return USBD_StrDesc;
 800de2e:	4b02      	ldr	r3, [pc, #8]	@ (800de38 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800de30:	0018      	movs	r0, r3
 800de32:	46bd      	mov	sp, r7
 800de34:	b002      	add	sp, #8
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20001a5c 	.word	0x20001a5c
 800de3c:	08012bc0 	.word	0x08012bc0

0800de40 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	0002      	movs	r2, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	1dfb      	adds	r3, r7, #7
 800de4c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	221a      	movs	r2, #26
 800de52:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de54:	f000 f84c 	bl	800def0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800de58:	4b02      	ldr	r3, [pc, #8]	@ (800de64 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800de5a:	0018      	movs	r0, r3
 800de5c:	46bd      	mov	sp, r7
 800de5e:	b002      	add	sp, #8
 800de60:	bd80      	pop	{r7, pc}
 800de62:	46c0      	nop			@ (mov r8, r8)
 800de64:	20000174 	.word	0x20000174

0800de68 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	0002      	movs	r2, r0
 800de70:	6039      	str	r1, [r7, #0]
 800de72:	1dfb      	adds	r3, r7, #7
 800de74:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800de76:	1dfb      	adds	r3, r7, #7
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d106      	bne.n	800de8c <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800de7e:	683a      	ldr	r2, [r7, #0]
 800de80:	4908      	ldr	r1, [pc, #32]	@ (800dea4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800de82:	4b09      	ldr	r3, [pc, #36]	@ (800dea8 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800de84:	0018      	movs	r0, r3
 800de86:	f7ff fdae 	bl	800d9e6 <USBD_GetString>
 800de8a:	e005      	b.n	800de98 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	4905      	ldr	r1, [pc, #20]	@ (800dea4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800de90:	4b05      	ldr	r3, [pc, #20]	@ (800dea8 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800de92:	0018      	movs	r0, r3
 800de94:	f7ff fda7 	bl	800d9e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de98:	4b02      	ldr	r3, [pc, #8]	@ (800dea4 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800de9a:	0018      	movs	r0, r3
 800de9c:	46bd      	mov	sp, r7
 800de9e:	b002      	add	sp, #8
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	46c0      	nop			@ (mov r8, r8)
 800dea4:	20001a5c 	.word	0x20001a5c
 800dea8:	08012bd4 	.word	0x08012bd4

0800deac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	0002      	movs	r2, r0
 800deb4:	6039      	str	r1, [r7, #0]
 800deb6:	1dfb      	adds	r3, r7, #7
 800deb8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800deba:	1dfb      	adds	r3, r7, #7
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dec2:	683a      	ldr	r2, [r7, #0]
 800dec4:	4908      	ldr	r1, [pc, #32]	@ (800dee8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800dec6:	4b09      	ldr	r3, [pc, #36]	@ (800deec <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800dec8:	0018      	movs	r0, r3
 800deca:	f7ff fd8c 	bl	800d9e6 <USBD_GetString>
 800dece:	e005      	b.n	800dedc <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	4905      	ldr	r1, [pc, #20]	@ (800dee8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800ded4:	4b05      	ldr	r3, [pc, #20]	@ (800deec <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800ded6:	0018      	movs	r0, r3
 800ded8:	f7ff fd85 	bl	800d9e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dedc:	4b02      	ldr	r3, [pc, #8]	@ (800dee8 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800dede:	0018      	movs	r0, r3
 800dee0:	46bd      	mov	sp, r7
 800dee2:	b002      	add	sp, #8
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	46c0      	nop			@ (mov r8, r8)
 800dee8:	20001a5c 	.word	0x20001a5c
 800deec:	08012be0 	.word	0x08012be0

0800def0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800def6:	4b10      	ldr	r3, [pc, #64]	@ (800df38 <Get_SerialNum+0x48>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800defc:	4b0f      	ldr	r3, [pc, #60]	@ (800df3c <Get_SerialNum+0x4c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df02:	4b0f      	ldr	r3, [pc, #60]	@ (800df40 <Get_SerialNum+0x50>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	18d3      	adds	r3, r2, r3
 800df0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00b      	beq.n	800df2e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df16:	490b      	ldr	r1, [pc, #44]	@ (800df44 <Get_SerialNum+0x54>)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2208      	movs	r2, #8
 800df1c:	0018      	movs	r0, r3
 800df1e:	f000 f815 	bl	800df4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df22:	4909      	ldr	r1, [pc, #36]	@ (800df48 <Get_SerialNum+0x58>)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2204      	movs	r2, #4
 800df28:	0018      	movs	r0, r3
 800df2a:	f000 f80f 	bl	800df4c <IntToUnicode>
  }
}
 800df2e:	46c0      	nop			@ (mov r8, r8)
 800df30:	46bd      	mov	sp, r7
 800df32:	b004      	add	sp, #16
 800df34:	bd80      	pop	{r7, pc}
 800df36:	46c0      	nop			@ (mov r8, r8)
 800df38:	1fff7590 	.word	0x1fff7590
 800df3c:	1fff7594 	.word	0x1fff7594
 800df40:	1fff7598 	.word	0x1fff7598
 800df44:	20000176 	.word	0x20000176
 800df48:	20000186 	.word	0x20000186

0800df4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	1dfb      	adds	r3, r7, #7
 800df58:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800df5a:	2117      	movs	r1, #23
 800df5c:	187b      	adds	r3, r7, r1
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800df62:	187b      	adds	r3, r7, r1
 800df64:	2200      	movs	r2, #0
 800df66:	701a      	strb	r2, [r3, #0]
 800df68:	e02f      	b.n	800dfca <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	0f1b      	lsrs	r3, r3, #28
 800df6e:	2b09      	cmp	r3, #9
 800df70:	d80d      	bhi.n	800df8e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	0f1b      	lsrs	r3, r3, #28
 800df76:	b2da      	uxtb	r2, r3
 800df78:	2317      	movs	r3, #23
 800df7a:	18fb      	adds	r3, r7, r3
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	0019      	movs	r1, r3
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	185b      	adds	r3, r3, r1
 800df86:	3230      	adds	r2, #48	@ 0x30
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	701a      	strb	r2, [r3, #0]
 800df8c:	e00c      	b.n	800dfa8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	0f1b      	lsrs	r3, r3, #28
 800df92:	b2da      	uxtb	r2, r3
 800df94:	2317      	movs	r3, #23
 800df96:	18fb      	adds	r3, r7, r3
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	0019      	movs	r1, r3
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	185b      	adds	r3, r3, r1
 800dfa2:	3237      	adds	r2, #55	@ 0x37
 800dfa4:	b2d2      	uxtb	r2, r2
 800dfa6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	011b      	lsls	r3, r3, #4
 800dfac:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfae:	2117      	movs	r1, #23
 800dfb0:	187b      	adds	r3, r7, r1
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	18d3      	adds	r3, r2, r3
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	781a      	ldrb	r2, [r3, #0]
 800dfc4:	187b      	adds	r3, r7, r1
 800dfc6:	3201      	adds	r2, #1
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	2317      	movs	r3, #23
 800dfcc:	18fa      	adds	r2, r7, r3
 800dfce:	1dfb      	adds	r3, r7, #7
 800dfd0:	7812      	ldrb	r2, [r2, #0]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d3c8      	bcc.n	800df6a <IntToUnicode+0x1e>
  }
}
 800dfd8:	46c0      	nop			@ (mov r8, r8)
 800dfda:	46c0      	nop			@ (mov r8, r8)
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	b006      	add	sp, #24
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfe4:	b590      	push	{r4, r7, lr}
 800dfe6:	b091      	sub	sp, #68	@ 0x44
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dfec:	2414      	movs	r4, #20
 800dfee:	193b      	adds	r3, r7, r4
 800dff0:	0018      	movs	r0, r3
 800dff2:	232c      	movs	r3, #44	@ 0x2c
 800dff4:	001a      	movs	r2, r3
 800dff6:	2100      	movs	r1, #0
 800dff8:	f001 ff8c 	bl	800ff14 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a25      	ldr	r2, [pc, #148]	@ (800e098 <HAL_PCD_MspInit+0xb4>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d144      	bne.n	800e090 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e006:	193b      	adds	r3, r7, r4
 800e008:	2280      	movs	r2, #128	@ 0x80
 800e00a:	0452      	lsls	r2, r2, #17
 800e00c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e00e:	193b      	adds	r3, r7, r4
 800e010:	2280      	movs	r2, #128	@ 0x80
 800e012:	0192      	lsls	r2, r2, #6
 800e014:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e016:	193b      	adds	r3, r7, r4
 800e018:	0018      	movs	r0, r3
 800e01a:	f7fa fbf5 	bl	8008808 <HAL_RCCEx_PeriphCLKConfig>
 800e01e:	1e03      	subs	r3, r0, #0
 800e020:	d001      	beq.n	800e026 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800e022:	f7f5 fb9f 	bl	8003764 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e026:	4b1d      	ldr	r3, [pc, #116]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e02a:	4b1c      	ldr	r3, [pc, #112]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e02c:	2180      	movs	r1, #128	@ 0x80
 800e02e:	0189      	lsls	r1, r1, #6
 800e030:	430a      	orrs	r2, r1
 800e032:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e034:	4b19      	ldr	r3, [pc, #100]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e038:	2380      	movs	r3, #128	@ 0x80
 800e03a:	019b      	lsls	r3, r3, #6
 800e03c:	4013      	ands	r3, r2
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e042:	4b16      	ldr	r3, [pc, #88]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e046:	2380      	movs	r3, #128	@ 0x80
 800e048:	055b      	lsls	r3, r3, #21
 800e04a:	4013      	ands	r3, r2
 800e04c:	d116      	bne.n	800e07c <HAL_PCD_MspInit+0x98>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e04e:	4b13      	ldr	r3, [pc, #76]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e054:	2180      	movs	r1, #128	@ 0x80
 800e056:	0549      	lsls	r1, r1, #21
 800e058:	430a      	orrs	r2, r1
 800e05a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e05c:	4b0f      	ldr	r3, [pc, #60]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e05e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e060:	2380      	movs	r3, #128	@ 0x80
 800e062:	055b      	lsls	r3, r3, #21
 800e064:	4013      	ands	r3, r2
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800e06a:	f7f9 fedb 	bl	8007e24 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e06e:	4b0b      	ldr	r3, [pc, #44]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e072:	4b0a      	ldr	r3, [pc, #40]	@ (800e09c <HAL_PCD_MspInit+0xb8>)
 800e074:	490a      	ldr	r1, [pc, #40]	@ (800e0a0 <HAL_PCD_MspInit+0xbc>)
 800e076:	400a      	ands	r2, r1
 800e078:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e07a:	e001      	b.n	800e080 <HAL_PCD_MspInit+0x9c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e07c:	f7f9 fed2 	bl	8007e24 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e080:	2200      	movs	r2, #0
 800e082:	2100      	movs	r1, #0
 800e084:	2008      	movs	r0, #8
 800e086:	f7f7 f8f5 	bl	8005274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e08a:	2008      	movs	r0, #8
 800e08c:	f7f7 f907 	bl	800529e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800e090:	46c0      	nop			@ (mov r8, r8)
 800e092:	46bd      	mov	sp, r7
 800e094:	b011      	add	sp, #68	@ 0x44
 800e096:	bd90      	pop	{r4, r7, pc}
 800e098:	40005c00 	.word	0x40005c00
 800e09c:	40021000 	.word	0x40021000
 800e0a0:	efffffff 	.word	0xefffffff

0800e0a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	23b7      	movs	r3, #183	@ 0xb7
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	58d2      	ldr	r2, [r2, r3]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	21a7      	movs	r1, #167	@ 0xa7
 800e0b8:	0089      	lsls	r1, r1, #2
 800e0ba:	468c      	mov	ip, r1
 800e0bc:	4463      	add	r3, ip
 800e0be:	0019      	movs	r1, r3
 800e0c0:	0010      	movs	r0, r2
 800e0c2:	f7fe f9d5 	bl	800c470 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e0c6:	46c0      	nop			@ (mov r8, r8)
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	b002      	add	sp, #8
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ce:	b590      	push	{r4, r7, lr}
 800e0d0:	b083      	sub	sp, #12
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	000a      	movs	r2, r1
 800e0d8:	1cfb      	adds	r3, r7, #3
 800e0da:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	23b7      	movs	r3, #183	@ 0xb7
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	58d4      	ldr	r4, [r2, r3]
 800e0e4:	1cfb      	adds	r3, r7, #3
 800e0e6:	781a      	ldrb	r2, [r3, #0]
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	23b4      	movs	r3, #180	@ 0xb4
 800e0ec:	0059      	lsls	r1, r3, #1
 800e0ee:	0013      	movs	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	189b      	adds	r3, r3, r2
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	18c3      	adds	r3, r0, r3
 800e0f8:	185b      	adds	r3, r3, r1
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	1cfb      	adds	r3, r7, #3
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	0019      	movs	r1, r3
 800e102:	0020      	movs	r0, r4
 800e104:	f7fe fa1e 	bl	800c544 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e108:	46c0      	nop			@ (mov r8, r8)
 800e10a:	46bd      	mov	sp, r7
 800e10c:	b003      	add	sp, #12
 800e10e:	bd90      	pop	{r4, r7, pc}

0800e110 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	000a      	movs	r2, r1
 800e11a:	1cfb      	adds	r3, r7, #3
 800e11c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	23b7      	movs	r3, #183	@ 0xb7
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	58d0      	ldr	r0, [r2, r3]
 800e126:	1cfb      	adds	r3, r7, #3
 800e128:	781a      	ldrb	r2, [r3, #0]
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	0013      	movs	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	189b      	adds	r3, r3, r2
 800e132:	00db      	lsls	r3, r3, #3
 800e134:	18cb      	adds	r3, r1, r3
 800e136:	3328      	adds	r3, #40	@ 0x28
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	1cfb      	adds	r3, r7, #3
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	0019      	movs	r1, r3
 800e140:	f7fe fae8 	bl	800c714 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e144:	46c0      	nop			@ (mov r8, r8)
 800e146:	46bd      	mov	sp, r7
 800e148:	b002      	add	sp, #8
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	23b7      	movs	r3, #183	@ 0xb7
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	58d3      	ldr	r3, [r2, r3]
 800e15c:	0018      	movs	r0, r3
 800e15e:	f7fe fc53 	bl	800ca08 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e162:	46c0      	nop			@ (mov r8, r8)
 800e164:	46bd      	mov	sp, r7
 800e166:	b002      	add	sp, #8
 800e168:	bd80      	pop	{r7, pc}

0800e16a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e172:	230f      	movs	r3, #15
 800e174:	18fb      	adds	r3, r7, r3
 800e176:	2201      	movs	r2, #1
 800e178:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	79db      	ldrb	r3, [r3, #7]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d001      	beq.n	800e186 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800e182:	f7f5 faef 	bl	8003764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	23b7      	movs	r3, #183	@ 0xb7
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	58d2      	ldr	r2, [r2, r3]
 800e18e:	230f      	movs	r3, #15
 800e190:	18fb      	adds	r3, r7, r3
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	0019      	movs	r1, r3
 800e196:	0010      	movs	r0, r2
 800e198:	f7fe fbf3 	bl	800c982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	23b7      	movs	r3, #183	@ 0xb7
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	58d3      	ldr	r3, [r2, r3]
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	f7fe fb8d 	bl	800c8c4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e1aa:	46c0      	nop			@ (mov r8, r8)
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	b004      	add	sp, #16
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	23b7      	movs	r3, #183	@ 0xb7
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	58d3      	ldr	r3, [r2, r3]
 800e1c4:	0018      	movs	r0, r3
 800e1c6:	f7fe fbed 	bl	800c9a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	7adb      	ldrb	r3, [r3, #11]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d005      	beq.n	800e1de <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1d2:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <HAL_PCD_SuspendCallback+0x34>)
 800e1d4:	691a      	ldr	r2, [r3, #16]
 800e1d6:	4b04      	ldr	r3, [pc, #16]	@ (800e1e8 <HAL_PCD_SuspendCallback+0x34>)
 800e1d8:	2106      	movs	r1, #6
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e1de:	46c0      	nop			@ (mov r8, r8)
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	b002      	add	sp, #8
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	46c0      	nop			@ (mov r8, r8)
 800e1e8:	e000ed00 	.word	0xe000ed00

0800e1ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7adb      	ldrb	r3, [r3, #11]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d007      	beq.n	800e20c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <HAL_PCD_ResumeCallback+0x38>)
 800e1fe:	691a      	ldr	r2, [r3, #16]
 800e200:	4b08      	ldr	r3, [pc, #32]	@ (800e224 <HAL_PCD_ResumeCallback+0x38>)
 800e202:	2106      	movs	r1, #6
 800e204:	438a      	bics	r2, r1
 800e206:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800e208:	f000 fa7c 	bl	800e704 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	23b7      	movs	r3, #183	@ 0xb7
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	58d3      	ldr	r3, [r2, r3]
 800e214:	0018      	movs	r0, r3
 800e216:	f7fe fbdd 	bl	800c9d4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e21a:	46c0      	nop			@ (mov r8, r8)
 800e21c:	46bd      	mov	sp, r7
 800e21e:	b002      	add	sp, #8
 800e220:	bd80      	pop	{r7, pc}
 800e222:	46c0      	nop			@ (mov r8, r8)
 800e224:	e000ed00 	.word	0xe000ed00

0800e228 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800e230:	4a34      	ldr	r2, [pc, #208]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e232:	23b7      	movs	r3, #183	@ 0xb7
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	23b2      	movs	r3, #178	@ 0xb2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4930      	ldr	r1, [pc, #192]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e242:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800e244:	4b2f      	ldr	r3, [pc, #188]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e246:	4a30      	ldr	r2, [pc, #192]	@ (800e308 <USBD_LL_Init+0xe0>)
 800e248:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800e24a:	4b2e      	ldr	r3, [pc, #184]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e24c:	2208      	movs	r2, #8
 800e24e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800e250:	4b2c      	ldr	r3, [pc, #176]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e252:	2208      	movs	r2, #8
 800e254:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800e256:	4b2b      	ldr	r3, [pc, #172]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e258:	2202      	movs	r2, #2
 800e25a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e25c:	4b29      	ldr	r3, [pc, #164]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e25e:	2202      	movs	r2, #2
 800e260:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800e262:	4b28      	ldr	r3, [pc, #160]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e264:	2200      	movs	r2, #0
 800e266:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800e268:	4b26      	ldr	r3, [pc, #152]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800e26e:	4b25      	ldr	r3, [pc, #148]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e270:	2200      	movs	r2, #0
 800e272:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800e274:	4b23      	ldr	r3, [pc, #140]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e276:	2200      	movs	r2, #0
 800e278:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800e27a:	4b22      	ldr	r3, [pc, #136]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800e280:	4b20      	ldr	r3, [pc, #128]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e282:	2200      	movs	r2, #0
 800e284:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800e286:	4b1f      	ldr	r3, [pc, #124]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e288:	2200      	movs	r2, #0
 800e28a:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800e28c:	4b1d      	ldr	r3, [pc, #116]	@ (800e304 <USBD_LL_Init+0xdc>)
 800e28e:	0018      	movs	r0, r3
 800e290:	f7f8 f8c2 	bl	8006418 <HAL_PCD_Init>
 800e294:	1e03      	subs	r3, r0, #0
 800e296:	d001      	beq.n	800e29c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800e298:	f7f5 fa64 	bl	8003764 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	23b2      	movs	r3, #178	@ 0xb2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	58d0      	ldr	r0, [r2, r3]
 800e2a4:	2318      	movs	r3, #24
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	f7f9 fd49 	bl	8007d40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	23b2      	movs	r3, #178	@ 0xb2
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	58d0      	ldr	r0, [r2, r3]
 800e2b6:	2358      	movs	r3, #88	@ 0x58
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	2180      	movs	r1, #128	@ 0x80
 800e2bc:	f7f9 fd40 	bl	8007d40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	23b2      	movs	r3, #178	@ 0xb2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	58d0      	ldr	r0, [r2, r3]
 800e2c8:	23c0      	movs	r3, #192	@ 0xc0
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	2181      	movs	r1, #129	@ 0x81
 800e2ce:	f7f9 fd37 	bl	8007d40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	23b2      	movs	r3, #178	@ 0xb2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	58d0      	ldr	r0, [r2, r3]
 800e2da:	2388      	movs	r3, #136	@ 0x88
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2101      	movs	r1, #1
 800e2e2:	f7f9 fd2d 	bl	8007d40 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	23b2      	movs	r3, #178	@ 0xb2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	58d0      	ldr	r0, [r2, r3]
 800e2ee:	2380      	movs	r3, #128	@ 0x80
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	2182      	movs	r1, #130	@ 0x82
 800e2f6:	f7f9 fd23 	bl	8007d40 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	46bd      	mov	sp, r7
 800e300:	b002      	add	sp, #8
 800e302:	bd80      	pop	{r7, pc}
 800e304:	20001c5c 	.word	0x20001c5c
 800e308:	40005c00 	.word	0x40005c00

0800e30c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e314:	210f      	movs	r1, #15
 800e316:	187b      	adds	r3, r7, r1
 800e318:	2200      	movs	r2, #0
 800e31a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e31c:	260e      	movs	r6, #14
 800e31e:	19bb      	adds	r3, r7, r6
 800e320:	2200      	movs	r2, #0
 800e322:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	23b2      	movs	r3, #178	@ 0xb2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	58d3      	ldr	r3, [r2, r3]
 800e32c:	000d      	movs	r5, r1
 800e32e:	187c      	adds	r4, r7, r1
 800e330:	0018      	movs	r0, r3
 800e332:	f7f8 f96b 	bl	800660c <HAL_PCD_Start>
 800e336:	0003      	movs	r3, r0
 800e338:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e33a:	19bc      	adds	r4, r7, r6
 800e33c:	197b      	adds	r3, r7, r5
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	0018      	movs	r0, r3
 800e342:	f000 f9e6 	bl	800e712 <USBD_Get_USB_Status>
 800e346:	0003      	movs	r3, r0
 800e348:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e34a:	19bb      	adds	r3, r7, r6
 800e34c:	781b      	ldrb	r3, [r3, #0]
}
 800e34e:	0018      	movs	r0, r3
 800e350:	46bd      	mov	sp, r7
 800e352:	b005      	add	sp, #20
 800e354:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e356 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e356:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e358:	b085      	sub	sp, #20
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
 800e35e:	000c      	movs	r4, r1
 800e360:	0010      	movs	r0, r2
 800e362:	0019      	movs	r1, r3
 800e364:	1cfb      	adds	r3, r7, #3
 800e366:	1c22      	adds	r2, r4, #0
 800e368:	701a      	strb	r2, [r3, #0]
 800e36a:	1cbb      	adds	r3, r7, #2
 800e36c:	1c02      	adds	r2, r0, #0
 800e36e:	701a      	strb	r2, [r3, #0]
 800e370:	003b      	movs	r3, r7
 800e372:	1c0a      	adds	r2, r1, #0
 800e374:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e376:	260f      	movs	r6, #15
 800e378:	19bb      	adds	r3, r7, r6
 800e37a:	2200      	movs	r2, #0
 800e37c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37e:	250e      	movs	r5, #14
 800e380:	197b      	adds	r3, r7, r5
 800e382:	2200      	movs	r2, #0
 800e384:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	23b2      	movs	r3, #178	@ 0xb2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	58d0      	ldr	r0, [r2, r3]
 800e38e:	19bc      	adds	r4, r7, r6
 800e390:	1cbb      	adds	r3, r7, #2
 800e392:	781d      	ldrb	r5, [r3, #0]
 800e394:	003b      	movs	r3, r7
 800e396:	881a      	ldrh	r2, [r3, #0]
 800e398:	1cfb      	adds	r3, r7, #3
 800e39a:	7819      	ldrb	r1, [r3, #0]
 800e39c:	002b      	movs	r3, r5
 800e39e:	f7f8 fa9b 	bl	80068d8 <HAL_PCD_EP_Open>
 800e3a2:	0003      	movs	r3, r0
 800e3a4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a6:	250e      	movs	r5, #14
 800e3a8:	197c      	adds	r4, r7, r5
 800e3aa:	19bb      	adds	r3, r7, r6
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	0018      	movs	r0, r3
 800e3b0:	f000 f9af 	bl	800e712 <USBD_Get_USB_Status>
 800e3b4:	0003      	movs	r3, r0
 800e3b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e3b8:	197b      	adds	r3, r7, r5
 800e3ba:	781b      	ldrb	r3, [r3, #0]
}
 800e3bc:	0018      	movs	r0, r3
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	b005      	add	sp, #20
 800e3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	000a      	movs	r2, r1
 800e3ce:	1cfb      	adds	r3, r7, #3
 800e3d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3d2:	210f      	movs	r1, #15
 800e3d4:	187b      	adds	r3, r7, r1
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3da:	260e      	movs	r6, #14
 800e3dc:	19bb      	adds	r3, r7, r6
 800e3de:	2200      	movs	r2, #0
 800e3e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	23b2      	movs	r3, #178	@ 0xb2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	58d2      	ldr	r2, [r2, r3]
 800e3ea:	000d      	movs	r5, r1
 800e3ec:	187c      	adds	r4, r7, r1
 800e3ee:	1cfb      	adds	r3, r7, #3
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	0019      	movs	r1, r3
 800e3f4:	0010      	movs	r0, r2
 800e3f6:	f7f8 fae0 	bl	80069ba <HAL_PCD_EP_Close>
 800e3fa:	0003      	movs	r3, r0
 800e3fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fe:	19bc      	adds	r4, r7, r6
 800e400:	197b      	adds	r3, r7, r5
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	0018      	movs	r0, r3
 800e406:	f000 f984 	bl	800e712 <USBD_Get_USB_Status>
 800e40a:	0003      	movs	r3, r0
 800e40c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e40e:	19bb      	adds	r3, r7, r6
 800e410:	781b      	ldrb	r3, [r3, #0]
}
 800e412:	0018      	movs	r0, r3
 800e414:	46bd      	mov	sp, r7
 800e416:	b005      	add	sp, #20
 800e418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e41a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e41a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e41c:	b085      	sub	sp, #20
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	000a      	movs	r2, r1
 800e424:	1cfb      	adds	r3, r7, #3
 800e426:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e428:	210f      	movs	r1, #15
 800e42a:	187b      	adds	r3, r7, r1
 800e42c:	2200      	movs	r2, #0
 800e42e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e430:	260e      	movs	r6, #14
 800e432:	19bb      	adds	r3, r7, r6
 800e434:	2200      	movs	r2, #0
 800e436:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	23b2      	movs	r3, #178	@ 0xb2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	58d2      	ldr	r2, [r2, r3]
 800e440:	000d      	movs	r5, r1
 800e442:	187c      	adds	r4, r7, r1
 800e444:	1cfb      	adds	r3, r7, #3
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	0019      	movs	r1, r3
 800e44a:	0010      	movs	r0, r2
 800e44c:	f7f8 fb96 	bl	8006b7c <HAL_PCD_EP_SetStall>
 800e450:	0003      	movs	r3, r0
 800e452:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e454:	19bc      	adds	r4, r7, r6
 800e456:	197b      	adds	r3, r7, r5
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	0018      	movs	r0, r3
 800e45c:	f000 f959 	bl	800e712 <USBD_Get_USB_Status>
 800e460:	0003      	movs	r3, r0
 800e462:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e464:	19bb      	adds	r3, r7, r6
 800e466:	781b      	ldrb	r3, [r3, #0]
}
 800e468:	0018      	movs	r0, r3
 800e46a:	46bd      	mov	sp, r7
 800e46c:	b005      	add	sp, #20
 800e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e470 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	000a      	movs	r2, r1
 800e47a:	1cfb      	adds	r3, r7, #3
 800e47c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e47e:	210f      	movs	r1, #15
 800e480:	187b      	adds	r3, r7, r1
 800e482:	2200      	movs	r2, #0
 800e484:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e486:	260e      	movs	r6, #14
 800e488:	19bb      	adds	r3, r7, r6
 800e48a:	2200      	movs	r2, #0
 800e48c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	23b2      	movs	r3, #178	@ 0xb2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	58d2      	ldr	r2, [r2, r3]
 800e496:	000d      	movs	r5, r1
 800e498:	187c      	adds	r4, r7, r1
 800e49a:	1cfb      	adds	r3, r7, #3
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	0019      	movs	r1, r3
 800e4a0:	0010      	movs	r0, r2
 800e4a2:	f7f8 fbc9 	bl	8006c38 <HAL_PCD_EP_ClrStall>
 800e4a6:	0003      	movs	r3, r0
 800e4a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4aa:	19bc      	adds	r4, r7, r6
 800e4ac:	197b      	adds	r3, r7, r5
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	0018      	movs	r0, r3
 800e4b2:	f000 f92e 	bl	800e712 <USBD_Get_USB_Status>
 800e4b6:	0003      	movs	r3, r0
 800e4b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e4ba:	19bb      	adds	r3, r7, r6
 800e4bc:	781b      	ldrb	r3, [r3, #0]
}
 800e4be:	0018      	movs	r0, r3
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	b005      	add	sp, #20
 800e4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e4c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b084      	sub	sp, #16
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	000a      	movs	r2, r1
 800e4d0:	1cfb      	adds	r3, r7, #3
 800e4d2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	23b2      	movs	r3, #178	@ 0xb2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	58d3      	ldr	r3, [r2, r3]
 800e4dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4de:	1cfb      	adds	r3, r7, #3
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	b25b      	sxtb	r3, r3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	da0c      	bge.n	800e502 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4e8:	1cfb      	adds	r3, r7, #3
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	227f      	movs	r2, #127	@ 0x7f
 800e4ee:	401a      	ands	r2, r3
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	0013      	movs	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	189b      	adds	r3, r3, r2
 800e4f8:	00db      	lsls	r3, r3, #3
 800e4fa:	18cb      	adds	r3, r1, r3
 800e4fc:	3316      	adds	r3, #22
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	e00d      	b.n	800e51e <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e502:	1cfb      	adds	r3, r7, #3
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	227f      	movs	r2, #127	@ 0x7f
 800e508:	401a      	ands	r2, r3
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	23ab      	movs	r3, #171	@ 0xab
 800e50e:	0059      	lsls	r1, r3, #1
 800e510:	0013      	movs	r3, r2
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	189b      	adds	r3, r3, r2
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	18c3      	adds	r3, r0, r3
 800e51a:	185b      	adds	r3, r3, r1
 800e51c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e51e:	0018      	movs	r0, r3
 800e520:	46bd      	mov	sp, r7
 800e522:	b004      	add	sp, #16
 800e524:	bd80      	pop	{r7, pc}

0800e526 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e526:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e528:	b085      	sub	sp, #20
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	000a      	movs	r2, r1
 800e530:	1cfb      	adds	r3, r7, #3
 800e532:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e534:	210f      	movs	r1, #15
 800e536:	187b      	adds	r3, r7, r1
 800e538:	2200      	movs	r2, #0
 800e53a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e53c:	260e      	movs	r6, #14
 800e53e:	19bb      	adds	r3, r7, r6
 800e540:	2200      	movs	r2, #0
 800e542:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e544:	687a      	ldr	r2, [r7, #4]
 800e546:	23b2      	movs	r3, #178	@ 0xb2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	58d2      	ldr	r2, [r2, r3]
 800e54c:	000d      	movs	r5, r1
 800e54e:	187c      	adds	r4, r7, r1
 800e550:	1cfb      	adds	r3, r7, #3
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	0019      	movs	r1, r3
 800e556:	0010      	movs	r0, r2
 800e558:	f7f8 f994 	bl	8006884 <HAL_PCD_SetAddress>
 800e55c:	0003      	movs	r3, r0
 800e55e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e560:	19bc      	adds	r4, r7, r6
 800e562:	197b      	adds	r3, r7, r5
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	0018      	movs	r0, r3
 800e568:	f000 f8d3 	bl	800e712 <USBD_Get_USB_Status>
 800e56c:	0003      	movs	r3, r0
 800e56e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e570:	19bb      	adds	r3, r7, r6
 800e572:	781b      	ldrb	r3, [r3, #0]
}
 800e574:	0018      	movs	r0, r3
 800e576:	46bd      	mov	sp, r7
 800e578:	b005      	add	sp, #20
 800e57a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e57c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e57e:	b087      	sub	sp, #28
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	603b      	str	r3, [r7, #0]
 800e588:	230b      	movs	r3, #11
 800e58a:	18fb      	adds	r3, r7, r3
 800e58c:	1c0a      	adds	r2, r1, #0
 800e58e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e590:	2617      	movs	r6, #23
 800e592:	19bb      	adds	r3, r7, r6
 800e594:	2200      	movs	r2, #0
 800e596:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e598:	2516      	movs	r5, #22
 800e59a:	197b      	adds	r3, r7, r5
 800e59c:	2200      	movs	r2, #0
 800e59e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	23b2      	movs	r3, #178	@ 0xb2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	58d0      	ldr	r0, [r2, r3]
 800e5a8:	19bc      	adds	r4, r7, r6
 800e5aa:	683d      	ldr	r5, [r7, #0]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	230b      	movs	r3, #11
 800e5b0:	18fb      	adds	r3, r7, r3
 800e5b2:	7819      	ldrb	r1, [r3, #0]
 800e5b4:	002b      	movs	r3, r5
 800e5b6:	f7f8 faa4 	bl	8006b02 <HAL_PCD_EP_Transmit>
 800e5ba:	0003      	movs	r3, r0
 800e5bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5be:	2516      	movs	r5, #22
 800e5c0:	197c      	adds	r4, r7, r5
 800e5c2:	19bb      	adds	r3, r7, r6
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	0018      	movs	r0, r3
 800e5c8:	f000 f8a3 	bl	800e712 <USBD_Get_USB_Status>
 800e5cc:	0003      	movs	r3, r0
 800e5ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e5d0:	197b      	adds	r3, r7, r5
 800e5d2:	781b      	ldrb	r3, [r3, #0]
}
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	b007      	add	sp, #28
 800e5da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5de:	b087      	sub	sp, #28
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	607a      	str	r2, [r7, #4]
 800e5e6:	603b      	str	r3, [r7, #0]
 800e5e8:	230b      	movs	r3, #11
 800e5ea:	18fb      	adds	r3, r7, r3
 800e5ec:	1c0a      	adds	r2, r1, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f0:	2617      	movs	r6, #23
 800e5f2:	19bb      	adds	r3, r7, r6
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5f8:	2516      	movs	r5, #22
 800e5fa:	197b      	adds	r3, r7, r5
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	23b2      	movs	r3, #178	@ 0xb2
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	58d0      	ldr	r0, [r2, r3]
 800e608:	19bc      	adds	r4, r7, r6
 800e60a:	683d      	ldr	r5, [r7, #0]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	230b      	movs	r3, #11
 800e610:	18fb      	adds	r3, r7, r3
 800e612:	7819      	ldrb	r1, [r3, #0]
 800e614:	002b      	movs	r3, r5
 800e616:	f7f8 fa23 	bl	8006a60 <HAL_PCD_EP_Receive>
 800e61a:	0003      	movs	r3, r0
 800e61c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e61e:	2516      	movs	r5, #22
 800e620:	197c      	adds	r4, r7, r5
 800e622:	19bb      	adds	r3, r7, r6
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	0018      	movs	r0, r3
 800e628:	f000 f873 	bl	800e712 <USBD_Get_USB_Status>
 800e62c:	0003      	movs	r3, r0
 800e62e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e630:	197b      	adds	r3, r7, r5
 800e632:	781b      	ldrb	r3, [r3, #0]
}
 800e634:	0018      	movs	r0, r3
 800e636:	46bd      	mov	sp, r7
 800e638:	b007      	add	sp, #28
 800e63a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e63c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	000a      	movs	r2, r1
 800e646:	1cfb      	adds	r3, r7, #3
 800e648:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	23b2      	movs	r3, #178	@ 0xb2
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	58d2      	ldr	r2, [r2, r3]
 800e652:	1cfb      	adds	r3, r7, #3
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	0019      	movs	r1, r3
 800e658:	0010      	movs	r0, r2
 800e65a:	f7f8 fa39 	bl	8006ad0 <HAL_PCD_EP_GetRxCount>
 800e65e:	0003      	movs	r3, r0
}
 800e660:	0018      	movs	r0, r3
 800e662:	46bd      	mov	sp, r7
 800e664:	b002      	add	sp, #8
 800e666:	bd80      	pop	{r7, pc}

0800e668 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	000a      	movs	r2, r1
 800e672:	1cfb      	adds	r3, r7, #3
 800e674:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e676:	1cfb      	adds	r3, r7, #3
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <HAL_PCDEx_LPM_Callback+0x1c>
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d014      	beq.n	800e6ac <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e682:	e025      	b.n	800e6d0 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	7adb      	ldrb	r3, [r3, #11]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d007      	beq.n	800e69c <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800e68c:	f000 f83a 	bl	800e704 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e690:	4b11      	ldr	r3, [pc, #68]	@ (800e6d8 <HAL_PCDEx_LPM_Callback+0x70>)
 800e692:	691a      	ldr	r2, [r3, #16]
 800e694:	4b10      	ldr	r3, [pc, #64]	@ (800e6d8 <HAL_PCDEx_LPM_Callback+0x70>)
 800e696:	2106      	movs	r1, #6
 800e698:	438a      	bics	r2, r1
 800e69a:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	23b7      	movs	r3, #183	@ 0xb7
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	58d3      	ldr	r3, [r2, r3]
 800e6a4:	0018      	movs	r0, r3
 800e6a6:	f7fe f995 	bl	800c9d4 <USBD_LL_Resume>
    break;
 800e6aa:	e011      	b.n	800e6d0 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	23b7      	movs	r3, #183	@ 0xb7
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	58d3      	ldr	r3, [r2, r3]
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f7fe f975 	bl	800c9a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	7adb      	ldrb	r3, [r3, #11]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d005      	beq.n	800e6ce <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6c2:	4b05      	ldr	r3, [pc, #20]	@ (800e6d8 <HAL_PCDEx_LPM_Callback+0x70>)
 800e6c4:	691a      	ldr	r2, [r3, #16]
 800e6c6:	4b04      	ldr	r3, [pc, #16]	@ (800e6d8 <HAL_PCDEx_LPM_Callback+0x70>)
 800e6c8:	2106      	movs	r1, #6
 800e6ca:	430a      	orrs	r2, r1
 800e6cc:	611a      	str	r2, [r3, #16]
    break;
 800e6ce:	46c0      	nop			@ (mov r8, r8)
}
 800e6d0:	46c0      	nop			@ (mov r8, r8)
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	b002      	add	sp, #8
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	e000ed00 	.word	0xe000ed00

0800e6dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6e4:	4b02      	ldr	r3, [pc, #8]	@ (800e6f0 <USBD_static_malloc+0x14>)
}
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	b002      	add	sp, #8
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	46c0      	nop			@ (mov r8, r8)
 800e6f0:	20001f3c 	.word	0x20001f3c

0800e6f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]

}
 800e6fc:	46c0      	nop			@ (mov r8, r8)
 800e6fe:	46bd      	mov	sp, r7
 800e700:	b002      	add	sp, #8
 800e702:	bd80      	pop	{r7, pc}

0800e704 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e708:	f7f4 fc5a 	bl	8002fc0 <SystemClock_Config>
}
 800e70c:	46c0      	nop			@ (mov r8, r8)
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b084      	sub	sp, #16
 800e716:	af00      	add	r7, sp, #0
 800e718:	0002      	movs	r2, r0
 800e71a:	1dfb      	adds	r3, r7, #7
 800e71c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e71e:	230f      	movs	r3, #15
 800e720:	18fb      	adds	r3, r7, r3
 800e722:	2200      	movs	r2, #0
 800e724:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800e726:	1dfb      	adds	r3, r7, #7
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	d017      	beq.n	800e75e <USBD_Get_USB_Status+0x4c>
 800e72e:	dc1b      	bgt.n	800e768 <USBD_Get_USB_Status+0x56>
 800e730:	2b02      	cmp	r3, #2
 800e732:	d00f      	beq.n	800e754 <USBD_Get_USB_Status+0x42>
 800e734:	dc18      	bgt.n	800e768 <USBD_Get_USB_Status+0x56>
 800e736:	2b00      	cmp	r3, #0
 800e738:	d002      	beq.n	800e740 <USBD_Get_USB_Status+0x2e>
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d005      	beq.n	800e74a <USBD_Get_USB_Status+0x38>
 800e73e:	e013      	b.n	800e768 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e740:	230f      	movs	r3, #15
 800e742:	18fb      	adds	r3, r7, r3
 800e744:	2200      	movs	r2, #0
 800e746:	701a      	strb	r2, [r3, #0]
    break;
 800e748:	e013      	b.n	800e772 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e74a:	230f      	movs	r3, #15
 800e74c:	18fb      	adds	r3, r7, r3
 800e74e:	2203      	movs	r2, #3
 800e750:	701a      	strb	r2, [r3, #0]
    break;
 800e752:	e00e      	b.n	800e772 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e754:	230f      	movs	r3, #15
 800e756:	18fb      	adds	r3, r7, r3
 800e758:	2201      	movs	r2, #1
 800e75a:	701a      	strb	r2, [r3, #0]
    break;
 800e75c:	e009      	b.n	800e772 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e75e:	230f      	movs	r3, #15
 800e760:	18fb      	adds	r3, r7, r3
 800e762:	2203      	movs	r2, #3
 800e764:	701a      	strb	r2, [r3, #0]
    break;
 800e766:	e004      	b.n	800e772 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800e768:	230f      	movs	r3, #15
 800e76a:	18fb      	adds	r3, r7, r3
 800e76c:	2203      	movs	r2, #3
 800e76e:	701a      	strb	r2, [r3, #0]
    break;
 800e770:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800e772:	230f      	movs	r3, #15
 800e774:	18fb      	adds	r3, r7, r3
 800e776:	781b      	ldrb	r3, [r3, #0]
}
 800e778:	0018      	movs	r0, r3
 800e77a:	46bd      	mov	sp, r7
 800e77c:	b004      	add	sp, #16
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <sulp>:
 800e780:	b570      	push	{r4, r5, r6, lr}
 800e782:	0016      	movs	r6, r2
 800e784:	000d      	movs	r5, r1
 800e786:	f003 fae9 	bl	8011d5c <__ulp>
 800e78a:	2e00      	cmp	r6, #0
 800e78c:	d00d      	beq.n	800e7aa <sulp+0x2a>
 800e78e:	236b      	movs	r3, #107	@ 0x6b
 800e790:	006a      	lsls	r2, r5, #1
 800e792:	0d52      	lsrs	r2, r2, #21
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	2b00      	cmp	r3, #0
 800e798:	dd07      	ble.n	800e7aa <sulp+0x2a>
 800e79a:	2400      	movs	r4, #0
 800e79c:	4a03      	ldr	r2, [pc, #12]	@ (800e7ac <sulp+0x2c>)
 800e79e:	051b      	lsls	r3, r3, #20
 800e7a0:	189d      	adds	r5, r3, r2
 800e7a2:	002b      	movs	r3, r5
 800e7a4:	0022      	movs	r2, r4
 800e7a6:	f7f2 fee9 	bl	800157c <__aeabi_dmul>
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	3ff00000 	.word	0x3ff00000

0800e7b0 <_strtod_l>:
 800e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7b2:	b0a3      	sub	sp, #140	@ 0x8c
 800e7b4:	921b      	str	r2, [sp, #108]	@ 0x6c
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	2600      	movs	r6, #0
 800e7ba:	2700      	movs	r7, #0
 800e7bc:	9005      	str	r0, [sp, #20]
 800e7be:	9109      	str	r1, [sp, #36]	@ 0x24
 800e7c0:	921e      	str	r2, [sp, #120]	@ 0x78
 800e7c2:	911d      	str	r1, [sp, #116]	@ 0x74
 800e7c4:	780a      	ldrb	r2, [r1, #0]
 800e7c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800e7c8:	d053      	beq.n	800e872 <_strtod_l+0xc2>
 800e7ca:	d83f      	bhi.n	800e84c <_strtod_l+0x9c>
 800e7cc:	2a0d      	cmp	r2, #13
 800e7ce:	d839      	bhi.n	800e844 <_strtod_l+0x94>
 800e7d0:	2a08      	cmp	r2, #8
 800e7d2:	d839      	bhi.n	800e848 <_strtod_l+0x98>
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	d042      	beq.n	800e85e <_strtod_l+0xae>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	9212      	str	r2, [sp, #72]	@ 0x48
 800e7dc:	2100      	movs	r1, #0
 800e7de:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800e7e0:	910c      	str	r1, [sp, #48]	@ 0x30
 800e7e2:	782a      	ldrb	r2, [r5, #0]
 800e7e4:	2a30      	cmp	r2, #48	@ 0x30
 800e7e6:	d000      	beq.n	800e7ea <_strtod_l+0x3a>
 800e7e8:	e083      	b.n	800e8f2 <_strtod_l+0x142>
 800e7ea:	786a      	ldrb	r2, [r5, #1]
 800e7ec:	3120      	adds	r1, #32
 800e7ee:	438a      	bics	r2, r1
 800e7f0:	2a58      	cmp	r2, #88	@ 0x58
 800e7f2:	d000      	beq.n	800e7f6 <_strtod_l+0x46>
 800e7f4:	e073      	b.n	800e8de <_strtod_l+0x12e>
 800e7f6:	9302      	str	r3, [sp, #8]
 800e7f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7fa:	4a9b      	ldr	r2, [pc, #620]	@ (800ea68 <_strtod_l+0x2b8>)
 800e7fc:	9301      	str	r3, [sp, #4]
 800e7fe:	ab1e      	add	r3, sp, #120	@ 0x78
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	9805      	ldr	r0, [sp, #20]
 800e804:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e806:	a91d      	add	r1, sp, #116	@ 0x74
 800e808:	f002 fb60 	bl	8010ecc <__gethex>
 800e80c:	230f      	movs	r3, #15
 800e80e:	0002      	movs	r2, r0
 800e810:	401a      	ands	r2, r3
 800e812:	0004      	movs	r4, r0
 800e814:	9206      	str	r2, [sp, #24]
 800e816:	4218      	tst	r0, r3
 800e818:	d005      	beq.n	800e826 <_strtod_l+0x76>
 800e81a:	2a06      	cmp	r2, #6
 800e81c:	d12b      	bne.n	800e876 <_strtod_l+0xc6>
 800e81e:	2300      	movs	r3, #0
 800e820:	3501      	adds	r5, #1
 800e822:	951d      	str	r5, [sp, #116]	@ 0x74
 800e824:	9312      	str	r3, [sp, #72]	@ 0x48
 800e826:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <_strtod_l+0x82>
 800e82c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e82e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e830:	6013      	str	r3, [r2, #0]
 800e832:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e834:	2b00      	cmp	r3, #0
 800e836:	d019      	beq.n	800e86c <_strtod_l+0xbc>
 800e838:	2380      	movs	r3, #128	@ 0x80
 800e83a:	0030      	movs	r0, r6
 800e83c:	061b      	lsls	r3, r3, #24
 800e83e:	18f9      	adds	r1, r7, r3
 800e840:	b023      	add	sp, #140	@ 0x8c
 800e842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e844:	2a20      	cmp	r2, #32
 800e846:	d1c7      	bne.n	800e7d8 <_strtod_l+0x28>
 800e848:	3101      	adds	r1, #1
 800e84a:	e7ba      	b.n	800e7c2 <_strtod_l+0x12>
 800e84c:	2a2d      	cmp	r2, #45	@ 0x2d
 800e84e:	d1c3      	bne.n	800e7d8 <_strtod_l+0x28>
 800e850:	3a2c      	subs	r2, #44	@ 0x2c
 800e852:	9212      	str	r2, [sp, #72]	@ 0x48
 800e854:	1c4a      	adds	r2, r1, #1
 800e856:	921d      	str	r2, [sp, #116]	@ 0x74
 800e858:	784a      	ldrb	r2, [r1, #1]
 800e85a:	2a00      	cmp	r2, #0
 800e85c:	d1be      	bne.n	800e7dc <_strtod_l+0x2c>
 800e85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e860:	931d      	str	r3, [sp, #116]	@ 0x74
 800e862:	2300      	movs	r3, #0
 800e864:	9312      	str	r3, [sp, #72]	@ 0x48
 800e866:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1df      	bne.n	800e82c <_strtod_l+0x7c>
 800e86c:	0030      	movs	r0, r6
 800e86e:	0039      	movs	r1, r7
 800e870:	e7e6      	b.n	800e840 <_strtod_l+0x90>
 800e872:	2200      	movs	r2, #0
 800e874:	e7ed      	b.n	800e852 <_strtod_l+0xa2>
 800e876:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e878:	2a00      	cmp	r2, #0
 800e87a:	d007      	beq.n	800e88c <_strtod_l+0xdc>
 800e87c:	2135      	movs	r1, #53	@ 0x35
 800e87e:	a820      	add	r0, sp, #128	@ 0x80
 800e880:	f003 fb62 	bl	8011f48 <__copybits>
 800e884:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e886:	9805      	ldr	r0, [sp, #20]
 800e888:	f002 ff24 	bl	80116d4 <_Bfree>
 800e88c:	9806      	ldr	r0, [sp, #24]
 800e88e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e890:	3801      	subs	r0, #1
 800e892:	2804      	cmp	r0, #4
 800e894:	d806      	bhi.n	800e8a4 <_strtod_l+0xf4>
 800e896:	f7f1 fc3b 	bl	8000110 <__gnu_thumb1_case_uqi>
 800e89a:	0312      	.short	0x0312
 800e89c:	1e1c      	.short	0x1e1c
 800e89e:	12          	.byte	0x12
 800e89f:	00          	.byte	0x00
 800e8a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e8a2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800e8a4:	05e4      	lsls	r4, r4, #23
 800e8a6:	d502      	bpl.n	800e8ae <_strtod_l+0xfe>
 800e8a8:	2380      	movs	r3, #128	@ 0x80
 800e8aa:	061b      	lsls	r3, r3, #24
 800e8ac:	431f      	orrs	r7, r3
 800e8ae:	4b6f      	ldr	r3, [pc, #444]	@ (800ea6c <_strtod_l+0x2bc>)
 800e8b0:	423b      	tst	r3, r7
 800e8b2:	d1b8      	bne.n	800e826 <_strtod_l+0x76>
 800e8b4:	f001 fb9a 	bl	800ffec <__errno>
 800e8b8:	2322      	movs	r3, #34	@ 0x22
 800e8ba:	6003      	str	r3, [r0, #0]
 800e8bc:	e7b3      	b.n	800e826 <_strtod_l+0x76>
 800e8be:	496c      	ldr	r1, [pc, #432]	@ (800ea70 <_strtod_l+0x2c0>)
 800e8c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e8c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e8c4:	400a      	ands	r2, r1
 800e8c6:	496b      	ldr	r1, [pc, #428]	@ (800ea74 <_strtod_l+0x2c4>)
 800e8c8:	185b      	adds	r3, r3, r1
 800e8ca:	051b      	lsls	r3, r3, #20
 800e8cc:	431a      	orrs	r2, r3
 800e8ce:	0017      	movs	r7, r2
 800e8d0:	e7e8      	b.n	800e8a4 <_strtod_l+0xf4>
 800e8d2:	4f66      	ldr	r7, [pc, #408]	@ (800ea6c <_strtod_l+0x2bc>)
 800e8d4:	e7e6      	b.n	800e8a4 <_strtod_l+0xf4>
 800e8d6:	2601      	movs	r6, #1
 800e8d8:	4f67      	ldr	r7, [pc, #412]	@ (800ea78 <_strtod_l+0x2c8>)
 800e8da:	4276      	negs	r6, r6
 800e8dc:	e7e2      	b.n	800e8a4 <_strtod_l+0xf4>
 800e8de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	921d      	str	r2, [sp, #116]	@ 0x74
 800e8e4:	785b      	ldrb	r3, [r3, #1]
 800e8e6:	2b30      	cmp	r3, #48	@ 0x30
 800e8e8:	d0f9      	beq.n	800e8de <_strtod_l+0x12e>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d09b      	beq.n	800e826 <_strtod_l+0x76>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e8f4:	220a      	movs	r2, #10
 800e8f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800e8fc:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8fe:	9308      	str	r3, [sp, #32]
 800e900:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e902:	7804      	ldrb	r4, [r0, #0]
 800e904:	0023      	movs	r3, r4
 800e906:	3b30      	subs	r3, #48	@ 0x30
 800e908:	b2d9      	uxtb	r1, r3
 800e90a:	2909      	cmp	r1, #9
 800e90c:	d927      	bls.n	800e95e <_strtod_l+0x1ae>
 800e90e:	2201      	movs	r2, #1
 800e910:	495a      	ldr	r1, [pc, #360]	@ (800ea7c <_strtod_l+0x2cc>)
 800e912:	f001 fb07 	bl	800ff24 <strncmp>
 800e916:	2800      	cmp	r0, #0
 800e918:	d033      	beq.n	800e982 <_strtod_l+0x1d2>
 800e91a:	2000      	movs	r0, #0
 800e91c:	0023      	movs	r3, r4
 800e91e:	4684      	mov	ip, r0
 800e920:	9a08      	ldr	r2, [sp, #32]
 800e922:	900e      	str	r0, [sp, #56]	@ 0x38
 800e924:	9206      	str	r2, [sp, #24]
 800e926:	2220      	movs	r2, #32
 800e928:	0019      	movs	r1, r3
 800e92a:	4391      	bics	r1, r2
 800e92c:	000a      	movs	r2, r1
 800e92e:	2100      	movs	r1, #0
 800e930:	9107      	str	r1, [sp, #28]
 800e932:	2a45      	cmp	r2, #69	@ 0x45
 800e934:	d000      	beq.n	800e938 <_strtod_l+0x188>
 800e936:	e0cb      	b.n	800ead0 <_strtod_l+0x320>
 800e938:	9b06      	ldr	r3, [sp, #24]
 800e93a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e93c:	4303      	orrs	r3, r0
 800e93e:	4313      	orrs	r3, r2
 800e940:	428b      	cmp	r3, r1
 800e942:	d08c      	beq.n	800e85e <_strtod_l+0xae>
 800e944:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e946:	9309      	str	r3, [sp, #36]	@ 0x24
 800e948:	3301      	adds	r3, #1
 800e94a:	931d      	str	r3, [sp, #116]	@ 0x74
 800e94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94e:	785b      	ldrb	r3, [r3, #1]
 800e950:	2b2b      	cmp	r3, #43	@ 0x2b
 800e952:	d07b      	beq.n	800ea4c <_strtod_l+0x29c>
 800e954:	000c      	movs	r4, r1
 800e956:	2b2d      	cmp	r3, #45	@ 0x2d
 800e958:	d17e      	bne.n	800ea58 <_strtod_l+0x2a8>
 800e95a:	2401      	movs	r4, #1
 800e95c:	e077      	b.n	800ea4e <_strtod_l+0x29e>
 800e95e:	9908      	ldr	r1, [sp, #32]
 800e960:	2908      	cmp	r1, #8
 800e962:	dc09      	bgt.n	800e978 <_strtod_l+0x1c8>
 800e964:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e966:	4351      	muls	r1, r2
 800e968:	185b      	adds	r3, r3, r1
 800e96a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e96c:	9b08      	ldr	r3, [sp, #32]
 800e96e:	3001      	adds	r0, #1
 800e970:	3301      	adds	r3, #1
 800e972:	9308      	str	r3, [sp, #32]
 800e974:	901d      	str	r0, [sp, #116]	@ 0x74
 800e976:	e7c3      	b.n	800e900 <_strtod_l+0x150>
 800e978:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e97a:	4355      	muls	r5, r2
 800e97c:	195b      	adds	r3, r3, r5
 800e97e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e980:	e7f4      	b.n	800e96c <_strtod_l+0x1bc>
 800e982:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e984:	1c5a      	adds	r2, r3, #1
 800e986:	921d      	str	r2, [sp, #116]	@ 0x74
 800e988:	9a08      	ldr	r2, [sp, #32]
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	2a00      	cmp	r2, #0
 800e98e:	d03e      	beq.n	800ea0e <_strtod_l+0x25e>
 800e990:	900e      	str	r0, [sp, #56]	@ 0x38
 800e992:	9206      	str	r2, [sp, #24]
 800e994:	001a      	movs	r2, r3
 800e996:	3a30      	subs	r2, #48	@ 0x30
 800e998:	2a09      	cmp	r2, #9
 800e99a:	d912      	bls.n	800e9c2 <_strtod_l+0x212>
 800e99c:	2201      	movs	r2, #1
 800e99e:	4694      	mov	ip, r2
 800e9a0:	e7c1      	b.n	800e926 <_strtod_l+0x176>
 800e9a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	921d      	str	r2, [sp, #116]	@ 0x74
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	2b30      	cmp	r3, #48	@ 0x30
 800e9ae:	d0f8      	beq.n	800e9a2 <_strtod_l+0x1f2>
 800e9b0:	001a      	movs	r2, r3
 800e9b2:	3a31      	subs	r2, #49	@ 0x31
 800e9b4:	2a08      	cmp	r2, #8
 800e9b6:	d844      	bhi.n	800ea42 <_strtod_l+0x292>
 800e9b8:	900e      	str	r0, [sp, #56]	@ 0x38
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e9be:	9006      	str	r0, [sp, #24]
 800e9c0:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e9c2:	001c      	movs	r4, r3
 800e9c4:	1c42      	adds	r2, r0, #1
 800e9c6:	3c30      	subs	r4, #48	@ 0x30
 800e9c8:	2b30      	cmp	r3, #48	@ 0x30
 800e9ca:	d01a      	beq.n	800ea02 <_strtod_l+0x252>
 800e9cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9ce:	9906      	ldr	r1, [sp, #24]
 800e9d0:	189b      	adds	r3, r3, r2
 800e9d2:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9d4:	230a      	movs	r3, #10
 800e9d6:	469c      	mov	ip, r3
 800e9d8:	9d06      	ldr	r5, [sp, #24]
 800e9da:	1c4b      	adds	r3, r1, #1
 800e9dc:	1b5d      	subs	r5, r3, r5
 800e9de:	42aa      	cmp	r2, r5
 800e9e0:	dc17      	bgt.n	800ea12 <_strtod_l+0x262>
 800e9e2:	43c3      	mvns	r3, r0
 800e9e4:	9a06      	ldr	r2, [sp, #24]
 800e9e6:	17db      	asrs	r3, r3, #31
 800e9e8:	4003      	ands	r3, r0
 800e9ea:	18d1      	adds	r1, r2, r3
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	18d3      	adds	r3, r2, r3
 800e9f0:	9306      	str	r3, [sp, #24]
 800e9f2:	2908      	cmp	r1, #8
 800e9f4:	dc1c      	bgt.n	800ea30 <_strtod_l+0x280>
 800e9f6:	230a      	movs	r3, #10
 800e9f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9fa:	4353      	muls	r3, r2
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	18e3      	adds	r3, r4, r3
 800ea00:	930d      	str	r3, [sp, #52]	@ 0x34
 800ea02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea04:	0010      	movs	r0, r2
 800ea06:	1c59      	adds	r1, r3, #1
 800ea08:	911d      	str	r1, [sp, #116]	@ 0x74
 800ea0a:	785b      	ldrb	r3, [r3, #1]
 800ea0c:	e7c2      	b.n	800e994 <_strtod_l+0x1e4>
 800ea0e:	9808      	ldr	r0, [sp, #32]
 800ea10:	e7cc      	b.n	800e9ac <_strtod_l+0x1fc>
 800ea12:	2908      	cmp	r1, #8
 800ea14:	dc05      	bgt.n	800ea22 <_strtod_l+0x272>
 800ea16:	4665      	mov	r5, ip
 800ea18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ea1a:	4369      	muls	r1, r5
 800ea1c:	910d      	str	r1, [sp, #52]	@ 0x34
 800ea1e:	0019      	movs	r1, r3
 800ea20:	e7da      	b.n	800e9d8 <_strtod_l+0x228>
 800ea22:	2b10      	cmp	r3, #16
 800ea24:	dcfb      	bgt.n	800ea1e <_strtod_l+0x26e>
 800ea26:	4661      	mov	r1, ip
 800ea28:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ea2a:	434d      	muls	r5, r1
 800ea2c:	9510      	str	r5, [sp, #64]	@ 0x40
 800ea2e:	e7f6      	b.n	800ea1e <_strtod_l+0x26e>
 800ea30:	2200      	movs	r2, #0
 800ea32:	290f      	cmp	r1, #15
 800ea34:	dce5      	bgt.n	800ea02 <_strtod_l+0x252>
 800ea36:	230a      	movs	r3, #10
 800ea38:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ea3a:	435d      	muls	r5, r3
 800ea3c:	1963      	adds	r3, r4, r5
 800ea3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ea40:	e7df      	b.n	800ea02 <_strtod_l+0x252>
 800ea42:	2200      	movs	r2, #0
 800ea44:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea46:	9206      	str	r2, [sp, #24]
 800ea48:	3201      	adds	r2, #1
 800ea4a:	e7a8      	b.n	800e99e <_strtod_l+0x1ee>
 800ea4c:	2400      	movs	r4, #0
 800ea4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea50:	3302      	adds	r3, #2
 800ea52:	931d      	str	r3, [sp, #116]	@ 0x74
 800ea54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea56:	789b      	ldrb	r3, [r3, #2]
 800ea58:	001a      	movs	r2, r3
 800ea5a:	3a30      	subs	r2, #48	@ 0x30
 800ea5c:	2a09      	cmp	r2, #9
 800ea5e:	d913      	bls.n	800ea88 <_strtod_l+0x2d8>
 800ea60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea62:	921d      	str	r2, [sp, #116]	@ 0x74
 800ea64:	2200      	movs	r2, #0
 800ea66:	e032      	b.n	800eace <_strtod_l+0x31e>
 800ea68:	08012f68 	.word	0x08012f68
 800ea6c:	7ff00000 	.word	0x7ff00000
 800ea70:	ffefffff 	.word	0xffefffff
 800ea74:	00000433 	.word	0x00000433
 800ea78:	7fffffff 	.word	0x7fffffff
 800ea7c:	08012d80 	.word	0x08012d80
 800ea80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea82:	1c5a      	adds	r2, r3, #1
 800ea84:	921d      	str	r2, [sp, #116]	@ 0x74
 800ea86:	785b      	ldrb	r3, [r3, #1]
 800ea88:	2b30      	cmp	r3, #48	@ 0x30
 800ea8a:	d0f9      	beq.n	800ea80 <_strtod_l+0x2d0>
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	9207      	str	r2, [sp, #28]
 800ea90:	001a      	movs	r2, r3
 800ea92:	3a31      	subs	r2, #49	@ 0x31
 800ea94:	2a08      	cmp	r2, #8
 800ea96:	d81b      	bhi.n	800ead0 <_strtod_l+0x320>
 800ea98:	3b30      	subs	r3, #48	@ 0x30
 800ea9a:	001a      	movs	r2, r3
 800ea9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea9e:	9307      	str	r3, [sp, #28]
 800eaa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eaa2:	1c59      	adds	r1, r3, #1
 800eaa4:	911d      	str	r1, [sp, #116]	@ 0x74
 800eaa6:	785b      	ldrb	r3, [r3, #1]
 800eaa8:	001d      	movs	r5, r3
 800eaaa:	3d30      	subs	r5, #48	@ 0x30
 800eaac:	2d09      	cmp	r5, #9
 800eaae:	d93a      	bls.n	800eb26 <_strtod_l+0x376>
 800eab0:	9d07      	ldr	r5, [sp, #28]
 800eab2:	1b49      	subs	r1, r1, r5
 800eab4:	000d      	movs	r5, r1
 800eab6:	49b3      	ldr	r1, [pc, #716]	@ (800ed84 <_strtod_l+0x5d4>)
 800eab8:	9107      	str	r1, [sp, #28]
 800eaba:	2d08      	cmp	r5, #8
 800eabc:	dc03      	bgt.n	800eac6 <_strtod_l+0x316>
 800eabe:	9207      	str	r2, [sp, #28]
 800eac0:	428a      	cmp	r2, r1
 800eac2:	dd00      	ble.n	800eac6 <_strtod_l+0x316>
 800eac4:	9107      	str	r1, [sp, #28]
 800eac6:	2c00      	cmp	r4, #0
 800eac8:	d002      	beq.n	800ead0 <_strtod_l+0x320>
 800eaca:	9a07      	ldr	r2, [sp, #28]
 800eacc:	4252      	negs	r2, r2
 800eace:	9207      	str	r2, [sp, #28]
 800ead0:	9a06      	ldr	r2, [sp, #24]
 800ead2:	2a00      	cmp	r2, #0
 800ead4:	d14b      	bne.n	800eb6e <_strtod_l+0x3be>
 800ead6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ead8:	4310      	orrs	r0, r2
 800eada:	d000      	beq.n	800eade <_strtod_l+0x32e>
 800eadc:	e6a3      	b.n	800e826 <_strtod_l+0x76>
 800eade:	4662      	mov	r2, ip
 800eae0:	2a00      	cmp	r2, #0
 800eae2:	d000      	beq.n	800eae6 <_strtod_l+0x336>
 800eae4:	e6bb      	b.n	800e85e <_strtod_l+0xae>
 800eae6:	2b69      	cmp	r3, #105	@ 0x69
 800eae8:	d025      	beq.n	800eb36 <_strtod_l+0x386>
 800eaea:	dc21      	bgt.n	800eb30 <_strtod_l+0x380>
 800eaec:	2b49      	cmp	r3, #73	@ 0x49
 800eaee:	d022      	beq.n	800eb36 <_strtod_l+0x386>
 800eaf0:	2b4e      	cmp	r3, #78	@ 0x4e
 800eaf2:	d000      	beq.n	800eaf6 <_strtod_l+0x346>
 800eaf4:	e6b3      	b.n	800e85e <_strtod_l+0xae>
 800eaf6:	49a4      	ldr	r1, [pc, #656]	@ (800ed88 <_strtod_l+0x5d8>)
 800eaf8:	a81d      	add	r0, sp, #116	@ 0x74
 800eafa:	f002 fc1d 	bl	8011338 <__match>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d100      	bne.n	800eb04 <_strtod_l+0x354>
 800eb02:	e6ac      	b.n	800e85e <_strtod_l+0xae>
 800eb04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b28      	cmp	r3, #40	@ 0x28
 800eb0a:	d12a      	bne.n	800eb62 <_strtod_l+0x3b2>
 800eb0c:	499f      	ldr	r1, [pc, #636]	@ (800ed8c <_strtod_l+0x5dc>)
 800eb0e:	aa20      	add	r2, sp, #128	@ 0x80
 800eb10:	a81d      	add	r0, sp, #116	@ 0x74
 800eb12:	f002 fc25 	bl	8011360 <__hexnan>
 800eb16:	2805      	cmp	r0, #5
 800eb18:	d123      	bne.n	800eb62 <_strtod_l+0x3b2>
 800eb1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb1c:	4a9c      	ldr	r2, [pc, #624]	@ (800ed90 <_strtod_l+0x5e0>)
 800eb1e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800eb20:	431a      	orrs	r2, r3
 800eb22:	0017      	movs	r7, r2
 800eb24:	e67f      	b.n	800e826 <_strtod_l+0x76>
 800eb26:	210a      	movs	r1, #10
 800eb28:	434a      	muls	r2, r1
 800eb2a:	18d2      	adds	r2, r2, r3
 800eb2c:	3a30      	subs	r2, #48	@ 0x30
 800eb2e:	e7b7      	b.n	800eaa0 <_strtod_l+0x2f0>
 800eb30:	2b6e      	cmp	r3, #110	@ 0x6e
 800eb32:	d0e0      	beq.n	800eaf6 <_strtod_l+0x346>
 800eb34:	e693      	b.n	800e85e <_strtod_l+0xae>
 800eb36:	4997      	ldr	r1, [pc, #604]	@ (800ed94 <_strtod_l+0x5e4>)
 800eb38:	a81d      	add	r0, sp, #116	@ 0x74
 800eb3a:	f002 fbfd 	bl	8011338 <__match>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d100      	bne.n	800eb44 <_strtod_l+0x394>
 800eb42:	e68c      	b.n	800e85e <_strtod_l+0xae>
 800eb44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb46:	4994      	ldr	r1, [pc, #592]	@ (800ed98 <_strtod_l+0x5e8>)
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	a81d      	add	r0, sp, #116	@ 0x74
 800eb4c:	931d      	str	r3, [sp, #116]	@ 0x74
 800eb4e:	f002 fbf3 	bl	8011338 <__match>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d102      	bne.n	800eb5c <_strtod_l+0x3ac>
 800eb56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb58:	3301      	adds	r3, #1
 800eb5a:	931d      	str	r3, [sp, #116]	@ 0x74
 800eb5c:	2600      	movs	r6, #0
 800eb5e:	4f8c      	ldr	r7, [pc, #560]	@ (800ed90 <_strtod_l+0x5e0>)
 800eb60:	e661      	b.n	800e826 <_strtod_l+0x76>
 800eb62:	488e      	ldr	r0, [pc, #568]	@ (800ed9c <_strtod_l+0x5ec>)
 800eb64:	f001 fa84 	bl	8010070 <nan>
 800eb68:	0006      	movs	r6, r0
 800eb6a:	000f      	movs	r7, r1
 800eb6c:	e65b      	b.n	800e826 <_strtod_l+0x76>
 800eb6e:	9b07      	ldr	r3, [sp, #28]
 800eb70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb72:	1a9b      	subs	r3, r3, r2
 800eb74:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb76:	9b08      	ldr	r3, [sp, #32]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <_strtod_l+0x3d0>
 800eb7c:	9b06      	ldr	r3, [sp, #24]
 800eb7e:	9308      	str	r3, [sp, #32]
 800eb80:	9c06      	ldr	r4, [sp, #24]
 800eb82:	2c10      	cmp	r4, #16
 800eb84:	dd00      	ble.n	800eb88 <_strtod_l+0x3d8>
 800eb86:	2410      	movs	r4, #16
 800eb88:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800eb8a:	f7f3 fc73 	bl	8002474 <__aeabi_ui2d>
 800eb8e:	9b06      	ldr	r3, [sp, #24]
 800eb90:	0006      	movs	r6, r0
 800eb92:	000f      	movs	r7, r1
 800eb94:	2b09      	cmp	r3, #9
 800eb96:	dc13      	bgt.n	800ebc0 <_strtod_l+0x410>
 800eb98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d100      	bne.n	800eba0 <_strtod_l+0x3f0>
 800eb9e:	e642      	b.n	800e826 <_strtod_l+0x76>
 800eba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	dc00      	bgt.n	800eba8 <_strtod_l+0x3f8>
 800eba6:	e07e      	b.n	800eca6 <_strtod_l+0x4f6>
 800eba8:	2b16      	cmp	r3, #22
 800ebaa:	dc63      	bgt.n	800ec74 <_strtod_l+0x4c4>
 800ebac:	497c      	ldr	r1, [pc, #496]	@ (800eda0 <_strtod_l+0x5f0>)
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	18c9      	adds	r1, r1, r3
 800ebb2:	0032      	movs	r2, r6
 800ebb4:	6808      	ldr	r0, [r1, #0]
 800ebb6:	6849      	ldr	r1, [r1, #4]
 800ebb8:	003b      	movs	r3, r7
 800ebba:	f7f2 fcdf 	bl	800157c <__aeabi_dmul>
 800ebbe:	e7d3      	b.n	800eb68 <_strtod_l+0x3b8>
 800ebc0:	0022      	movs	r2, r4
 800ebc2:	4b77      	ldr	r3, [pc, #476]	@ (800eda0 <_strtod_l+0x5f0>)
 800ebc4:	3a09      	subs	r2, #9
 800ebc6:	00d2      	lsls	r2, r2, #3
 800ebc8:	189b      	adds	r3, r3, r2
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	f7f2 fcd5 	bl	800157c <__aeabi_dmul>
 800ebd2:	0006      	movs	r6, r0
 800ebd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ebd6:	000f      	movs	r7, r1
 800ebd8:	f7f3 fc4c 	bl	8002474 <__aeabi_ui2d>
 800ebdc:	000b      	movs	r3, r1
 800ebde:	0002      	movs	r2, r0
 800ebe0:	0039      	movs	r1, r7
 800ebe2:	0030      	movs	r0, r6
 800ebe4:	f7f1 fcca 	bl	800057c <__aeabi_dadd>
 800ebe8:	9b06      	ldr	r3, [sp, #24]
 800ebea:	0006      	movs	r6, r0
 800ebec:	000f      	movs	r7, r1
 800ebee:	2b0f      	cmp	r3, #15
 800ebf0:	ddd2      	ble.n	800eb98 <_strtod_l+0x3e8>
 800ebf2:	9b06      	ldr	r3, [sp, #24]
 800ebf4:	1b1c      	subs	r4, r3, r4
 800ebf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebf8:	18e4      	adds	r4, r4, r3
 800ebfa:	2c00      	cmp	r4, #0
 800ebfc:	dc00      	bgt.n	800ec00 <_strtod_l+0x450>
 800ebfe:	e09b      	b.n	800ed38 <_strtod_l+0x588>
 800ec00:	220f      	movs	r2, #15
 800ec02:	0023      	movs	r3, r4
 800ec04:	4013      	ands	r3, r2
 800ec06:	4214      	tst	r4, r2
 800ec08:	d00a      	beq.n	800ec20 <_strtod_l+0x470>
 800ec0a:	4965      	ldr	r1, [pc, #404]	@ (800eda0 <_strtod_l+0x5f0>)
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	18c9      	adds	r1, r1, r3
 800ec10:	0032      	movs	r2, r6
 800ec12:	6808      	ldr	r0, [r1, #0]
 800ec14:	6849      	ldr	r1, [r1, #4]
 800ec16:	003b      	movs	r3, r7
 800ec18:	f7f2 fcb0 	bl	800157c <__aeabi_dmul>
 800ec1c:	0006      	movs	r6, r0
 800ec1e:	000f      	movs	r7, r1
 800ec20:	230f      	movs	r3, #15
 800ec22:	439c      	bics	r4, r3
 800ec24:	d073      	beq.n	800ed0e <_strtod_l+0x55e>
 800ec26:	3326      	adds	r3, #38	@ 0x26
 800ec28:	33ff      	adds	r3, #255	@ 0xff
 800ec2a:	429c      	cmp	r4, r3
 800ec2c:	dd4b      	ble.n	800ecc6 <_strtod_l+0x516>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	9306      	str	r3, [sp, #24]
 800ec32:	9307      	str	r3, [sp, #28]
 800ec34:	930d      	str	r3, [sp, #52]	@ 0x34
 800ec36:	9308      	str	r3, [sp, #32]
 800ec38:	2322      	movs	r3, #34	@ 0x22
 800ec3a:	2600      	movs	r6, #0
 800ec3c:	9a05      	ldr	r2, [sp, #20]
 800ec3e:	4f54      	ldr	r7, [pc, #336]	@ (800ed90 <_strtod_l+0x5e0>)
 800ec40:	6013      	str	r3, [r2, #0]
 800ec42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec44:	42b3      	cmp	r3, r6
 800ec46:	d100      	bne.n	800ec4a <_strtod_l+0x49a>
 800ec48:	e5ed      	b.n	800e826 <_strtod_l+0x76>
 800ec4a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ec4c:	9805      	ldr	r0, [sp, #20]
 800ec4e:	f002 fd41 	bl	80116d4 <_Bfree>
 800ec52:	9908      	ldr	r1, [sp, #32]
 800ec54:	9805      	ldr	r0, [sp, #20]
 800ec56:	f002 fd3d 	bl	80116d4 <_Bfree>
 800ec5a:	9907      	ldr	r1, [sp, #28]
 800ec5c:	9805      	ldr	r0, [sp, #20]
 800ec5e:	f002 fd39 	bl	80116d4 <_Bfree>
 800ec62:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ec64:	9805      	ldr	r0, [sp, #20]
 800ec66:	f002 fd35 	bl	80116d4 <_Bfree>
 800ec6a:	9906      	ldr	r1, [sp, #24]
 800ec6c:	9805      	ldr	r0, [sp, #20]
 800ec6e:	f002 fd31 	bl	80116d4 <_Bfree>
 800ec72:	e5d8      	b.n	800e826 <_strtod_l+0x76>
 800ec74:	2325      	movs	r3, #37	@ 0x25
 800ec76:	9a06      	ldr	r2, [sp, #24]
 800ec78:	1a9b      	subs	r3, r3, r2
 800ec7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	dbb8      	blt.n	800ebf2 <_strtod_l+0x442>
 800ec80:	240f      	movs	r4, #15
 800ec82:	9b06      	ldr	r3, [sp, #24]
 800ec84:	4d46      	ldr	r5, [pc, #280]	@ (800eda0 <_strtod_l+0x5f0>)
 800ec86:	1ae4      	subs	r4, r4, r3
 800ec88:	00e1      	lsls	r1, r4, #3
 800ec8a:	1869      	adds	r1, r5, r1
 800ec8c:	0032      	movs	r2, r6
 800ec8e:	6808      	ldr	r0, [r1, #0]
 800ec90:	6849      	ldr	r1, [r1, #4]
 800ec92:	003b      	movs	r3, r7
 800ec94:	f7f2 fc72 	bl	800157c <__aeabi_dmul>
 800ec98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec9a:	1b1c      	subs	r4, r3, r4
 800ec9c:	00e4      	lsls	r4, r4, #3
 800ec9e:	192d      	adds	r5, r5, r4
 800eca0:	682a      	ldr	r2, [r5, #0]
 800eca2:	686b      	ldr	r3, [r5, #4]
 800eca4:	e789      	b.n	800ebba <_strtod_l+0x40a>
 800eca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eca8:	3316      	adds	r3, #22
 800ecaa:	dba2      	blt.n	800ebf2 <_strtod_l+0x442>
 800ecac:	9907      	ldr	r1, [sp, #28]
 800ecae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecb0:	4b3b      	ldr	r3, [pc, #236]	@ (800eda0 <_strtod_l+0x5f0>)
 800ecb2:	1a52      	subs	r2, r2, r1
 800ecb4:	00d2      	lsls	r2, r2, #3
 800ecb6:	189b      	adds	r3, r3, r2
 800ecb8:	0030      	movs	r0, r6
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	0039      	movs	r1, r7
 800ecc0:	f7f2 f822 	bl	8000d08 <__aeabi_ddiv>
 800ecc4:	e750      	b.n	800eb68 <_strtod_l+0x3b8>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	0030      	movs	r0, r6
 800ecca:	0039      	movs	r1, r7
 800eccc:	4d35      	ldr	r5, [pc, #212]	@ (800eda4 <_strtod_l+0x5f4>)
 800ecce:	1124      	asrs	r4, r4, #4
 800ecd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecd2:	2c01      	cmp	r4, #1
 800ecd4:	dc1e      	bgt.n	800ed14 <_strtod_l+0x564>
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <_strtod_l+0x52e>
 800ecda:	0006      	movs	r6, r0
 800ecdc:	000f      	movs	r7, r1
 800ecde:	4b32      	ldr	r3, [pc, #200]	@ (800eda8 <_strtod_l+0x5f8>)
 800ece0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ece2:	18ff      	adds	r7, r7, r3
 800ece4:	4b2f      	ldr	r3, [pc, #188]	@ (800eda4 <_strtod_l+0x5f4>)
 800ece6:	00d5      	lsls	r5, r2, #3
 800ece8:	195d      	adds	r5, r3, r5
 800ecea:	0032      	movs	r2, r6
 800ecec:	6828      	ldr	r0, [r5, #0]
 800ecee:	6869      	ldr	r1, [r5, #4]
 800ecf0:	003b      	movs	r3, r7
 800ecf2:	f7f2 fc43 	bl	800157c <__aeabi_dmul>
 800ecf6:	4b26      	ldr	r3, [pc, #152]	@ (800ed90 <_strtod_l+0x5e0>)
 800ecf8:	4a2c      	ldr	r2, [pc, #176]	@ (800edac <_strtod_l+0x5fc>)
 800ecfa:	0006      	movs	r6, r0
 800ecfc:	400b      	ands	r3, r1
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d895      	bhi.n	800ec2e <_strtod_l+0x47e>
 800ed02:	4a2b      	ldr	r2, [pc, #172]	@ (800edb0 <_strtod_l+0x600>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d913      	bls.n	800ed30 <_strtod_l+0x580>
 800ed08:	2601      	movs	r6, #1
 800ed0a:	4f2a      	ldr	r7, [pc, #168]	@ (800edb4 <_strtod_l+0x604>)
 800ed0c:	4276      	negs	r6, r6
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed12:	e086      	b.n	800ee22 <_strtod_l+0x672>
 800ed14:	2201      	movs	r2, #1
 800ed16:	4214      	tst	r4, r2
 800ed18:	d004      	beq.n	800ed24 <_strtod_l+0x574>
 800ed1a:	682a      	ldr	r2, [r5, #0]
 800ed1c:	686b      	ldr	r3, [r5, #4]
 800ed1e:	f7f2 fc2d 	bl	800157c <__aeabi_dmul>
 800ed22:	2301      	movs	r3, #1
 800ed24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed26:	1064      	asrs	r4, r4, #1
 800ed28:	3201      	adds	r2, #1
 800ed2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed2c:	3508      	adds	r5, #8
 800ed2e:	e7d0      	b.n	800ecd2 <_strtod_l+0x522>
 800ed30:	23d4      	movs	r3, #212	@ 0xd4
 800ed32:	049b      	lsls	r3, r3, #18
 800ed34:	18cf      	adds	r7, r1, r3
 800ed36:	e7ea      	b.n	800ed0e <_strtod_l+0x55e>
 800ed38:	2c00      	cmp	r4, #0
 800ed3a:	d0e8      	beq.n	800ed0e <_strtod_l+0x55e>
 800ed3c:	4264      	negs	r4, r4
 800ed3e:	230f      	movs	r3, #15
 800ed40:	0022      	movs	r2, r4
 800ed42:	401a      	ands	r2, r3
 800ed44:	421c      	tst	r4, r3
 800ed46:	d00a      	beq.n	800ed5e <_strtod_l+0x5ae>
 800ed48:	4b15      	ldr	r3, [pc, #84]	@ (800eda0 <_strtod_l+0x5f0>)
 800ed4a:	00d2      	lsls	r2, r2, #3
 800ed4c:	189b      	adds	r3, r3, r2
 800ed4e:	0030      	movs	r0, r6
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	0039      	movs	r1, r7
 800ed56:	f7f1 ffd7 	bl	8000d08 <__aeabi_ddiv>
 800ed5a:	0006      	movs	r6, r0
 800ed5c:	000f      	movs	r7, r1
 800ed5e:	1124      	asrs	r4, r4, #4
 800ed60:	d0d5      	beq.n	800ed0e <_strtod_l+0x55e>
 800ed62:	2c1f      	cmp	r4, #31
 800ed64:	dd28      	ble.n	800edb8 <_strtod_l+0x608>
 800ed66:	2300      	movs	r3, #0
 800ed68:	9306      	str	r3, [sp, #24]
 800ed6a:	9307      	str	r3, [sp, #28]
 800ed6c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ed6e:	9308      	str	r3, [sp, #32]
 800ed70:	2322      	movs	r3, #34	@ 0x22
 800ed72:	9a05      	ldr	r2, [sp, #20]
 800ed74:	2600      	movs	r6, #0
 800ed76:	6013      	str	r3, [r2, #0]
 800ed78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed7a:	2700      	movs	r7, #0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d000      	beq.n	800ed82 <_strtod_l+0x5d2>
 800ed80:	e763      	b.n	800ec4a <_strtod_l+0x49a>
 800ed82:	e550      	b.n	800e826 <_strtod_l+0x76>
 800ed84:	00004e1f 	.word	0x00004e1f
 800ed88:	08012d8f 	.word	0x08012d8f
 800ed8c:	08012f54 	.word	0x08012f54
 800ed90:	7ff00000 	.word	0x7ff00000
 800ed94:	08012d87 	.word	0x08012d87
 800ed98:	08012dc1 	.word	0x08012dc1
 800ed9c:	08012f50 	.word	0x08012f50
 800eda0:	08012fe0 	.word	0x08012fe0
 800eda4:	08012fb8 	.word	0x08012fb8
 800eda8:	fcb00000 	.word	0xfcb00000
 800edac:	7ca00000 	.word	0x7ca00000
 800edb0:	7c900000 	.word	0x7c900000
 800edb4:	7fefffff 	.word	0x7fefffff
 800edb8:	2310      	movs	r3, #16
 800edba:	0022      	movs	r2, r4
 800edbc:	401a      	ands	r2, r3
 800edbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800edc0:	421c      	tst	r4, r3
 800edc2:	d001      	beq.n	800edc8 <_strtod_l+0x618>
 800edc4:	335a      	adds	r3, #90	@ 0x5a
 800edc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc8:	0030      	movs	r0, r6
 800edca:	0039      	movs	r1, r7
 800edcc:	2300      	movs	r3, #0
 800edce:	4dc0      	ldr	r5, [pc, #768]	@ (800f0d0 <_strtod_l+0x920>)
 800edd0:	2201      	movs	r2, #1
 800edd2:	4214      	tst	r4, r2
 800edd4:	d004      	beq.n	800ede0 <_strtod_l+0x630>
 800edd6:	682a      	ldr	r2, [r5, #0]
 800edd8:	686b      	ldr	r3, [r5, #4]
 800edda:	f7f2 fbcf 	bl	800157c <__aeabi_dmul>
 800edde:	2301      	movs	r3, #1
 800ede0:	1064      	asrs	r4, r4, #1
 800ede2:	3508      	adds	r5, #8
 800ede4:	2c00      	cmp	r4, #0
 800ede6:	d1f3      	bne.n	800edd0 <_strtod_l+0x620>
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <_strtod_l+0x640>
 800edec:	0006      	movs	r6, r0
 800edee:	000f      	movs	r7, r1
 800edf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00d      	beq.n	800ee12 <_strtod_l+0x662>
 800edf6:	236b      	movs	r3, #107	@ 0x6b
 800edf8:	007a      	lsls	r2, r7, #1
 800edfa:	0d52      	lsrs	r2, r2, #21
 800edfc:	0039      	movs	r1, r7
 800edfe:	1a9b      	subs	r3, r3, r2
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dd06      	ble.n	800ee12 <_strtod_l+0x662>
 800ee04:	2b1f      	cmp	r3, #31
 800ee06:	dd5c      	ble.n	800eec2 <_strtod_l+0x712>
 800ee08:	2600      	movs	r6, #0
 800ee0a:	2b34      	cmp	r3, #52	@ 0x34
 800ee0c:	dd52      	ble.n	800eeb4 <_strtod_l+0x704>
 800ee0e:	27dc      	movs	r7, #220	@ 0xdc
 800ee10:	04bf      	lsls	r7, r7, #18
 800ee12:	2200      	movs	r2, #0
 800ee14:	2300      	movs	r3, #0
 800ee16:	0030      	movs	r0, r6
 800ee18:	0039      	movs	r1, r7
 800ee1a:	f7f1 fb13 	bl	8000444 <__aeabi_dcmpeq>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d1a1      	bne.n	800ed66 <_strtod_l+0x5b6>
 800ee22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee24:	9a08      	ldr	r2, [sp, #32]
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ee2a:	9b06      	ldr	r3, [sp, #24]
 800ee2c:	9805      	ldr	r0, [sp, #20]
 800ee2e:	f002 fcb9 	bl	80117a4 <__s2b>
 800ee32:	900d      	str	r0, [sp, #52]	@ 0x34
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d100      	bne.n	800ee3a <_strtod_l+0x68a>
 800ee38:	e6f9      	b.n	800ec2e <_strtod_l+0x47e>
 800ee3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee3c:	9907      	ldr	r1, [sp, #28]
 800ee3e:	43db      	mvns	r3, r3
 800ee40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee42:	17db      	asrs	r3, r3, #31
 800ee44:	1a52      	subs	r2, r2, r1
 800ee46:	9214      	str	r2, [sp, #80]	@ 0x50
 800ee48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee4a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800ee4c:	17d2      	asrs	r2, r2, #31
 800ee4e:	4011      	ands	r1, r2
 800ee50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ee52:	9114      	str	r1, [sp, #80]	@ 0x50
 800ee54:	401a      	ands	r2, r3
 800ee56:	2300      	movs	r3, #0
 800ee58:	921a      	str	r2, [sp, #104]	@ 0x68
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	9307      	str	r3, [sp, #28]
 800ee5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee60:	9805      	ldr	r0, [sp, #20]
 800ee62:	6859      	ldr	r1, [r3, #4]
 800ee64:	f002 fbf2 	bl	801164c <_Balloc>
 800ee68:	9008      	str	r0, [sp, #32]
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d100      	bne.n	800ee70 <_strtod_l+0x6c0>
 800ee6e:	e6e3      	b.n	800ec38 <_strtod_l+0x488>
 800ee70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee72:	300c      	adds	r0, #12
 800ee74:	0019      	movs	r1, r3
 800ee76:	691a      	ldr	r2, [r3, #16]
 800ee78:	310c      	adds	r1, #12
 800ee7a:	3202      	adds	r2, #2
 800ee7c:	0092      	lsls	r2, r2, #2
 800ee7e:	f001 f8ed 	bl	801005c <memcpy>
 800ee82:	ab20      	add	r3, sp, #128	@ 0x80
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	0032      	movs	r2, r6
 800ee8c:	003b      	movs	r3, r7
 800ee8e:	9805      	ldr	r0, [sp, #20]
 800ee90:	9610      	str	r6, [sp, #64]	@ 0x40
 800ee92:	9711      	str	r7, [sp, #68]	@ 0x44
 800ee94:	f002 ffce 	bl	8011e34 <__d2b>
 800ee98:	901e      	str	r0, [sp, #120]	@ 0x78
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d100      	bne.n	800eea0 <_strtod_l+0x6f0>
 800ee9e:	e6cb      	b.n	800ec38 <_strtod_l+0x488>
 800eea0:	2101      	movs	r1, #1
 800eea2:	9805      	ldr	r0, [sp, #20]
 800eea4:	f002 fd1a 	bl	80118dc <__i2b>
 800eea8:	9007      	str	r0, [sp, #28]
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d10e      	bne.n	800eecc <_strtod_l+0x71c>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	9307      	str	r3, [sp, #28]
 800eeb2:	e6c1      	b.n	800ec38 <_strtod_l+0x488>
 800eeb4:	234b      	movs	r3, #75	@ 0x4b
 800eeb6:	1a9a      	subs	r2, r3, r2
 800eeb8:	3b4c      	subs	r3, #76	@ 0x4c
 800eeba:	4093      	lsls	r3, r2
 800eebc:	4019      	ands	r1, r3
 800eebe:	000f      	movs	r7, r1
 800eec0:	e7a7      	b.n	800ee12 <_strtod_l+0x662>
 800eec2:	2201      	movs	r2, #1
 800eec4:	4252      	negs	r2, r2
 800eec6:	409a      	lsls	r2, r3
 800eec8:	4016      	ands	r6, r2
 800eeca:	e7a2      	b.n	800ee12 <_strtod_l+0x662>
 800eecc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800eece:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eed0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800eed2:	1ad4      	subs	r4, r2, r3
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	db01      	blt.n	800eedc <_strtod_l+0x72c>
 800eed8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800eeda:	195d      	adds	r5, r3, r5
 800eedc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eede:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eee0:	1a5b      	subs	r3, r3, r1
 800eee2:	2136      	movs	r1, #54	@ 0x36
 800eee4:	189b      	adds	r3, r3, r2
 800eee6:	1a8a      	subs	r2, r1, r2
 800eee8:	497a      	ldr	r1, [pc, #488]	@ (800f0d4 <_strtod_l+0x924>)
 800eeea:	2001      	movs	r0, #1
 800eeec:	468c      	mov	ip, r1
 800eeee:	2100      	movs	r1, #0
 800eef0:	3b01      	subs	r3, #1
 800eef2:	9115      	str	r1, [sp, #84]	@ 0x54
 800eef4:	9016      	str	r0, [sp, #88]	@ 0x58
 800eef6:	4563      	cmp	r3, ip
 800eef8:	da06      	bge.n	800ef08 <_strtod_l+0x758>
 800eefa:	4661      	mov	r1, ip
 800eefc:	1ac9      	subs	r1, r1, r3
 800eefe:	1a52      	subs	r2, r2, r1
 800ef00:	291f      	cmp	r1, #31
 800ef02:	dc3f      	bgt.n	800ef84 <_strtod_l+0x7d4>
 800ef04:	4088      	lsls	r0, r1
 800ef06:	9016      	str	r0, [sp, #88]	@ 0x58
 800ef08:	18ab      	adds	r3, r5, r2
 800ef0a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ef0c:	18a4      	adds	r4, r4, r2
 800ef0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef12:	191c      	adds	r4, r3, r4
 800ef14:	002b      	movs	r3, r5
 800ef16:	4295      	cmp	r5, r2
 800ef18:	dd00      	ble.n	800ef1c <_strtod_l+0x76c>
 800ef1a:	0013      	movs	r3, r2
 800ef1c:	42a3      	cmp	r3, r4
 800ef1e:	dd00      	ble.n	800ef22 <_strtod_l+0x772>
 800ef20:	0023      	movs	r3, r4
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	dd04      	ble.n	800ef30 <_strtod_l+0x780>
 800ef26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef28:	1ae4      	subs	r4, r4, r3
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef2e:	1aed      	subs	r5, r5, r3
 800ef30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	dd16      	ble.n	800ef64 <_strtod_l+0x7b4>
 800ef36:	001a      	movs	r2, r3
 800ef38:	9907      	ldr	r1, [sp, #28]
 800ef3a:	9805      	ldr	r0, [sp, #20]
 800ef3c:	f002 fd90 	bl	8011a60 <__pow5mult>
 800ef40:	9007      	str	r0, [sp, #28]
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d0b3      	beq.n	800eeae <_strtod_l+0x6fe>
 800ef46:	0001      	movs	r1, r0
 800ef48:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ef4a:	9805      	ldr	r0, [sp, #20]
 800ef4c:	f002 fcde 	bl	801190c <__multiply>
 800ef50:	9013      	str	r0, [sp, #76]	@ 0x4c
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d100      	bne.n	800ef58 <_strtod_l+0x7a8>
 800ef56:	e66f      	b.n	800ec38 <_strtod_l+0x488>
 800ef58:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ef5a:	9805      	ldr	r0, [sp, #20]
 800ef5c:	f002 fbba 	bl	80116d4 <_Bfree>
 800ef60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ef62:	931e      	str	r3, [sp, #120]	@ 0x78
 800ef64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	dc12      	bgt.n	800ef90 <_strtod_l+0x7e0>
 800ef6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dd18      	ble.n	800efa2 <_strtod_l+0x7f2>
 800ef70:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef72:	9908      	ldr	r1, [sp, #32]
 800ef74:	9805      	ldr	r0, [sp, #20]
 800ef76:	f002 fd73 	bl	8011a60 <__pow5mult>
 800ef7a:	9008      	str	r0, [sp, #32]
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d110      	bne.n	800efa2 <_strtod_l+0x7f2>
 800ef80:	2300      	movs	r3, #0
 800ef82:	e658      	b.n	800ec36 <_strtod_l+0x486>
 800ef84:	4954      	ldr	r1, [pc, #336]	@ (800f0d8 <_strtod_l+0x928>)
 800ef86:	1acb      	subs	r3, r1, r3
 800ef88:	0001      	movs	r1, r0
 800ef8a:	4099      	lsls	r1, r3
 800ef8c:	9115      	str	r1, [sp, #84]	@ 0x54
 800ef8e:	e7ba      	b.n	800ef06 <_strtod_l+0x756>
 800ef90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef92:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ef94:	9805      	ldr	r0, [sp, #20]
 800ef96:	f002 fdbf 	bl	8011b18 <__lshift>
 800ef9a:	901e      	str	r0, [sp, #120]	@ 0x78
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d1e4      	bne.n	800ef6a <_strtod_l+0x7ba>
 800efa0:	e64a      	b.n	800ec38 <_strtod_l+0x488>
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	dd07      	ble.n	800efb6 <_strtod_l+0x806>
 800efa6:	0022      	movs	r2, r4
 800efa8:	9908      	ldr	r1, [sp, #32]
 800efaa:	9805      	ldr	r0, [sp, #20]
 800efac:	f002 fdb4 	bl	8011b18 <__lshift>
 800efb0:	9008      	str	r0, [sp, #32]
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d0e4      	beq.n	800ef80 <_strtod_l+0x7d0>
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	dd08      	ble.n	800efcc <_strtod_l+0x81c>
 800efba:	002a      	movs	r2, r5
 800efbc:	9907      	ldr	r1, [sp, #28]
 800efbe:	9805      	ldr	r0, [sp, #20]
 800efc0:	f002 fdaa 	bl	8011b18 <__lshift>
 800efc4:	9007      	str	r0, [sp, #28]
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d100      	bne.n	800efcc <_strtod_l+0x81c>
 800efca:	e635      	b.n	800ec38 <_strtod_l+0x488>
 800efcc:	9a08      	ldr	r2, [sp, #32]
 800efce:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800efd0:	9805      	ldr	r0, [sp, #20]
 800efd2:	f002 fe29 	bl	8011c28 <__mdiff>
 800efd6:	9006      	str	r0, [sp, #24]
 800efd8:	2800      	cmp	r0, #0
 800efda:	d100      	bne.n	800efde <_strtod_l+0x82e>
 800efdc:	e62c      	b.n	800ec38 <_strtod_l+0x488>
 800efde:	68c3      	ldr	r3, [r0, #12]
 800efe0:	9907      	ldr	r1, [sp, #28]
 800efe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efe4:	2300      	movs	r3, #0
 800efe6:	60c3      	str	r3, [r0, #12]
 800efe8:	f002 fe02 	bl	8011bf0 <__mcmp>
 800efec:	2800      	cmp	r0, #0
 800efee:	da3b      	bge.n	800f068 <_strtod_l+0x8b8>
 800eff0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eff2:	4333      	orrs	r3, r6
 800eff4:	d167      	bne.n	800f0c6 <_strtod_l+0x916>
 800eff6:	033b      	lsls	r3, r7, #12
 800eff8:	d165      	bne.n	800f0c6 <_strtod_l+0x916>
 800effa:	22d6      	movs	r2, #214	@ 0xd6
 800effc:	4b37      	ldr	r3, [pc, #220]	@ (800f0dc <_strtod_l+0x92c>)
 800effe:	04d2      	lsls	r2, r2, #19
 800f000:	403b      	ands	r3, r7
 800f002:	4293      	cmp	r3, r2
 800f004:	d95f      	bls.n	800f0c6 <_strtod_l+0x916>
 800f006:	9b06      	ldr	r3, [sp, #24]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d103      	bne.n	800f016 <_strtod_l+0x866>
 800f00e:	9b06      	ldr	r3, [sp, #24]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	2b01      	cmp	r3, #1
 800f014:	dd57      	ble.n	800f0c6 <_strtod_l+0x916>
 800f016:	9906      	ldr	r1, [sp, #24]
 800f018:	2201      	movs	r2, #1
 800f01a:	9805      	ldr	r0, [sp, #20]
 800f01c:	f002 fd7c 	bl	8011b18 <__lshift>
 800f020:	9907      	ldr	r1, [sp, #28]
 800f022:	9006      	str	r0, [sp, #24]
 800f024:	f002 fde4 	bl	8011bf0 <__mcmp>
 800f028:	2800      	cmp	r0, #0
 800f02a:	dd4c      	ble.n	800f0c6 <_strtod_l+0x916>
 800f02c:	4b2b      	ldr	r3, [pc, #172]	@ (800f0dc <_strtod_l+0x92c>)
 800f02e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f030:	403b      	ands	r3, r7
 800f032:	2a00      	cmp	r2, #0
 800f034:	d074      	beq.n	800f120 <_strtod_l+0x970>
 800f036:	22d6      	movs	r2, #214	@ 0xd6
 800f038:	04d2      	lsls	r2, r2, #19
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d870      	bhi.n	800f120 <_strtod_l+0x970>
 800f03e:	22dc      	movs	r2, #220	@ 0xdc
 800f040:	0492      	lsls	r2, r2, #18
 800f042:	4293      	cmp	r3, r2
 800f044:	d800      	bhi.n	800f048 <_strtod_l+0x898>
 800f046:	e693      	b.n	800ed70 <_strtod_l+0x5c0>
 800f048:	0030      	movs	r0, r6
 800f04a:	0039      	movs	r1, r7
 800f04c:	4b24      	ldr	r3, [pc, #144]	@ (800f0e0 <_strtod_l+0x930>)
 800f04e:	2200      	movs	r2, #0
 800f050:	f7f2 fa94 	bl	800157c <__aeabi_dmul>
 800f054:	4b21      	ldr	r3, [pc, #132]	@ (800f0dc <_strtod_l+0x92c>)
 800f056:	0006      	movs	r6, r0
 800f058:	000f      	movs	r7, r1
 800f05a:	420b      	tst	r3, r1
 800f05c:	d000      	beq.n	800f060 <_strtod_l+0x8b0>
 800f05e:	e5f4      	b.n	800ec4a <_strtod_l+0x49a>
 800f060:	2322      	movs	r3, #34	@ 0x22
 800f062:	9a05      	ldr	r2, [sp, #20]
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	e5f0      	b.n	800ec4a <_strtod_l+0x49a>
 800f068:	970e      	str	r7, [sp, #56]	@ 0x38
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d175      	bne.n	800f15a <_strtod_l+0x9aa>
 800f06e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f070:	033b      	lsls	r3, r7, #12
 800f072:	0b1b      	lsrs	r3, r3, #12
 800f074:	2a00      	cmp	r2, #0
 800f076:	d039      	beq.n	800f0ec <_strtod_l+0x93c>
 800f078:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e4 <_strtod_l+0x934>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d138      	bne.n	800f0f0 <_strtod_l+0x940>
 800f07e:	2101      	movs	r1, #1
 800f080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f082:	4249      	negs	r1, r1
 800f084:	0032      	movs	r2, r6
 800f086:	0008      	movs	r0, r1
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00b      	beq.n	800f0a4 <_strtod_l+0x8f4>
 800f08c:	24d4      	movs	r4, #212	@ 0xd4
 800f08e:	4b13      	ldr	r3, [pc, #76]	@ (800f0dc <_strtod_l+0x92c>)
 800f090:	0008      	movs	r0, r1
 800f092:	403b      	ands	r3, r7
 800f094:	04e4      	lsls	r4, r4, #19
 800f096:	42a3      	cmp	r3, r4
 800f098:	d804      	bhi.n	800f0a4 <_strtod_l+0x8f4>
 800f09a:	306c      	adds	r0, #108	@ 0x6c
 800f09c:	0d1b      	lsrs	r3, r3, #20
 800f09e:	1ac3      	subs	r3, r0, r3
 800f0a0:	4099      	lsls	r1, r3
 800f0a2:	0008      	movs	r0, r1
 800f0a4:	4282      	cmp	r2, r0
 800f0a6:	d123      	bne.n	800f0f0 <_strtod_l+0x940>
 800f0a8:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e8 <_strtod_l+0x938>)
 800f0aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f0ac:	4299      	cmp	r1, r3
 800f0ae:	d102      	bne.n	800f0b6 <_strtod_l+0x906>
 800f0b0:	3201      	adds	r2, #1
 800f0b2:	d100      	bne.n	800f0b6 <_strtod_l+0x906>
 800f0b4:	e5c0      	b.n	800ec38 <_strtod_l+0x488>
 800f0b6:	4b09      	ldr	r3, [pc, #36]	@ (800f0dc <_strtod_l+0x92c>)
 800f0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ba:	2600      	movs	r6, #0
 800f0bc:	401a      	ands	r2, r3
 800f0be:	0013      	movs	r3, r2
 800f0c0:	2280      	movs	r2, #128	@ 0x80
 800f0c2:	0352      	lsls	r2, r2, #13
 800f0c4:	189f      	adds	r7, r3, r2
 800f0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1bd      	bne.n	800f048 <_strtod_l+0x898>
 800f0cc:	e5bd      	b.n	800ec4a <_strtod_l+0x49a>
 800f0ce:	46c0      	nop			@ (mov r8, r8)
 800f0d0:	08012f80 	.word	0x08012f80
 800f0d4:	fffffc02 	.word	0xfffffc02
 800f0d8:	fffffbe2 	.word	0xfffffbe2
 800f0dc:	7ff00000 	.word	0x7ff00000
 800f0e0:	39500000 	.word	0x39500000
 800f0e4:	000fffff 	.word	0x000fffff
 800f0e8:	7fefffff 	.word	0x7fefffff
 800f0ec:	4333      	orrs	r3, r6
 800f0ee:	d09d      	beq.n	800f02c <_strtod_l+0x87c>
 800f0f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01c      	beq.n	800f130 <_strtod_l+0x980>
 800f0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f0fa:	4213      	tst	r3, r2
 800f0fc:	d0e3      	beq.n	800f0c6 <_strtod_l+0x916>
 800f0fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f100:	0030      	movs	r0, r6
 800f102:	0039      	movs	r1, r7
 800f104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f106:	2b00      	cmp	r3, #0
 800f108:	d016      	beq.n	800f138 <_strtod_l+0x988>
 800f10a:	f7ff fb39 	bl	800e780 <sulp>
 800f10e:	0002      	movs	r2, r0
 800f110:	000b      	movs	r3, r1
 800f112:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f114:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f116:	f7f1 fa31 	bl	800057c <__aeabi_dadd>
 800f11a:	0006      	movs	r6, r0
 800f11c:	000f      	movs	r7, r1
 800f11e:	e7d2      	b.n	800f0c6 <_strtod_l+0x916>
 800f120:	2601      	movs	r6, #1
 800f122:	4a92      	ldr	r2, [pc, #584]	@ (800f36c <_strtod_l+0xbbc>)
 800f124:	4276      	negs	r6, r6
 800f126:	189b      	adds	r3, r3, r2
 800f128:	4a91      	ldr	r2, [pc, #580]	@ (800f370 <_strtod_l+0xbc0>)
 800f12a:	431a      	orrs	r2, r3
 800f12c:	0017      	movs	r7, r2
 800f12e:	e7ca      	b.n	800f0c6 <_strtod_l+0x916>
 800f130:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f132:	4233      	tst	r3, r6
 800f134:	d0c7      	beq.n	800f0c6 <_strtod_l+0x916>
 800f136:	e7e2      	b.n	800f0fe <_strtod_l+0x94e>
 800f138:	f7ff fb22 	bl	800e780 <sulp>
 800f13c:	0002      	movs	r2, r0
 800f13e:	000b      	movs	r3, r1
 800f140:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f142:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f144:	f7f2 fd00 	bl	8001b48 <__aeabi_dsub>
 800f148:	2200      	movs	r2, #0
 800f14a:	2300      	movs	r3, #0
 800f14c:	0006      	movs	r6, r0
 800f14e:	000f      	movs	r7, r1
 800f150:	f7f1 f978 	bl	8000444 <__aeabi_dcmpeq>
 800f154:	2800      	cmp	r0, #0
 800f156:	d0b6      	beq.n	800f0c6 <_strtod_l+0x916>
 800f158:	e60a      	b.n	800ed70 <_strtod_l+0x5c0>
 800f15a:	9907      	ldr	r1, [sp, #28]
 800f15c:	9806      	ldr	r0, [sp, #24]
 800f15e:	f002 fec9 	bl	8011ef4 <__ratio>
 800f162:	2380      	movs	r3, #128	@ 0x80
 800f164:	2200      	movs	r2, #0
 800f166:	05db      	lsls	r3, r3, #23
 800f168:	0004      	movs	r4, r0
 800f16a:	000d      	movs	r5, r1
 800f16c:	f7f1 f97a 	bl	8000464 <__aeabi_dcmple>
 800f170:	2800      	cmp	r0, #0
 800f172:	d06c      	beq.n	800f24e <_strtod_l+0xa9e>
 800f174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f176:	2b00      	cmp	r3, #0
 800f178:	d177      	bne.n	800f26a <_strtod_l+0xaba>
 800f17a:	2e00      	cmp	r6, #0
 800f17c:	d157      	bne.n	800f22e <_strtod_l+0xa7e>
 800f17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f180:	031b      	lsls	r3, r3, #12
 800f182:	d15a      	bne.n	800f23a <_strtod_l+0xa8a>
 800f184:	2200      	movs	r2, #0
 800f186:	0020      	movs	r0, r4
 800f188:	0029      	movs	r1, r5
 800f18a:	4b7a      	ldr	r3, [pc, #488]	@ (800f374 <_strtod_l+0xbc4>)
 800f18c:	f7f1 f960 	bl	8000450 <__aeabi_dcmplt>
 800f190:	2800      	cmp	r0, #0
 800f192:	d159      	bne.n	800f248 <_strtod_l+0xa98>
 800f194:	0020      	movs	r0, r4
 800f196:	0029      	movs	r1, r5
 800f198:	2200      	movs	r2, #0
 800f19a:	4b77      	ldr	r3, [pc, #476]	@ (800f378 <_strtod_l+0xbc8>)
 800f19c:	f7f2 f9ee 	bl	800157c <__aeabi_dmul>
 800f1a0:	0004      	movs	r4, r0
 800f1a2:	000d      	movs	r5, r1
 800f1a4:	2380      	movs	r3, #128	@ 0x80
 800f1a6:	061b      	lsls	r3, r3, #24
 800f1a8:	18eb      	adds	r3, r5, r3
 800f1aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800f1ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1b2:	9216      	str	r2, [sp, #88]	@ 0x58
 800f1b4:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f1b6:	4a71      	ldr	r2, [pc, #452]	@ (800f37c <_strtod_l+0xbcc>)
 800f1b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ba:	4013      	ands	r3, r2
 800f1bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f1be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f1c0:	4b6f      	ldr	r3, [pc, #444]	@ (800f380 <_strtod_l+0xbd0>)
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d000      	beq.n	800f1c8 <_strtod_l+0xa18>
 800f1c6:	e087      	b.n	800f2d8 <_strtod_l+0xb28>
 800f1c8:	4a6e      	ldr	r2, [pc, #440]	@ (800f384 <_strtod_l+0xbd4>)
 800f1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1cc:	4694      	mov	ip, r2
 800f1ce:	4463      	add	r3, ip
 800f1d0:	001f      	movs	r7, r3
 800f1d2:	0030      	movs	r0, r6
 800f1d4:	0019      	movs	r1, r3
 800f1d6:	f002 fdc1 	bl	8011d5c <__ulp>
 800f1da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1de:	f7f2 f9cd 	bl	800157c <__aeabi_dmul>
 800f1e2:	0032      	movs	r2, r6
 800f1e4:	003b      	movs	r3, r7
 800f1e6:	f7f1 f9c9 	bl	800057c <__aeabi_dadd>
 800f1ea:	4a64      	ldr	r2, [pc, #400]	@ (800f37c <_strtod_l+0xbcc>)
 800f1ec:	4b66      	ldr	r3, [pc, #408]	@ (800f388 <_strtod_l+0xbd8>)
 800f1ee:	0006      	movs	r6, r0
 800f1f0:	400a      	ands	r2, r1
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d940      	bls.n	800f278 <_strtod_l+0xac8>
 800f1f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1f8:	4a64      	ldr	r2, [pc, #400]	@ (800f38c <_strtod_l+0xbdc>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d103      	bne.n	800f206 <_strtod_l+0xa56>
 800f1fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f200:	3301      	adds	r3, #1
 800f202:	d100      	bne.n	800f206 <_strtod_l+0xa56>
 800f204:	e518      	b.n	800ec38 <_strtod_l+0x488>
 800f206:	2601      	movs	r6, #1
 800f208:	4f60      	ldr	r7, [pc, #384]	@ (800f38c <_strtod_l+0xbdc>)
 800f20a:	4276      	negs	r6, r6
 800f20c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f20e:	9805      	ldr	r0, [sp, #20]
 800f210:	f002 fa60 	bl	80116d4 <_Bfree>
 800f214:	9908      	ldr	r1, [sp, #32]
 800f216:	9805      	ldr	r0, [sp, #20]
 800f218:	f002 fa5c 	bl	80116d4 <_Bfree>
 800f21c:	9907      	ldr	r1, [sp, #28]
 800f21e:	9805      	ldr	r0, [sp, #20]
 800f220:	f002 fa58 	bl	80116d4 <_Bfree>
 800f224:	9906      	ldr	r1, [sp, #24]
 800f226:	9805      	ldr	r0, [sp, #20]
 800f228:	f002 fa54 	bl	80116d4 <_Bfree>
 800f22c:	e617      	b.n	800ee5e <_strtod_l+0x6ae>
 800f22e:	2e01      	cmp	r6, #1
 800f230:	d103      	bne.n	800f23a <_strtod_l+0xa8a>
 800f232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f234:	2b00      	cmp	r3, #0
 800f236:	d100      	bne.n	800f23a <_strtod_l+0xa8a>
 800f238:	e59a      	b.n	800ed70 <_strtod_l+0x5c0>
 800f23a:	2300      	movs	r3, #0
 800f23c:	4c54      	ldr	r4, [pc, #336]	@ (800f390 <_strtod_l+0xbe0>)
 800f23e:	4d4d      	ldr	r5, [pc, #308]	@ (800f374 <_strtod_l+0xbc4>)
 800f240:	930a      	str	r3, [sp, #40]	@ 0x28
 800f242:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f244:	2400      	movs	r4, #0
 800f246:	e7b2      	b.n	800f1ae <_strtod_l+0x9fe>
 800f248:	2400      	movs	r4, #0
 800f24a:	4d4b      	ldr	r5, [pc, #300]	@ (800f378 <_strtod_l+0xbc8>)
 800f24c:	e7aa      	b.n	800f1a4 <_strtod_l+0x9f4>
 800f24e:	0020      	movs	r0, r4
 800f250:	0029      	movs	r1, r5
 800f252:	4b49      	ldr	r3, [pc, #292]	@ (800f378 <_strtod_l+0xbc8>)
 800f254:	2200      	movs	r2, #0
 800f256:	f7f2 f991 	bl	800157c <__aeabi_dmul>
 800f25a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f25c:	0004      	movs	r4, r0
 800f25e:	000d      	movs	r5, r1
 800f260:	2b00      	cmp	r3, #0
 800f262:	d09f      	beq.n	800f1a4 <_strtod_l+0x9f4>
 800f264:	940a      	str	r4, [sp, #40]	@ 0x28
 800f266:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f268:	e7a1      	b.n	800f1ae <_strtod_l+0x9fe>
 800f26a:	2300      	movs	r3, #0
 800f26c:	4c41      	ldr	r4, [pc, #260]	@ (800f374 <_strtod_l+0xbc4>)
 800f26e:	0025      	movs	r5, r4
 800f270:	930a      	str	r3, [sp, #40]	@ 0x28
 800f272:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f274:	001c      	movs	r4, r3
 800f276:	e79a      	b.n	800f1ae <_strtod_l+0x9fe>
 800f278:	23d4      	movs	r3, #212	@ 0xd4
 800f27a:	049b      	lsls	r3, r3, #18
 800f27c:	18cf      	adds	r7, r1, r3
 800f27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f280:	9710      	str	r7, [sp, #64]	@ 0x40
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1c2      	bne.n	800f20c <_strtod_l+0xa5c>
 800f286:	4b3d      	ldr	r3, [pc, #244]	@ (800f37c <_strtod_l+0xbcc>)
 800f288:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f28a:	403b      	ands	r3, r7
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d1bd      	bne.n	800f20c <_strtod_l+0xa5c>
 800f290:	0020      	movs	r0, r4
 800f292:	0029      	movs	r1, r5
 800f294:	f7f1 f922 	bl	80004dc <__aeabi_d2lz>
 800f298:	f7f1 f95a 	bl	8000550 <__aeabi_l2d>
 800f29c:	0002      	movs	r2, r0
 800f29e:	000b      	movs	r3, r1
 800f2a0:	0020      	movs	r0, r4
 800f2a2:	0029      	movs	r1, r5
 800f2a4:	f7f2 fc50 	bl	8001b48 <__aeabi_dsub>
 800f2a8:	033c      	lsls	r4, r7, #12
 800f2aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f2ac:	0b24      	lsrs	r4, r4, #12
 800f2ae:	4334      	orrs	r4, r6
 800f2b0:	900e      	str	r0, [sp, #56]	@ 0x38
 800f2b2:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f2b4:	4a37      	ldr	r2, [pc, #220]	@ (800f394 <_strtod_l+0xbe4>)
 800f2b6:	431c      	orrs	r4, r3
 800f2b8:	d052      	beq.n	800f360 <_strtod_l+0xbb0>
 800f2ba:	4b37      	ldr	r3, [pc, #220]	@ (800f398 <_strtod_l+0xbe8>)
 800f2bc:	f7f1 f8c8 	bl	8000450 <__aeabi_dcmplt>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d000      	beq.n	800f2c6 <_strtod_l+0xb16>
 800f2c4:	e4c1      	b.n	800ec4a <_strtod_l+0x49a>
 800f2c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f2c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f2ca:	4a34      	ldr	r2, [pc, #208]	@ (800f39c <_strtod_l+0xbec>)
 800f2cc:	4b2a      	ldr	r3, [pc, #168]	@ (800f378 <_strtod_l+0xbc8>)
 800f2ce:	f7f1 f8d3 	bl	8000478 <__aeabi_dcmpgt>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d09a      	beq.n	800f20c <_strtod_l+0xa5c>
 800f2d6:	e4b8      	b.n	800ec4a <_strtod_l+0x49a>
 800f2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d02a      	beq.n	800f334 <_strtod_l+0xb84>
 800f2de:	23d4      	movs	r3, #212	@ 0xd4
 800f2e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f2e2:	04db      	lsls	r3, r3, #19
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d825      	bhi.n	800f334 <_strtod_l+0xb84>
 800f2e8:	0020      	movs	r0, r4
 800f2ea:	0029      	movs	r1, r5
 800f2ec:	4a2c      	ldr	r2, [pc, #176]	@ (800f3a0 <_strtod_l+0xbf0>)
 800f2ee:	4b2d      	ldr	r3, [pc, #180]	@ (800f3a4 <_strtod_l+0xbf4>)
 800f2f0:	f7f1 f8b8 	bl	8000464 <__aeabi_dcmple>
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d016      	beq.n	800f326 <_strtod_l+0xb76>
 800f2f8:	0020      	movs	r0, r4
 800f2fa:	0029      	movs	r1, r5
 800f2fc:	f7f1 f8d0 	bl	80004a0 <__aeabi_d2uiz>
 800f300:	2800      	cmp	r0, #0
 800f302:	d100      	bne.n	800f306 <_strtod_l+0xb56>
 800f304:	3001      	adds	r0, #1
 800f306:	f7f3 f8b5 	bl	8002474 <__aeabi_ui2d>
 800f30a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f30c:	0004      	movs	r4, r0
 800f30e:	000d      	movs	r5, r1
 800f310:	2b00      	cmp	r3, #0
 800f312:	d122      	bne.n	800f35a <_strtod_l+0xbaa>
 800f314:	2380      	movs	r3, #128	@ 0x80
 800f316:	061b      	lsls	r3, r3, #24
 800f318:	18cb      	adds	r3, r1, r3
 800f31a:	9018      	str	r0, [sp, #96]	@ 0x60
 800f31c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f31e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f322:	9216      	str	r2, [sp, #88]	@ 0x58
 800f324:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f326:	22d6      	movs	r2, #214	@ 0xd6
 800f328:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f32a:	04d2      	lsls	r2, r2, #19
 800f32c:	189b      	adds	r3, r3, r2
 800f32e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f330:	1a9b      	subs	r3, r3, r2
 800f332:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f334:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f336:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f338:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800f33a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800f33c:	f002 fd0e 	bl	8011d5c <__ulp>
 800f340:	0002      	movs	r2, r0
 800f342:	000b      	movs	r3, r1
 800f344:	0030      	movs	r0, r6
 800f346:	0039      	movs	r1, r7
 800f348:	f7f2 f918 	bl	800157c <__aeabi_dmul>
 800f34c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f34e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f350:	f7f1 f914 	bl	800057c <__aeabi_dadd>
 800f354:	0006      	movs	r6, r0
 800f356:	000f      	movs	r7, r1
 800f358:	e791      	b.n	800f27e <_strtod_l+0xace>
 800f35a:	9418      	str	r4, [sp, #96]	@ 0x60
 800f35c:	9519      	str	r5, [sp, #100]	@ 0x64
 800f35e:	e7de      	b.n	800f31e <_strtod_l+0xb6e>
 800f360:	4b11      	ldr	r3, [pc, #68]	@ (800f3a8 <_strtod_l+0xbf8>)
 800f362:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f364:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f366:	f7f1 f873 	bl	8000450 <__aeabi_dcmplt>
 800f36a:	e7b2      	b.n	800f2d2 <_strtod_l+0xb22>
 800f36c:	fff00000 	.word	0xfff00000
 800f370:	000fffff 	.word	0x000fffff
 800f374:	3ff00000 	.word	0x3ff00000
 800f378:	3fe00000 	.word	0x3fe00000
 800f37c:	7ff00000 	.word	0x7ff00000
 800f380:	7fe00000 	.word	0x7fe00000
 800f384:	fcb00000 	.word	0xfcb00000
 800f388:	7c9fffff 	.word	0x7c9fffff
 800f38c:	7fefffff 	.word	0x7fefffff
 800f390:	bff00000 	.word	0xbff00000
 800f394:	94a03595 	.word	0x94a03595
 800f398:	3fdfffff 	.word	0x3fdfffff
 800f39c:	35afe535 	.word	0x35afe535
 800f3a0:	ffc00000 	.word	0xffc00000
 800f3a4:	41dfffff 	.word	0x41dfffff
 800f3a8:	3fcfffff 	.word	0x3fcfffff

0800f3ac <strtod>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	4c04      	ldr	r4, [pc, #16]	@ (800f3c0 <strtod+0x14>)
 800f3b0:	000a      	movs	r2, r1
 800f3b2:	0001      	movs	r1, r0
 800f3b4:	4b03      	ldr	r3, [pc, #12]	@ (800f3c4 <strtod+0x18>)
 800f3b6:	6820      	ldr	r0, [r4, #0]
 800f3b8:	f7ff f9fa 	bl	800e7b0 <_strtod_l>
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	46c0      	nop			@ (mov r8, r8)
 800f3c0:	20000308 	.word	0x20000308
 800f3c4:	2000019c 	.word	0x2000019c

0800f3c8 <__cvt>:
 800f3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ca:	001f      	movs	r7, r3
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	0016      	movs	r6, r2
 800f3d0:	b08b      	sub	sp, #44	@ 0x2c
 800f3d2:	429f      	cmp	r7, r3
 800f3d4:	da04      	bge.n	800f3e0 <__cvt+0x18>
 800f3d6:	2180      	movs	r1, #128	@ 0x80
 800f3d8:	0609      	lsls	r1, r1, #24
 800f3da:	187b      	adds	r3, r7, r1
 800f3dc:	001f      	movs	r7, r3
 800f3de:	232d      	movs	r3, #45	@ 0x2d
 800f3e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f3e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f3e4:	7013      	strb	r3, [r2, #0]
 800f3e6:	2320      	movs	r3, #32
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	439d      	bics	r5, r3
 800f3ec:	2d46      	cmp	r5, #70	@ 0x46
 800f3ee:	d007      	beq.n	800f400 <__cvt+0x38>
 800f3f0:	002b      	movs	r3, r5
 800f3f2:	3b45      	subs	r3, #69	@ 0x45
 800f3f4:	4259      	negs	r1, r3
 800f3f6:	414b      	adcs	r3, r1
 800f3f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f3fa:	3a01      	subs	r2, #1
 800f3fc:	18cb      	adds	r3, r1, r3
 800f3fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800f400:	ab09      	add	r3, sp, #36	@ 0x24
 800f402:	9304      	str	r3, [sp, #16]
 800f404:	ab08      	add	r3, sp, #32
 800f406:	9303      	str	r3, [sp, #12]
 800f408:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f40a:	9200      	str	r2, [sp, #0]
 800f40c:	9302      	str	r3, [sp, #8]
 800f40e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f410:	0032      	movs	r2, r6
 800f412:	9301      	str	r3, [sp, #4]
 800f414:	003b      	movs	r3, r7
 800f416:	f000 feb7 	bl	8010188 <_dtoa_r>
 800f41a:	0004      	movs	r4, r0
 800f41c:	2d47      	cmp	r5, #71	@ 0x47
 800f41e:	d11b      	bne.n	800f458 <__cvt+0x90>
 800f420:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f422:	07db      	lsls	r3, r3, #31
 800f424:	d511      	bpl.n	800f44a <__cvt+0x82>
 800f426:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f428:	18c3      	adds	r3, r0, r3
 800f42a:	9307      	str	r3, [sp, #28]
 800f42c:	2200      	movs	r2, #0
 800f42e:	2300      	movs	r3, #0
 800f430:	0030      	movs	r0, r6
 800f432:	0039      	movs	r1, r7
 800f434:	f7f1 f806 	bl	8000444 <__aeabi_dcmpeq>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d001      	beq.n	800f440 <__cvt+0x78>
 800f43c:	9b07      	ldr	r3, [sp, #28]
 800f43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f440:	2230      	movs	r2, #48	@ 0x30
 800f442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f444:	9907      	ldr	r1, [sp, #28]
 800f446:	428b      	cmp	r3, r1
 800f448:	d320      	bcc.n	800f48c <__cvt+0xc4>
 800f44a:	0020      	movs	r0, r4
 800f44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f44e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f450:	1b1b      	subs	r3, r3, r4
 800f452:	6013      	str	r3, [r2, #0]
 800f454:	b00b      	add	sp, #44	@ 0x2c
 800f456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f45a:	18c3      	adds	r3, r0, r3
 800f45c:	9307      	str	r3, [sp, #28]
 800f45e:	2d46      	cmp	r5, #70	@ 0x46
 800f460:	d1e4      	bne.n	800f42c <__cvt+0x64>
 800f462:	7803      	ldrb	r3, [r0, #0]
 800f464:	2b30      	cmp	r3, #48	@ 0x30
 800f466:	d10c      	bne.n	800f482 <__cvt+0xba>
 800f468:	2200      	movs	r2, #0
 800f46a:	2300      	movs	r3, #0
 800f46c:	0030      	movs	r0, r6
 800f46e:	0039      	movs	r1, r7
 800f470:	f7f0 ffe8 	bl	8000444 <__aeabi_dcmpeq>
 800f474:	2800      	cmp	r0, #0
 800f476:	d104      	bne.n	800f482 <__cvt+0xba>
 800f478:	2301      	movs	r3, #1
 800f47a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f47c:	1a9b      	subs	r3, r3, r2
 800f47e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f484:	9a07      	ldr	r2, [sp, #28]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	18d3      	adds	r3, r2, r3
 800f48a:	e7ce      	b.n	800f42a <__cvt+0x62>
 800f48c:	1c59      	adds	r1, r3, #1
 800f48e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	e7d6      	b.n	800f442 <__cvt+0x7a>

0800f494 <__exponent>:
 800f494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f496:	232b      	movs	r3, #43	@ 0x2b
 800f498:	b085      	sub	sp, #20
 800f49a:	0005      	movs	r5, r0
 800f49c:	1e0c      	subs	r4, r1, #0
 800f49e:	7002      	strb	r2, [r0, #0]
 800f4a0:	da01      	bge.n	800f4a6 <__exponent+0x12>
 800f4a2:	424c      	negs	r4, r1
 800f4a4:	3302      	adds	r3, #2
 800f4a6:	706b      	strb	r3, [r5, #1]
 800f4a8:	2c09      	cmp	r4, #9
 800f4aa:	dd2c      	ble.n	800f506 <__exponent+0x72>
 800f4ac:	ab02      	add	r3, sp, #8
 800f4ae:	1dde      	adds	r6, r3, #7
 800f4b0:	0020      	movs	r0, r4
 800f4b2:	210a      	movs	r1, #10
 800f4b4:	f7f0 ffb0 	bl	8000418 <__aeabi_idivmod>
 800f4b8:	0037      	movs	r7, r6
 800f4ba:	3130      	adds	r1, #48	@ 0x30
 800f4bc:	3e01      	subs	r6, #1
 800f4be:	0020      	movs	r0, r4
 800f4c0:	7031      	strb	r1, [r6, #0]
 800f4c2:	210a      	movs	r1, #10
 800f4c4:	9401      	str	r4, [sp, #4]
 800f4c6:	f7f0 fec1 	bl	800024c <__divsi3>
 800f4ca:	9b01      	ldr	r3, [sp, #4]
 800f4cc:	0004      	movs	r4, r0
 800f4ce:	2b63      	cmp	r3, #99	@ 0x63
 800f4d0:	dcee      	bgt.n	800f4b0 <__exponent+0x1c>
 800f4d2:	1eba      	subs	r2, r7, #2
 800f4d4:	1ca8      	adds	r0, r5, #2
 800f4d6:	0001      	movs	r1, r0
 800f4d8:	0013      	movs	r3, r2
 800f4da:	3430      	adds	r4, #48	@ 0x30
 800f4dc:	7014      	strb	r4, [r2, #0]
 800f4de:	ac02      	add	r4, sp, #8
 800f4e0:	3407      	adds	r4, #7
 800f4e2:	429c      	cmp	r4, r3
 800f4e4:	d80a      	bhi.n	800f4fc <__exponent+0x68>
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	4294      	cmp	r4, r2
 800f4ea:	d303      	bcc.n	800f4f4 <__exponent+0x60>
 800f4ec:	3309      	adds	r3, #9
 800f4ee:	aa02      	add	r2, sp, #8
 800f4f0:	189b      	adds	r3, r3, r2
 800f4f2:	1bdb      	subs	r3, r3, r7
 800f4f4:	18c0      	adds	r0, r0, r3
 800f4f6:	1b40      	subs	r0, r0, r5
 800f4f8:	b005      	add	sp, #20
 800f4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4fc:	781c      	ldrb	r4, [r3, #0]
 800f4fe:	3301      	adds	r3, #1
 800f500:	700c      	strb	r4, [r1, #0]
 800f502:	3101      	adds	r1, #1
 800f504:	e7eb      	b.n	800f4de <__exponent+0x4a>
 800f506:	2330      	movs	r3, #48	@ 0x30
 800f508:	18e4      	adds	r4, r4, r3
 800f50a:	70ab      	strb	r3, [r5, #2]
 800f50c:	1d28      	adds	r0, r5, #4
 800f50e:	70ec      	strb	r4, [r5, #3]
 800f510:	e7f1      	b.n	800f4f6 <__exponent+0x62>
	...

0800f514 <_printf_float>:
 800f514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f516:	b097      	sub	sp, #92	@ 0x5c
 800f518:	000d      	movs	r5, r1
 800f51a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f51c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f520:	9009      	str	r0, [sp, #36]	@ 0x24
 800f522:	f000 fd11 	bl	800ff48 <_localeconv_r>
 800f526:	6803      	ldr	r3, [r0, #0]
 800f528:	0018      	movs	r0, r3
 800f52a:	930d      	str	r3, [sp, #52]	@ 0x34
 800f52c:	f7f0 fde8 	bl	8000100 <strlen>
 800f530:	2300      	movs	r3, #0
 800f532:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f534:	9314      	str	r3, [sp, #80]	@ 0x50
 800f536:	7e2b      	ldrb	r3, [r5, #24]
 800f538:	2207      	movs	r2, #7
 800f53a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f540:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	05c9      	lsls	r1, r1, #23
 800f546:	d545      	bpl.n	800f5d4 <_printf_float+0xc0>
 800f548:	189b      	adds	r3, r3, r2
 800f54a:	4393      	bics	r3, r2
 800f54c:	001a      	movs	r2, r3
 800f54e:	3208      	adds	r2, #8
 800f550:	6022      	str	r2, [r4, #0]
 800f552:	2201      	movs	r2, #1
 800f554:	681e      	ldr	r6, [r3, #0]
 800f556:	685f      	ldr	r7, [r3, #4]
 800f558:	007b      	lsls	r3, r7, #1
 800f55a:	085b      	lsrs	r3, r3, #1
 800f55c:	9311      	str	r3, [sp, #68]	@ 0x44
 800f55e:	9610      	str	r6, [sp, #64]	@ 0x40
 800f560:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f562:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f564:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f566:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f568:	4ba7      	ldr	r3, [pc, #668]	@ (800f808 <_printf_float+0x2f4>)
 800f56a:	4252      	negs	r2, r2
 800f56c:	f7f2 fef6 	bl	800235c <__aeabi_dcmpun>
 800f570:	2800      	cmp	r0, #0
 800f572:	d131      	bne.n	800f5d8 <_printf_float+0xc4>
 800f574:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f576:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f578:	2201      	movs	r2, #1
 800f57a:	4ba3      	ldr	r3, [pc, #652]	@ (800f808 <_printf_float+0x2f4>)
 800f57c:	4252      	negs	r2, r2
 800f57e:	f7f0 ff71 	bl	8000464 <__aeabi_dcmple>
 800f582:	2800      	cmp	r0, #0
 800f584:	d128      	bne.n	800f5d8 <_printf_float+0xc4>
 800f586:	2200      	movs	r2, #0
 800f588:	2300      	movs	r3, #0
 800f58a:	0030      	movs	r0, r6
 800f58c:	0039      	movs	r1, r7
 800f58e:	f7f0 ff5f 	bl	8000450 <__aeabi_dcmplt>
 800f592:	2800      	cmp	r0, #0
 800f594:	d003      	beq.n	800f59e <_printf_float+0x8a>
 800f596:	002b      	movs	r3, r5
 800f598:	222d      	movs	r2, #45	@ 0x2d
 800f59a:	3343      	adds	r3, #67	@ 0x43
 800f59c:	701a      	strb	r2, [r3, #0]
 800f59e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5a0:	4f9a      	ldr	r7, [pc, #616]	@ (800f80c <_printf_float+0x2f8>)
 800f5a2:	2b47      	cmp	r3, #71	@ 0x47
 800f5a4:	d800      	bhi.n	800f5a8 <_printf_float+0x94>
 800f5a6:	4f9a      	ldr	r7, [pc, #616]	@ (800f810 <_printf_float+0x2fc>)
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5ae:	612b      	str	r3, [r5, #16]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	439a      	bics	r2, r3
 800f5b4:	602a      	str	r2, [r5, #0]
 800f5b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5b8:	0029      	movs	r1, r5
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5c0:	aa15      	add	r2, sp, #84	@ 0x54
 800f5c2:	f000 f9e5 	bl	800f990 <_printf_common>
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d000      	beq.n	800f5cc <_printf_float+0xb8>
 800f5ca:	e09e      	b.n	800f70a <_printf_float+0x1f6>
 800f5cc:	2001      	movs	r0, #1
 800f5ce:	4240      	negs	r0, r0
 800f5d0:	b017      	add	sp, #92	@ 0x5c
 800f5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5d4:	3307      	adds	r3, #7
 800f5d6:	e7b8      	b.n	800f54a <_printf_float+0x36>
 800f5d8:	0032      	movs	r2, r6
 800f5da:	003b      	movs	r3, r7
 800f5dc:	0030      	movs	r0, r6
 800f5de:	0039      	movs	r1, r7
 800f5e0:	f7f2 febc 	bl	800235c <__aeabi_dcmpun>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d00b      	beq.n	800f600 <_printf_float+0xec>
 800f5e8:	2f00      	cmp	r7, #0
 800f5ea:	da03      	bge.n	800f5f4 <_printf_float+0xe0>
 800f5ec:	002b      	movs	r3, r5
 800f5ee:	222d      	movs	r2, #45	@ 0x2d
 800f5f0:	3343      	adds	r3, #67	@ 0x43
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5f6:	4f87      	ldr	r7, [pc, #540]	@ (800f814 <_printf_float+0x300>)
 800f5f8:	2b47      	cmp	r3, #71	@ 0x47
 800f5fa:	d8d5      	bhi.n	800f5a8 <_printf_float+0x94>
 800f5fc:	4f86      	ldr	r7, [pc, #536]	@ (800f818 <_printf_float+0x304>)
 800f5fe:	e7d3      	b.n	800f5a8 <_printf_float+0x94>
 800f600:	2220      	movs	r2, #32
 800f602:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f604:	686b      	ldr	r3, [r5, #4]
 800f606:	4394      	bics	r4, r2
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	d146      	bne.n	800f69a <_printf_float+0x186>
 800f60c:	3307      	adds	r3, #7
 800f60e:	606b      	str	r3, [r5, #4]
 800f610:	2380      	movs	r3, #128	@ 0x80
 800f612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f614:	00db      	lsls	r3, r3, #3
 800f616:	4313      	orrs	r3, r2
 800f618:	2200      	movs	r2, #0
 800f61a:	602b      	str	r3, [r5, #0]
 800f61c:	9206      	str	r2, [sp, #24]
 800f61e:	aa14      	add	r2, sp, #80	@ 0x50
 800f620:	9205      	str	r2, [sp, #20]
 800f622:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f624:	a90a      	add	r1, sp, #40	@ 0x28
 800f626:	9204      	str	r2, [sp, #16]
 800f628:	aa13      	add	r2, sp, #76	@ 0x4c
 800f62a:	9203      	str	r2, [sp, #12]
 800f62c:	2223      	movs	r2, #35	@ 0x23
 800f62e:	1852      	adds	r2, r2, r1
 800f630:	9202      	str	r2, [sp, #8]
 800f632:	9301      	str	r3, [sp, #4]
 800f634:	686b      	ldr	r3, [r5, #4]
 800f636:	0032      	movs	r2, r6
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f63c:	003b      	movs	r3, r7
 800f63e:	f7ff fec3 	bl	800f3c8 <__cvt>
 800f642:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f644:	0007      	movs	r7, r0
 800f646:	2c47      	cmp	r4, #71	@ 0x47
 800f648:	d12d      	bne.n	800f6a6 <_printf_float+0x192>
 800f64a:	1cd3      	adds	r3, r2, #3
 800f64c:	db02      	blt.n	800f654 <_printf_float+0x140>
 800f64e:	686b      	ldr	r3, [r5, #4]
 800f650:	429a      	cmp	r2, r3
 800f652:	dd47      	ble.n	800f6e4 <_printf_float+0x1d0>
 800f654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f656:	3b02      	subs	r3, #2
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	930c      	str	r3, [sp, #48]	@ 0x30
 800f65c:	0028      	movs	r0, r5
 800f65e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f660:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f662:	3901      	subs	r1, #1
 800f664:	3050      	adds	r0, #80	@ 0x50
 800f666:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f668:	f7ff ff14 	bl	800f494 <__exponent>
 800f66c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f66e:	0004      	movs	r4, r0
 800f670:	1813      	adds	r3, r2, r0
 800f672:	612b      	str	r3, [r5, #16]
 800f674:	2a01      	cmp	r2, #1
 800f676:	dc02      	bgt.n	800f67e <_printf_float+0x16a>
 800f678:	682a      	ldr	r2, [r5, #0]
 800f67a:	07d2      	lsls	r2, r2, #31
 800f67c:	d501      	bpl.n	800f682 <_printf_float+0x16e>
 800f67e:	3301      	adds	r3, #1
 800f680:	612b      	str	r3, [r5, #16]
 800f682:	2323      	movs	r3, #35	@ 0x23
 800f684:	aa0a      	add	r2, sp, #40	@ 0x28
 800f686:	189b      	adds	r3, r3, r2
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d100      	bne.n	800f690 <_printf_float+0x17c>
 800f68e:	e792      	b.n	800f5b6 <_printf_float+0xa2>
 800f690:	002b      	movs	r3, r5
 800f692:	222d      	movs	r2, #45	@ 0x2d
 800f694:	3343      	adds	r3, #67	@ 0x43
 800f696:	701a      	strb	r2, [r3, #0]
 800f698:	e78d      	b.n	800f5b6 <_printf_float+0xa2>
 800f69a:	2c47      	cmp	r4, #71	@ 0x47
 800f69c:	d1b8      	bne.n	800f610 <_printf_float+0xfc>
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d1b6      	bne.n	800f610 <_printf_float+0xfc>
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	e7b3      	b.n	800f60e <_printf_float+0xfa>
 800f6a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6a8:	2b65      	cmp	r3, #101	@ 0x65
 800f6aa:	d9d7      	bls.n	800f65c <_printf_float+0x148>
 800f6ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6ae:	2b66      	cmp	r3, #102	@ 0x66
 800f6b0:	d11a      	bne.n	800f6e8 <_printf_float+0x1d4>
 800f6b2:	686b      	ldr	r3, [r5, #4]
 800f6b4:	2a00      	cmp	r2, #0
 800f6b6:	dd09      	ble.n	800f6cc <_printf_float+0x1b8>
 800f6b8:	612a      	str	r2, [r5, #16]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <_printf_float+0x1b0>
 800f6be:	6829      	ldr	r1, [r5, #0]
 800f6c0:	07c9      	lsls	r1, r1, #31
 800f6c2:	d50b      	bpl.n	800f6dc <_printf_float+0x1c8>
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	189b      	adds	r3, r3, r2
 800f6c8:	612b      	str	r3, [r5, #16]
 800f6ca:	e007      	b.n	800f6dc <_printf_float+0x1c8>
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d103      	bne.n	800f6d8 <_printf_float+0x1c4>
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	6829      	ldr	r1, [r5, #0]
 800f6d4:	4211      	tst	r1, r2
 800f6d6:	d000      	beq.n	800f6da <_printf_float+0x1c6>
 800f6d8:	1c9a      	adds	r2, r3, #2
 800f6da:	612a      	str	r2, [r5, #16]
 800f6dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6de:	2400      	movs	r4, #0
 800f6e0:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f6e2:	e7ce      	b.n	800f682 <_printf_float+0x16e>
 800f6e4:	2367      	movs	r3, #103	@ 0x67
 800f6e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f6ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	db06      	blt.n	800f6fe <_printf_float+0x1ea>
 800f6f0:	682b      	ldr	r3, [r5, #0]
 800f6f2:	6129      	str	r1, [r5, #16]
 800f6f4:	07db      	lsls	r3, r3, #31
 800f6f6:	d5f1      	bpl.n	800f6dc <_printf_float+0x1c8>
 800f6f8:	3101      	adds	r1, #1
 800f6fa:	6129      	str	r1, [r5, #16]
 800f6fc:	e7ee      	b.n	800f6dc <_printf_float+0x1c8>
 800f6fe:	2201      	movs	r2, #1
 800f700:	2900      	cmp	r1, #0
 800f702:	dce0      	bgt.n	800f6c6 <_printf_float+0x1b2>
 800f704:	1892      	adds	r2, r2, r2
 800f706:	1a52      	subs	r2, r2, r1
 800f708:	e7dd      	b.n	800f6c6 <_printf_float+0x1b2>
 800f70a:	682a      	ldr	r2, [r5, #0]
 800f70c:	0553      	lsls	r3, r2, #21
 800f70e:	d408      	bmi.n	800f722 <_printf_float+0x20e>
 800f710:	692b      	ldr	r3, [r5, #16]
 800f712:	003a      	movs	r2, r7
 800f714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f718:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f71a:	47a0      	blx	r4
 800f71c:	3001      	adds	r0, #1
 800f71e:	d129      	bne.n	800f774 <_printf_float+0x260>
 800f720:	e754      	b.n	800f5cc <_printf_float+0xb8>
 800f722:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f724:	2b65      	cmp	r3, #101	@ 0x65
 800f726:	d800      	bhi.n	800f72a <_printf_float+0x216>
 800f728:	e0db      	b.n	800f8e2 <_printf_float+0x3ce>
 800f72a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f72c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f72e:	2200      	movs	r2, #0
 800f730:	2300      	movs	r3, #0
 800f732:	f7f0 fe87 	bl	8000444 <__aeabi_dcmpeq>
 800f736:	2800      	cmp	r0, #0
 800f738:	d033      	beq.n	800f7a2 <_printf_float+0x28e>
 800f73a:	2301      	movs	r3, #1
 800f73c:	4a37      	ldr	r2, [pc, #220]	@ (800f81c <_printf_float+0x308>)
 800f73e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f742:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f744:	47a0      	blx	r4
 800f746:	3001      	adds	r0, #1
 800f748:	d100      	bne.n	800f74c <_printf_float+0x238>
 800f74a:	e73f      	b.n	800f5cc <_printf_float+0xb8>
 800f74c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f74e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f750:	42b3      	cmp	r3, r6
 800f752:	db02      	blt.n	800f75a <_printf_float+0x246>
 800f754:	682b      	ldr	r3, [r5, #0]
 800f756:	07db      	lsls	r3, r3, #31
 800f758:	d50c      	bpl.n	800f774 <_printf_float+0x260>
 800f75a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f764:	47a0      	blx	r4
 800f766:	2400      	movs	r4, #0
 800f768:	3001      	adds	r0, #1
 800f76a:	d100      	bne.n	800f76e <_printf_float+0x25a>
 800f76c:	e72e      	b.n	800f5cc <_printf_float+0xb8>
 800f76e:	1e73      	subs	r3, r6, #1
 800f770:	42a3      	cmp	r3, r4
 800f772:	dc0a      	bgt.n	800f78a <_printf_float+0x276>
 800f774:	682b      	ldr	r3, [r5, #0]
 800f776:	079b      	lsls	r3, r3, #30
 800f778:	d500      	bpl.n	800f77c <_printf_float+0x268>
 800f77a:	e106      	b.n	800f98a <_printf_float+0x476>
 800f77c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f77e:	68e8      	ldr	r0, [r5, #12]
 800f780:	4298      	cmp	r0, r3
 800f782:	db00      	blt.n	800f786 <_printf_float+0x272>
 800f784:	e724      	b.n	800f5d0 <_printf_float+0xbc>
 800f786:	0018      	movs	r0, r3
 800f788:	e722      	b.n	800f5d0 <_printf_float+0xbc>
 800f78a:	002a      	movs	r2, r5
 800f78c:	2301      	movs	r3, #1
 800f78e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f792:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f794:	321a      	adds	r2, #26
 800f796:	47b8      	blx	r7
 800f798:	3001      	adds	r0, #1
 800f79a:	d100      	bne.n	800f79e <_printf_float+0x28a>
 800f79c:	e716      	b.n	800f5cc <_printf_float+0xb8>
 800f79e:	3401      	adds	r4, #1
 800f7a0:	e7e5      	b.n	800f76e <_printf_float+0x25a>
 800f7a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	dc3b      	bgt.n	800f820 <_printf_float+0x30c>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	4a1c      	ldr	r2, [pc, #112]	@ (800f81c <_printf_float+0x308>)
 800f7ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7b2:	47a0      	blx	r4
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d100      	bne.n	800f7ba <_printf_float+0x2a6>
 800f7b8:	e708      	b.n	800f5cc <_printf_float+0xb8>
 800f7ba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f7bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7be:	4333      	orrs	r3, r6
 800f7c0:	d102      	bne.n	800f7c8 <_printf_float+0x2b4>
 800f7c2:	682b      	ldr	r3, [r5, #0]
 800f7c4:	07db      	lsls	r3, r3, #31
 800f7c6:	d5d5      	bpl.n	800f774 <_printf_float+0x260>
 800f7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7d2:	47a0      	blx	r4
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	d100      	bne.n	800f7dc <_printf_float+0x2c8>
 800f7da:	e6f7      	b.n	800f5cc <_printf_float+0xb8>
 800f7dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7e2:	425b      	negs	r3, r3
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	dc01      	bgt.n	800f7ec <_printf_float+0x2d8>
 800f7e8:	0033      	movs	r3, r6
 800f7ea:	e792      	b.n	800f712 <_printf_float+0x1fe>
 800f7ec:	002a      	movs	r2, r5
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f7f6:	321a      	adds	r2, #26
 800f7f8:	47a0      	blx	r4
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d100      	bne.n	800f800 <_printf_float+0x2ec>
 800f7fe:	e6e5      	b.n	800f5cc <_printf_float+0xb8>
 800f800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f802:	3301      	adds	r3, #1
 800f804:	e7ea      	b.n	800f7dc <_printf_float+0x2c8>
 800f806:	46c0      	nop			@ (mov r8, r8)
 800f808:	7fefffff 	.word	0x7fefffff
 800f80c:	08012d86 	.word	0x08012d86
 800f810:	08012d82 	.word	0x08012d82
 800f814:	08012d8e 	.word	0x08012d8e
 800f818:	08012d8a 	.word	0x08012d8a
 800f81c:	08012d92 	.word	0x08012d92
 800f820:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f822:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f824:	930c      	str	r3, [sp, #48]	@ 0x30
 800f826:	429e      	cmp	r6, r3
 800f828:	dd00      	ble.n	800f82c <_printf_float+0x318>
 800f82a:	001e      	movs	r6, r3
 800f82c:	2e00      	cmp	r6, #0
 800f82e:	dc31      	bgt.n	800f894 <_printf_float+0x380>
 800f830:	43f3      	mvns	r3, r6
 800f832:	2400      	movs	r4, #0
 800f834:	17db      	asrs	r3, r3, #31
 800f836:	4033      	ands	r3, r6
 800f838:	930e      	str	r3, [sp, #56]	@ 0x38
 800f83a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f83c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f83e:	1af3      	subs	r3, r6, r3
 800f840:	42a3      	cmp	r3, r4
 800f842:	dc30      	bgt.n	800f8a6 <_printf_float+0x392>
 800f844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f848:	429a      	cmp	r2, r3
 800f84a:	dc38      	bgt.n	800f8be <_printf_float+0x3aa>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	07db      	lsls	r3, r3, #31
 800f850:	d435      	bmi.n	800f8be <_printf_float+0x3aa>
 800f852:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f856:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f858:	1b9b      	subs	r3, r3, r6
 800f85a:	1b14      	subs	r4, r2, r4
 800f85c:	429c      	cmp	r4, r3
 800f85e:	dd00      	ble.n	800f862 <_printf_float+0x34e>
 800f860:	001c      	movs	r4, r3
 800f862:	2c00      	cmp	r4, #0
 800f864:	dc34      	bgt.n	800f8d0 <_printf_float+0x3bc>
 800f866:	43e3      	mvns	r3, r4
 800f868:	2600      	movs	r6, #0
 800f86a:	17db      	asrs	r3, r3, #31
 800f86c:	401c      	ands	r4, r3
 800f86e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f870:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	1b1b      	subs	r3, r3, r4
 800f876:	42b3      	cmp	r3, r6
 800f878:	dc00      	bgt.n	800f87c <_printf_float+0x368>
 800f87a:	e77b      	b.n	800f774 <_printf_float+0x260>
 800f87c:	002a      	movs	r2, r5
 800f87e:	2301      	movs	r3, #1
 800f880:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f884:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f886:	321a      	adds	r2, #26
 800f888:	47b8      	blx	r7
 800f88a:	3001      	adds	r0, #1
 800f88c:	d100      	bne.n	800f890 <_printf_float+0x37c>
 800f88e:	e69d      	b.n	800f5cc <_printf_float+0xb8>
 800f890:	3601      	adds	r6, #1
 800f892:	e7ec      	b.n	800f86e <_printf_float+0x35a>
 800f894:	0033      	movs	r3, r6
 800f896:	003a      	movs	r2, r7
 800f898:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f89c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f89e:	47a0      	blx	r4
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	d1c5      	bne.n	800f830 <_printf_float+0x31c>
 800f8a4:	e692      	b.n	800f5cc <_printf_float+0xb8>
 800f8a6:	002a      	movs	r2, r5
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8b0:	321a      	adds	r2, #26
 800f8b2:	47b0      	blx	r6
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	d100      	bne.n	800f8ba <_printf_float+0x3a6>
 800f8b8:	e688      	b.n	800f5cc <_printf_float+0xb8>
 800f8ba:	3401      	adds	r4, #1
 800f8bc:	e7bd      	b.n	800f83a <_printf_float+0x326>
 800f8be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f8c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f8c8:	47a0      	blx	r4
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d1c1      	bne.n	800f852 <_printf_float+0x33e>
 800f8ce:	e67d      	b.n	800f5cc <_printf_float+0xb8>
 800f8d0:	19ba      	adds	r2, r7, r6
 800f8d2:	0023      	movs	r3, r4
 800f8d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8da:	47b0      	blx	r6
 800f8dc:	3001      	adds	r0, #1
 800f8de:	d1c2      	bne.n	800f866 <_printf_float+0x352>
 800f8e0:	e674      	b.n	800f5cc <_printf_float+0xb8>
 800f8e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f8e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	dc02      	bgt.n	800f8f0 <_printf_float+0x3dc>
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	421a      	tst	r2, r3
 800f8ee:	d039      	beq.n	800f964 <_printf_float+0x450>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	003a      	movs	r2, r7
 800f8f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f8fa:	47b0      	blx	r6
 800f8fc:	3001      	adds	r0, #1
 800f8fe:	d100      	bne.n	800f902 <_printf_float+0x3ee>
 800f900:	e664      	b.n	800f5cc <_printf_float+0xb8>
 800f902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f904:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f90a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f90c:	47b0      	blx	r6
 800f90e:	3001      	adds	r0, #1
 800f910:	d100      	bne.n	800f914 <_printf_float+0x400>
 800f912:	e65b      	b.n	800f5cc <_printf_float+0xb8>
 800f914:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f916:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f918:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f91a:	2200      	movs	r2, #0
 800f91c:	3b01      	subs	r3, #1
 800f91e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f920:	2300      	movs	r3, #0
 800f922:	f7f0 fd8f 	bl	8000444 <__aeabi_dcmpeq>
 800f926:	2800      	cmp	r0, #0
 800f928:	d11a      	bne.n	800f960 <_printf_float+0x44c>
 800f92a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f92c:	1c7a      	adds	r2, r7, #1
 800f92e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f930:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f932:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f934:	47b0      	blx	r6
 800f936:	3001      	adds	r0, #1
 800f938:	d10e      	bne.n	800f958 <_printf_float+0x444>
 800f93a:	e647      	b.n	800f5cc <_printf_float+0xb8>
 800f93c:	002a      	movs	r2, r5
 800f93e:	2301      	movs	r3, #1
 800f940:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f944:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f946:	321a      	adds	r2, #26
 800f948:	47b8      	blx	r7
 800f94a:	3001      	adds	r0, #1
 800f94c:	d100      	bne.n	800f950 <_printf_float+0x43c>
 800f94e:	e63d      	b.n	800f5cc <_printf_float+0xb8>
 800f950:	3601      	adds	r6, #1
 800f952:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f954:	429e      	cmp	r6, r3
 800f956:	dbf1      	blt.n	800f93c <_printf_float+0x428>
 800f958:	002a      	movs	r2, r5
 800f95a:	0023      	movs	r3, r4
 800f95c:	3250      	adds	r2, #80	@ 0x50
 800f95e:	e6d9      	b.n	800f714 <_printf_float+0x200>
 800f960:	2600      	movs	r6, #0
 800f962:	e7f6      	b.n	800f952 <_printf_float+0x43e>
 800f964:	003a      	movs	r2, r7
 800f966:	e7e2      	b.n	800f92e <_printf_float+0x41a>
 800f968:	002a      	movs	r2, r5
 800f96a:	2301      	movs	r3, #1
 800f96c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f96e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f970:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f972:	3219      	adds	r2, #25
 800f974:	47b0      	blx	r6
 800f976:	3001      	adds	r0, #1
 800f978:	d100      	bne.n	800f97c <_printf_float+0x468>
 800f97a:	e627      	b.n	800f5cc <_printf_float+0xb8>
 800f97c:	3401      	adds	r4, #1
 800f97e:	68eb      	ldr	r3, [r5, #12]
 800f980:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f982:	1a9b      	subs	r3, r3, r2
 800f984:	42a3      	cmp	r3, r4
 800f986:	dcef      	bgt.n	800f968 <_printf_float+0x454>
 800f988:	e6f8      	b.n	800f77c <_printf_float+0x268>
 800f98a:	2400      	movs	r4, #0
 800f98c:	e7f7      	b.n	800f97e <_printf_float+0x46a>
 800f98e:	46c0      	nop			@ (mov r8, r8)

0800f990 <_printf_common>:
 800f990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f992:	0016      	movs	r6, r2
 800f994:	9301      	str	r3, [sp, #4]
 800f996:	688a      	ldr	r2, [r1, #8]
 800f998:	690b      	ldr	r3, [r1, #16]
 800f99a:	000c      	movs	r4, r1
 800f99c:	9000      	str	r0, [sp, #0]
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	da00      	bge.n	800f9a4 <_printf_common+0x14>
 800f9a2:	0013      	movs	r3, r2
 800f9a4:	0022      	movs	r2, r4
 800f9a6:	6033      	str	r3, [r6, #0]
 800f9a8:	3243      	adds	r2, #67	@ 0x43
 800f9aa:	7812      	ldrb	r2, [r2, #0]
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	d001      	beq.n	800f9b4 <_printf_common+0x24>
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	6033      	str	r3, [r6, #0]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	069b      	lsls	r3, r3, #26
 800f9b8:	d502      	bpl.n	800f9c0 <_printf_common+0x30>
 800f9ba:	6833      	ldr	r3, [r6, #0]
 800f9bc:	3302      	adds	r3, #2
 800f9be:	6033      	str	r3, [r6, #0]
 800f9c0:	6822      	ldr	r2, [r4, #0]
 800f9c2:	2306      	movs	r3, #6
 800f9c4:	0015      	movs	r5, r2
 800f9c6:	401d      	ands	r5, r3
 800f9c8:	421a      	tst	r2, r3
 800f9ca:	d027      	beq.n	800fa1c <_printf_common+0x8c>
 800f9cc:	0023      	movs	r3, r4
 800f9ce:	3343      	adds	r3, #67	@ 0x43
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	1e5a      	subs	r2, r3, #1
 800f9d4:	4193      	sbcs	r3, r2
 800f9d6:	6822      	ldr	r2, [r4, #0]
 800f9d8:	0692      	lsls	r2, r2, #26
 800f9da:	d430      	bmi.n	800fa3e <_printf_common+0xae>
 800f9dc:	0022      	movs	r2, r4
 800f9de:	9901      	ldr	r1, [sp, #4]
 800f9e0:	9800      	ldr	r0, [sp, #0]
 800f9e2:	9d08      	ldr	r5, [sp, #32]
 800f9e4:	3243      	adds	r2, #67	@ 0x43
 800f9e6:	47a8      	blx	r5
 800f9e8:	3001      	adds	r0, #1
 800f9ea:	d025      	beq.n	800fa38 <_printf_common+0xa8>
 800f9ec:	2206      	movs	r2, #6
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	2500      	movs	r5, #0
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	2b04      	cmp	r3, #4
 800f9f6:	d105      	bne.n	800fa04 <_printf_common+0x74>
 800f9f8:	6833      	ldr	r3, [r6, #0]
 800f9fa:	68e5      	ldr	r5, [r4, #12]
 800f9fc:	1aed      	subs	r5, r5, r3
 800f9fe:	43eb      	mvns	r3, r5
 800fa00:	17db      	asrs	r3, r3, #31
 800fa02:	401d      	ands	r5, r3
 800fa04:	68a3      	ldr	r3, [r4, #8]
 800fa06:	6922      	ldr	r2, [r4, #16]
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	dd01      	ble.n	800fa10 <_printf_common+0x80>
 800fa0c:	1a9b      	subs	r3, r3, r2
 800fa0e:	18ed      	adds	r5, r5, r3
 800fa10:	2600      	movs	r6, #0
 800fa12:	42b5      	cmp	r5, r6
 800fa14:	d120      	bne.n	800fa58 <_printf_common+0xc8>
 800fa16:	2000      	movs	r0, #0
 800fa18:	e010      	b.n	800fa3c <_printf_common+0xac>
 800fa1a:	3501      	adds	r5, #1
 800fa1c:	68e3      	ldr	r3, [r4, #12]
 800fa1e:	6832      	ldr	r2, [r6, #0]
 800fa20:	1a9b      	subs	r3, r3, r2
 800fa22:	42ab      	cmp	r3, r5
 800fa24:	ddd2      	ble.n	800f9cc <_printf_common+0x3c>
 800fa26:	0022      	movs	r2, r4
 800fa28:	2301      	movs	r3, #1
 800fa2a:	9901      	ldr	r1, [sp, #4]
 800fa2c:	9800      	ldr	r0, [sp, #0]
 800fa2e:	9f08      	ldr	r7, [sp, #32]
 800fa30:	3219      	adds	r2, #25
 800fa32:	47b8      	blx	r7
 800fa34:	3001      	adds	r0, #1
 800fa36:	d1f0      	bne.n	800fa1a <_printf_common+0x8a>
 800fa38:	2001      	movs	r0, #1
 800fa3a:	4240      	negs	r0, r0
 800fa3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa3e:	2030      	movs	r0, #48	@ 0x30
 800fa40:	18e1      	adds	r1, r4, r3
 800fa42:	3143      	adds	r1, #67	@ 0x43
 800fa44:	7008      	strb	r0, [r1, #0]
 800fa46:	0021      	movs	r1, r4
 800fa48:	1c5a      	adds	r2, r3, #1
 800fa4a:	3145      	adds	r1, #69	@ 0x45
 800fa4c:	7809      	ldrb	r1, [r1, #0]
 800fa4e:	18a2      	adds	r2, r4, r2
 800fa50:	3243      	adds	r2, #67	@ 0x43
 800fa52:	3302      	adds	r3, #2
 800fa54:	7011      	strb	r1, [r2, #0]
 800fa56:	e7c1      	b.n	800f9dc <_printf_common+0x4c>
 800fa58:	0022      	movs	r2, r4
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	9901      	ldr	r1, [sp, #4]
 800fa5e:	9800      	ldr	r0, [sp, #0]
 800fa60:	9f08      	ldr	r7, [sp, #32]
 800fa62:	321a      	adds	r2, #26
 800fa64:	47b8      	blx	r7
 800fa66:	3001      	adds	r0, #1
 800fa68:	d0e6      	beq.n	800fa38 <_printf_common+0xa8>
 800fa6a:	3601      	adds	r6, #1
 800fa6c:	e7d1      	b.n	800fa12 <_printf_common+0x82>
	...

0800fa70 <_printf_i>:
 800fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa72:	b08b      	sub	sp, #44	@ 0x2c
 800fa74:	9206      	str	r2, [sp, #24]
 800fa76:	000a      	movs	r2, r1
 800fa78:	3243      	adds	r2, #67	@ 0x43
 800fa7a:	9307      	str	r3, [sp, #28]
 800fa7c:	9005      	str	r0, [sp, #20]
 800fa7e:	9203      	str	r2, [sp, #12]
 800fa80:	7e0a      	ldrb	r2, [r1, #24]
 800fa82:	000c      	movs	r4, r1
 800fa84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa86:	2a78      	cmp	r2, #120	@ 0x78
 800fa88:	d809      	bhi.n	800fa9e <_printf_i+0x2e>
 800fa8a:	2a62      	cmp	r2, #98	@ 0x62
 800fa8c:	d80b      	bhi.n	800faa6 <_printf_i+0x36>
 800fa8e:	2a00      	cmp	r2, #0
 800fa90:	d100      	bne.n	800fa94 <_printf_i+0x24>
 800fa92:	e0ba      	b.n	800fc0a <_printf_i+0x19a>
 800fa94:	497a      	ldr	r1, [pc, #488]	@ (800fc80 <_printf_i+0x210>)
 800fa96:	9104      	str	r1, [sp, #16]
 800fa98:	2a58      	cmp	r2, #88	@ 0x58
 800fa9a:	d100      	bne.n	800fa9e <_printf_i+0x2e>
 800fa9c:	e08e      	b.n	800fbbc <_printf_i+0x14c>
 800fa9e:	0025      	movs	r5, r4
 800faa0:	3542      	adds	r5, #66	@ 0x42
 800faa2:	702a      	strb	r2, [r5, #0]
 800faa4:	e022      	b.n	800faec <_printf_i+0x7c>
 800faa6:	0010      	movs	r0, r2
 800faa8:	3863      	subs	r0, #99	@ 0x63
 800faaa:	2815      	cmp	r0, #21
 800faac:	d8f7      	bhi.n	800fa9e <_printf_i+0x2e>
 800faae:	f7f0 fb39 	bl	8000124 <__gnu_thumb1_case_shi>
 800fab2:	0016      	.short	0x0016
 800fab4:	fff6001f 	.word	0xfff6001f
 800fab8:	fff6fff6 	.word	0xfff6fff6
 800fabc:	001ffff6 	.word	0x001ffff6
 800fac0:	fff6fff6 	.word	0xfff6fff6
 800fac4:	fff6fff6 	.word	0xfff6fff6
 800fac8:	0036009f 	.word	0x0036009f
 800facc:	fff6007e 	.word	0xfff6007e
 800fad0:	00b0fff6 	.word	0x00b0fff6
 800fad4:	0036fff6 	.word	0x0036fff6
 800fad8:	fff6fff6 	.word	0xfff6fff6
 800fadc:	0082      	.short	0x0082
 800fade:	0025      	movs	r5, r4
 800fae0:	681a      	ldr	r2, [r3, #0]
 800fae2:	3542      	adds	r5, #66	@ 0x42
 800fae4:	1d11      	adds	r1, r2, #4
 800fae6:	6019      	str	r1, [r3, #0]
 800fae8:	6813      	ldr	r3, [r2, #0]
 800faea:	702b      	strb	r3, [r5, #0]
 800faec:	2301      	movs	r3, #1
 800faee:	e09e      	b.n	800fc2e <_printf_i+0x1be>
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	6809      	ldr	r1, [r1, #0]
 800faf4:	1d02      	adds	r2, r0, #4
 800faf6:	060d      	lsls	r5, r1, #24
 800faf8:	d50b      	bpl.n	800fb12 <_printf_i+0xa2>
 800fafa:	6806      	ldr	r6, [r0, #0]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	2e00      	cmp	r6, #0
 800fb00:	da03      	bge.n	800fb0a <_printf_i+0x9a>
 800fb02:	232d      	movs	r3, #45	@ 0x2d
 800fb04:	9a03      	ldr	r2, [sp, #12]
 800fb06:	4276      	negs	r6, r6
 800fb08:	7013      	strb	r3, [r2, #0]
 800fb0a:	4b5d      	ldr	r3, [pc, #372]	@ (800fc80 <_printf_i+0x210>)
 800fb0c:	270a      	movs	r7, #10
 800fb0e:	9304      	str	r3, [sp, #16]
 800fb10:	e018      	b.n	800fb44 <_printf_i+0xd4>
 800fb12:	6806      	ldr	r6, [r0, #0]
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	0649      	lsls	r1, r1, #25
 800fb18:	d5f1      	bpl.n	800fafe <_printf_i+0x8e>
 800fb1a:	b236      	sxth	r6, r6
 800fb1c:	e7ef      	b.n	800fafe <_printf_i+0x8e>
 800fb1e:	6808      	ldr	r0, [r1, #0]
 800fb20:	6819      	ldr	r1, [r3, #0]
 800fb22:	c940      	ldmia	r1!, {r6}
 800fb24:	0605      	lsls	r5, r0, #24
 800fb26:	d402      	bmi.n	800fb2e <_printf_i+0xbe>
 800fb28:	0640      	lsls	r0, r0, #25
 800fb2a:	d500      	bpl.n	800fb2e <_printf_i+0xbe>
 800fb2c:	b2b6      	uxth	r6, r6
 800fb2e:	6019      	str	r1, [r3, #0]
 800fb30:	4b53      	ldr	r3, [pc, #332]	@ (800fc80 <_printf_i+0x210>)
 800fb32:	270a      	movs	r7, #10
 800fb34:	9304      	str	r3, [sp, #16]
 800fb36:	2a6f      	cmp	r2, #111	@ 0x6f
 800fb38:	d100      	bne.n	800fb3c <_printf_i+0xcc>
 800fb3a:	3f02      	subs	r7, #2
 800fb3c:	0023      	movs	r3, r4
 800fb3e:	2200      	movs	r2, #0
 800fb40:	3343      	adds	r3, #67	@ 0x43
 800fb42:	701a      	strb	r2, [r3, #0]
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	60a3      	str	r3, [r4, #8]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	db06      	blt.n	800fb5a <_printf_i+0xea>
 800fb4c:	2104      	movs	r1, #4
 800fb4e:	6822      	ldr	r2, [r4, #0]
 800fb50:	9d03      	ldr	r5, [sp, #12]
 800fb52:	438a      	bics	r2, r1
 800fb54:	6022      	str	r2, [r4, #0]
 800fb56:	4333      	orrs	r3, r6
 800fb58:	d00c      	beq.n	800fb74 <_printf_i+0x104>
 800fb5a:	9d03      	ldr	r5, [sp, #12]
 800fb5c:	0030      	movs	r0, r6
 800fb5e:	0039      	movs	r1, r7
 800fb60:	f7f0 fb70 	bl	8000244 <__aeabi_uidivmod>
 800fb64:	9b04      	ldr	r3, [sp, #16]
 800fb66:	3d01      	subs	r5, #1
 800fb68:	5c5b      	ldrb	r3, [r3, r1]
 800fb6a:	702b      	strb	r3, [r5, #0]
 800fb6c:	0033      	movs	r3, r6
 800fb6e:	0006      	movs	r6, r0
 800fb70:	429f      	cmp	r7, r3
 800fb72:	d9f3      	bls.n	800fb5c <_printf_i+0xec>
 800fb74:	2f08      	cmp	r7, #8
 800fb76:	d109      	bne.n	800fb8c <_printf_i+0x11c>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	07db      	lsls	r3, r3, #31
 800fb7c:	d506      	bpl.n	800fb8c <_printf_i+0x11c>
 800fb7e:	6862      	ldr	r2, [r4, #4]
 800fb80:	6923      	ldr	r3, [r4, #16]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	dc02      	bgt.n	800fb8c <_printf_i+0x11c>
 800fb86:	2330      	movs	r3, #48	@ 0x30
 800fb88:	3d01      	subs	r5, #1
 800fb8a:	702b      	strb	r3, [r5, #0]
 800fb8c:	9b03      	ldr	r3, [sp, #12]
 800fb8e:	1b5b      	subs	r3, r3, r5
 800fb90:	6123      	str	r3, [r4, #16]
 800fb92:	9b07      	ldr	r3, [sp, #28]
 800fb94:	0021      	movs	r1, r4
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	9805      	ldr	r0, [sp, #20]
 800fb9a:	9b06      	ldr	r3, [sp, #24]
 800fb9c:	aa09      	add	r2, sp, #36	@ 0x24
 800fb9e:	f7ff fef7 	bl	800f990 <_printf_common>
 800fba2:	3001      	adds	r0, #1
 800fba4:	d148      	bne.n	800fc38 <_printf_i+0x1c8>
 800fba6:	2001      	movs	r0, #1
 800fba8:	4240      	negs	r0, r0
 800fbaa:	b00b      	add	sp, #44	@ 0x2c
 800fbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbae:	2220      	movs	r2, #32
 800fbb0:	6809      	ldr	r1, [r1, #0]
 800fbb2:	430a      	orrs	r2, r1
 800fbb4:	6022      	str	r2, [r4, #0]
 800fbb6:	2278      	movs	r2, #120	@ 0x78
 800fbb8:	4932      	ldr	r1, [pc, #200]	@ (800fc84 <_printf_i+0x214>)
 800fbba:	9104      	str	r1, [sp, #16]
 800fbbc:	0021      	movs	r1, r4
 800fbbe:	3145      	adds	r1, #69	@ 0x45
 800fbc0:	700a      	strb	r2, [r1, #0]
 800fbc2:	6819      	ldr	r1, [r3, #0]
 800fbc4:	6822      	ldr	r2, [r4, #0]
 800fbc6:	c940      	ldmia	r1!, {r6}
 800fbc8:	0610      	lsls	r0, r2, #24
 800fbca:	d402      	bmi.n	800fbd2 <_printf_i+0x162>
 800fbcc:	0650      	lsls	r0, r2, #25
 800fbce:	d500      	bpl.n	800fbd2 <_printf_i+0x162>
 800fbd0:	b2b6      	uxth	r6, r6
 800fbd2:	6019      	str	r1, [r3, #0]
 800fbd4:	07d3      	lsls	r3, r2, #31
 800fbd6:	d502      	bpl.n	800fbde <_printf_i+0x16e>
 800fbd8:	2320      	movs	r3, #32
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	2e00      	cmp	r6, #0
 800fbe0:	d001      	beq.n	800fbe6 <_printf_i+0x176>
 800fbe2:	2710      	movs	r7, #16
 800fbe4:	e7aa      	b.n	800fb3c <_printf_i+0xcc>
 800fbe6:	2220      	movs	r2, #32
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	4393      	bics	r3, r2
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	e7f8      	b.n	800fbe2 <_printf_i+0x172>
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	680d      	ldr	r5, [r1, #0]
 800fbf4:	1d10      	adds	r0, r2, #4
 800fbf6:	6949      	ldr	r1, [r1, #20]
 800fbf8:	6018      	str	r0, [r3, #0]
 800fbfa:	6813      	ldr	r3, [r2, #0]
 800fbfc:	062e      	lsls	r6, r5, #24
 800fbfe:	d501      	bpl.n	800fc04 <_printf_i+0x194>
 800fc00:	6019      	str	r1, [r3, #0]
 800fc02:	e002      	b.n	800fc0a <_printf_i+0x19a>
 800fc04:	066d      	lsls	r5, r5, #25
 800fc06:	d5fb      	bpl.n	800fc00 <_printf_i+0x190>
 800fc08:	8019      	strh	r1, [r3, #0]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	9d03      	ldr	r5, [sp, #12]
 800fc0e:	6123      	str	r3, [r4, #16]
 800fc10:	e7bf      	b.n	800fb92 <_printf_i+0x122>
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	1d11      	adds	r1, r2, #4
 800fc16:	6019      	str	r1, [r3, #0]
 800fc18:	6815      	ldr	r5, [r2, #0]
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	0028      	movs	r0, r5
 800fc1e:	6862      	ldr	r2, [r4, #4]
 800fc20:	f000 fa11 	bl	8010046 <memchr>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d001      	beq.n	800fc2c <_printf_i+0x1bc>
 800fc28:	1b40      	subs	r0, r0, r5
 800fc2a:	6060      	str	r0, [r4, #4]
 800fc2c:	6863      	ldr	r3, [r4, #4]
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	2300      	movs	r3, #0
 800fc32:	9a03      	ldr	r2, [sp, #12]
 800fc34:	7013      	strb	r3, [r2, #0]
 800fc36:	e7ac      	b.n	800fb92 <_printf_i+0x122>
 800fc38:	002a      	movs	r2, r5
 800fc3a:	6923      	ldr	r3, [r4, #16]
 800fc3c:	9906      	ldr	r1, [sp, #24]
 800fc3e:	9805      	ldr	r0, [sp, #20]
 800fc40:	9d07      	ldr	r5, [sp, #28]
 800fc42:	47a8      	blx	r5
 800fc44:	3001      	adds	r0, #1
 800fc46:	d0ae      	beq.n	800fba6 <_printf_i+0x136>
 800fc48:	6823      	ldr	r3, [r4, #0]
 800fc4a:	079b      	lsls	r3, r3, #30
 800fc4c:	d415      	bmi.n	800fc7a <_printf_i+0x20a>
 800fc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc50:	68e0      	ldr	r0, [r4, #12]
 800fc52:	4298      	cmp	r0, r3
 800fc54:	daa9      	bge.n	800fbaa <_printf_i+0x13a>
 800fc56:	0018      	movs	r0, r3
 800fc58:	e7a7      	b.n	800fbaa <_printf_i+0x13a>
 800fc5a:	0022      	movs	r2, r4
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	9906      	ldr	r1, [sp, #24]
 800fc60:	9805      	ldr	r0, [sp, #20]
 800fc62:	9e07      	ldr	r6, [sp, #28]
 800fc64:	3219      	adds	r2, #25
 800fc66:	47b0      	blx	r6
 800fc68:	3001      	adds	r0, #1
 800fc6a:	d09c      	beq.n	800fba6 <_printf_i+0x136>
 800fc6c:	3501      	adds	r5, #1
 800fc6e:	68e3      	ldr	r3, [r4, #12]
 800fc70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc72:	1a9b      	subs	r3, r3, r2
 800fc74:	42ab      	cmp	r3, r5
 800fc76:	dcf0      	bgt.n	800fc5a <_printf_i+0x1ea>
 800fc78:	e7e9      	b.n	800fc4e <_printf_i+0x1de>
 800fc7a:	2500      	movs	r5, #0
 800fc7c:	e7f7      	b.n	800fc6e <_printf_i+0x1fe>
 800fc7e:	46c0      	nop			@ (mov r8, r8)
 800fc80:	08012d94 	.word	0x08012d94
 800fc84:	08012da5 	.word	0x08012da5

0800fc88 <std>:
 800fc88:	2300      	movs	r3, #0
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	0004      	movs	r4, r0
 800fc8e:	6003      	str	r3, [r0, #0]
 800fc90:	6043      	str	r3, [r0, #4]
 800fc92:	6083      	str	r3, [r0, #8]
 800fc94:	8181      	strh	r1, [r0, #12]
 800fc96:	6643      	str	r3, [r0, #100]	@ 0x64
 800fc98:	81c2      	strh	r2, [r0, #14]
 800fc9a:	6103      	str	r3, [r0, #16]
 800fc9c:	6143      	str	r3, [r0, #20]
 800fc9e:	6183      	str	r3, [r0, #24]
 800fca0:	0019      	movs	r1, r3
 800fca2:	2208      	movs	r2, #8
 800fca4:	305c      	adds	r0, #92	@ 0x5c
 800fca6:	f000 f935 	bl	800ff14 <memset>
 800fcaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fcd8 <std+0x50>)
 800fcac:	6224      	str	r4, [r4, #32]
 800fcae:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcb0:	4b0a      	ldr	r3, [pc, #40]	@ (800fcdc <std+0x54>)
 800fcb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800fce0 <std+0x58>)
 800fcb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fce4 <std+0x5c>)
 800fcba:	6323      	str	r3, [r4, #48]	@ 0x30
 800fcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800fce8 <std+0x60>)
 800fcbe:	429c      	cmp	r4, r3
 800fcc0:	d005      	beq.n	800fcce <std+0x46>
 800fcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800fcec <std+0x64>)
 800fcc4:	429c      	cmp	r4, r3
 800fcc6:	d002      	beq.n	800fcce <std+0x46>
 800fcc8:	4b09      	ldr	r3, [pc, #36]	@ (800fcf0 <std+0x68>)
 800fcca:	429c      	cmp	r4, r3
 800fccc:	d103      	bne.n	800fcd6 <std+0x4e>
 800fcce:	0020      	movs	r0, r4
 800fcd0:	3058      	adds	r0, #88	@ 0x58
 800fcd2:	f000 f9b5 	bl	8010040 <__retarget_lock_init_recursive>
 800fcd6:	bd10      	pop	{r4, pc}
 800fcd8:	0800fe7d 	.word	0x0800fe7d
 800fcdc:	0800fea5 	.word	0x0800fea5
 800fce0:	0800fedd 	.word	0x0800fedd
 800fce4:	0800ff09 	.word	0x0800ff09
 800fce8:	2000215c 	.word	0x2000215c
 800fcec:	200021c4 	.word	0x200021c4
 800fcf0:	2000222c 	.word	0x2000222c

0800fcf4 <stdio_exit_handler>:
 800fcf4:	b510      	push	{r4, lr}
 800fcf6:	4a03      	ldr	r2, [pc, #12]	@ (800fd04 <stdio_exit_handler+0x10>)
 800fcf8:	4903      	ldr	r1, [pc, #12]	@ (800fd08 <stdio_exit_handler+0x14>)
 800fcfa:	4804      	ldr	r0, [pc, #16]	@ (800fd0c <stdio_exit_handler+0x18>)
 800fcfc:	f000 f86c 	bl	800fdd8 <_fwalk_sglue>
 800fd00:	bd10      	pop	{r4, pc}
 800fd02:	46c0      	nop			@ (mov r8, r8)
 800fd04:	20000190 	.word	0x20000190
 800fd08:	080123b5 	.word	0x080123b5
 800fd0c:	2000030c 	.word	0x2000030c

0800fd10 <cleanup_stdio>:
 800fd10:	6841      	ldr	r1, [r0, #4]
 800fd12:	4b0b      	ldr	r3, [pc, #44]	@ (800fd40 <cleanup_stdio+0x30>)
 800fd14:	b510      	push	{r4, lr}
 800fd16:	0004      	movs	r4, r0
 800fd18:	4299      	cmp	r1, r3
 800fd1a:	d001      	beq.n	800fd20 <cleanup_stdio+0x10>
 800fd1c:	f002 fb4a 	bl	80123b4 <_fflush_r>
 800fd20:	68a1      	ldr	r1, [r4, #8]
 800fd22:	4b08      	ldr	r3, [pc, #32]	@ (800fd44 <cleanup_stdio+0x34>)
 800fd24:	4299      	cmp	r1, r3
 800fd26:	d002      	beq.n	800fd2e <cleanup_stdio+0x1e>
 800fd28:	0020      	movs	r0, r4
 800fd2a:	f002 fb43 	bl	80123b4 <_fflush_r>
 800fd2e:	68e1      	ldr	r1, [r4, #12]
 800fd30:	4b05      	ldr	r3, [pc, #20]	@ (800fd48 <cleanup_stdio+0x38>)
 800fd32:	4299      	cmp	r1, r3
 800fd34:	d002      	beq.n	800fd3c <cleanup_stdio+0x2c>
 800fd36:	0020      	movs	r0, r4
 800fd38:	f002 fb3c 	bl	80123b4 <_fflush_r>
 800fd3c:	bd10      	pop	{r4, pc}
 800fd3e:	46c0      	nop			@ (mov r8, r8)
 800fd40:	2000215c 	.word	0x2000215c
 800fd44:	200021c4 	.word	0x200021c4
 800fd48:	2000222c 	.word	0x2000222c

0800fd4c <global_stdio_init.part.0>:
 800fd4c:	b510      	push	{r4, lr}
 800fd4e:	4b09      	ldr	r3, [pc, #36]	@ (800fd74 <global_stdio_init.part.0+0x28>)
 800fd50:	4a09      	ldr	r2, [pc, #36]	@ (800fd78 <global_stdio_init.part.0+0x2c>)
 800fd52:	2104      	movs	r1, #4
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	4809      	ldr	r0, [pc, #36]	@ (800fd7c <global_stdio_init.part.0+0x30>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	f7ff ff95 	bl	800fc88 <std>
 800fd5e:	2201      	movs	r2, #1
 800fd60:	2109      	movs	r1, #9
 800fd62:	4807      	ldr	r0, [pc, #28]	@ (800fd80 <global_stdio_init.part.0+0x34>)
 800fd64:	f7ff ff90 	bl	800fc88 <std>
 800fd68:	2202      	movs	r2, #2
 800fd6a:	2112      	movs	r1, #18
 800fd6c:	4805      	ldr	r0, [pc, #20]	@ (800fd84 <global_stdio_init.part.0+0x38>)
 800fd6e:	f7ff ff8b 	bl	800fc88 <std>
 800fd72:	bd10      	pop	{r4, pc}
 800fd74:	20002294 	.word	0x20002294
 800fd78:	0800fcf5 	.word	0x0800fcf5
 800fd7c:	2000215c 	.word	0x2000215c
 800fd80:	200021c4 	.word	0x200021c4
 800fd84:	2000222c 	.word	0x2000222c

0800fd88 <__sfp_lock_acquire>:
 800fd88:	b510      	push	{r4, lr}
 800fd8a:	4802      	ldr	r0, [pc, #8]	@ (800fd94 <__sfp_lock_acquire+0xc>)
 800fd8c:	f000 f959 	bl	8010042 <__retarget_lock_acquire_recursive>
 800fd90:	bd10      	pop	{r4, pc}
 800fd92:	46c0      	nop			@ (mov r8, r8)
 800fd94:	2000229d 	.word	0x2000229d

0800fd98 <__sfp_lock_release>:
 800fd98:	b510      	push	{r4, lr}
 800fd9a:	4802      	ldr	r0, [pc, #8]	@ (800fda4 <__sfp_lock_release+0xc>)
 800fd9c:	f000 f952 	bl	8010044 <__retarget_lock_release_recursive>
 800fda0:	bd10      	pop	{r4, pc}
 800fda2:	46c0      	nop			@ (mov r8, r8)
 800fda4:	2000229d 	.word	0x2000229d

0800fda8 <__sinit>:
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	0004      	movs	r4, r0
 800fdac:	f7ff ffec 	bl	800fd88 <__sfp_lock_acquire>
 800fdb0:	6a23      	ldr	r3, [r4, #32]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <__sinit+0x14>
 800fdb6:	f7ff ffef 	bl	800fd98 <__sfp_lock_release>
 800fdba:	bd10      	pop	{r4, pc}
 800fdbc:	4b04      	ldr	r3, [pc, #16]	@ (800fdd0 <__sinit+0x28>)
 800fdbe:	6223      	str	r3, [r4, #32]
 800fdc0:	4b04      	ldr	r3, [pc, #16]	@ (800fdd4 <__sinit+0x2c>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1f6      	bne.n	800fdb6 <__sinit+0xe>
 800fdc8:	f7ff ffc0 	bl	800fd4c <global_stdio_init.part.0>
 800fdcc:	e7f3      	b.n	800fdb6 <__sinit+0xe>
 800fdce:	46c0      	nop			@ (mov r8, r8)
 800fdd0:	0800fd11 	.word	0x0800fd11
 800fdd4:	20002294 	.word	0x20002294

0800fdd8 <_fwalk_sglue>:
 800fdd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdda:	0014      	movs	r4, r2
 800fddc:	2600      	movs	r6, #0
 800fdde:	9000      	str	r0, [sp, #0]
 800fde0:	9101      	str	r1, [sp, #4]
 800fde2:	68a5      	ldr	r5, [r4, #8]
 800fde4:	6867      	ldr	r7, [r4, #4]
 800fde6:	3f01      	subs	r7, #1
 800fde8:	d504      	bpl.n	800fdf4 <_fwalk_sglue+0x1c>
 800fdea:	6824      	ldr	r4, [r4, #0]
 800fdec:	2c00      	cmp	r4, #0
 800fdee:	d1f8      	bne.n	800fde2 <_fwalk_sglue+0xa>
 800fdf0:	0030      	movs	r0, r6
 800fdf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fdf4:	89ab      	ldrh	r3, [r5, #12]
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d908      	bls.n	800fe0c <_fwalk_sglue+0x34>
 800fdfa:	220e      	movs	r2, #14
 800fdfc:	5eab      	ldrsh	r3, [r5, r2]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	d004      	beq.n	800fe0c <_fwalk_sglue+0x34>
 800fe02:	0029      	movs	r1, r5
 800fe04:	9800      	ldr	r0, [sp, #0]
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	4798      	blx	r3
 800fe0a:	4306      	orrs	r6, r0
 800fe0c:	3568      	adds	r5, #104	@ 0x68
 800fe0e:	e7ea      	b.n	800fde6 <_fwalk_sglue+0xe>

0800fe10 <sniprintf>:
 800fe10:	b40c      	push	{r2, r3}
 800fe12:	b530      	push	{r4, r5, lr}
 800fe14:	4b18      	ldr	r3, [pc, #96]	@ (800fe78 <sniprintf+0x68>)
 800fe16:	000c      	movs	r4, r1
 800fe18:	681d      	ldr	r5, [r3, #0]
 800fe1a:	b09d      	sub	sp, #116	@ 0x74
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	da08      	bge.n	800fe32 <sniprintf+0x22>
 800fe20:	238b      	movs	r3, #139	@ 0x8b
 800fe22:	2001      	movs	r0, #1
 800fe24:	602b      	str	r3, [r5, #0]
 800fe26:	4240      	negs	r0, r0
 800fe28:	b01d      	add	sp, #116	@ 0x74
 800fe2a:	bc30      	pop	{r4, r5}
 800fe2c:	bc08      	pop	{r3}
 800fe2e:	b002      	add	sp, #8
 800fe30:	4718      	bx	r3
 800fe32:	2382      	movs	r3, #130	@ 0x82
 800fe34:	466a      	mov	r2, sp
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	8293      	strh	r3, [r2, #20]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	9002      	str	r0, [sp, #8]
 800fe3e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fe40:	9006      	str	r0, [sp, #24]
 800fe42:	4299      	cmp	r1, r3
 800fe44:	d000      	beq.n	800fe48 <sniprintf+0x38>
 800fe46:	1e4b      	subs	r3, r1, #1
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	9307      	str	r3, [sp, #28]
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	466a      	mov	r2, sp
 800fe50:	425b      	negs	r3, r3
 800fe52:	82d3      	strh	r3, [r2, #22]
 800fe54:	0028      	movs	r0, r5
 800fe56:	ab21      	add	r3, sp, #132	@ 0x84
 800fe58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fe5a:	a902      	add	r1, sp, #8
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	f002 f925 	bl	80120ac <_svfiprintf_r>
 800fe62:	1c43      	adds	r3, r0, #1
 800fe64:	da01      	bge.n	800fe6a <sniprintf+0x5a>
 800fe66:	238b      	movs	r3, #139	@ 0x8b
 800fe68:	602b      	str	r3, [r5, #0]
 800fe6a:	2c00      	cmp	r4, #0
 800fe6c:	d0dc      	beq.n	800fe28 <sniprintf+0x18>
 800fe6e:	2200      	movs	r2, #0
 800fe70:	9b02      	ldr	r3, [sp, #8]
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	e7d8      	b.n	800fe28 <sniprintf+0x18>
 800fe76:	46c0      	nop			@ (mov r8, r8)
 800fe78:	20000308 	.word	0x20000308

0800fe7c <__sread>:
 800fe7c:	b570      	push	{r4, r5, r6, lr}
 800fe7e:	000c      	movs	r4, r1
 800fe80:	250e      	movs	r5, #14
 800fe82:	5f49      	ldrsh	r1, [r1, r5]
 800fe84:	f000 f88a 	bl	800ff9c <_read_r>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	db03      	blt.n	800fe94 <__sread+0x18>
 800fe8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800fe8e:	181b      	adds	r3, r3, r0
 800fe90:	6563      	str	r3, [r4, #84]	@ 0x54
 800fe92:	bd70      	pop	{r4, r5, r6, pc}
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	4a02      	ldr	r2, [pc, #8]	@ (800fea0 <__sread+0x24>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	e7f9      	b.n	800fe92 <__sread+0x16>
 800fe9e:	46c0      	nop			@ (mov r8, r8)
 800fea0:	ffffefff 	.word	0xffffefff

0800fea4 <__swrite>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	001f      	movs	r7, r3
 800fea8:	898b      	ldrh	r3, [r1, #12]
 800feaa:	0005      	movs	r5, r0
 800feac:	000c      	movs	r4, r1
 800feae:	0016      	movs	r6, r2
 800feb0:	05db      	lsls	r3, r3, #23
 800feb2:	d505      	bpl.n	800fec0 <__swrite+0x1c>
 800feb4:	230e      	movs	r3, #14
 800feb6:	5ec9      	ldrsh	r1, [r1, r3]
 800feb8:	2200      	movs	r2, #0
 800feba:	2302      	movs	r3, #2
 800febc:	f000 f85a 	bl	800ff74 <_lseek_r>
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	4a05      	ldr	r2, [pc, #20]	@ (800fed8 <__swrite+0x34>)
 800fec4:	0028      	movs	r0, r5
 800fec6:	4013      	ands	r3, r2
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	0032      	movs	r2, r6
 800fecc:	230e      	movs	r3, #14
 800fece:	5ee1      	ldrsh	r1, [r4, r3]
 800fed0:	003b      	movs	r3, r7
 800fed2:	f000 f877 	bl	800ffc4 <_write_r>
 800fed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed8:	ffffefff 	.word	0xffffefff

0800fedc <__sseek>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	000c      	movs	r4, r1
 800fee0:	250e      	movs	r5, #14
 800fee2:	5f49      	ldrsh	r1, [r1, r5]
 800fee4:	f000 f846 	bl	800ff74 <_lseek_r>
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	1c42      	adds	r2, r0, #1
 800feec:	d103      	bne.n	800fef6 <__sseek+0x1a>
 800feee:	4a05      	ldr	r2, [pc, #20]	@ (800ff04 <__sseek+0x28>)
 800fef0:	4013      	ands	r3, r2
 800fef2:	81a3      	strh	r3, [r4, #12]
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	2280      	movs	r2, #128	@ 0x80
 800fef8:	0152      	lsls	r2, r2, #5
 800fefa:	4313      	orrs	r3, r2
 800fefc:	81a3      	strh	r3, [r4, #12]
 800fefe:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff00:	e7f8      	b.n	800fef4 <__sseek+0x18>
 800ff02:	46c0      	nop			@ (mov r8, r8)
 800ff04:	ffffefff 	.word	0xffffefff

0800ff08 <__sclose>:
 800ff08:	b510      	push	{r4, lr}
 800ff0a:	230e      	movs	r3, #14
 800ff0c:	5ec9      	ldrsh	r1, [r1, r3]
 800ff0e:	f000 f81f 	bl	800ff50 <_close_r>
 800ff12:	bd10      	pop	{r4, pc}

0800ff14 <memset>:
 800ff14:	0003      	movs	r3, r0
 800ff16:	1882      	adds	r2, r0, r2
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d100      	bne.n	800ff1e <memset+0xa>
 800ff1c:	4770      	bx	lr
 800ff1e:	7019      	strb	r1, [r3, #0]
 800ff20:	3301      	adds	r3, #1
 800ff22:	e7f9      	b.n	800ff18 <memset+0x4>

0800ff24 <strncmp>:
 800ff24:	b530      	push	{r4, r5, lr}
 800ff26:	0005      	movs	r5, r0
 800ff28:	1e10      	subs	r0, r2, #0
 800ff2a:	d00b      	beq.n	800ff44 <strncmp+0x20>
 800ff2c:	2400      	movs	r4, #0
 800ff2e:	3a01      	subs	r2, #1
 800ff30:	5d2b      	ldrb	r3, [r5, r4]
 800ff32:	5d08      	ldrb	r0, [r1, r4]
 800ff34:	4283      	cmp	r3, r0
 800ff36:	d104      	bne.n	800ff42 <strncmp+0x1e>
 800ff38:	4294      	cmp	r4, r2
 800ff3a:	d002      	beq.n	800ff42 <strncmp+0x1e>
 800ff3c:	3401      	adds	r4, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1f6      	bne.n	800ff30 <strncmp+0xc>
 800ff42:	1a18      	subs	r0, r3, r0
 800ff44:	bd30      	pop	{r4, r5, pc}
	...

0800ff48 <_localeconv_r>:
 800ff48:	4800      	ldr	r0, [pc, #0]	@ (800ff4c <_localeconv_r+0x4>)
 800ff4a:	4770      	bx	lr
 800ff4c:	2000028c 	.word	0x2000028c

0800ff50 <_close_r>:
 800ff50:	2300      	movs	r3, #0
 800ff52:	b570      	push	{r4, r5, r6, lr}
 800ff54:	4d06      	ldr	r5, [pc, #24]	@ (800ff70 <_close_r+0x20>)
 800ff56:	0004      	movs	r4, r0
 800ff58:	0008      	movs	r0, r1
 800ff5a:	602b      	str	r3, [r5, #0]
 800ff5c:	f7f4 f892 	bl	8004084 <_close>
 800ff60:	1c43      	adds	r3, r0, #1
 800ff62:	d103      	bne.n	800ff6c <_close_r+0x1c>
 800ff64:	682b      	ldr	r3, [r5, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d000      	beq.n	800ff6c <_close_r+0x1c>
 800ff6a:	6023      	str	r3, [r4, #0]
 800ff6c:	bd70      	pop	{r4, r5, r6, pc}
 800ff6e:	46c0      	nop			@ (mov r8, r8)
 800ff70:	20002298 	.word	0x20002298

0800ff74 <_lseek_r>:
 800ff74:	b570      	push	{r4, r5, r6, lr}
 800ff76:	0004      	movs	r4, r0
 800ff78:	0008      	movs	r0, r1
 800ff7a:	0011      	movs	r1, r2
 800ff7c:	001a      	movs	r2, r3
 800ff7e:	2300      	movs	r3, #0
 800ff80:	4d05      	ldr	r5, [pc, #20]	@ (800ff98 <_lseek_r+0x24>)
 800ff82:	602b      	str	r3, [r5, #0]
 800ff84:	f7f4 f89f 	bl	80040c6 <_lseek>
 800ff88:	1c43      	adds	r3, r0, #1
 800ff8a:	d103      	bne.n	800ff94 <_lseek_r+0x20>
 800ff8c:	682b      	ldr	r3, [r5, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d000      	beq.n	800ff94 <_lseek_r+0x20>
 800ff92:	6023      	str	r3, [r4, #0]
 800ff94:	bd70      	pop	{r4, r5, r6, pc}
 800ff96:	46c0      	nop			@ (mov r8, r8)
 800ff98:	20002298 	.word	0x20002298

0800ff9c <_read_r>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	0004      	movs	r4, r0
 800ffa0:	0008      	movs	r0, r1
 800ffa2:	0011      	movs	r1, r2
 800ffa4:	001a      	movs	r2, r3
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	4d05      	ldr	r5, [pc, #20]	@ (800ffc0 <_read_r+0x24>)
 800ffaa:	602b      	str	r3, [r5, #0]
 800ffac:	f7f4 f831 	bl	8004012 <_read>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d103      	bne.n	800ffbc <_read_r+0x20>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d000      	beq.n	800ffbc <_read_r+0x20>
 800ffba:	6023      	str	r3, [r4, #0]
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	46c0      	nop			@ (mov r8, r8)
 800ffc0:	20002298 	.word	0x20002298

0800ffc4 <_write_r>:
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	0004      	movs	r4, r0
 800ffc8:	0008      	movs	r0, r1
 800ffca:	0011      	movs	r1, r2
 800ffcc:	001a      	movs	r2, r3
 800ffce:	2300      	movs	r3, #0
 800ffd0:	4d05      	ldr	r5, [pc, #20]	@ (800ffe8 <_write_r+0x24>)
 800ffd2:	602b      	str	r3, [r5, #0]
 800ffd4:	f7f4 f83a 	bl	800404c <_write>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d103      	bne.n	800ffe4 <_write_r+0x20>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d000      	beq.n	800ffe4 <_write_r+0x20>
 800ffe2:	6023      	str	r3, [r4, #0]
 800ffe4:	bd70      	pop	{r4, r5, r6, pc}
 800ffe6:	46c0      	nop			@ (mov r8, r8)
 800ffe8:	20002298 	.word	0x20002298

0800ffec <__errno>:
 800ffec:	4b01      	ldr	r3, [pc, #4]	@ (800fff4 <__errno+0x8>)
 800ffee:	6818      	ldr	r0, [r3, #0]
 800fff0:	4770      	bx	lr
 800fff2:	46c0      	nop			@ (mov r8, r8)
 800fff4:	20000308 	.word	0x20000308

0800fff8 <__libc_init_array>:
 800fff8:	b570      	push	{r4, r5, r6, lr}
 800fffa:	2600      	movs	r6, #0
 800fffc:	4c0c      	ldr	r4, [pc, #48]	@ (8010030 <__libc_init_array+0x38>)
 800fffe:	4d0d      	ldr	r5, [pc, #52]	@ (8010034 <__libc_init_array+0x3c>)
 8010000:	1b64      	subs	r4, r4, r5
 8010002:	10a4      	asrs	r4, r4, #2
 8010004:	42a6      	cmp	r6, r4
 8010006:	d109      	bne.n	801001c <__libc_init_array+0x24>
 8010008:	2600      	movs	r6, #0
 801000a:	f002 fd7b 	bl	8012b04 <_init>
 801000e:	4c0a      	ldr	r4, [pc, #40]	@ (8010038 <__libc_init_array+0x40>)
 8010010:	4d0a      	ldr	r5, [pc, #40]	@ (801003c <__libc_init_array+0x44>)
 8010012:	1b64      	subs	r4, r4, r5
 8010014:	10a4      	asrs	r4, r4, #2
 8010016:	42a6      	cmp	r6, r4
 8010018:	d105      	bne.n	8010026 <__libc_init_array+0x2e>
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	00b3      	lsls	r3, r6, #2
 801001e:	58eb      	ldr	r3, [r5, r3]
 8010020:	4798      	blx	r3
 8010022:	3601      	adds	r6, #1
 8010024:	e7ee      	b.n	8010004 <__libc_init_array+0xc>
 8010026:	00b3      	lsls	r3, r6, #2
 8010028:	58eb      	ldr	r3, [r5, r3]
 801002a:	4798      	blx	r3
 801002c:	3601      	adds	r6, #1
 801002e:	e7f2      	b.n	8010016 <__libc_init_array+0x1e>
 8010030:	080131ac 	.word	0x080131ac
 8010034:	080131ac 	.word	0x080131ac
 8010038:	080131b0 	.word	0x080131b0
 801003c:	080131ac 	.word	0x080131ac

08010040 <__retarget_lock_init_recursive>:
 8010040:	4770      	bx	lr

08010042 <__retarget_lock_acquire_recursive>:
 8010042:	4770      	bx	lr

08010044 <__retarget_lock_release_recursive>:
 8010044:	4770      	bx	lr

08010046 <memchr>:
 8010046:	b2c9      	uxtb	r1, r1
 8010048:	1882      	adds	r2, r0, r2
 801004a:	4290      	cmp	r0, r2
 801004c:	d101      	bne.n	8010052 <memchr+0xc>
 801004e:	2000      	movs	r0, #0
 8010050:	4770      	bx	lr
 8010052:	7803      	ldrb	r3, [r0, #0]
 8010054:	428b      	cmp	r3, r1
 8010056:	d0fb      	beq.n	8010050 <memchr+0xa>
 8010058:	3001      	adds	r0, #1
 801005a:	e7f6      	b.n	801004a <memchr+0x4>

0801005c <memcpy>:
 801005c:	2300      	movs	r3, #0
 801005e:	b510      	push	{r4, lr}
 8010060:	429a      	cmp	r2, r3
 8010062:	d100      	bne.n	8010066 <memcpy+0xa>
 8010064:	bd10      	pop	{r4, pc}
 8010066:	5ccc      	ldrb	r4, [r1, r3]
 8010068:	54c4      	strb	r4, [r0, r3]
 801006a:	3301      	adds	r3, #1
 801006c:	e7f8      	b.n	8010060 <memcpy+0x4>
	...

08010070 <nan>:
 8010070:	2000      	movs	r0, #0
 8010072:	4901      	ldr	r1, [pc, #4]	@ (8010078 <nan+0x8>)
 8010074:	4770      	bx	lr
 8010076:	46c0      	nop			@ (mov r8, r8)
 8010078:	7ff80000 	.word	0x7ff80000

0801007c <quorem>:
 801007c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801007e:	6903      	ldr	r3, [r0, #16]
 8010080:	690c      	ldr	r4, [r1, #16]
 8010082:	b089      	sub	sp, #36	@ 0x24
 8010084:	9003      	str	r0, [sp, #12]
 8010086:	9106      	str	r1, [sp, #24]
 8010088:	2000      	movs	r0, #0
 801008a:	42a3      	cmp	r3, r4
 801008c:	db63      	blt.n	8010156 <quorem+0xda>
 801008e:	000b      	movs	r3, r1
 8010090:	3c01      	subs	r4, #1
 8010092:	3314      	adds	r3, #20
 8010094:	00a5      	lsls	r5, r4, #2
 8010096:	9304      	str	r3, [sp, #16]
 8010098:	195b      	adds	r3, r3, r5
 801009a:	9305      	str	r3, [sp, #20]
 801009c:	9b03      	ldr	r3, [sp, #12]
 801009e:	3314      	adds	r3, #20
 80100a0:	9301      	str	r3, [sp, #4]
 80100a2:	195d      	adds	r5, r3, r5
 80100a4:	9b05      	ldr	r3, [sp, #20]
 80100a6:	682f      	ldr	r7, [r5, #0]
 80100a8:	681e      	ldr	r6, [r3, #0]
 80100aa:	0038      	movs	r0, r7
 80100ac:	3601      	adds	r6, #1
 80100ae:	0031      	movs	r1, r6
 80100b0:	f7f0 f842 	bl	8000138 <__udivsi3>
 80100b4:	9002      	str	r0, [sp, #8]
 80100b6:	42b7      	cmp	r7, r6
 80100b8:	d327      	bcc.n	801010a <quorem+0x8e>
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	2700      	movs	r7, #0
 80100be:	469c      	mov	ip, r3
 80100c0:	9e01      	ldr	r6, [sp, #4]
 80100c2:	9707      	str	r7, [sp, #28]
 80100c4:	4662      	mov	r2, ip
 80100c6:	ca08      	ldmia	r2!, {r3}
 80100c8:	6830      	ldr	r0, [r6, #0]
 80100ca:	4694      	mov	ip, r2
 80100cc:	9a02      	ldr	r2, [sp, #8]
 80100ce:	b299      	uxth	r1, r3
 80100d0:	4351      	muls	r1, r2
 80100d2:	0c1b      	lsrs	r3, r3, #16
 80100d4:	4353      	muls	r3, r2
 80100d6:	19c9      	adds	r1, r1, r7
 80100d8:	0c0a      	lsrs	r2, r1, #16
 80100da:	189b      	adds	r3, r3, r2
 80100dc:	b289      	uxth	r1, r1
 80100de:	b282      	uxth	r2, r0
 80100e0:	1a52      	subs	r2, r2, r1
 80100e2:	9907      	ldr	r1, [sp, #28]
 80100e4:	0c1f      	lsrs	r7, r3, #16
 80100e6:	1852      	adds	r2, r2, r1
 80100e8:	0c00      	lsrs	r0, r0, #16
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	1411      	asrs	r1, r2, #16
 80100ee:	1ac3      	subs	r3, r0, r3
 80100f0:	185b      	adds	r3, r3, r1
 80100f2:	1419      	asrs	r1, r3, #16
 80100f4:	b292      	uxth	r2, r2
 80100f6:	041b      	lsls	r3, r3, #16
 80100f8:	431a      	orrs	r2, r3
 80100fa:	9b05      	ldr	r3, [sp, #20]
 80100fc:	9107      	str	r1, [sp, #28]
 80100fe:	c604      	stmia	r6!, {r2}
 8010100:	4563      	cmp	r3, ip
 8010102:	d2df      	bcs.n	80100c4 <quorem+0x48>
 8010104:	682b      	ldr	r3, [r5, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d02b      	beq.n	8010162 <quorem+0xe6>
 801010a:	9906      	ldr	r1, [sp, #24]
 801010c:	9803      	ldr	r0, [sp, #12]
 801010e:	f001 fd6f 	bl	8011bf0 <__mcmp>
 8010112:	2800      	cmp	r0, #0
 8010114:	db1e      	blt.n	8010154 <quorem+0xd8>
 8010116:	2600      	movs	r6, #0
 8010118:	9d01      	ldr	r5, [sp, #4]
 801011a:	9904      	ldr	r1, [sp, #16]
 801011c:	c901      	ldmia	r1!, {r0}
 801011e:	682b      	ldr	r3, [r5, #0]
 8010120:	b287      	uxth	r7, r0
 8010122:	b29a      	uxth	r2, r3
 8010124:	1bd2      	subs	r2, r2, r7
 8010126:	1992      	adds	r2, r2, r6
 8010128:	0c00      	lsrs	r0, r0, #16
 801012a:	0c1b      	lsrs	r3, r3, #16
 801012c:	1a1b      	subs	r3, r3, r0
 801012e:	1410      	asrs	r0, r2, #16
 8010130:	181b      	adds	r3, r3, r0
 8010132:	141e      	asrs	r6, r3, #16
 8010134:	b292      	uxth	r2, r2
 8010136:	041b      	lsls	r3, r3, #16
 8010138:	431a      	orrs	r2, r3
 801013a:	9b05      	ldr	r3, [sp, #20]
 801013c:	c504      	stmia	r5!, {r2}
 801013e:	428b      	cmp	r3, r1
 8010140:	d2ec      	bcs.n	801011c <quorem+0xa0>
 8010142:	9a01      	ldr	r2, [sp, #4]
 8010144:	00a3      	lsls	r3, r4, #2
 8010146:	18d3      	adds	r3, r2, r3
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	2a00      	cmp	r2, #0
 801014c:	d014      	beq.n	8010178 <quorem+0xfc>
 801014e:	9b02      	ldr	r3, [sp, #8]
 8010150:	3301      	adds	r3, #1
 8010152:	9302      	str	r3, [sp, #8]
 8010154:	9802      	ldr	r0, [sp, #8]
 8010156:	b009      	add	sp, #36	@ 0x24
 8010158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015a:	682b      	ldr	r3, [r5, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d104      	bne.n	801016a <quorem+0xee>
 8010160:	3c01      	subs	r4, #1
 8010162:	9b01      	ldr	r3, [sp, #4]
 8010164:	3d04      	subs	r5, #4
 8010166:	42ab      	cmp	r3, r5
 8010168:	d3f7      	bcc.n	801015a <quorem+0xde>
 801016a:	9b03      	ldr	r3, [sp, #12]
 801016c:	611c      	str	r4, [r3, #16]
 801016e:	e7cc      	b.n	801010a <quorem+0x8e>
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	2a00      	cmp	r2, #0
 8010174:	d104      	bne.n	8010180 <quorem+0x104>
 8010176:	3c01      	subs	r4, #1
 8010178:	9a01      	ldr	r2, [sp, #4]
 801017a:	3b04      	subs	r3, #4
 801017c:	429a      	cmp	r2, r3
 801017e:	d3f7      	bcc.n	8010170 <quorem+0xf4>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	611c      	str	r4, [r3, #16]
 8010184:	e7e3      	b.n	801014e <quorem+0xd2>
	...

08010188 <_dtoa_r>:
 8010188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801018a:	0014      	movs	r4, r2
 801018c:	001d      	movs	r5, r3
 801018e:	69c6      	ldr	r6, [r0, #28]
 8010190:	b09d      	sub	sp, #116	@ 0x74
 8010192:	940a      	str	r4, [sp, #40]	@ 0x28
 8010194:	950b      	str	r5, [sp, #44]	@ 0x2c
 8010196:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8010198:	9003      	str	r0, [sp, #12]
 801019a:	2e00      	cmp	r6, #0
 801019c:	d10f      	bne.n	80101be <_dtoa_r+0x36>
 801019e:	2010      	movs	r0, #16
 80101a0:	f001 f986 	bl	80114b0 <malloc>
 80101a4:	9b03      	ldr	r3, [sp, #12]
 80101a6:	1e02      	subs	r2, r0, #0
 80101a8:	61d8      	str	r0, [r3, #28]
 80101aa:	d104      	bne.n	80101b6 <_dtoa_r+0x2e>
 80101ac:	21ef      	movs	r1, #239	@ 0xef
 80101ae:	4bc7      	ldr	r3, [pc, #796]	@ (80104cc <_dtoa_r+0x344>)
 80101b0:	48c7      	ldr	r0, [pc, #796]	@ (80104d0 <_dtoa_r+0x348>)
 80101b2:	f002 f94f 	bl	8012454 <__assert_func>
 80101b6:	6046      	str	r6, [r0, #4]
 80101b8:	6086      	str	r6, [r0, #8]
 80101ba:	6006      	str	r6, [r0, #0]
 80101bc:	60c6      	str	r6, [r0, #12]
 80101be:	9b03      	ldr	r3, [sp, #12]
 80101c0:	69db      	ldr	r3, [r3, #28]
 80101c2:	6819      	ldr	r1, [r3, #0]
 80101c4:	2900      	cmp	r1, #0
 80101c6:	d00b      	beq.n	80101e0 <_dtoa_r+0x58>
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	2301      	movs	r3, #1
 80101cc:	4093      	lsls	r3, r2
 80101ce:	604a      	str	r2, [r1, #4]
 80101d0:	608b      	str	r3, [r1, #8]
 80101d2:	9803      	ldr	r0, [sp, #12]
 80101d4:	f001 fa7e 	bl	80116d4 <_Bfree>
 80101d8:	2200      	movs	r2, #0
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	69db      	ldr	r3, [r3, #28]
 80101de:	601a      	str	r2, [r3, #0]
 80101e0:	2d00      	cmp	r5, #0
 80101e2:	da1e      	bge.n	8010222 <_dtoa_r+0x9a>
 80101e4:	2301      	movs	r3, #1
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	006b      	lsls	r3, r5, #1
 80101ea:	085b      	lsrs	r3, r3, #1
 80101ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80101f0:	4bb8      	ldr	r3, [pc, #736]	@ (80104d4 <_dtoa_r+0x34c>)
 80101f2:	4ab8      	ldr	r2, [pc, #736]	@ (80104d4 <_dtoa_r+0x34c>)
 80101f4:	403b      	ands	r3, r7
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d116      	bne.n	8010228 <_dtoa_r+0xa0>
 80101fa:	4bb7      	ldr	r3, [pc, #732]	@ (80104d8 <_dtoa_r+0x350>)
 80101fc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	033b      	lsls	r3, r7, #12
 8010202:	0b1b      	lsrs	r3, r3, #12
 8010204:	4323      	orrs	r3, r4
 8010206:	d101      	bne.n	801020c <_dtoa_r+0x84>
 8010208:	f000 fd80 	bl	8010d0c <_dtoa_r+0xb84>
 801020c:	4bb3      	ldr	r3, [pc, #716]	@ (80104dc <_dtoa_r+0x354>)
 801020e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010210:	9308      	str	r3, [sp, #32]
 8010212:	2a00      	cmp	r2, #0
 8010214:	d002      	beq.n	801021c <_dtoa_r+0x94>
 8010216:	4bb2      	ldr	r3, [pc, #712]	@ (80104e0 <_dtoa_r+0x358>)
 8010218:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	9808      	ldr	r0, [sp, #32]
 801021e:	b01d      	add	sp, #116	@ 0x74
 8010220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010222:	2300      	movs	r3, #0
 8010224:	603b      	str	r3, [r7, #0]
 8010226:	e7e2      	b.n	80101ee <_dtoa_r+0x66>
 8010228:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801022a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801022c:	9212      	str	r2, [sp, #72]	@ 0x48
 801022e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010230:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010232:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010234:	2200      	movs	r2, #0
 8010236:	2300      	movs	r3, #0
 8010238:	f7f0 f904 	bl	8000444 <__aeabi_dcmpeq>
 801023c:	1e06      	subs	r6, r0, #0
 801023e:	d00b      	beq.n	8010258 <_dtoa_r+0xd0>
 8010240:	2301      	movs	r3, #1
 8010242:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010244:	6013      	str	r3, [r2, #0]
 8010246:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010248:	2b00      	cmp	r3, #0
 801024a:	d002      	beq.n	8010252 <_dtoa_r+0xca>
 801024c:	4ba5      	ldr	r3, [pc, #660]	@ (80104e4 <_dtoa_r+0x35c>)
 801024e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010250:	6013      	str	r3, [r2, #0]
 8010252:	4ba5      	ldr	r3, [pc, #660]	@ (80104e8 <_dtoa_r+0x360>)
 8010254:	9308      	str	r3, [sp, #32]
 8010256:	e7e1      	b.n	801021c <_dtoa_r+0x94>
 8010258:	ab1a      	add	r3, sp, #104	@ 0x68
 801025a:	9301      	str	r3, [sp, #4]
 801025c:	ab1b      	add	r3, sp, #108	@ 0x6c
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	9803      	ldr	r0, [sp, #12]
 8010262:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010266:	f001 fde5 	bl	8011e34 <__d2b>
 801026a:	007a      	lsls	r2, r7, #1
 801026c:	9005      	str	r0, [sp, #20]
 801026e:	0d52      	lsrs	r2, r2, #21
 8010270:	d100      	bne.n	8010274 <_dtoa_r+0xec>
 8010272:	e07b      	b.n	801036c <_dtoa_r+0x1e4>
 8010274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010276:	9618      	str	r6, [sp, #96]	@ 0x60
 8010278:	0319      	lsls	r1, r3, #12
 801027a:	4b9c      	ldr	r3, [pc, #624]	@ (80104ec <_dtoa_r+0x364>)
 801027c:	0b09      	lsrs	r1, r1, #12
 801027e:	430b      	orrs	r3, r1
 8010280:	499b      	ldr	r1, [pc, #620]	@ (80104f0 <_dtoa_r+0x368>)
 8010282:	1857      	adds	r7, r2, r1
 8010284:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010286:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010288:	0019      	movs	r1, r3
 801028a:	2200      	movs	r2, #0
 801028c:	4b99      	ldr	r3, [pc, #612]	@ (80104f4 <_dtoa_r+0x36c>)
 801028e:	f7f1 fc5b 	bl	8001b48 <__aeabi_dsub>
 8010292:	4a99      	ldr	r2, [pc, #612]	@ (80104f8 <_dtoa_r+0x370>)
 8010294:	4b99      	ldr	r3, [pc, #612]	@ (80104fc <_dtoa_r+0x374>)
 8010296:	f7f1 f971 	bl	800157c <__aeabi_dmul>
 801029a:	4a99      	ldr	r2, [pc, #612]	@ (8010500 <_dtoa_r+0x378>)
 801029c:	4b99      	ldr	r3, [pc, #612]	@ (8010504 <_dtoa_r+0x37c>)
 801029e:	f7f0 f96d 	bl	800057c <__aeabi_dadd>
 80102a2:	0004      	movs	r4, r0
 80102a4:	0038      	movs	r0, r7
 80102a6:	000d      	movs	r5, r1
 80102a8:	f7f2 f8b6 	bl	8002418 <__aeabi_i2d>
 80102ac:	4a96      	ldr	r2, [pc, #600]	@ (8010508 <_dtoa_r+0x380>)
 80102ae:	4b97      	ldr	r3, [pc, #604]	@ (801050c <_dtoa_r+0x384>)
 80102b0:	f7f1 f964 	bl	800157c <__aeabi_dmul>
 80102b4:	0002      	movs	r2, r0
 80102b6:	000b      	movs	r3, r1
 80102b8:	0020      	movs	r0, r4
 80102ba:	0029      	movs	r1, r5
 80102bc:	f7f0 f95e 	bl	800057c <__aeabi_dadd>
 80102c0:	0004      	movs	r4, r0
 80102c2:	000d      	movs	r5, r1
 80102c4:	f7f2 f86c 	bl	80023a0 <__aeabi_d2iz>
 80102c8:	2200      	movs	r2, #0
 80102ca:	9004      	str	r0, [sp, #16]
 80102cc:	2300      	movs	r3, #0
 80102ce:	0020      	movs	r0, r4
 80102d0:	0029      	movs	r1, r5
 80102d2:	f7f0 f8bd 	bl	8000450 <__aeabi_dcmplt>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d00b      	beq.n	80102f2 <_dtoa_r+0x16a>
 80102da:	9804      	ldr	r0, [sp, #16]
 80102dc:	f7f2 f89c 	bl	8002418 <__aeabi_i2d>
 80102e0:	002b      	movs	r3, r5
 80102e2:	0022      	movs	r2, r4
 80102e4:	f7f0 f8ae 	bl	8000444 <__aeabi_dcmpeq>
 80102e8:	4243      	negs	r3, r0
 80102ea:	4158      	adcs	r0, r3
 80102ec:	9b04      	ldr	r3, [sp, #16]
 80102ee:	1a1b      	subs	r3, r3, r0
 80102f0:	9304      	str	r3, [sp, #16]
 80102f2:	2301      	movs	r3, #1
 80102f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	2b16      	cmp	r3, #22
 80102fa:	d810      	bhi.n	801031e <_dtoa_r+0x196>
 80102fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80102fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010300:	9a04      	ldr	r2, [sp, #16]
 8010302:	4b83      	ldr	r3, [pc, #524]	@ (8010510 <_dtoa_r+0x388>)
 8010304:	00d2      	lsls	r2, r2, #3
 8010306:	189b      	adds	r3, r3, r2
 8010308:	681a      	ldr	r2, [r3, #0]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	f7f0 f8a0 	bl	8000450 <__aeabi_dcmplt>
 8010310:	2800      	cmp	r0, #0
 8010312:	d047      	beq.n	80103a4 <_dtoa_r+0x21c>
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	3b01      	subs	r3, #1
 8010318:	9304      	str	r3, [sp, #16]
 801031a:	2300      	movs	r3, #0
 801031c:	9315      	str	r3, [sp, #84]	@ 0x54
 801031e:	2200      	movs	r2, #0
 8010320:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010322:	9206      	str	r2, [sp, #24]
 8010324:	1bdb      	subs	r3, r3, r7
 8010326:	1e5a      	subs	r2, r3, #1
 8010328:	d53e      	bpl.n	80103a8 <_dtoa_r+0x220>
 801032a:	2201      	movs	r2, #1
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	9306      	str	r3, [sp, #24]
 8010330:	2300      	movs	r3, #0
 8010332:	930d      	str	r3, [sp, #52]	@ 0x34
 8010334:	9b04      	ldr	r3, [sp, #16]
 8010336:	2b00      	cmp	r3, #0
 8010338:	db38      	blt.n	80103ac <_dtoa_r+0x224>
 801033a:	9a04      	ldr	r2, [sp, #16]
 801033c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801033e:	4694      	mov	ip, r2
 8010340:	4463      	add	r3, ip
 8010342:	930d      	str	r3, [sp, #52]	@ 0x34
 8010344:	2300      	movs	r3, #0
 8010346:	9214      	str	r2, [sp, #80]	@ 0x50
 8010348:	930f      	str	r3, [sp, #60]	@ 0x3c
 801034a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801034c:	2401      	movs	r4, #1
 801034e:	2b09      	cmp	r3, #9
 8010350:	d862      	bhi.n	8010418 <_dtoa_r+0x290>
 8010352:	2b05      	cmp	r3, #5
 8010354:	dd02      	ble.n	801035c <_dtoa_r+0x1d4>
 8010356:	2400      	movs	r4, #0
 8010358:	3b04      	subs	r3, #4
 801035a:	9322      	str	r3, [sp, #136]	@ 0x88
 801035c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801035e:	1e98      	subs	r0, r3, #2
 8010360:	2803      	cmp	r0, #3
 8010362:	d863      	bhi.n	801042c <_dtoa_r+0x2a4>
 8010364:	f7ef fed4 	bl	8000110 <__gnu_thumb1_case_uqi>
 8010368:	2b385654 	.word	0x2b385654
 801036c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801036e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010370:	18f6      	adds	r6, r6, r3
 8010372:	4b68      	ldr	r3, [pc, #416]	@ (8010514 <_dtoa_r+0x38c>)
 8010374:	18f2      	adds	r2, r6, r3
 8010376:	2a20      	cmp	r2, #32
 8010378:	dd0f      	ble.n	801039a <_dtoa_r+0x212>
 801037a:	2340      	movs	r3, #64	@ 0x40
 801037c:	1a9b      	subs	r3, r3, r2
 801037e:	409f      	lsls	r7, r3
 8010380:	4b65      	ldr	r3, [pc, #404]	@ (8010518 <_dtoa_r+0x390>)
 8010382:	0038      	movs	r0, r7
 8010384:	18f3      	adds	r3, r6, r3
 8010386:	40dc      	lsrs	r4, r3
 8010388:	4320      	orrs	r0, r4
 801038a:	f7f2 f873 	bl	8002474 <__aeabi_ui2d>
 801038e:	2201      	movs	r2, #1
 8010390:	4b62      	ldr	r3, [pc, #392]	@ (801051c <_dtoa_r+0x394>)
 8010392:	1e77      	subs	r7, r6, #1
 8010394:	18cb      	adds	r3, r1, r3
 8010396:	9218      	str	r2, [sp, #96]	@ 0x60
 8010398:	e776      	b.n	8010288 <_dtoa_r+0x100>
 801039a:	2320      	movs	r3, #32
 801039c:	0020      	movs	r0, r4
 801039e:	1a9b      	subs	r3, r3, r2
 80103a0:	4098      	lsls	r0, r3
 80103a2:	e7f2      	b.n	801038a <_dtoa_r+0x202>
 80103a4:	9015      	str	r0, [sp, #84]	@ 0x54
 80103a6:	e7ba      	b.n	801031e <_dtoa_r+0x196>
 80103a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80103aa:	e7c3      	b.n	8010334 <_dtoa_r+0x1ac>
 80103ac:	9b06      	ldr	r3, [sp, #24]
 80103ae:	9a04      	ldr	r2, [sp, #16]
 80103b0:	1a9b      	subs	r3, r3, r2
 80103b2:	9306      	str	r3, [sp, #24]
 80103b4:	4253      	negs	r3, r2
 80103b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103b8:	2300      	movs	r3, #0
 80103ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80103bc:	e7c5      	b.n	801034a <_dtoa_r+0x1c2>
 80103be:	2301      	movs	r3, #1
 80103c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80103c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80103c4:	4694      	mov	ip, r2
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	4463      	add	r3, ip
 80103ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80103cc:	3301      	adds	r3, #1
 80103ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	dc08      	bgt.n	80103e6 <_dtoa_r+0x25e>
 80103d4:	2301      	movs	r3, #1
 80103d6:	e006      	b.n	80103e6 <_dtoa_r+0x25e>
 80103d8:	2301      	movs	r3, #1
 80103da:	9310      	str	r3, [sp, #64]	@ 0x40
 80103dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80103de:	2b00      	cmp	r3, #0
 80103e0:	dd28      	ble.n	8010434 <_dtoa_r+0x2ac>
 80103e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80103e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103e6:	9a03      	ldr	r2, [sp, #12]
 80103e8:	2100      	movs	r1, #0
 80103ea:	69d0      	ldr	r0, [r2, #28]
 80103ec:	2204      	movs	r2, #4
 80103ee:	0015      	movs	r5, r2
 80103f0:	3514      	adds	r5, #20
 80103f2:	429d      	cmp	r5, r3
 80103f4:	d923      	bls.n	801043e <_dtoa_r+0x2b6>
 80103f6:	6041      	str	r1, [r0, #4]
 80103f8:	9803      	ldr	r0, [sp, #12]
 80103fa:	f001 f927 	bl	801164c <_Balloc>
 80103fe:	9008      	str	r0, [sp, #32]
 8010400:	2800      	cmp	r0, #0
 8010402:	d11f      	bne.n	8010444 <_dtoa_r+0x2bc>
 8010404:	21b0      	movs	r1, #176	@ 0xb0
 8010406:	4b46      	ldr	r3, [pc, #280]	@ (8010520 <_dtoa_r+0x398>)
 8010408:	4831      	ldr	r0, [pc, #196]	@ (80104d0 <_dtoa_r+0x348>)
 801040a:	9a08      	ldr	r2, [sp, #32]
 801040c:	31ff      	adds	r1, #255	@ 0xff
 801040e:	e6d0      	b.n	80101b2 <_dtoa_r+0x2a>
 8010410:	2300      	movs	r3, #0
 8010412:	e7e2      	b.n	80103da <_dtoa_r+0x252>
 8010414:	2300      	movs	r3, #0
 8010416:	e7d3      	b.n	80103c0 <_dtoa_r+0x238>
 8010418:	2300      	movs	r3, #0
 801041a:	9410      	str	r4, [sp, #64]	@ 0x40
 801041c:	9322      	str	r3, [sp, #136]	@ 0x88
 801041e:	3b01      	subs	r3, #1
 8010420:	2200      	movs	r2, #0
 8010422:	930e      	str	r3, [sp, #56]	@ 0x38
 8010424:	9309      	str	r3, [sp, #36]	@ 0x24
 8010426:	3313      	adds	r3, #19
 8010428:	9223      	str	r2, [sp, #140]	@ 0x8c
 801042a:	e7dc      	b.n	80103e6 <_dtoa_r+0x25e>
 801042c:	2301      	movs	r3, #1
 801042e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010430:	3b02      	subs	r3, #2
 8010432:	e7f5      	b.n	8010420 <_dtoa_r+0x298>
 8010434:	2301      	movs	r3, #1
 8010436:	001a      	movs	r2, r3
 8010438:	930e      	str	r3, [sp, #56]	@ 0x38
 801043a:	9309      	str	r3, [sp, #36]	@ 0x24
 801043c:	e7f4      	b.n	8010428 <_dtoa_r+0x2a0>
 801043e:	3101      	adds	r1, #1
 8010440:	0052      	lsls	r2, r2, #1
 8010442:	e7d4      	b.n	80103ee <_dtoa_r+0x266>
 8010444:	9b03      	ldr	r3, [sp, #12]
 8010446:	9a08      	ldr	r2, [sp, #32]
 8010448:	69db      	ldr	r3, [r3, #28]
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801044e:	2b0e      	cmp	r3, #14
 8010450:	d900      	bls.n	8010454 <_dtoa_r+0x2cc>
 8010452:	e0d6      	b.n	8010602 <_dtoa_r+0x47a>
 8010454:	2c00      	cmp	r4, #0
 8010456:	d100      	bne.n	801045a <_dtoa_r+0x2d2>
 8010458:	e0d3      	b.n	8010602 <_dtoa_r+0x47a>
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	dd63      	ble.n	8010528 <_dtoa_r+0x3a0>
 8010460:	210f      	movs	r1, #15
 8010462:	9a04      	ldr	r2, [sp, #16]
 8010464:	4b2a      	ldr	r3, [pc, #168]	@ (8010510 <_dtoa_r+0x388>)
 8010466:	400a      	ands	r2, r1
 8010468:	00d2      	lsls	r2, r2, #3
 801046a:	189b      	adds	r3, r3, r2
 801046c:	681e      	ldr	r6, [r3, #0]
 801046e:	685f      	ldr	r7, [r3, #4]
 8010470:	9b04      	ldr	r3, [sp, #16]
 8010472:	2402      	movs	r4, #2
 8010474:	111d      	asrs	r5, r3, #4
 8010476:	05db      	lsls	r3, r3, #23
 8010478:	d50a      	bpl.n	8010490 <_dtoa_r+0x308>
 801047a:	4b2a      	ldr	r3, [pc, #168]	@ (8010524 <_dtoa_r+0x39c>)
 801047c:	400d      	ands	r5, r1
 801047e:	6a1a      	ldr	r2, [r3, #32]
 8010480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010482:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010484:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010486:	f7f0 fc3f 	bl	8000d08 <__aeabi_ddiv>
 801048a:	900a      	str	r0, [sp, #40]	@ 0x28
 801048c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801048e:	3401      	adds	r4, #1
 8010490:	4b24      	ldr	r3, [pc, #144]	@ (8010524 <_dtoa_r+0x39c>)
 8010492:	930c      	str	r3, [sp, #48]	@ 0x30
 8010494:	2d00      	cmp	r5, #0
 8010496:	d108      	bne.n	80104aa <_dtoa_r+0x322>
 8010498:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801049a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801049c:	0032      	movs	r2, r6
 801049e:	003b      	movs	r3, r7
 80104a0:	f7f0 fc32 	bl	8000d08 <__aeabi_ddiv>
 80104a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80104a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80104a8:	e059      	b.n	801055e <_dtoa_r+0x3d6>
 80104aa:	2301      	movs	r3, #1
 80104ac:	421d      	tst	r5, r3
 80104ae:	d009      	beq.n	80104c4 <_dtoa_r+0x33c>
 80104b0:	18e4      	adds	r4, r4, r3
 80104b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104b4:	0030      	movs	r0, r6
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	0039      	movs	r1, r7
 80104bc:	f7f1 f85e 	bl	800157c <__aeabi_dmul>
 80104c0:	0006      	movs	r6, r0
 80104c2:	000f      	movs	r7, r1
 80104c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104c6:	106d      	asrs	r5, r5, #1
 80104c8:	3308      	adds	r3, #8
 80104ca:	e7e2      	b.n	8010492 <_dtoa_r+0x30a>
 80104cc:	08012dcb 	.word	0x08012dcb
 80104d0:	08012de2 	.word	0x08012de2
 80104d4:	7ff00000 	.word	0x7ff00000
 80104d8:	0000270f 	.word	0x0000270f
 80104dc:	08012dc7 	.word	0x08012dc7
 80104e0:	08012dca 	.word	0x08012dca
 80104e4:	08012d93 	.word	0x08012d93
 80104e8:	08012d92 	.word	0x08012d92
 80104ec:	3ff00000 	.word	0x3ff00000
 80104f0:	fffffc01 	.word	0xfffffc01
 80104f4:	3ff80000 	.word	0x3ff80000
 80104f8:	636f4361 	.word	0x636f4361
 80104fc:	3fd287a7 	.word	0x3fd287a7
 8010500:	8b60c8b3 	.word	0x8b60c8b3
 8010504:	3fc68a28 	.word	0x3fc68a28
 8010508:	509f79fb 	.word	0x509f79fb
 801050c:	3fd34413 	.word	0x3fd34413
 8010510:	08012fe0 	.word	0x08012fe0
 8010514:	00000432 	.word	0x00000432
 8010518:	00000412 	.word	0x00000412
 801051c:	fe100000 	.word	0xfe100000
 8010520:	08012e3a 	.word	0x08012e3a
 8010524:	08012fb8 	.word	0x08012fb8
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	2402      	movs	r4, #2
 801052c:	2b00      	cmp	r3, #0
 801052e:	d016      	beq.n	801055e <_dtoa_r+0x3d6>
 8010530:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010532:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010534:	220f      	movs	r2, #15
 8010536:	425d      	negs	r5, r3
 8010538:	402a      	ands	r2, r5
 801053a:	4bd5      	ldr	r3, [pc, #852]	@ (8010890 <_dtoa_r+0x708>)
 801053c:	00d2      	lsls	r2, r2, #3
 801053e:	189b      	adds	r3, r3, r2
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	685b      	ldr	r3, [r3, #4]
 8010544:	f7f1 f81a 	bl	800157c <__aeabi_dmul>
 8010548:	2701      	movs	r7, #1
 801054a:	2300      	movs	r3, #0
 801054c:	900a      	str	r0, [sp, #40]	@ 0x28
 801054e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010550:	4ed0      	ldr	r6, [pc, #832]	@ (8010894 <_dtoa_r+0x70c>)
 8010552:	112d      	asrs	r5, r5, #4
 8010554:	2d00      	cmp	r5, #0
 8010556:	d000      	beq.n	801055a <_dtoa_r+0x3d2>
 8010558:	e095      	b.n	8010686 <_dtoa_r+0x4fe>
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1a2      	bne.n	80104a4 <_dtoa_r+0x31c>
 801055e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010560:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010562:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010564:	2b00      	cmp	r3, #0
 8010566:	d100      	bne.n	801056a <_dtoa_r+0x3e2>
 8010568:	e098      	b.n	801069c <_dtoa_r+0x514>
 801056a:	2200      	movs	r2, #0
 801056c:	0030      	movs	r0, r6
 801056e:	0039      	movs	r1, r7
 8010570:	4bc9      	ldr	r3, [pc, #804]	@ (8010898 <_dtoa_r+0x710>)
 8010572:	f7ef ff6d 	bl	8000450 <__aeabi_dcmplt>
 8010576:	2800      	cmp	r0, #0
 8010578:	d100      	bne.n	801057c <_dtoa_r+0x3f4>
 801057a:	e08f      	b.n	801069c <_dtoa_r+0x514>
 801057c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d100      	bne.n	8010584 <_dtoa_r+0x3fc>
 8010582:	e08b      	b.n	801069c <_dtoa_r+0x514>
 8010584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010586:	2b00      	cmp	r3, #0
 8010588:	dd37      	ble.n	80105fa <_dtoa_r+0x472>
 801058a:	9b04      	ldr	r3, [sp, #16]
 801058c:	2200      	movs	r2, #0
 801058e:	3b01      	subs	r3, #1
 8010590:	930c      	str	r3, [sp, #48]	@ 0x30
 8010592:	0030      	movs	r0, r6
 8010594:	4bc1      	ldr	r3, [pc, #772]	@ (801089c <_dtoa_r+0x714>)
 8010596:	0039      	movs	r1, r7
 8010598:	f7f0 fff0 	bl	800157c <__aeabi_dmul>
 801059c:	900a      	str	r0, [sp, #40]	@ 0x28
 801059e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80105a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105a2:	3401      	adds	r4, #1
 80105a4:	0020      	movs	r0, r4
 80105a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80105a8:	f7f1 ff36 	bl	8002418 <__aeabi_i2d>
 80105ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105b0:	f7f0 ffe4 	bl	800157c <__aeabi_dmul>
 80105b4:	4bba      	ldr	r3, [pc, #744]	@ (80108a0 <_dtoa_r+0x718>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	f7ef ffe0 	bl	800057c <__aeabi_dadd>
 80105bc:	4bb9      	ldr	r3, [pc, #740]	@ (80108a4 <_dtoa_r+0x71c>)
 80105be:	0006      	movs	r6, r0
 80105c0:	18cf      	adds	r7, r1, r3
 80105c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d16d      	bne.n	80106a4 <_dtoa_r+0x51c>
 80105c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80105ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105cc:	2200      	movs	r2, #0
 80105ce:	4bb6      	ldr	r3, [pc, #728]	@ (80108a8 <_dtoa_r+0x720>)
 80105d0:	f7f1 faba 	bl	8001b48 <__aeabi_dsub>
 80105d4:	0032      	movs	r2, r6
 80105d6:	003b      	movs	r3, r7
 80105d8:	0004      	movs	r4, r0
 80105da:	000d      	movs	r5, r1
 80105dc:	f7ef ff4c 	bl	8000478 <__aeabi_dcmpgt>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	d000      	beq.n	80105e6 <_dtoa_r+0x45e>
 80105e4:	e2b6      	b.n	8010b54 <_dtoa_r+0x9cc>
 80105e6:	2180      	movs	r1, #128	@ 0x80
 80105e8:	0609      	lsls	r1, r1, #24
 80105ea:	187b      	adds	r3, r7, r1
 80105ec:	0032      	movs	r2, r6
 80105ee:	0020      	movs	r0, r4
 80105f0:	0029      	movs	r1, r5
 80105f2:	f7ef ff2d 	bl	8000450 <__aeabi_dcmplt>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d128      	bne.n	801064c <_dtoa_r+0x4c4>
 80105fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80105fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80105fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010600:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010602:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010604:	2b00      	cmp	r3, #0
 8010606:	da00      	bge.n	801060a <_dtoa_r+0x482>
 8010608:	e174      	b.n	80108f4 <_dtoa_r+0x76c>
 801060a:	9a04      	ldr	r2, [sp, #16]
 801060c:	2a0e      	cmp	r2, #14
 801060e:	dd00      	ble.n	8010612 <_dtoa_r+0x48a>
 8010610:	e170      	b.n	80108f4 <_dtoa_r+0x76c>
 8010612:	4b9f      	ldr	r3, [pc, #636]	@ (8010890 <_dtoa_r+0x708>)
 8010614:	00d2      	lsls	r2, r2, #3
 8010616:	189b      	adds	r3, r3, r2
 8010618:	685c      	ldr	r4, [r3, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	9306      	str	r3, [sp, #24]
 801061e:	9407      	str	r4, [sp, #28]
 8010620:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010622:	2b00      	cmp	r3, #0
 8010624:	db00      	blt.n	8010628 <_dtoa_r+0x4a0>
 8010626:	e0e7      	b.n	80107f8 <_dtoa_r+0x670>
 8010628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801062a:	2b00      	cmp	r3, #0
 801062c:	dd00      	ble.n	8010630 <_dtoa_r+0x4a8>
 801062e:	e0e3      	b.n	80107f8 <_dtoa_r+0x670>
 8010630:	d10c      	bne.n	801064c <_dtoa_r+0x4c4>
 8010632:	9806      	ldr	r0, [sp, #24]
 8010634:	9907      	ldr	r1, [sp, #28]
 8010636:	2200      	movs	r2, #0
 8010638:	4b9b      	ldr	r3, [pc, #620]	@ (80108a8 <_dtoa_r+0x720>)
 801063a:	f7f0 ff9f 	bl	800157c <__aeabi_dmul>
 801063e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010642:	f7ef ff23 	bl	800048c <__aeabi_dcmpge>
 8010646:	2800      	cmp	r0, #0
 8010648:	d100      	bne.n	801064c <_dtoa_r+0x4c4>
 801064a:	e286      	b.n	8010b5a <_dtoa_r+0x9d2>
 801064c:	2600      	movs	r6, #0
 801064e:	0037      	movs	r7, r6
 8010650:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010652:	9c08      	ldr	r4, [sp, #32]
 8010654:	43db      	mvns	r3, r3
 8010656:	930c      	str	r3, [sp, #48]	@ 0x30
 8010658:	9704      	str	r7, [sp, #16]
 801065a:	2700      	movs	r7, #0
 801065c:	0031      	movs	r1, r6
 801065e:	9803      	ldr	r0, [sp, #12]
 8010660:	f001 f838 	bl	80116d4 <_Bfree>
 8010664:	9b04      	ldr	r3, [sp, #16]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d100      	bne.n	801066c <_dtoa_r+0x4e4>
 801066a:	e0bb      	b.n	80107e4 <_dtoa_r+0x65c>
 801066c:	2f00      	cmp	r7, #0
 801066e:	d005      	beq.n	801067c <_dtoa_r+0x4f4>
 8010670:	429f      	cmp	r7, r3
 8010672:	d003      	beq.n	801067c <_dtoa_r+0x4f4>
 8010674:	0039      	movs	r1, r7
 8010676:	9803      	ldr	r0, [sp, #12]
 8010678:	f001 f82c 	bl	80116d4 <_Bfree>
 801067c:	9904      	ldr	r1, [sp, #16]
 801067e:	9803      	ldr	r0, [sp, #12]
 8010680:	f001 f828 	bl	80116d4 <_Bfree>
 8010684:	e0ae      	b.n	80107e4 <_dtoa_r+0x65c>
 8010686:	423d      	tst	r5, r7
 8010688:	d005      	beq.n	8010696 <_dtoa_r+0x50e>
 801068a:	6832      	ldr	r2, [r6, #0]
 801068c:	6873      	ldr	r3, [r6, #4]
 801068e:	f7f0 ff75 	bl	800157c <__aeabi_dmul>
 8010692:	003b      	movs	r3, r7
 8010694:	3401      	adds	r4, #1
 8010696:	106d      	asrs	r5, r5, #1
 8010698:	3608      	adds	r6, #8
 801069a:	e75b      	b.n	8010554 <_dtoa_r+0x3cc>
 801069c:	9b04      	ldr	r3, [sp, #16]
 801069e:	930c      	str	r3, [sp, #48]	@ 0x30
 80106a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a2:	e77f      	b.n	80105a4 <_dtoa_r+0x41c>
 80106a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106a6:	4b7a      	ldr	r3, [pc, #488]	@ (8010890 <_dtoa_r+0x708>)
 80106a8:	3a01      	subs	r2, #1
 80106aa:	00d2      	lsls	r2, r2, #3
 80106ac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80106ae:	189b      	adds	r3, r3, r2
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	2900      	cmp	r1, #0
 80106b6:	d04c      	beq.n	8010752 <_dtoa_r+0x5ca>
 80106b8:	2000      	movs	r0, #0
 80106ba:	497c      	ldr	r1, [pc, #496]	@ (80108ac <_dtoa_r+0x724>)
 80106bc:	f7f0 fb24 	bl	8000d08 <__aeabi_ddiv>
 80106c0:	0032      	movs	r2, r6
 80106c2:	003b      	movs	r3, r7
 80106c4:	f7f1 fa40 	bl	8001b48 <__aeabi_dsub>
 80106c8:	9a08      	ldr	r2, [sp, #32]
 80106ca:	0006      	movs	r6, r0
 80106cc:	4694      	mov	ip, r2
 80106ce:	000f      	movs	r7, r1
 80106d0:	9b08      	ldr	r3, [sp, #32]
 80106d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80106d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106d6:	4463      	add	r3, ip
 80106d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80106da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106de:	f7f1 fe5f 	bl	80023a0 <__aeabi_d2iz>
 80106e2:	0005      	movs	r5, r0
 80106e4:	f7f1 fe98 	bl	8002418 <__aeabi_i2d>
 80106e8:	0002      	movs	r2, r0
 80106ea:	000b      	movs	r3, r1
 80106ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106f0:	f7f1 fa2a 	bl	8001b48 <__aeabi_dsub>
 80106f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80106f6:	3530      	adds	r5, #48	@ 0x30
 80106f8:	1c5c      	adds	r4, r3, #1
 80106fa:	701d      	strb	r5, [r3, #0]
 80106fc:	0032      	movs	r2, r6
 80106fe:	003b      	movs	r3, r7
 8010700:	900a      	str	r0, [sp, #40]	@ 0x28
 8010702:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010704:	f7ef fea4 	bl	8000450 <__aeabi_dcmplt>
 8010708:	2800      	cmp	r0, #0
 801070a:	d16b      	bne.n	80107e4 <_dtoa_r+0x65c>
 801070c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801070e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010710:	2000      	movs	r0, #0
 8010712:	4961      	ldr	r1, [pc, #388]	@ (8010898 <_dtoa_r+0x710>)
 8010714:	f7f1 fa18 	bl	8001b48 <__aeabi_dsub>
 8010718:	0032      	movs	r2, r6
 801071a:	003b      	movs	r3, r7
 801071c:	f7ef fe98 	bl	8000450 <__aeabi_dcmplt>
 8010720:	2800      	cmp	r0, #0
 8010722:	d000      	beq.n	8010726 <_dtoa_r+0x59e>
 8010724:	e0c6      	b.n	80108b4 <_dtoa_r+0x72c>
 8010726:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010728:	42a3      	cmp	r3, r4
 801072a:	d100      	bne.n	801072e <_dtoa_r+0x5a6>
 801072c:	e765      	b.n	80105fa <_dtoa_r+0x472>
 801072e:	2200      	movs	r2, #0
 8010730:	0030      	movs	r0, r6
 8010732:	0039      	movs	r1, r7
 8010734:	4b59      	ldr	r3, [pc, #356]	@ (801089c <_dtoa_r+0x714>)
 8010736:	f7f0 ff21 	bl	800157c <__aeabi_dmul>
 801073a:	2200      	movs	r2, #0
 801073c:	0006      	movs	r6, r0
 801073e:	000f      	movs	r7, r1
 8010740:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010742:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010744:	4b55      	ldr	r3, [pc, #340]	@ (801089c <_dtoa_r+0x714>)
 8010746:	f7f0 ff19 	bl	800157c <__aeabi_dmul>
 801074a:	9416      	str	r4, [sp, #88]	@ 0x58
 801074c:	900a      	str	r0, [sp, #40]	@ 0x28
 801074e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010750:	e7c3      	b.n	80106da <_dtoa_r+0x552>
 8010752:	0030      	movs	r0, r6
 8010754:	0039      	movs	r1, r7
 8010756:	f7f0 ff11 	bl	800157c <__aeabi_dmul>
 801075a:	9d08      	ldr	r5, [sp, #32]
 801075c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801075e:	002b      	movs	r3, r5
 8010760:	4694      	mov	ip, r2
 8010762:	9016      	str	r0, [sp, #88]	@ 0x58
 8010764:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010766:	4463      	add	r3, ip
 8010768:	9319      	str	r3, [sp, #100]	@ 0x64
 801076a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801076c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801076e:	f7f1 fe17 	bl	80023a0 <__aeabi_d2iz>
 8010772:	0004      	movs	r4, r0
 8010774:	f7f1 fe50 	bl	8002418 <__aeabi_i2d>
 8010778:	000b      	movs	r3, r1
 801077a:	0002      	movs	r2, r0
 801077c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801077e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010780:	f7f1 f9e2 	bl	8001b48 <__aeabi_dsub>
 8010784:	3430      	adds	r4, #48	@ 0x30
 8010786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010788:	702c      	strb	r4, [r5, #0]
 801078a:	3501      	adds	r5, #1
 801078c:	0006      	movs	r6, r0
 801078e:	000f      	movs	r7, r1
 8010790:	42ab      	cmp	r3, r5
 8010792:	d12a      	bne.n	80107ea <_dtoa_r+0x662>
 8010794:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010796:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010798:	9b08      	ldr	r3, [sp, #32]
 801079a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801079c:	469c      	mov	ip, r3
 801079e:	2200      	movs	r2, #0
 80107a0:	4b42      	ldr	r3, [pc, #264]	@ (80108ac <_dtoa_r+0x724>)
 80107a2:	4464      	add	r4, ip
 80107a4:	f7ef feea 	bl	800057c <__aeabi_dadd>
 80107a8:	0002      	movs	r2, r0
 80107aa:	000b      	movs	r3, r1
 80107ac:	0030      	movs	r0, r6
 80107ae:	0039      	movs	r1, r7
 80107b0:	f7ef fe62 	bl	8000478 <__aeabi_dcmpgt>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d000      	beq.n	80107ba <_dtoa_r+0x632>
 80107b8:	e07c      	b.n	80108b4 <_dtoa_r+0x72c>
 80107ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80107bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80107be:	2000      	movs	r0, #0
 80107c0:	493a      	ldr	r1, [pc, #232]	@ (80108ac <_dtoa_r+0x724>)
 80107c2:	f7f1 f9c1 	bl	8001b48 <__aeabi_dsub>
 80107c6:	0002      	movs	r2, r0
 80107c8:	000b      	movs	r3, r1
 80107ca:	0030      	movs	r0, r6
 80107cc:	0039      	movs	r1, r7
 80107ce:	f7ef fe3f 	bl	8000450 <__aeabi_dcmplt>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	d100      	bne.n	80107d8 <_dtoa_r+0x650>
 80107d6:	e710      	b.n	80105fa <_dtoa_r+0x472>
 80107d8:	0023      	movs	r3, r4
 80107da:	3c01      	subs	r4, #1
 80107dc:	7822      	ldrb	r2, [r4, #0]
 80107de:	2a30      	cmp	r2, #48	@ 0x30
 80107e0:	d0fa      	beq.n	80107d8 <_dtoa_r+0x650>
 80107e2:	001c      	movs	r4, r3
 80107e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80107e6:	9304      	str	r3, [sp, #16]
 80107e8:	e042      	b.n	8010870 <_dtoa_r+0x6e8>
 80107ea:	2200      	movs	r2, #0
 80107ec:	4b2b      	ldr	r3, [pc, #172]	@ (801089c <_dtoa_r+0x714>)
 80107ee:	f7f0 fec5 	bl	800157c <__aeabi_dmul>
 80107f2:	900a      	str	r0, [sp, #40]	@ 0x28
 80107f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80107f6:	e7b8      	b.n	801076a <_dtoa_r+0x5e2>
 80107f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107fa:	9d08      	ldr	r5, [sp, #32]
 80107fc:	3b01      	subs	r3, #1
 80107fe:	195b      	adds	r3, r3, r5
 8010800:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010802:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010804:	930a      	str	r3, [sp, #40]	@ 0x28
 8010806:	9a06      	ldr	r2, [sp, #24]
 8010808:	9b07      	ldr	r3, [sp, #28]
 801080a:	0030      	movs	r0, r6
 801080c:	0039      	movs	r1, r7
 801080e:	f7f0 fa7b 	bl	8000d08 <__aeabi_ddiv>
 8010812:	f7f1 fdc5 	bl	80023a0 <__aeabi_d2iz>
 8010816:	9009      	str	r0, [sp, #36]	@ 0x24
 8010818:	f7f1 fdfe 	bl	8002418 <__aeabi_i2d>
 801081c:	9a06      	ldr	r2, [sp, #24]
 801081e:	9b07      	ldr	r3, [sp, #28]
 8010820:	f7f0 feac 	bl	800157c <__aeabi_dmul>
 8010824:	0002      	movs	r2, r0
 8010826:	000b      	movs	r3, r1
 8010828:	0030      	movs	r0, r6
 801082a:	0039      	movs	r1, r7
 801082c:	f7f1 f98c 	bl	8001b48 <__aeabi_dsub>
 8010830:	002b      	movs	r3, r5
 8010832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010834:	3501      	adds	r5, #1
 8010836:	3230      	adds	r2, #48	@ 0x30
 8010838:	701a      	strb	r2, [r3, #0]
 801083a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801083c:	002c      	movs	r4, r5
 801083e:	429a      	cmp	r2, r3
 8010840:	d14b      	bne.n	80108da <_dtoa_r+0x752>
 8010842:	0002      	movs	r2, r0
 8010844:	000b      	movs	r3, r1
 8010846:	f7ef fe99 	bl	800057c <__aeabi_dadd>
 801084a:	9a06      	ldr	r2, [sp, #24]
 801084c:	9b07      	ldr	r3, [sp, #28]
 801084e:	0006      	movs	r6, r0
 8010850:	000f      	movs	r7, r1
 8010852:	f7ef fe11 	bl	8000478 <__aeabi_dcmpgt>
 8010856:	2800      	cmp	r0, #0
 8010858:	d12a      	bne.n	80108b0 <_dtoa_r+0x728>
 801085a:	9a06      	ldr	r2, [sp, #24]
 801085c:	9b07      	ldr	r3, [sp, #28]
 801085e:	0030      	movs	r0, r6
 8010860:	0039      	movs	r1, r7
 8010862:	f7ef fdef 	bl	8000444 <__aeabi_dcmpeq>
 8010866:	2800      	cmp	r0, #0
 8010868:	d002      	beq.n	8010870 <_dtoa_r+0x6e8>
 801086a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801086c:	07dd      	lsls	r5, r3, #31
 801086e:	d41f      	bmi.n	80108b0 <_dtoa_r+0x728>
 8010870:	9905      	ldr	r1, [sp, #20]
 8010872:	9803      	ldr	r0, [sp, #12]
 8010874:	f000 ff2e 	bl	80116d4 <_Bfree>
 8010878:	2300      	movs	r3, #0
 801087a:	7023      	strb	r3, [r4, #0]
 801087c:	9b04      	ldr	r3, [sp, #16]
 801087e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010880:	3301      	adds	r3, #1
 8010882:	6013      	str	r3, [r2, #0]
 8010884:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010886:	2b00      	cmp	r3, #0
 8010888:	d100      	bne.n	801088c <_dtoa_r+0x704>
 801088a:	e4c7      	b.n	801021c <_dtoa_r+0x94>
 801088c:	601c      	str	r4, [r3, #0]
 801088e:	e4c5      	b.n	801021c <_dtoa_r+0x94>
 8010890:	08012fe0 	.word	0x08012fe0
 8010894:	08012fb8 	.word	0x08012fb8
 8010898:	3ff00000 	.word	0x3ff00000
 801089c:	40240000 	.word	0x40240000
 80108a0:	401c0000 	.word	0x401c0000
 80108a4:	fcc00000 	.word	0xfcc00000
 80108a8:	40140000 	.word	0x40140000
 80108ac:	3fe00000 	.word	0x3fe00000
 80108b0:	9b04      	ldr	r3, [sp, #16]
 80108b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80108b4:	0023      	movs	r3, r4
 80108b6:	001c      	movs	r4, r3
 80108b8:	3b01      	subs	r3, #1
 80108ba:	781a      	ldrb	r2, [r3, #0]
 80108bc:	2a39      	cmp	r2, #57	@ 0x39
 80108be:	d108      	bne.n	80108d2 <_dtoa_r+0x74a>
 80108c0:	9a08      	ldr	r2, [sp, #32]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d1f7      	bne.n	80108b6 <_dtoa_r+0x72e>
 80108c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108c8:	9908      	ldr	r1, [sp, #32]
 80108ca:	3201      	adds	r2, #1
 80108cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80108ce:	2230      	movs	r2, #48	@ 0x30
 80108d0:	700a      	strb	r2, [r1, #0]
 80108d2:	781a      	ldrb	r2, [r3, #0]
 80108d4:	3201      	adds	r2, #1
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	e784      	b.n	80107e4 <_dtoa_r+0x65c>
 80108da:	2200      	movs	r2, #0
 80108dc:	4bc6      	ldr	r3, [pc, #792]	@ (8010bf8 <_dtoa_r+0xa70>)
 80108de:	f7f0 fe4d 	bl	800157c <__aeabi_dmul>
 80108e2:	2200      	movs	r2, #0
 80108e4:	2300      	movs	r3, #0
 80108e6:	0006      	movs	r6, r0
 80108e8:	000f      	movs	r7, r1
 80108ea:	f7ef fdab 	bl	8000444 <__aeabi_dcmpeq>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	d089      	beq.n	8010806 <_dtoa_r+0x67e>
 80108f2:	e7bd      	b.n	8010870 <_dtoa_r+0x6e8>
 80108f4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80108f6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80108f8:	9c06      	ldr	r4, [sp, #24]
 80108fa:	2f00      	cmp	r7, #0
 80108fc:	d014      	beq.n	8010928 <_dtoa_r+0x7a0>
 80108fe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010900:	2a01      	cmp	r2, #1
 8010902:	dd00      	ble.n	8010906 <_dtoa_r+0x77e>
 8010904:	e0e4      	b.n	8010ad0 <_dtoa_r+0x948>
 8010906:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010908:	2a00      	cmp	r2, #0
 801090a:	d100      	bne.n	801090e <_dtoa_r+0x786>
 801090c:	e0da      	b.n	8010ac4 <_dtoa_r+0x93c>
 801090e:	4abb      	ldr	r2, [pc, #748]	@ (8010bfc <_dtoa_r+0xa74>)
 8010910:	189b      	adds	r3, r3, r2
 8010912:	9a06      	ldr	r2, [sp, #24]
 8010914:	2101      	movs	r1, #1
 8010916:	18d2      	adds	r2, r2, r3
 8010918:	9206      	str	r2, [sp, #24]
 801091a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801091c:	9803      	ldr	r0, [sp, #12]
 801091e:	18d3      	adds	r3, r2, r3
 8010920:	930d      	str	r3, [sp, #52]	@ 0x34
 8010922:	f000 ffdb 	bl	80118dc <__i2b>
 8010926:	0007      	movs	r7, r0
 8010928:	2c00      	cmp	r4, #0
 801092a:	d00e      	beq.n	801094a <_dtoa_r+0x7c2>
 801092c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801092e:	2b00      	cmp	r3, #0
 8010930:	dd0b      	ble.n	801094a <_dtoa_r+0x7c2>
 8010932:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010934:	0023      	movs	r3, r4
 8010936:	4294      	cmp	r4, r2
 8010938:	dd00      	ble.n	801093c <_dtoa_r+0x7b4>
 801093a:	0013      	movs	r3, r2
 801093c:	9a06      	ldr	r2, [sp, #24]
 801093e:	1ae4      	subs	r4, r4, r3
 8010940:	1ad2      	subs	r2, r2, r3
 8010942:	9206      	str	r2, [sp, #24]
 8010944:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	930d      	str	r3, [sp, #52]	@ 0x34
 801094a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801094c:	2b00      	cmp	r3, #0
 801094e:	d021      	beq.n	8010994 <_dtoa_r+0x80c>
 8010950:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	d100      	bne.n	8010958 <_dtoa_r+0x7d0>
 8010956:	e0d3      	b.n	8010b00 <_dtoa_r+0x978>
 8010958:	9e05      	ldr	r6, [sp, #20]
 801095a:	2d00      	cmp	r5, #0
 801095c:	d014      	beq.n	8010988 <_dtoa_r+0x800>
 801095e:	0039      	movs	r1, r7
 8010960:	002a      	movs	r2, r5
 8010962:	9803      	ldr	r0, [sp, #12]
 8010964:	f001 f87c 	bl	8011a60 <__pow5mult>
 8010968:	9a05      	ldr	r2, [sp, #20]
 801096a:	0001      	movs	r1, r0
 801096c:	0007      	movs	r7, r0
 801096e:	9803      	ldr	r0, [sp, #12]
 8010970:	f000 ffcc 	bl	801190c <__multiply>
 8010974:	0006      	movs	r6, r0
 8010976:	9905      	ldr	r1, [sp, #20]
 8010978:	9803      	ldr	r0, [sp, #12]
 801097a:	f000 feab 	bl	80116d4 <_Bfree>
 801097e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010980:	9605      	str	r6, [sp, #20]
 8010982:	1b5b      	subs	r3, r3, r5
 8010984:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010986:	d005      	beq.n	8010994 <_dtoa_r+0x80c>
 8010988:	0031      	movs	r1, r6
 801098a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801098c:	9803      	ldr	r0, [sp, #12]
 801098e:	f001 f867 	bl	8011a60 <__pow5mult>
 8010992:	9005      	str	r0, [sp, #20]
 8010994:	2101      	movs	r1, #1
 8010996:	9803      	ldr	r0, [sp, #12]
 8010998:	f000 ffa0 	bl	80118dc <__i2b>
 801099c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801099e:	0006      	movs	r6, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d100      	bne.n	80109a6 <_dtoa_r+0x81e>
 80109a4:	e1bc      	b.n	8010d20 <_dtoa_r+0xb98>
 80109a6:	001a      	movs	r2, r3
 80109a8:	0001      	movs	r1, r0
 80109aa:	9803      	ldr	r0, [sp, #12]
 80109ac:	f001 f858 	bl	8011a60 <__pow5mult>
 80109b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80109b2:	0006      	movs	r6, r0
 80109b4:	2500      	movs	r5, #0
 80109b6:	2b01      	cmp	r3, #1
 80109b8:	dc16      	bgt.n	80109e8 <_dtoa_r+0x860>
 80109ba:	2500      	movs	r5, #0
 80109bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109be:	42ab      	cmp	r3, r5
 80109c0:	d10e      	bne.n	80109e0 <_dtoa_r+0x858>
 80109c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109c4:	031b      	lsls	r3, r3, #12
 80109c6:	42ab      	cmp	r3, r5
 80109c8:	d10a      	bne.n	80109e0 <_dtoa_r+0x858>
 80109ca:	4b8d      	ldr	r3, [pc, #564]	@ (8010c00 <_dtoa_r+0xa78>)
 80109cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80109ce:	4213      	tst	r3, r2
 80109d0:	d006      	beq.n	80109e0 <_dtoa_r+0x858>
 80109d2:	9b06      	ldr	r3, [sp, #24]
 80109d4:	3501      	adds	r5, #1
 80109d6:	3301      	adds	r3, #1
 80109d8:	9306      	str	r3, [sp, #24]
 80109da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109dc:	3301      	adds	r3, #1
 80109de:	930d      	str	r3, [sp, #52]	@ 0x34
 80109e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80109e2:	2001      	movs	r0, #1
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d008      	beq.n	80109fa <_dtoa_r+0x872>
 80109e8:	6933      	ldr	r3, [r6, #16]
 80109ea:	3303      	adds	r3, #3
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	18f3      	adds	r3, r6, r3
 80109f0:	6858      	ldr	r0, [r3, #4]
 80109f2:	f000 ff23 	bl	801183c <__hi0bits>
 80109f6:	2320      	movs	r3, #32
 80109f8:	1a18      	subs	r0, r3, r0
 80109fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109fc:	1818      	adds	r0, r3, r0
 80109fe:	0002      	movs	r2, r0
 8010a00:	231f      	movs	r3, #31
 8010a02:	401a      	ands	r2, r3
 8010a04:	4218      	tst	r0, r3
 8010a06:	d100      	bne.n	8010a0a <_dtoa_r+0x882>
 8010a08:	e081      	b.n	8010b0e <_dtoa_r+0x986>
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	1a9b      	subs	r3, r3, r2
 8010a0e:	2b04      	cmp	r3, #4
 8010a10:	dd79      	ble.n	8010b06 <_dtoa_r+0x97e>
 8010a12:	231c      	movs	r3, #28
 8010a14:	1a9b      	subs	r3, r3, r2
 8010a16:	9a06      	ldr	r2, [sp, #24]
 8010a18:	18e4      	adds	r4, r4, r3
 8010a1a:	18d2      	adds	r2, r2, r3
 8010a1c:	9206      	str	r2, [sp, #24]
 8010a1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a20:	18d3      	adds	r3, r2, r3
 8010a22:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a24:	9b06      	ldr	r3, [sp, #24]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	dd05      	ble.n	8010a36 <_dtoa_r+0x8ae>
 8010a2a:	001a      	movs	r2, r3
 8010a2c:	9905      	ldr	r1, [sp, #20]
 8010a2e:	9803      	ldr	r0, [sp, #12]
 8010a30:	f001 f872 	bl	8011b18 <__lshift>
 8010a34:	9005      	str	r0, [sp, #20]
 8010a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	dd05      	ble.n	8010a48 <_dtoa_r+0x8c0>
 8010a3c:	0031      	movs	r1, r6
 8010a3e:	001a      	movs	r2, r3
 8010a40:	9803      	ldr	r0, [sp, #12]
 8010a42:	f001 f869 	bl	8011b18 <__lshift>
 8010a46:	0006      	movs	r6, r0
 8010a48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d061      	beq.n	8010b12 <_dtoa_r+0x98a>
 8010a4e:	0031      	movs	r1, r6
 8010a50:	9805      	ldr	r0, [sp, #20]
 8010a52:	f001 f8cd 	bl	8011bf0 <__mcmp>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	da5b      	bge.n	8010b12 <_dtoa_r+0x98a>
 8010a5a:	9b04      	ldr	r3, [sp, #16]
 8010a5c:	220a      	movs	r2, #10
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a62:	9905      	ldr	r1, [sp, #20]
 8010a64:	2300      	movs	r3, #0
 8010a66:	9803      	ldr	r0, [sp, #12]
 8010a68:	f000 fe58 	bl	801171c <__multadd>
 8010a6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a6e:	9005      	str	r0, [sp, #20]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d100      	bne.n	8010a76 <_dtoa_r+0x8ee>
 8010a74:	e15b      	b.n	8010d2e <_dtoa_r+0xba6>
 8010a76:	2300      	movs	r3, #0
 8010a78:	0039      	movs	r1, r7
 8010a7a:	220a      	movs	r2, #10
 8010a7c:	9803      	ldr	r0, [sp, #12]
 8010a7e:	f000 fe4d 	bl	801171c <__multadd>
 8010a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a84:	0007      	movs	r7, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dc4d      	bgt.n	8010b26 <_dtoa_r+0x99e>
 8010a8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	dd46      	ble.n	8010b1e <_dtoa_r+0x996>
 8010a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d000      	beq.n	8010a98 <_dtoa_r+0x910>
 8010a96:	e5db      	b.n	8010650 <_dtoa_r+0x4c8>
 8010a98:	0031      	movs	r1, r6
 8010a9a:	2205      	movs	r2, #5
 8010a9c:	9803      	ldr	r0, [sp, #12]
 8010a9e:	f000 fe3d 	bl	801171c <__multadd>
 8010aa2:	0006      	movs	r6, r0
 8010aa4:	0001      	movs	r1, r0
 8010aa6:	9805      	ldr	r0, [sp, #20]
 8010aa8:	f001 f8a2 	bl	8011bf0 <__mcmp>
 8010aac:	2800      	cmp	r0, #0
 8010aae:	dc00      	bgt.n	8010ab2 <_dtoa_r+0x92a>
 8010ab0:	e5ce      	b.n	8010650 <_dtoa_r+0x4c8>
 8010ab2:	9b08      	ldr	r3, [sp, #32]
 8010ab4:	9a08      	ldr	r2, [sp, #32]
 8010ab6:	1c5c      	adds	r4, r3, #1
 8010ab8:	2331      	movs	r3, #49	@ 0x31
 8010aba:	7013      	strb	r3, [r2, #0]
 8010abc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010abe:	3301      	adds	r3, #1
 8010ac0:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ac2:	e5c9      	b.n	8010658 <_dtoa_r+0x4d0>
 8010ac4:	2336      	movs	r3, #54	@ 0x36
 8010ac6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010ac8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010aca:	1a9b      	subs	r3, r3, r2
 8010acc:	9c06      	ldr	r4, [sp, #24]
 8010ace:	e720      	b.n	8010912 <_dtoa_r+0x78a>
 8010ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad2:	1e5d      	subs	r5, r3, #1
 8010ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ad6:	42ab      	cmp	r3, r5
 8010ad8:	db08      	blt.n	8010aec <_dtoa_r+0x964>
 8010ada:	1b5d      	subs	r5, r3, r5
 8010adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	daf4      	bge.n	8010acc <_dtoa_r+0x944>
 8010ae2:	9b06      	ldr	r3, [sp, #24]
 8010ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae6:	1a9c      	subs	r4, r3, r2
 8010ae8:	2300      	movs	r3, #0
 8010aea:	e712      	b.n	8010912 <_dtoa_r+0x78a>
 8010aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010af0:	1aeb      	subs	r3, r5, r3
 8010af2:	18d3      	adds	r3, r2, r3
 8010af4:	9314      	str	r3, [sp, #80]	@ 0x50
 8010af6:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010af8:	9c06      	ldr	r4, [sp, #24]
 8010afa:	2500      	movs	r5, #0
 8010afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010afe:	e708      	b.n	8010912 <_dtoa_r+0x78a>
 8010b00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b02:	9905      	ldr	r1, [sp, #20]
 8010b04:	e742      	b.n	801098c <_dtoa_r+0x804>
 8010b06:	2b04      	cmp	r3, #4
 8010b08:	d08c      	beq.n	8010a24 <_dtoa_r+0x89c>
 8010b0a:	331c      	adds	r3, #28
 8010b0c:	e783      	b.n	8010a16 <_dtoa_r+0x88e>
 8010b0e:	0013      	movs	r3, r2
 8010b10:	e7fb      	b.n	8010b0a <_dtoa_r+0x982>
 8010b12:	9b04      	ldr	r3, [sp, #16]
 8010b14:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b18:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	ddb5      	ble.n	8010a8a <_dtoa_r+0x902>
 8010b1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d100      	bne.n	8010b26 <_dtoa_r+0x99e>
 8010b24:	e107      	b.n	8010d36 <_dtoa_r+0xbae>
 8010b26:	2c00      	cmp	r4, #0
 8010b28:	dd05      	ble.n	8010b36 <_dtoa_r+0x9ae>
 8010b2a:	0039      	movs	r1, r7
 8010b2c:	0022      	movs	r2, r4
 8010b2e:	9803      	ldr	r0, [sp, #12]
 8010b30:	f000 fff2 	bl	8011b18 <__lshift>
 8010b34:	0007      	movs	r7, r0
 8010b36:	9704      	str	r7, [sp, #16]
 8010b38:	2d00      	cmp	r5, #0
 8010b3a:	d020      	beq.n	8010b7e <_dtoa_r+0x9f6>
 8010b3c:	6879      	ldr	r1, [r7, #4]
 8010b3e:	9803      	ldr	r0, [sp, #12]
 8010b40:	f000 fd84 	bl	801164c <_Balloc>
 8010b44:	1e04      	subs	r4, r0, #0
 8010b46:	d10c      	bne.n	8010b62 <_dtoa_r+0x9da>
 8010b48:	0022      	movs	r2, r4
 8010b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8010c04 <_dtoa_r+0xa7c>)
 8010b4c:	482e      	ldr	r0, [pc, #184]	@ (8010c08 <_dtoa_r+0xa80>)
 8010b4e:	492f      	ldr	r1, [pc, #188]	@ (8010c0c <_dtoa_r+0xa84>)
 8010b50:	f7ff fb2f 	bl	80101b2 <_dtoa_r+0x2a>
 8010b54:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010b56:	0037      	movs	r7, r6
 8010b58:	e7ab      	b.n	8010ab2 <_dtoa_r+0x92a>
 8010b5a:	9b04      	ldr	r3, [sp, #16]
 8010b5c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010b5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b60:	e7f9      	b.n	8010b56 <_dtoa_r+0x9ce>
 8010b62:	0039      	movs	r1, r7
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	310c      	adds	r1, #12
 8010b68:	3202      	adds	r2, #2
 8010b6a:	0092      	lsls	r2, r2, #2
 8010b6c:	300c      	adds	r0, #12
 8010b6e:	f7ff fa75 	bl	801005c <memcpy>
 8010b72:	2201      	movs	r2, #1
 8010b74:	0021      	movs	r1, r4
 8010b76:	9803      	ldr	r0, [sp, #12]
 8010b78:	f000 ffce 	bl	8011b18 <__lshift>
 8010b7c:	9004      	str	r0, [sp, #16]
 8010b7e:	9b08      	ldr	r3, [sp, #32]
 8010b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b82:	9306      	str	r3, [sp, #24]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	189b      	adds	r3, r3, r2
 8010b88:	2201      	movs	r2, #1
 8010b8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b8e:	4013      	ands	r3, r2
 8010b90:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b92:	0031      	movs	r1, r6
 8010b94:	9805      	ldr	r0, [sp, #20]
 8010b96:	f7ff fa71 	bl	801007c <quorem>
 8010b9a:	0039      	movs	r1, r7
 8010b9c:	0005      	movs	r5, r0
 8010b9e:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ba0:	9805      	ldr	r0, [sp, #20]
 8010ba2:	f001 f825 	bl	8011bf0 <__mcmp>
 8010ba6:	9a04      	ldr	r2, [sp, #16]
 8010ba8:	900d      	str	r0, [sp, #52]	@ 0x34
 8010baa:	0031      	movs	r1, r6
 8010bac:	9803      	ldr	r0, [sp, #12]
 8010bae:	f001 f83b 	bl	8011c28 <__mdiff>
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	68c3      	ldr	r3, [r0, #12]
 8010bb6:	0004      	movs	r4, r0
 8010bb8:	3530      	adds	r5, #48	@ 0x30
 8010bba:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d104      	bne.n	8010bca <_dtoa_r+0xa42>
 8010bc0:	0001      	movs	r1, r0
 8010bc2:	9805      	ldr	r0, [sp, #20]
 8010bc4:	f001 f814 	bl	8011bf0 <__mcmp>
 8010bc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8010bca:	0021      	movs	r1, r4
 8010bcc:	9803      	ldr	r0, [sp, #12]
 8010bce:	f000 fd81 	bl	80116d4 <_Bfree>
 8010bd2:	9b06      	ldr	r3, [sp, #24]
 8010bd4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010bd6:	1c5c      	adds	r4, r3, #1
 8010bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bde:	4313      	orrs	r3, r2
 8010be0:	d116      	bne.n	8010c10 <_dtoa_r+0xa88>
 8010be2:	2d39      	cmp	r5, #57	@ 0x39
 8010be4:	d02f      	beq.n	8010c46 <_dtoa_r+0xabe>
 8010be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	dd01      	ble.n	8010bf0 <_dtoa_r+0xa68>
 8010bec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010bee:	3531      	adds	r5, #49	@ 0x31
 8010bf0:	9b06      	ldr	r3, [sp, #24]
 8010bf2:	701d      	strb	r5, [r3, #0]
 8010bf4:	e532      	b.n	801065c <_dtoa_r+0x4d4>
 8010bf6:	46c0      	nop			@ (mov r8, r8)
 8010bf8:	40240000 	.word	0x40240000
 8010bfc:	00000433 	.word	0x00000433
 8010c00:	7ff00000 	.word	0x7ff00000
 8010c04:	08012e3a 	.word	0x08012e3a
 8010c08:	08012de2 	.word	0x08012de2
 8010c0c:	000002ef 	.word	0x000002ef
 8010c10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	db04      	blt.n	8010c20 <_dtoa_r+0xa98>
 8010c16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	d11e      	bne.n	8010c5e <_dtoa_r+0xad6>
 8010c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	dde4      	ble.n	8010bf0 <_dtoa_r+0xa68>
 8010c26:	9905      	ldr	r1, [sp, #20]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	9803      	ldr	r0, [sp, #12]
 8010c2c:	f000 ff74 	bl	8011b18 <__lshift>
 8010c30:	0031      	movs	r1, r6
 8010c32:	9005      	str	r0, [sp, #20]
 8010c34:	f000 ffdc 	bl	8011bf0 <__mcmp>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	dc02      	bgt.n	8010c42 <_dtoa_r+0xaba>
 8010c3c:	d1d8      	bne.n	8010bf0 <_dtoa_r+0xa68>
 8010c3e:	07eb      	lsls	r3, r5, #31
 8010c40:	d5d6      	bpl.n	8010bf0 <_dtoa_r+0xa68>
 8010c42:	2d39      	cmp	r5, #57	@ 0x39
 8010c44:	d1d2      	bne.n	8010bec <_dtoa_r+0xa64>
 8010c46:	2339      	movs	r3, #57	@ 0x39
 8010c48:	9a06      	ldr	r2, [sp, #24]
 8010c4a:	7013      	strb	r3, [r2, #0]
 8010c4c:	0023      	movs	r3, r4
 8010c4e:	001c      	movs	r4, r3
 8010c50:	3b01      	subs	r3, #1
 8010c52:	781a      	ldrb	r2, [r3, #0]
 8010c54:	2a39      	cmp	r2, #57	@ 0x39
 8010c56:	d050      	beq.n	8010cfa <_dtoa_r+0xb72>
 8010c58:	3201      	adds	r2, #1
 8010c5a:	701a      	strb	r2, [r3, #0]
 8010c5c:	e4fe      	b.n	801065c <_dtoa_r+0x4d4>
 8010c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	dd03      	ble.n	8010c6c <_dtoa_r+0xae4>
 8010c64:	2d39      	cmp	r5, #57	@ 0x39
 8010c66:	d0ee      	beq.n	8010c46 <_dtoa_r+0xabe>
 8010c68:	3501      	adds	r5, #1
 8010c6a:	e7c1      	b.n	8010bf0 <_dtoa_r+0xa68>
 8010c6c:	9b06      	ldr	r3, [sp, #24]
 8010c6e:	9a06      	ldr	r2, [sp, #24]
 8010c70:	701d      	strb	r5, [r3, #0]
 8010c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c74:	4293      	cmp	r3, r2
 8010c76:	d02b      	beq.n	8010cd0 <_dtoa_r+0xb48>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	220a      	movs	r2, #10
 8010c7c:	9905      	ldr	r1, [sp, #20]
 8010c7e:	9803      	ldr	r0, [sp, #12]
 8010c80:	f000 fd4c 	bl	801171c <__multadd>
 8010c84:	9b04      	ldr	r3, [sp, #16]
 8010c86:	9005      	str	r0, [sp, #20]
 8010c88:	429f      	cmp	r7, r3
 8010c8a:	d109      	bne.n	8010ca0 <_dtoa_r+0xb18>
 8010c8c:	0039      	movs	r1, r7
 8010c8e:	2300      	movs	r3, #0
 8010c90:	220a      	movs	r2, #10
 8010c92:	9803      	ldr	r0, [sp, #12]
 8010c94:	f000 fd42 	bl	801171c <__multadd>
 8010c98:	0007      	movs	r7, r0
 8010c9a:	9004      	str	r0, [sp, #16]
 8010c9c:	9406      	str	r4, [sp, #24]
 8010c9e:	e778      	b.n	8010b92 <_dtoa_r+0xa0a>
 8010ca0:	0039      	movs	r1, r7
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	220a      	movs	r2, #10
 8010ca6:	9803      	ldr	r0, [sp, #12]
 8010ca8:	f000 fd38 	bl	801171c <__multadd>
 8010cac:	2300      	movs	r3, #0
 8010cae:	0007      	movs	r7, r0
 8010cb0:	220a      	movs	r2, #10
 8010cb2:	9904      	ldr	r1, [sp, #16]
 8010cb4:	9803      	ldr	r0, [sp, #12]
 8010cb6:	f000 fd31 	bl	801171c <__multadd>
 8010cba:	9004      	str	r0, [sp, #16]
 8010cbc:	e7ee      	b.n	8010c9c <_dtoa_r+0xb14>
 8010cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cc0:	2401      	movs	r4, #1
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	dd00      	ble.n	8010cc8 <_dtoa_r+0xb40>
 8010cc6:	001c      	movs	r4, r3
 8010cc8:	9704      	str	r7, [sp, #16]
 8010cca:	2700      	movs	r7, #0
 8010ccc:	9b08      	ldr	r3, [sp, #32]
 8010cce:	191c      	adds	r4, r3, r4
 8010cd0:	9905      	ldr	r1, [sp, #20]
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	9803      	ldr	r0, [sp, #12]
 8010cd6:	f000 ff1f 	bl	8011b18 <__lshift>
 8010cda:	0031      	movs	r1, r6
 8010cdc:	9005      	str	r0, [sp, #20]
 8010cde:	f000 ff87 	bl	8011bf0 <__mcmp>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	dcb2      	bgt.n	8010c4c <_dtoa_r+0xac4>
 8010ce6:	d101      	bne.n	8010cec <_dtoa_r+0xb64>
 8010ce8:	07ed      	lsls	r5, r5, #31
 8010cea:	d4af      	bmi.n	8010c4c <_dtoa_r+0xac4>
 8010cec:	0023      	movs	r3, r4
 8010cee:	001c      	movs	r4, r3
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	781a      	ldrb	r2, [r3, #0]
 8010cf4:	2a30      	cmp	r2, #48	@ 0x30
 8010cf6:	d0fa      	beq.n	8010cee <_dtoa_r+0xb66>
 8010cf8:	e4b0      	b.n	801065c <_dtoa_r+0x4d4>
 8010cfa:	9a08      	ldr	r2, [sp, #32]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d1a6      	bne.n	8010c4e <_dtoa_r+0xac6>
 8010d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d02:	3301      	adds	r3, #1
 8010d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d06:	2331      	movs	r3, #49	@ 0x31
 8010d08:	7013      	strb	r3, [r2, #0]
 8010d0a:	e4a7      	b.n	801065c <_dtoa_r+0x4d4>
 8010d0c:	4b14      	ldr	r3, [pc, #80]	@ (8010d60 <_dtoa_r+0xbd8>)
 8010d0e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010d10:	9308      	str	r3, [sp, #32]
 8010d12:	4b14      	ldr	r3, [pc, #80]	@ (8010d64 <_dtoa_r+0xbdc>)
 8010d14:	2a00      	cmp	r2, #0
 8010d16:	d001      	beq.n	8010d1c <_dtoa_r+0xb94>
 8010d18:	f7ff fa7e 	bl	8010218 <_dtoa_r+0x90>
 8010d1c:	f7ff fa7e 	bl	801021c <_dtoa_r+0x94>
 8010d20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	dc00      	bgt.n	8010d28 <_dtoa_r+0xba0>
 8010d26:	e648      	b.n	80109ba <_dtoa_r+0x832>
 8010d28:	2001      	movs	r0, #1
 8010d2a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010d2c:	e665      	b.n	80109fa <_dtoa_r+0x872>
 8010d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	dc00      	bgt.n	8010d36 <_dtoa_r+0xbae>
 8010d34:	e6a9      	b.n	8010a8a <_dtoa_r+0x902>
 8010d36:	2400      	movs	r4, #0
 8010d38:	0031      	movs	r1, r6
 8010d3a:	9805      	ldr	r0, [sp, #20]
 8010d3c:	f7ff f99e 	bl	801007c <quorem>
 8010d40:	9b08      	ldr	r3, [sp, #32]
 8010d42:	3030      	adds	r0, #48	@ 0x30
 8010d44:	5518      	strb	r0, [r3, r4]
 8010d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d48:	3401      	adds	r4, #1
 8010d4a:	0005      	movs	r5, r0
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	ddb6      	ble.n	8010cbe <_dtoa_r+0xb36>
 8010d50:	2300      	movs	r3, #0
 8010d52:	220a      	movs	r2, #10
 8010d54:	9905      	ldr	r1, [sp, #20]
 8010d56:	9803      	ldr	r0, [sp, #12]
 8010d58:	f000 fce0 	bl	801171c <__multadd>
 8010d5c:	9005      	str	r0, [sp, #20]
 8010d5e:	e7eb      	b.n	8010d38 <_dtoa_r+0xbb0>
 8010d60:	08012dbe 	.word	0x08012dbe
 8010d64:	08012dc6 	.word	0x08012dc6

08010d68 <_free_r>:
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	0005      	movs	r5, r0
 8010d6c:	1e0c      	subs	r4, r1, #0
 8010d6e:	d010      	beq.n	8010d92 <_free_r+0x2a>
 8010d70:	3c04      	subs	r4, #4
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	da00      	bge.n	8010d7a <_free_r+0x12>
 8010d78:	18e4      	adds	r4, r4, r3
 8010d7a:	0028      	movs	r0, r5
 8010d7c:	f000 fc56 	bl	801162c <__malloc_lock>
 8010d80:	4a1d      	ldr	r2, [pc, #116]	@ (8010df8 <_free_r+0x90>)
 8010d82:	6813      	ldr	r3, [r2, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d105      	bne.n	8010d94 <_free_r+0x2c>
 8010d88:	6063      	str	r3, [r4, #4]
 8010d8a:	6014      	str	r4, [r2, #0]
 8010d8c:	0028      	movs	r0, r5
 8010d8e:	f000 fc55 	bl	801163c <__malloc_unlock>
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	42a3      	cmp	r3, r4
 8010d96:	d908      	bls.n	8010daa <_free_r+0x42>
 8010d98:	6820      	ldr	r0, [r4, #0]
 8010d9a:	1821      	adds	r1, r4, r0
 8010d9c:	428b      	cmp	r3, r1
 8010d9e:	d1f3      	bne.n	8010d88 <_free_r+0x20>
 8010da0:	6819      	ldr	r1, [r3, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	1809      	adds	r1, r1, r0
 8010da6:	6021      	str	r1, [r4, #0]
 8010da8:	e7ee      	b.n	8010d88 <_free_r+0x20>
 8010daa:	001a      	movs	r2, r3
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <_free_r+0x4e>
 8010db2:	42a3      	cmp	r3, r4
 8010db4:	d9f9      	bls.n	8010daa <_free_r+0x42>
 8010db6:	6811      	ldr	r1, [r2, #0]
 8010db8:	1850      	adds	r0, r2, r1
 8010dba:	42a0      	cmp	r0, r4
 8010dbc:	d10b      	bne.n	8010dd6 <_free_r+0x6e>
 8010dbe:	6820      	ldr	r0, [r4, #0]
 8010dc0:	1809      	adds	r1, r1, r0
 8010dc2:	1850      	adds	r0, r2, r1
 8010dc4:	6011      	str	r1, [r2, #0]
 8010dc6:	4283      	cmp	r3, r0
 8010dc8:	d1e0      	bne.n	8010d8c <_free_r+0x24>
 8010dca:	6818      	ldr	r0, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	1841      	adds	r1, r0, r1
 8010dd0:	6011      	str	r1, [r2, #0]
 8010dd2:	6053      	str	r3, [r2, #4]
 8010dd4:	e7da      	b.n	8010d8c <_free_r+0x24>
 8010dd6:	42a0      	cmp	r0, r4
 8010dd8:	d902      	bls.n	8010de0 <_free_r+0x78>
 8010dda:	230c      	movs	r3, #12
 8010ddc:	602b      	str	r3, [r5, #0]
 8010dde:	e7d5      	b.n	8010d8c <_free_r+0x24>
 8010de0:	6820      	ldr	r0, [r4, #0]
 8010de2:	1821      	adds	r1, r4, r0
 8010de4:	428b      	cmp	r3, r1
 8010de6:	d103      	bne.n	8010df0 <_free_r+0x88>
 8010de8:	6819      	ldr	r1, [r3, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	1809      	adds	r1, r1, r0
 8010dee:	6021      	str	r1, [r4, #0]
 8010df0:	6063      	str	r3, [r4, #4]
 8010df2:	6054      	str	r4, [r2, #4]
 8010df4:	e7ca      	b.n	8010d8c <_free_r+0x24>
 8010df6:	46c0      	nop			@ (mov r8, r8)
 8010df8:	200022a4 	.word	0x200022a4

08010dfc <rshift>:
 8010dfc:	0002      	movs	r2, r0
 8010dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e00:	6904      	ldr	r4, [r0, #16]
 8010e02:	b085      	sub	sp, #20
 8010e04:	3214      	adds	r2, #20
 8010e06:	114b      	asrs	r3, r1, #5
 8010e08:	0016      	movs	r6, r2
 8010e0a:	9302      	str	r3, [sp, #8]
 8010e0c:	429c      	cmp	r4, r3
 8010e0e:	dd31      	ble.n	8010e74 <rshift+0x78>
 8010e10:	261f      	movs	r6, #31
 8010e12:	000f      	movs	r7, r1
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	00a5      	lsls	r5, r4, #2
 8010e18:	18d3      	adds	r3, r2, r3
 8010e1a:	4037      	ands	r7, r6
 8010e1c:	1955      	adds	r5, r2, r5
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	9701      	str	r7, [sp, #4]
 8010e22:	4231      	tst	r1, r6
 8010e24:	d10d      	bne.n	8010e42 <rshift+0x46>
 8010e26:	0016      	movs	r6, r2
 8010e28:	0019      	movs	r1, r3
 8010e2a:	428d      	cmp	r5, r1
 8010e2c:	d836      	bhi.n	8010e9c <rshift+0xa0>
 8010e2e:	9b00      	ldr	r3, [sp, #0]
 8010e30:	2600      	movs	r6, #0
 8010e32:	3b03      	subs	r3, #3
 8010e34:	429d      	cmp	r5, r3
 8010e36:	d302      	bcc.n	8010e3e <rshift+0x42>
 8010e38:	9b02      	ldr	r3, [sp, #8]
 8010e3a:	1ae4      	subs	r4, r4, r3
 8010e3c:	00a6      	lsls	r6, r4, #2
 8010e3e:	1996      	adds	r6, r2, r6
 8010e40:	e018      	b.n	8010e74 <rshift+0x78>
 8010e42:	2120      	movs	r1, #32
 8010e44:	9e01      	ldr	r6, [sp, #4]
 8010e46:	9f01      	ldr	r7, [sp, #4]
 8010e48:	1b89      	subs	r1, r1, r6
 8010e4a:	9e00      	ldr	r6, [sp, #0]
 8010e4c:	9103      	str	r1, [sp, #12]
 8010e4e:	ce02      	ldmia	r6!, {r1}
 8010e50:	4694      	mov	ip, r2
 8010e52:	40f9      	lsrs	r1, r7
 8010e54:	42b5      	cmp	r5, r6
 8010e56:	d816      	bhi.n	8010e86 <rshift+0x8a>
 8010e58:	9b00      	ldr	r3, [sp, #0]
 8010e5a:	2600      	movs	r6, #0
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	429d      	cmp	r5, r3
 8010e60:	d303      	bcc.n	8010e6a <rshift+0x6e>
 8010e62:	9b02      	ldr	r3, [sp, #8]
 8010e64:	1ae4      	subs	r4, r4, r3
 8010e66:	00a6      	lsls	r6, r4, #2
 8010e68:	3e04      	subs	r6, #4
 8010e6a:	1996      	adds	r6, r2, r6
 8010e6c:	6031      	str	r1, [r6, #0]
 8010e6e:	2900      	cmp	r1, #0
 8010e70:	d000      	beq.n	8010e74 <rshift+0x78>
 8010e72:	3604      	adds	r6, #4
 8010e74:	1ab1      	subs	r1, r6, r2
 8010e76:	1089      	asrs	r1, r1, #2
 8010e78:	6101      	str	r1, [r0, #16]
 8010e7a:	4296      	cmp	r6, r2
 8010e7c:	d101      	bne.n	8010e82 <rshift+0x86>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	6143      	str	r3, [r0, #20]
 8010e82:	b005      	add	sp, #20
 8010e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e86:	6837      	ldr	r7, [r6, #0]
 8010e88:	9b03      	ldr	r3, [sp, #12]
 8010e8a:	409f      	lsls	r7, r3
 8010e8c:	430f      	orrs	r7, r1
 8010e8e:	4661      	mov	r1, ip
 8010e90:	c180      	stmia	r1!, {r7}
 8010e92:	468c      	mov	ip, r1
 8010e94:	9b01      	ldr	r3, [sp, #4]
 8010e96:	ce02      	ldmia	r6!, {r1}
 8010e98:	40d9      	lsrs	r1, r3
 8010e9a:	e7db      	b.n	8010e54 <rshift+0x58>
 8010e9c:	c980      	ldmia	r1!, {r7}
 8010e9e:	c680      	stmia	r6!, {r7}
 8010ea0:	e7c3      	b.n	8010e2a <rshift+0x2e>

08010ea2 <__hexdig_fun>:
 8010ea2:	0002      	movs	r2, r0
 8010ea4:	3a30      	subs	r2, #48	@ 0x30
 8010ea6:	0003      	movs	r3, r0
 8010ea8:	2a09      	cmp	r2, #9
 8010eaa:	d802      	bhi.n	8010eb2 <__hexdig_fun+0x10>
 8010eac:	3b20      	subs	r3, #32
 8010eae:	b2d8      	uxtb	r0, r3
 8010eb0:	4770      	bx	lr
 8010eb2:	0002      	movs	r2, r0
 8010eb4:	3a61      	subs	r2, #97	@ 0x61
 8010eb6:	2a05      	cmp	r2, #5
 8010eb8:	d801      	bhi.n	8010ebe <__hexdig_fun+0x1c>
 8010eba:	3b47      	subs	r3, #71	@ 0x47
 8010ebc:	e7f7      	b.n	8010eae <__hexdig_fun+0xc>
 8010ebe:	001a      	movs	r2, r3
 8010ec0:	3a41      	subs	r2, #65	@ 0x41
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	2a05      	cmp	r2, #5
 8010ec6:	d8f3      	bhi.n	8010eb0 <__hexdig_fun+0xe>
 8010ec8:	3b27      	subs	r3, #39	@ 0x27
 8010eca:	e7f0      	b.n	8010eae <__hexdig_fun+0xc>

08010ecc <__gethex>:
 8010ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ece:	b089      	sub	sp, #36	@ 0x24
 8010ed0:	9307      	str	r3, [sp, #28]
 8010ed2:	680b      	ldr	r3, [r1, #0]
 8010ed4:	9201      	str	r2, [sp, #4]
 8010ed6:	9003      	str	r0, [sp, #12]
 8010ed8:	9106      	str	r1, [sp, #24]
 8010eda:	1c9a      	adds	r2, r3, #2
 8010edc:	0011      	movs	r1, r2
 8010ede:	3201      	adds	r2, #1
 8010ee0:	1e50      	subs	r0, r2, #1
 8010ee2:	7800      	ldrb	r0, [r0, #0]
 8010ee4:	2830      	cmp	r0, #48	@ 0x30
 8010ee6:	d0f9      	beq.n	8010edc <__gethex+0x10>
 8010ee8:	1acb      	subs	r3, r1, r3
 8010eea:	3b02      	subs	r3, #2
 8010eec:	9305      	str	r3, [sp, #20]
 8010eee:	9100      	str	r1, [sp, #0]
 8010ef0:	f7ff ffd7 	bl	8010ea2 <__hexdig_fun>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	001d      	movs	r5, r3
 8010ef8:	9302      	str	r3, [sp, #8]
 8010efa:	4298      	cmp	r0, r3
 8010efc:	d11e      	bne.n	8010f3c <__gethex+0x70>
 8010efe:	2201      	movs	r2, #1
 8010f00:	49a6      	ldr	r1, [pc, #664]	@ (801119c <__gethex+0x2d0>)
 8010f02:	9800      	ldr	r0, [sp, #0]
 8010f04:	f7ff f80e 	bl	800ff24 <strncmp>
 8010f08:	0007      	movs	r7, r0
 8010f0a:	42a8      	cmp	r0, r5
 8010f0c:	d000      	beq.n	8010f10 <__gethex+0x44>
 8010f0e:	e06a      	b.n	8010fe6 <__gethex+0x11a>
 8010f10:	9b00      	ldr	r3, [sp, #0]
 8010f12:	7858      	ldrb	r0, [r3, #1]
 8010f14:	1c5c      	adds	r4, r3, #1
 8010f16:	f7ff ffc4 	bl	8010ea2 <__hexdig_fun>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	9302      	str	r3, [sp, #8]
 8010f1e:	42a8      	cmp	r0, r5
 8010f20:	d02f      	beq.n	8010f82 <__gethex+0xb6>
 8010f22:	9400      	str	r4, [sp, #0]
 8010f24:	9b00      	ldr	r3, [sp, #0]
 8010f26:	7818      	ldrb	r0, [r3, #0]
 8010f28:	2830      	cmp	r0, #48	@ 0x30
 8010f2a:	d009      	beq.n	8010f40 <__gethex+0x74>
 8010f2c:	f7ff ffb9 	bl	8010ea2 <__hexdig_fun>
 8010f30:	4242      	negs	r2, r0
 8010f32:	4142      	adcs	r2, r0
 8010f34:	2301      	movs	r3, #1
 8010f36:	0025      	movs	r5, r4
 8010f38:	9202      	str	r2, [sp, #8]
 8010f3a:	9305      	str	r3, [sp, #20]
 8010f3c:	9c00      	ldr	r4, [sp, #0]
 8010f3e:	e004      	b.n	8010f4a <__gethex+0x7e>
 8010f40:	9b00      	ldr	r3, [sp, #0]
 8010f42:	3301      	adds	r3, #1
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	e7ed      	b.n	8010f24 <__gethex+0x58>
 8010f48:	3401      	adds	r4, #1
 8010f4a:	7820      	ldrb	r0, [r4, #0]
 8010f4c:	f7ff ffa9 	bl	8010ea2 <__hexdig_fun>
 8010f50:	1e07      	subs	r7, r0, #0
 8010f52:	d1f9      	bne.n	8010f48 <__gethex+0x7c>
 8010f54:	2201      	movs	r2, #1
 8010f56:	0020      	movs	r0, r4
 8010f58:	4990      	ldr	r1, [pc, #576]	@ (801119c <__gethex+0x2d0>)
 8010f5a:	f7fe ffe3 	bl	800ff24 <strncmp>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d10d      	bne.n	8010f7e <__gethex+0xb2>
 8010f62:	2d00      	cmp	r5, #0
 8010f64:	d106      	bne.n	8010f74 <__gethex+0xa8>
 8010f66:	3401      	adds	r4, #1
 8010f68:	0025      	movs	r5, r4
 8010f6a:	7820      	ldrb	r0, [r4, #0]
 8010f6c:	f7ff ff99 	bl	8010ea2 <__hexdig_fun>
 8010f70:	2800      	cmp	r0, #0
 8010f72:	d102      	bne.n	8010f7a <__gethex+0xae>
 8010f74:	1b2d      	subs	r5, r5, r4
 8010f76:	00af      	lsls	r7, r5, #2
 8010f78:	e003      	b.n	8010f82 <__gethex+0xb6>
 8010f7a:	3401      	adds	r4, #1
 8010f7c:	e7f5      	b.n	8010f6a <__gethex+0x9e>
 8010f7e:	2d00      	cmp	r5, #0
 8010f80:	d1f8      	bne.n	8010f74 <__gethex+0xa8>
 8010f82:	2220      	movs	r2, #32
 8010f84:	7823      	ldrb	r3, [r4, #0]
 8010f86:	0026      	movs	r6, r4
 8010f88:	4393      	bics	r3, r2
 8010f8a:	2b50      	cmp	r3, #80	@ 0x50
 8010f8c:	d11d      	bne.n	8010fca <__gethex+0xfe>
 8010f8e:	7863      	ldrb	r3, [r4, #1]
 8010f90:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f92:	d02d      	beq.n	8010ff0 <__gethex+0x124>
 8010f94:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f96:	d02f      	beq.n	8010ff8 <__gethex+0x12c>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	1c66      	adds	r6, r4, #1
 8010f9c:	9304      	str	r3, [sp, #16]
 8010f9e:	7830      	ldrb	r0, [r6, #0]
 8010fa0:	f7ff ff7f 	bl	8010ea2 <__hexdig_fun>
 8010fa4:	1e43      	subs	r3, r0, #1
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	0005      	movs	r5, r0
 8010faa:	2b18      	cmp	r3, #24
 8010fac:	d82a      	bhi.n	8011004 <__gethex+0x138>
 8010fae:	7870      	ldrb	r0, [r6, #1]
 8010fb0:	f7ff ff77 	bl	8010ea2 <__hexdig_fun>
 8010fb4:	1e43      	subs	r3, r0, #1
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	3601      	adds	r6, #1
 8010fba:	3d10      	subs	r5, #16
 8010fbc:	2b18      	cmp	r3, #24
 8010fbe:	d91d      	bls.n	8010ffc <__gethex+0x130>
 8010fc0:	9b04      	ldr	r3, [sp, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d000      	beq.n	8010fc8 <__gethex+0xfc>
 8010fc6:	426d      	negs	r5, r5
 8010fc8:	197f      	adds	r7, r7, r5
 8010fca:	9b06      	ldr	r3, [sp, #24]
 8010fcc:	601e      	str	r6, [r3, #0]
 8010fce:	9b02      	ldr	r3, [sp, #8]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d019      	beq.n	8011008 <__gethex+0x13c>
 8010fd4:	9b05      	ldr	r3, [sp, #20]
 8010fd6:	2606      	movs	r6, #6
 8010fd8:	425a      	negs	r2, r3
 8010fda:	4153      	adcs	r3, r2
 8010fdc:	425b      	negs	r3, r3
 8010fde:	401e      	ands	r6, r3
 8010fe0:	0030      	movs	r0, r6
 8010fe2:	b009      	add	sp, #36	@ 0x24
 8010fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	2700      	movs	r7, #0
 8010fea:	9c00      	ldr	r4, [sp, #0]
 8010fec:	9302      	str	r3, [sp, #8]
 8010fee:	e7c8      	b.n	8010f82 <__gethex+0xb6>
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	9304      	str	r3, [sp, #16]
 8010ff4:	1ca6      	adds	r6, r4, #2
 8010ff6:	e7d2      	b.n	8010f9e <__gethex+0xd2>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	e7fa      	b.n	8010ff2 <__gethex+0x126>
 8010ffc:	230a      	movs	r3, #10
 8010ffe:	435d      	muls	r5, r3
 8011000:	182d      	adds	r5, r5, r0
 8011002:	e7d4      	b.n	8010fae <__gethex+0xe2>
 8011004:	0026      	movs	r6, r4
 8011006:	e7e0      	b.n	8010fca <__gethex+0xfe>
 8011008:	9b00      	ldr	r3, [sp, #0]
 801100a:	9902      	ldr	r1, [sp, #8]
 801100c:	1ae3      	subs	r3, r4, r3
 801100e:	3b01      	subs	r3, #1
 8011010:	2b07      	cmp	r3, #7
 8011012:	dc0a      	bgt.n	801102a <__gethex+0x15e>
 8011014:	9803      	ldr	r0, [sp, #12]
 8011016:	f000 fb19 	bl	801164c <_Balloc>
 801101a:	1e05      	subs	r5, r0, #0
 801101c:	d108      	bne.n	8011030 <__gethex+0x164>
 801101e:	002a      	movs	r2, r5
 8011020:	21e4      	movs	r1, #228	@ 0xe4
 8011022:	4b5f      	ldr	r3, [pc, #380]	@ (80111a0 <__gethex+0x2d4>)
 8011024:	485f      	ldr	r0, [pc, #380]	@ (80111a4 <__gethex+0x2d8>)
 8011026:	f001 fa15 	bl	8012454 <__assert_func>
 801102a:	3101      	adds	r1, #1
 801102c:	105b      	asrs	r3, r3, #1
 801102e:	e7ef      	b.n	8011010 <__gethex+0x144>
 8011030:	0003      	movs	r3, r0
 8011032:	3314      	adds	r3, #20
 8011034:	9302      	str	r3, [sp, #8]
 8011036:	9305      	str	r3, [sp, #20]
 8011038:	2300      	movs	r3, #0
 801103a:	001e      	movs	r6, r3
 801103c:	9304      	str	r3, [sp, #16]
 801103e:	9b00      	ldr	r3, [sp, #0]
 8011040:	42a3      	cmp	r3, r4
 8011042:	d338      	bcc.n	80110b6 <__gethex+0x1ea>
 8011044:	9c05      	ldr	r4, [sp, #20]
 8011046:	9b02      	ldr	r3, [sp, #8]
 8011048:	c440      	stmia	r4!, {r6}
 801104a:	1ae4      	subs	r4, r4, r3
 801104c:	10a4      	asrs	r4, r4, #2
 801104e:	0030      	movs	r0, r6
 8011050:	612c      	str	r4, [r5, #16]
 8011052:	f000 fbf3 	bl	801183c <__hi0bits>
 8011056:	9b01      	ldr	r3, [sp, #4]
 8011058:	0164      	lsls	r4, r4, #5
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	1a26      	subs	r6, r4, r0
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	429e      	cmp	r6, r3
 8011062:	dd52      	ble.n	801110a <__gethex+0x23e>
 8011064:	1af6      	subs	r6, r6, r3
 8011066:	0031      	movs	r1, r6
 8011068:	0028      	movs	r0, r5
 801106a:	f000 ff8e 	bl	8011f8a <__any_on>
 801106e:	1e04      	subs	r4, r0, #0
 8011070:	d00f      	beq.n	8011092 <__gethex+0x1c6>
 8011072:	2401      	movs	r4, #1
 8011074:	211f      	movs	r1, #31
 8011076:	0020      	movs	r0, r4
 8011078:	1e73      	subs	r3, r6, #1
 801107a:	4019      	ands	r1, r3
 801107c:	4088      	lsls	r0, r1
 801107e:	0001      	movs	r1, r0
 8011080:	115a      	asrs	r2, r3, #5
 8011082:	9802      	ldr	r0, [sp, #8]
 8011084:	0092      	lsls	r2, r2, #2
 8011086:	5812      	ldr	r2, [r2, r0]
 8011088:	420a      	tst	r2, r1
 801108a:	d002      	beq.n	8011092 <__gethex+0x1c6>
 801108c:	42a3      	cmp	r3, r4
 801108e:	dc34      	bgt.n	80110fa <__gethex+0x22e>
 8011090:	2402      	movs	r4, #2
 8011092:	0031      	movs	r1, r6
 8011094:	0028      	movs	r0, r5
 8011096:	f7ff feb1 	bl	8010dfc <rshift>
 801109a:	19bf      	adds	r7, r7, r6
 801109c:	9b01      	ldr	r3, [sp, #4]
 801109e:	689b      	ldr	r3, [r3, #8]
 80110a0:	42bb      	cmp	r3, r7
 80110a2:	da42      	bge.n	801112a <__gethex+0x25e>
 80110a4:	0029      	movs	r1, r5
 80110a6:	9803      	ldr	r0, [sp, #12]
 80110a8:	f000 fb14 	bl	80116d4 <_Bfree>
 80110ac:	2300      	movs	r3, #0
 80110ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110b0:	26a3      	movs	r6, #163	@ 0xa3
 80110b2:	6013      	str	r3, [r2, #0]
 80110b4:	e794      	b.n	8010fe0 <__gethex+0x114>
 80110b6:	3c01      	subs	r4, #1
 80110b8:	7823      	ldrb	r3, [r4, #0]
 80110ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80110bc:	d012      	beq.n	80110e4 <__gethex+0x218>
 80110be:	9b04      	ldr	r3, [sp, #16]
 80110c0:	2b20      	cmp	r3, #32
 80110c2:	d104      	bne.n	80110ce <__gethex+0x202>
 80110c4:	9b05      	ldr	r3, [sp, #20]
 80110c6:	c340      	stmia	r3!, {r6}
 80110c8:	2600      	movs	r6, #0
 80110ca:	9305      	str	r3, [sp, #20]
 80110cc:	9604      	str	r6, [sp, #16]
 80110ce:	7820      	ldrb	r0, [r4, #0]
 80110d0:	f7ff fee7 	bl	8010ea2 <__hexdig_fun>
 80110d4:	230f      	movs	r3, #15
 80110d6:	4018      	ands	r0, r3
 80110d8:	9b04      	ldr	r3, [sp, #16]
 80110da:	4098      	lsls	r0, r3
 80110dc:	3304      	adds	r3, #4
 80110de:	4306      	orrs	r6, r0
 80110e0:	9304      	str	r3, [sp, #16]
 80110e2:	e7ac      	b.n	801103e <__gethex+0x172>
 80110e4:	9b00      	ldr	r3, [sp, #0]
 80110e6:	42a3      	cmp	r3, r4
 80110e8:	d8e9      	bhi.n	80110be <__gethex+0x1f2>
 80110ea:	2201      	movs	r2, #1
 80110ec:	0020      	movs	r0, r4
 80110ee:	492b      	ldr	r1, [pc, #172]	@ (801119c <__gethex+0x2d0>)
 80110f0:	f7fe ff18 	bl	800ff24 <strncmp>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d1e2      	bne.n	80110be <__gethex+0x1f2>
 80110f8:	e7a1      	b.n	801103e <__gethex+0x172>
 80110fa:	0028      	movs	r0, r5
 80110fc:	1eb1      	subs	r1, r6, #2
 80110fe:	f000 ff44 	bl	8011f8a <__any_on>
 8011102:	2800      	cmp	r0, #0
 8011104:	d0c4      	beq.n	8011090 <__gethex+0x1c4>
 8011106:	2403      	movs	r4, #3
 8011108:	e7c3      	b.n	8011092 <__gethex+0x1c6>
 801110a:	9b00      	ldr	r3, [sp, #0]
 801110c:	2400      	movs	r4, #0
 801110e:	429e      	cmp	r6, r3
 8011110:	dac4      	bge.n	801109c <__gethex+0x1d0>
 8011112:	1b9e      	subs	r6, r3, r6
 8011114:	0029      	movs	r1, r5
 8011116:	0032      	movs	r2, r6
 8011118:	9803      	ldr	r0, [sp, #12]
 801111a:	f000 fcfd 	bl	8011b18 <__lshift>
 801111e:	0003      	movs	r3, r0
 8011120:	3314      	adds	r3, #20
 8011122:	0005      	movs	r5, r0
 8011124:	1bbf      	subs	r7, r7, r6
 8011126:	9302      	str	r3, [sp, #8]
 8011128:	e7b8      	b.n	801109c <__gethex+0x1d0>
 801112a:	9b01      	ldr	r3, [sp, #4]
 801112c:	685e      	ldr	r6, [r3, #4]
 801112e:	42be      	cmp	r6, r7
 8011130:	dd6f      	ble.n	8011212 <__gethex+0x346>
 8011132:	9b00      	ldr	r3, [sp, #0]
 8011134:	1bf6      	subs	r6, r6, r7
 8011136:	42b3      	cmp	r3, r6
 8011138:	dc36      	bgt.n	80111a8 <__gethex+0x2dc>
 801113a:	9b01      	ldr	r3, [sp, #4]
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	2b02      	cmp	r3, #2
 8011140:	d024      	beq.n	801118c <__gethex+0x2c0>
 8011142:	2b03      	cmp	r3, #3
 8011144:	d026      	beq.n	8011194 <__gethex+0x2c8>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d117      	bne.n	801117a <__gethex+0x2ae>
 801114a:	9b00      	ldr	r3, [sp, #0]
 801114c:	42b3      	cmp	r3, r6
 801114e:	d114      	bne.n	801117a <__gethex+0x2ae>
 8011150:	2b01      	cmp	r3, #1
 8011152:	d10b      	bne.n	801116c <__gethex+0x2a0>
 8011154:	9b01      	ldr	r3, [sp, #4]
 8011156:	9a07      	ldr	r2, [sp, #28]
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	2662      	movs	r6, #98	@ 0x62
 801115c:	6013      	str	r3, [r2, #0]
 801115e:	2301      	movs	r3, #1
 8011160:	9a02      	ldr	r2, [sp, #8]
 8011162:	612b      	str	r3, [r5, #16]
 8011164:	6013      	str	r3, [r2, #0]
 8011166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011168:	601d      	str	r5, [r3, #0]
 801116a:	e739      	b.n	8010fe0 <__gethex+0x114>
 801116c:	9900      	ldr	r1, [sp, #0]
 801116e:	0028      	movs	r0, r5
 8011170:	3901      	subs	r1, #1
 8011172:	f000 ff0a 	bl	8011f8a <__any_on>
 8011176:	2800      	cmp	r0, #0
 8011178:	d1ec      	bne.n	8011154 <__gethex+0x288>
 801117a:	0029      	movs	r1, r5
 801117c:	9803      	ldr	r0, [sp, #12]
 801117e:	f000 faa9 	bl	80116d4 <_Bfree>
 8011182:	2300      	movs	r3, #0
 8011184:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011186:	2650      	movs	r6, #80	@ 0x50
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	e729      	b.n	8010fe0 <__gethex+0x114>
 801118c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1f3      	bne.n	801117a <__gethex+0x2ae>
 8011192:	e7df      	b.n	8011154 <__gethex+0x288>
 8011194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011196:	2b00      	cmp	r3, #0
 8011198:	d1dc      	bne.n	8011154 <__gethex+0x288>
 801119a:	e7ee      	b.n	801117a <__gethex+0x2ae>
 801119c:	08012d80 	.word	0x08012d80
 80111a0:	08012e3a 	.word	0x08012e3a
 80111a4:	08012e4b 	.word	0x08012e4b
 80111a8:	1e77      	subs	r7, r6, #1
 80111aa:	2c00      	cmp	r4, #0
 80111ac:	d12f      	bne.n	801120e <__gethex+0x342>
 80111ae:	2f00      	cmp	r7, #0
 80111b0:	d004      	beq.n	80111bc <__gethex+0x2f0>
 80111b2:	0039      	movs	r1, r7
 80111b4:	0028      	movs	r0, r5
 80111b6:	f000 fee8 	bl	8011f8a <__any_on>
 80111ba:	0004      	movs	r4, r0
 80111bc:	231f      	movs	r3, #31
 80111be:	117a      	asrs	r2, r7, #5
 80111c0:	401f      	ands	r7, r3
 80111c2:	3b1e      	subs	r3, #30
 80111c4:	40bb      	lsls	r3, r7
 80111c6:	9902      	ldr	r1, [sp, #8]
 80111c8:	0092      	lsls	r2, r2, #2
 80111ca:	5852      	ldr	r2, [r2, r1]
 80111cc:	421a      	tst	r2, r3
 80111ce:	d001      	beq.n	80111d4 <__gethex+0x308>
 80111d0:	2302      	movs	r3, #2
 80111d2:	431c      	orrs	r4, r3
 80111d4:	9b00      	ldr	r3, [sp, #0]
 80111d6:	0031      	movs	r1, r6
 80111d8:	1b9b      	subs	r3, r3, r6
 80111da:	2602      	movs	r6, #2
 80111dc:	0028      	movs	r0, r5
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	f7ff fe0c 	bl	8010dfc <rshift>
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	685f      	ldr	r7, [r3, #4]
 80111e8:	2c00      	cmp	r4, #0
 80111ea:	d03f      	beq.n	801126c <__gethex+0x3a0>
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d010      	beq.n	8011216 <__gethex+0x34a>
 80111f4:	2b03      	cmp	r3, #3
 80111f6:	d012      	beq.n	801121e <__gethex+0x352>
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d106      	bne.n	801120a <__gethex+0x33e>
 80111fc:	07a2      	lsls	r2, r4, #30
 80111fe:	d504      	bpl.n	801120a <__gethex+0x33e>
 8011200:	9a02      	ldr	r2, [sp, #8]
 8011202:	6812      	ldr	r2, [r2, #0]
 8011204:	4314      	orrs	r4, r2
 8011206:	421c      	tst	r4, r3
 8011208:	d10c      	bne.n	8011224 <__gethex+0x358>
 801120a:	2310      	movs	r3, #16
 801120c:	e02d      	b.n	801126a <__gethex+0x39e>
 801120e:	2401      	movs	r4, #1
 8011210:	e7d4      	b.n	80111bc <__gethex+0x2f0>
 8011212:	2601      	movs	r6, #1
 8011214:	e7e8      	b.n	80111e8 <__gethex+0x31c>
 8011216:	2301      	movs	r3, #1
 8011218:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801121a:	1a9b      	subs	r3, r3, r2
 801121c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801121e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d0f2      	beq.n	801120a <__gethex+0x33e>
 8011224:	692b      	ldr	r3, [r5, #16]
 8011226:	2000      	movs	r0, #0
 8011228:	9302      	str	r3, [sp, #8]
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	002b      	movs	r3, r5
 8011230:	9a04      	ldr	r2, [sp, #16]
 8011232:	3314      	adds	r3, #20
 8011234:	1899      	adds	r1, r3, r2
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	1c54      	adds	r4, r2, #1
 801123a:	d01c      	beq.n	8011276 <__gethex+0x3aa>
 801123c:	3201      	adds	r2, #1
 801123e:	601a      	str	r2, [r3, #0]
 8011240:	002b      	movs	r3, r5
 8011242:	3314      	adds	r3, #20
 8011244:	2e02      	cmp	r6, #2
 8011246:	d13f      	bne.n	80112c8 <__gethex+0x3fc>
 8011248:	9a01      	ldr	r2, [sp, #4]
 801124a:	9900      	ldr	r1, [sp, #0]
 801124c:	6812      	ldr	r2, [r2, #0]
 801124e:	3a01      	subs	r2, #1
 8011250:	428a      	cmp	r2, r1
 8011252:	d109      	bne.n	8011268 <__gethex+0x39c>
 8011254:	000a      	movs	r2, r1
 8011256:	201f      	movs	r0, #31
 8011258:	4010      	ands	r0, r2
 801125a:	2201      	movs	r2, #1
 801125c:	4082      	lsls	r2, r0
 801125e:	1149      	asrs	r1, r1, #5
 8011260:	0089      	lsls	r1, r1, #2
 8011262:	58cb      	ldr	r3, [r1, r3]
 8011264:	4213      	tst	r3, r2
 8011266:	d13d      	bne.n	80112e4 <__gethex+0x418>
 8011268:	2320      	movs	r3, #32
 801126a:	431e      	orrs	r6, r3
 801126c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801126e:	601d      	str	r5, [r3, #0]
 8011270:	9b07      	ldr	r3, [sp, #28]
 8011272:	601f      	str	r7, [r3, #0]
 8011274:	e6b4      	b.n	8010fe0 <__gethex+0x114>
 8011276:	c301      	stmia	r3!, {r0}
 8011278:	4299      	cmp	r1, r3
 801127a:	d8dc      	bhi.n	8011236 <__gethex+0x36a>
 801127c:	68ab      	ldr	r3, [r5, #8]
 801127e:	9a02      	ldr	r2, [sp, #8]
 8011280:	429a      	cmp	r2, r3
 8011282:	db18      	blt.n	80112b6 <__gethex+0x3ea>
 8011284:	6869      	ldr	r1, [r5, #4]
 8011286:	9803      	ldr	r0, [sp, #12]
 8011288:	3101      	adds	r1, #1
 801128a:	f000 f9df 	bl	801164c <_Balloc>
 801128e:	1e04      	subs	r4, r0, #0
 8011290:	d104      	bne.n	801129c <__gethex+0x3d0>
 8011292:	0022      	movs	r2, r4
 8011294:	2184      	movs	r1, #132	@ 0x84
 8011296:	4b1d      	ldr	r3, [pc, #116]	@ (801130c <__gethex+0x440>)
 8011298:	481d      	ldr	r0, [pc, #116]	@ (8011310 <__gethex+0x444>)
 801129a:	e6c4      	b.n	8011026 <__gethex+0x15a>
 801129c:	0029      	movs	r1, r5
 801129e:	692a      	ldr	r2, [r5, #16]
 80112a0:	310c      	adds	r1, #12
 80112a2:	3202      	adds	r2, #2
 80112a4:	0092      	lsls	r2, r2, #2
 80112a6:	300c      	adds	r0, #12
 80112a8:	f7fe fed8 	bl	801005c <memcpy>
 80112ac:	0029      	movs	r1, r5
 80112ae:	9803      	ldr	r0, [sp, #12]
 80112b0:	f000 fa10 	bl	80116d4 <_Bfree>
 80112b4:	0025      	movs	r5, r4
 80112b6:	692b      	ldr	r3, [r5, #16]
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	612a      	str	r2, [r5, #16]
 80112bc:	2201      	movs	r2, #1
 80112be:	3304      	adds	r3, #4
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	18eb      	adds	r3, r5, r3
 80112c4:	605a      	str	r2, [r3, #4]
 80112c6:	e7bb      	b.n	8011240 <__gethex+0x374>
 80112c8:	692a      	ldr	r2, [r5, #16]
 80112ca:	9902      	ldr	r1, [sp, #8]
 80112cc:	428a      	cmp	r2, r1
 80112ce:	dd0b      	ble.n	80112e8 <__gethex+0x41c>
 80112d0:	2101      	movs	r1, #1
 80112d2:	0028      	movs	r0, r5
 80112d4:	f7ff fd92 	bl	8010dfc <rshift>
 80112d8:	9b01      	ldr	r3, [sp, #4]
 80112da:	3701      	adds	r7, #1
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	42bb      	cmp	r3, r7
 80112e0:	da00      	bge.n	80112e4 <__gethex+0x418>
 80112e2:	e6df      	b.n	80110a4 <__gethex+0x1d8>
 80112e4:	2601      	movs	r6, #1
 80112e6:	e7bf      	b.n	8011268 <__gethex+0x39c>
 80112e8:	221f      	movs	r2, #31
 80112ea:	9c00      	ldr	r4, [sp, #0]
 80112ec:	9900      	ldr	r1, [sp, #0]
 80112ee:	4014      	ands	r4, r2
 80112f0:	4211      	tst	r1, r2
 80112f2:	d0f7      	beq.n	80112e4 <__gethex+0x418>
 80112f4:	9a04      	ldr	r2, [sp, #16]
 80112f6:	189b      	adds	r3, r3, r2
 80112f8:	3b04      	subs	r3, #4
 80112fa:	6818      	ldr	r0, [r3, #0]
 80112fc:	f000 fa9e 	bl	801183c <__hi0bits>
 8011300:	2320      	movs	r3, #32
 8011302:	1b1b      	subs	r3, r3, r4
 8011304:	4298      	cmp	r0, r3
 8011306:	dbe3      	blt.n	80112d0 <__gethex+0x404>
 8011308:	e7ec      	b.n	80112e4 <__gethex+0x418>
 801130a:	46c0      	nop			@ (mov r8, r8)
 801130c:	08012e3a 	.word	0x08012e3a
 8011310:	08012e4b 	.word	0x08012e4b

08011314 <L_shift>:
 8011314:	2308      	movs	r3, #8
 8011316:	b570      	push	{r4, r5, r6, lr}
 8011318:	2520      	movs	r5, #32
 801131a:	1a9a      	subs	r2, r3, r2
 801131c:	0092      	lsls	r2, r2, #2
 801131e:	1aad      	subs	r5, r5, r2
 8011320:	6843      	ldr	r3, [r0, #4]
 8011322:	6804      	ldr	r4, [r0, #0]
 8011324:	001e      	movs	r6, r3
 8011326:	40ae      	lsls	r6, r5
 8011328:	40d3      	lsrs	r3, r2
 801132a:	4334      	orrs	r4, r6
 801132c:	6004      	str	r4, [r0, #0]
 801132e:	6043      	str	r3, [r0, #4]
 8011330:	3004      	adds	r0, #4
 8011332:	4288      	cmp	r0, r1
 8011334:	d3f4      	bcc.n	8011320 <L_shift+0xc>
 8011336:	bd70      	pop	{r4, r5, r6, pc}

08011338 <__match>:
 8011338:	b530      	push	{r4, r5, lr}
 801133a:	6803      	ldr	r3, [r0, #0]
 801133c:	780c      	ldrb	r4, [r1, #0]
 801133e:	3301      	adds	r3, #1
 8011340:	2c00      	cmp	r4, #0
 8011342:	d102      	bne.n	801134a <__match+0x12>
 8011344:	6003      	str	r3, [r0, #0]
 8011346:	2001      	movs	r0, #1
 8011348:	bd30      	pop	{r4, r5, pc}
 801134a:	781a      	ldrb	r2, [r3, #0]
 801134c:	0015      	movs	r5, r2
 801134e:	3d41      	subs	r5, #65	@ 0x41
 8011350:	2d19      	cmp	r5, #25
 8011352:	d800      	bhi.n	8011356 <__match+0x1e>
 8011354:	3220      	adds	r2, #32
 8011356:	3101      	adds	r1, #1
 8011358:	42a2      	cmp	r2, r4
 801135a:	d0ef      	beq.n	801133c <__match+0x4>
 801135c:	2000      	movs	r0, #0
 801135e:	e7f3      	b.n	8011348 <__match+0x10>

08011360 <__hexnan>:
 8011360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011362:	680b      	ldr	r3, [r1, #0]
 8011364:	b08b      	sub	sp, #44	@ 0x2c
 8011366:	9201      	str	r2, [sp, #4]
 8011368:	9901      	ldr	r1, [sp, #4]
 801136a:	115a      	asrs	r2, r3, #5
 801136c:	0092      	lsls	r2, r2, #2
 801136e:	188a      	adds	r2, r1, r2
 8011370:	9202      	str	r2, [sp, #8]
 8011372:	0019      	movs	r1, r3
 8011374:	221f      	movs	r2, #31
 8011376:	4011      	ands	r1, r2
 8011378:	9008      	str	r0, [sp, #32]
 801137a:	9106      	str	r1, [sp, #24]
 801137c:	4213      	tst	r3, r2
 801137e:	d002      	beq.n	8011386 <__hexnan+0x26>
 8011380:	9b02      	ldr	r3, [sp, #8]
 8011382:	3304      	adds	r3, #4
 8011384:	9302      	str	r3, [sp, #8]
 8011386:	9b02      	ldr	r3, [sp, #8]
 8011388:	2500      	movs	r5, #0
 801138a:	1f1f      	subs	r7, r3, #4
 801138c:	003e      	movs	r6, r7
 801138e:	003c      	movs	r4, r7
 8011390:	9b08      	ldr	r3, [sp, #32]
 8011392:	603d      	str	r5, [r7, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	9507      	str	r5, [sp, #28]
 8011398:	9305      	str	r3, [sp, #20]
 801139a:	9503      	str	r5, [sp, #12]
 801139c:	9b05      	ldr	r3, [sp, #20]
 801139e:	3301      	adds	r3, #1
 80113a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80113a2:	9b05      	ldr	r3, [sp, #20]
 80113a4:	785b      	ldrb	r3, [r3, #1]
 80113a6:	9304      	str	r3, [sp, #16]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d028      	beq.n	80113fe <__hexnan+0x9e>
 80113ac:	9804      	ldr	r0, [sp, #16]
 80113ae:	f7ff fd78 	bl	8010ea2 <__hexdig_fun>
 80113b2:	2800      	cmp	r0, #0
 80113b4:	d155      	bne.n	8011462 <__hexnan+0x102>
 80113b6:	9b04      	ldr	r3, [sp, #16]
 80113b8:	2b20      	cmp	r3, #32
 80113ba:	d819      	bhi.n	80113f0 <__hexnan+0x90>
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	9a07      	ldr	r2, [sp, #28]
 80113c0:	4293      	cmp	r3, r2
 80113c2:	dd12      	ble.n	80113ea <__hexnan+0x8a>
 80113c4:	42b4      	cmp	r4, r6
 80113c6:	d206      	bcs.n	80113d6 <__hexnan+0x76>
 80113c8:	2d07      	cmp	r5, #7
 80113ca:	dc04      	bgt.n	80113d6 <__hexnan+0x76>
 80113cc:	002a      	movs	r2, r5
 80113ce:	0031      	movs	r1, r6
 80113d0:	0020      	movs	r0, r4
 80113d2:	f7ff ff9f 	bl	8011314 <L_shift>
 80113d6:	9b01      	ldr	r3, [sp, #4]
 80113d8:	2508      	movs	r5, #8
 80113da:	429c      	cmp	r4, r3
 80113dc:	d905      	bls.n	80113ea <__hexnan+0x8a>
 80113de:	1f26      	subs	r6, r4, #4
 80113e0:	2500      	movs	r5, #0
 80113e2:	0034      	movs	r4, r6
 80113e4:	9b03      	ldr	r3, [sp, #12]
 80113e6:	6035      	str	r5, [r6, #0]
 80113e8:	9307      	str	r3, [sp, #28]
 80113ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ec:	9305      	str	r3, [sp, #20]
 80113ee:	e7d5      	b.n	801139c <__hexnan+0x3c>
 80113f0:	9b04      	ldr	r3, [sp, #16]
 80113f2:	2b29      	cmp	r3, #41	@ 0x29
 80113f4:	d15a      	bne.n	80114ac <__hexnan+0x14c>
 80113f6:	9b05      	ldr	r3, [sp, #20]
 80113f8:	9a08      	ldr	r2, [sp, #32]
 80113fa:	3302      	adds	r3, #2
 80113fc:	6013      	str	r3, [r2, #0]
 80113fe:	9b03      	ldr	r3, [sp, #12]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d053      	beq.n	80114ac <__hexnan+0x14c>
 8011404:	42b4      	cmp	r4, r6
 8011406:	d206      	bcs.n	8011416 <__hexnan+0xb6>
 8011408:	2d07      	cmp	r5, #7
 801140a:	dc04      	bgt.n	8011416 <__hexnan+0xb6>
 801140c:	002a      	movs	r2, r5
 801140e:	0031      	movs	r1, r6
 8011410:	0020      	movs	r0, r4
 8011412:	f7ff ff7f 	bl	8011314 <L_shift>
 8011416:	9b01      	ldr	r3, [sp, #4]
 8011418:	429c      	cmp	r4, r3
 801141a:	d936      	bls.n	801148a <__hexnan+0x12a>
 801141c:	001a      	movs	r2, r3
 801141e:	0023      	movs	r3, r4
 8011420:	cb02      	ldmia	r3!, {r1}
 8011422:	c202      	stmia	r2!, {r1}
 8011424:	429f      	cmp	r7, r3
 8011426:	d2fb      	bcs.n	8011420 <__hexnan+0xc0>
 8011428:	9b02      	ldr	r3, [sp, #8]
 801142a:	1c62      	adds	r2, r4, #1
 801142c:	1ed9      	subs	r1, r3, #3
 801142e:	2304      	movs	r3, #4
 8011430:	4291      	cmp	r1, r2
 8011432:	d305      	bcc.n	8011440 <__hexnan+0xe0>
 8011434:	9b02      	ldr	r3, [sp, #8]
 8011436:	3b04      	subs	r3, #4
 8011438:	1b1b      	subs	r3, r3, r4
 801143a:	089b      	lsrs	r3, r3, #2
 801143c:	3301      	adds	r3, #1
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	9a01      	ldr	r2, [sp, #4]
 8011442:	18d3      	adds	r3, r2, r3
 8011444:	2200      	movs	r2, #0
 8011446:	c304      	stmia	r3!, {r2}
 8011448:	429f      	cmp	r7, r3
 801144a:	d2fc      	bcs.n	8011446 <__hexnan+0xe6>
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d104      	bne.n	801145c <__hexnan+0xfc>
 8011452:	9b01      	ldr	r3, [sp, #4]
 8011454:	429f      	cmp	r7, r3
 8011456:	d127      	bne.n	80114a8 <__hexnan+0x148>
 8011458:	2301      	movs	r3, #1
 801145a:	603b      	str	r3, [r7, #0]
 801145c:	2005      	movs	r0, #5
 801145e:	b00b      	add	sp, #44	@ 0x2c
 8011460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011462:	9b03      	ldr	r3, [sp, #12]
 8011464:	3501      	adds	r5, #1
 8011466:	3301      	adds	r3, #1
 8011468:	9303      	str	r3, [sp, #12]
 801146a:	2d08      	cmp	r5, #8
 801146c:	dd06      	ble.n	801147c <__hexnan+0x11c>
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	429c      	cmp	r4, r3
 8011472:	d9ba      	bls.n	80113ea <__hexnan+0x8a>
 8011474:	2300      	movs	r3, #0
 8011476:	2501      	movs	r5, #1
 8011478:	3c04      	subs	r4, #4
 801147a:	6023      	str	r3, [r4, #0]
 801147c:	220f      	movs	r2, #15
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	4010      	ands	r0, r2
 8011482:	011b      	lsls	r3, r3, #4
 8011484:	4303      	orrs	r3, r0
 8011486:	6023      	str	r3, [r4, #0]
 8011488:	e7af      	b.n	80113ea <__hexnan+0x8a>
 801148a:	9b06      	ldr	r3, [sp, #24]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d0dd      	beq.n	801144c <__hexnan+0xec>
 8011490:	2320      	movs	r3, #32
 8011492:	9a06      	ldr	r2, [sp, #24]
 8011494:	9902      	ldr	r1, [sp, #8]
 8011496:	1a9b      	subs	r3, r3, r2
 8011498:	2201      	movs	r2, #1
 801149a:	4252      	negs	r2, r2
 801149c:	40da      	lsrs	r2, r3
 801149e:	3904      	subs	r1, #4
 80114a0:	680b      	ldr	r3, [r1, #0]
 80114a2:	4013      	ands	r3, r2
 80114a4:	600b      	str	r3, [r1, #0]
 80114a6:	e7d1      	b.n	801144c <__hexnan+0xec>
 80114a8:	3f04      	subs	r7, #4
 80114aa:	e7cf      	b.n	801144c <__hexnan+0xec>
 80114ac:	2004      	movs	r0, #4
 80114ae:	e7d6      	b.n	801145e <__hexnan+0xfe>

080114b0 <malloc>:
 80114b0:	b510      	push	{r4, lr}
 80114b2:	4b03      	ldr	r3, [pc, #12]	@ (80114c0 <malloc+0x10>)
 80114b4:	0001      	movs	r1, r0
 80114b6:	6818      	ldr	r0, [r3, #0]
 80114b8:	f000 f826 	bl	8011508 <_malloc_r>
 80114bc:	bd10      	pop	{r4, pc}
 80114be:	46c0      	nop			@ (mov r8, r8)
 80114c0:	20000308 	.word	0x20000308

080114c4 <sbrk_aligned>:
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	4e0f      	ldr	r6, [pc, #60]	@ (8011504 <sbrk_aligned+0x40>)
 80114c8:	000d      	movs	r5, r1
 80114ca:	6831      	ldr	r1, [r6, #0]
 80114cc:	0004      	movs	r4, r0
 80114ce:	2900      	cmp	r1, #0
 80114d0:	d102      	bne.n	80114d8 <sbrk_aligned+0x14>
 80114d2:	f000 ffad 	bl	8012430 <_sbrk_r>
 80114d6:	6030      	str	r0, [r6, #0]
 80114d8:	0029      	movs	r1, r5
 80114da:	0020      	movs	r0, r4
 80114dc:	f000 ffa8 	bl	8012430 <_sbrk_r>
 80114e0:	1c43      	adds	r3, r0, #1
 80114e2:	d103      	bne.n	80114ec <sbrk_aligned+0x28>
 80114e4:	2501      	movs	r5, #1
 80114e6:	426d      	negs	r5, r5
 80114e8:	0028      	movs	r0, r5
 80114ea:	bd70      	pop	{r4, r5, r6, pc}
 80114ec:	2303      	movs	r3, #3
 80114ee:	1cc5      	adds	r5, r0, #3
 80114f0:	439d      	bics	r5, r3
 80114f2:	42a8      	cmp	r0, r5
 80114f4:	d0f8      	beq.n	80114e8 <sbrk_aligned+0x24>
 80114f6:	1a29      	subs	r1, r5, r0
 80114f8:	0020      	movs	r0, r4
 80114fa:	f000 ff99 	bl	8012430 <_sbrk_r>
 80114fe:	3001      	adds	r0, #1
 8011500:	d1f2      	bne.n	80114e8 <sbrk_aligned+0x24>
 8011502:	e7ef      	b.n	80114e4 <sbrk_aligned+0x20>
 8011504:	200022a0 	.word	0x200022a0

08011508 <_malloc_r>:
 8011508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801150a:	2203      	movs	r2, #3
 801150c:	1ccb      	adds	r3, r1, #3
 801150e:	4393      	bics	r3, r2
 8011510:	3308      	adds	r3, #8
 8011512:	0005      	movs	r5, r0
 8011514:	001f      	movs	r7, r3
 8011516:	2b0c      	cmp	r3, #12
 8011518:	d234      	bcs.n	8011584 <_malloc_r+0x7c>
 801151a:	270c      	movs	r7, #12
 801151c:	42b9      	cmp	r1, r7
 801151e:	d833      	bhi.n	8011588 <_malloc_r+0x80>
 8011520:	0028      	movs	r0, r5
 8011522:	f000 f883 	bl	801162c <__malloc_lock>
 8011526:	4e37      	ldr	r6, [pc, #220]	@ (8011604 <_malloc_r+0xfc>)
 8011528:	6833      	ldr	r3, [r6, #0]
 801152a:	001c      	movs	r4, r3
 801152c:	2c00      	cmp	r4, #0
 801152e:	d12f      	bne.n	8011590 <_malloc_r+0x88>
 8011530:	0039      	movs	r1, r7
 8011532:	0028      	movs	r0, r5
 8011534:	f7ff ffc6 	bl	80114c4 <sbrk_aligned>
 8011538:	0004      	movs	r4, r0
 801153a:	1c43      	adds	r3, r0, #1
 801153c:	d15f      	bne.n	80115fe <_malloc_r+0xf6>
 801153e:	6834      	ldr	r4, [r6, #0]
 8011540:	9400      	str	r4, [sp, #0]
 8011542:	9b00      	ldr	r3, [sp, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d14a      	bne.n	80115de <_malloc_r+0xd6>
 8011548:	2c00      	cmp	r4, #0
 801154a:	d052      	beq.n	80115f2 <_malloc_r+0xea>
 801154c:	6823      	ldr	r3, [r4, #0]
 801154e:	0028      	movs	r0, r5
 8011550:	18e3      	adds	r3, r4, r3
 8011552:	9900      	ldr	r1, [sp, #0]
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	f000 ff6b 	bl	8012430 <_sbrk_r>
 801155a:	9b01      	ldr	r3, [sp, #4]
 801155c:	4283      	cmp	r3, r0
 801155e:	d148      	bne.n	80115f2 <_malloc_r+0xea>
 8011560:	6823      	ldr	r3, [r4, #0]
 8011562:	0028      	movs	r0, r5
 8011564:	1aff      	subs	r7, r7, r3
 8011566:	0039      	movs	r1, r7
 8011568:	f7ff ffac 	bl	80114c4 <sbrk_aligned>
 801156c:	3001      	adds	r0, #1
 801156e:	d040      	beq.n	80115f2 <_malloc_r+0xea>
 8011570:	6823      	ldr	r3, [r4, #0]
 8011572:	19db      	adds	r3, r3, r7
 8011574:	6023      	str	r3, [r4, #0]
 8011576:	6833      	ldr	r3, [r6, #0]
 8011578:	685a      	ldr	r2, [r3, #4]
 801157a:	2a00      	cmp	r2, #0
 801157c:	d133      	bne.n	80115e6 <_malloc_r+0xde>
 801157e:	9b00      	ldr	r3, [sp, #0]
 8011580:	6033      	str	r3, [r6, #0]
 8011582:	e019      	b.n	80115b8 <_malloc_r+0xb0>
 8011584:	2b00      	cmp	r3, #0
 8011586:	dac9      	bge.n	801151c <_malloc_r+0x14>
 8011588:	230c      	movs	r3, #12
 801158a:	602b      	str	r3, [r5, #0]
 801158c:	2000      	movs	r0, #0
 801158e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011590:	6821      	ldr	r1, [r4, #0]
 8011592:	1bc9      	subs	r1, r1, r7
 8011594:	d420      	bmi.n	80115d8 <_malloc_r+0xd0>
 8011596:	290b      	cmp	r1, #11
 8011598:	d90a      	bls.n	80115b0 <_malloc_r+0xa8>
 801159a:	19e2      	adds	r2, r4, r7
 801159c:	6027      	str	r7, [r4, #0]
 801159e:	42a3      	cmp	r3, r4
 80115a0:	d104      	bne.n	80115ac <_malloc_r+0xa4>
 80115a2:	6032      	str	r2, [r6, #0]
 80115a4:	6863      	ldr	r3, [r4, #4]
 80115a6:	6011      	str	r1, [r2, #0]
 80115a8:	6053      	str	r3, [r2, #4]
 80115aa:	e005      	b.n	80115b8 <_malloc_r+0xb0>
 80115ac:	605a      	str	r2, [r3, #4]
 80115ae:	e7f9      	b.n	80115a4 <_malloc_r+0x9c>
 80115b0:	6862      	ldr	r2, [r4, #4]
 80115b2:	42a3      	cmp	r3, r4
 80115b4:	d10e      	bne.n	80115d4 <_malloc_r+0xcc>
 80115b6:	6032      	str	r2, [r6, #0]
 80115b8:	0028      	movs	r0, r5
 80115ba:	f000 f83f 	bl	801163c <__malloc_unlock>
 80115be:	0020      	movs	r0, r4
 80115c0:	2207      	movs	r2, #7
 80115c2:	300b      	adds	r0, #11
 80115c4:	1d23      	adds	r3, r4, #4
 80115c6:	4390      	bics	r0, r2
 80115c8:	1ac2      	subs	r2, r0, r3
 80115ca:	4298      	cmp	r0, r3
 80115cc:	d0df      	beq.n	801158e <_malloc_r+0x86>
 80115ce:	1a1b      	subs	r3, r3, r0
 80115d0:	50a3      	str	r3, [r4, r2]
 80115d2:	e7dc      	b.n	801158e <_malloc_r+0x86>
 80115d4:	605a      	str	r2, [r3, #4]
 80115d6:	e7ef      	b.n	80115b8 <_malloc_r+0xb0>
 80115d8:	0023      	movs	r3, r4
 80115da:	6864      	ldr	r4, [r4, #4]
 80115dc:	e7a6      	b.n	801152c <_malloc_r+0x24>
 80115de:	9c00      	ldr	r4, [sp, #0]
 80115e0:	6863      	ldr	r3, [r4, #4]
 80115e2:	9300      	str	r3, [sp, #0]
 80115e4:	e7ad      	b.n	8011542 <_malloc_r+0x3a>
 80115e6:	001a      	movs	r2, r3
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	42a3      	cmp	r3, r4
 80115ec:	d1fb      	bne.n	80115e6 <_malloc_r+0xde>
 80115ee:	2300      	movs	r3, #0
 80115f0:	e7da      	b.n	80115a8 <_malloc_r+0xa0>
 80115f2:	230c      	movs	r3, #12
 80115f4:	0028      	movs	r0, r5
 80115f6:	602b      	str	r3, [r5, #0]
 80115f8:	f000 f820 	bl	801163c <__malloc_unlock>
 80115fc:	e7c6      	b.n	801158c <_malloc_r+0x84>
 80115fe:	6007      	str	r7, [r0, #0]
 8011600:	e7da      	b.n	80115b8 <_malloc_r+0xb0>
 8011602:	46c0      	nop			@ (mov r8, r8)
 8011604:	200022a4 	.word	0x200022a4

08011608 <__ascii_mbtowc>:
 8011608:	b082      	sub	sp, #8
 801160a:	2900      	cmp	r1, #0
 801160c:	d100      	bne.n	8011610 <__ascii_mbtowc+0x8>
 801160e:	a901      	add	r1, sp, #4
 8011610:	1e10      	subs	r0, r2, #0
 8011612:	d006      	beq.n	8011622 <__ascii_mbtowc+0x1a>
 8011614:	2b00      	cmp	r3, #0
 8011616:	d006      	beq.n	8011626 <__ascii_mbtowc+0x1e>
 8011618:	7813      	ldrb	r3, [r2, #0]
 801161a:	600b      	str	r3, [r1, #0]
 801161c:	7810      	ldrb	r0, [r2, #0]
 801161e:	1e43      	subs	r3, r0, #1
 8011620:	4198      	sbcs	r0, r3
 8011622:	b002      	add	sp, #8
 8011624:	4770      	bx	lr
 8011626:	2002      	movs	r0, #2
 8011628:	4240      	negs	r0, r0
 801162a:	e7fa      	b.n	8011622 <__ascii_mbtowc+0x1a>

0801162c <__malloc_lock>:
 801162c:	b510      	push	{r4, lr}
 801162e:	4802      	ldr	r0, [pc, #8]	@ (8011638 <__malloc_lock+0xc>)
 8011630:	f7fe fd07 	bl	8010042 <__retarget_lock_acquire_recursive>
 8011634:	bd10      	pop	{r4, pc}
 8011636:	46c0      	nop			@ (mov r8, r8)
 8011638:	2000229c 	.word	0x2000229c

0801163c <__malloc_unlock>:
 801163c:	b510      	push	{r4, lr}
 801163e:	4802      	ldr	r0, [pc, #8]	@ (8011648 <__malloc_unlock+0xc>)
 8011640:	f7fe fd00 	bl	8010044 <__retarget_lock_release_recursive>
 8011644:	bd10      	pop	{r4, pc}
 8011646:	46c0      	nop			@ (mov r8, r8)
 8011648:	2000229c 	.word	0x2000229c

0801164c <_Balloc>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	69c5      	ldr	r5, [r0, #28]
 8011650:	0006      	movs	r6, r0
 8011652:	000c      	movs	r4, r1
 8011654:	2d00      	cmp	r5, #0
 8011656:	d10e      	bne.n	8011676 <_Balloc+0x2a>
 8011658:	2010      	movs	r0, #16
 801165a:	f7ff ff29 	bl	80114b0 <malloc>
 801165e:	1e02      	subs	r2, r0, #0
 8011660:	61f0      	str	r0, [r6, #28]
 8011662:	d104      	bne.n	801166e <_Balloc+0x22>
 8011664:	216b      	movs	r1, #107	@ 0x6b
 8011666:	4b19      	ldr	r3, [pc, #100]	@ (80116cc <_Balloc+0x80>)
 8011668:	4819      	ldr	r0, [pc, #100]	@ (80116d0 <_Balloc+0x84>)
 801166a:	f000 fef3 	bl	8012454 <__assert_func>
 801166e:	6045      	str	r5, [r0, #4]
 8011670:	6085      	str	r5, [r0, #8]
 8011672:	6005      	str	r5, [r0, #0]
 8011674:	60c5      	str	r5, [r0, #12]
 8011676:	69f5      	ldr	r5, [r6, #28]
 8011678:	68eb      	ldr	r3, [r5, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d013      	beq.n	80116a6 <_Balloc+0x5a>
 801167e:	69f3      	ldr	r3, [r6, #28]
 8011680:	00a2      	lsls	r2, r4, #2
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	189b      	adds	r3, r3, r2
 8011686:	6818      	ldr	r0, [r3, #0]
 8011688:	2800      	cmp	r0, #0
 801168a:	d118      	bne.n	80116be <_Balloc+0x72>
 801168c:	2101      	movs	r1, #1
 801168e:	000d      	movs	r5, r1
 8011690:	40a5      	lsls	r5, r4
 8011692:	1d6a      	adds	r2, r5, #5
 8011694:	0030      	movs	r0, r6
 8011696:	0092      	lsls	r2, r2, #2
 8011698:	f000 fefa 	bl	8012490 <_calloc_r>
 801169c:	2800      	cmp	r0, #0
 801169e:	d00c      	beq.n	80116ba <_Balloc+0x6e>
 80116a0:	6044      	str	r4, [r0, #4]
 80116a2:	6085      	str	r5, [r0, #8]
 80116a4:	e00d      	b.n	80116c2 <_Balloc+0x76>
 80116a6:	2221      	movs	r2, #33	@ 0x21
 80116a8:	2104      	movs	r1, #4
 80116aa:	0030      	movs	r0, r6
 80116ac:	f000 fef0 	bl	8012490 <_calloc_r>
 80116b0:	69f3      	ldr	r3, [r6, #28]
 80116b2:	60e8      	str	r0, [r5, #12]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1e1      	bne.n	801167e <_Balloc+0x32>
 80116ba:	2000      	movs	r0, #0
 80116bc:	bd70      	pop	{r4, r5, r6, pc}
 80116be:	6802      	ldr	r2, [r0, #0]
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	2300      	movs	r3, #0
 80116c4:	6103      	str	r3, [r0, #16]
 80116c6:	60c3      	str	r3, [r0, #12]
 80116c8:	e7f8      	b.n	80116bc <_Balloc+0x70>
 80116ca:	46c0      	nop			@ (mov r8, r8)
 80116cc:	08012dcb 	.word	0x08012dcb
 80116d0:	08012eab 	.word	0x08012eab

080116d4 <_Bfree>:
 80116d4:	b570      	push	{r4, r5, r6, lr}
 80116d6:	69c6      	ldr	r6, [r0, #28]
 80116d8:	0005      	movs	r5, r0
 80116da:	000c      	movs	r4, r1
 80116dc:	2e00      	cmp	r6, #0
 80116de:	d10e      	bne.n	80116fe <_Bfree+0x2a>
 80116e0:	2010      	movs	r0, #16
 80116e2:	f7ff fee5 	bl	80114b0 <malloc>
 80116e6:	1e02      	subs	r2, r0, #0
 80116e8:	61e8      	str	r0, [r5, #28]
 80116ea:	d104      	bne.n	80116f6 <_Bfree+0x22>
 80116ec:	218f      	movs	r1, #143	@ 0x8f
 80116ee:	4b09      	ldr	r3, [pc, #36]	@ (8011714 <_Bfree+0x40>)
 80116f0:	4809      	ldr	r0, [pc, #36]	@ (8011718 <_Bfree+0x44>)
 80116f2:	f000 feaf 	bl	8012454 <__assert_func>
 80116f6:	6046      	str	r6, [r0, #4]
 80116f8:	6086      	str	r6, [r0, #8]
 80116fa:	6006      	str	r6, [r0, #0]
 80116fc:	60c6      	str	r6, [r0, #12]
 80116fe:	2c00      	cmp	r4, #0
 8011700:	d007      	beq.n	8011712 <_Bfree+0x3e>
 8011702:	69eb      	ldr	r3, [r5, #28]
 8011704:	6862      	ldr	r2, [r4, #4]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	0092      	lsls	r2, r2, #2
 801170a:	189b      	adds	r3, r3, r2
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	6022      	str	r2, [r4, #0]
 8011710:	601c      	str	r4, [r3, #0]
 8011712:	bd70      	pop	{r4, r5, r6, pc}
 8011714:	08012dcb 	.word	0x08012dcb
 8011718:	08012eab 	.word	0x08012eab

0801171c <__multadd>:
 801171c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801171e:	000f      	movs	r7, r1
 8011720:	9001      	str	r0, [sp, #4]
 8011722:	000c      	movs	r4, r1
 8011724:	001e      	movs	r6, r3
 8011726:	2000      	movs	r0, #0
 8011728:	690d      	ldr	r5, [r1, #16]
 801172a:	3714      	adds	r7, #20
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	3001      	adds	r0, #1
 8011730:	b299      	uxth	r1, r3
 8011732:	4351      	muls	r1, r2
 8011734:	0c1b      	lsrs	r3, r3, #16
 8011736:	4353      	muls	r3, r2
 8011738:	1989      	adds	r1, r1, r6
 801173a:	0c0e      	lsrs	r6, r1, #16
 801173c:	199b      	adds	r3, r3, r6
 801173e:	0c1e      	lsrs	r6, r3, #16
 8011740:	b289      	uxth	r1, r1
 8011742:	041b      	lsls	r3, r3, #16
 8011744:	185b      	adds	r3, r3, r1
 8011746:	c708      	stmia	r7!, {r3}
 8011748:	4285      	cmp	r5, r0
 801174a:	dcef      	bgt.n	801172c <__multadd+0x10>
 801174c:	2e00      	cmp	r6, #0
 801174e:	d022      	beq.n	8011796 <__multadd+0x7a>
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	42ab      	cmp	r3, r5
 8011754:	dc19      	bgt.n	801178a <__multadd+0x6e>
 8011756:	6861      	ldr	r1, [r4, #4]
 8011758:	9801      	ldr	r0, [sp, #4]
 801175a:	3101      	adds	r1, #1
 801175c:	f7ff ff76 	bl	801164c <_Balloc>
 8011760:	1e07      	subs	r7, r0, #0
 8011762:	d105      	bne.n	8011770 <__multadd+0x54>
 8011764:	003a      	movs	r2, r7
 8011766:	21ba      	movs	r1, #186	@ 0xba
 8011768:	4b0c      	ldr	r3, [pc, #48]	@ (801179c <__multadd+0x80>)
 801176a:	480d      	ldr	r0, [pc, #52]	@ (80117a0 <__multadd+0x84>)
 801176c:	f000 fe72 	bl	8012454 <__assert_func>
 8011770:	0021      	movs	r1, r4
 8011772:	6922      	ldr	r2, [r4, #16]
 8011774:	310c      	adds	r1, #12
 8011776:	3202      	adds	r2, #2
 8011778:	0092      	lsls	r2, r2, #2
 801177a:	300c      	adds	r0, #12
 801177c:	f7fe fc6e 	bl	801005c <memcpy>
 8011780:	0021      	movs	r1, r4
 8011782:	9801      	ldr	r0, [sp, #4]
 8011784:	f7ff ffa6 	bl	80116d4 <_Bfree>
 8011788:	003c      	movs	r4, r7
 801178a:	1d2b      	adds	r3, r5, #4
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	18e3      	adds	r3, r4, r3
 8011790:	3501      	adds	r5, #1
 8011792:	605e      	str	r6, [r3, #4]
 8011794:	6125      	str	r5, [r4, #16]
 8011796:	0020      	movs	r0, r4
 8011798:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801179a:	46c0      	nop			@ (mov r8, r8)
 801179c:	08012e3a 	.word	0x08012e3a
 80117a0:	08012eab 	.word	0x08012eab

080117a4 <__s2b>:
 80117a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117a6:	0007      	movs	r7, r0
 80117a8:	0018      	movs	r0, r3
 80117aa:	000c      	movs	r4, r1
 80117ac:	3008      	adds	r0, #8
 80117ae:	2109      	movs	r1, #9
 80117b0:	9301      	str	r3, [sp, #4]
 80117b2:	0015      	movs	r5, r2
 80117b4:	f7ee fd4a 	bl	800024c <__divsi3>
 80117b8:	2301      	movs	r3, #1
 80117ba:	2100      	movs	r1, #0
 80117bc:	4283      	cmp	r3, r0
 80117be:	db0a      	blt.n	80117d6 <__s2b+0x32>
 80117c0:	0038      	movs	r0, r7
 80117c2:	f7ff ff43 	bl	801164c <_Balloc>
 80117c6:	1e01      	subs	r1, r0, #0
 80117c8:	d108      	bne.n	80117dc <__s2b+0x38>
 80117ca:	000a      	movs	r2, r1
 80117cc:	4b19      	ldr	r3, [pc, #100]	@ (8011834 <__s2b+0x90>)
 80117ce:	481a      	ldr	r0, [pc, #104]	@ (8011838 <__s2b+0x94>)
 80117d0:	31d3      	adds	r1, #211	@ 0xd3
 80117d2:	f000 fe3f 	bl	8012454 <__assert_func>
 80117d6:	005b      	lsls	r3, r3, #1
 80117d8:	3101      	adds	r1, #1
 80117da:	e7ef      	b.n	80117bc <__s2b+0x18>
 80117dc:	9b08      	ldr	r3, [sp, #32]
 80117de:	6143      	str	r3, [r0, #20]
 80117e0:	2301      	movs	r3, #1
 80117e2:	6103      	str	r3, [r0, #16]
 80117e4:	2d09      	cmp	r5, #9
 80117e6:	dd18      	ble.n	801181a <__s2b+0x76>
 80117e8:	0023      	movs	r3, r4
 80117ea:	3309      	adds	r3, #9
 80117ec:	001e      	movs	r6, r3
 80117ee:	9300      	str	r3, [sp, #0]
 80117f0:	1964      	adds	r4, r4, r5
 80117f2:	7833      	ldrb	r3, [r6, #0]
 80117f4:	220a      	movs	r2, #10
 80117f6:	0038      	movs	r0, r7
 80117f8:	3b30      	subs	r3, #48	@ 0x30
 80117fa:	f7ff ff8f 	bl	801171c <__multadd>
 80117fe:	3601      	adds	r6, #1
 8011800:	0001      	movs	r1, r0
 8011802:	42a6      	cmp	r6, r4
 8011804:	d1f5      	bne.n	80117f2 <__s2b+0x4e>
 8011806:	002c      	movs	r4, r5
 8011808:	9b00      	ldr	r3, [sp, #0]
 801180a:	3c08      	subs	r4, #8
 801180c:	191c      	adds	r4, r3, r4
 801180e:	002e      	movs	r6, r5
 8011810:	9b01      	ldr	r3, [sp, #4]
 8011812:	429e      	cmp	r6, r3
 8011814:	db04      	blt.n	8011820 <__s2b+0x7c>
 8011816:	0008      	movs	r0, r1
 8011818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801181a:	2509      	movs	r5, #9
 801181c:	340a      	adds	r4, #10
 801181e:	e7f6      	b.n	801180e <__s2b+0x6a>
 8011820:	1b63      	subs	r3, r4, r5
 8011822:	5d9b      	ldrb	r3, [r3, r6]
 8011824:	220a      	movs	r2, #10
 8011826:	0038      	movs	r0, r7
 8011828:	3b30      	subs	r3, #48	@ 0x30
 801182a:	f7ff ff77 	bl	801171c <__multadd>
 801182e:	3601      	adds	r6, #1
 8011830:	0001      	movs	r1, r0
 8011832:	e7ed      	b.n	8011810 <__s2b+0x6c>
 8011834:	08012e3a 	.word	0x08012e3a
 8011838:	08012eab 	.word	0x08012eab

0801183c <__hi0bits>:
 801183c:	2280      	movs	r2, #128	@ 0x80
 801183e:	0003      	movs	r3, r0
 8011840:	0252      	lsls	r2, r2, #9
 8011842:	2000      	movs	r0, #0
 8011844:	4293      	cmp	r3, r2
 8011846:	d201      	bcs.n	801184c <__hi0bits+0x10>
 8011848:	041b      	lsls	r3, r3, #16
 801184a:	3010      	adds	r0, #16
 801184c:	2280      	movs	r2, #128	@ 0x80
 801184e:	0452      	lsls	r2, r2, #17
 8011850:	4293      	cmp	r3, r2
 8011852:	d201      	bcs.n	8011858 <__hi0bits+0x1c>
 8011854:	3008      	adds	r0, #8
 8011856:	021b      	lsls	r3, r3, #8
 8011858:	2280      	movs	r2, #128	@ 0x80
 801185a:	0552      	lsls	r2, r2, #21
 801185c:	4293      	cmp	r3, r2
 801185e:	d201      	bcs.n	8011864 <__hi0bits+0x28>
 8011860:	3004      	adds	r0, #4
 8011862:	011b      	lsls	r3, r3, #4
 8011864:	2280      	movs	r2, #128	@ 0x80
 8011866:	05d2      	lsls	r2, r2, #23
 8011868:	4293      	cmp	r3, r2
 801186a:	d201      	bcs.n	8011870 <__hi0bits+0x34>
 801186c:	3002      	adds	r0, #2
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	2b00      	cmp	r3, #0
 8011872:	db03      	blt.n	801187c <__hi0bits+0x40>
 8011874:	3001      	adds	r0, #1
 8011876:	4213      	tst	r3, r2
 8011878:	d100      	bne.n	801187c <__hi0bits+0x40>
 801187a:	2020      	movs	r0, #32
 801187c:	4770      	bx	lr

0801187e <__lo0bits>:
 801187e:	6803      	ldr	r3, [r0, #0]
 8011880:	0001      	movs	r1, r0
 8011882:	2207      	movs	r2, #7
 8011884:	0018      	movs	r0, r3
 8011886:	4010      	ands	r0, r2
 8011888:	4213      	tst	r3, r2
 801188a:	d00d      	beq.n	80118a8 <__lo0bits+0x2a>
 801188c:	3a06      	subs	r2, #6
 801188e:	2000      	movs	r0, #0
 8011890:	4213      	tst	r3, r2
 8011892:	d105      	bne.n	80118a0 <__lo0bits+0x22>
 8011894:	3002      	adds	r0, #2
 8011896:	4203      	tst	r3, r0
 8011898:	d003      	beq.n	80118a2 <__lo0bits+0x24>
 801189a:	40d3      	lsrs	r3, r2
 801189c:	0010      	movs	r0, r2
 801189e:	600b      	str	r3, [r1, #0]
 80118a0:	4770      	bx	lr
 80118a2:	089b      	lsrs	r3, r3, #2
 80118a4:	600b      	str	r3, [r1, #0]
 80118a6:	e7fb      	b.n	80118a0 <__lo0bits+0x22>
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	2a00      	cmp	r2, #0
 80118ac:	d101      	bne.n	80118b2 <__lo0bits+0x34>
 80118ae:	2010      	movs	r0, #16
 80118b0:	0c1b      	lsrs	r3, r3, #16
 80118b2:	b2da      	uxtb	r2, r3
 80118b4:	2a00      	cmp	r2, #0
 80118b6:	d101      	bne.n	80118bc <__lo0bits+0x3e>
 80118b8:	3008      	adds	r0, #8
 80118ba:	0a1b      	lsrs	r3, r3, #8
 80118bc:	071a      	lsls	r2, r3, #28
 80118be:	d101      	bne.n	80118c4 <__lo0bits+0x46>
 80118c0:	3004      	adds	r0, #4
 80118c2:	091b      	lsrs	r3, r3, #4
 80118c4:	079a      	lsls	r2, r3, #30
 80118c6:	d101      	bne.n	80118cc <__lo0bits+0x4e>
 80118c8:	3002      	adds	r0, #2
 80118ca:	089b      	lsrs	r3, r3, #2
 80118cc:	07da      	lsls	r2, r3, #31
 80118ce:	d4e9      	bmi.n	80118a4 <__lo0bits+0x26>
 80118d0:	3001      	adds	r0, #1
 80118d2:	085b      	lsrs	r3, r3, #1
 80118d4:	d1e6      	bne.n	80118a4 <__lo0bits+0x26>
 80118d6:	2020      	movs	r0, #32
 80118d8:	e7e2      	b.n	80118a0 <__lo0bits+0x22>
	...

080118dc <__i2b>:
 80118dc:	b510      	push	{r4, lr}
 80118de:	000c      	movs	r4, r1
 80118e0:	2101      	movs	r1, #1
 80118e2:	f7ff feb3 	bl	801164c <_Balloc>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d107      	bne.n	80118fa <__i2b+0x1e>
 80118ea:	2146      	movs	r1, #70	@ 0x46
 80118ec:	4c05      	ldr	r4, [pc, #20]	@ (8011904 <__i2b+0x28>)
 80118ee:	0002      	movs	r2, r0
 80118f0:	4b05      	ldr	r3, [pc, #20]	@ (8011908 <__i2b+0x2c>)
 80118f2:	0020      	movs	r0, r4
 80118f4:	31ff      	adds	r1, #255	@ 0xff
 80118f6:	f000 fdad 	bl	8012454 <__assert_func>
 80118fa:	2301      	movs	r3, #1
 80118fc:	6144      	str	r4, [r0, #20]
 80118fe:	6103      	str	r3, [r0, #16]
 8011900:	bd10      	pop	{r4, pc}
 8011902:	46c0      	nop			@ (mov r8, r8)
 8011904:	08012eab 	.word	0x08012eab
 8011908:	08012e3a 	.word	0x08012e3a

0801190c <__multiply>:
 801190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801190e:	0014      	movs	r4, r2
 8011910:	690a      	ldr	r2, [r1, #16]
 8011912:	6923      	ldr	r3, [r4, #16]
 8011914:	000d      	movs	r5, r1
 8011916:	b089      	sub	sp, #36	@ 0x24
 8011918:	429a      	cmp	r2, r3
 801191a:	db02      	blt.n	8011922 <__multiply+0x16>
 801191c:	0023      	movs	r3, r4
 801191e:	000c      	movs	r4, r1
 8011920:	001d      	movs	r5, r3
 8011922:	6927      	ldr	r7, [r4, #16]
 8011924:	692e      	ldr	r6, [r5, #16]
 8011926:	6861      	ldr	r1, [r4, #4]
 8011928:	19bb      	adds	r3, r7, r6
 801192a:	9300      	str	r3, [sp, #0]
 801192c:	68a3      	ldr	r3, [r4, #8]
 801192e:	19ba      	adds	r2, r7, r6
 8011930:	4293      	cmp	r3, r2
 8011932:	da00      	bge.n	8011936 <__multiply+0x2a>
 8011934:	3101      	adds	r1, #1
 8011936:	f7ff fe89 	bl	801164c <_Balloc>
 801193a:	4684      	mov	ip, r0
 801193c:	2800      	cmp	r0, #0
 801193e:	d106      	bne.n	801194e <__multiply+0x42>
 8011940:	21b1      	movs	r1, #177	@ 0xb1
 8011942:	4662      	mov	r2, ip
 8011944:	4b44      	ldr	r3, [pc, #272]	@ (8011a58 <__multiply+0x14c>)
 8011946:	4845      	ldr	r0, [pc, #276]	@ (8011a5c <__multiply+0x150>)
 8011948:	0049      	lsls	r1, r1, #1
 801194a:	f000 fd83 	bl	8012454 <__assert_func>
 801194e:	0002      	movs	r2, r0
 8011950:	19bb      	adds	r3, r7, r6
 8011952:	3214      	adds	r2, #20
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	18d3      	adds	r3, r2, r3
 8011958:	9301      	str	r3, [sp, #4]
 801195a:	2100      	movs	r1, #0
 801195c:	0013      	movs	r3, r2
 801195e:	9801      	ldr	r0, [sp, #4]
 8011960:	4283      	cmp	r3, r0
 8011962:	d328      	bcc.n	80119b6 <__multiply+0xaa>
 8011964:	0023      	movs	r3, r4
 8011966:	00bf      	lsls	r7, r7, #2
 8011968:	3314      	adds	r3, #20
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	3514      	adds	r5, #20
 801196e:	19db      	adds	r3, r3, r7
 8011970:	00b6      	lsls	r6, r6, #2
 8011972:	9302      	str	r3, [sp, #8]
 8011974:	19ab      	adds	r3, r5, r6
 8011976:	9307      	str	r3, [sp, #28]
 8011978:	2304      	movs	r3, #4
 801197a:	9305      	str	r3, [sp, #20]
 801197c:	0023      	movs	r3, r4
 801197e:	9902      	ldr	r1, [sp, #8]
 8011980:	3315      	adds	r3, #21
 8011982:	4299      	cmp	r1, r3
 8011984:	d305      	bcc.n	8011992 <__multiply+0x86>
 8011986:	1b0c      	subs	r4, r1, r4
 8011988:	3c15      	subs	r4, #21
 801198a:	08a4      	lsrs	r4, r4, #2
 801198c:	3401      	adds	r4, #1
 801198e:	00a3      	lsls	r3, r4, #2
 8011990:	9305      	str	r3, [sp, #20]
 8011992:	9b07      	ldr	r3, [sp, #28]
 8011994:	429d      	cmp	r5, r3
 8011996:	d310      	bcc.n	80119ba <__multiply+0xae>
 8011998:	9b00      	ldr	r3, [sp, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	dd05      	ble.n	80119aa <__multiply+0x9e>
 801199e:	9b01      	ldr	r3, [sp, #4]
 80119a0:	3b04      	subs	r3, #4
 80119a2:	9301      	str	r3, [sp, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d052      	beq.n	8011a50 <__multiply+0x144>
 80119aa:	4663      	mov	r3, ip
 80119ac:	4660      	mov	r0, ip
 80119ae:	9a00      	ldr	r2, [sp, #0]
 80119b0:	611a      	str	r2, [r3, #16]
 80119b2:	b009      	add	sp, #36	@ 0x24
 80119b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119b6:	c302      	stmia	r3!, {r1}
 80119b8:	e7d1      	b.n	801195e <__multiply+0x52>
 80119ba:	682c      	ldr	r4, [r5, #0]
 80119bc:	b2a4      	uxth	r4, r4
 80119be:	2c00      	cmp	r4, #0
 80119c0:	d01f      	beq.n	8011a02 <__multiply+0xf6>
 80119c2:	2300      	movs	r3, #0
 80119c4:	0017      	movs	r7, r2
 80119c6:	9e04      	ldr	r6, [sp, #16]
 80119c8:	9303      	str	r3, [sp, #12]
 80119ca:	ce08      	ldmia	r6!, {r3}
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	9306      	str	r3, [sp, #24]
 80119d0:	466b      	mov	r3, sp
 80119d2:	8b1b      	ldrh	r3, [r3, #24]
 80119d4:	b288      	uxth	r0, r1
 80119d6:	4363      	muls	r3, r4
 80119d8:	181b      	adds	r3, r3, r0
 80119da:	9803      	ldr	r0, [sp, #12]
 80119dc:	0c09      	lsrs	r1, r1, #16
 80119de:	181b      	adds	r3, r3, r0
 80119e0:	9806      	ldr	r0, [sp, #24]
 80119e2:	0c00      	lsrs	r0, r0, #16
 80119e4:	4360      	muls	r0, r4
 80119e6:	1840      	adds	r0, r0, r1
 80119e8:	0c19      	lsrs	r1, r3, #16
 80119ea:	1841      	adds	r1, r0, r1
 80119ec:	0c08      	lsrs	r0, r1, #16
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	0409      	lsls	r1, r1, #16
 80119f2:	4319      	orrs	r1, r3
 80119f4:	9b02      	ldr	r3, [sp, #8]
 80119f6:	9003      	str	r0, [sp, #12]
 80119f8:	c702      	stmia	r7!, {r1}
 80119fa:	42b3      	cmp	r3, r6
 80119fc:	d8e5      	bhi.n	80119ca <__multiply+0xbe>
 80119fe:	9b05      	ldr	r3, [sp, #20]
 8011a00:	50d0      	str	r0, [r2, r3]
 8011a02:	682c      	ldr	r4, [r5, #0]
 8011a04:	0c24      	lsrs	r4, r4, #16
 8011a06:	d020      	beq.n	8011a4a <__multiply+0x13e>
 8011a08:	2100      	movs	r1, #0
 8011a0a:	0010      	movs	r0, r2
 8011a0c:	6813      	ldr	r3, [r2, #0]
 8011a0e:	9e04      	ldr	r6, [sp, #16]
 8011a10:	9103      	str	r1, [sp, #12]
 8011a12:	6831      	ldr	r1, [r6, #0]
 8011a14:	6807      	ldr	r7, [r0, #0]
 8011a16:	b289      	uxth	r1, r1
 8011a18:	4361      	muls	r1, r4
 8011a1a:	0c3f      	lsrs	r7, r7, #16
 8011a1c:	19c9      	adds	r1, r1, r7
 8011a1e:	9f03      	ldr	r7, [sp, #12]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	19c9      	adds	r1, r1, r7
 8011a24:	040f      	lsls	r7, r1, #16
 8011a26:	431f      	orrs	r7, r3
 8011a28:	6007      	str	r7, [r0, #0]
 8011a2a:	ce80      	ldmia	r6!, {r7}
 8011a2c:	6843      	ldr	r3, [r0, #4]
 8011a2e:	0c3f      	lsrs	r7, r7, #16
 8011a30:	4367      	muls	r7, r4
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	0c09      	lsrs	r1, r1, #16
 8011a36:	18fb      	adds	r3, r7, r3
 8011a38:	185b      	adds	r3, r3, r1
 8011a3a:	0c19      	lsrs	r1, r3, #16
 8011a3c:	9103      	str	r1, [sp, #12]
 8011a3e:	9902      	ldr	r1, [sp, #8]
 8011a40:	3004      	adds	r0, #4
 8011a42:	42b1      	cmp	r1, r6
 8011a44:	d8e5      	bhi.n	8011a12 <__multiply+0x106>
 8011a46:	9905      	ldr	r1, [sp, #20]
 8011a48:	5053      	str	r3, [r2, r1]
 8011a4a:	3504      	adds	r5, #4
 8011a4c:	3204      	adds	r2, #4
 8011a4e:	e7a0      	b.n	8011992 <__multiply+0x86>
 8011a50:	9b00      	ldr	r3, [sp, #0]
 8011a52:	3b01      	subs	r3, #1
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	e79f      	b.n	8011998 <__multiply+0x8c>
 8011a58:	08012e3a 	.word	0x08012e3a
 8011a5c:	08012eab 	.word	0x08012eab

08011a60 <__pow5mult>:
 8011a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a62:	2303      	movs	r3, #3
 8011a64:	0015      	movs	r5, r2
 8011a66:	0007      	movs	r7, r0
 8011a68:	000e      	movs	r6, r1
 8011a6a:	401a      	ands	r2, r3
 8011a6c:	421d      	tst	r5, r3
 8011a6e:	d008      	beq.n	8011a82 <__pow5mult+0x22>
 8011a70:	4925      	ldr	r1, [pc, #148]	@ (8011b08 <__pow5mult+0xa8>)
 8011a72:	3a01      	subs	r2, #1
 8011a74:	0092      	lsls	r2, r2, #2
 8011a76:	5852      	ldr	r2, [r2, r1]
 8011a78:	2300      	movs	r3, #0
 8011a7a:	0031      	movs	r1, r6
 8011a7c:	f7ff fe4e 	bl	801171c <__multadd>
 8011a80:	0006      	movs	r6, r0
 8011a82:	10ad      	asrs	r5, r5, #2
 8011a84:	d03d      	beq.n	8011b02 <__pow5mult+0xa2>
 8011a86:	69fc      	ldr	r4, [r7, #28]
 8011a88:	2c00      	cmp	r4, #0
 8011a8a:	d10f      	bne.n	8011aac <__pow5mult+0x4c>
 8011a8c:	2010      	movs	r0, #16
 8011a8e:	f7ff fd0f 	bl	80114b0 <malloc>
 8011a92:	1e02      	subs	r2, r0, #0
 8011a94:	61f8      	str	r0, [r7, #28]
 8011a96:	d105      	bne.n	8011aa4 <__pow5mult+0x44>
 8011a98:	21b4      	movs	r1, #180	@ 0xb4
 8011a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8011b0c <__pow5mult+0xac>)
 8011a9c:	481c      	ldr	r0, [pc, #112]	@ (8011b10 <__pow5mult+0xb0>)
 8011a9e:	31ff      	adds	r1, #255	@ 0xff
 8011aa0:	f000 fcd8 	bl	8012454 <__assert_func>
 8011aa4:	6044      	str	r4, [r0, #4]
 8011aa6:	6084      	str	r4, [r0, #8]
 8011aa8:	6004      	str	r4, [r0, #0]
 8011aaa:	60c4      	str	r4, [r0, #12]
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	689c      	ldr	r4, [r3, #8]
 8011ab0:	9301      	str	r3, [sp, #4]
 8011ab2:	2c00      	cmp	r4, #0
 8011ab4:	d108      	bne.n	8011ac8 <__pow5mult+0x68>
 8011ab6:	0038      	movs	r0, r7
 8011ab8:	4916      	ldr	r1, [pc, #88]	@ (8011b14 <__pow5mult+0xb4>)
 8011aba:	f7ff ff0f 	bl	80118dc <__i2b>
 8011abe:	9b01      	ldr	r3, [sp, #4]
 8011ac0:	0004      	movs	r4, r0
 8011ac2:	6098      	str	r0, [r3, #8]
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	6003      	str	r3, [r0, #0]
 8011ac8:	2301      	movs	r3, #1
 8011aca:	421d      	tst	r5, r3
 8011acc:	d00a      	beq.n	8011ae4 <__pow5mult+0x84>
 8011ace:	0031      	movs	r1, r6
 8011ad0:	0022      	movs	r2, r4
 8011ad2:	0038      	movs	r0, r7
 8011ad4:	f7ff ff1a 	bl	801190c <__multiply>
 8011ad8:	0031      	movs	r1, r6
 8011ada:	9001      	str	r0, [sp, #4]
 8011adc:	0038      	movs	r0, r7
 8011ade:	f7ff fdf9 	bl	80116d4 <_Bfree>
 8011ae2:	9e01      	ldr	r6, [sp, #4]
 8011ae4:	106d      	asrs	r5, r5, #1
 8011ae6:	d00c      	beq.n	8011b02 <__pow5mult+0xa2>
 8011ae8:	6820      	ldr	r0, [r4, #0]
 8011aea:	2800      	cmp	r0, #0
 8011aec:	d107      	bne.n	8011afe <__pow5mult+0x9e>
 8011aee:	0022      	movs	r2, r4
 8011af0:	0021      	movs	r1, r4
 8011af2:	0038      	movs	r0, r7
 8011af4:	f7ff ff0a 	bl	801190c <__multiply>
 8011af8:	2300      	movs	r3, #0
 8011afa:	6020      	str	r0, [r4, #0]
 8011afc:	6003      	str	r3, [r0, #0]
 8011afe:	0004      	movs	r4, r0
 8011b00:	e7e2      	b.n	8011ac8 <__pow5mult+0x68>
 8011b02:	0030      	movs	r0, r6
 8011b04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011b06:	46c0      	nop			@ (mov r8, r8)
 8011b08:	08012fa8 	.word	0x08012fa8
 8011b0c:	08012dcb 	.word	0x08012dcb
 8011b10:	08012eab 	.word	0x08012eab
 8011b14:	00000271 	.word	0x00000271

08011b18 <__lshift>:
 8011b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b1a:	000c      	movs	r4, r1
 8011b1c:	0016      	movs	r6, r2
 8011b1e:	6923      	ldr	r3, [r4, #16]
 8011b20:	1157      	asrs	r7, r2, #5
 8011b22:	b085      	sub	sp, #20
 8011b24:	18fb      	adds	r3, r7, r3
 8011b26:	9301      	str	r3, [sp, #4]
 8011b28:	3301      	adds	r3, #1
 8011b2a:	9300      	str	r3, [sp, #0]
 8011b2c:	6849      	ldr	r1, [r1, #4]
 8011b2e:	68a3      	ldr	r3, [r4, #8]
 8011b30:	9002      	str	r0, [sp, #8]
 8011b32:	9a00      	ldr	r2, [sp, #0]
 8011b34:	4293      	cmp	r3, r2
 8011b36:	db10      	blt.n	8011b5a <__lshift+0x42>
 8011b38:	9802      	ldr	r0, [sp, #8]
 8011b3a:	f7ff fd87 	bl	801164c <_Balloc>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	0001      	movs	r1, r0
 8011b42:	0005      	movs	r5, r0
 8011b44:	001a      	movs	r2, r3
 8011b46:	3114      	adds	r1, #20
 8011b48:	4298      	cmp	r0, r3
 8011b4a:	d10c      	bne.n	8011b66 <__lshift+0x4e>
 8011b4c:	21ef      	movs	r1, #239	@ 0xef
 8011b4e:	002a      	movs	r2, r5
 8011b50:	4b25      	ldr	r3, [pc, #148]	@ (8011be8 <__lshift+0xd0>)
 8011b52:	4826      	ldr	r0, [pc, #152]	@ (8011bec <__lshift+0xd4>)
 8011b54:	0049      	lsls	r1, r1, #1
 8011b56:	f000 fc7d 	bl	8012454 <__assert_func>
 8011b5a:	3101      	adds	r1, #1
 8011b5c:	005b      	lsls	r3, r3, #1
 8011b5e:	e7e8      	b.n	8011b32 <__lshift+0x1a>
 8011b60:	0098      	lsls	r0, r3, #2
 8011b62:	500a      	str	r2, [r1, r0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	42bb      	cmp	r3, r7
 8011b68:	dbfa      	blt.n	8011b60 <__lshift+0x48>
 8011b6a:	43fb      	mvns	r3, r7
 8011b6c:	17db      	asrs	r3, r3, #31
 8011b6e:	401f      	ands	r7, r3
 8011b70:	00bf      	lsls	r7, r7, #2
 8011b72:	0023      	movs	r3, r4
 8011b74:	201f      	movs	r0, #31
 8011b76:	19c9      	adds	r1, r1, r7
 8011b78:	0037      	movs	r7, r6
 8011b7a:	6922      	ldr	r2, [r4, #16]
 8011b7c:	3314      	adds	r3, #20
 8011b7e:	0092      	lsls	r2, r2, #2
 8011b80:	189a      	adds	r2, r3, r2
 8011b82:	4007      	ands	r7, r0
 8011b84:	4206      	tst	r6, r0
 8011b86:	d029      	beq.n	8011bdc <__lshift+0xc4>
 8011b88:	3001      	adds	r0, #1
 8011b8a:	1bc0      	subs	r0, r0, r7
 8011b8c:	9003      	str	r0, [sp, #12]
 8011b8e:	468c      	mov	ip, r1
 8011b90:	2000      	movs	r0, #0
 8011b92:	681e      	ldr	r6, [r3, #0]
 8011b94:	40be      	lsls	r6, r7
 8011b96:	4306      	orrs	r6, r0
 8011b98:	4660      	mov	r0, ip
 8011b9a:	c040      	stmia	r0!, {r6}
 8011b9c:	4684      	mov	ip, r0
 8011b9e:	9e03      	ldr	r6, [sp, #12]
 8011ba0:	cb01      	ldmia	r3!, {r0}
 8011ba2:	40f0      	lsrs	r0, r6
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d8f4      	bhi.n	8011b92 <__lshift+0x7a>
 8011ba8:	0026      	movs	r6, r4
 8011baa:	3615      	adds	r6, #21
 8011bac:	2304      	movs	r3, #4
 8011bae:	42b2      	cmp	r2, r6
 8011bb0:	d304      	bcc.n	8011bbc <__lshift+0xa4>
 8011bb2:	1b13      	subs	r3, r2, r4
 8011bb4:	3b15      	subs	r3, #21
 8011bb6:	089b      	lsrs	r3, r3, #2
 8011bb8:	3301      	adds	r3, #1
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	50c8      	str	r0, [r1, r3]
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d002      	beq.n	8011bc8 <__lshift+0xb0>
 8011bc2:	9b01      	ldr	r3, [sp, #4]
 8011bc4:	3302      	adds	r3, #2
 8011bc6:	9300      	str	r3, [sp, #0]
 8011bc8:	9b00      	ldr	r3, [sp, #0]
 8011bca:	9802      	ldr	r0, [sp, #8]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	0021      	movs	r1, r4
 8011bd0:	612b      	str	r3, [r5, #16]
 8011bd2:	f7ff fd7f 	bl	80116d4 <_Bfree>
 8011bd6:	0028      	movs	r0, r5
 8011bd8:	b005      	add	sp, #20
 8011bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bdc:	cb01      	ldmia	r3!, {r0}
 8011bde:	c101      	stmia	r1!, {r0}
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d8fb      	bhi.n	8011bdc <__lshift+0xc4>
 8011be4:	e7f0      	b.n	8011bc8 <__lshift+0xb0>
 8011be6:	46c0      	nop			@ (mov r8, r8)
 8011be8:	08012e3a 	.word	0x08012e3a
 8011bec:	08012eab 	.word	0x08012eab

08011bf0 <__mcmp>:
 8011bf0:	b530      	push	{r4, r5, lr}
 8011bf2:	690b      	ldr	r3, [r1, #16]
 8011bf4:	6904      	ldr	r4, [r0, #16]
 8011bf6:	0002      	movs	r2, r0
 8011bf8:	1ae0      	subs	r0, r4, r3
 8011bfa:	429c      	cmp	r4, r3
 8011bfc:	d10f      	bne.n	8011c1e <__mcmp+0x2e>
 8011bfe:	3214      	adds	r2, #20
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	3114      	adds	r1, #20
 8011c04:	0014      	movs	r4, r2
 8011c06:	18c9      	adds	r1, r1, r3
 8011c08:	18d2      	adds	r2, r2, r3
 8011c0a:	3a04      	subs	r2, #4
 8011c0c:	3904      	subs	r1, #4
 8011c0e:	6815      	ldr	r5, [r2, #0]
 8011c10:	680b      	ldr	r3, [r1, #0]
 8011c12:	429d      	cmp	r5, r3
 8011c14:	d004      	beq.n	8011c20 <__mcmp+0x30>
 8011c16:	2001      	movs	r0, #1
 8011c18:	429d      	cmp	r5, r3
 8011c1a:	d200      	bcs.n	8011c1e <__mcmp+0x2e>
 8011c1c:	3802      	subs	r0, #2
 8011c1e:	bd30      	pop	{r4, r5, pc}
 8011c20:	4294      	cmp	r4, r2
 8011c22:	d3f2      	bcc.n	8011c0a <__mcmp+0x1a>
 8011c24:	e7fb      	b.n	8011c1e <__mcmp+0x2e>
	...

08011c28 <__mdiff>:
 8011c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c2a:	000c      	movs	r4, r1
 8011c2c:	b087      	sub	sp, #28
 8011c2e:	9000      	str	r0, [sp, #0]
 8011c30:	0011      	movs	r1, r2
 8011c32:	0020      	movs	r0, r4
 8011c34:	0017      	movs	r7, r2
 8011c36:	f7ff ffdb 	bl	8011bf0 <__mcmp>
 8011c3a:	1e05      	subs	r5, r0, #0
 8011c3c:	d110      	bne.n	8011c60 <__mdiff+0x38>
 8011c3e:	0001      	movs	r1, r0
 8011c40:	9800      	ldr	r0, [sp, #0]
 8011c42:	f7ff fd03 	bl	801164c <_Balloc>
 8011c46:	1e02      	subs	r2, r0, #0
 8011c48:	d104      	bne.n	8011c54 <__mdiff+0x2c>
 8011c4a:	4b40      	ldr	r3, [pc, #256]	@ (8011d4c <__mdiff+0x124>)
 8011c4c:	4840      	ldr	r0, [pc, #256]	@ (8011d50 <__mdiff+0x128>)
 8011c4e:	4941      	ldr	r1, [pc, #260]	@ (8011d54 <__mdiff+0x12c>)
 8011c50:	f000 fc00 	bl	8012454 <__assert_func>
 8011c54:	2301      	movs	r3, #1
 8011c56:	6145      	str	r5, [r0, #20]
 8011c58:	6103      	str	r3, [r0, #16]
 8011c5a:	0010      	movs	r0, r2
 8011c5c:	b007      	add	sp, #28
 8011c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c60:	2600      	movs	r6, #0
 8011c62:	42b0      	cmp	r0, r6
 8011c64:	da03      	bge.n	8011c6e <__mdiff+0x46>
 8011c66:	0023      	movs	r3, r4
 8011c68:	003c      	movs	r4, r7
 8011c6a:	001f      	movs	r7, r3
 8011c6c:	3601      	adds	r6, #1
 8011c6e:	6861      	ldr	r1, [r4, #4]
 8011c70:	9800      	ldr	r0, [sp, #0]
 8011c72:	f7ff fceb 	bl	801164c <_Balloc>
 8011c76:	1e02      	subs	r2, r0, #0
 8011c78:	d103      	bne.n	8011c82 <__mdiff+0x5a>
 8011c7a:	4b34      	ldr	r3, [pc, #208]	@ (8011d4c <__mdiff+0x124>)
 8011c7c:	4834      	ldr	r0, [pc, #208]	@ (8011d50 <__mdiff+0x128>)
 8011c7e:	4936      	ldr	r1, [pc, #216]	@ (8011d58 <__mdiff+0x130>)
 8011c80:	e7e6      	b.n	8011c50 <__mdiff+0x28>
 8011c82:	6923      	ldr	r3, [r4, #16]
 8011c84:	3414      	adds	r4, #20
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	18e3      	adds	r3, r4, r3
 8011c8c:	0021      	movs	r1, r4
 8011c8e:	9401      	str	r4, [sp, #4]
 8011c90:	003c      	movs	r4, r7
 8011c92:	9302      	str	r3, [sp, #8]
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	3414      	adds	r4, #20
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	18e3      	adds	r3, r4, r3
 8011c9c:	9303      	str	r3, [sp, #12]
 8011c9e:	0003      	movs	r3, r0
 8011ca0:	60c6      	str	r6, [r0, #12]
 8011ca2:	468c      	mov	ip, r1
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	3314      	adds	r3, #20
 8011ca8:	9304      	str	r3, [sp, #16]
 8011caa:	9305      	str	r3, [sp, #20]
 8011cac:	4663      	mov	r3, ip
 8011cae:	cb20      	ldmia	r3!, {r5}
 8011cb0:	b2a9      	uxth	r1, r5
 8011cb2:	000e      	movs	r6, r1
 8011cb4:	469c      	mov	ip, r3
 8011cb6:	cc08      	ldmia	r4!, {r3}
 8011cb8:	0c2d      	lsrs	r5, r5, #16
 8011cba:	b299      	uxth	r1, r3
 8011cbc:	1a71      	subs	r1, r6, r1
 8011cbe:	1809      	adds	r1, r1, r0
 8011cc0:	0c1b      	lsrs	r3, r3, #16
 8011cc2:	1408      	asrs	r0, r1, #16
 8011cc4:	1aeb      	subs	r3, r5, r3
 8011cc6:	181b      	adds	r3, r3, r0
 8011cc8:	1418      	asrs	r0, r3, #16
 8011cca:	b289      	uxth	r1, r1
 8011ccc:	041b      	lsls	r3, r3, #16
 8011cce:	4319      	orrs	r1, r3
 8011cd0:	9b05      	ldr	r3, [sp, #20]
 8011cd2:	c302      	stmia	r3!, {r1}
 8011cd4:	9305      	str	r3, [sp, #20]
 8011cd6:	9b03      	ldr	r3, [sp, #12]
 8011cd8:	42a3      	cmp	r3, r4
 8011cda:	d8e7      	bhi.n	8011cac <__mdiff+0x84>
 8011cdc:	0039      	movs	r1, r7
 8011cde:	9c03      	ldr	r4, [sp, #12]
 8011ce0:	3115      	adds	r1, #21
 8011ce2:	2304      	movs	r3, #4
 8011ce4:	428c      	cmp	r4, r1
 8011ce6:	d304      	bcc.n	8011cf2 <__mdiff+0xca>
 8011ce8:	1be3      	subs	r3, r4, r7
 8011cea:	3b15      	subs	r3, #21
 8011cec:	089b      	lsrs	r3, r3, #2
 8011cee:	3301      	adds	r3, #1
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	9901      	ldr	r1, [sp, #4]
 8011cf4:	18cd      	adds	r5, r1, r3
 8011cf6:	9904      	ldr	r1, [sp, #16]
 8011cf8:	002e      	movs	r6, r5
 8011cfa:	18cb      	adds	r3, r1, r3
 8011cfc:	001f      	movs	r7, r3
 8011cfe:	9902      	ldr	r1, [sp, #8]
 8011d00:	428e      	cmp	r6, r1
 8011d02:	d311      	bcc.n	8011d28 <__mdiff+0x100>
 8011d04:	9c02      	ldr	r4, [sp, #8]
 8011d06:	1ee9      	subs	r1, r5, #3
 8011d08:	2000      	movs	r0, #0
 8011d0a:	428c      	cmp	r4, r1
 8011d0c:	d304      	bcc.n	8011d18 <__mdiff+0xf0>
 8011d0e:	0021      	movs	r1, r4
 8011d10:	3103      	adds	r1, #3
 8011d12:	1b49      	subs	r1, r1, r5
 8011d14:	0889      	lsrs	r1, r1, #2
 8011d16:	0088      	lsls	r0, r1, #2
 8011d18:	181b      	adds	r3, r3, r0
 8011d1a:	3b04      	subs	r3, #4
 8011d1c:	6819      	ldr	r1, [r3, #0]
 8011d1e:	2900      	cmp	r1, #0
 8011d20:	d010      	beq.n	8011d44 <__mdiff+0x11c>
 8011d22:	9b00      	ldr	r3, [sp, #0]
 8011d24:	6113      	str	r3, [r2, #16]
 8011d26:	e798      	b.n	8011c5a <__mdiff+0x32>
 8011d28:	4684      	mov	ip, r0
 8011d2a:	ce02      	ldmia	r6!, {r1}
 8011d2c:	b288      	uxth	r0, r1
 8011d2e:	4460      	add	r0, ip
 8011d30:	1400      	asrs	r0, r0, #16
 8011d32:	0c0c      	lsrs	r4, r1, #16
 8011d34:	1904      	adds	r4, r0, r4
 8011d36:	4461      	add	r1, ip
 8011d38:	1420      	asrs	r0, r4, #16
 8011d3a:	b289      	uxth	r1, r1
 8011d3c:	0424      	lsls	r4, r4, #16
 8011d3e:	4321      	orrs	r1, r4
 8011d40:	c702      	stmia	r7!, {r1}
 8011d42:	e7dc      	b.n	8011cfe <__mdiff+0xd6>
 8011d44:	9900      	ldr	r1, [sp, #0]
 8011d46:	3901      	subs	r1, #1
 8011d48:	9100      	str	r1, [sp, #0]
 8011d4a:	e7e6      	b.n	8011d1a <__mdiff+0xf2>
 8011d4c:	08012e3a 	.word	0x08012e3a
 8011d50:	08012eab 	.word	0x08012eab
 8011d54:	00000237 	.word	0x00000237
 8011d58:	00000245 	.word	0x00000245

08011d5c <__ulp>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	2400      	movs	r4, #0
 8011d60:	4b0c      	ldr	r3, [pc, #48]	@ (8011d94 <__ulp+0x38>)
 8011d62:	4a0d      	ldr	r2, [pc, #52]	@ (8011d98 <__ulp+0x3c>)
 8011d64:	400b      	ands	r3, r1
 8011d66:	189b      	adds	r3, r3, r2
 8011d68:	42a3      	cmp	r3, r4
 8011d6a:	dc06      	bgt.n	8011d7a <__ulp+0x1e>
 8011d6c:	425b      	negs	r3, r3
 8011d6e:	151a      	asrs	r2, r3, #20
 8011d70:	2a13      	cmp	r2, #19
 8011d72:	dc05      	bgt.n	8011d80 <__ulp+0x24>
 8011d74:	2380      	movs	r3, #128	@ 0x80
 8011d76:	031b      	lsls	r3, r3, #12
 8011d78:	4113      	asrs	r3, r2
 8011d7a:	0019      	movs	r1, r3
 8011d7c:	0020      	movs	r0, r4
 8011d7e:	bd10      	pop	{r4, pc}
 8011d80:	3a14      	subs	r2, #20
 8011d82:	2401      	movs	r4, #1
 8011d84:	2a1e      	cmp	r2, #30
 8011d86:	dc02      	bgt.n	8011d8e <__ulp+0x32>
 8011d88:	2480      	movs	r4, #128	@ 0x80
 8011d8a:	0624      	lsls	r4, r4, #24
 8011d8c:	40d4      	lsrs	r4, r2
 8011d8e:	2300      	movs	r3, #0
 8011d90:	e7f3      	b.n	8011d7a <__ulp+0x1e>
 8011d92:	46c0      	nop			@ (mov r8, r8)
 8011d94:	7ff00000 	.word	0x7ff00000
 8011d98:	fcc00000 	.word	0xfcc00000

08011d9c <__b2d>:
 8011d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d9e:	0006      	movs	r6, r0
 8011da0:	6903      	ldr	r3, [r0, #16]
 8011da2:	3614      	adds	r6, #20
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	18f3      	adds	r3, r6, r3
 8011da8:	1f1d      	subs	r5, r3, #4
 8011daa:	682c      	ldr	r4, [r5, #0]
 8011dac:	000f      	movs	r7, r1
 8011dae:	0020      	movs	r0, r4
 8011db0:	9301      	str	r3, [sp, #4]
 8011db2:	f7ff fd43 	bl	801183c <__hi0bits>
 8011db6:	2220      	movs	r2, #32
 8011db8:	1a12      	subs	r2, r2, r0
 8011dba:	603a      	str	r2, [r7, #0]
 8011dbc:	0003      	movs	r3, r0
 8011dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8011e30 <__b2d+0x94>)
 8011dc0:	280a      	cmp	r0, #10
 8011dc2:	dc15      	bgt.n	8011df0 <__b2d+0x54>
 8011dc4:	210b      	movs	r1, #11
 8011dc6:	0027      	movs	r7, r4
 8011dc8:	1a09      	subs	r1, r1, r0
 8011dca:	40cf      	lsrs	r7, r1
 8011dcc:	433a      	orrs	r2, r7
 8011dce:	468c      	mov	ip, r1
 8011dd0:	0011      	movs	r1, r2
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	42ae      	cmp	r6, r5
 8011dd6:	d202      	bcs.n	8011dde <__b2d+0x42>
 8011dd8:	9a01      	ldr	r2, [sp, #4]
 8011dda:	3a08      	subs	r2, #8
 8011ddc:	6812      	ldr	r2, [r2, #0]
 8011dde:	3315      	adds	r3, #21
 8011de0:	409c      	lsls	r4, r3
 8011de2:	4663      	mov	r3, ip
 8011de4:	0027      	movs	r7, r4
 8011de6:	40da      	lsrs	r2, r3
 8011de8:	4317      	orrs	r7, r2
 8011dea:	0038      	movs	r0, r7
 8011dec:	b003      	add	sp, #12
 8011dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011df0:	2700      	movs	r7, #0
 8011df2:	42ae      	cmp	r6, r5
 8011df4:	d202      	bcs.n	8011dfc <__b2d+0x60>
 8011df6:	9d01      	ldr	r5, [sp, #4]
 8011df8:	3d08      	subs	r5, #8
 8011dfa:	682f      	ldr	r7, [r5, #0]
 8011dfc:	210b      	movs	r1, #11
 8011dfe:	4249      	negs	r1, r1
 8011e00:	468c      	mov	ip, r1
 8011e02:	449c      	add	ip, r3
 8011e04:	2b0b      	cmp	r3, #11
 8011e06:	d010      	beq.n	8011e2a <__b2d+0x8e>
 8011e08:	4661      	mov	r1, ip
 8011e0a:	2320      	movs	r3, #32
 8011e0c:	408c      	lsls	r4, r1
 8011e0e:	1a5b      	subs	r3, r3, r1
 8011e10:	0039      	movs	r1, r7
 8011e12:	40d9      	lsrs	r1, r3
 8011e14:	430c      	orrs	r4, r1
 8011e16:	4322      	orrs	r2, r4
 8011e18:	0011      	movs	r1, r2
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	42b5      	cmp	r5, r6
 8011e1e:	d901      	bls.n	8011e24 <__b2d+0x88>
 8011e20:	3d04      	subs	r5, #4
 8011e22:	682a      	ldr	r2, [r5, #0]
 8011e24:	4664      	mov	r4, ip
 8011e26:	40a7      	lsls	r7, r4
 8011e28:	e7dd      	b.n	8011de6 <__b2d+0x4a>
 8011e2a:	4322      	orrs	r2, r4
 8011e2c:	0011      	movs	r1, r2
 8011e2e:	e7dc      	b.n	8011dea <__b2d+0x4e>
 8011e30:	3ff00000 	.word	0x3ff00000

08011e34 <__d2b>:
 8011e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e36:	2101      	movs	r1, #1
 8011e38:	0016      	movs	r6, r2
 8011e3a:	001f      	movs	r7, r3
 8011e3c:	f7ff fc06 	bl	801164c <_Balloc>
 8011e40:	1e04      	subs	r4, r0, #0
 8011e42:	d105      	bne.n	8011e50 <__d2b+0x1c>
 8011e44:	0022      	movs	r2, r4
 8011e46:	4b25      	ldr	r3, [pc, #148]	@ (8011edc <__d2b+0xa8>)
 8011e48:	4825      	ldr	r0, [pc, #148]	@ (8011ee0 <__d2b+0xac>)
 8011e4a:	4926      	ldr	r1, [pc, #152]	@ (8011ee4 <__d2b+0xb0>)
 8011e4c:	f000 fb02 	bl	8012454 <__assert_func>
 8011e50:	033b      	lsls	r3, r7, #12
 8011e52:	007d      	lsls	r5, r7, #1
 8011e54:	0b1b      	lsrs	r3, r3, #12
 8011e56:	0d6d      	lsrs	r5, r5, #21
 8011e58:	d002      	beq.n	8011e60 <__d2b+0x2c>
 8011e5a:	2280      	movs	r2, #128	@ 0x80
 8011e5c:	0352      	lsls	r2, r2, #13
 8011e5e:	4313      	orrs	r3, r2
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	2e00      	cmp	r6, #0
 8011e64:	d025      	beq.n	8011eb2 <__d2b+0x7e>
 8011e66:	4668      	mov	r0, sp
 8011e68:	9600      	str	r6, [sp, #0]
 8011e6a:	f7ff fd08 	bl	801187e <__lo0bits>
 8011e6e:	9b01      	ldr	r3, [sp, #4]
 8011e70:	9900      	ldr	r1, [sp, #0]
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d01b      	beq.n	8011eae <__d2b+0x7a>
 8011e76:	2220      	movs	r2, #32
 8011e78:	001e      	movs	r6, r3
 8011e7a:	1a12      	subs	r2, r2, r0
 8011e7c:	4096      	lsls	r6, r2
 8011e7e:	0032      	movs	r2, r6
 8011e80:	40c3      	lsrs	r3, r0
 8011e82:	430a      	orrs	r2, r1
 8011e84:	6162      	str	r2, [r4, #20]
 8011e86:	9301      	str	r3, [sp, #4]
 8011e88:	9e01      	ldr	r6, [sp, #4]
 8011e8a:	61a6      	str	r6, [r4, #24]
 8011e8c:	1e73      	subs	r3, r6, #1
 8011e8e:	419e      	sbcs	r6, r3
 8011e90:	3601      	adds	r6, #1
 8011e92:	6126      	str	r6, [r4, #16]
 8011e94:	2d00      	cmp	r5, #0
 8011e96:	d014      	beq.n	8011ec2 <__d2b+0x8e>
 8011e98:	2635      	movs	r6, #53	@ 0x35
 8011e9a:	4b13      	ldr	r3, [pc, #76]	@ (8011ee8 <__d2b+0xb4>)
 8011e9c:	18ed      	adds	r5, r5, r3
 8011e9e:	9b08      	ldr	r3, [sp, #32]
 8011ea0:	182d      	adds	r5, r5, r0
 8011ea2:	601d      	str	r5, [r3, #0]
 8011ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ea6:	1a36      	subs	r6, r6, r0
 8011ea8:	601e      	str	r6, [r3, #0]
 8011eaa:	0020      	movs	r0, r4
 8011eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011eae:	6161      	str	r1, [r4, #20]
 8011eb0:	e7ea      	b.n	8011e88 <__d2b+0x54>
 8011eb2:	a801      	add	r0, sp, #4
 8011eb4:	f7ff fce3 	bl	801187e <__lo0bits>
 8011eb8:	9b01      	ldr	r3, [sp, #4]
 8011eba:	2601      	movs	r6, #1
 8011ebc:	6163      	str	r3, [r4, #20]
 8011ebe:	3020      	adds	r0, #32
 8011ec0:	e7e7      	b.n	8011e92 <__d2b+0x5e>
 8011ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8011eec <__d2b+0xb8>)
 8011ec4:	18c0      	adds	r0, r0, r3
 8011ec6:	9b08      	ldr	r3, [sp, #32]
 8011ec8:	6018      	str	r0, [r3, #0]
 8011eca:	4b09      	ldr	r3, [pc, #36]	@ (8011ef0 <__d2b+0xbc>)
 8011ecc:	18f3      	adds	r3, r6, r3
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	18e3      	adds	r3, r4, r3
 8011ed2:	6958      	ldr	r0, [r3, #20]
 8011ed4:	f7ff fcb2 	bl	801183c <__hi0bits>
 8011ed8:	0176      	lsls	r6, r6, #5
 8011eda:	e7e3      	b.n	8011ea4 <__d2b+0x70>
 8011edc:	08012e3a 	.word	0x08012e3a
 8011ee0:	08012eab 	.word	0x08012eab
 8011ee4:	0000030f 	.word	0x0000030f
 8011ee8:	fffffbcd 	.word	0xfffffbcd
 8011eec:	fffffbce 	.word	0xfffffbce
 8011ef0:	3fffffff 	.word	0x3fffffff

08011ef4 <__ratio>:
 8011ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ef6:	b087      	sub	sp, #28
 8011ef8:	000f      	movs	r7, r1
 8011efa:	a904      	add	r1, sp, #16
 8011efc:	0006      	movs	r6, r0
 8011efe:	f7ff ff4d 	bl	8011d9c <__b2d>
 8011f02:	9000      	str	r0, [sp, #0]
 8011f04:	9101      	str	r1, [sp, #4]
 8011f06:	9b00      	ldr	r3, [sp, #0]
 8011f08:	9c01      	ldr	r4, [sp, #4]
 8011f0a:	0038      	movs	r0, r7
 8011f0c:	a905      	add	r1, sp, #20
 8011f0e:	9302      	str	r3, [sp, #8]
 8011f10:	9403      	str	r4, [sp, #12]
 8011f12:	f7ff ff43 	bl	8011d9c <__b2d>
 8011f16:	000d      	movs	r5, r1
 8011f18:	0002      	movs	r2, r0
 8011f1a:	000b      	movs	r3, r1
 8011f1c:	6930      	ldr	r0, [r6, #16]
 8011f1e:	6939      	ldr	r1, [r7, #16]
 8011f20:	9e04      	ldr	r6, [sp, #16]
 8011f22:	1a40      	subs	r0, r0, r1
 8011f24:	9905      	ldr	r1, [sp, #20]
 8011f26:	0140      	lsls	r0, r0, #5
 8011f28:	1a71      	subs	r1, r6, r1
 8011f2a:	1841      	adds	r1, r0, r1
 8011f2c:	0508      	lsls	r0, r1, #20
 8011f2e:	2900      	cmp	r1, #0
 8011f30:	dd08      	ble.n	8011f44 <__ratio+0x50>
 8011f32:	9901      	ldr	r1, [sp, #4]
 8011f34:	1841      	adds	r1, r0, r1
 8011f36:	9103      	str	r1, [sp, #12]
 8011f38:	9802      	ldr	r0, [sp, #8]
 8011f3a:	9903      	ldr	r1, [sp, #12]
 8011f3c:	f7ee fee4 	bl	8000d08 <__aeabi_ddiv>
 8011f40:	b007      	add	sp, #28
 8011f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f44:	1a2b      	subs	r3, r5, r0
 8011f46:	e7f7      	b.n	8011f38 <__ratio+0x44>

08011f48 <__copybits>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	0014      	movs	r4, r2
 8011f4c:	0005      	movs	r5, r0
 8011f4e:	3901      	subs	r1, #1
 8011f50:	6913      	ldr	r3, [r2, #16]
 8011f52:	1149      	asrs	r1, r1, #5
 8011f54:	3101      	adds	r1, #1
 8011f56:	0089      	lsls	r1, r1, #2
 8011f58:	3414      	adds	r4, #20
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	1841      	adds	r1, r0, r1
 8011f5e:	18e3      	adds	r3, r4, r3
 8011f60:	42a3      	cmp	r3, r4
 8011f62:	d80d      	bhi.n	8011f80 <__copybits+0x38>
 8011f64:	0014      	movs	r4, r2
 8011f66:	3411      	adds	r4, #17
 8011f68:	2500      	movs	r5, #0
 8011f6a:	42a3      	cmp	r3, r4
 8011f6c:	d303      	bcc.n	8011f76 <__copybits+0x2e>
 8011f6e:	1a9b      	subs	r3, r3, r2
 8011f70:	3b11      	subs	r3, #17
 8011f72:	089b      	lsrs	r3, r3, #2
 8011f74:	009d      	lsls	r5, r3, #2
 8011f76:	2300      	movs	r3, #0
 8011f78:	1940      	adds	r0, r0, r5
 8011f7a:	4281      	cmp	r1, r0
 8011f7c:	d803      	bhi.n	8011f86 <__copybits+0x3e>
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}
 8011f80:	cc40      	ldmia	r4!, {r6}
 8011f82:	c540      	stmia	r5!, {r6}
 8011f84:	e7ec      	b.n	8011f60 <__copybits+0x18>
 8011f86:	c008      	stmia	r0!, {r3}
 8011f88:	e7f7      	b.n	8011f7a <__copybits+0x32>

08011f8a <__any_on>:
 8011f8a:	0002      	movs	r2, r0
 8011f8c:	6900      	ldr	r0, [r0, #16]
 8011f8e:	b510      	push	{r4, lr}
 8011f90:	3214      	adds	r2, #20
 8011f92:	114b      	asrs	r3, r1, #5
 8011f94:	4298      	cmp	r0, r3
 8011f96:	db13      	blt.n	8011fc0 <__any_on+0x36>
 8011f98:	dd0c      	ble.n	8011fb4 <__any_on+0x2a>
 8011f9a:	241f      	movs	r4, #31
 8011f9c:	0008      	movs	r0, r1
 8011f9e:	4020      	ands	r0, r4
 8011fa0:	4221      	tst	r1, r4
 8011fa2:	d007      	beq.n	8011fb4 <__any_on+0x2a>
 8011fa4:	0099      	lsls	r1, r3, #2
 8011fa6:	588c      	ldr	r4, [r1, r2]
 8011fa8:	0021      	movs	r1, r4
 8011faa:	40c1      	lsrs	r1, r0
 8011fac:	4081      	lsls	r1, r0
 8011fae:	2001      	movs	r0, #1
 8011fb0:	428c      	cmp	r4, r1
 8011fb2:	d104      	bne.n	8011fbe <__any_on+0x34>
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	18d3      	adds	r3, r2, r3
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d803      	bhi.n	8011fc4 <__any_on+0x3a>
 8011fbc:	2000      	movs	r0, #0
 8011fbe:	bd10      	pop	{r4, pc}
 8011fc0:	0003      	movs	r3, r0
 8011fc2:	e7f7      	b.n	8011fb4 <__any_on+0x2a>
 8011fc4:	3b04      	subs	r3, #4
 8011fc6:	6819      	ldr	r1, [r3, #0]
 8011fc8:	2900      	cmp	r1, #0
 8011fca:	d0f5      	beq.n	8011fb8 <__any_on+0x2e>
 8011fcc:	2001      	movs	r0, #1
 8011fce:	e7f6      	b.n	8011fbe <__any_on+0x34>

08011fd0 <__ascii_wctomb>:
 8011fd0:	0003      	movs	r3, r0
 8011fd2:	1e08      	subs	r0, r1, #0
 8011fd4:	d005      	beq.n	8011fe2 <__ascii_wctomb+0x12>
 8011fd6:	2aff      	cmp	r2, #255	@ 0xff
 8011fd8:	d904      	bls.n	8011fe4 <__ascii_wctomb+0x14>
 8011fda:	228a      	movs	r2, #138	@ 0x8a
 8011fdc:	2001      	movs	r0, #1
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	4240      	negs	r0, r0
 8011fe2:	4770      	bx	lr
 8011fe4:	2001      	movs	r0, #1
 8011fe6:	700a      	strb	r2, [r1, #0]
 8011fe8:	e7fb      	b.n	8011fe2 <__ascii_wctomb+0x12>
	...

08011fec <__ssputs_r>:
 8011fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fee:	688e      	ldr	r6, [r1, #8]
 8011ff0:	b085      	sub	sp, #20
 8011ff2:	001f      	movs	r7, r3
 8011ff4:	000c      	movs	r4, r1
 8011ff6:	680b      	ldr	r3, [r1, #0]
 8011ff8:	9002      	str	r0, [sp, #8]
 8011ffa:	9203      	str	r2, [sp, #12]
 8011ffc:	42be      	cmp	r6, r7
 8011ffe:	d830      	bhi.n	8012062 <__ssputs_r+0x76>
 8012000:	210c      	movs	r1, #12
 8012002:	5e62      	ldrsh	r2, [r4, r1]
 8012004:	2190      	movs	r1, #144	@ 0x90
 8012006:	00c9      	lsls	r1, r1, #3
 8012008:	420a      	tst	r2, r1
 801200a:	d028      	beq.n	801205e <__ssputs_r+0x72>
 801200c:	2003      	movs	r0, #3
 801200e:	6921      	ldr	r1, [r4, #16]
 8012010:	1a5b      	subs	r3, r3, r1
 8012012:	9301      	str	r3, [sp, #4]
 8012014:	6963      	ldr	r3, [r4, #20]
 8012016:	4343      	muls	r3, r0
 8012018:	9801      	ldr	r0, [sp, #4]
 801201a:	0fdd      	lsrs	r5, r3, #31
 801201c:	18ed      	adds	r5, r5, r3
 801201e:	1c7b      	adds	r3, r7, #1
 8012020:	181b      	adds	r3, r3, r0
 8012022:	106d      	asrs	r5, r5, #1
 8012024:	42ab      	cmp	r3, r5
 8012026:	d900      	bls.n	801202a <__ssputs_r+0x3e>
 8012028:	001d      	movs	r5, r3
 801202a:	0552      	lsls	r2, r2, #21
 801202c:	d528      	bpl.n	8012080 <__ssputs_r+0x94>
 801202e:	0029      	movs	r1, r5
 8012030:	9802      	ldr	r0, [sp, #8]
 8012032:	f7ff fa69 	bl	8011508 <_malloc_r>
 8012036:	1e06      	subs	r6, r0, #0
 8012038:	d02c      	beq.n	8012094 <__ssputs_r+0xa8>
 801203a:	9a01      	ldr	r2, [sp, #4]
 801203c:	6921      	ldr	r1, [r4, #16]
 801203e:	f7fe f80d 	bl	801005c <memcpy>
 8012042:	89a2      	ldrh	r2, [r4, #12]
 8012044:	4b18      	ldr	r3, [pc, #96]	@ (80120a8 <__ssputs_r+0xbc>)
 8012046:	401a      	ands	r2, r3
 8012048:	2380      	movs	r3, #128	@ 0x80
 801204a:	4313      	orrs	r3, r2
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	6126      	str	r6, [r4, #16]
 8012052:	18f6      	adds	r6, r6, r3
 8012054:	6026      	str	r6, [r4, #0]
 8012056:	003e      	movs	r6, r7
 8012058:	6165      	str	r5, [r4, #20]
 801205a:	1aed      	subs	r5, r5, r3
 801205c:	60a5      	str	r5, [r4, #8]
 801205e:	42be      	cmp	r6, r7
 8012060:	d900      	bls.n	8012064 <__ssputs_r+0x78>
 8012062:	003e      	movs	r6, r7
 8012064:	0032      	movs	r2, r6
 8012066:	9903      	ldr	r1, [sp, #12]
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	f000 f9ce 	bl	801240a <memmove>
 801206e:	2000      	movs	r0, #0
 8012070:	68a3      	ldr	r3, [r4, #8]
 8012072:	1b9b      	subs	r3, r3, r6
 8012074:	60a3      	str	r3, [r4, #8]
 8012076:	6823      	ldr	r3, [r4, #0]
 8012078:	199b      	adds	r3, r3, r6
 801207a:	6023      	str	r3, [r4, #0]
 801207c:	b005      	add	sp, #20
 801207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012080:	002a      	movs	r2, r5
 8012082:	9802      	ldr	r0, [sp, #8]
 8012084:	f000 fa31 	bl	80124ea <_realloc_r>
 8012088:	1e06      	subs	r6, r0, #0
 801208a:	d1e0      	bne.n	801204e <__ssputs_r+0x62>
 801208c:	6921      	ldr	r1, [r4, #16]
 801208e:	9802      	ldr	r0, [sp, #8]
 8012090:	f7fe fe6a 	bl	8010d68 <_free_r>
 8012094:	230c      	movs	r3, #12
 8012096:	2001      	movs	r0, #1
 8012098:	9a02      	ldr	r2, [sp, #8]
 801209a:	4240      	negs	r0, r0
 801209c:	6013      	str	r3, [r2, #0]
 801209e:	89a2      	ldrh	r2, [r4, #12]
 80120a0:	3334      	adds	r3, #52	@ 0x34
 80120a2:	4313      	orrs	r3, r2
 80120a4:	81a3      	strh	r3, [r4, #12]
 80120a6:	e7e9      	b.n	801207c <__ssputs_r+0x90>
 80120a8:	fffffb7f 	.word	0xfffffb7f

080120ac <_svfiprintf_r>:
 80120ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120ae:	b0a1      	sub	sp, #132	@ 0x84
 80120b0:	9003      	str	r0, [sp, #12]
 80120b2:	001d      	movs	r5, r3
 80120b4:	898b      	ldrh	r3, [r1, #12]
 80120b6:	000f      	movs	r7, r1
 80120b8:	0016      	movs	r6, r2
 80120ba:	061b      	lsls	r3, r3, #24
 80120bc:	d511      	bpl.n	80120e2 <_svfiprintf_r+0x36>
 80120be:	690b      	ldr	r3, [r1, #16]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d10e      	bne.n	80120e2 <_svfiprintf_r+0x36>
 80120c4:	2140      	movs	r1, #64	@ 0x40
 80120c6:	f7ff fa1f 	bl	8011508 <_malloc_r>
 80120ca:	6038      	str	r0, [r7, #0]
 80120cc:	6138      	str	r0, [r7, #16]
 80120ce:	2800      	cmp	r0, #0
 80120d0:	d105      	bne.n	80120de <_svfiprintf_r+0x32>
 80120d2:	230c      	movs	r3, #12
 80120d4:	9a03      	ldr	r2, [sp, #12]
 80120d6:	6013      	str	r3, [r2, #0]
 80120d8:	2001      	movs	r0, #1
 80120da:	4240      	negs	r0, r0
 80120dc:	e0cf      	b.n	801227e <_svfiprintf_r+0x1d2>
 80120de:	2340      	movs	r3, #64	@ 0x40
 80120e0:	617b      	str	r3, [r7, #20]
 80120e2:	2300      	movs	r3, #0
 80120e4:	ac08      	add	r4, sp, #32
 80120e6:	6163      	str	r3, [r4, #20]
 80120e8:	3320      	adds	r3, #32
 80120ea:	7663      	strb	r3, [r4, #25]
 80120ec:	3310      	adds	r3, #16
 80120ee:	76a3      	strb	r3, [r4, #26]
 80120f0:	9507      	str	r5, [sp, #28]
 80120f2:	0035      	movs	r5, r6
 80120f4:	782b      	ldrb	r3, [r5, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d001      	beq.n	80120fe <_svfiprintf_r+0x52>
 80120fa:	2b25      	cmp	r3, #37	@ 0x25
 80120fc:	d148      	bne.n	8012190 <_svfiprintf_r+0xe4>
 80120fe:	1bab      	subs	r3, r5, r6
 8012100:	9305      	str	r3, [sp, #20]
 8012102:	42b5      	cmp	r5, r6
 8012104:	d00b      	beq.n	801211e <_svfiprintf_r+0x72>
 8012106:	0032      	movs	r2, r6
 8012108:	0039      	movs	r1, r7
 801210a:	9803      	ldr	r0, [sp, #12]
 801210c:	f7ff ff6e 	bl	8011fec <__ssputs_r>
 8012110:	3001      	adds	r0, #1
 8012112:	d100      	bne.n	8012116 <_svfiprintf_r+0x6a>
 8012114:	e0ae      	b.n	8012274 <_svfiprintf_r+0x1c8>
 8012116:	6963      	ldr	r3, [r4, #20]
 8012118:	9a05      	ldr	r2, [sp, #20]
 801211a:	189b      	adds	r3, r3, r2
 801211c:	6163      	str	r3, [r4, #20]
 801211e:	782b      	ldrb	r3, [r5, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d100      	bne.n	8012126 <_svfiprintf_r+0x7a>
 8012124:	e0a6      	b.n	8012274 <_svfiprintf_r+0x1c8>
 8012126:	2201      	movs	r2, #1
 8012128:	2300      	movs	r3, #0
 801212a:	4252      	negs	r2, r2
 801212c:	6062      	str	r2, [r4, #4]
 801212e:	a904      	add	r1, sp, #16
 8012130:	3254      	adds	r2, #84	@ 0x54
 8012132:	1852      	adds	r2, r2, r1
 8012134:	1c6e      	adds	r6, r5, #1
 8012136:	6023      	str	r3, [r4, #0]
 8012138:	60e3      	str	r3, [r4, #12]
 801213a:	60a3      	str	r3, [r4, #8]
 801213c:	7013      	strb	r3, [r2, #0]
 801213e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012140:	4b54      	ldr	r3, [pc, #336]	@ (8012294 <_svfiprintf_r+0x1e8>)
 8012142:	2205      	movs	r2, #5
 8012144:	0018      	movs	r0, r3
 8012146:	7831      	ldrb	r1, [r6, #0]
 8012148:	9305      	str	r3, [sp, #20]
 801214a:	f7fd ff7c 	bl	8010046 <memchr>
 801214e:	1c75      	adds	r5, r6, #1
 8012150:	2800      	cmp	r0, #0
 8012152:	d11f      	bne.n	8012194 <_svfiprintf_r+0xe8>
 8012154:	6822      	ldr	r2, [r4, #0]
 8012156:	06d3      	lsls	r3, r2, #27
 8012158:	d504      	bpl.n	8012164 <_svfiprintf_r+0xb8>
 801215a:	2353      	movs	r3, #83	@ 0x53
 801215c:	a904      	add	r1, sp, #16
 801215e:	185b      	adds	r3, r3, r1
 8012160:	2120      	movs	r1, #32
 8012162:	7019      	strb	r1, [r3, #0]
 8012164:	0713      	lsls	r3, r2, #28
 8012166:	d504      	bpl.n	8012172 <_svfiprintf_r+0xc6>
 8012168:	2353      	movs	r3, #83	@ 0x53
 801216a:	a904      	add	r1, sp, #16
 801216c:	185b      	adds	r3, r3, r1
 801216e:	212b      	movs	r1, #43	@ 0x2b
 8012170:	7019      	strb	r1, [r3, #0]
 8012172:	7833      	ldrb	r3, [r6, #0]
 8012174:	2b2a      	cmp	r3, #42	@ 0x2a
 8012176:	d016      	beq.n	80121a6 <_svfiprintf_r+0xfa>
 8012178:	0035      	movs	r5, r6
 801217a:	2100      	movs	r1, #0
 801217c:	200a      	movs	r0, #10
 801217e:	68e3      	ldr	r3, [r4, #12]
 8012180:	782a      	ldrb	r2, [r5, #0]
 8012182:	1c6e      	adds	r6, r5, #1
 8012184:	3a30      	subs	r2, #48	@ 0x30
 8012186:	2a09      	cmp	r2, #9
 8012188:	d950      	bls.n	801222c <_svfiprintf_r+0x180>
 801218a:	2900      	cmp	r1, #0
 801218c:	d111      	bne.n	80121b2 <_svfiprintf_r+0x106>
 801218e:	e017      	b.n	80121c0 <_svfiprintf_r+0x114>
 8012190:	3501      	adds	r5, #1
 8012192:	e7af      	b.n	80120f4 <_svfiprintf_r+0x48>
 8012194:	9b05      	ldr	r3, [sp, #20]
 8012196:	6822      	ldr	r2, [r4, #0]
 8012198:	1ac0      	subs	r0, r0, r3
 801219a:	2301      	movs	r3, #1
 801219c:	4083      	lsls	r3, r0
 801219e:	4313      	orrs	r3, r2
 80121a0:	002e      	movs	r6, r5
 80121a2:	6023      	str	r3, [r4, #0]
 80121a4:	e7cc      	b.n	8012140 <_svfiprintf_r+0x94>
 80121a6:	9b07      	ldr	r3, [sp, #28]
 80121a8:	1d19      	adds	r1, r3, #4
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	9107      	str	r1, [sp, #28]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	db01      	blt.n	80121b6 <_svfiprintf_r+0x10a>
 80121b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121b4:	e004      	b.n	80121c0 <_svfiprintf_r+0x114>
 80121b6:	425b      	negs	r3, r3
 80121b8:	60e3      	str	r3, [r4, #12]
 80121ba:	2302      	movs	r3, #2
 80121bc:	4313      	orrs	r3, r2
 80121be:	6023      	str	r3, [r4, #0]
 80121c0:	782b      	ldrb	r3, [r5, #0]
 80121c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80121c4:	d10c      	bne.n	80121e0 <_svfiprintf_r+0x134>
 80121c6:	786b      	ldrb	r3, [r5, #1]
 80121c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80121ca:	d134      	bne.n	8012236 <_svfiprintf_r+0x18a>
 80121cc:	9b07      	ldr	r3, [sp, #28]
 80121ce:	3502      	adds	r5, #2
 80121d0:	1d1a      	adds	r2, r3, #4
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	9207      	str	r2, [sp, #28]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	da01      	bge.n	80121de <_svfiprintf_r+0x132>
 80121da:	2301      	movs	r3, #1
 80121dc:	425b      	negs	r3, r3
 80121de:	9309      	str	r3, [sp, #36]	@ 0x24
 80121e0:	4e2d      	ldr	r6, [pc, #180]	@ (8012298 <_svfiprintf_r+0x1ec>)
 80121e2:	2203      	movs	r2, #3
 80121e4:	0030      	movs	r0, r6
 80121e6:	7829      	ldrb	r1, [r5, #0]
 80121e8:	f7fd ff2d 	bl	8010046 <memchr>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d006      	beq.n	80121fe <_svfiprintf_r+0x152>
 80121f0:	2340      	movs	r3, #64	@ 0x40
 80121f2:	1b80      	subs	r0, r0, r6
 80121f4:	4083      	lsls	r3, r0
 80121f6:	6822      	ldr	r2, [r4, #0]
 80121f8:	3501      	adds	r5, #1
 80121fa:	4313      	orrs	r3, r2
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	7829      	ldrb	r1, [r5, #0]
 8012200:	2206      	movs	r2, #6
 8012202:	4826      	ldr	r0, [pc, #152]	@ (801229c <_svfiprintf_r+0x1f0>)
 8012204:	1c6e      	adds	r6, r5, #1
 8012206:	7621      	strb	r1, [r4, #24]
 8012208:	f7fd ff1d 	bl	8010046 <memchr>
 801220c:	2800      	cmp	r0, #0
 801220e:	d038      	beq.n	8012282 <_svfiprintf_r+0x1d6>
 8012210:	4b23      	ldr	r3, [pc, #140]	@ (80122a0 <_svfiprintf_r+0x1f4>)
 8012212:	2b00      	cmp	r3, #0
 8012214:	d122      	bne.n	801225c <_svfiprintf_r+0x1b0>
 8012216:	2207      	movs	r2, #7
 8012218:	9b07      	ldr	r3, [sp, #28]
 801221a:	3307      	adds	r3, #7
 801221c:	4393      	bics	r3, r2
 801221e:	3308      	adds	r3, #8
 8012220:	9307      	str	r3, [sp, #28]
 8012222:	6963      	ldr	r3, [r4, #20]
 8012224:	9a04      	ldr	r2, [sp, #16]
 8012226:	189b      	adds	r3, r3, r2
 8012228:	6163      	str	r3, [r4, #20]
 801222a:	e762      	b.n	80120f2 <_svfiprintf_r+0x46>
 801222c:	4343      	muls	r3, r0
 801222e:	0035      	movs	r5, r6
 8012230:	2101      	movs	r1, #1
 8012232:	189b      	adds	r3, r3, r2
 8012234:	e7a4      	b.n	8012180 <_svfiprintf_r+0xd4>
 8012236:	2300      	movs	r3, #0
 8012238:	200a      	movs	r0, #10
 801223a:	0019      	movs	r1, r3
 801223c:	3501      	adds	r5, #1
 801223e:	6063      	str	r3, [r4, #4]
 8012240:	782a      	ldrb	r2, [r5, #0]
 8012242:	1c6e      	adds	r6, r5, #1
 8012244:	3a30      	subs	r2, #48	@ 0x30
 8012246:	2a09      	cmp	r2, #9
 8012248:	d903      	bls.n	8012252 <_svfiprintf_r+0x1a6>
 801224a:	2b00      	cmp	r3, #0
 801224c:	d0c8      	beq.n	80121e0 <_svfiprintf_r+0x134>
 801224e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012250:	e7c6      	b.n	80121e0 <_svfiprintf_r+0x134>
 8012252:	4341      	muls	r1, r0
 8012254:	0035      	movs	r5, r6
 8012256:	2301      	movs	r3, #1
 8012258:	1889      	adds	r1, r1, r2
 801225a:	e7f1      	b.n	8012240 <_svfiprintf_r+0x194>
 801225c:	aa07      	add	r2, sp, #28
 801225e:	9200      	str	r2, [sp, #0]
 8012260:	0021      	movs	r1, r4
 8012262:	003a      	movs	r2, r7
 8012264:	4b0f      	ldr	r3, [pc, #60]	@ (80122a4 <_svfiprintf_r+0x1f8>)
 8012266:	9803      	ldr	r0, [sp, #12]
 8012268:	f7fd f954 	bl	800f514 <_printf_float>
 801226c:	9004      	str	r0, [sp, #16]
 801226e:	9b04      	ldr	r3, [sp, #16]
 8012270:	3301      	adds	r3, #1
 8012272:	d1d6      	bne.n	8012222 <_svfiprintf_r+0x176>
 8012274:	89bb      	ldrh	r3, [r7, #12]
 8012276:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012278:	065b      	lsls	r3, r3, #25
 801227a:	d500      	bpl.n	801227e <_svfiprintf_r+0x1d2>
 801227c:	e72c      	b.n	80120d8 <_svfiprintf_r+0x2c>
 801227e:	b021      	add	sp, #132	@ 0x84
 8012280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012282:	aa07      	add	r2, sp, #28
 8012284:	9200      	str	r2, [sp, #0]
 8012286:	0021      	movs	r1, r4
 8012288:	003a      	movs	r2, r7
 801228a:	4b06      	ldr	r3, [pc, #24]	@ (80122a4 <_svfiprintf_r+0x1f8>)
 801228c:	9803      	ldr	r0, [sp, #12]
 801228e:	f7fd fbef 	bl	800fa70 <_printf_i>
 8012292:	e7eb      	b.n	801226c <_svfiprintf_r+0x1c0>
 8012294:	08012f04 	.word	0x08012f04
 8012298:	08012f0a 	.word	0x08012f0a
 801229c:	08012f0e 	.word	0x08012f0e
 80122a0:	0800f515 	.word	0x0800f515
 80122a4:	08011fed 	.word	0x08011fed

080122a8 <__sflush_r>:
 80122a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122aa:	220c      	movs	r2, #12
 80122ac:	5e8b      	ldrsh	r3, [r1, r2]
 80122ae:	0005      	movs	r5, r0
 80122b0:	000c      	movs	r4, r1
 80122b2:	071a      	lsls	r2, r3, #28
 80122b4:	d456      	bmi.n	8012364 <__sflush_r+0xbc>
 80122b6:	684a      	ldr	r2, [r1, #4]
 80122b8:	2a00      	cmp	r2, #0
 80122ba:	dc02      	bgt.n	80122c2 <__sflush_r+0x1a>
 80122bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80122be:	2a00      	cmp	r2, #0
 80122c0:	dd4e      	ble.n	8012360 <__sflush_r+0xb8>
 80122c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80122c4:	2f00      	cmp	r7, #0
 80122c6:	d04b      	beq.n	8012360 <__sflush_r+0xb8>
 80122c8:	2200      	movs	r2, #0
 80122ca:	2080      	movs	r0, #128	@ 0x80
 80122cc:	682e      	ldr	r6, [r5, #0]
 80122ce:	602a      	str	r2, [r5, #0]
 80122d0:	001a      	movs	r2, r3
 80122d2:	0140      	lsls	r0, r0, #5
 80122d4:	6a21      	ldr	r1, [r4, #32]
 80122d6:	4002      	ands	r2, r0
 80122d8:	4203      	tst	r3, r0
 80122da:	d033      	beq.n	8012344 <__sflush_r+0x9c>
 80122dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80122de:	89a3      	ldrh	r3, [r4, #12]
 80122e0:	075b      	lsls	r3, r3, #29
 80122e2:	d506      	bpl.n	80122f2 <__sflush_r+0x4a>
 80122e4:	6863      	ldr	r3, [r4, #4]
 80122e6:	1ad2      	subs	r2, r2, r3
 80122e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d001      	beq.n	80122f2 <__sflush_r+0x4a>
 80122ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80122f0:	1ad2      	subs	r2, r2, r3
 80122f2:	2300      	movs	r3, #0
 80122f4:	0028      	movs	r0, r5
 80122f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80122f8:	6a21      	ldr	r1, [r4, #32]
 80122fa:	47b8      	blx	r7
 80122fc:	89a2      	ldrh	r2, [r4, #12]
 80122fe:	1c43      	adds	r3, r0, #1
 8012300:	d106      	bne.n	8012310 <__sflush_r+0x68>
 8012302:	6829      	ldr	r1, [r5, #0]
 8012304:	291d      	cmp	r1, #29
 8012306:	d846      	bhi.n	8012396 <__sflush_r+0xee>
 8012308:	4b29      	ldr	r3, [pc, #164]	@ (80123b0 <__sflush_r+0x108>)
 801230a:	40cb      	lsrs	r3, r1
 801230c:	07db      	lsls	r3, r3, #31
 801230e:	d542      	bpl.n	8012396 <__sflush_r+0xee>
 8012310:	2300      	movs	r3, #0
 8012312:	6063      	str	r3, [r4, #4]
 8012314:	6923      	ldr	r3, [r4, #16]
 8012316:	6023      	str	r3, [r4, #0]
 8012318:	04d2      	lsls	r2, r2, #19
 801231a:	d505      	bpl.n	8012328 <__sflush_r+0x80>
 801231c:	1c43      	adds	r3, r0, #1
 801231e:	d102      	bne.n	8012326 <__sflush_r+0x7e>
 8012320:	682b      	ldr	r3, [r5, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d100      	bne.n	8012328 <__sflush_r+0x80>
 8012326:	6560      	str	r0, [r4, #84]	@ 0x54
 8012328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801232a:	602e      	str	r6, [r5, #0]
 801232c:	2900      	cmp	r1, #0
 801232e:	d017      	beq.n	8012360 <__sflush_r+0xb8>
 8012330:	0023      	movs	r3, r4
 8012332:	3344      	adds	r3, #68	@ 0x44
 8012334:	4299      	cmp	r1, r3
 8012336:	d002      	beq.n	801233e <__sflush_r+0x96>
 8012338:	0028      	movs	r0, r5
 801233a:	f7fe fd15 	bl	8010d68 <_free_r>
 801233e:	2300      	movs	r3, #0
 8012340:	6363      	str	r3, [r4, #52]	@ 0x34
 8012342:	e00d      	b.n	8012360 <__sflush_r+0xb8>
 8012344:	2301      	movs	r3, #1
 8012346:	0028      	movs	r0, r5
 8012348:	47b8      	blx	r7
 801234a:	0002      	movs	r2, r0
 801234c:	1c43      	adds	r3, r0, #1
 801234e:	d1c6      	bne.n	80122de <__sflush_r+0x36>
 8012350:	682b      	ldr	r3, [r5, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d0c3      	beq.n	80122de <__sflush_r+0x36>
 8012356:	2b1d      	cmp	r3, #29
 8012358:	d001      	beq.n	801235e <__sflush_r+0xb6>
 801235a:	2b16      	cmp	r3, #22
 801235c:	d11a      	bne.n	8012394 <__sflush_r+0xec>
 801235e:	602e      	str	r6, [r5, #0]
 8012360:	2000      	movs	r0, #0
 8012362:	e01e      	b.n	80123a2 <__sflush_r+0xfa>
 8012364:	690e      	ldr	r6, [r1, #16]
 8012366:	2e00      	cmp	r6, #0
 8012368:	d0fa      	beq.n	8012360 <__sflush_r+0xb8>
 801236a:	680f      	ldr	r7, [r1, #0]
 801236c:	600e      	str	r6, [r1, #0]
 801236e:	1bba      	subs	r2, r7, r6
 8012370:	9201      	str	r2, [sp, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	079b      	lsls	r3, r3, #30
 8012376:	d100      	bne.n	801237a <__sflush_r+0xd2>
 8012378:	694a      	ldr	r2, [r1, #20]
 801237a:	60a2      	str	r2, [r4, #8]
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	ddee      	ble.n	8012360 <__sflush_r+0xb8>
 8012382:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012384:	0032      	movs	r2, r6
 8012386:	001f      	movs	r7, r3
 8012388:	0028      	movs	r0, r5
 801238a:	9b01      	ldr	r3, [sp, #4]
 801238c:	6a21      	ldr	r1, [r4, #32]
 801238e:	47b8      	blx	r7
 8012390:	2800      	cmp	r0, #0
 8012392:	dc07      	bgt.n	80123a4 <__sflush_r+0xfc>
 8012394:	89a2      	ldrh	r2, [r4, #12]
 8012396:	2340      	movs	r3, #64	@ 0x40
 8012398:	2001      	movs	r0, #1
 801239a:	4313      	orrs	r3, r2
 801239c:	b21b      	sxth	r3, r3
 801239e:	81a3      	strh	r3, [r4, #12]
 80123a0:	4240      	negs	r0, r0
 80123a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123a4:	9b01      	ldr	r3, [sp, #4]
 80123a6:	1836      	adds	r6, r6, r0
 80123a8:	1a1b      	subs	r3, r3, r0
 80123aa:	9301      	str	r3, [sp, #4]
 80123ac:	e7e6      	b.n	801237c <__sflush_r+0xd4>
 80123ae:	46c0      	nop			@ (mov r8, r8)
 80123b0:	20400001 	.word	0x20400001

080123b4 <_fflush_r>:
 80123b4:	690b      	ldr	r3, [r1, #16]
 80123b6:	b570      	push	{r4, r5, r6, lr}
 80123b8:	0005      	movs	r5, r0
 80123ba:	000c      	movs	r4, r1
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d102      	bne.n	80123c6 <_fflush_r+0x12>
 80123c0:	2500      	movs	r5, #0
 80123c2:	0028      	movs	r0, r5
 80123c4:	bd70      	pop	{r4, r5, r6, pc}
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d004      	beq.n	80123d4 <_fflush_r+0x20>
 80123ca:	6a03      	ldr	r3, [r0, #32]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d101      	bne.n	80123d4 <_fflush_r+0x20>
 80123d0:	f7fd fcea 	bl	800fda8 <__sinit>
 80123d4:	220c      	movs	r2, #12
 80123d6:	5ea3      	ldrsh	r3, [r4, r2]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d0f1      	beq.n	80123c0 <_fflush_r+0xc>
 80123dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80123de:	07d2      	lsls	r2, r2, #31
 80123e0:	d404      	bmi.n	80123ec <_fflush_r+0x38>
 80123e2:	059b      	lsls	r3, r3, #22
 80123e4:	d402      	bmi.n	80123ec <_fflush_r+0x38>
 80123e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123e8:	f7fd fe2b 	bl	8010042 <__retarget_lock_acquire_recursive>
 80123ec:	0028      	movs	r0, r5
 80123ee:	0021      	movs	r1, r4
 80123f0:	f7ff ff5a 	bl	80122a8 <__sflush_r>
 80123f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123f6:	0005      	movs	r5, r0
 80123f8:	07db      	lsls	r3, r3, #31
 80123fa:	d4e2      	bmi.n	80123c2 <_fflush_r+0xe>
 80123fc:	89a3      	ldrh	r3, [r4, #12]
 80123fe:	059b      	lsls	r3, r3, #22
 8012400:	d4df      	bmi.n	80123c2 <_fflush_r+0xe>
 8012402:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012404:	f7fd fe1e 	bl	8010044 <__retarget_lock_release_recursive>
 8012408:	e7db      	b.n	80123c2 <_fflush_r+0xe>

0801240a <memmove>:
 801240a:	b510      	push	{r4, lr}
 801240c:	4288      	cmp	r0, r1
 801240e:	d902      	bls.n	8012416 <memmove+0xc>
 8012410:	188b      	adds	r3, r1, r2
 8012412:	4298      	cmp	r0, r3
 8012414:	d308      	bcc.n	8012428 <memmove+0x1e>
 8012416:	2300      	movs	r3, #0
 8012418:	429a      	cmp	r2, r3
 801241a:	d007      	beq.n	801242c <memmove+0x22>
 801241c:	5ccc      	ldrb	r4, [r1, r3]
 801241e:	54c4      	strb	r4, [r0, r3]
 8012420:	3301      	adds	r3, #1
 8012422:	e7f9      	b.n	8012418 <memmove+0xe>
 8012424:	5c8b      	ldrb	r3, [r1, r2]
 8012426:	5483      	strb	r3, [r0, r2]
 8012428:	3a01      	subs	r2, #1
 801242a:	d2fb      	bcs.n	8012424 <memmove+0x1a>
 801242c:	bd10      	pop	{r4, pc}
	...

08012430 <_sbrk_r>:
 8012430:	2300      	movs	r3, #0
 8012432:	b570      	push	{r4, r5, r6, lr}
 8012434:	4d06      	ldr	r5, [pc, #24]	@ (8012450 <_sbrk_r+0x20>)
 8012436:	0004      	movs	r4, r0
 8012438:	0008      	movs	r0, r1
 801243a:	602b      	str	r3, [r5, #0]
 801243c:	f7f1 fe4e 	bl	80040dc <_sbrk>
 8012440:	1c43      	adds	r3, r0, #1
 8012442:	d103      	bne.n	801244c <_sbrk_r+0x1c>
 8012444:	682b      	ldr	r3, [r5, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d000      	beq.n	801244c <_sbrk_r+0x1c>
 801244a:	6023      	str	r3, [r4, #0]
 801244c:	bd70      	pop	{r4, r5, r6, pc}
 801244e:	46c0      	nop			@ (mov r8, r8)
 8012450:	20002298 	.word	0x20002298

08012454 <__assert_func>:
 8012454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012456:	0014      	movs	r4, r2
 8012458:	001a      	movs	r2, r3
 801245a:	4b09      	ldr	r3, [pc, #36]	@ (8012480 <__assert_func+0x2c>)
 801245c:	0005      	movs	r5, r0
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	000e      	movs	r6, r1
 8012462:	68d8      	ldr	r0, [r3, #12]
 8012464:	4b07      	ldr	r3, [pc, #28]	@ (8012484 <__assert_func+0x30>)
 8012466:	2c00      	cmp	r4, #0
 8012468:	d101      	bne.n	801246e <__assert_func+0x1a>
 801246a:	4b07      	ldr	r3, [pc, #28]	@ (8012488 <__assert_func+0x34>)
 801246c:	001c      	movs	r4, r3
 801246e:	4907      	ldr	r1, [pc, #28]	@ (801248c <__assert_func+0x38>)
 8012470:	9301      	str	r3, [sp, #4]
 8012472:	9402      	str	r4, [sp, #8]
 8012474:	002b      	movs	r3, r5
 8012476:	9600      	str	r6, [sp, #0]
 8012478:	f000 f868 	bl	801254c <fiprintf>
 801247c:	f000 f876 	bl	801256c <abort>
 8012480:	20000308 	.word	0x20000308
 8012484:	08012f15 	.word	0x08012f15
 8012488:	08012f50 	.word	0x08012f50
 801248c:	08012f22 	.word	0x08012f22

08012490 <_calloc_r>:
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	0c0b      	lsrs	r3, r1, #16
 8012494:	0c15      	lsrs	r5, r2, #16
 8012496:	2b00      	cmp	r3, #0
 8012498:	d11e      	bne.n	80124d8 <_calloc_r+0x48>
 801249a:	2d00      	cmp	r5, #0
 801249c:	d10c      	bne.n	80124b8 <_calloc_r+0x28>
 801249e:	b289      	uxth	r1, r1
 80124a0:	b294      	uxth	r4, r2
 80124a2:	434c      	muls	r4, r1
 80124a4:	0021      	movs	r1, r4
 80124a6:	f7ff f82f 	bl	8011508 <_malloc_r>
 80124aa:	1e05      	subs	r5, r0, #0
 80124ac:	d01b      	beq.n	80124e6 <_calloc_r+0x56>
 80124ae:	0022      	movs	r2, r4
 80124b0:	2100      	movs	r1, #0
 80124b2:	f7fd fd2f 	bl	800ff14 <memset>
 80124b6:	e016      	b.n	80124e6 <_calloc_r+0x56>
 80124b8:	1c2b      	adds	r3, r5, #0
 80124ba:	1c0c      	adds	r4, r1, #0
 80124bc:	b289      	uxth	r1, r1
 80124be:	b292      	uxth	r2, r2
 80124c0:	434a      	muls	r2, r1
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	b2a1      	uxth	r1, r4
 80124c6:	4359      	muls	r1, r3
 80124c8:	0c14      	lsrs	r4, r2, #16
 80124ca:	190c      	adds	r4, r1, r4
 80124cc:	0c23      	lsrs	r3, r4, #16
 80124ce:	d107      	bne.n	80124e0 <_calloc_r+0x50>
 80124d0:	0424      	lsls	r4, r4, #16
 80124d2:	b292      	uxth	r2, r2
 80124d4:	4314      	orrs	r4, r2
 80124d6:	e7e5      	b.n	80124a4 <_calloc_r+0x14>
 80124d8:	2d00      	cmp	r5, #0
 80124da:	d101      	bne.n	80124e0 <_calloc_r+0x50>
 80124dc:	1c14      	adds	r4, r2, #0
 80124de:	e7ed      	b.n	80124bc <_calloc_r+0x2c>
 80124e0:	230c      	movs	r3, #12
 80124e2:	2500      	movs	r5, #0
 80124e4:	6003      	str	r3, [r0, #0]
 80124e6:	0028      	movs	r0, r5
 80124e8:	bd70      	pop	{r4, r5, r6, pc}

080124ea <_realloc_r>:
 80124ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124ec:	0006      	movs	r6, r0
 80124ee:	000c      	movs	r4, r1
 80124f0:	0015      	movs	r5, r2
 80124f2:	2900      	cmp	r1, #0
 80124f4:	d105      	bne.n	8012502 <_realloc_r+0x18>
 80124f6:	0011      	movs	r1, r2
 80124f8:	f7ff f806 	bl	8011508 <_malloc_r>
 80124fc:	0004      	movs	r4, r0
 80124fe:	0020      	movs	r0, r4
 8012500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012502:	2a00      	cmp	r2, #0
 8012504:	d103      	bne.n	801250e <_realloc_r+0x24>
 8012506:	f7fe fc2f 	bl	8010d68 <_free_r>
 801250a:	002c      	movs	r4, r5
 801250c:	e7f7      	b.n	80124fe <_realloc_r+0x14>
 801250e:	f000 f834 	bl	801257a <_malloc_usable_size_r>
 8012512:	0007      	movs	r7, r0
 8012514:	4285      	cmp	r5, r0
 8012516:	d802      	bhi.n	801251e <_realloc_r+0x34>
 8012518:	0843      	lsrs	r3, r0, #1
 801251a:	42ab      	cmp	r3, r5
 801251c:	d3ef      	bcc.n	80124fe <_realloc_r+0x14>
 801251e:	0029      	movs	r1, r5
 8012520:	0030      	movs	r0, r6
 8012522:	f7fe fff1 	bl	8011508 <_malloc_r>
 8012526:	9001      	str	r0, [sp, #4]
 8012528:	2800      	cmp	r0, #0
 801252a:	d101      	bne.n	8012530 <_realloc_r+0x46>
 801252c:	9c01      	ldr	r4, [sp, #4]
 801252e:	e7e6      	b.n	80124fe <_realloc_r+0x14>
 8012530:	002a      	movs	r2, r5
 8012532:	42bd      	cmp	r5, r7
 8012534:	d900      	bls.n	8012538 <_realloc_r+0x4e>
 8012536:	003a      	movs	r2, r7
 8012538:	0021      	movs	r1, r4
 801253a:	9801      	ldr	r0, [sp, #4]
 801253c:	f7fd fd8e 	bl	801005c <memcpy>
 8012540:	0021      	movs	r1, r4
 8012542:	0030      	movs	r0, r6
 8012544:	f7fe fc10 	bl	8010d68 <_free_r>
 8012548:	e7f0      	b.n	801252c <_realloc_r+0x42>
	...

0801254c <fiprintf>:
 801254c:	b40e      	push	{r1, r2, r3}
 801254e:	b517      	push	{r0, r1, r2, r4, lr}
 8012550:	4c05      	ldr	r4, [pc, #20]	@ (8012568 <fiprintf+0x1c>)
 8012552:	ab05      	add	r3, sp, #20
 8012554:	cb04      	ldmia	r3!, {r2}
 8012556:	0001      	movs	r1, r0
 8012558:	6820      	ldr	r0, [r4, #0]
 801255a:	9301      	str	r3, [sp, #4]
 801255c:	f000 f83c 	bl	80125d8 <_vfiprintf_r>
 8012560:	bc1e      	pop	{r1, r2, r3, r4}
 8012562:	bc08      	pop	{r3}
 8012564:	b003      	add	sp, #12
 8012566:	4718      	bx	r3
 8012568:	20000308 	.word	0x20000308

0801256c <abort>:
 801256c:	2006      	movs	r0, #6
 801256e:	b510      	push	{r4, lr}
 8012570:	f000 fa18 	bl	80129a4 <raise>
 8012574:	2001      	movs	r0, #1
 8012576:	f7f1 fd3f 	bl	8003ff8 <_exit>

0801257a <_malloc_usable_size_r>:
 801257a:	1f0b      	subs	r3, r1, #4
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	1f18      	subs	r0, r3, #4
 8012580:	2b00      	cmp	r3, #0
 8012582:	da01      	bge.n	8012588 <_malloc_usable_size_r+0xe>
 8012584:	580b      	ldr	r3, [r1, r0]
 8012586:	18c0      	adds	r0, r0, r3
 8012588:	4770      	bx	lr

0801258a <__sfputc_r>:
 801258a:	6893      	ldr	r3, [r2, #8]
 801258c:	b510      	push	{r4, lr}
 801258e:	3b01      	subs	r3, #1
 8012590:	6093      	str	r3, [r2, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	da04      	bge.n	80125a0 <__sfputc_r+0x16>
 8012596:	6994      	ldr	r4, [r2, #24]
 8012598:	42a3      	cmp	r3, r4
 801259a:	db07      	blt.n	80125ac <__sfputc_r+0x22>
 801259c:	290a      	cmp	r1, #10
 801259e:	d005      	beq.n	80125ac <__sfputc_r+0x22>
 80125a0:	6813      	ldr	r3, [r2, #0]
 80125a2:	1c58      	adds	r0, r3, #1
 80125a4:	6010      	str	r0, [r2, #0]
 80125a6:	7019      	strb	r1, [r3, #0]
 80125a8:	0008      	movs	r0, r1
 80125aa:	bd10      	pop	{r4, pc}
 80125ac:	f000 f930 	bl	8012810 <__swbuf_r>
 80125b0:	0001      	movs	r1, r0
 80125b2:	e7f9      	b.n	80125a8 <__sfputc_r+0x1e>

080125b4 <__sfputs_r>:
 80125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b6:	0006      	movs	r6, r0
 80125b8:	000f      	movs	r7, r1
 80125ba:	0014      	movs	r4, r2
 80125bc:	18d5      	adds	r5, r2, r3
 80125be:	42ac      	cmp	r4, r5
 80125c0:	d101      	bne.n	80125c6 <__sfputs_r+0x12>
 80125c2:	2000      	movs	r0, #0
 80125c4:	e007      	b.n	80125d6 <__sfputs_r+0x22>
 80125c6:	7821      	ldrb	r1, [r4, #0]
 80125c8:	003a      	movs	r2, r7
 80125ca:	0030      	movs	r0, r6
 80125cc:	f7ff ffdd 	bl	801258a <__sfputc_r>
 80125d0:	3401      	adds	r4, #1
 80125d2:	1c43      	adds	r3, r0, #1
 80125d4:	d1f3      	bne.n	80125be <__sfputs_r+0xa>
 80125d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080125d8 <_vfiprintf_r>:
 80125d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125da:	b0a1      	sub	sp, #132	@ 0x84
 80125dc:	000f      	movs	r7, r1
 80125de:	0015      	movs	r5, r2
 80125e0:	001e      	movs	r6, r3
 80125e2:	9003      	str	r0, [sp, #12]
 80125e4:	2800      	cmp	r0, #0
 80125e6:	d004      	beq.n	80125f2 <_vfiprintf_r+0x1a>
 80125e8:	6a03      	ldr	r3, [r0, #32]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d101      	bne.n	80125f2 <_vfiprintf_r+0x1a>
 80125ee:	f7fd fbdb 	bl	800fda8 <__sinit>
 80125f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125f4:	07db      	lsls	r3, r3, #31
 80125f6:	d405      	bmi.n	8012604 <_vfiprintf_r+0x2c>
 80125f8:	89bb      	ldrh	r3, [r7, #12]
 80125fa:	059b      	lsls	r3, r3, #22
 80125fc:	d402      	bmi.n	8012604 <_vfiprintf_r+0x2c>
 80125fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012600:	f7fd fd1f 	bl	8010042 <__retarget_lock_acquire_recursive>
 8012604:	89bb      	ldrh	r3, [r7, #12]
 8012606:	071b      	lsls	r3, r3, #28
 8012608:	d502      	bpl.n	8012610 <_vfiprintf_r+0x38>
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d113      	bne.n	8012638 <_vfiprintf_r+0x60>
 8012610:	0039      	movs	r1, r7
 8012612:	9803      	ldr	r0, [sp, #12]
 8012614:	f000 f93e 	bl	8012894 <__swsetup_r>
 8012618:	2800      	cmp	r0, #0
 801261a:	d00d      	beq.n	8012638 <_vfiprintf_r+0x60>
 801261c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801261e:	07db      	lsls	r3, r3, #31
 8012620:	d503      	bpl.n	801262a <_vfiprintf_r+0x52>
 8012622:	2001      	movs	r0, #1
 8012624:	4240      	negs	r0, r0
 8012626:	b021      	add	sp, #132	@ 0x84
 8012628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801262a:	89bb      	ldrh	r3, [r7, #12]
 801262c:	059b      	lsls	r3, r3, #22
 801262e:	d4f8      	bmi.n	8012622 <_vfiprintf_r+0x4a>
 8012630:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012632:	f7fd fd07 	bl	8010044 <__retarget_lock_release_recursive>
 8012636:	e7f4      	b.n	8012622 <_vfiprintf_r+0x4a>
 8012638:	2300      	movs	r3, #0
 801263a:	ac08      	add	r4, sp, #32
 801263c:	6163      	str	r3, [r4, #20]
 801263e:	3320      	adds	r3, #32
 8012640:	7663      	strb	r3, [r4, #25]
 8012642:	3310      	adds	r3, #16
 8012644:	76a3      	strb	r3, [r4, #26]
 8012646:	9607      	str	r6, [sp, #28]
 8012648:	002e      	movs	r6, r5
 801264a:	7833      	ldrb	r3, [r6, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d001      	beq.n	8012654 <_vfiprintf_r+0x7c>
 8012650:	2b25      	cmp	r3, #37	@ 0x25
 8012652:	d148      	bne.n	80126e6 <_vfiprintf_r+0x10e>
 8012654:	1b73      	subs	r3, r6, r5
 8012656:	9305      	str	r3, [sp, #20]
 8012658:	42ae      	cmp	r6, r5
 801265a:	d00b      	beq.n	8012674 <_vfiprintf_r+0x9c>
 801265c:	002a      	movs	r2, r5
 801265e:	0039      	movs	r1, r7
 8012660:	9803      	ldr	r0, [sp, #12]
 8012662:	f7ff ffa7 	bl	80125b4 <__sfputs_r>
 8012666:	3001      	adds	r0, #1
 8012668:	d100      	bne.n	801266c <_vfiprintf_r+0x94>
 801266a:	e0ae      	b.n	80127ca <_vfiprintf_r+0x1f2>
 801266c:	6963      	ldr	r3, [r4, #20]
 801266e:	9a05      	ldr	r2, [sp, #20]
 8012670:	189b      	adds	r3, r3, r2
 8012672:	6163      	str	r3, [r4, #20]
 8012674:	7833      	ldrb	r3, [r6, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d100      	bne.n	801267c <_vfiprintf_r+0xa4>
 801267a:	e0a6      	b.n	80127ca <_vfiprintf_r+0x1f2>
 801267c:	2201      	movs	r2, #1
 801267e:	2300      	movs	r3, #0
 8012680:	4252      	negs	r2, r2
 8012682:	6062      	str	r2, [r4, #4]
 8012684:	a904      	add	r1, sp, #16
 8012686:	3254      	adds	r2, #84	@ 0x54
 8012688:	1852      	adds	r2, r2, r1
 801268a:	1c75      	adds	r5, r6, #1
 801268c:	6023      	str	r3, [r4, #0]
 801268e:	60e3      	str	r3, [r4, #12]
 8012690:	60a3      	str	r3, [r4, #8]
 8012692:	7013      	strb	r3, [r2, #0]
 8012694:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012696:	4b59      	ldr	r3, [pc, #356]	@ (80127fc <_vfiprintf_r+0x224>)
 8012698:	2205      	movs	r2, #5
 801269a:	0018      	movs	r0, r3
 801269c:	7829      	ldrb	r1, [r5, #0]
 801269e:	9305      	str	r3, [sp, #20]
 80126a0:	f7fd fcd1 	bl	8010046 <memchr>
 80126a4:	1c6e      	adds	r6, r5, #1
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d11f      	bne.n	80126ea <_vfiprintf_r+0x112>
 80126aa:	6822      	ldr	r2, [r4, #0]
 80126ac:	06d3      	lsls	r3, r2, #27
 80126ae:	d504      	bpl.n	80126ba <_vfiprintf_r+0xe2>
 80126b0:	2353      	movs	r3, #83	@ 0x53
 80126b2:	a904      	add	r1, sp, #16
 80126b4:	185b      	adds	r3, r3, r1
 80126b6:	2120      	movs	r1, #32
 80126b8:	7019      	strb	r1, [r3, #0]
 80126ba:	0713      	lsls	r3, r2, #28
 80126bc:	d504      	bpl.n	80126c8 <_vfiprintf_r+0xf0>
 80126be:	2353      	movs	r3, #83	@ 0x53
 80126c0:	a904      	add	r1, sp, #16
 80126c2:	185b      	adds	r3, r3, r1
 80126c4:	212b      	movs	r1, #43	@ 0x2b
 80126c6:	7019      	strb	r1, [r3, #0]
 80126c8:	782b      	ldrb	r3, [r5, #0]
 80126ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80126cc:	d016      	beq.n	80126fc <_vfiprintf_r+0x124>
 80126ce:	002e      	movs	r6, r5
 80126d0:	2100      	movs	r1, #0
 80126d2:	200a      	movs	r0, #10
 80126d4:	68e3      	ldr	r3, [r4, #12]
 80126d6:	7832      	ldrb	r2, [r6, #0]
 80126d8:	1c75      	adds	r5, r6, #1
 80126da:	3a30      	subs	r2, #48	@ 0x30
 80126dc:	2a09      	cmp	r2, #9
 80126de:	d950      	bls.n	8012782 <_vfiprintf_r+0x1aa>
 80126e0:	2900      	cmp	r1, #0
 80126e2:	d111      	bne.n	8012708 <_vfiprintf_r+0x130>
 80126e4:	e017      	b.n	8012716 <_vfiprintf_r+0x13e>
 80126e6:	3601      	adds	r6, #1
 80126e8:	e7af      	b.n	801264a <_vfiprintf_r+0x72>
 80126ea:	9b05      	ldr	r3, [sp, #20]
 80126ec:	6822      	ldr	r2, [r4, #0]
 80126ee:	1ac0      	subs	r0, r0, r3
 80126f0:	2301      	movs	r3, #1
 80126f2:	4083      	lsls	r3, r0
 80126f4:	4313      	orrs	r3, r2
 80126f6:	0035      	movs	r5, r6
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	e7cc      	b.n	8012696 <_vfiprintf_r+0xbe>
 80126fc:	9b07      	ldr	r3, [sp, #28]
 80126fe:	1d19      	adds	r1, r3, #4
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	9107      	str	r1, [sp, #28]
 8012704:	2b00      	cmp	r3, #0
 8012706:	db01      	blt.n	801270c <_vfiprintf_r+0x134>
 8012708:	930b      	str	r3, [sp, #44]	@ 0x2c
 801270a:	e004      	b.n	8012716 <_vfiprintf_r+0x13e>
 801270c:	425b      	negs	r3, r3
 801270e:	60e3      	str	r3, [r4, #12]
 8012710:	2302      	movs	r3, #2
 8012712:	4313      	orrs	r3, r2
 8012714:	6023      	str	r3, [r4, #0]
 8012716:	7833      	ldrb	r3, [r6, #0]
 8012718:	2b2e      	cmp	r3, #46	@ 0x2e
 801271a:	d10c      	bne.n	8012736 <_vfiprintf_r+0x15e>
 801271c:	7873      	ldrb	r3, [r6, #1]
 801271e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012720:	d134      	bne.n	801278c <_vfiprintf_r+0x1b4>
 8012722:	9b07      	ldr	r3, [sp, #28]
 8012724:	3602      	adds	r6, #2
 8012726:	1d1a      	adds	r2, r3, #4
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	9207      	str	r2, [sp, #28]
 801272c:	2b00      	cmp	r3, #0
 801272e:	da01      	bge.n	8012734 <_vfiprintf_r+0x15c>
 8012730:	2301      	movs	r3, #1
 8012732:	425b      	negs	r3, r3
 8012734:	9309      	str	r3, [sp, #36]	@ 0x24
 8012736:	4d32      	ldr	r5, [pc, #200]	@ (8012800 <_vfiprintf_r+0x228>)
 8012738:	2203      	movs	r2, #3
 801273a:	0028      	movs	r0, r5
 801273c:	7831      	ldrb	r1, [r6, #0]
 801273e:	f7fd fc82 	bl	8010046 <memchr>
 8012742:	2800      	cmp	r0, #0
 8012744:	d006      	beq.n	8012754 <_vfiprintf_r+0x17c>
 8012746:	2340      	movs	r3, #64	@ 0x40
 8012748:	1b40      	subs	r0, r0, r5
 801274a:	4083      	lsls	r3, r0
 801274c:	6822      	ldr	r2, [r4, #0]
 801274e:	3601      	adds	r6, #1
 8012750:	4313      	orrs	r3, r2
 8012752:	6023      	str	r3, [r4, #0]
 8012754:	7831      	ldrb	r1, [r6, #0]
 8012756:	2206      	movs	r2, #6
 8012758:	482a      	ldr	r0, [pc, #168]	@ (8012804 <_vfiprintf_r+0x22c>)
 801275a:	1c75      	adds	r5, r6, #1
 801275c:	7621      	strb	r1, [r4, #24]
 801275e:	f7fd fc72 	bl	8010046 <memchr>
 8012762:	2800      	cmp	r0, #0
 8012764:	d040      	beq.n	80127e8 <_vfiprintf_r+0x210>
 8012766:	4b28      	ldr	r3, [pc, #160]	@ (8012808 <_vfiprintf_r+0x230>)
 8012768:	2b00      	cmp	r3, #0
 801276a:	d122      	bne.n	80127b2 <_vfiprintf_r+0x1da>
 801276c:	2207      	movs	r2, #7
 801276e:	9b07      	ldr	r3, [sp, #28]
 8012770:	3307      	adds	r3, #7
 8012772:	4393      	bics	r3, r2
 8012774:	3308      	adds	r3, #8
 8012776:	9307      	str	r3, [sp, #28]
 8012778:	6963      	ldr	r3, [r4, #20]
 801277a:	9a04      	ldr	r2, [sp, #16]
 801277c:	189b      	adds	r3, r3, r2
 801277e:	6163      	str	r3, [r4, #20]
 8012780:	e762      	b.n	8012648 <_vfiprintf_r+0x70>
 8012782:	4343      	muls	r3, r0
 8012784:	002e      	movs	r6, r5
 8012786:	2101      	movs	r1, #1
 8012788:	189b      	adds	r3, r3, r2
 801278a:	e7a4      	b.n	80126d6 <_vfiprintf_r+0xfe>
 801278c:	2300      	movs	r3, #0
 801278e:	200a      	movs	r0, #10
 8012790:	0019      	movs	r1, r3
 8012792:	3601      	adds	r6, #1
 8012794:	6063      	str	r3, [r4, #4]
 8012796:	7832      	ldrb	r2, [r6, #0]
 8012798:	1c75      	adds	r5, r6, #1
 801279a:	3a30      	subs	r2, #48	@ 0x30
 801279c:	2a09      	cmp	r2, #9
 801279e:	d903      	bls.n	80127a8 <_vfiprintf_r+0x1d0>
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d0c8      	beq.n	8012736 <_vfiprintf_r+0x15e>
 80127a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80127a6:	e7c6      	b.n	8012736 <_vfiprintf_r+0x15e>
 80127a8:	4341      	muls	r1, r0
 80127aa:	002e      	movs	r6, r5
 80127ac:	2301      	movs	r3, #1
 80127ae:	1889      	adds	r1, r1, r2
 80127b0:	e7f1      	b.n	8012796 <_vfiprintf_r+0x1be>
 80127b2:	aa07      	add	r2, sp, #28
 80127b4:	9200      	str	r2, [sp, #0]
 80127b6:	0021      	movs	r1, r4
 80127b8:	003a      	movs	r2, r7
 80127ba:	4b14      	ldr	r3, [pc, #80]	@ (801280c <_vfiprintf_r+0x234>)
 80127bc:	9803      	ldr	r0, [sp, #12]
 80127be:	f7fc fea9 	bl	800f514 <_printf_float>
 80127c2:	9004      	str	r0, [sp, #16]
 80127c4:	9b04      	ldr	r3, [sp, #16]
 80127c6:	3301      	adds	r3, #1
 80127c8:	d1d6      	bne.n	8012778 <_vfiprintf_r+0x1a0>
 80127ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80127cc:	07db      	lsls	r3, r3, #31
 80127ce:	d405      	bmi.n	80127dc <_vfiprintf_r+0x204>
 80127d0:	89bb      	ldrh	r3, [r7, #12]
 80127d2:	059b      	lsls	r3, r3, #22
 80127d4:	d402      	bmi.n	80127dc <_vfiprintf_r+0x204>
 80127d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80127d8:	f7fd fc34 	bl	8010044 <__retarget_lock_release_recursive>
 80127dc:	89bb      	ldrh	r3, [r7, #12]
 80127de:	065b      	lsls	r3, r3, #25
 80127e0:	d500      	bpl.n	80127e4 <_vfiprintf_r+0x20c>
 80127e2:	e71e      	b.n	8012622 <_vfiprintf_r+0x4a>
 80127e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80127e6:	e71e      	b.n	8012626 <_vfiprintf_r+0x4e>
 80127e8:	aa07      	add	r2, sp, #28
 80127ea:	9200      	str	r2, [sp, #0]
 80127ec:	0021      	movs	r1, r4
 80127ee:	003a      	movs	r2, r7
 80127f0:	4b06      	ldr	r3, [pc, #24]	@ (801280c <_vfiprintf_r+0x234>)
 80127f2:	9803      	ldr	r0, [sp, #12]
 80127f4:	f7fd f93c 	bl	800fa70 <_printf_i>
 80127f8:	e7e3      	b.n	80127c2 <_vfiprintf_r+0x1ea>
 80127fa:	46c0      	nop			@ (mov r8, r8)
 80127fc:	08012f04 	.word	0x08012f04
 8012800:	08012f0a 	.word	0x08012f0a
 8012804:	08012f0e 	.word	0x08012f0e
 8012808:	0800f515 	.word	0x0800f515
 801280c:	080125b5 	.word	0x080125b5

08012810 <__swbuf_r>:
 8012810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012812:	0006      	movs	r6, r0
 8012814:	000d      	movs	r5, r1
 8012816:	0014      	movs	r4, r2
 8012818:	2800      	cmp	r0, #0
 801281a:	d004      	beq.n	8012826 <__swbuf_r+0x16>
 801281c:	6a03      	ldr	r3, [r0, #32]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <__swbuf_r+0x16>
 8012822:	f7fd fac1 	bl	800fda8 <__sinit>
 8012826:	69a3      	ldr	r3, [r4, #24]
 8012828:	60a3      	str	r3, [r4, #8]
 801282a:	89a3      	ldrh	r3, [r4, #12]
 801282c:	071b      	lsls	r3, r3, #28
 801282e:	d502      	bpl.n	8012836 <__swbuf_r+0x26>
 8012830:	6923      	ldr	r3, [r4, #16]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d109      	bne.n	801284a <__swbuf_r+0x3a>
 8012836:	0021      	movs	r1, r4
 8012838:	0030      	movs	r0, r6
 801283a:	f000 f82b 	bl	8012894 <__swsetup_r>
 801283e:	2800      	cmp	r0, #0
 8012840:	d003      	beq.n	801284a <__swbuf_r+0x3a>
 8012842:	2501      	movs	r5, #1
 8012844:	426d      	negs	r5, r5
 8012846:	0028      	movs	r0, r5
 8012848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801284a:	6923      	ldr	r3, [r4, #16]
 801284c:	6820      	ldr	r0, [r4, #0]
 801284e:	b2ef      	uxtb	r7, r5
 8012850:	1ac0      	subs	r0, r0, r3
 8012852:	6963      	ldr	r3, [r4, #20]
 8012854:	b2ed      	uxtb	r5, r5
 8012856:	4283      	cmp	r3, r0
 8012858:	dc05      	bgt.n	8012866 <__swbuf_r+0x56>
 801285a:	0021      	movs	r1, r4
 801285c:	0030      	movs	r0, r6
 801285e:	f7ff fda9 	bl	80123b4 <_fflush_r>
 8012862:	2800      	cmp	r0, #0
 8012864:	d1ed      	bne.n	8012842 <__swbuf_r+0x32>
 8012866:	68a3      	ldr	r3, [r4, #8]
 8012868:	3001      	adds	r0, #1
 801286a:	3b01      	subs	r3, #1
 801286c:	60a3      	str	r3, [r4, #8]
 801286e:	6823      	ldr	r3, [r4, #0]
 8012870:	1c5a      	adds	r2, r3, #1
 8012872:	6022      	str	r2, [r4, #0]
 8012874:	701f      	strb	r7, [r3, #0]
 8012876:	6963      	ldr	r3, [r4, #20]
 8012878:	4283      	cmp	r3, r0
 801287a:	d004      	beq.n	8012886 <__swbuf_r+0x76>
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	07db      	lsls	r3, r3, #31
 8012880:	d5e1      	bpl.n	8012846 <__swbuf_r+0x36>
 8012882:	2d0a      	cmp	r5, #10
 8012884:	d1df      	bne.n	8012846 <__swbuf_r+0x36>
 8012886:	0021      	movs	r1, r4
 8012888:	0030      	movs	r0, r6
 801288a:	f7ff fd93 	bl	80123b4 <_fflush_r>
 801288e:	2800      	cmp	r0, #0
 8012890:	d0d9      	beq.n	8012846 <__swbuf_r+0x36>
 8012892:	e7d6      	b.n	8012842 <__swbuf_r+0x32>

08012894 <__swsetup_r>:
 8012894:	4b2d      	ldr	r3, [pc, #180]	@ (801294c <__swsetup_r+0xb8>)
 8012896:	b570      	push	{r4, r5, r6, lr}
 8012898:	0005      	movs	r5, r0
 801289a:	6818      	ldr	r0, [r3, #0]
 801289c:	000c      	movs	r4, r1
 801289e:	2800      	cmp	r0, #0
 80128a0:	d004      	beq.n	80128ac <__swsetup_r+0x18>
 80128a2:	6a03      	ldr	r3, [r0, #32]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d101      	bne.n	80128ac <__swsetup_r+0x18>
 80128a8:	f7fd fa7e 	bl	800fda8 <__sinit>
 80128ac:	220c      	movs	r2, #12
 80128ae:	5ea3      	ldrsh	r3, [r4, r2]
 80128b0:	071a      	lsls	r2, r3, #28
 80128b2:	d423      	bmi.n	80128fc <__swsetup_r+0x68>
 80128b4:	06da      	lsls	r2, r3, #27
 80128b6:	d407      	bmi.n	80128c8 <__swsetup_r+0x34>
 80128b8:	2209      	movs	r2, #9
 80128ba:	602a      	str	r2, [r5, #0]
 80128bc:	2240      	movs	r2, #64	@ 0x40
 80128be:	2001      	movs	r0, #1
 80128c0:	4313      	orrs	r3, r2
 80128c2:	81a3      	strh	r3, [r4, #12]
 80128c4:	4240      	negs	r0, r0
 80128c6:	e03a      	b.n	801293e <__swsetup_r+0xaa>
 80128c8:	075b      	lsls	r3, r3, #29
 80128ca:	d513      	bpl.n	80128f4 <__swsetup_r+0x60>
 80128cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128ce:	2900      	cmp	r1, #0
 80128d0:	d008      	beq.n	80128e4 <__swsetup_r+0x50>
 80128d2:	0023      	movs	r3, r4
 80128d4:	3344      	adds	r3, #68	@ 0x44
 80128d6:	4299      	cmp	r1, r3
 80128d8:	d002      	beq.n	80128e0 <__swsetup_r+0x4c>
 80128da:	0028      	movs	r0, r5
 80128dc:	f7fe fa44 	bl	8010d68 <_free_r>
 80128e0:	2300      	movs	r3, #0
 80128e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80128e4:	2224      	movs	r2, #36	@ 0x24
 80128e6:	89a3      	ldrh	r3, [r4, #12]
 80128e8:	4393      	bics	r3, r2
 80128ea:	81a3      	strh	r3, [r4, #12]
 80128ec:	2300      	movs	r3, #0
 80128ee:	6063      	str	r3, [r4, #4]
 80128f0:	6923      	ldr	r3, [r4, #16]
 80128f2:	6023      	str	r3, [r4, #0]
 80128f4:	2308      	movs	r3, #8
 80128f6:	89a2      	ldrh	r2, [r4, #12]
 80128f8:	4313      	orrs	r3, r2
 80128fa:	81a3      	strh	r3, [r4, #12]
 80128fc:	6923      	ldr	r3, [r4, #16]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d10b      	bne.n	801291a <__swsetup_r+0x86>
 8012902:	21a0      	movs	r1, #160	@ 0xa0
 8012904:	2280      	movs	r2, #128	@ 0x80
 8012906:	89a3      	ldrh	r3, [r4, #12]
 8012908:	0089      	lsls	r1, r1, #2
 801290a:	0092      	lsls	r2, r2, #2
 801290c:	400b      	ands	r3, r1
 801290e:	4293      	cmp	r3, r2
 8012910:	d003      	beq.n	801291a <__swsetup_r+0x86>
 8012912:	0021      	movs	r1, r4
 8012914:	0028      	movs	r0, r5
 8012916:	f000 f88f 	bl	8012a38 <__smakebuf_r>
 801291a:	220c      	movs	r2, #12
 801291c:	5ea3      	ldrsh	r3, [r4, r2]
 801291e:	2101      	movs	r1, #1
 8012920:	001a      	movs	r2, r3
 8012922:	400a      	ands	r2, r1
 8012924:	420b      	tst	r3, r1
 8012926:	d00b      	beq.n	8012940 <__swsetup_r+0xac>
 8012928:	2200      	movs	r2, #0
 801292a:	60a2      	str	r2, [r4, #8]
 801292c:	6962      	ldr	r2, [r4, #20]
 801292e:	4252      	negs	r2, r2
 8012930:	61a2      	str	r2, [r4, #24]
 8012932:	2000      	movs	r0, #0
 8012934:	6922      	ldr	r2, [r4, #16]
 8012936:	4282      	cmp	r2, r0
 8012938:	d101      	bne.n	801293e <__swsetup_r+0xaa>
 801293a:	061a      	lsls	r2, r3, #24
 801293c:	d4be      	bmi.n	80128bc <__swsetup_r+0x28>
 801293e:	bd70      	pop	{r4, r5, r6, pc}
 8012940:	0799      	lsls	r1, r3, #30
 8012942:	d400      	bmi.n	8012946 <__swsetup_r+0xb2>
 8012944:	6962      	ldr	r2, [r4, #20]
 8012946:	60a2      	str	r2, [r4, #8]
 8012948:	e7f3      	b.n	8012932 <__swsetup_r+0x9e>
 801294a:	46c0      	nop			@ (mov r8, r8)
 801294c:	20000308 	.word	0x20000308

08012950 <_raise_r>:
 8012950:	b570      	push	{r4, r5, r6, lr}
 8012952:	0004      	movs	r4, r0
 8012954:	000d      	movs	r5, r1
 8012956:	291f      	cmp	r1, #31
 8012958:	d904      	bls.n	8012964 <_raise_r+0x14>
 801295a:	2316      	movs	r3, #22
 801295c:	6003      	str	r3, [r0, #0]
 801295e:	2001      	movs	r0, #1
 8012960:	4240      	negs	r0, r0
 8012962:	bd70      	pop	{r4, r5, r6, pc}
 8012964:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012966:	2b00      	cmp	r3, #0
 8012968:	d004      	beq.n	8012974 <_raise_r+0x24>
 801296a:	008a      	lsls	r2, r1, #2
 801296c:	189b      	adds	r3, r3, r2
 801296e:	681a      	ldr	r2, [r3, #0]
 8012970:	2a00      	cmp	r2, #0
 8012972:	d108      	bne.n	8012986 <_raise_r+0x36>
 8012974:	0020      	movs	r0, r4
 8012976:	f000 f831 	bl	80129dc <_getpid_r>
 801297a:	002a      	movs	r2, r5
 801297c:	0001      	movs	r1, r0
 801297e:	0020      	movs	r0, r4
 8012980:	f000 f81a 	bl	80129b8 <_kill_r>
 8012984:	e7ed      	b.n	8012962 <_raise_r+0x12>
 8012986:	2a01      	cmp	r2, #1
 8012988:	d009      	beq.n	801299e <_raise_r+0x4e>
 801298a:	1c51      	adds	r1, r2, #1
 801298c:	d103      	bne.n	8012996 <_raise_r+0x46>
 801298e:	2316      	movs	r3, #22
 8012990:	6003      	str	r3, [r0, #0]
 8012992:	2001      	movs	r0, #1
 8012994:	e7e5      	b.n	8012962 <_raise_r+0x12>
 8012996:	2100      	movs	r1, #0
 8012998:	0028      	movs	r0, r5
 801299a:	6019      	str	r1, [r3, #0]
 801299c:	4790      	blx	r2
 801299e:	2000      	movs	r0, #0
 80129a0:	e7df      	b.n	8012962 <_raise_r+0x12>
	...

080129a4 <raise>:
 80129a4:	b510      	push	{r4, lr}
 80129a6:	4b03      	ldr	r3, [pc, #12]	@ (80129b4 <raise+0x10>)
 80129a8:	0001      	movs	r1, r0
 80129aa:	6818      	ldr	r0, [r3, #0]
 80129ac:	f7ff ffd0 	bl	8012950 <_raise_r>
 80129b0:	bd10      	pop	{r4, pc}
 80129b2:	46c0      	nop			@ (mov r8, r8)
 80129b4:	20000308 	.word	0x20000308

080129b8 <_kill_r>:
 80129b8:	2300      	movs	r3, #0
 80129ba:	b570      	push	{r4, r5, r6, lr}
 80129bc:	4d06      	ldr	r5, [pc, #24]	@ (80129d8 <_kill_r+0x20>)
 80129be:	0004      	movs	r4, r0
 80129c0:	0008      	movs	r0, r1
 80129c2:	0011      	movs	r1, r2
 80129c4:	602b      	str	r3, [r5, #0]
 80129c6:	f7f1 fb07 	bl	8003fd8 <_kill>
 80129ca:	1c43      	adds	r3, r0, #1
 80129cc:	d103      	bne.n	80129d6 <_kill_r+0x1e>
 80129ce:	682b      	ldr	r3, [r5, #0]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d000      	beq.n	80129d6 <_kill_r+0x1e>
 80129d4:	6023      	str	r3, [r4, #0]
 80129d6:	bd70      	pop	{r4, r5, r6, pc}
 80129d8:	20002298 	.word	0x20002298

080129dc <_getpid_r>:
 80129dc:	b510      	push	{r4, lr}
 80129de:	f7f1 faf5 	bl	8003fcc <_getpid>
 80129e2:	bd10      	pop	{r4, pc}

080129e4 <__swhatbuf_r>:
 80129e4:	b570      	push	{r4, r5, r6, lr}
 80129e6:	000e      	movs	r6, r1
 80129e8:	001d      	movs	r5, r3
 80129ea:	230e      	movs	r3, #14
 80129ec:	5ec9      	ldrsh	r1, [r1, r3]
 80129ee:	0014      	movs	r4, r2
 80129f0:	b096      	sub	sp, #88	@ 0x58
 80129f2:	2900      	cmp	r1, #0
 80129f4:	da0c      	bge.n	8012a10 <__swhatbuf_r+0x2c>
 80129f6:	89b2      	ldrh	r2, [r6, #12]
 80129f8:	2380      	movs	r3, #128	@ 0x80
 80129fa:	0011      	movs	r1, r2
 80129fc:	4019      	ands	r1, r3
 80129fe:	421a      	tst	r2, r3
 8012a00:	d114      	bne.n	8012a2c <__swhatbuf_r+0x48>
 8012a02:	2380      	movs	r3, #128	@ 0x80
 8012a04:	00db      	lsls	r3, r3, #3
 8012a06:	2000      	movs	r0, #0
 8012a08:	6029      	str	r1, [r5, #0]
 8012a0a:	6023      	str	r3, [r4, #0]
 8012a0c:	b016      	add	sp, #88	@ 0x58
 8012a0e:	bd70      	pop	{r4, r5, r6, pc}
 8012a10:	466a      	mov	r2, sp
 8012a12:	f000 f853 	bl	8012abc <_fstat_r>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	dbed      	blt.n	80129f6 <__swhatbuf_r+0x12>
 8012a1a:	23f0      	movs	r3, #240	@ 0xf0
 8012a1c:	9901      	ldr	r1, [sp, #4]
 8012a1e:	021b      	lsls	r3, r3, #8
 8012a20:	4019      	ands	r1, r3
 8012a22:	4b04      	ldr	r3, [pc, #16]	@ (8012a34 <__swhatbuf_r+0x50>)
 8012a24:	18c9      	adds	r1, r1, r3
 8012a26:	424b      	negs	r3, r1
 8012a28:	4159      	adcs	r1, r3
 8012a2a:	e7ea      	b.n	8012a02 <__swhatbuf_r+0x1e>
 8012a2c:	2100      	movs	r1, #0
 8012a2e:	2340      	movs	r3, #64	@ 0x40
 8012a30:	e7e9      	b.n	8012a06 <__swhatbuf_r+0x22>
 8012a32:	46c0      	nop			@ (mov r8, r8)
 8012a34:	ffffe000 	.word	0xffffe000

08012a38 <__smakebuf_r>:
 8012a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a3a:	2602      	movs	r6, #2
 8012a3c:	898b      	ldrh	r3, [r1, #12]
 8012a3e:	0005      	movs	r5, r0
 8012a40:	000c      	movs	r4, r1
 8012a42:	b085      	sub	sp, #20
 8012a44:	4233      	tst	r3, r6
 8012a46:	d007      	beq.n	8012a58 <__smakebuf_r+0x20>
 8012a48:	0023      	movs	r3, r4
 8012a4a:	3347      	adds	r3, #71	@ 0x47
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	6123      	str	r3, [r4, #16]
 8012a50:	2301      	movs	r3, #1
 8012a52:	6163      	str	r3, [r4, #20]
 8012a54:	b005      	add	sp, #20
 8012a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a58:	ab03      	add	r3, sp, #12
 8012a5a:	aa02      	add	r2, sp, #8
 8012a5c:	f7ff ffc2 	bl	80129e4 <__swhatbuf_r>
 8012a60:	9f02      	ldr	r7, [sp, #8]
 8012a62:	9001      	str	r0, [sp, #4]
 8012a64:	0039      	movs	r1, r7
 8012a66:	0028      	movs	r0, r5
 8012a68:	f7fe fd4e 	bl	8011508 <_malloc_r>
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	d108      	bne.n	8012a82 <__smakebuf_r+0x4a>
 8012a70:	220c      	movs	r2, #12
 8012a72:	5ea3      	ldrsh	r3, [r4, r2]
 8012a74:	059a      	lsls	r2, r3, #22
 8012a76:	d4ed      	bmi.n	8012a54 <__smakebuf_r+0x1c>
 8012a78:	2203      	movs	r2, #3
 8012a7a:	4393      	bics	r3, r2
 8012a7c:	431e      	orrs	r6, r3
 8012a7e:	81a6      	strh	r6, [r4, #12]
 8012a80:	e7e2      	b.n	8012a48 <__smakebuf_r+0x10>
 8012a82:	2380      	movs	r3, #128	@ 0x80
 8012a84:	89a2      	ldrh	r2, [r4, #12]
 8012a86:	6020      	str	r0, [r4, #0]
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	81a3      	strh	r3, [r4, #12]
 8012a8c:	9b03      	ldr	r3, [sp, #12]
 8012a8e:	6120      	str	r0, [r4, #16]
 8012a90:	6167      	str	r7, [r4, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00c      	beq.n	8012ab0 <__smakebuf_r+0x78>
 8012a96:	0028      	movs	r0, r5
 8012a98:	230e      	movs	r3, #14
 8012a9a:	5ee1      	ldrsh	r1, [r4, r3]
 8012a9c:	f000 f820 	bl	8012ae0 <_isatty_r>
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	d005      	beq.n	8012ab0 <__smakebuf_r+0x78>
 8012aa4:	2303      	movs	r3, #3
 8012aa6:	89a2      	ldrh	r2, [r4, #12]
 8012aa8:	439a      	bics	r2, r3
 8012aaa:	3b02      	subs	r3, #2
 8012aac:	4313      	orrs	r3, r2
 8012aae:	81a3      	strh	r3, [r4, #12]
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	9a01      	ldr	r2, [sp, #4]
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	81a3      	strh	r3, [r4, #12]
 8012ab8:	e7cc      	b.n	8012a54 <__smakebuf_r+0x1c>
	...

08012abc <_fstat_r>:
 8012abc:	2300      	movs	r3, #0
 8012abe:	b570      	push	{r4, r5, r6, lr}
 8012ac0:	4d06      	ldr	r5, [pc, #24]	@ (8012adc <_fstat_r+0x20>)
 8012ac2:	0004      	movs	r4, r0
 8012ac4:	0008      	movs	r0, r1
 8012ac6:	0011      	movs	r1, r2
 8012ac8:	602b      	str	r3, [r5, #0]
 8012aca:	f7f1 fae5 	bl	8004098 <_fstat>
 8012ace:	1c43      	adds	r3, r0, #1
 8012ad0:	d103      	bne.n	8012ada <_fstat_r+0x1e>
 8012ad2:	682b      	ldr	r3, [r5, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d000      	beq.n	8012ada <_fstat_r+0x1e>
 8012ad8:	6023      	str	r3, [r4, #0]
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	20002298 	.word	0x20002298

08012ae0 <_isatty_r>:
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	b570      	push	{r4, r5, r6, lr}
 8012ae4:	4d06      	ldr	r5, [pc, #24]	@ (8012b00 <_isatty_r+0x20>)
 8012ae6:	0004      	movs	r4, r0
 8012ae8:	0008      	movs	r0, r1
 8012aea:	602b      	str	r3, [r5, #0]
 8012aec:	f7f1 fae2 	bl	80040b4 <_isatty>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d103      	bne.n	8012afc <_isatty_r+0x1c>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d000      	beq.n	8012afc <_isatty_r+0x1c>
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	bd70      	pop	{r4, r5, r6, pc}
 8012afe:	46c0      	nop			@ (mov r8, r8)
 8012b00:	20002298 	.word	0x20002298

08012b04 <_init>:
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	46c0      	nop			@ (mov r8, r8)
 8012b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b0a:	bc08      	pop	{r3}
 8012b0c:	469e      	mov	lr, r3
 8012b0e:	4770      	bx	lr

08012b10 <_fini>:
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	46c0      	nop			@ (mov r8, r8)
 8012b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b16:	bc08      	pop	{r3}
 8012b18:	469e      	mov	lr, r3
 8012b1a:	4770      	bx	lr
