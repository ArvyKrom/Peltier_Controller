
Peltier_Controller_G0B0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f1c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08012fd8  08012fd8  00013fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013664  08013664  000152c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08013664  08013664  000152c8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08013664  08013664  000152c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013664  08013664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013668  08013668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  0801366c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de0  200002c8  08013934  000152c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020a8  08013934  000160a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000152c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e59f  00000000  00000000  000152f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c8c  00000000  00000000  0003388f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00038520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000154f  00000000  00000000  0003a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fae1  00000000  00000000  0003b637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024076  00000000  00000000  0005b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3af4  00000000  00000000  0007f18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132c82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077f4  00000000  00000000  00132cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0013a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200002c8 	.word	0x200002c8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08012fbc 	.word	0x08012fbc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200002cc 	.word	0x200002cc
 80000fc:	08012fbc 	.word	0x08012fbc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 f833 	bl	80014a0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff77 	bl	8001338 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f825 	bl	80014a0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 f81b 	bl	80014a0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 ffa1 	bl	80013c0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 ff97 	bl	80013c0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f001 ff73 	bl	80023a0 <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fb40 	bl	8001b48 <__aeabi_dsub>
 80004c8:	f001 ff6a 	bl	80023a0 <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	@ 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb3 	bl	8000450 <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d108      	bne.n	8000500 <__aeabi_d2lz+0x24>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f000 f80f 	bl	8000514 <__aeabi_d2ulz>
 80004f6:	0002      	movs	r2, r0
 80004f8:	000b      	movs	r3, r1
 80004fa:	0010      	movs	r0, r2
 80004fc:	0019      	movs	r1, r3
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	2380      	movs	r3, #128	@ 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	18e9      	adds	r1, r5, r3
 8000506:	0020      	movs	r0, r4
 8000508:	f000 f804 	bl	8000514 <__aeabi_d2ulz>
 800050c:	2300      	movs	r3, #0
 800050e:	4242      	negs	r2, r0
 8000510:	418b      	sbcs	r3, r1
 8000512:	e7f2      	b.n	80004fa <__aeabi_d2lz+0x1e>

08000514 <__aeabi_d2ulz>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	2200      	movs	r2, #0
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <__aeabi_d2ulz+0x34>)
 800051a:	000d      	movs	r5, r1
 800051c:	0004      	movs	r4, r0
 800051e:	f001 f82d 	bl	800157c <__aeabi_dmul>
 8000522:	f7ff ffbd 	bl	80004a0 <__aeabi_d2uiz>
 8000526:	0006      	movs	r6, r0
 8000528:	f001 ffa4 	bl	8002474 <__aeabi_ui2d>
 800052c:	2200      	movs	r2, #0
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <__aeabi_d2ulz+0x38>)
 8000530:	f001 f824 	bl	800157c <__aeabi_dmul>
 8000534:	0002      	movs	r2, r0
 8000536:	000b      	movs	r3, r1
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f001 fb04 	bl	8001b48 <__aeabi_dsub>
 8000540:	f7ff ffae 	bl	80004a0 <__aeabi_d2uiz>
 8000544:	0031      	movs	r1, r6
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	3df00000 	.word	0x3df00000
 800054c:	41f00000 	.word	0x41f00000

08000550 <__aeabi_l2d>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	0006      	movs	r6, r0
 8000554:	0008      	movs	r0, r1
 8000556:	f001 ff5f 	bl	8002418 <__aeabi_i2d>
 800055a:	2200      	movs	r2, #0
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <__aeabi_l2d+0x28>)
 800055e:	f001 f80d 	bl	800157c <__aeabi_dmul>
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	0030      	movs	r0, r6
 8000568:	f001 ff84 	bl	8002474 <__aeabi_ui2d>
 800056c:	002b      	movs	r3, r5
 800056e:	0022      	movs	r2, r4
 8000570:	f000 f804 	bl	800057c <__aeabi_dadd>
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	41f00000 	.word	0x41f00000

0800057c <__aeabi_dadd>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	464f      	mov	r7, r9
 8000580:	4646      	mov	r6, r8
 8000582:	46d6      	mov	lr, sl
 8000584:	b5c0      	push	{r6, r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	9000      	str	r0, [sp, #0]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	030e      	lsls	r6, r1, #12
 800058e:	004c      	lsls	r4, r1, #1
 8000590:	0fcd      	lsrs	r5, r1, #31
 8000592:	0a71      	lsrs	r1, r6, #9
 8000594:	9e00      	ldr	r6, [sp, #0]
 8000596:	005f      	lsls	r7, r3, #1
 8000598:	0f76      	lsrs	r6, r6, #29
 800059a:	430e      	orrs	r6, r1
 800059c:	9900      	ldr	r1, [sp, #0]
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	00c9      	lsls	r1, r1, #3
 80005a4:	4689      	mov	r9, r1
 80005a6:	0319      	lsls	r1, r3, #12
 80005a8:	0d7b      	lsrs	r3, r7, #21
 80005aa:	4698      	mov	r8, r3
 80005ac:	9b01      	ldr	r3, [sp, #4]
 80005ae:	0a49      	lsrs	r1, r1, #9
 80005b0:	0fdb      	lsrs	r3, r3, #31
 80005b2:	469c      	mov	ip, r3
 80005b4:	9b00      	ldr	r3, [sp, #0]
 80005b6:	9a00      	ldr	r2, [sp, #0]
 80005b8:	0f5b      	lsrs	r3, r3, #29
 80005ba:	430b      	orrs	r3, r1
 80005bc:	4641      	mov	r1, r8
 80005be:	0d64      	lsrs	r4, r4, #21
 80005c0:	00d2      	lsls	r2, r2, #3
 80005c2:	1a61      	subs	r1, r4, r1
 80005c4:	4565      	cmp	r5, ip
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x4e>
 80005c8:	e0a6      	b.n	8000718 <__aeabi_dadd+0x19c>
 80005ca:	2900      	cmp	r1, #0
 80005cc:	dd72      	ble.n	80006b4 <__aeabi_dadd+0x138>
 80005ce:	4647      	mov	r7, r8
 80005d0:	2f00      	cmp	r7, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x5a>
 80005d4:	e0dd      	b.n	8000792 <__aeabi_dadd+0x216>
 80005d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000908 <__aeabi_dadd+0x38c>)
 80005d8:	42bc      	cmp	r4, r7
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x62>
 80005dc:	e19a      	b.n	8000914 <__aeabi_dadd+0x398>
 80005de:	2701      	movs	r7, #1
 80005e0:	2938      	cmp	r1, #56	@ 0x38
 80005e2:	dc17      	bgt.n	8000614 <__aeabi_dadd+0x98>
 80005e4:	2780      	movs	r7, #128	@ 0x80
 80005e6:	043f      	lsls	r7, r7, #16
 80005e8:	433b      	orrs	r3, r7
 80005ea:	291f      	cmp	r1, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x74>
 80005ee:	e1dd      	b.n	80009ac <__aeabi_dadd+0x430>
 80005f0:	2720      	movs	r7, #32
 80005f2:	1a78      	subs	r0, r7, r1
 80005f4:	001f      	movs	r7, r3
 80005f6:	4087      	lsls	r7, r0
 80005f8:	46ba      	mov	sl, r7
 80005fa:	0017      	movs	r7, r2
 80005fc:	40cf      	lsrs	r7, r1
 80005fe:	4684      	mov	ip, r0
 8000600:	0038      	movs	r0, r7
 8000602:	4657      	mov	r7, sl
 8000604:	4307      	orrs	r7, r0
 8000606:	4660      	mov	r0, ip
 8000608:	4082      	lsls	r2, r0
 800060a:	40cb      	lsrs	r3, r1
 800060c:	1e50      	subs	r0, r2, #1
 800060e:	4182      	sbcs	r2, r0
 8000610:	1af6      	subs	r6, r6, r3
 8000612:	4317      	orrs	r7, r2
 8000614:	464b      	mov	r3, r9
 8000616:	1bdf      	subs	r7, r3, r7
 8000618:	45b9      	cmp	r9, r7
 800061a:	4180      	sbcs	r0, r0
 800061c:	4240      	negs	r0, r0
 800061e:	1a36      	subs	r6, r6, r0
 8000620:	0233      	lsls	r3, r6, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0xaa>
 8000624:	e0ff      	b.n	8000826 <__aeabi_dadd+0x2aa>
 8000626:	0276      	lsls	r6, r6, #9
 8000628:	0a76      	lsrs	r6, r6, #9
 800062a:	2e00      	cmp	r6, #0
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0xb4>
 800062e:	e13c      	b.n	80008aa <__aeabi_dadd+0x32e>
 8000630:	0030      	movs	r0, r6
 8000632:	f001 ff43 	bl	80024bc <__clzsi2>
 8000636:	0003      	movs	r3, r0
 8000638:	3b08      	subs	r3, #8
 800063a:	2120      	movs	r1, #32
 800063c:	0038      	movs	r0, r7
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	40d0      	lsrs	r0, r2
 8000642:	409e      	lsls	r6, r3
 8000644:	0002      	movs	r2, r0
 8000646:	409f      	lsls	r7, r3
 8000648:	4332      	orrs	r2, r6
 800064a:	429c      	cmp	r4, r3
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0xd4>
 800064e:	e1a6      	b.n	800099e <__aeabi_dadd+0x422>
 8000650:	1b18      	subs	r0, r3, r4
 8000652:	3001      	adds	r0, #1
 8000654:	1a09      	subs	r1, r1, r0
 8000656:	003e      	movs	r6, r7
 8000658:	408f      	lsls	r7, r1
 800065a:	40c6      	lsrs	r6, r0
 800065c:	1e7b      	subs	r3, r7, #1
 800065e:	419f      	sbcs	r7, r3
 8000660:	0013      	movs	r3, r2
 8000662:	408b      	lsls	r3, r1
 8000664:	4337      	orrs	r7, r6
 8000666:	431f      	orrs	r7, r3
 8000668:	40c2      	lsrs	r2, r0
 800066a:	003b      	movs	r3, r7
 800066c:	0016      	movs	r6, r2
 800066e:	2400      	movs	r4, #0
 8000670:	4313      	orrs	r3, r2
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0xfa>
 8000674:	e1df      	b.n	8000a36 <__aeabi_dadd+0x4ba>
 8000676:	077b      	lsls	r3, r7, #29
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x100>
 800067a:	e332      	b.n	8000ce2 <__aeabi_dadd+0x766>
 800067c:	230f      	movs	r3, #15
 800067e:	003a      	movs	r2, r7
 8000680:	403b      	ands	r3, r7
 8000682:	2b04      	cmp	r3, #4
 8000684:	d004      	beq.n	8000690 <__aeabi_dadd+0x114>
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	42ba      	cmp	r2, r7
 800068a:	41bf      	sbcs	r7, r7
 800068c:	427f      	negs	r7, r7
 800068e:	19f6      	adds	r6, r6, r7
 8000690:	0233      	lsls	r3, r6, #8
 8000692:	d400      	bmi.n	8000696 <__aeabi_dadd+0x11a>
 8000694:	e323      	b.n	8000cde <__aeabi_dadd+0x762>
 8000696:	4b9c      	ldr	r3, [pc, #624]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000698:	3401      	adds	r4, #1
 800069a:	429c      	cmp	r4, r3
 800069c:	d100      	bne.n	80006a0 <__aeabi_dadd+0x124>
 800069e:	e0b4      	b.n	800080a <__aeabi_dadd+0x28e>
 80006a0:	4b9a      	ldr	r3, [pc, #616]	@ (800090c <__aeabi_dadd+0x390>)
 80006a2:	0564      	lsls	r4, r4, #21
 80006a4:	401e      	ands	r6, r3
 80006a6:	0d64      	lsrs	r4, r4, #21
 80006a8:	0777      	lsls	r7, r6, #29
 80006aa:	08d2      	lsrs	r2, r2, #3
 80006ac:	0276      	lsls	r6, r6, #9
 80006ae:	4317      	orrs	r7, r2
 80006b0:	0b36      	lsrs	r6, r6, #12
 80006b2:	e0ac      	b.n	800080e <__aeabi_dadd+0x292>
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x13e>
 80006b8:	e07e      	b.n	80007b8 <__aeabi_dadd+0x23c>
 80006ba:	4641      	mov	r1, r8
 80006bc:	1b09      	subs	r1, r1, r4
 80006be:	2c00      	cmp	r4, #0
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x148>
 80006c2:	e160      	b.n	8000986 <__aeabi_dadd+0x40a>
 80006c4:	0034      	movs	r4, r6
 80006c6:	4648      	mov	r0, r9
 80006c8:	4304      	orrs	r4, r0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x152>
 80006cc:	e1c9      	b.n	8000a62 <__aeabi_dadd+0x4e6>
 80006ce:	1e4c      	subs	r4, r1, #1
 80006d0:	2901      	cmp	r1, #1
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x15a>
 80006d4:	e22e      	b.n	8000b34 <__aeabi_dadd+0x5b8>
 80006d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000908 <__aeabi_dadd+0x38c>)
 80006d8:	42a9      	cmp	r1, r5
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x162>
 80006dc:	e224      	b.n	8000b28 <__aeabi_dadd+0x5ac>
 80006de:	2701      	movs	r7, #1
 80006e0:	2c38      	cmp	r4, #56	@ 0x38
 80006e2:	dc11      	bgt.n	8000708 <__aeabi_dadd+0x18c>
 80006e4:	0021      	movs	r1, r4
 80006e6:	291f      	cmp	r1, #31
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x170>
 80006ea:	e20b      	b.n	8000b04 <__aeabi_dadd+0x588>
 80006ec:	2420      	movs	r4, #32
 80006ee:	0037      	movs	r7, r6
 80006f0:	4648      	mov	r0, r9
 80006f2:	1a64      	subs	r4, r4, r1
 80006f4:	40a7      	lsls	r7, r4
 80006f6:	40c8      	lsrs	r0, r1
 80006f8:	4307      	orrs	r7, r0
 80006fa:	4648      	mov	r0, r9
 80006fc:	40a0      	lsls	r0, r4
 80006fe:	40ce      	lsrs	r6, r1
 8000700:	1e44      	subs	r4, r0, #1
 8000702:	41a0      	sbcs	r0, r4
 8000704:	1b9b      	subs	r3, r3, r6
 8000706:	4307      	orrs	r7, r0
 8000708:	1bd7      	subs	r7, r2, r7
 800070a:	42ba      	cmp	r2, r7
 800070c:	4192      	sbcs	r2, r2
 800070e:	4252      	negs	r2, r2
 8000710:	4665      	mov	r5, ip
 8000712:	4644      	mov	r4, r8
 8000714:	1a9e      	subs	r6, r3, r2
 8000716:	e783      	b.n	8000620 <__aeabi_dadd+0xa4>
 8000718:	2900      	cmp	r1, #0
 800071a:	dc00      	bgt.n	800071e <__aeabi_dadd+0x1a2>
 800071c:	e09c      	b.n	8000858 <__aeabi_dadd+0x2dc>
 800071e:	4647      	mov	r7, r8
 8000720:	2f00      	cmp	r7, #0
 8000722:	d167      	bne.n	80007f4 <__aeabi_dadd+0x278>
 8000724:	001f      	movs	r7, r3
 8000726:	4317      	orrs	r7, r2
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x1b0>
 800072a:	e0e4      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800072c:	1e48      	subs	r0, r1, #1
 800072e:	2901      	cmp	r1, #1
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b8>
 8000732:	e19b      	b.n	8000a6c <__aeabi_dadd+0x4f0>
 8000734:	4f74      	ldr	r7, [pc, #464]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000736:	42b9      	cmp	r1, r7
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1c0>
 800073a:	e0eb      	b.n	8000914 <__aeabi_dadd+0x398>
 800073c:	2701      	movs	r7, #1
 800073e:	0001      	movs	r1, r0
 8000740:	2838      	cmp	r0, #56	@ 0x38
 8000742:	dc11      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000744:	291f      	cmp	r1, #31
 8000746:	dd00      	ble.n	800074a <__aeabi_dadd+0x1ce>
 8000748:	e1c7      	b.n	8000ada <__aeabi_dadd+0x55e>
 800074a:	2720      	movs	r7, #32
 800074c:	1a78      	subs	r0, r7, r1
 800074e:	001f      	movs	r7, r3
 8000750:	4684      	mov	ip, r0
 8000752:	4087      	lsls	r7, r0
 8000754:	0010      	movs	r0, r2
 8000756:	40c8      	lsrs	r0, r1
 8000758:	4307      	orrs	r7, r0
 800075a:	4660      	mov	r0, ip
 800075c:	4082      	lsls	r2, r0
 800075e:	40cb      	lsrs	r3, r1
 8000760:	1e50      	subs	r0, r2, #1
 8000762:	4182      	sbcs	r2, r0
 8000764:	18f6      	adds	r6, r6, r3
 8000766:	4317      	orrs	r7, r2
 8000768:	444f      	add	r7, r9
 800076a:	454f      	cmp	r7, r9
 800076c:	4180      	sbcs	r0, r0
 800076e:	4240      	negs	r0, r0
 8000770:	1836      	adds	r6, r6, r0
 8000772:	0233      	lsls	r3, r6, #8
 8000774:	d557      	bpl.n	8000826 <__aeabi_dadd+0x2aa>
 8000776:	4b64      	ldr	r3, [pc, #400]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000778:	3401      	adds	r4, #1
 800077a:	429c      	cmp	r4, r3
 800077c:	d045      	beq.n	800080a <__aeabi_dadd+0x28e>
 800077e:	2101      	movs	r1, #1
 8000780:	4b62      	ldr	r3, [pc, #392]	@ (800090c <__aeabi_dadd+0x390>)
 8000782:	087a      	lsrs	r2, r7, #1
 8000784:	401e      	ands	r6, r3
 8000786:	4039      	ands	r1, r7
 8000788:	430a      	orrs	r2, r1
 800078a:	07f7      	lsls	r7, r6, #31
 800078c:	4317      	orrs	r7, r2
 800078e:	0876      	lsrs	r6, r6, #1
 8000790:	e771      	b.n	8000676 <__aeabi_dadd+0xfa>
 8000792:	001f      	movs	r7, r3
 8000794:	4317      	orrs	r7, r2
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x21e>
 8000798:	e0ad      	b.n	80008f6 <__aeabi_dadd+0x37a>
 800079a:	1e4f      	subs	r7, r1, #1
 800079c:	46bc      	mov	ip, r7
 800079e:	2901      	cmp	r1, #1
 80007a0:	d100      	bne.n	80007a4 <__aeabi_dadd+0x228>
 80007a2:	e182      	b.n	8000aaa <__aeabi_dadd+0x52e>
 80007a4:	4f58      	ldr	r7, [pc, #352]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007a6:	42b9      	cmp	r1, r7
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x230>
 80007aa:	e190      	b.n	8000ace <__aeabi_dadd+0x552>
 80007ac:	4661      	mov	r1, ip
 80007ae:	2701      	movs	r7, #1
 80007b0:	2938      	cmp	r1, #56	@ 0x38
 80007b2:	dd00      	ble.n	80007b6 <__aeabi_dadd+0x23a>
 80007b4:	e72e      	b.n	8000614 <__aeabi_dadd+0x98>
 80007b6:	e718      	b.n	80005ea <__aeabi_dadd+0x6e>
 80007b8:	4f55      	ldr	r7, [pc, #340]	@ (8000910 <__aeabi_dadd+0x394>)
 80007ba:	1c61      	adds	r1, r4, #1
 80007bc:	4239      	tst	r1, r7
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x246>
 80007c0:	e0d0      	b.n	8000964 <__aeabi_dadd+0x3e8>
 80007c2:	0031      	movs	r1, r6
 80007c4:	4648      	mov	r0, r9
 80007c6:	001f      	movs	r7, r3
 80007c8:	4301      	orrs	r1, r0
 80007ca:	4317      	orrs	r7, r2
 80007cc:	2c00      	cmp	r4, #0
 80007ce:	d000      	beq.n	80007d2 <__aeabi_dadd+0x256>
 80007d0:	e13d      	b.n	8000a4e <__aeabi_dadd+0x4d2>
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x25c>
 80007d6:	e1bc      	b.n	8000b52 <__aeabi_dadd+0x5d6>
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d000      	beq.n	80007de <__aeabi_dadd+0x262>
 80007dc:	e1bf      	b.n	8000b5e <__aeabi_dadd+0x5e2>
 80007de:	464b      	mov	r3, r9
 80007e0:	2100      	movs	r1, #0
 80007e2:	08d8      	lsrs	r0, r3, #3
 80007e4:	0777      	lsls	r7, r6, #29
 80007e6:	4307      	orrs	r7, r0
 80007e8:	08f0      	lsrs	r0, r6, #3
 80007ea:	0306      	lsls	r6, r0, #12
 80007ec:	054c      	lsls	r4, r1, #21
 80007ee:	0b36      	lsrs	r6, r6, #12
 80007f0:	0d64      	lsrs	r4, r4, #21
 80007f2:	e00c      	b.n	800080e <__aeabi_dadd+0x292>
 80007f4:	4f44      	ldr	r7, [pc, #272]	@ (8000908 <__aeabi_dadd+0x38c>)
 80007f6:	42bc      	cmp	r4, r7
 80007f8:	d100      	bne.n	80007fc <__aeabi_dadd+0x280>
 80007fa:	e08b      	b.n	8000914 <__aeabi_dadd+0x398>
 80007fc:	2701      	movs	r7, #1
 80007fe:	2938      	cmp	r1, #56	@ 0x38
 8000800:	dcb2      	bgt.n	8000768 <__aeabi_dadd+0x1ec>
 8000802:	2780      	movs	r7, #128	@ 0x80
 8000804:	043f      	lsls	r7, r7, #16
 8000806:	433b      	orrs	r3, r7
 8000808:	e79c      	b.n	8000744 <__aeabi_dadd+0x1c8>
 800080a:	2600      	movs	r6, #0
 800080c:	2700      	movs	r7, #0
 800080e:	0524      	lsls	r4, r4, #20
 8000810:	4334      	orrs	r4, r6
 8000812:	07ed      	lsls	r5, r5, #31
 8000814:	432c      	orrs	r4, r5
 8000816:	0038      	movs	r0, r7
 8000818:	0021      	movs	r1, r4
 800081a:	b002      	add	sp, #8
 800081c:	bce0      	pop	{r5, r6, r7}
 800081e:	46ba      	mov	sl, r7
 8000820:	46b1      	mov	r9, r6
 8000822:	46a8      	mov	r8, r5
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	077b      	lsls	r3, r7, #29
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 800082a:	230f      	movs	r3, #15
 800082c:	403b      	ands	r3, r7
 800082e:	2b04      	cmp	r3, #4
 8000830:	d000      	beq.n	8000834 <__aeabi_dadd+0x2b8>
 8000832:	e728      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000834:	08f8      	lsrs	r0, r7, #3
 8000836:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000838:	0777      	lsls	r7, r6, #29
 800083a:	4307      	orrs	r7, r0
 800083c:	08f0      	lsrs	r0, r6, #3
 800083e:	429c      	cmp	r4, r3
 8000840:	d000      	beq.n	8000844 <__aeabi_dadd+0x2c8>
 8000842:	e24a      	b.n	8000cda <__aeabi_dadd+0x75e>
 8000844:	003b      	movs	r3, r7
 8000846:	4303      	orrs	r3, r0
 8000848:	d059      	beq.n	80008fe <__aeabi_dadd+0x382>
 800084a:	2680      	movs	r6, #128	@ 0x80
 800084c:	0336      	lsls	r6, r6, #12
 800084e:	4306      	orrs	r6, r0
 8000850:	0336      	lsls	r6, r6, #12
 8000852:	4c2d      	ldr	r4, [pc, #180]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000854:	0b36      	lsrs	r6, r6, #12
 8000856:	e7da      	b.n	800080e <__aeabi_dadd+0x292>
 8000858:	2900      	cmp	r1, #0
 800085a:	d061      	beq.n	8000920 <__aeabi_dadd+0x3a4>
 800085c:	4641      	mov	r1, r8
 800085e:	1b09      	subs	r1, r1, r4
 8000860:	2c00      	cmp	r4, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x2ea>
 8000864:	e0b9      	b.n	80009da <__aeabi_dadd+0x45e>
 8000866:	4c28      	ldr	r4, [pc, #160]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000868:	45a0      	cmp	r8, r4
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2f2>
 800086c:	e1a5      	b.n	8000bba <__aeabi_dadd+0x63e>
 800086e:	2701      	movs	r7, #1
 8000870:	2938      	cmp	r1, #56	@ 0x38
 8000872:	dc13      	bgt.n	800089c <__aeabi_dadd+0x320>
 8000874:	2480      	movs	r4, #128	@ 0x80
 8000876:	0424      	lsls	r4, r4, #16
 8000878:	4326      	orrs	r6, r4
 800087a:	291f      	cmp	r1, #31
 800087c:	dd00      	ble.n	8000880 <__aeabi_dadd+0x304>
 800087e:	e1c8      	b.n	8000c12 <__aeabi_dadd+0x696>
 8000880:	2420      	movs	r4, #32
 8000882:	0037      	movs	r7, r6
 8000884:	4648      	mov	r0, r9
 8000886:	1a64      	subs	r4, r4, r1
 8000888:	40a7      	lsls	r7, r4
 800088a:	40c8      	lsrs	r0, r1
 800088c:	4307      	orrs	r7, r0
 800088e:	4648      	mov	r0, r9
 8000890:	40a0      	lsls	r0, r4
 8000892:	40ce      	lsrs	r6, r1
 8000894:	1e44      	subs	r4, r0, #1
 8000896:	41a0      	sbcs	r0, r4
 8000898:	199b      	adds	r3, r3, r6
 800089a:	4307      	orrs	r7, r0
 800089c:	18bf      	adds	r7, r7, r2
 800089e:	4297      	cmp	r7, r2
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4252      	negs	r2, r2
 80008a4:	4644      	mov	r4, r8
 80008a6:	18d6      	adds	r6, r2, r3
 80008a8:	e763      	b.n	8000772 <__aeabi_dadd+0x1f6>
 80008aa:	0038      	movs	r0, r7
 80008ac:	f001 fe06 	bl	80024bc <__clzsi2>
 80008b0:	0003      	movs	r3, r0
 80008b2:	3318      	adds	r3, #24
 80008b4:	2b1f      	cmp	r3, #31
 80008b6:	dc00      	bgt.n	80008ba <__aeabi_dadd+0x33e>
 80008b8:	e6bf      	b.n	800063a <__aeabi_dadd+0xbe>
 80008ba:	003a      	movs	r2, r7
 80008bc:	3808      	subs	r0, #8
 80008be:	4082      	lsls	r2, r0
 80008c0:	429c      	cmp	r4, r3
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x34a>
 80008c4:	e083      	b.n	80009ce <__aeabi_dadd+0x452>
 80008c6:	1b1b      	subs	r3, r3, r4
 80008c8:	1c58      	adds	r0, r3, #1
 80008ca:	281f      	cmp	r0, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x354>
 80008ce:	e1b4      	b.n	8000c3a <__aeabi_dadd+0x6be>
 80008d0:	0017      	movs	r7, r2
 80008d2:	3b1f      	subs	r3, #31
 80008d4:	40df      	lsrs	r7, r3
 80008d6:	2820      	cmp	r0, #32
 80008d8:	d005      	beq.n	80008e6 <__aeabi_dadd+0x36a>
 80008da:	2340      	movs	r3, #64	@ 0x40
 80008dc:	1a1b      	subs	r3, r3, r0
 80008de:	409a      	lsls	r2, r3
 80008e0:	1e53      	subs	r3, r2, #1
 80008e2:	419a      	sbcs	r2, r3
 80008e4:	4317      	orrs	r7, r2
 80008e6:	2400      	movs	r4, #0
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d00a      	beq.n	8000902 <__aeabi_dadd+0x386>
 80008ec:	077b      	lsls	r3, r7, #29
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x376>
 80008f0:	e6c4      	b.n	800067c <__aeabi_dadd+0x100>
 80008f2:	0026      	movs	r6, r4
 80008f4:	e79e      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80008f6:	464b      	mov	r3, r9
 80008f8:	000c      	movs	r4, r1
 80008fa:	08d8      	lsrs	r0, r3, #3
 80008fc:	e79b      	b.n	8000836 <__aeabi_dadd+0x2ba>
 80008fe:	2700      	movs	r7, #0
 8000900:	4c01      	ldr	r4, [pc, #4]	@ (8000908 <__aeabi_dadd+0x38c>)
 8000902:	2600      	movs	r6, #0
 8000904:	e783      	b.n	800080e <__aeabi_dadd+0x292>
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff
 8000910:	000007fe 	.word	0x000007fe
 8000914:	464b      	mov	r3, r9
 8000916:	0777      	lsls	r7, r6, #29
 8000918:	08d8      	lsrs	r0, r3, #3
 800091a:	4307      	orrs	r7, r0
 800091c:	08f0      	lsrs	r0, r6, #3
 800091e:	e791      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000920:	4fcd      	ldr	r7, [pc, #820]	@ (8000c58 <__aeabi_dadd+0x6dc>)
 8000922:	1c61      	adds	r1, r4, #1
 8000924:	4239      	tst	r1, r7
 8000926:	d16b      	bne.n	8000a00 <__aeabi_dadd+0x484>
 8000928:	0031      	movs	r1, r6
 800092a:	4648      	mov	r0, r9
 800092c:	4301      	orrs	r1, r0
 800092e:	2c00      	cmp	r4, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x3b8>
 8000932:	e14b      	b.n	8000bcc <__aeabi_dadd+0x650>
 8000934:	001f      	movs	r7, r3
 8000936:	4317      	orrs	r7, r2
 8000938:	2900      	cmp	r1, #0
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x3c2>
 800093c:	e181      	b.n	8000c42 <__aeabi_dadd+0x6c6>
 800093e:	2f00      	cmp	r7, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x3c8>
 8000942:	e74c      	b.n	80007de <__aeabi_dadd+0x262>
 8000944:	444a      	add	r2, r9
 8000946:	454a      	cmp	r2, r9
 8000948:	4180      	sbcs	r0, r0
 800094a:	18f6      	adds	r6, r6, r3
 800094c:	4240      	negs	r0, r0
 800094e:	1836      	adds	r6, r6, r0
 8000950:	0233      	lsls	r3, r6, #8
 8000952:	d500      	bpl.n	8000956 <__aeabi_dadd+0x3da>
 8000954:	e1b0      	b.n	8000cb8 <__aeabi_dadd+0x73c>
 8000956:	0017      	movs	r7, r2
 8000958:	4691      	mov	r9, r2
 800095a:	4337      	orrs	r7, r6
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x3e4>
 800095e:	e73e      	b.n	80007de <__aeabi_dadd+0x262>
 8000960:	2600      	movs	r6, #0
 8000962:	e754      	b.n	800080e <__aeabi_dadd+0x292>
 8000964:	4649      	mov	r1, r9
 8000966:	1a89      	subs	r1, r1, r2
 8000968:	4688      	mov	r8, r1
 800096a:	45c1      	cmp	r9, r8
 800096c:	41bf      	sbcs	r7, r7
 800096e:	1af1      	subs	r1, r6, r3
 8000970:	427f      	negs	r7, r7
 8000972:	1bc9      	subs	r1, r1, r7
 8000974:	020f      	lsls	r7, r1, #8
 8000976:	d461      	bmi.n	8000a3c <__aeabi_dadd+0x4c0>
 8000978:	4647      	mov	r7, r8
 800097a:	430f      	orrs	r7, r1
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x404>
 800097e:	e0bd      	b.n	8000afc <__aeabi_dadd+0x580>
 8000980:	000e      	movs	r6, r1
 8000982:	4647      	mov	r7, r8
 8000984:	e651      	b.n	800062a <__aeabi_dadd+0xae>
 8000986:	4cb5      	ldr	r4, [pc, #724]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000988:	45a0      	cmp	r8, r4
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x412>
 800098c:	e100      	b.n	8000b90 <__aeabi_dadd+0x614>
 800098e:	2701      	movs	r7, #1
 8000990:	2938      	cmp	r1, #56	@ 0x38
 8000992:	dd00      	ble.n	8000996 <__aeabi_dadd+0x41a>
 8000994:	e6b8      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000996:	2480      	movs	r4, #128	@ 0x80
 8000998:	0424      	lsls	r4, r4, #16
 800099a:	4326      	orrs	r6, r4
 800099c:	e6a3      	b.n	80006e6 <__aeabi_dadd+0x16a>
 800099e:	4eb0      	ldr	r6, [pc, #704]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009a0:	1ae4      	subs	r4, r4, r3
 80009a2:	4016      	ands	r6, r2
 80009a4:	077b      	lsls	r3, r7, #29
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x42e>
 80009a8:	e73f      	b.n	800082a <__aeabi_dadd+0x2ae>
 80009aa:	e743      	b.n	8000834 <__aeabi_dadd+0x2b8>
 80009ac:	000f      	movs	r7, r1
 80009ae:	0018      	movs	r0, r3
 80009b0:	3f20      	subs	r7, #32
 80009b2:	40f8      	lsrs	r0, r7
 80009b4:	4684      	mov	ip, r0
 80009b6:	2920      	cmp	r1, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x446>
 80009ba:	2740      	movs	r7, #64	@ 0x40
 80009bc:	1a79      	subs	r1, r7, r1
 80009be:	408b      	lsls	r3, r1
 80009c0:	431a      	orrs	r2, r3
 80009c2:	1e53      	subs	r3, r2, #1
 80009c4:	419a      	sbcs	r2, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	0017      	movs	r7, r2
 80009ca:	431f      	orrs	r7, r3
 80009cc:	e622      	b.n	8000614 <__aeabi_dadd+0x98>
 80009ce:	48a4      	ldr	r0, [pc, #656]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 80009d0:	1ae1      	subs	r1, r4, r3
 80009d2:	4010      	ands	r0, r2
 80009d4:	0747      	lsls	r7, r0, #29
 80009d6:	08c0      	lsrs	r0, r0, #3
 80009d8:	e707      	b.n	80007ea <__aeabi_dadd+0x26e>
 80009da:	0034      	movs	r4, r6
 80009dc:	4648      	mov	r0, r9
 80009de:	4304      	orrs	r4, r0
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x468>
 80009e2:	e0fa      	b.n	8000bda <__aeabi_dadd+0x65e>
 80009e4:	1e4c      	subs	r4, r1, #1
 80009e6:	2901      	cmp	r1, #1
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x470>
 80009ea:	e0d7      	b.n	8000b9c <__aeabi_dadd+0x620>
 80009ec:	4f9b      	ldr	r7, [pc, #620]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 80009ee:	42b9      	cmp	r1, r7
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x478>
 80009f2:	e0e2      	b.n	8000bba <__aeabi_dadd+0x63e>
 80009f4:	2701      	movs	r7, #1
 80009f6:	2c38      	cmp	r4, #56	@ 0x38
 80009f8:	dd00      	ble.n	80009fc <__aeabi_dadd+0x480>
 80009fa:	e74f      	b.n	800089c <__aeabi_dadd+0x320>
 80009fc:	0021      	movs	r1, r4
 80009fe:	e73c      	b.n	800087a <__aeabi_dadd+0x2fe>
 8000a00:	4c96      	ldr	r4, [pc, #600]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x48c>
 8000a06:	e0dd      	b.n	8000bc4 <__aeabi_dadd+0x648>
 8000a08:	444a      	add	r2, r9
 8000a0a:	454a      	cmp	r2, r9
 8000a0c:	4180      	sbcs	r0, r0
 8000a0e:	18f3      	adds	r3, r6, r3
 8000a10:	4240      	negs	r0, r0
 8000a12:	1818      	adds	r0, r3, r0
 8000a14:	07c7      	lsls	r7, r0, #31
 8000a16:	0852      	lsrs	r2, r2, #1
 8000a18:	4317      	orrs	r7, r2
 8000a1a:	0846      	lsrs	r6, r0, #1
 8000a1c:	0752      	lsls	r2, r2, #29
 8000a1e:	d005      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a20:	220f      	movs	r2, #15
 8000a22:	000c      	movs	r4, r1
 8000a24:	403a      	ands	r2, r7
 8000a26:	2a04      	cmp	r2, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x4b0>
 8000a2a:	e62c      	b.n	8000686 <__aeabi_dadd+0x10a>
 8000a2c:	0776      	lsls	r6, r6, #29
 8000a2e:	08ff      	lsrs	r7, r7, #3
 8000a30:	4337      	orrs	r7, r6
 8000a32:	0900      	lsrs	r0, r0, #4
 8000a34:	e6d9      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000a36:	2700      	movs	r7, #0
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e6e8      	b.n	800080e <__aeabi_dadd+0x292>
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	1a57      	subs	r7, r2, r1
 8000a40:	42ba      	cmp	r2, r7
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	1b9e      	subs	r6, r3, r6
 8000a46:	4252      	negs	r2, r2
 8000a48:	4665      	mov	r5, ip
 8000a4a:	1ab6      	subs	r6, r6, r2
 8000a4c:	e5ed      	b.n	800062a <__aeabi_dadd+0xae>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x4d8>
 8000a52:	e0c6      	b.n	8000be2 <__aeabi_dadd+0x666>
 8000a54:	2f00      	cmp	r7, #0
 8000a56:	d167      	bne.n	8000b28 <__aeabi_dadd+0x5ac>
 8000a58:	2680      	movs	r6, #128	@ 0x80
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000c5c <__aeabi_dadd+0x6e0>)
 8000a5e:	0336      	lsls	r6, r6, #12
 8000a60:	e6d5      	b.n	800080e <__aeabi_dadd+0x292>
 8000a62:	4665      	mov	r5, ip
 8000a64:	000c      	movs	r4, r1
 8000a66:	001e      	movs	r6, r3
 8000a68:	08d0      	lsrs	r0, r2, #3
 8000a6a:	e6e4      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000a6c:	444a      	add	r2, r9
 8000a6e:	454a      	cmp	r2, r9
 8000a70:	4180      	sbcs	r0, r0
 8000a72:	18f3      	adds	r3, r6, r3
 8000a74:	4240      	negs	r0, r0
 8000a76:	1818      	adds	r0, r3, r0
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0203      	lsls	r3, r0, #8
 8000a7c:	d400      	bmi.n	8000a80 <__aeabi_dadd+0x504>
 8000a7e:	e096      	b.n	8000bae <__aeabi_dadd+0x632>
 8000a80:	4b77      	ldr	r3, [pc, #476]	@ (8000c60 <__aeabi_dadd+0x6e4>)
 8000a82:	0849      	lsrs	r1, r1, #1
 8000a84:	4018      	ands	r0, r3
 8000a86:	07c3      	lsls	r3, r0, #31
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	0844      	lsrs	r4, r0, #1
 8000a8c:	0749      	lsls	r1, r1, #29
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x516>
 8000a90:	e129      	b.n	8000ce6 <__aeabi_dadd+0x76a>
 8000a92:	220f      	movs	r2, #15
 8000a94:	401a      	ands	r2, r3
 8000a96:	2a04      	cmp	r2, #4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x520>
 8000a9a:	e0ea      	b.n	8000c72 <__aeabi_dadd+0x6f6>
 8000a9c:	1d1f      	adds	r7, r3, #4
 8000a9e:	429f      	cmp	r7, r3
 8000aa0:	41b6      	sbcs	r6, r6
 8000aa2:	4276      	negs	r6, r6
 8000aa4:	1936      	adds	r6, r6, r4
 8000aa6:	2402      	movs	r4, #2
 8000aa8:	e6c4      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000aaa:	4649      	mov	r1, r9
 8000aac:	1a8f      	subs	r7, r1, r2
 8000aae:	45b9      	cmp	r9, r7
 8000ab0:	4180      	sbcs	r0, r0
 8000ab2:	1af6      	subs	r6, r6, r3
 8000ab4:	4240      	negs	r0, r0
 8000ab6:	1a36      	subs	r6, r6, r0
 8000ab8:	0233      	lsls	r3, r6, #8
 8000aba:	d406      	bmi.n	8000aca <__aeabi_dadd+0x54e>
 8000abc:	0773      	lsls	r3, r6, #29
 8000abe:	08ff      	lsrs	r7, r7, #3
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	431f      	orrs	r7, r3
 8000ac4:	08f0      	lsrs	r0, r6, #3
 8000ac6:	e690      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000ac8:	4665      	mov	r5, ip
 8000aca:	2401      	movs	r4, #1
 8000acc:	e5ab      	b.n	8000626 <__aeabi_dadd+0xaa>
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0777      	lsls	r7, r6, #29
 8000ad2:	08d8      	lsrs	r0, r3, #3
 8000ad4:	4307      	orrs	r7, r0
 8000ad6:	08f0      	lsrs	r0, r6, #3
 8000ad8:	e6b4      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000ada:	000f      	movs	r7, r1
 8000adc:	0018      	movs	r0, r3
 8000ade:	3f20      	subs	r7, #32
 8000ae0:	40f8      	lsrs	r0, r7
 8000ae2:	4684      	mov	ip, r0
 8000ae4:	2920      	cmp	r1, #32
 8000ae6:	d003      	beq.n	8000af0 <__aeabi_dadd+0x574>
 8000ae8:	2740      	movs	r7, #64	@ 0x40
 8000aea:	1a79      	subs	r1, r7, r1
 8000aec:	408b      	lsls	r3, r1
 8000aee:	431a      	orrs	r2, r3
 8000af0:	1e53      	subs	r3, r2, #1
 8000af2:	419a      	sbcs	r2, r3
 8000af4:	4663      	mov	r3, ip
 8000af6:	0017      	movs	r7, r2
 8000af8:	431f      	orrs	r7, r3
 8000afa:	e635      	b.n	8000768 <__aeabi_dadd+0x1ec>
 8000afc:	2500      	movs	r5, #0
 8000afe:	2400      	movs	r4, #0
 8000b00:	2600      	movs	r6, #0
 8000b02:	e684      	b.n	800080e <__aeabi_dadd+0x292>
 8000b04:	000c      	movs	r4, r1
 8000b06:	0035      	movs	r5, r6
 8000b08:	3c20      	subs	r4, #32
 8000b0a:	40e5      	lsrs	r5, r4
 8000b0c:	2920      	cmp	r1, #32
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dadd+0x5a0>
 8000b10:	2440      	movs	r4, #64	@ 0x40
 8000b12:	1a61      	subs	r1, r4, r1
 8000b14:	408e      	lsls	r6, r1
 8000b16:	4649      	mov	r1, r9
 8000b18:	4331      	orrs	r1, r6
 8000b1a:	4689      	mov	r9, r1
 8000b1c:	4648      	mov	r0, r9
 8000b1e:	1e41      	subs	r1, r0, #1
 8000b20:	4188      	sbcs	r0, r1
 8000b22:	0007      	movs	r7, r0
 8000b24:	432f      	orrs	r7, r5
 8000b26:	e5ef      	b.n	8000708 <__aeabi_dadd+0x18c>
 8000b28:	08d2      	lsrs	r2, r2, #3
 8000b2a:	075f      	lsls	r7, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	08d8      	lsrs	r0, r3, #3
 8000b32:	e687      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b34:	1a17      	subs	r7, r2, r0
 8000b36:	42ba      	cmp	r2, r7
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	1b9e      	subs	r6, r3, r6
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1ab6      	subs	r6, r6, r2
 8000b40:	0233      	lsls	r3, r6, #8
 8000b42:	d4c1      	bmi.n	8000ac8 <__aeabi_dadd+0x54c>
 8000b44:	0773      	lsls	r3, r6, #29
 8000b46:	08ff      	lsrs	r7, r7, #3
 8000b48:	4665      	mov	r5, ip
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	431f      	orrs	r7, r3
 8000b4e:	08f0      	lsrs	r0, r6, #3
 8000b50:	e64b      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d07b      	beq.n	8000c4e <__aeabi_dadd+0x6d2>
 8000b56:	4665      	mov	r5, ip
 8000b58:	001e      	movs	r6, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	e63f      	b.n	80007de <__aeabi_dadd+0x262>
 8000b5e:	1a81      	subs	r1, r0, r2
 8000b60:	4688      	mov	r8, r1
 8000b62:	45c1      	cmp	r9, r8
 8000b64:	41a4      	sbcs	r4, r4
 8000b66:	1af1      	subs	r1, r6, r3
 8000b68:	4264      	negs	r4, r4
 8000b6a:	1b09      	subs	r1, r1, r4
 8000b6c:	2480      	movs	r4, #128	@ 0x80
 8000b6e:	0424      	lsls	r4, r4, #16
 8000b70:	4221      	tst	r1, r4
 8000b72:	d077      	beq.n	8000c64 <__aeabi_dadd+0x6e8>
 8000b74:	1a10      	subs	r0, r2, r0
 8000b76:	4282      	cmp	r2, r0
 8000b78:	4192      	sbcs	r2, r2
 8000b7a:	0007      	movs	r7, r0
 8000b7c:	1b9e      	subs	r6, r3, r6
 8000b7e:	4252      	negs	r2, r2
 8000b80:	1ab6      	subs	r6, r6, r2
 8000b82:	4337      	orrs	r7, r6
 8000b84:	d000      	beq.n	8000b88 <__aeabi_dadd+0x60c>
 8000b86:	e0a0      	b.n	8000cca <__aeabi_dadd+0x74e>
 8000b88:	4665      	mov	r5, ip
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e63e      	b.n	800080e <__aeabi_dadd+0x292>
 8000b90:	075f      	lsls	r7, r3, #29
 8000b92:	08d2      	lsrs	r2, r2, #3
 8000b94:	4665      	mov	r5, ip
 8000b96:	4317      	orrs	r7, r2
 8000b98:	08d8      	lsrs	r0, r3, #3
 8000b9a:	e653      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000b9c:	1881      	adds	r1, r0, r2
 8000b9e:	4291      	cmp	r1, r2
 8000ba0:	4192      	sbcs	r2, r2
 8000ba2:	18f0      	adds	r0, r6, r3
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	1880      	adds	r0, r0, r2
 8000ba8:	0203      	lsls	r3, r0, #8
 8000baa:	d500      	bpl.n	8000bae <__aeabi_dadd+0x632>
 8000bac:	e768      	b.n	8000a80 <__aeabi_dadd+0x504>
 8000bae:	0747      	lsls	r7, r0, #29
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	430f      	orrs	r7, r1
 8000bb4:	08c0      	lsrs	r0, r0, #3
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	e617      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000bba:	08d2      	lsrs	r2, r2, #3
 8000bbc:	075f      	lsls	r7, r3, #29
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	08d8      	lsrs	r0, r3, #3
 8000bc2:	e63f      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bc4:	000c      	movs	r4, r1
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	2700      	movs	r7, #0
 8000bca:	e620      	b.n	800080e <__aeabi_dadd+0x292>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d156      	bne.n	8000c7e <__aeabi_dadd+0x702>
 8000bd0:	075f      	lsls	r7, r3, #29
 8000bd2:	08d2      	lsrs	r2, r2, #3
 8000bd4:	4317      	orrs	r7, r2
 8000bd6:	08d8      	lsrs	r0, r3, #3
 8000bd8:	e634      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	001e      	movs	r6, r3
 8000bde:	08d0      	lsrs	r0, r2, #3
 8000be0:	e629      	b.n	8000836 <__aeabi_dadd+0x2ba>
 8000be2:	08c1      	lsrs	r1, r0, #3
 8000be4:	0770      	lsls	r0, r6, #29
 8000be6:	4301      	orrs	r1, r0
 8000be8:	08f0      	lsrs	r0, r6, #3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d062      	beq.n	8000cb4 <__aeabi_dadd+0x738>
 8000bee:	2480      	movs	r4, #128	@ 0x80
 8000bf0:	0324      	lsls	r4, r4, #12
 8000bf2:	4220      	tst	r0, r4
 8000bf4:	d007      	beq.n	8000c06 <__aeabi_dadd+0x68a>
 8000bf6:	08de      	lsrs	r6, r3, #3
 8000bf8:	4226      	tst	r6, r4
 8000bfa:	d104      	bne.n	8000c06 <__aeabi_dadd+0x68a>
 8000bfc:	4665      	mov	r5, ip
 8000bfe:	0030      	movs	r0, r6
 8000c00:	08d1      	lsrs	r1, r2, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4319      	orrs	r1, r3
 8000c06:	0f4f      	lsrs	r7, r1, #29
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	077f      	lsls	r7, r7, #29
 8000c0e:	430f      	orrs	r7, r1
 8000c10:	e618      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c12:	000c      	movs	r4, r1
 8000c14:	0030      	movs	r0, r6
 8000c16:	3c20      	subs	r4, #32
 8000c18:	40e0      	lsrs	r0, r4
 8000c1a:	4684      	mov	ip, r0
 8000c1c:	2920      	cmp	r1, #32
 8000c1e:	d005      	beq.n	8000c2c <__aeabi_dadd+0x6b0>
 8000c20:	2440      	movs	r4, #64	@ 0x40
 8000c22:	1a61      	subs	r1, r4, r1
 8000c24:	408e      	lsls	r6, r1
 8000c26:	4649      	mov	r1, r9
 8000c28:	4331      	orrs	r1, r6
 8000c2a:	4689      	mov	r9, r1
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1e41      	subs	r1, r0, #1
 8000c30:	4188      	sbcs	r0, r1
 8000c32:	4661      	mov	r1, ip
 8000c34:	0007      	movs	r7, r0
 8000c36:	430f      	orrs	r7, r1
 8000c38:	e630      	b.n	800089c <__aeabi_dadd+0x320>
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	1a09      	subs	r1, r1, r0
 8000c40:	e50e      	b.n	8000660 <__aeabi_dadd+0xe4>
 8000c42:	001e      	movs	r6, r3
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d000      	beq.n	8000c4a <__aeabi_dadd+0x6ce>
 8000c48:	e522      	b.n	8000690 <__aeabi_dadd+0x114>
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e758      	b.n	8000b00 <__aeabi_dadd+0x584>
 8000c4e:	2500      	movs	r5, #0
 8000c50:	2400      	movs	r4, #0
 8000c52:	2600      	movs	r6, #0
 8000c54:	e5db      	b.n	800080e <__aeabi_dadd+0x292>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	000007fe 	.word	0x000007fe
 8000c5c:	000007ff 	.word	0x000007ff
 8000c60:	ff7fffff 	.word	0xff7fffff
 8000c64:	4647      	mov	r7, r8
 8000c66:	430f      	orrs	r7, r1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x6f0>
 8000c6a:	e747      	b.n	8000afc <__aeabi_dadd+0x580>
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	46c1      	mov	r9, r8
 8000c70:	e5b5      	b.n	80007de <__aeabi_dadd+0x262>
 8000c72:	08df      	lsrs	r7, r3, #3
 8000c74:	0764      	lsls	r4, r4, #29
 8000c76:	2102      	movs	r1, #2
 8000c78:	4327      	orrs	r7, r4
 8000c7a:	0900      	lsrs	r0, r0, #4
 8000c7c:	e5b5      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000c7e:	0019      	movs	r1, r3
 8000c80:	08c0      	lsrs	r0, r0, #3
 8000c82:	0777      	lsls	r7, r6, #29
 8000c84:	4307      	orrs	r7, r0
 8000c86:	4311      	orrs	r1, r2
 8000c88:	08f0      	lsrs	r0, r6, #3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x714>
 8000c8e:	e5d9      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0309      	lsls	r1, r1, #12
 8000c94:	4208      	tst	r0, r1
 8000c96:	d007      	beq.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c98:	08dc      	lsrs	r4, r3, #3
 8000c9a:	420c      	tst	r4, r1
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_dadd+0x72c>
 8000c9e:	08d2      	lsrs	r2, r2, #3
 8000ca0:	075b      	lsls	r3, r3, #29
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	0017      	movs	r7, r2
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	0f7b      	lsrs	r3, r7, #29
 8000caa:	00ff      	lsls	r7, r7, #3
 8000cac:	08ff      	lsrs	r7, r7, #3
 8000cae:	075b      	lsls	r3, r3, #29
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	e5c7      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb4:	000f      	movs	r7, r1
 8000cb6:	e5c5      	b.n	8000844 <__aeabi_dadd+0x2c8>
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	4033      	ands	r3, r6
 8000cbe:	075f      	lsls	r7, r3, #29
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	2401      	movs	r4, #1
 8000cc4:	4317      	orrs	r7, r2
 8000cc6:	0b1e      	lsrs	r6, r3, #12
 8000cc8:	e5a1      	b.n	800080e <__aeabi_dadd+0x292>
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d012      	beq.n	8000cf4 <__aeabi_dadd+0x778>
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <__aeabi_dadd+0x788>)
 8000cd0:	4665      	mov	r5, ip
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	2401      	movs	r4, #1
 8000cd6:	401e      	ands	r6, r3
 8000cd8:	e4e6      	b.n	80006a8 <__aeabi_dadd+0x12c>
 8000cda:	0021      	movs	r1, r4
 8000cdc:	e585      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cde:	0017      	movs	r7, r2
 8000ce0:	e5a8      	b.n	8000834 <__aeabi_dadd+0x2b8>
 8000ce2:	003a      	movs	r2, r7
 8000ce4:	e4d4      	b.n	8000690 <__aeabi_dadd+0x114>
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	0764      	lsls	r4, r4, #29
 8000cea:	431c      	orrs	r4, r3
 8000cec:	0027      	movs	r7, r4
 8000cee:	2102      	movs	r1, #2
 8000cf0:	0900      	lsrs	r0, r0, #4
 8000cf2:	e57a      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	0777      	lsls	r7, r6, #29
 8000cf8:	4307      	orrs	r7, r0
 8000cfa:	4665      	mov	r5, ip
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	08f0      	lsrs	r0, r6, #3
 8000d00:	e573      	b.n	80007ea <__aeabi_dadd+0x26e>
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	ff7fffff 	.word	0xff7fffff

08000d08 <__aeabi_ddiv>:
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0a:	46de      	mov	lr, fp
 8000d0c:	4645      	mov	r5, r8
 8000d0e:	4657      	mov	r7, sl
 8000d10:	464e      	mov	r6, r9
 8000d12:	b5e0      	push	{r5, r6, r7, lr}
 8000d14:	b087      	sub	sp, #28
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	030b      	lsls	r3, r1, #12
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	469b      	mov	fp, r3
 8000d20:	0fca      	lsrs	r2, r1, #31
 8000d22:	004b      	lsls	r3, r1, #1
 8000d24:	0004      	movs	r4, r0
 8000d26:	4680      	mov	r8, r0
 8000d28:	0d5b      	lsrs	r3, r3, #21
 8000d2a:	9202      	str	r2, [sp, #8]
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x28>
 8000d2e:	e098      	b.n	8000e62 <__aeabi_ddiv+0x15a>
 8000d30:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d037      	beq.n	8000da6 <__aeabi_ddiv+0x9e>
 8000d36:	4659      	mov	r1, fp
 8000d38:	0f42      	lsrs	r2, r0, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	0409      	lsls	r1, r1, #16
 8000d42:	4311      	orrs	r1, r2
 8000d44:	00c2      	lsls	r2, r0, #3
 8000d46:	4690      	mov	r8, r2
 8000d48:	4a77      	ldr	r2, [pc, #476]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d4a:	4689      	mov	r9, r1
 8000d4c:	4692      	mov	sl, r2
 8000d4e:	449a      	add	sl, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	9e00      	ldr	r6, [sp, #0]
 8000d58:	9f01      	ldr	r7, [sp, #4]
 8000d5a:	033b      	lsls	r3, r7, #12
 8000d5c:	0b1b      	lsrs	r3, r3, #12
 8000d5e:	469b      	mov	fp, r3
 8000d60:	007b      	lsls	r3, r7, #1
 8000d62:	0030      	movs	r0, r6
 8000d64:	0d5b      	lsrs	r3, r3, #21
 8000d66:	0ffd      	lsrs	r5, r7, #31
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <__aeabi_ddiv+0x118>
 8000d6c:	4a6d      	ldr	r2, [pc, #436]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d048      	beq.n	8000e04 <__aeabi_ddiv+0xfc>
 8000d72:	4659      	mov	r1, fp
 8000d74:	0f72      	lsrs	r2, r6, #29
 8000d76:	00c9      	lsls	r1, r1, #3
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	2180      	movs	r1, #128	@ 0x80
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	468b      	mov	fp, r1
 8000d82:	4969      	ldr	r1, [pc, #420]	@ (8000f28 <__aeabi_ddiv+0x220>)
 8000d84:	00f2      	lsls	r2, r6, #3
 8000d86:	468c      	mov	ip, r1
 8000d88:	4651      	mov	r1, sl
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	469a      	mov	sl, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	9e02      	ldr	r6, [sp, #8]
 8000d94:	406e      	eors	r6, r5
 8000d96:	b2f6      	uxtb	r6, r6
 8000d98:	2c0f      	cmp	r4, #15
 8000d9a:	d900      	bls.n	8000d9e <__aeabi_ddiv+0x96>
 8000d9c:	e0ce      	b.n	8000f3c <__aeabi_ddiv+0x234>
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <__aeabi_ddiv+0x224>)
 8000da0:	00a4      	lsls	r4, r4, #2
 8000da2:	591b      	ldr	r3, [r3, r4]
 8000da4:	469f      	mov	pc, r3
 8000da6:	465a      	mov	r2, fp
 8000da8:	4302      	orrs	r2, r0
 8000daa:	4691      	mov	r9, r2
 8000dac:	d000      	beq.n	8000db0 <__aeabi_ddiv+0xa8>
 8000dae:	e090      	b.n	8000ed2 <__aeabi_ddiv+0x1ca>
 8000db0:	469a      	mov	sl, r3
 8000db2:	2302      	movs	r3, #2
 8000db4:	4690      	mov	r8, r2
 8000db6:	2408      	movs	r4, #8
 8000db8:	9303      	str	r3, [sp, #12]
 8000dba:	e7cc      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000dbc:	46cb      	mov	fp, r9
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	9d02      	ldr	r5, [sp, #8]
 8000dc2:	9903      	ldr	r1, [sp, #12]
 8000dc4:	2902      	cmp	r1, #2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0xc2>
 8000dc8:	e1de      	b.n	8001188 <__aeabi_ddiv+0x480>
 8000dca:	2903      	cmp	r1, #3
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0xc8>
 8000dce:	e08d      	b.n	8000eec <__aeabi_ddiv+0x1e4>
 8000dd0:	2901      	cmp	r1, #1
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_ddiv+0xce>
 8000dd4:	e179      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8000dd6:	002e      	movs	r6, r5
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2400      	movs	r4, #0
 8000dde:	4690      	mov	r8, r2
 8000de0:	051b      	lsls	r3, r3, #20
 8000de2:	4323      	orrs	r3, r4
 8000de4:	07f6      	lsls	r6, r6, #31
 8000de6:	4333      	orrs	r3, r6
 8000de8:	4640      	mov	r0, r8
 8000dea:	0019      	movs	r1, r3
 8000dec:	b007      	add	sp, #28
 8000dee:	bcf0      	pop	{r4, r5, r6, r7}
 8000df0:	46bb      	mov	fp, r7
 8000df2:	46b2      	mov	sl, r6
 8000df4:	46a9      	mov	r9, r5
 8000df6:	46a0      	mov	r8, r4
 8000df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2400      	movs	r4, #0
 8000dfe:	4690      	mov	r8, r2
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000e02:	e7ed      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000e04:	465a      	mov	r2, fp
 8000e06:	9b00      	ldr	r3, [sp, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	4b49      	ldr	r3, [pc, #292]	@ (8000f30 <__aeabi_ddiv+0x228>)
 8000e0c:	469c      	mov	ip, r3
 8000e0e:	44e2      	add	sl, ip
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d159      	bne.n	8000ec8 <__aeabi_ddiv+0x1c0>
 8000e14:	2302      	movs	r3, #2
 8000e16:	431c      	orrs	r4, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	e7b8      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e20:	465a      	mov	r2, fp
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	d049      	beq.n	8000ebc <__aeabi_ddiv+0x1b4>
 8000e28:	465b      	mov	r3, fp
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x128>
 8000e2e:	e19c      	b.n	800116a <__aeabi_ddiv+0x462>
 8000e30:	4658      	mov	r0, fp
 8000e32:	f001 fb43 	bl	80024bc <__clzsi2>
 8000e36:	0002      	movs	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	3a0b      	subs	r2, #11
 8000e3c:	271d      	movs	r7, #29
 8000e3e:	9e00      	ldr	r6, [sp, #0]
 8000e40:	1aba      	subs	r2, r7, r2
 8000e42:	0019      	movs	r1, r3
 8000e44:	4658      	mov	r0, fp
 8000e46:	40d6      	lsrs	r6, r2
 8000e48:	3908      	subs	r1, #8
 8000e4a:	4088      	lsls	r0, r1
 8000e4c:	0032      	movs	r2, r6
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	4693      	mov	fp, r2
 8000e52:	9a00      	ldr	r2, [sp, #0]
 8000e54:	408a      	lsls	r2, r1
 8000e56:	4937      	ldr	r1, [pc, #220]	@ (8000f34 <__aeabi_ddiv+0x22c>)
 8000e58:	4453      	add	r3, sl
 8000e5a:	468a      	mov	sl, r1
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	449a      	add	sl, r3
 8000e60:	e797      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000e62:	465b      	mov	r3, fp
 8000e64:	4303      	orrs	r3, r0
 8000e66:	4699      	mov	r9, r3
 8000e68:	d021      	beq.n	8000eae <__aeabi_ddiv+0x1a6>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x16a>
 8000e70:	e169      	b.n	8001146 <__aeabi_ddiv+0x43e>
 8000e72:	4658      	mov	r0, fp
 8000e74:	f001 fb22 	bl	80024bc <__clzsi2>
 8000e78:	230b      	movs	r3, #11
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	469c      	mov	ip, r3
 8000e7e:	0002      	movs	r2, r0
 8000e80:	4484      	add	ip, r0
 8000e82:	4666      	mov	r6, ip
 8000e84:	231d      	movs	r3, #29
 8000e86:	1b9b      	subs	r3, r3, r6
 8000e88:	0026      	movs	r6, r4
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	4658      	mov	r0, fp
 8000e8e:	40de      	lsrs	r6, r3
 8000e90:	3908      	subs	r1, #8
 8000e92:	4088      	lsls	r0, r1
 8000e94:	0033      	movs	r3, r6
 8000e96:	4303      	orrs	r3, r0
 8000e98:	4699      	mov	r9, r3
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	408b      	lsls	r3, r1
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <__aeabi_ddiv+0x230>)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	469a      	mov	sl, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	e753      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2404      	movs	r4, #4
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e74c      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	431c      	orrs	r4, r3
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	469b      	mov	fp, r3
 8000ec6:	e764      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	0032      	movs	r2, r6
 8000ecc:	2103      	movs	r1, #3
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	e75f      	b.n	8000d92 <__aeabi_ddiv+0x8a>
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	46d9      	mov	r9, fp
 8000ed8:	240c      	movs	r4, #12
 8000eda:	9303      	str	r3, [sp, #12]
 8000edc:	e73b      	b.n	8000d56 <__aeabi_ddiv+0x4e>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2480      	movs	r4, #128	@ 0x80
 8000ee2:	4698      	mov	r8, r3
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000ee8:	0324      	lsls	r4, r4, #12
 8000eea:	e779      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000eec:	2480      	movs	r4, #128	@ 0x80
 8000eee:	465b      	mov	r3, fp
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	0324      	lsls	r4, r4, #12
 8000ef6:	002e      	movs	r6, r5
 8000ef8:	4690      	mov	r8, r2
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000efc:	0b24      	lsrs	r4, r4, #12
 8000efe:	e76f      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f00:	2480      	movs	r4, #128	@ 0x80
 8000f02:	464b      	mov	r3, r9
 8000f04:	0324      	lsls	r4, r4, #12
 8000f06:	4223      	tst	r3, r4
 8000f08:	d002      	beq.n	8000f10 <__aeabi_ddiv+0x208>
 8000f0a:	465b      	mov	r3, fp
 8000f0c:	4223      	tst	r3, r4
 8000f0e:	d0f0      	beq.n	8000ef2 <__aeabi_ddiv+0x1ea>
 8000f10:	2480      	movs	r4, #128	@ 0x80
 8000f12:	464b      	mov	r3, r9
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	431c      	orrs	r4, r3
 8000f18:	0324      	lsls	r4, r4, #12
 8000f1a:	9e02      	ldr	r6, [sp, #8]
 8000f1c:	4b01      	ldr	r3, [pc, #4]	@ (8000f24 <__aeabi_ddiv+0x21c>)
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	e75e      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff
 8000f28:	fffffc01 	.word	0xfffffc01
 8000f2c:	080130a8 	.word	0x080130a8
 8000f30:	fffff801 	.word	0xfffff801
 8000f34:	000003f3 	.word	0x000003f3
 8000f38:	fffffc0d 	.word	0xfffffc0d
 8000f3c:	45cb      	cmp	fp, r9
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0x23a>
 8000f40:	e0f8      	b.n	8001134 <__aeabi_ddiv+0x42c>
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0x23e>
 8000f44:	e0f3      	b.n	800112e <__aeabi_ddiv+0x426>
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4648      	mov	r0, r9
 8000f50:	2500      	movs	r5, #0
 8000f52:	44e2      	add	sl, ip
 8000f54:	465b      	mov	r3, fp
 8000f56:	0e17      	lsrs	r7, r2, #24
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c19      	lsrs	r1, r3, #16
 8000f5e:	043b      	lsls	r3, r7, #16
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	9700      	str	r7, [sp, #0]
 8000f64:	0c1f      	lsrs	r7, r3, #16
 8000f66:	4691      	mov	r9, r2
 8000f68:	9102      	str	r1, [sp, #8]
 8000f6a:	9703      	str	r7, [sp, #12]
 8000f6c:	f7ff f96a 	bl	8000244 <__aeabi_uidivmod>
 8000f70:	0002      	movs	r2, r0
 8000f72:	437a      	muls	r2, r7
 8000f74:	040b      	lsls	r3, r1, #16
 8000f76:	0c21      	lsrs	r1, r4, #16
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4319      	orrs	r1, r3
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d909      	bls.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f80:	9f00      	ldr	r7, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	46bc      	mov	ip, r7
 8000f86:	425b      	negs	r3, r3
 8000f88:	4461      	add	r1, ip
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	44e0      	add	r8, ip
 8000f8e:	428f      	cmp	r7, r1
 8000f90:	d800      	bhi.n	8000f94 <__aeabi_ddiv+0x28c>
 8000f92:	e15c      	b.n	800124e <__aeabi_ddiv+0x546>
 8000f94:	1a88      	subs	r0, r1, r2
 8000f96:	9902      	ldr	r1, [sp, #8]
 8000f98:	f7ff f954 	bl	8000244 <__aeabi_uidivmod>
 8000f9c:	9a03      	ldr	r2, [sp, #12]
 8000f9e:	0424      	lsls	r4, r4, #16
 8000fa0:	4342      	muls	r2, r0
 8000fa2:	0409      	lsls	r1, r1, #16
 8000fa4:	0c24      	lsrs	r4, r4, #16
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	430c      	orrs	r4, r1
 8000faa:	42a2      	cmp	r2, r4
 8000fac:	d906      	bls.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fae:	9900      	ldr	r1, [sp, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	468c      	mov	ip, r1
 8000fb4:	4464      	add	r4, ip
 8000fb6:	42a1      	cmp	r1, r4
 8000fb8:	d800      	bhi.n	8000fbc <__aeabi_ddiv+0x2b4>
 8000fba:	e142      	b.n	8001242 <__aeabi_ddiv+0x53a>
 8000fbc:	1aa0      	subs	r0, r4, r2
 8000fbe:	4642      	mov	r2, r8
 8000fc0:	0412      	lsls	r2, r2, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4659      	mov	r1, fp
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	001f      	movs	r7, r3
 8000fce:	9304      	str	r3, [sp, #16]
 8000fd0:	040b      	lsls	r3, r1, #16
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	0409      	lsls	r1, r1, #16
 8000fd6:	0c09      	lsrs	r1, r1, #16
 8000fd8:	000c      	movs	r4, r1
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	435c      	muls	r4, r3
 8000fde:	0c12      	lsrs	r2, r2, #16
 8000fe0:	437b      	muls	r3, r7
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4351      	muls	r1, r2
 8000fe6:	437a      	muls	r2, r7
 8000fe8:	0c27      	lsrs	r7, r4, #16
 8000fea:	46bc      	mov	ip, r7
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	4463      	add	r3, ip
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	d903      	bls.n	8000ffc <__aeabi_ddiv+0x2f4>
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	0249      	lsls	r1, r1, #9
 8000ff8:	468c      	mov	ip, r1
 8000ffa:	4462      	add	r2, ip
 8000ffc:	0c19      	lsrs	r1, r3, #16
 8000ffe:	0424      	lsls	r4, r4, #16
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c24      	lsrs	r4, r4, #16
 8001004:	188a      	adds	r2, r1, r2
 8001006:	191c      	adds	r4, r3, r4
 8001008:	4290      	cmp	r0, r2
 800100a:	d302      	bcc.n	8001012 <__aeabi_ddiv+0x30a>
 800100c:	d116      	bne.n	800103c <__aeabi_ddiv+0x334>
 800100e:	42a5      	cmp	r5, r4
 8001010:	d214      	bcs.n	800103c <__aeabi_ddiv+0x334>
 8001012:	465b      	mov	r3, fp
 8001014:	9f00      	ldr	r7, [sp, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	444d      	add	r5, r9
 800101a:	9305      	str	r3, [sp, #20]
 800101c:	454d      	cmp	r5, r9
 800101e:	419b      	sbcs	r3, r3
 8001020:	46bc      	mov	ip, r7
 8001022:	425b      	negs	r3, r3
 8001024:	4463      	add	r3, ip
 8001026:	18c0      	adds	r0, r0, r3
 8001028:	4287      	cmp	r7, r0
 800102a:	d300      	bcc.n	800102e <__aeabi_ddiv+0x326>
 800102c:	e102      	b.n	8001234 <__aeabi_ddiv+0x52c>
 800102e:	4282      	cmp	r2, r0
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x32c>
 8001032:	e129      	b.n	8001288 <__aeabi_ddiv+0x580>
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x330>
 8001036:	e124      	b.n	8001282 <__aeabi_ddiv+0x57a>
 8001038:	9b05      	ldr	r3, [sp, #20]
 800103a:	469b      	mov	fp, r3
 800103c:	1b2c      	subs	r4, r5, r4
 800103e:	42a5      	cmp	r5, r4
 8001040:	41ad      	sbcs	r5, r5
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	1a80      	subs	r0, r0, r2
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4283      	cmp	r3, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x348>
 800104e:	e10f      	b.n	8001270 <__aeabi_ddiv+0x568>
 8001050:	9902      	ldr	r1, [sp, #8]
 8001052:	f7ff f8f7 	bl	8000244 <__aeabi_uidivmod>
 8001056:	9a03      	ldr	r2, [sp, #12]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c21      	lsrs	r1, r4, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x360>
 8001066:	e0cb      	b.n	8001200 <__aeabi_ddiv+0x4f8>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	9902      	ldr	r1, [sp, #8]
 800106c:	f7ff f8ea 	bl	8000244 <__aeabi_uidivmod>
 8001070:	9a03      	ldr	r2, [sp, #12]
 8001072:	0424      	lsls	r4, r4, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c24      	lsrs	r4, r4, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430c      	orrs	r4, r1
 800107e:	42a2      	cmp	r2, r4
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x37c>
 8001082:	e0ca      	b.n	800121a <__aeabi_ddiv+0x512>
 8001084:	4641      	mov	r1, r8
 8001086:	1aa4      	subs	r4, r4, r2
 8001088:	042a      	lsls	r2, r5, #16
 800108a:	431a      	orrs	r2, r3
 800108c:	9f04      	ldr	r7, [sp, #16]
 800108e:	0413      	lsls	r3, r2, #16
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	4359      	muls	r1, r3
 8001094:	4640      	mov	r0, r8
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c15      	lsrs	r5, r2, #16
 800109c:	4368      	muls	r0, r5
 800109e:	0c0b      	lsrs	r3, r1, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	437d      	muls	r5, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x3aa>
 80010aa:	2080      	movs	r0, #128	@ 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4465      	add	r5, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0409      	lsls	r1, r1, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c09      	lsrs	r1, r1, #16
 80010ba:	1940      	adds	r0, r0, r5
 80010bc:	185b      	adds	r3, r3, r1
 80010be:	4284      	cmp	r4, r0
 80010c0:	d327      	bcc.n	8001112 <__aeabi_ddiv+0x40a>
 80010c2:	d023      	beq.n	800110c <__aeabi_ddiv+0x404>
 80010c4:	2301      	movs	r3, #1
 80010c6:	0035      	movs	r5, r6
 80010c8:	431a      	orrs	r2, r3
 80010ca:	4b94      	ldr	r3, [pc, #592]	@ (800131c <__aeabi_ddiv+0x614>)
 80010cc:	4453      	add	r3, sl
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd60      	ble.n	8001194 <__aeabi_ddiv+0x48c>
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	d000      	beq.n	80010d8 <__aeabi_ddiv+0x3d0>
 80010d6:	e086      	b.n	80011e6 <__aeabi_ddiv+0x4de>
 80010d8:	002e      	movs	r6, r5
 80010da:	08d1      	lsrs	r1, r2, #3
 80010dc:	465a      	mov	r2, fp
 80010de:	01d2      	lsls	r2, r2, #7
 80010e0:	d506      	bpl.n	80010f0 <__aeabi_ddiv+0x3e8>
 80010e2:	465a      	mov	r2, fp
 80010e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001320 <__aeabi_ddiv+0x618>)
 80010e6:	401a      	ands	r2, r3
 80010e8:	2380      	movs	r3, #128	@ 0x80
 80010ea:	4693      	mov	fp, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4453      	add	r3, sl
 80010f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001324 <__aeabi_ddiv+0x61c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_ddiv+0x3f0>
 80010f6:	e680      	b.n	8000dfa <__aeabi_ddiv+0xf2>
 80010f8:	465a      	mov	r2, fp
 80010fa:	0752      	lsls	r2, r2, #29
 80010fc:	430a      	orrs	r2, r1
 80010fe:	4690      	mov	r8, r2
 8001100:	465a      	mov	r2, fp
 8001102:	055b      	lsls	r3, r3, #21
 8001104:	0254      	lsls	r4, r2, #9
 8001106:	0b24      	lsrs	r4, r4, #12
 8001108:	0d5b      	lsrs	r3, r3, #21
 800110a:	e669      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 800110c:	0035      	movs	r5, r6
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0db      	beq.n	80010ca <__aeabi_ddiv+0x3c2>
 8001112:	9d00      	ldr	r5, [sp, #0]
 8001114:	1e51      	subs	r1, r2, #1
 8001116:	46ac      	mov	ip, r5
 8001118:	4464      	add	r4, ip
 800111a:	42ac      	cmp	r4, r5
 800111c:	d200      	bcs.n	8001120 <__aeabi_ddiv+0x418>
 800111e:	e09e      	b.n	800125e <__aeabi_ddiv+0x556>
 8001120:	4284      	cmp	r4, r0
 8001122:	d200      	bcs.n	8001126 <__aeabi_ddiv+0x41e>
 8001124:	e0e1      	b.n	80012ea <__aeabi_ddiv+0x5e2>
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x422>
 8001128:	e0ee      	b.n	8001308 <__aeabi_ddiv+0x600>
 800112a:	000a      	movs	r2, r1
 800112c:	e7ca      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800112e:	4542      	cmp	r2, r8
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x42c>
 8001132:	e708      	b.n	8000f46 <__aeabi_ddiv+0x23e>
 8001134:	464b      	mov	r3, r9
 8001136:	07dc      	lsls	r4, r3, #31
 8001138:	0858      	lsrs	r0, r3, #1
 800113a:	4643      	mov	r3, r8
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	431c      	orrs	r4, r3
 8001140:	4643      	mov	r3, r8
 8001142:	07dd      	lsls	r5, r3, #31
 8001144:	e706      	b.n	8000f54 <__aeabi_ddiv+0x24c>
 8001146:	f001 f9b9 	bl	80024bc <__clzsi2>
 800114a:	2315      	movs	r3, #21
 800114c:	469c      	mov	ip, r3
 800114e:	4484      	add	ip, r0
 8001150:	0002      	movs	r2, r0
 8001152:	4663      	mov	r3, ip
 8001154:	3220      	adds	r2, #32
 8001156:	2b1c      	cmp	r3, #28
 8001158:	dc00      	bgt.n	800115c <__aeabi_ddiv+0x454>
 800115a:	e692      	b.n	8000e82 <__aeabi_ddiv+0x17a>
 800115c:	0023      	movs	r3, r4
 800115e:	3808      	subs	r0, #8
 8001160:	4083      	lsls	r3, r0
 8001162:	4699      	mov	r9, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4698      	mov	r8, r3
 8001168:	e69a      	b.n	8000ea0 <__aeabi_ddiv+0x198>
 800116a:	f001 f9a7 	bl	80024bc <__clzsi2>
 800116e:	0002      	movs	r2, r0
 8001170:	0003      	movs	r3, r0
 8001172:	3215      	adds	r2, #21
 8001174:	3320      	adds	r3, #32
 8001176:	2a1c      	cmp	r2, #28
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x474>
 800117a:	e65f      	b.n	8000e3c <__aeabi_ddiv+0x134>
 800117c:	9900      	ldr	r1, [sp, #0]
 800117e:	3808      	subs	r0, #8
 8001180:	4081      	lsls	r1, r0
 8001182:	2200      	movs	r2, #0
 8001184:	468b      	mov	fp, r1
 8001186:	e666      	b.n	8000e56 <__aeabi_ddiv+0x14e>
 8001188:	2200      	movs	r2, #0
 800118a:	002e      	movs	r6, r5
 800118c:	2400      	movs	r4, #0
 800118e:	4690      	mov	r8, r2
 8001190:	4b65      	ldr	r3, [pc, #404]	@ (8001328 <__aeabi_ddiv+0x620>)
 8001192:	e625      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 8001194:	002e      	movs	r6, r5
 8001196:	2101      	movs	r1, #1
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	2938      	cmp	r1, #56	@ 0x38
 800119c:	dd00      	ble.n	80011a0 <__aeabi_ddiv+0x498>
 800119e:	e61b      	b.n	8000dd8 <__aeabi_ddiv+0xd0>
 80011a0:	291f      	cmp	r1, #31
 80011a2:	dc7e      	bgt.n	80012a2 <__aeabi_ddiv+0x59a>
 80011a4:	4861      	ldr	r0, [pc, #388]	@ (800132c <__aeabi_ddiv+0x624>)
 80011a6:	0014      	movs	r4, r2
 80011a8:	4450      	add	r0, sl
 80011aa:	465b      	mov	r3, fp
 80011ac:	4082      	lsls	r2, r0
 80011ae:	4083      	lsls	r3, r0
 80011b0:	40cc      	lsrs	r4, r1
 80011b2:	1e50      	subs	r0, r2, #1
 80011b4:	4182      	sbcs	r2, r0
 80011b6:	4323      	orrs	r3, r4
 80011b8:	431a      	orrs	r2, r3
 80011ba:	465b      	mov	r3, fp
 80011bc:	40cb      	lsrs	r3, r1
 80011be:	0751      	lsls	r1, r2, #29
 80011c0:	d009      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011c2:	210f      	movs	r1, #15
 80011c4:	4011      	ands	r1, r2
 80011c6:	2904      	cmp	r1, #4
 80011c8:	d005      	beq.n	80011d6 <__aeabi_ddiv+0x4ce>
 80011ca:	1d11      	adds	r1, r2, #4
 80011cc:	4291      	cmp	r1, r2
 80011ce:	4192      	sbcs	r2, r2
 80011d0:	4252      	negs	r2, r2
 80011d2:	189b      	adds	r3, r3, r2
 80011d4:	000a      	movs	r2, r1
 80011d6:	0219      	lsls	r1, r3, #8
 80011d8:	d400      	bmi.n	80011dc <__aeabi_ddiv+0x4d4>
 80011da:	e09b      	b.n	8001314 <__aeabi_ddiv+0x60c>
 80011dc:	2200      	movs	r2, #0
 80011de:	2301      	movs	r3, #1
 80011e0:	2400      	movs	r4, #0
 80011e2:	4690      	mov	r8, r2
 80011e4:	e5fc      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80011e6:	210f      	movs	r1, #15
 80011e8:	4011      	ands	r1, r2
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d100      	bne.n	80011f0 <__aeabi_ddiv+0x4e8>
 80011ee:	e773      	b.n	80010d8 <__aeabi_ddiv+0x3d0>
 80011f0:	1d11      	adds	r1, r2, #4
 80011f2:	4291      	cmp	r1, r2
 80011f4:	4192      	sbcs	r2, r2
 80011f6:	4252      	negs	r2, r2
 80011f8:	002e      	movs	r6, r5
 80011fa:	08c9      	lsrs	r1, r1, #3
 80011fc:	4493      	add	fp, r2
 80011fe:	e76d      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001200:	9b00      	ldr	r3, [sp, #0]
 8001202:	3d01      	subs	r5, #1
 8001204:	469c      	mov	ip, r3
 8001206:	4461      	add	r1, ip
 8001208:	428b      	cmp	r3, r1
 800120a:	d900      	bls.n	800120e <__aeabi_ddiv+0x506>
 800120c:	e72c      	b.n	8001068 <__aeabi_ddiv+0x360>
 800120e:	428a      	cmp	r2, r1
 8001210:	d800      	bhi.n	8001214 <__aeabi_ddiv+0x50c>
 8001212:	e729      	b.n	8001068 <__aeabi_ddiv+0x360>
 8001214:	1e85      	subs	r5, r0, #2
 8001216:	4461      	add	r1, ip
 8001218:	e726      	b.n	8001068 <__aeabi_ddiv+0x360>
 800121a:	9900      	ldr	r1, [sp, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	468c      	mov	ip, r1
 8001220:	4464      	add	r4, ip
 8001222:	42a1      	cmp	r1, r4
 8001224:	d900      	bls.n	8001228 <__aeabi_ddiv+0x520>
 8001226:	e72d      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001228:	42a2      	cmp	r2, r4
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x526>
 800122c:	e72a      	b.n	8001084 <__aeabi_ddiv+0x37c>
 800122e:	1e83      	subs	r3, r0, #2
 8001230:	4464      	add	r4, ip
 8001232:	e727      	b.n	8001084 <__aeabi_ddiv+0x37c>
 8001234:	4287      	cmp	r7, r0
 8001236:	d000      	beq.n	800123a <__aeabi_ddiv+0x532>
 8001238:	e6fe      	b.n	8001038 <__aeabi_ddiv+0x330>
 800123a:	45a9      	cmp	r9, r5
 800123c:	d900      	bls.n	8001240 <__aeabi_ddiv+0x538>
 800123e:	e6fb      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001240:	e6f5      	b.n	800102e <__aeabi_ddiv+0x326>
 8001242:	42a2      	cmp	r2, r4
 8001244:	d800      	bhi.n	8001248 <__aeabi_ddiv+0x540>
 8001246:	e6b9      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 8001248:	1e83      	subs	r3, r0, #2
 800124a:	4464      	add	r4, ip
 800124c:	e6b6      	b.n	8000fbc <__aeabi_ddiv+0x2b4>
 800124e:	428a      	cmp	r2, r1
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x54c>
 8001252:	e69f      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 8001254:	46bc      	mov	ip, r7
 8001256:	1e83      	subs	r3, r0, #2
 8001258:	4698      	mov	r8, r3
 800125a:	4461      	add	r1, ip
 800125c:	e69a      	b.n	8000f94 <__aeabi_ddiv+0x28c>
 800125e:	000a      	movs	r2, r1
 8001260:	4284      	cmp	r4, r0
 8001262:	d000      	beq.n	8001266 <__aeabi_ddiv+0x55e>
 8001264:	e72e      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 8001266:	454b      	cmp	r3, r9
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x564>
 800126a:	e72b      	b.n	80010c4 <__aeabi_ddiv+0x3bc>
 800126c:	0035      	movs	r5, r6
 800126e:	e72c      	b.n	80010ca <__aeabi_ddiv+0x3c2>
 8001270:	4b2a      	ldr	r3, [pc, #168]	@ (800131c <__aeabi_ddiv+0x614>)
 8001272:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <__aeabi_ddiv+0x628>)
 8001274:	4453      	add	r3, sl
 8001276:	4592      	cmp	sl, r2
 8001278:	db43      	blt.n	8001302 <__aeabi_ddiv+0x5fa>
 800127a:	2201      	movs	r2, #1
 800127c:	2100      	movs	r1, #0
 800127e:	4493      	add	fp, r2
 8001280:	e72c      	b.n	80010dc <__aeabi_ddiv+0x3d4>
 8001282:	42ac      	cmp	r4, r5
 8001284:	d800      	bhi.n	8001288 <__aeabi_ddiv+0x580>
 8001286:	e6d7      	b.n	8001038 <__aeabi_ddiv+0x330>
 8001288:	2302      	movs	r3, #2
 800128a:	425b      	negs	r3, r3
 800128c:	469c      	mov	ip, r3
 800128e:	9900      	ldr	r1, [sp, #0]
 8001290:	444d      	add	r5, r9
 8001292:	454d      	cmp	r5, r9
 8001294:	419b      	sbcs	r3, r3
 8001296:	44e3      	add	fp, ip
 8001298:	468c      	mov	ip, r1
 800129a:	425b      	negs	r3, r3
 800129c:	4463      	add	r3, ip
 800129e:	18c0      	adds	r0, r0, r3
 80012a0:	e6cc      	b.n	800103c <__aeabi_ddiv+0x334>
 80012a2:	201f      	movs	r0, #31
 80012a4:	4240      	negs	r0, r0
 80012a6:	1ac3      	subs	r3, r0, r3
 80012a8:	4658      	mov	r0, fp
 80012aa:	40d8      	lsrs	r0, r3
 80012ac:	2920      	cmp	r1, #32
 80012ae:	d004      	beq.n	80012ba <__aeabi_ddiv+0x5b2>
 80012b0:	4659      	mov	r1, fp
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <__aeabi_ddiv+0x62c>)
 80012b4:	4453      	add	r3, sl
 80012b6:	4099      	lsls	r1, r3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	1e53      	subs	r3, r2, #1
 80012bc:	419a      	sbcs	r2, r3
 80012be:	2307      	movs	r3, #7
 80012c0:	0019      	movs	r1, r3
 80012c2:	4302      	orrs	r2, r0
 80012c4:	2400      	movs	r4, #0
 80012c6:	4011      	ands	r1, r2
 80012c8:	4213      	tst	r3, r2
 80012ca:	d009      	beq.n	80012e0 <__aeabi_ddiv+0x5d8>
 80012cc:	3308      	adds	r3, #8
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d01d      	beq.n	8001310 <__aeabi_ddiv+0x608>
 80012d4:	1d13      	adds	r3, r2, #4
 80012d6:	4293      	cmp	r3, r2
 80012d8:	4189      	sbcs	r1, r1
 80012da:	001a      	movs	r2, r3
 80012dc:	4249      	negs	r1, r1
 80012de:	0749      	lsls	r1, r1, #29
 80012e0:	08d2      	lsrs	r2, r2, #3
 80012e2:	430a      	orrs	r2, r1
 80012e4:	4690      	mov	r8, r2
 80012e6:	2300      	movs	r3, #0
 80012e8:	e57a      	b.n	8000de0 <__aeabi_ddiv+0xd8>
 80012ea:	4649      	mov	r1, r9
 80012ec:	9f00      	ldr	r7, [sp, #0]
 80012ee:	004d      	lsls	r5, r1, #1
 80012f0:	454d      	cmp	r5, r9
 80012f2:	4189      	sbcs	r1, r1
 80012f4:	46bc      	mov	ip, r7
 80012f6:	4249      	negs	r1, r1
 80012f8:	4461      	add	r1, ip
 80012fa:	46a9      	mov	r9, r5
 80012fc:	3a02      	subs	r2, #2
 80012fe:	1864      	adds	r4, r4, r1
 8001300:	e7ae      	b.n	8001260 <__aeabi_ddiv+0x558>
 8001302:	2201      	movs	r2, #1
 8001304:	4252      	negs	r2, r2
 8001306:	e746      	b.n	8001196 <__aeabi_ddiv+0x48e>
 8001308:	4599      	cmp	r9, r3
 800130a:	d3ee      	bcc.n	80012ea <__aeabi_ddiv+0x5e2>
 800130c:	000a      	movs	r2, r1
 800130e:	e7aa      	b.n	8001266 <__aeabi_ddiv+0x55e>
 8001310:	2100      	movs	r1, #0
 8001312:	e7e5      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	025b      	lsls	r3, r3, #9
 8001318:	0b1c      	lsrs	r4, r3, #12
 800131a:	e7e1      	b.n	80012e0 <__aeabi_ddiv+0x5d8>
 800131c:	000003ff 	.word	0x000003ff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	000007fe 	.word	0x000007fe
 8001328:	000007ff 	.word	0x000007ff
 800132c:	0000041e 	.word	0x0000041e
 8001330:	fffffc02 	.word	0xfffffc02
 8001334:	0000043e 	.word	0x0000043e

08001338 <__eqdf2>:
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	4657      	mov	r7, sl
 800133c:	46de      	mov	lr, fp
 800133e:	464e      	mov	r6, r9
 8001340:	4645      	mov	r5, r8
 8001342:	b5e0      	push	{r5, r6, r7, lr}
 8001344:	000d      	movs	r5, r1
 8001346:	0004      	movs	r4, r0
 8001348:	0fe8      	lsrs	r0, r5, #31
 800134a:	4683      	mov	fp, r0
 800134c:	0309      	lsls	r1, r1, #12
 800134e:	0fd8      	lsrs	r0, r3, #31
 8001350:	0b09      	lsrs	r1, r1, #12
 8001352:	4682      	mov	sl, r0
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <__eqdf2+0x84>)
 8001356:	468c      	mov	ip, r1
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	0069      	lsls	r1, r5, #1
 800135c:	005e      	lsls	r6, r3, #1
 800135e:	0d49      	lsrs	r1, r1, #21
 8001360:	0b3f      	lsrs	r7, r7, #12
 8001362:	0d76      	lsrs	r6, r6, #21
 8001364:	4281      	cmp	r1, r0
 8001366:	d018      	beq.n	800139a <__eqdf2+0x62>
 8001368:	4286      	cmp	r6, r0
 800136a:	d00f      	beq.n	800138c <__eqdf2+0x54>
 800136c:	2001      	movs	r0, #1
 800136e:	42b1      	cmp	r1, r6
 8001370:	d10d      	bne.n	800138e <__eqdf2+0x56>
 8001372:	45bc      	cmp	ip, r7
 8001374:	d10b      	bne.n	800138e <__eqdf2+0x56>
 8001376:	4294      	cmp	r4, r2
 8001378:	d109      	bne.n	800138e <__eqdf2+0x56>
 800137a:	45d3      	cmp	fp, sl
 800137c:	d01c      	beq.n	80013b8 <__eqdf2+0x80>
 800137e:	2900      	cmp	r1, #0
 8001380:	d105      	bne.n	800138e <__eqdf2+0x56>
 8001382:	4660      	mov	r0, ip
 8001384:	4320      	orrs	r0, r4
 8001386:	1e43      	subs	r3, r0, #1
 8001388:	4198      	sbcs	r0, r3
 800138a:	e000      	b.n	800138e <__eqdf2+0x56>
 800138c:	2001      	movs	r0, #1
 800138e:	bcf0      	pop	{r4, r5, r6, r7}
 8001390:	46bb      	mov	fp, r7
 8001392:	46b2      	mov	sl, r6
 8001394:	46a9      	mov	r9, r5
 8001396:	46a0      	mov	r8, r4
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139a:	2001      	movs	r0, #1
 800139c:	428e      	cmp	r6, r1
 800139e:	d1f6      	bne.n	800138e <__eqdf2+0x56>
 80013a0:	4661      	mov	r1, ip
 80013a2:	4339      	orrs	r1, r7
 80013a4:	000f      	movs	r7, r1
 80013a6:	4317      	orrs	r7, r2
 80013a8:	4327      	orrs	r7, r4
 80013aa:	d1f0      	bne.n	800138e <__eqdf2+0x56>
 80013ac:	465b      	mov	r3, fp
 80013ae:	4652      	mov	r2, sl
 80013b0:	1a98      	subs	r0, r3, r2
 80013b2:	1e43      	subs	r3, r0, #1
 80013b4:	4198      	sbcs	r0, r3
 80013b6:	e7ea      	b.n	800138e <__eqdf2+0x56>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7e8      	b.n	800138e <__eqdf2+0x56>
 80013bc:	000007ff 	.word	0x000007ff

080013c0 <__gedf2>:
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	4657      	mov	r7, sl
 80013c4:	464e      	mov	r6, r9
 80013c6:	4645      	mov	r5, r8
 80013c8:	46de      	mov	lr, fp
 80013ca:	b5e0      	push	{r5, r6, r7, lr}
 80013cc:	000d      	movs	r5, r1
 80013ce:	030e      	lsls	r6, r1, #12
 80013d0:	0049      	lsls	r1, r1, #1
 80013d2:	0d49      	lsrs	r1, r1, #21
 80013d4:	468a      	mov	sl, r1
 80013d6:	0fdf      	lsrs	r7, r3, #31
 80013d8:	0fe9      	lsrs	r1, r5, #31
 80013da:	46bc      	mov	ip, r7
 80013dc:	b083      	sub	sp, #12
 80013de:	4f2f      	ldr	r7, [pc, #188]	@ (800149c <__gedf2+0xdc>)
 80013e0:	0004      	movs	r4, r0
 80013e2:	4680      	mov	r8, r0
 80013e4:	9101      	str	r1, [sp, #4]
 80013e6:	0058      	lsls	r0, r3, #1
 80013e8:	0319      	lsls	r1, r3, #12
 80013ea:	4691      	mov	r9, r2
 80013ec:	0b36      	lsrs	r6, r6, #12
 80013ee:	0b09      	lsrs	r1, r1, #12
 80013f0:	0d40      	lsrs	r0, r0, #21
 80013f2:	45ba      	cmp	sl, r7
 80013f4:	d01d      	beq.n	8001432 <__gedf2+0x72>
 80013f6:	42b8      	cmp	r0, r7
 80013f8:	d00d      	beq.n	8001416 <__gedf2+0x56>
 80013fa:	4657      	mov	r7, sl
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d12a      	bne.n	8001456 <__gedf2+0x96>
 8001400:	4334      	orrs	r4, r6
 8001402:	2800      	cmp	r0, #0
 8001404:	d124      	bne.n	8001450 <__gedf2+0x90>
 8001406:	430a      	orrs	r2, r1
 8001408:	d036      	beq.n	8001478 <__gedf2+0xb8>
 800140a:	2c00      	cmp	r4, #0
 800140c:	d141      	bne.n	8001492 <__gedf2+0xd2>
 800140e:	4663      	mov	r3, ip
 8001410:	0058      	lsls	r0, r3, #1
 8001412:	3801      	subs	r0, #1
 8001414:	e015      	b.n	8001442 <__gedf2+0x82>
 8001416:	4311      	orrs	r1, r2
 8001418:	d138      	bne.n	800148c <__gedf2+0xcc>
 800141a:	4653      	mov	r3, sl
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <__gedf2+0x64>
 8001420:	4326      	orrs	r6, r4
 8001422:	d0f4      	beq.n	800140e <__gedf2+0x4e>
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	4563      	cmp	r3, ip
 8001428:	d107      	bne.n	800143a <__gedf2+0x7a>
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	0058      	lsls	r0, r3, #1
 800142e:	3801      	subs	r0, #1
 8001430:	e007      	b.n	8001442 <__gedf2+0x82>
 8001432:	4326      	orrs	r6, r4
 8001434:	d12a      	bne.n	800148c <__gedf2+0xcc>
 8001436:	4550      	cmp	r0, sl
 8001438:	d021      	beq.n	800147e <__gedf2+0xbe>
 800143a:	2001      	movs	r0, #1
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	425f      	negs	r7, r3
 8001440:	4338      	orrs	r0, r7
 8001442:	b003      	add	sp, #12
 8001444:	bcf0      	pop	{r4, r5, r6, r7}
 8001446:	46bb      	mov	fp, r7
 8001448:	46b2      	mov	sl, r6
 800144a:	46a9      	mov	r9, r5
 800144c:	46a0      	mov	r8, r4
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	2c00      	cmp	r4, #0
 8001452:	d0dc      	beq.n	800140e <__gedf2+0x4e>
 8001454:	e7e6      	b.n	8001424 <__gedf2+0x64>
 8001456:	2800      	cmp	r0, #0
 8001458:	d0ef      	beq.n	800143a <__gedf2+0x7a>
 800145a:	9b01      	ldr	r3, [sp, #4]
 800145c:	4563      	cmp	r3, ip
 800145e:	d1ec      	bne.n	800143a <__gedf2+0x7a>
 8001460:	4582      	cmp	sl, r0
 8001462:	dcea      	bgt.n	800143a <__gedf2+0x7a>
 8001464:	dbe1      	blt.n	800142a <__gedf2+0x6a>
 8001466:	428e      	cmp	r6, r1
 8001468:	d8e7      	bhi.n	800143a <__gedf2+0x7a>
 800146a:	d1de      	bne.n	800142a <__gedf2+0x6a>
 800146c:	45c8      	cmp	r8, r9
 800146e:	d8e4      	bhi.n	800143a <__gedf2+0x7a>
 8001470:	2000      	movs	r0, #0
 8001472:	45c8      	cmp	r8, r9
 8001474:	d2e5      	bcs.n	8001442 <__gedf2+0x82>
 8001476:	e7d8      	b.n	800142a <__gedf2+0x6a>
 8001478:	2c00      	cmp	r4, #0
 800147a:	d0e2      	beq.n	8001442 <__gedf2+0x82>
 800147c:	e7dd      	b.n	800143a <__gedf2+0x7a>
 800147e:	4311      	orrs	r1, r2
 8001480:	d104      	bne.n	800148c <__gedf2+0xcc>
 8001482:	9b01      	ldr	r3, [sp, #4]
 8001484:	4563      	cmp	r3, ip
 8001486:	d1d8      	bne.n	800143a <__gedf2+0x7a>
 8001488:	2000      	movs	r0, #0
 800148a:	e7da      	b.n	8001442 <__gedf2+0x82>
 800148c:	2002      	movs	r0, #2
 800148e:	4240      	negs	r0, r0
 8001490:	e7d7      	b.n	8001442 <__gedf2+0x82>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	4563      	cmp	r3, ip
 8001496:	d0e6      	beq.n	8001466 <__gedf2+0xa6>
 8001498:	e7cf      	b.n	800143a <__gedf2+0x7a>
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	000007ff 	.word	0x000007ff

080014a0 <__ledf2>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	4645      	mov	r5, r8
 80014a8:	46de      	mov	lr, fp
 80014aa:	b5e0      	push	{r5, r6, r7, lr}
 80014ac:	000d      	movs	r5, r1
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	0d49      	lsrs	r1, r1, #21
 80014b4:	468a      	mov	sl, r1
 80014b6:	0fdf      	lsrs	r7, r3, #31
 80014b8:	0fe9      	lsrs	r1, r5, #31
 80014ba:	46bc      	mov	ip, r7
 80014bc:	b083      	sub	sp, #12
 80014be:	4f2e      	ldr	r7, [pc, #184]	@ (8001578 <__ledf2+0xd8>)
 80014c0:	0004      	movs	r4, r0
 80014c2:	4680      	mov	r8, r0
 80014c4:	9101      	str	r1, [sp, #4]
 80014c6:	0058      	lsls	r0, r3, #1
 80014c8:	0319      	lsls	r1, r3, #12
 80014ca:	4691      	mov	r9, r2
 80014cc:	0b36      	lsrs	r6, r6, #12
 80014ce:	0b09      	lsrs	r1, r1, #12
 80014d0:	0d40      	lsrs	r0, r0, #21
 80014d2:	45ba      	cmp	sl, r7
 80014d4:	d01e      	beq.n	8001514 <__ledf2+0x74>
 80014d6:	42b8      	cmp	r0, r7
 80014d8:	d00d      	beq.n	80014f6 <__ledf2+0x56>
 80014da:	4657      	mov	r7, sl
 80014dc:	2f00      	cmp	r7, #0
 80014de:	d127      	bne.n	8001530 <__ledf2+0x90>
 80014e0:	4334      	orrs	r4, r6
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d133      	bne.n	800154e <__ledf2+0xae>
 80014e6:	430a      	orrs	r2, r1
 80014e8:	d034      	beq.n	8001554 <__ledf2+0xb4>
 80014ea:	2c00      	cmp	r4, #0
 80014ec:	d140      	bne.n	8001570 <__ledf2+0xd0>
 80014ee:	4663      	mov	r3, ip
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e015      	b.n	8001522 <__ledf2+0x82>
 80014f6:	4311      	orrs	r1, r2
 80014f8:	d112      	bne.n	8001520 <__ledf2+0x80>
 80014fa:	4653      	mov	r3, sl
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <__ledf2+0x64>
 8001500:	4326      	orrs	r6, r4
 8001502:	d0f4      	beq.n	80014ee <__ledf2+0x4e>
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	4563      	cmp	r3, ip
 8001508:	d01d      	beq.n	8001546 <__ledf2+0xa6>
 800150a:	2001      	movs	r0, #1
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	425f      	negs	r7, r3
 8001510:	4338      	orrs	r0, r7
 8001512:	e006      	b.n	8001522 <__ledf2+0x82>
 8001514:	4326      	orrs	r6, r4
 8001516:	d103      	bne.n	8001520 <__ledf2+0x80>
 8001518:	4550      	cmp	r0, sl
 800151a:	d1f6      	bne.n	800150a <__ledf2+0x6a>
 800151c:	4311      	orrs	r1, r2
 800151e:	d01c      	beq.n	800155a <__ledf2+0xba>
 8001520:	2002      	movs	r0, #2
 8001522:	b003      	add	sp, #12
 8001524:	bcf0      	pop	{r4, r5, r6, r7}
 8001526:	46bb      	mov	fp, r7
 8001528:	46b2      	mov	sl, r6
 800152a:	46a9      	mov	r9, r5
 800152c:	46a0      	mov	r8, r4
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0ea      	beq.n	800150a <__ledf2+0x6a>
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	4563      	cmp	r3, ip
 8001538:	d1e7      	bne.n	800150a <__ledf2+0x6a>
 800153a:	4582      	cmp	sl, r0
 800153c:	dce5      	bgt.n	800150a <__ledf2+0x6a>
 800153e:	db02      	blt.n	8001546 <__ledf2+0xa6>
 8001540:	428e      	cmp	r6, r1
 8001542:	d8e2      	bhi.n	800150a <__ledf2+0x6a>
 8001544:	d00e      	beq.n	8001564 <__ledf2+0xc4>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	0058      	lsls	r0, r3, #1
 800154a:	3801      	subs	r0, #1
 800154c:	e7e9      	b.n	8001522 <__ledf2+0x82>
 800154e:	2c00      	cmp	r4, #0
 8001550:	d0cd      	beq.n	80014ee <__ledf2+0x4e>
 8001552:	e7d7      	b.n	8001504 <__ledf2+0x64>
 8001554:	2c00      	cmp	r4, #0
 8001556:	d0e4      	beq.n	8001522 <__ledf2+0x82>
 8001558:	e7d7      	b.n	800150a <__ledf2+0x6a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	2000      	movs	r0, #0
 800155e:	4563      	cmp	r3, ip
 8001560:	d0df      	beq.n	8001522 <__ledf2+0x82>
 8001562:	e7d2      	b.n	800150a <__ledf2+0x6a>
 8001564:	45c8      	cmp	r8, r9
 8001566:	d8d0      	bhi.n	800150a <__ledf2+0x6a>
 8001568:	2000      	movs	r0, #0
 800156a:	45c8      	cmp	r8, r9
 800156c:	d2d9      	bcs.n	8001522 <__ledf2+0x82>
 800156e:	e7ea      	b.n	8001546 <__ledf2+0xa6>
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	4563      	cmp	r3, ip
 8001574:	d0e4      	beq.n	8001540 <__ledf2+0xa0>
 8001576:	e7c8      	b.n	800150a <__ledf2+0x6a>
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	46de      	mov	lr, fp
 8001584:	4645      	mov	r5, r8
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	001f      	movs	r7, r3
 800158a:	030b      	lsls	r3, r1, #12
 800158c:	0b1b      	lsrs	r3, r3, #12
 800158e:	0016      	movs	r6, r2
 8001590:	469a      	mov	sl, r3
 8001592:	0fca      	lsrs	r2, r1, #31
 8001594:	004b      	lsls	r3, r1, #1
 8001596:	0004      	movs	r4, r0
 8001598:	4691      	mov	r9, r2
 800159a:	b085      	sub	sp, #20
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x26>
 80015a0:	e1cf      	b.n	8001942 <__aeabi_dmul+0x3c6>
 80015a2:	4acd      	ldr	r2, [pc, #820]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d055      	beq.n	8001654 <__aeabi_dmul+0xd8>
 80015a8:	4651      	mov	r1, sl
 80015aa:	0f42      	lsrs	r2, r0, #29
 80015ac:	00c9      	lsls	r1, r1, #3
 80015ae:	430a      	orrs	r2, r1
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	4311      	orrs	r1, r2
 80015b6:	00c2      	lsls	r2, r0, #3
 80015b8:	4690      	mov	r8, r2
 80015ba:	4ac8      	ldr	r2, [pc, #800]	@ (80018dc <__aeabi_dmul+0x360>)
 80015bc:	468a      	mov	sl, r1
 80015be:	4693      	mov	fp, r2
 80015c0:	449b      	add	fp, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	2500      	movs	r5, #0
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	033c      	lsls	r4, r7, #12
 80015ca:	007b      	lsls	r3, r7, #1
 80015cc:	0ffa      	lsrs	r2, r7, #31
 80015ce:	9601      	str	r6, [sp, #4]
 80015d0:	0b24      	lsrs	r4, r4, #12
 80015d2:	0d5b      	lsrs	r3, r3, #21
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x5e>
 80015d8:	e188      	b.n	80018ec <__aeabi_dmul+0x370>
 80015da:	4abf      	ldr	r2, [pc, #764]	@ (80018d8 <__aeabi_dmul+0x35c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x66>
 80015e0:	e092      	b.n	8001708 <__aeabi_dmul+0x18c>
 80015e2:	4abe      	ldr	r2, [pc, #760]	@ (80018dc <__aeabi_dmul+0x360>)
 80015e4:	4694      	mov	ip, r2
 80015e6:	4463      	add	r3, ip
 80015e8:	449b      	add	fp, r3
 80015ea:	2d0a      	cmp	r5, #10
 80015ec:	dc42      	bgt.n	8001674 <__aeabi_dmul+0xf8>
 80015ee:	00e4      	lsls	r4, r4, #3
 80015f0:	0f73      	lsrs	r3, r6, #29
 80015f2:	4323      	orrs	r3, r4
 80015f4:	2480      	movs	r4, #128	@ 0x80
 80015f6:	4649      	mov	r1, r9
 80015f8:	0424      	lsls	r4, r4, #16
 80015fa:	431c      	orrs	r4, r3
 80015fc:	00f3      	lsls	r3, r6, #3
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	9b00      	ldr	r3, [sp, #0]
 8001602:	2000      	movs	r0, #0
 8001604:	4059      	eors	r1, r3
 8001606:	b2cb      	uxtb	r3, r1
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	2d02      	cmp	r5, #2
 800160c:	dc00      	bgt.n	8001610 <__aeabi_dmul+0x94>
 800160e:	e094      	b.n	800173a <__aeabi_dmul+0x1be>
 8001610:	2301      	movs	r3, #1
 8001612:	40ab      	lsls	r3, r5
 8001614:	001d      	movs	r5, r3
 8001616:	23a6      	movs	r3, #166	@ 0xa6
 8001618:	002a      	movs	r2, r5
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	401a      	ands	r2, r3
 800161e:	421d      	tst	r5, r3
 8001620:	d000      	beq.n	8001624 <__aeabi_dmul+0xa8>
 8001622:	e229      	b.n	8001a78 <__aeabi_dmul+0x4fc>
 8001624:	2390      	movs	r3, #144	@ 0x90
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	421d      	tst	r5, r3
 800162a:	d100      	bne.n	800162e <__aeabi_dmul+0xb2>
 800162c:	e24d      	b.n	8001aca <__aeabi_dmul+0x54e>
 800162e:	2300      	movs	r3, #0
 8001630:	2480      	movs	r4, #128	@ 0x80
 8001632:	4699      	mov	r9, r3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4ba8      	ldr	r3, [pc, #672]	@ (80018d8 <__aeabi_dmul+0x35c>)
 8001638:	0010      	movs	r0, r2
 800163a:	464a      	mov	r2, r9
 800163c:	051b      	lsls	r3, r3, #20
 800163e:	4323      	orrs	r3, r4
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	4313      	orrs	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	b005      	add	sp, #20
 8001648:	bcf0      	pop	{r4, r5, r6, r7}
 800164a:	46bb      	mov	fp, r7
 800164c:	46b2      	mov	sl, r6
 800164e:	46a9      	mov	r9, r5
 8001650:	46a0      	mov	r8, r4
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	4652      	mov	r2, sl
 8001656:	4302      	orrs	r2, r0
 8001658:	4690      	mov	r8, r2
 800165a:	d000      	beq.n	800165e <__aeabi_dmul+0xe2>
 800165c:	e1ac      	b.n	80019b8 <__aeabi_dmul+0x43c>
 800165e:	469b      	mov	fp, r3
 8001660:	2302      	movs	r3, #2
 8001662:	4692      	mov	sl, r2
 8001664:	2508      	movs	r5, #8
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	e7ae      	b.n	80015c8 <__aeabi_dmul+0x4c>
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	46a2      	mov	sl, r4
 800166e:	4699      	mov	r9, r3
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4698      	mov	r8, r3
 8001674:	9b02      	ldr	r3, [sp, #8]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x100>
 800167a:	e1ca      	b.n	8001a12 <__aeabi_dmul+0x496>
 800167c:	2b03      	cmp	r3, #3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x106>
 8001680:	e192      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d110      	bne.n	80016a8 <__aeabi_dmul+0x12c>
 8001686:	2300      	movs	r3, #0
 8001688:	2400      	movs	r4, #0
 800168a:	2200      	movs	r2, #0
 800168c:	e7d4      	b.n	8001638 <__aeabi_dmul+0xbc>
 800168e:	2201      	movs	r2, #1
 8001690:	087b      	lsrs	r3, r7, #1
 8001692:	403a      	ands	r2, r7
 8001694:	4313      	orrs	r3, r2
 8001696:	4652      	mov	r2, sl
 8001698:	07d2      	lsls	r2, r2, #31
 800169a:	4313      	orrs	r3, r2
 800169c:	4698      	mov	r8, r3
 800169e:	4653      	mov	r3, sl
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	469a      	mov	sl, r3
 80016a4:	9b03      	ldr	r3, [sp, #12]
 80016a6:	4699      	mov	r9, r3
 80016a8:	465b      	mov	r3, fp
 80016aa:	1c58      	adds	r0, r3, #1
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	445b      	add	r3, fp
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x13c>
 80016b6:	e1b1      	b.n	8001a1c <__aeabi_dmul+0x4a0>
 80016b8:	4642      	mov	r2, r8
 80016ba:	0752      	lsls	r2, r2, #29
 80016bc:	d00b      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016be:	220f      	movs	r2, #15
 80016c0:	4641      	mov	r1, r8
 80016c2:	400a      	ands	r2, r1
 80016c4:	2a04      	cmp	r2, #4
 80016c6:	d006      	beq.n	80016d6 <__aeabi_dmul+0x15a>
 80016c8:	4642      	mov	r2, r8
 80016ca:	1d11      	adds	r1, r2, #4
 80016cc:	4541      	cmp	r1, r8
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	4688      	mov	r8, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	4492      	add	sl, r2
 80016d6:	4652      	mov	r2, sl
 80016d8:	01d2      	lsls	r2, r2, #7
 80016da:	d506      	bpl.n	80016ea <__aeabi_dmul+0x16e>
 80016dc:	4652      	mov	r2, sl
 80016de:	4b80      	ldr	r3, [pc, #512]	@ (80018e0 <__aeabi_dmul+0x364>)
 80016e0:	401a      	ands	r2, r3
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	4692      	mov	sl, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	18c3      	adds	r3, r0, r3
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <__aeabi_dmul+0x368>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x176>
 80016f0:	e18f      	b.n	8001a12 <__aeabi_dmul+0x496>
 80016f2:	4642      	mov	r2, r8
 80016f4:	08d1      	lsrs	r1, r2, #3
 80016f6:	4652      	mov	r2, sl
 80016f8:	0752      	lsls	r2, r2, #29
 80016fa:	430a      	orrs	r2, r1
 80016fc:	4651      	mov	r1, sl
 80016fe:	055b      	lsls	r3, r3, #21
 8001700:	024c      	lsls	r4, r1, #9
 8001702:	0b24      	lsrs	r4, r4, #12
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e797      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001708:	4b73      	ldr	r3, [pc, #460]	@ (80018d8 <__aeabi_dmul+0x35c>)
 800170a:	4326      	orrs	r6, r4
 800170c:	469c      	mov	ip, r3
 800170e:	44e3      	add	fp, ip
 8001710:	2e00      	cmp	r6, #0
 8001712:	d100      	bne.n	8001716 <__aeabi_dmul+0x19a>
 8001714:	e16f      	b.n	80019f6 <__aeabi_dmul+0x47a>
 8001716:	2303      	movs	r3, #3
 8001718:	4649      	mov	r1, r9
 800171a:	431d      	orrs	r5, r3
 800171c:	9b00      	ldr	r3, [sp, #0]
 800171e:	4059      	eors	r1, r3
 8001720:	b2cb      	uxtb	r3, r1
 8001722:	9303      	str	r3, [sp, #12]
 8001724:	2d0a      	cmp	r5, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x1ae>
 8001728:	e133      	b.n	8001992 <__aeabi_dmul+0x416>
 800172a:	2301      	movs	r3, #1
 800172c:	40ab      	lsls	r3, r5
 800172e:	001d      	movs	r5, r3
 8001730:	2303      	movs	r3, #3
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	2288      	movs	r2, #136	@ 0x88
 8001736:	422a      	tst	r2, r5
 8001738:	d197      	bne.n	800166a <__aeabi_dmul+0xee>
 800173a:	4642      	mov	r2, r8
 800173c:	4643      	mov	r3, r8
 800173e:	0412      	lsls	r2, r2, #16
 8001740:	0c12      	lsrs	r2, r2, #16
 8001742:	0016      	movs	r6, r2
 8001744:	9801      	ldr	r0, [sp, #4]
 8001746:	0c1d      	lsrs	r5, r3, #16
 8001748:	0c03      	lsrs	r3, r0, #16
 800174a:	0400      	lsls	r0, r0, #16
 800174c:	0c00      	lsrs	r0, r0, #16
 800174e:	4346      	muls	r6, r0
 8001750:	46b4      	mov	ip, r6
 8001752:	001e      	movs	r6, r3
 8001754:	436e      	muls	r6, r5
 8001756:	9600      	str	r6, [sp, #0]
 8001758:	0016      	movs	r6, r2
 800175a:	0007      	movs	r7, r0
 800175c:	435e      	muls	r6, r3
 800175e:	4661      	mov	r1, ip
 8001760:	46b0      	mov	r8, r6
 8001762:	436f      	muls	r7, r5
 8001764:	0c0e      	lsrs	r6, r1, #16
 8001766:	44b8      	add	r8, r7
 8001768:	4446      	add	r6, r8
 800176a:	42b7      	cmp	r7, r6
 800176c:	d905      	bls.n	800177a <__aeabi_dmul+0x1fe>
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	0249      	lsls	r1, r1, #9
 8001772:	4688      	mov	r8, r1
 8001774:	9f00      	ldr	r7, [sp, #0]
 8001776:	4447      	add	r7, r8
 8001778:	9700      	str	r7, [sp, #0]
 800177a:	4661      	mov	r1, ip
 800177c:	0409      	lsls	r1, r1, #16
 800177e:	0c09      	lsrs	r1, r1, #16
 8001780:	0c37      	lsrs	r7, r6, #16
 8001782:	0436      	lsls	r6, r6, #16
 8001784:	468c      	mov	ip, r1
 8001786:	0031      	movs	r1, r6
 8001788:	4461      	add	r1, ip
 800178a:	9101      	str	r1, [sp, #4]
 800178c:	0011      	movs	r1, r2
 800178e:	0c26      	lsrs	r6, r4, #16
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	0c24      	lsrs	r4, r4, #16
 8001794:	4361      	muls	r1, r4
 8001796:	468c      	mov	ip, r1
 8001798:	0021      	movs	r1, r4
 800179a:	4369      	muls	r1, r5
 800179c:	4689      	mov	r9, r1
 800179e:	4661      	mov	r1, ip
 80017a0:	0c09      	lsrs	r1, r1, #16
 80017a2:	4688      	mov	r8, r1
 80017a4:	4372      	muls	r2, r6
 80017a6:	444a      	add	r2, r9
 80017a8:	4442      	add	r2, r8
 80017aa:	4375      	muls	r5, r6
 80017ac:	4591      	cmp	r9, r2
 80017ae:	d903      	bls.n	80017b8 <__aeabi_dmul+0x23c>
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	0249      	lsls	r1, r1, #9
 80017b4:	4688      	mov	r8, r1
 80017b6:	4445      	add	r5, r8
 80017b8:	0c11      	lsrs	r1, r2, #16
 80017ba:	4688      	mov	r8, r1
 80017bc:	4661      	mov	r1, ip
 80017be:	0409      	lsls	r1, r1, #16
 80017c0:	0c09      	lsrs	r1, r1, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	0412      	lsls	r2, r2, #16
 80017c6:	4462      	add	r2, ip
 80017c8:	18b9      	adds	r1, r7, r2
 80017ca:	9102      	str	r1, [sp, #8]
 80017cc:	4651      	mov	r1, sl
 80017ce:	0c09      	lsrs	r1, r1, #16
 80017d0:	468c      	mov	ip, r1
 80017d2:	4651      	mov	r1, sl
 80017d4:	040f      	lsls	r7, r1, #16
 80017d6:	0c3f      	lsrs	r7, r7, #16
 80017d8:	0039      	movs	r1, r7
 80017da:	4341      	muls	r1, r0
 80017dc:	4445      	add	r5, r8
 80017de:	4688      	mov	r8, r1
 80017e0:	4661      	mov	r1, ip
 80017e2:	4341      	muls	r1, r0
 80017e4:	468a      	mov	sl, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	4660      	mov	r0, ip
 80017ea:	0c09      	lsrs	r1, r1, #16
 80017ec:	4689      	mov	r9, r1
 80017ee:	4358      	muls	r0, r3
 80017f0:	437b      	muls	r3, r7
 80017f2:	4453      	add	r3, sl
 80017f4:	444b      	add	r3, r9
 80017f6:	459a      	cmp	sl, r3
 80017f8:	d903      	bls.n	8001802 <__aeabi_dmul+0x286>
 80017fa:	2180      	movs	r1, #128	@ 0x80
 80017fc:	0249      	lsls	r1, r1, #9
 80017fe:	4689      	mov	r9, r1
 8001800:	4448      	add	r0, r9
 8001802:	0c19      	lsrs	r1, r3, #16
 8001804:	4689      	mov	r9, r1
 8001806:	4641      	mov	r1, r8
 8001808:	0409      	lsls	r1, r1, #16
 800180a:	0c09      	lsrs	r1, r1, #16
 800180c:	4688      	mov	r8, r1
 800180e:	0039      	movs	r1, r7
 8001810:	4361      	muls	r1, r4
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	4443      	add	r3, r8
 8001816:	4688      	mov	r8, r1
 8001818:	4661      	mov	r1, ip
 800181a:	434c      	muls	r4, r1
 800181c:	4371      	muls	r1, r6
 800181e:	468c      	mov	ip, r1
 8001820:	4641      	mov	r1, r8
 8001822:	4377      	muls	r7, r6
 8001824:	0c0e      	lsrs	r6, r1, #16
 8001826:	193f      	adds	r7, r7, r4
 8001828:	19f6      	adds	r6, r6, r7
 800182a:	4448      	add	r0, r9
 800182c:	42b4      	cmp	r4, r6
 800182e:	d903      	bls.n	8001838 <__aeabi_dmul+0x2bc>
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0249      	lsls	r1, r1, #9
 8001834:	4689      	mov	r9, r1
 8001836:	44cc      	add	ip, r9
 8001838:	9902      	ldr	r1, [sp, #8]
 800183a:	9f00      	ldr	r7, [sp, #0]
 800183c:	4689      	mov	r9, r1
 800183e:	0431      	lsls	r1, r6, #16
 8001840:	444f      	add	r7, r9
 8001842:	4689      	mov	r9, r1
 8001844:	4641      	mov	r1, r8
 8001846:	4297      	cmp	r7, r2
 8001848:	4192      	sbcs	r2, r2
 800184a:	040c      	lsls	r4, r1, #16
 800184c:	0c24      	lsrs	r4, r4, #16
 800184e:	444c      	add	r4, r9
 8001850:	18ff      	adds	r7, r7, r3
 8001852:	4252      	negs	r2, r2
 8001854:	1964      	adds	r4, r4, r5
 8001856:	18a1      	adds	r1, r4, r2
 8001858:	429f      	cmp	r7, r3
 800185a:	419b      	sbcs	r3, r3
 800185c:	4688      	mov	r8, r1
 800185e:	4682      	mov	sl, r0
 8001860:	425b      	negs	r3, r3
 8001862:	4699      	mov	r9, r3
 8001864:	4590      	cmp	r8, r2
 8001866:	4192      	sbcs	r2, r2
 8001868:	42ac      	cmp	r4, r5
 800186a:	41a4      	sbcs	r4, r4
 800186c:	44c2      	add	sl, r8
 800186e:	44d1      	add	r9, sl
 8001870:	4252      	negs	r2, r2
 8001872:	4264      	negs	r4, r4
 8001874:	4314      	orrs	r4, r2
 8001876:	4599      	cmp	r9, r3
 8001878:	419b      	sbcs	r3, r3
 800187a:	4582      	cmp	sl, r0
 800187c:	4192      	sbcs	r2, r2
 800187e:	425b      	negs	r3, r3
 8001880:	4252      	negs	r2, r2
 8001882:	4313      	orrs	r3, r2
 8001884:	464a      	mov	r2, r9
 8001886:	0c36      	lsrs	r6, r6, #16
 8001888:	19a4      	adds	r4, r4, r6
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	4463      	add	r3, ip
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	0dd2      	lsrs	r2, r2, #23
 8001892:	431a      	orrs	r2, r3
 8001894:	9901      	ldr	r1, [sp, #4]
 8001896:	4692      	mov	sl, r2
 8001898:	027a      	lsls	r2, r7, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	1e50      	subs	r0, r2, #1
 800189e:	4182      	sbcs	r2, r0
 80018a0:	0dff      	lsrs	r7, r7, #23
 80018a2:	4317      	orrs	r7, r2
 80018a4:	464a      	mov	r2, r9
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	4317      	orrs	r7, r2
 80018aa:	46b8      	mov	r8, r7
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	d500      	bpl.n	80018b2 <__aeabi_dmul+0x336>
 80018b0:	e6ed      	b.n	800168e <__aeabi_dmul+0x112>
 80018b2:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <__aeabi_dmul+0x36c>)
 80018b4:	9a03      	ldr	r2, [sp, #12]
 80018b6:	445b      	add	r3, fp
 80018b8:	4691      	mov	r9, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x344>
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dmul+0x49e>
 80018c0:	003a      	movs	r2, r7
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dmul+0x34c>
 80018c6:	e710      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018c8:	220f      	movs	r2, #15
 80018ca:	4658      	mov	r0, fp
 80018cc:	403a      	ands	r2, r7
 80018ce:	2a04      	cmp	r2, #4
 80018d0:	d000      	beq.n	80018d4 <__aeabi_dmul+0x358>
 80018d2:	e6f9      	b.n	80016c8 <__aeabi_dmul+0x14c>
 80018d4:	e709      	b.n	80016ea <__aeabi_dmul+0x16e>
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	000007ff 	.word	0x000007ff
 80018dc:	fffffc01 	.word	0xfffffc01
 80018e0:	feffffff 	.word	0xfeffffff
 80018e4:	000007fe 	.word	0x000007fe
 80018e8:	000003ff 	.word	0x000003ff
 80018ec:	0022      	movs	r2, r4
 80018ee:	4332      	orrs	r2, r6
 80018f0:	d06f      	beq.n	80019d2 <__aeabi_dmul+0x456>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dmul+0x37c>
 80018f6:	e0c2      	b.n	8001a7e <__aeabi_dmul+0x502>
 80018f8:	0020      	movs	r0, r4
 80018fa:	f000 fddf 	bl	80024bc <__clzsi2>
 80018fe:	0002      	movs	r2, r0
 8001900:	0003      	movs	r3, r0
 8001902:	3a0b      	subs	r2, #11
 8001904:	201d      	movs	r0, #29
 8001906:	1a82      	subs	r2, r0, r2
 8001908:	0030      	movs	r0, r6
 800190a:	0019      	movs	r1, r3
 800190c:	40d0      	lsrs	r0, r2
 800190e:	3908      	subs	r1, #8
 8001910:	408c      	lsls	r4, r1
 8001912:	0002      	movs	r2, r0
 8001914:	4322      	orrs	r2, r4
 8001916:	0034      	movs	r4, r6
 8001918:	408c      	lsls	r4, r1
 800191a:	4659      	mov	r1, fp
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	4986      	ldr	r1, [pc, #536]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001920:	468b      	mov	fp, r1
 8001922:	449b      	add	fp, r3
 8001924:	2d0a      	cmp	r5, #10
 8001926:	dd00      	ble.n	800192a <__aeabi_dmul+0x3ae>
 8001928:	e6a4      	b.n	8001674 <__aeabi_dmul+0xf8>
 800192a:	4649      	mov	r1, r9
 800192c:	9b00      	ldr	r3, [sp, #0]
 800192e:	9401      	str	r4, [sp, #4]
 8001930:	4059      	eors	r1, r3
 8001932:	b2cb      	uxtb	r3, r1
 8001934:	0014      	movs	r4, r2
 8001936:	2000      	movs	r0, #0
 8001938:	9303      	str	r3, [sp, #12]
 800193a:	2d02      	cmp	r5, #2
 800193c:	dd00      	ble.n	8001940 <__aeabi_dmul+0x3c4>
 800193e:	e667      	b.n	8001610 <__aeabi_dmul+0x94>
 8001940:	e6fb      	b.n	800173a <__aeabi_dmul+0x1be>
 8001942:	4653      	mov	r3, sl
 8001944:	4303      	orrs	r3, r0
 8001946:	4698      	mov	r8, r3
 8001948:	d03c      	beq.n	80019c4 <__aeabi_dmul+0x448>
 800194a:	4653      	mov	r3, sl
 800194c:	2b00      	cmp	r3, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dmul+0x3d6>
 8001950:	e0a3      	b.n	8001a9a <__aeabi_dmul+0x51e>
 8001952:	4650      	mov	r0, sl
 8001954:	f000 fdb2 	bl	80024bc <__clzsi2>
 8001958:	230b      	movs	r3, #11
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	0002      	movs	r2, r0
 8001960:	4484      	add	ip, r0
 8001962:	0011      	movs	r1, r2
 8001964:	4650      	mov	r0, sl
 8001966:	3908      	subs	r1, #8
 8001968:	4088      	lsls	r0, r1
 800196a:	231d      	movs	r3, #29
 800196c:	4680      	mov	r8, r0
 800196e:	4660      	mov	r0, ip
 8001970:	1a1b      	subs	r3, r3, r0
 8001972:	0020      	movs	r0, r4
 8001974:	40d8      	lsrs	r0, r3
 8001976:	0003      	movs	r3, r0
 8001978:	4640      	mov	r0, r8
 800197a:	4303      	orrs	r3, r0
 800197c:	469a      	mov	sl, r3
 800197e:	0023      	movs	r3, r4
 8001980:	408b      	lsls	r3, r1
 8001982:	4698      	mov	r8, r3
 8001984:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <__aeabi_dmul+0x5bc>)
 8001986:	2500      	movs	r5, #0
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	469b      	mov	fp, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	e61a      	b.n	80015c8 <__aeabi_dmul+0x4c>
 8001992:	2d0f      	cmp	r5, #15
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x41c>
 8001996:	e0c9      	b.n	8001b2c <__aeabi_dmul+0x5b0>
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	4652      	mov	r2, sl
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	421a      	tst	r2, r3
 80019a0:	d002      	beq.n	80019a8 <__aeabi_dmul+0x42c>
 80019a2:	421c      	tst	r4, r3
 80019a4:	d100      	bne.n	80019a8 <__aeabi_dmul+0x42c>
 80019a6:	e092      	b.n	8001ace <__aeabi_dmul+0x552>
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	4642      	mov	r2, r8
 80019b4:	0b24      	lsrs	r4, r4, #12
 80019b6:	e63e      	b.n	8001636 <__aeabi_dmul+0xba>
 80019b8:	469b      	mov	fp, r3
 80019ba:	2303      	movs	r3, #3
 80019bc:	4680      	mov	r8, r0
 80019be:	250c      	movs	r5, #12
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	e601      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019c4:	2300      	movs	r3, #0
 80019c6:	469a      	mov	sl, r3
 80019c8:	469b      	mov	fp, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	2504      	movs	r5, #4
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	e5fa      	b.n	80015c8 <__aeabi_dmul+0x4c>
 80019d2:	2101      	movs	r1, #1
 80019d4:	430d      	orrs	r5, r1
 80019d6:	2d0a      	cmp	r5, #10
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dmul+0x460>
 80019da:	e64b      	b.n	8001674 <__aeabi_dmul+0xf8>
 80019dc:	4649      	mov	r1, r9
 80019de:	9800      	ldr	r0, [sp, #0]
 80019e0:	4041      	eors	r1, r0
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	9103      	str	r1, [sp, #12]
 80019e6:	2d02      	cmp	r5, #2
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dmul+0x470>
 80019ea:	e096      	b.n	8001b1a <__aeabi_dmul+0x59e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	2400      	movs	r4, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	e60c      	b.n	8001610 <__aeabi_dmul+0x94>
 80019f6:	4649      	mov	r1, r9
 80019f8:	2302      	movs	r3, #2
 80019fa:	9a00      	ldr	r2, [sp, #0]
 80019fc:	432b      	orrs	r3, r5
 80019fe:	4051      	eors	r1, r2
 8001a00:	b2ca      	uxtb	r2, r1
 8001a02:	9203      	str	r2, [sp, #12]
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dmul+0x48e>
 8001a08:	e634      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d157      	bne.n	8001abe <__aeabi_dmul+0x542>
 8001a0e:	9b03      	ldr	r3, [sp, #12]
 8001a10:	4699      	mov	r9, r3
 8001a12:	2400      	movs	r4, #0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4b49      	ldr	r3, [pc, #292]	@ (8001b3c <__aeabi_dmul+0x5c0>)
 8001a18:	e60e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a1a:	4658      	mov	r0, fp
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	1ac9      	subs	r1, r1, r3
 8001a20:	2938      	cmp	r1, #56	@ 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dmul+0x4aa>
 8001a24:	e62f      	b.n	8001686 <__aeabi_dmul+0x10a>
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd56      	ble.n	8001ad8 <__aeabi_dmul+0x55c>
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	4654      	mov	r4, sl
 8001a2e:	4252      	negs	r2, r2
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	40dc      	lsrs	r4, r3
 8001a34:	2920      	cmp	r1, #32
 8001a36:	d007      	beq.n	8001a48 <__aeabi_dmul+0x4cc>
 8001a38:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <__aeabi_dmul+0x5c4>)
 8001a3a:	4642      	mov	r2, r8
 8001a3c:	469c      	mov	ip, r3
 8001a3e:	4653      	mov	r3, sl
 8001a40:	4460      	add	r0, ip
 8001a42:	4083      	lsls	r3, r0
 8001a44:	431a      	orrs	r2, r3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	000b      	movs	r3, r1
 8001a52:	4322      	orrs	r2, r4
 8001a54:	4013      	ands	r3, r2
 8001a56:	2400      	movs	r4, #0
 8001a58:	4211      	tst	r1, r2
 8001a5a:	d009      	beq.n	8001a70 <__aeabi_dmul+0x4f4>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d05d      	beq.n	8001b20 <__aeabi_dmul+0x5a4>
 8001a64:	1d11      	adds	r1, r2, #4
 8001a66:	4291      	cmp	r1, r2
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	08d2      	lsrs	r2, r2, #3
 8001a72:	431a      	orrs	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	e5df      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	e5fa      	b.n	8001674 <__aeabi_dmul+0xf8>
 8001a7e:	9801      	ldr	r0, [sp, #4]
 8001a80:	f000 fd1c 	bl	80024bc <__clzsi2>
 8001a84:	0002      	movs	r2, r0
 8001a86:	0003      	movs	r3, r0
 8001a88:	3215      	adds	r2, #21
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	2a1c      	cmp	r2, #28
 8001a8e:	dc00      	bgt.n	8001a92 <__aeabi_dmul+0x516>
 8001a90:	e738      	b.n	8001904 <__aeabi_dmul+0x388>
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3808      	subs	r0, #8
 8001a96:	4082      	lsls	r2, r0
 8001a98:	e73f      	b.n	800191a <__aeabi_dmul+0x39e>
 8001a9a:	f000 fd0f 	bl	80024bc <__clzsi2>
 8001a9e:	2315      	movs	r3, #21
 8001aa0:	469c      	mov	ip, r3
 8001aa2:	4484      	add	ip, r0
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	4663      	mov	r3, ip
 8001aa8:	3220      	adds	r2, #32
 8001aaa:	2b1c      	cmp	r3, #28
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x534>
 8001aae:	e758      	b.n	8001962 <__aeabi_dmul+0x3e6>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	3808      	subs	r0, #8
 8001ab8:	4083      	lsls	r3, r0
 8001aba:	469a      	mov	sl, r3
 8001abc:	e762      	b.n	8001984 <__aeabi_dmul+0x408>
 8001abe:	001d      	movs	r5, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	e5a2      	b.n	8001610 <__aeabi_dmul+0x94>
 8001aca:	9002      	str	r0, [sp, #8]
 8001acc:	e632      	b.n	8001734 <__aeabi_dmul+0x1b8>
 8001ace:	431c      	orrs	r4, r3
 8001ad0:	9b00      	ldr	r3, [sp, #0]
 8001ad2:	9a01      	ldr	r2, [sp, #4]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e5ae      	b.n	8001636 <__aeabi_dmul+0xba>
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <__aeabi_dmul+0x5c8>)
 8001ada:	4652      	mov	r2, sl
 8001adc:	18c3      	adds	r3, r0, r3
 8001ade:	4640      	mov	r0, r8
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	40c8      	lsrs	r0, r1
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	4098      	lsls	r0, r3
 8001aea:	0003      	movs	r3, r0
 8001aec:	1e58      	subs	r0, r3, #1
 8001aee:	4183      	sbcs	r3, r0
 8001af0:	4654      	mov	r4, sl
 8001af2:	431a      	orrs	r2, r3
 8001af4:	40cc      	lsrs	r4, r1
 8001af6:	0753      	lsls	r3, r2, #29
 8001af8:	d009      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001afa:	230f      	movs	r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d005      	beq.n	8001b0e <__aeabi_dmul+0x592>
 8001b02:	1d13      	adds	r3, r2, #4
 8001b04:	4293      	cmp	r3, r2
 8001b06:	4192      	sbcs	r2, r2
 8001b08:	4252      	negs	r2, r2
 8001b0a:	18a4      	adds	r4, r4, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	0223      	lsls	r3, r4, #8
 8001b10:	d508      	bpl.n	8001b24 <__aeabi_dmul+0x5a8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	2400      	movs	r4, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	e58e      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	e58b      	b.n	8001638 <__aeabi_dmul+0xbc>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e7a5      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b24:	0763      	lsls	r3, r4, #29
 8001b26:	0264      	lsls	r4, r4, #9
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e7a1      	b.n	8001a70 <__aeabi_dmul+0x4f4>
 8001b2c:	9b00      	ldr	r3, [sp, #0]
 8001b2e:	46a2      	mov	sl, r4
 8001b30:	4699      	mov	r9, r3
 8001b32:	9b01      	ldr	r3, [sp, #4]
 8001b34:	4698      	mov	r8, r3
 8001b36:	e737      	b.n	80019a8 <__aeabi_dmul+0x42c>
 8001b38:	fffffc0d 	.word	0xfffffc0d
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	0000043e 	.word	0x0000043e
 8001b44:	0000041e 	.word	0x0000041e

08001b48 <__aeabi_dsub>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	4657      	mov	r7, sl
 8001b4c:	464e      	mov	r6, r9
 8001b4e:	4645      	mov	r5, r8
 8001b50:	46de      	mov	lr, fp
 8001b52:	b5e0      	push	{r5, r6, r7, lr}
 8001b54:	b083      	sub	sp, #12
 8001b56:	9000      	str	r0, [sp, #0]
 8001b58:	9101      	str	r1, [sp, #4]
 8001b5a:	030c      	lsls	r4, r1, #12
 8001b5c:	004d      	lsls	r5, r1, #1
 8001b5e:	0fce      	lsrs	r6, r1, #31
 8001b60:	0a61      	lsrs	r1, r4, #9
 8001b62:	9c00      	ldr	r4, [sp, #0]
 8001b64:	005f      	lsls	r7, r3, #1
 8001b66:	0f64      	lsrs	r4, r4, #29
 8001b68:	430c      	orrs	r4, r1
 8001b6a:	9900      	ldr	r1, [sp, #0]
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	00c8      	lsls	r0, r1, #3
 8001b72:	0319      	lsls	r1, r3, #12
 8001b74:	0d7b      	lsrs	r3, r7, #21
 8001b76:	4699      	mov	r9, r3
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001eac <__aeabi_dsub+0x364>)
 8001b7c:	0fdb      	lsrs	r3, r3, #31
 8001b7e:	469c      	mov	ip, r3
 8001b80:	0a4b      	lsrs	r3, r1, #9
 8001b82:	9900      	ldr	r1, [sp, #0]
 8001b84:	4680      	mov	r8, r0
 8001b86:	0f49      	lsrs	r1, r1, #29
 8001b88:	4319      	orrs	r1, r3
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	468b      	mov	fp, r1
 8001b8e:	00da      	lsls	r2, r3, #3
 8001b90:	4692      	mov	sl, r2
 8001b92:	0d6d      	lsrs	r5, r5, #21
 8001b94:	45b9      	cmp	r9, r7
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dsub+0x52>
 8001b98:	e0bf      	b.n	8001d1a <__aeabi_dsub+0x1d2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	4059      	eors	r1, r3
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	1aeb      	subs	r3, r5, r3
 8001ba6:	428e      	cmp	r6, r1
 8001ba8:	d075      	beq.n	8001c96 <__aeabi_dsub+0x14e>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dsub+0x68>
 8001bae:	e2a3      	b.n	80020f8 <__aeabi_dsub+0x5b0>
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x70>
 8001bb6:	e0ce      	b.n	8001d56 <__aeabi_dsub+0x20e>
 8001bb8:	42bd      	cmp	r5, r7
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x76>
 8001bbc:	e200      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001bbe:	2701      	movs	r7, #1
 8001bc0:	2b38      	cmp	r3, #56	@ 0x38
 8001bc2:	dc19      	bgt.n	8001bf8 <__aeabi_dsub+0xb0>
 8001bc4:	2780      	movs	r7, #128	@ 0x80
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	043f      	lsls	r7, r7, #16
 8001bca:	4339      	orrs	r1, r7
 8001bcc:	468b      	mov	fp, r1
 8001bce:	2b1f      	cmp	r3, #31
 8001bd0:	dd00      	ble.n	8001bd4 <__aeabi_dsub+0x8c>
 8001bd2:	e1fa      	b.n	8001fca <__aeabi_dsub+0x482>
 8001bd4:	2720      	movs	r7, #32
 8001bd6:	1af9      	subs	r1, r7, r3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	4667      	mov	r7, ip
 8001bde:	40b9      	lsls	r1, r7
 8001be0:	000f      	movs	r7, r1
 8001be2:	0011      	movs	r1, r2
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	430f      	orrs	r7, r1
 8001be8:	4661      	mov	r1, ip
 8001bea:	408a      	lsls	r2, r1
 8001bec:	1e51      	subs	r1, r2, #1
 8001bee:	418a      	sbcs	r2, r1
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	40d9      	lsrs	r1, r3
 8001bf4:	4317      	orrs	r7, r2
 8001bf6:	1a64      	subs	r4, r4, r1
 8001bf8:	1bc7      	subs	r7, r0, r7
 8001bfa:	42b8      	cmp	r0, r7
 8001bfc:	4180      	sbcs	r0, r0
 8001bfe:	4240      	negs	r0, r0
 8001c00:	1a24      	subs	r4, r4, r0
 8001c02:	0223      	lsls	r3, r4, #8
 8001c04:	d400      	bmi.n	8001c08 <__aeabi_dsub+0xc0>
 8001c06:	e140      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0a64      	lsrs	r4, r4, #9
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0xca>
 8001c10:	e154      	b.n	8001ebc <__aeabi_dsub+0x374>
 8001c12:	0020      	movs	r0, r4
 8001c14:	f000 fc52 	bl	80024bc <__clzsi2>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	0038      	movs	r0, r7
 8001c20:	1aca      	subs	r2, r1, r3
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	409c      	lsls	r4, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409f      	lsls	r7, r3
 8001c2a:	4322      	orrs	r2, r4
 8001c2c:	429d      	cmp	r5, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xea>
 8001c30:	e1a6      	b.n	8001f80 <__aeabi_dsub+0x438>
 8001c32:	1b58      	subs	r0, r3, r5
 8001c34:	3001      	adds	r0, #1
 8001c36:	1a09      	subs	r1, r1, r0
 8001c38:	003c      	movs	r4, r7
 8001c3a:	408f      	lsls	r7, r1
 8001c3c:	40c4      	lsrs	r4, r0
 8001c3e:	1e7b      	subs	r3, r7, #1
 8001c40:	419f      	sbcs	r7, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	408b      	lsls	r3, r1
 8001c46:	4327      	orrs	r7, r4
 8001c48:	431f      	orrs	r7, r3
 8001c4a:	40c2      	lsrs	r2, r0
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	0014      	movs	r4, r2
 8001c50:	2500      	movs	r5, #0
 8001c52:	4313      	orrs	r3, r2
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x110>
 8001c56:	e1f7      	b.n	8002048 <__aeabi_dsub+0x500>
 8001c58:	077b      	lsls	r3, r7, #29
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dsub+0x116>
 8001c5c:	e377      	b.n	800234e <__aeabi_dsub+0x806>
 8001c5e:	230f      	movs	r3, #15
 8001c60:	0038      	movs	r0, r7
 8001c62:	403b      	ands	r3, r7
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d004      	beq.n	8001c72 <__aeabi_dsub+0x12a>
 8001c68:	1d38      	adds	r0, r7, #4
 8001c6a:	42b8      	cmp	r0, r7
 8001c6c:	41bf      	sbcs	r7, r7
 8001c6e:	427f      	negs	r7, r7
 8001c70:	19e4      	adds	r4, r4, r7
 8001c72:	0223      	lsls	r3, r4, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x130>
 8001c76:	e368      	b.n	800234a <__aeabi_dsub+0x802>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	@ (8001eac <__aeabi_dsub+0x364>)
 8001c7a:	3501      	adds	r5, #1
 8001c7c:	429d      	cmp	r5, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13a>
 8001c80:	e0f4      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001c82:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001c84:	056d      	lsls	r5, r5, #21
 8001c86:	401c      	ands	r4, r3
 8001c88:	0d6d      	lsrs	r5, r5, #21
 8001c8a:	0767      	lsls	r7, r4, #29
 8001c8c:	08c0      	lsrs	r0, r0, #3
 8001c8e:	0264      	lsls	r4, r4, #9
 8001c90:	4307      	orrs	r7, r0
 8001c92:	0b24      	lsrs	r4, r4, #12
 8001c94:	e0ec      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc00      	bgt.n	8001c9c <__aeabi_dsub+0x154>
 8001c9a:	e329      	b.n	80022f0 <__aeabi_dsub+0x7a8>
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	2900      	cmp	r1, #0
 8001ca0:	d000      	beq.n	8001ca4 <__aeabi_dsub+0x15c>
 8001ca2:	e0d6      	b.n	8001e52 <__aeabi_dsub+0x30a>
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x164>
 8001caa:	e12e      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x16c>
 8001cb2:	e1e6      	b.n	8002082 <__aeabi_dsub+0x53a>
 8001cb4:	42bb      	cmp	r3, r7
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x172>
 8001cb8:	e182      	b.n	8001fc0 <__aeabi_dsub+0x478>
 8001cba:	2701      	movs	r7, #1
 8001cbc:	000b      	movs	r3, r1
 8001cbe:	2938      	cmp	r1, #56	@ 0x38
 8001cc0:	dc14      	bgt.n	8001cec <__aeabi_dsub+0x1a4>
 8001cc2:	2b1f      	cmp	r3, #31
 8001cc4:	dd00      	ble.n	8001cc8 <__aeabi_dsub+0x180>
 8001cc6:	e23c      	b.n	8002142 <__aeabi_dsub+0x5fa>
 8001cc8:	2720      	movs	r7, #32
 8001cca:	1af9      	subs	r1, r7, r3
 8001ccc:	468c      	mov	ip, r1
 8001cce:	4659      	mov	r1, fp
 8001cd0:	4667      	mov	r7, ip
 8001cd2:	40b9      	lsls	r1, r7
 8001cd4:	000f      	movs	r7, r1
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	40d9      	lsrs	r1, r3
 8001cda:	430f      	orrs	r7, r1
 8001cdc:	4661      	mov	r1, ip
 8001cde:	408a      	lsls	r2, r1
 8001ce0:	1e51      	subs	r1, r2, #1
 8001ce2:	418a      	sbcs	r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	40d9      	lsrs	r1, r3
 8001ce8:	4317      	orrs	r7, r2
 8001cea:	1864      	adds	r4, r4, r1
 8001cec:	183f      	adds	r7, r7, r0
 8001cee:	4287      	cmp	r7, r0
 8001cf0:	4180      	sbcs	r0, r0
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	0223      	lsls	r3, r4, #8
 8001cf8:	d400      	bmi.n	8001cfc <__aeabi_dsub+0x1b4>
 8001cfa:	e0c6      	b.n	8001e8a <__aeabi_dsub+0x342>
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <__aeabi_dsub+0x364>)
 8001cfe:	3501      	adds	r5, #1
 8001d00:	429d      	cmp	r5, r3
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x1be>
 8001d04:	e0b2      	b.n	8001e6c <__aeabi_dsub+0x324>
 8001d06:	2101      	movs	r1, #1
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001d0a:	087a      	lsrs	r2, r7, #1
 8001d0c:	401c      	ands	r4, r3
 8001d0e:	4039      	ands	r1, r7
 8001d10:	430a      	orrs	r2, r1
 8001d12:	07e7      	lsls	r7, r4, #31
 8001d14:	4317      	orrs	r7, r2
 8001d16:	0864      	lsrs	r4, r4, #1
 8001d18:	e79e      	b.n	8001c58 <__aeabi_dsub+0x110>
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <__aeabi_dsub+0x36c>)
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	468a      	mov	sl, r1
 8001d20:	18eb      	adds	r3, r5, r3
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d028      	beq.n	8001d78 <__aeabi_dsub+0x230>
 8001d26:	4566      	cmp	r6, ip
 8001d28:	d02c      	beq.n	8001d84 <__aeabi_dsub+0x23c>
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d05b      	beq.n	8001de6 <__aeabi_dsub+0x29e>
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	d100      	bne.n	8001d34 <__aeabi_dsub+0x1ec>
 8001d32:	e12c      	b.n	8001f8e <__aeabi_dsub+0x446>
 8001d34:	465b      	mov	r3, fp
 8001d36:	4666      	mov	r6, ip
 8001d38:	075f      	lsls	r7, r3, #29
 8001d3a:	08d2      	lsrs	r2, r2, #3
 8001d3c:	4317      	orrs	r7, r2
 8001d3e:	08dd      	lsrs	r5, r3, #3
 8001d40:	003b      	movs	r3, r7
 8001d42:	432b      	orrs	r3, r5
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x200>
 8001d46:	e0e2      	b.n	8001f0e <__aeabi_dsub+0x3c6>
 8001d48:	2480      	movs	r4, #128	@ 0x80
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	432c      	orrs	r4, r5
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4d56      	ldr	r5, [pc, #344]	@ (8001eac <__aeabi_dsub+0x364>)
 8001d52:	0b24      	lsrs	r4, r4, #12
 8001d54:	e08c      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001d56:	4659      	mov	r1, fp
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x216>
 8001d5c:	e0d5      	b.n	8001f0a <__aeabi_dsub+0x3c2>
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x21e>
 8001d64:	e1b9      	b.n	80020da <__aeabi_dsub+0x592>
 8001d66:	42bb      	cmp	r3, r7
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x224>
 8001d6a:	e1b1      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001d6c:	2701      	movs	r7, #1
 8001d6e:	000b      	movs	r3, r1
 8001d70:	2938      	cmp	r1, #56	@ 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x22e>
 8001d74:	e740      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001d76:	e72a      	b.n	8001bce <__aeabi_dsub+0x86>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	2701      	movs	r7, #1
 8001d7c:	4079      	eors	r1, r7
 8001d7e:	468c      	mov	ip, r1
 8001d80:	4566      	cmp	r6, ip
 8001d82:	d1d2      	bne.n	8001d2a <__aeabi_dsub+0x1e2>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x242>
 8001d88:	e0c5      	b.n	8001f16 <__aeabi_dsub+0x3ce>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x248>
 8001d8e:	e155      	b.n	800203c <__aeabi_dsub+0x4f4>
 8001d90:	464b      	mov	r3, r9
 8001d92:	0025      	movs	r5, r4
 8001d94:	4305      	orrs	r5, r0
 8001d96:	d100      	bne.n	8001d9a <__aeabi_dsub+0x252>
 8001d98:	e212      	b.n	80021c0 <__aeabi_dsub+0x678>
 8001d9a:	1e59      	subs	r1, r3, #1
 8001d9c:	468c      	mov	ip, r1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x25c>
 8001da2:	e249      	b.n	8002238 <__aeabi_dsub+0x6f0>
 8001da4:	4d41      	ldr	r5, [pc, #260]	@ (8001eac <__aeabi_dsub+0x364>)
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x264>
 8001daa:	e28f      	b.n	80022cc <__aeabi_dsub+0x784>
 8001dac:	2701      	movs	r7, #1
 8001dae:	2938      	cmp	r1, #56	@ 0x38
 8001db0:	dc11      	bgt.n	8001dd6 <__aeabi_dsub+0x28e>
 8001db2:	4663      	mov	r3, ip
 8001db4:	2b1f      	cmp	r3, #31
 8001db6:	dd00      	ble.n	8001dba <__aeabi_dsub+0x272>
 8001db8:	e25b      	b.n	8002272 <__aeabi_dsub+0x72a>
 8001dba:	4661      	mov	r1, ip
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	0027      	movs	r7, r4
 8001dc0:	1a5b      	subs	r3, r3, r1
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	4098      	lsls	r0, r3
 8001dc6:	409f      	lsls	r7, r3
 8001dc8:	40cd      	lsrs	r5, r1
 8001dca:	1e43      	subs	r3, r0, #1
 8001dcc:	4198      	sbcs	r0, r3
 8001dce:	40cc      	lsrs	r4, r1
 8001dd0:	432f      	orrs	r7, r5
 8001dd2:	4307      	orrs	r7, r0
 8001dd4:	44a3      	add	fp, r4
 8001dd6:	18bf      	adds	r7, r7, r2
 8001dd8:	4297      	cmp	r7, r2
 8001dda:	4192      	sbcs	r2, r2
 8001ddc:	4252      	negs	r2, r2
 8001dde:	445a      	add	r2, fp
 8001de0:	0014      	movs	r4, r2
 8001de2:	464d      	mov	r5, r9
 8001de4:	e787      	b.n	8001cf6 <__aeabi_dsub+0x1ae>
 8001de6:	4f34      	ldr	r7, [pc, #208]	@ (8001eb8 <__aeabi_dsub+0x370>)
 8001de8:	1c6b      	adds	r3, r5, #1
 8001dea:	423b      	tst	r3, r7
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dsub+0x2a8>
 8001dee:	e0b6      	b.n	8001f5e <__aeabi_dsub+0x416>
 8001df0:	4659      	mov	r1, fp
 8001df2:	0023      	movs	r3, r4
 8001df4:	4311      	orrs	r1, r2
 8001df6:	000f      	movs	r7, r1
 8001df8:	4303      	orrs	r3, r0
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dsub+0x2b8>
 8001dfe:	e126      	b.n	800204e <__aeabi_dsub+0x506>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x2be>
 8001e04:	e1c0      	b.n	8002188 <__aeabi_dsub+0x640>
 8001e06:	2900      	cmp	r1, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x2c4>
 8001e0a:	e0a1      	b.n	8001f50 <__aeabi_dsub+0x408>
 8001e0c:	1a83      	subs	r3, r0, r2
 8001e0e:	4698      	mov	r8, r3
 8001e10:	465b      	mov	r3, fp
 8001e12:	4540      	cmp	r0, r8
 8001e14:	41ad      	sbcs	r5, r5
 8001e16:	1ae3      	subs	r3, r4, r3
 8001e18:	426d      	negs	r5, r5
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	2580      	movs	r5, #128	@ 0x80
 8001e1e:	042d      	lsls	r5, r5, #16
 8001e20:	422b      	tst	r3, r5
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x2de>
 8001e24:	e14b      	b.n	80020be <__aeabi_dsub+0x576>
 8001e26:	465b      	mov	r3, fp
 8001e28:	1a10      	subs	r0, r2, r0
 8001e2a:	4282      	cmp	r2, r0
 8001e2c:	4192      	sbcs	r2, r2
 8001e2e:	1b1c      	subs	r4, r3, r4
 8001e30:	0007      	movs	r7, r0
 8001e32:	2601      	movs	r6, #1
 8001e34:	4663      	mov	r3, ip
 8001e36:	4252      	negs	r2, r2
 8001e38:	1aa4      	subs	r4, r4, r2
 8001e3a:	4327      	orrs	r7, r4
 8001e3c:	401e      	ands	r6, r3
 8001e3e:	2f00      	cmp	r7, #0
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x2fc>
 8001e42:	e142      	b.n	80020ca <__aeabi_dsub+0x582>
 8001e44:	422c      	tst	r4, r5
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x302>
 8001e48:	e26d      	b.n	8002326 <__aeabi_dsub+0x7de>
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <__aeabi_dsub+0x368>)
 8001e4c:	2501      	movs	r5, #1
 8001e4e:	401c      	ands	r4, r3
 8001e50:	e71b      	b.n	8001c8a <__aeabi_dsub+0x142>
 8001e52:	42bd      	cmp	r5, r7
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x310>
 8001e56:	e13b      	b.n	80020d0 <__aeabi_dsub+0x588>
 8001e58:	2701      	movs	r7, #1
 8001e5a:	2b38      	cmp	r3, #56	@ 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x318>
 8001e5e:	e745      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8001e60:	2780      	movs	r7, #128	@ 0x80
 8001e62:	4659      	mov	r1, fp
 8001e64:	043f      	lsls	r7, r7, #16
 8001e66:	4339      	orrs	r1, r7
 8001e68:	468b      	mov	fp, r1
 8001e6a:	e72a      	b.n	8001cc2 <__aeabi_dsub+0x17a>
 8001e6c:	2400      	movs	r4, #0
 8001e6e:	2700      	movs	r7, #0
 8001e70:	052d      	lsls	r5, r5, #20
 8001e72:	4325      	orrs	r5, r4
 8001e74:	07f6      	lsls	r6, r6, #31
 8001e76:	4335      	orrs	r5, r6
 8001e78:	0038      	movs	r0, r7
 8001e7a:	0029      	movs	r1, r5
 8001e7c:	b003      	add	sp, #12
 8001e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e80:	46bb      	mov	fp, r7
 8001e82:	46b2      	mov	sl, r6
 8001e84:	46a9      	mov	r9, r5
 8001e86:	46a0      	mov	r8, r4
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	d004      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e8e:	230f      	movs	r3, #15
 8001e90:	403b      	ands	r3, r7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dsub+0x350>
 8001e96:	e6e7      	b.n	8001c68 <__aeabi_dsub+0x120>
 8001e98:	002b      	movs	r3, r5
 8001e9a:	08f8      	lsrs	r0, r7, #3
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <__aeabi_dsub+0x364>)
 8001e9e:	0767      	lsls	r7, r4, #29
 8001ea0:	4307      	orrs	r7, r0
 8001ea2:	08e5      	lsrs	r5, r4, #3
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0x362>
 8001ea8:	e74a      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001eaa:	e0a5      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	0038      	movs	r0, r7
 8001ebe:	f000 fafd 	bl	80024bc <__clzsi2>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x384>
 8001eca:	e6a7      	b.n	8001c1c <__aeabi_dsub+0xd4>
 8001ecc:	003a      	movs	r2, r7
 8001ece:	3808      	subs	r0, #8
 8001ed0:	4082      	lsls	r2, r0
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	dd00      	ble.n	8001ed8 <__aeabi_dsub+0x390>
 8001ed6:	e08a      	b.n	8001fee <__aeabi_dsub+0x4a6>
 8001ed8:	1b5b      	subs	r3, r3, r5
 8001eda:	1c58      	adds	r0, r3, #1
 8001edc:	281f      	cmp	r0, #31
 8001ede:	dc00      	bgt.n	8001ee2 <__aeabi_dsub+0x39a>
 8001ee0:	e1d8      	b.n	8002294 <__aeabi_dsub+0x74c>
 8001ee2:	0017      	movs	r7, r2
 8001ee4:	3b1f      	subs	r3, #31
 8001ee6:	40df      	lsrs	r7, r3
 8001ee8:	2820      	cmp	r0, #32
 8001eea:	d005      	beq.n	8001ef8 <__aeabi_dsub+0x3b0>
 8001eec:	2340      	movs	r3, #64	@ 0x40
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	1e53      	subs	r3, r2, #1
 8001ef4:	419a      	sbcs	r2, r3
 8001ef6:	4317      	orrs	r7, r2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x3b8>
 8001efe:	e0e5      	b.n	80020cc <__aeabi_dsub+0x584>
 8001f00:	077b      	lsls	r3, r7, #29
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x3be>
 8001f04:	e6ab      	b.n	8001c5e <__aeabi_dsub+0x116>
 8001f06:	002c      	movs	r4, r5
 8001f08:	e7c6      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f0a:	08c0      	lsrs	r0, r0, #3
 8001f0c:	e7c6      	b.n	8001e9c <__aeabi_dsub+0x354>
 8001f0e:	2700      	movs	r7, #0
 8001f10:	2400      	movs	r4, #0
 8001f12:	4dd1      	ldr	r5, [pc, #836]	@ (8002258 <__aeabi_dsub+0x710>)
 8001f14:	e7ac      	b.n	8001e70 <__aeabi_dsub+0x328>
 8001f16:	4fd1      	ldr	r7, [pc, #836]	@ (800225c <__aeabi_dsub+0x714>)
 8001f18:	1c6b      	adds	r3, r5, #1
 8001f1a:	423b      	tst	r3, r7
 8001f1c:	d171      	bne.n	8002002 <__aeabi_dsub+0x4ba>
 8001f1e:	0023      	movs	r3, r4
 8001f20:	4303      	orrs	r3, r0
 8001f22:	2d00      	cmp	r5, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e0>
 8001f26:	e14e      	b.n	80021c6 <__aeabi_dsub+0x67e>
 8001f28:	4657      	mov	r7, sl
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x3e8>
 8001f2e:	e1b5      	b.n	800229c <__aeabi_dsub+0x754>
 8001f30:	2f00      	cmp	r7, #0
 8001f32:	d00d      	beq.n	8001f50 <__aeabi_dsub+0x408>
 8001f34:	1883      	adds	r3, r0, r2
 8001f36:	4283      	cmp	r3, r0
 8001f38:	4180      	sbcs	r0, r0
 8001f3a:	445c      	add	r4, fp
 8001f3c:	4240      	negs	r0, r0
 8001f3e:	1824      	adds	r4, r4, r0
 8001f40:	0222      	lsls	r2, r4, #8
 8001f42:	d500      	bpl.n	8001f46 <__aeabi_dsub+0x3fe>
 8001f44:	e1c8      	b.n	80022d8 <__aeabi_dsub+0x790>
 8001f46:	001f      	movs	r7, r3
 8001f48:	4698      	mov	r8, r3
 8001f4a:	4327      	orrs	r7, r4
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x408>
 8001f4e:	e0bc      	b.n	80020ca <__aeabi_dsub+0x582>
 8001f50:	4643      	mov	r3, r8
 8001f52:	0767      	lsls	r7, r4, #29
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	431f      	orrs	r7, r3
 8001f58:	08e5      	lsrs	r5, r4, #3
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e04c      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8001f5e:	1a83      	subs	r3, r0, r2
 8001f60:	4698      	mov	r8, r3
 8001f62:	465b      	mov	r3, fp
 8001f64:	4540      	cmp	r0, r8
 8001f66:	41bf      	sbcs	r7, r7
 8001f68:	1ae3      	subs	r3, r4, r3
 8001f6a:	427f      	negs	r7, r7
 8001f6c:	1bdb      	subs	r3, r3, r7
 8001f6e:	021f      	lsls	r7, r3, #8
 8001f70:	d47c      	bmi.n	800206c <__aeabi_dsub+0x524>
 8001f72:	4647      	mov	r7, r8
 8001f74:	431f      	orrs	r7, r3
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dsub+0x432>
 8001f78:	e0a6      	b.n	80020c8 <__aeabi_dsub+0x580>
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	e645      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8001f80:	4cb7      	ldr	r4, [pc, #732]	@ (8002260 <__aeabi_dsub+0x718>)
 8001f82:	1aed      	subs	r5, r5, r3
 8001f84:	4014      	ands	r4, r2
 8001f86:	077b      	lsls	r3, r7, #29
 8001f88:	d000      	beq.n	8001f8c <__aeabi_dsub+0x444>
 8001f8a:	e780      	b.n	8001e8e <__aeabi_dsub+0x346>
 8001f8c:	e784      	b.n	8001e98 <__aeabi_dsub+0x350>
 8001f8e:	464b      	mov	r3, r9
 8001f90:	0025      	movs	r5, r4
 8001f92:	4305      	orrs	r5, r0
 8001f94:	d066      	beq.n	8002064 <__aeabi_dsub+0x51c>
 8001f96:	1e5f      	subs	r7, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x456>
 8001f9c:	e0fc      	b.n	8002198 <__aeabi_dsub+0x650>
 8001f9e:	4dae      	ldr	r5, [pc, #696]	@ (8002258 <__aeabi_dsub+0x710>)
 8001fa0:	42ab      	cmp	r3, r5
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x45e>
 8001fa4:	e15e      	b.n	8002264 <__aeabi_dsub+0x71c>
 8001fa6:	4666      	mov	r6, ip
 8001fa8:	2f38      	cmp	r7, #56	@ 0x38
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dsub+0x466>
 8001fac:	e0b4      	b.n	8002118 <__aeabi_dsub+0x5d0>
 8001fae:	2001      	movs	r0, #1
 8001fb0:	1a17      	subs	r7, r2, r0
 8001fb2:	42ba      	cmp	r2, r7
 8001fb4:	4192      	sbcs	r2, r2
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	4252      	negs	r2, r2
 8001fba:	464d      	mov	r5, r9
 8001fbc:	1a9c      	subs	r4, r3, r2
 8001fbe:	e620      	b.n	8001c02 <__aeabi_dsub+0xba>
 8001fc0:	0767      	lsls	r7, r4, #29
 8001fc2:	08c0      	lsrs	r0, r0, #3
 8001fc4:	4307      	orrs	r7, r0
 8001fc6:	08e5      	lsrs	r5, r4, #3
 8001fc8:	e6ba      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8001fca:	001f      	movs	r7, r3
 8001fcc:	4659      	mov	r1, fp
 8001fce:	3f20      	subs	r7, #32
 8001fd0:	40f9      	lsrs	r1, r7
 8001fd2:	000f      	movs	r7, r1
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x49c>
 8001fd8:	2140      	movs	r1, #64	@ 0x40
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	4659      	mov	r1, fp
 8001fde:	4099      	lsls	r1, r3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	1e5a      	subs	r2, r3, #1
 8001fe8:	4193      	sbcs	r3, r2
 8001fea:	431f      	orrs	r7, r3
 8001fec:	e604      	b.n	8001bf8 <__aeabi_dsub+0xb0>
 8001fee:	1aeb      	subs	r3, r5, r3
 8001ff0:	4d9b      	ldr	r5, [pc, #620]	@ (8002260 <__aeabi_dsub+0x718>)
 8001ff2:	4015      	ands	r5, r2
 8001ff4:	076f      	lsls	r7, r5, #29
 8001ff6:	08ed      	lsrs	r5, r5, #3
 8001ff8:	032c      	lsls	r4, r5, #12
 8001ffa:	055d      	lsls	r5, r3, #21
 8001ffc:	0b24      	lsrs	r4, r4, #12
 8001ffe:	0d6d      	lsrs	r5, r5, #21
 8002000:	e736      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002002:	4d95      	ldr	r5, [pc, #596]	@ (8002258 <__aeabi_dsub+0x710>)
 8002004:	42ab      	cmp	r3, r5
 8002006:	d100      	bne.n	800200a <__aeabi_dsub+0x4c2>
 8002008:	e0d6      	b.n	80021b8 <__aeabi_dsub+0x670>
 800200a:	1882      	adds	r2, r0, r2
 800200c:	0021      	movs	r1, r4
 800200e:	4282      	cmp	r2, r0
 8002010:	4180      	sbcs	r0, r0
 8002012:	4459      	add	r1, fp
 8002014:	4240      	negs	r0, r0
 8002016:	1808      	adds	r0, r1, r0
 8002018:	07c7      	lsls	r7, r0, #31
 800201a:	0852      	lsrs	r2, r2, #1
 800201c:	4317      	orrs	r7, r2
 800201e:	0844      	lsrs	r4, r0, #1
 8002020:	0752      	lsls	r2, r2, #29
 8002022:	d400      	bmi.n	8002026 <__aeabi_dsub+0x4de>
 8002024:	e185      	b.n	8002332 <__aeabi_dsub+0x7ea>
 8002026:	220f      	movs	r2, #15
 8002028:	001d      	movs	r5, r3
 800202a:	403a      	ands	r2, r7
 800202c:	2a04      	cmp	r2, #4
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x4ea>
 8002030:	e61a      	b.n	8001c68 <__aeabi_dsub+0x120>
 8002032:	08ff      	lsrs	r7, r7, #3
 8002034:	0764      	lsls	r4, r4, #29
 8002036:	4327      	orrs	r7, r4
 8002038:	0905      	lsrs	r5, r0, #4
 800203a:	e7dd      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800203c:	465b      	mov	r3, fp
 800203e:	08d2      	lsrs	r2, r2, #3
 8002040:	075f      	lsls	r7, r3, #29
 8002042:	4317      	orrs	r7, r2
 8002044:	08dd      	lsrs	r5, r3, #3
 8002046:	e67b      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002048:	2700      	movs	r7, #0
 800204a:	2400      	movs	r4, #0
 800204c:	e710      	b.n	8001e70 <__aeabi_dsub+0x328>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x50c>
 8002052:	e0d6      	b.n	8002202 <__aeabi_dsub+0x6ba>
 8002054:	2900      	cmp	r1, #0
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x512>
 8002058:	e12f      	b.n	80022ba <__aeabi_dsub+0x772>
 800205a:	2480      	movs	r4, #128	@ 0x80
 800205c:	2600      	movs	r6, #0
 800205e:	4d7e      	ldr	r5, [pc, #504]	@ (8002258 <__aeabi_dsub+0x710>)
 8002060:	0324      	lsls	r4, r4, #12
 8002062:	e705      	b.n	8001e70 <__aeabi_dsub+0x328>
 8002064:	4666      	mov	r6, ip
 8002066:	465c      	mov	r4, fp
 8002068:	08d0      	lsrs	r0, r2, #3
 800206a:	e717      	b.n	8001e9c <__aeabi_dsub+0x354>
 800206c:	465b      	mov	r3, fp
 800206e:	1a17      	subs	r7, r2, r0
 8002070:	42ba      	cmp	r2, r7
 8002072:	4192      	sbcs	r2, r2
 8002074:	1b1c      	subs	r4, r3, r4
 8002076:	2601      	movs	r6, #1
 8002078:	4663      	mov	r3, ip
 800207a:	4252      	negs	r2, r2
 800207c:	1aa4      	subs	r4, r4, r2
 800207e:	401e      	ands	r6, r3
 8002080:	e5c4      	b.n	8001c0c <__aeabi_dsub+0xc4>
 8002082:	1883      	adds	r3, r0, r2
 8002084:	4283      	cmp	r3, r0
 8002086:	4180      	sbcs	r0, r0
 8002088:	445c      	add	r4, fp
 800208a:	4240      	negs	r0, r0
 800208c:	1825      	adds	r5, r4, r0
 800208e:	022a      	lsls	r2, r5, #8
 8002090:	d400      	bmi.n	8002094 <__aeabi_dsub+0x54c>
 8002092:	e0da      	b.n	800224a <__aeabi_dsub+0x702>
 8002094:	4a72      	ldr	r2, [pc, #456]	@ (8002260 <__aeabi_dsub+0x718>)
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	4015      	ands	r5, r2
 800209a:	07ea      	lsls	r2, r5, #31
 800209c:	431a      	orrs	r2, r3
 800209e:	0869      	lsrs	r1, r5, #1
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	d400      	bmi.n	80020a6 <__aeabi_dsub+0x55e>
 80020a4:	e14a      	b.n	800233c <__aeabi_dsub+0x7f4>
 80020a6:	230f      	movs	r3, #15
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d100      	bne.n	80020b0 <__aeabi_dsub+0x568>
 80020ae:	e0fc      	b.n	80022aa <__aeabi_dsub+0x762>
 80020b0:	1d17      	adds	r7, r2, #4
 80020b2:	4297      	cmp	r7, r2
 80020b4:	41a4      	sbcs	r4, r4
 80020b6:	4264      	negs	r4, r4
 80020b8:	2502      	movs	r5, #2
 80020ba:	1864      	adds	r4, r4, r1
 80020bc:	e6ec      	b.n	8001e98 <__aeabi_dsub+0x350>
 80020be:	4647      	mov	r7, r8
 80020c0:	001c      	movs	r4, r3
 80020c2:	431f      	orrs	r7, r3
 80020c4:	d000      	beq.n	80020c8 <__aeabi_dsub+0x580>
 80020c6:	e743      	b.n	8001f50 <__aeabi_dsub+0x408>
 80020c8:	2600      	movs	r6, #0
 80020ca:	2500      	movs	r5, #0
 80020cc:	2400      	movs	r4, #0
 80020ce:	e6cf      	b.n	8001e70 <__aeabi_dsub+0x328>
 80020d0:	08c0      	lsrs	r0, r0, #3
 80020d2:	0767      	lsls	r7, r4, #29
 80020d4:	4307      	orrs	r7, r0
 80020d6:	08e5      	lsrs	r5, r4, #3
 80020d8:	e632      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80020da:	1a87      	subs	r7, r0, r2
 80020dc:	465b      	mov	r3, fp
 80020de:	42b8      	cmp	r0, r7
 80020e0:	4180      	sbcs	r0, r0
 80020e2:	1ae4      	subs	r4, r4, r3
 80020e4:	4240      	negs	r0, r0
 80020e6:	1a24      	subs	r4, r4, r0
 80020e8:	0223      	lsls	r3, r4, #8
 80020ea:	d428      	bmi.n	800213e <__aeabi_dsub+0x5f6>
 80020ec:	0763      	lsls	r3, r4, #29
 80020ee:	08ff      	lsrs	r7, r7, #3
 80020f0:	431f      	orrs	r7, r3
 80020f2:	08e5      	lsrs	r5, r4, #3
 80020f4:	2301      	movs	r3, #1
 80020f6:	e77f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x5b6>
 80020fc:	e673      	b.n	8001de6 <__aeabi_dsub+0x29e>
 80020fe:	464b      	mov	r3, r9
 8002100:	1b5f      	subs	r7, r3, r5
 8002102:	003b      	movs	r3, r7
 8002104:	2d00      	cmp	r5, #0
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x5c2>
 8002108:	e742      	b.n	8001f90 <__aeabi_dsub+0x448>
 800210a:	2f38      	cmp	r7, #56	@ 0x38
 800210c:	dd00      	ble.n	8002110 <__aeabi_dsub+0x5c8>
 800210e:	e0ec      	b.n	80022ea <__aeabi_dsub+0x7a2>
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	000e      	movs	r6, r1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431c      	orrs	r4, r3
 8002118:	2f1f      	cmp	r7, #31
 800211a:	dc25      	bgt.n	8002168 <__aeabi_dsub+0x620>
 800211c:	2520      	movs	r5, #32
 800211e:	0023      	movs	r3, r4
 8002120:	1bed      	subs	r5, r5, r7
 8002122:	0001      	movs	r1, r0
 8002124:	40a8      	lsls	r0, r5
 8002126:	40ab      	lsls	r3, r5
 8002128:	40f9      	lsrs	r1, r7
 800212a:	1e45      	subs	r5, r0, #1
 800212c:	41a8      	sbcs	r0, r5
 800212e:	430b      	orrs	r3, r1
 8002130:	40fc      	lsrs	r4, r7
 8002132:	4318      	orrs	r0, r3
 8002134:	465b      	mov	r3, fp
 8002136:	1b1b      	subs	r3, r3, r4
 8002138:	469b      	mov	fp, r3
 800213a:	e739      	b.n	8001fb0 <__aeabi_dsub+0x468>
 800213c:	4666      	mov	r6, ip
 800213e:	2501      	movs	r5, #1
 8002140:	e562      	b.n	8001c08 <__aeabi_dsub+0xc0>
 8002142:	001f      	movs	r7, r3
 8002144:	4659      	mov	r1, fp
 8002146:	3f20      	subs	r7, #32
 8002148:	40f9      	lsrs	r1, r7
 800214a:	468c      	mov	ip, r1
 800214c:	2b20      	cmp	r3, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x614>
 8002150:	2740      	movs	r7, #64	@ 0x40
 8002152:	4659      	mov	r1, fp
 8002154:	1afb      	subs	r3, r7, r3
 8002156:	4099      	lsls	r1, r3
 8002158:	430a      	orrs	r2, r1
 800215a:	4692      	mov	sl, r2
 800215c:	4657      	mov	r7, sl
 800215e:	1e7b      	subs	r3, r7, #1
 8002160:	419f      	sbcs	r7, r3
 8002162:	4663      	mov	r3, ip
 8002164:	431f      	orrs	r7, r3
 8002166:	e5c1      	b.n	8001cec <__aeabi_dsub+0x1a4>
 8002168:	003b      	movs	r3, r7
 800216a:	0025      	movs	r5, r4
 800216c:	3b20      	subs	r3, #32
 800216e:	40dd      	lsrs	r5, r3
 8002170:	2f20      	cmp	r7, #32
 8002172:	d004      	beq.n	800217e <__aeabi_dsub+0x636>
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	1bdb      	subs	r3, r3, r7
 8002178:	409c      	lsls	r4, r3
 800217a:	4320      	orrs	r0, r4
 800217c:	4680      	mov	r8, r0
 800217e:	4640      	mov	r0, r8
 8002180:	1e43      	subs	r3, r0, #1
 8002182:	4198      	sbcs	r0, r3
 8002184:	4328      	orrs	r0, r5
 8002186:	e713      	b.n	8001fb0 <__aeabi_dsub+0x468>
 8002188:	2900      	cmp	r1, #0
 800218a:	d09d      	beq.n	80020c8 <__aeabi_dsub+0x580>
 800218c:	2601      	movs	r6, #1
 800218e:	4663      	mov	r3, ip
 8002190:	465c      	mov	r4, fp
 8002192:	4690      	mov	r8, r2
 8002194:	401e      	ands	r6, r3
 8002196:	e6db      	b.n	8001f50 <__aeabi_dsub+0x408>
 8002198:	1a17      	subs	r7, r2, r0
 800219a:	465b      	mov	r3, fp
 800219c:	42ba      	cmp	r2, r7
 800219e:	4192      	sbcs	r2, r2
 80021a0:	1b1c      	subs	r4, r3, r4
 80021a2:	4252      	negs	r2, r2
 80021a4:	1aa4      	subs	r4, r4, r2
 80021a6:	0223      	lsls	r3, r4, #8
 80021a8:	d4c8      	bmi.n	800213c <__aeabi_dsub+0x5f4>
 80021aa:	0763      	lsls	r3, r4, #29
 80021ac:	08ff      	lsrs	r7, r7, #3
 80021ae:	431f      	orrs	r7, r3
 80021b0:	4666      	mov	r6, ip
 80021b2:	2301      	movs	r3, #1
 80021b4:	08e5      	lsrs	r5, r4, #3
 80021b6:	e71f      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80021b8:	001d      	movs	r5, r3
 80021ba:	2400      	movs	r4, #0
 80021bc:	2700      	movs	r7, #0
 80021be:	e657      	b.n	8001e70 <__aeabi_dsub+0x328>
 80021c0:	465c      	mov	r4, fp
 80021c2:	08d0      	lsrs	r0, r2, #3
 80021c4:	e66a      	b.n	8001e9c <__aeabi_dsub+0x354>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x684>
 80021ca:	e737      	b.n	800203c <__aeabi_dsub+0x4f4>
 80021cc:	4653      	mov	r3, sl
 80021ce:	08c0      	lsrs	r0, r0, #3
 80021d0:	0767      	lsls	r7, r4, #29
 80021d2:	4307      	orrs	r7, r0
 80021d4:	08e5      	lsrs	r5, r4, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <__aeabi_dsub+0x694>
 80021da:	e5b1      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	421d      	tst	r5, r3
 80021e2:	d008      	beq.n	80021f6 <__aeabi_dsub+0x6ae>
 80021e4:	4659      	mov	r1, fp
 80021e6:	08c8      	lsrs	r0, r1, #3
 80021e8:	4218      	tst	r0, r3
 80021ea:	d104      	bne.n	80021f6 <__aeabi_dsub+0x6ae>
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	0749      	lsls	r1, r1, #29
 80021f0:	430a      	orrs	r2, r1
 80021f2:	0017      	movs	r7, r2
 80021f4:	0005      	movs	r5, r0
 80021f6:	0f7b      	lsrs	r3, r7, #29
 80021f8:	00ff      	lsls	r7, r7, #3
 80021fa:	08ff      	lsrs	r7, r7, #3
 80021fc:	075b      	lsls	r3, r3, #29
 80021fe:	431f      	orrs	r7, r3
 8002200:	e59e      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002202:	08c0      	lsrs	r0, r0, #3
 8002204:	0763      	lsls	r3, r4, #29
 8002206:	4318      	orrs	r0, r3
 8002208:	08e5      	lsrs	r5, r4, #3
 800220a:	2900      	cmp	r1, #0
 800220c:	d053      	beq.n	80022b6 <__aeabi_dsub+0x76e>
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	031b      	lsls	r3, r3, #12
 8002212:	421d      	tst	r5, r3
 8002214:	d00a      	beq.n	800222c <__aeabi_dsub+0x6e4>
 8002216:	4659      	mov	r1, fp
 8002218:	08cc      	lsrs	r4, r1, #3
 800221a:	421c      	tst	r4, r3
 800221c:	d106      	bne.n	800222c <__aeabi_dsub+0x6e4>
 800221e:	2601      	movs	r6, #1
 8002220:	4663      	mov	r3, ip
 8002222:	0025      	movs	r5, r4
 8002224:	08d0      	lsrs	r0, r2, #3
 8002226:	0749      	lsls	r1, r1, #29
 8002228:	4308      	orrs	r0, r1
 800222a:	401e      	ands	r6, r3
 800222c:	0f47      	lsrs	r7, r0, #29
 800222e:	00c0      	lsls	r0, r0, #3
 8002230:	08c0      	lsrs	r0, r0, #3
 8002232:	077f      	lsls	r7, r7, #29
 8002234:	4307      	orrs	r7, r0
 8002236:	e583      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002238:	1883      	adds	r3, r0, r2
 800223a:	4293      	cmp	r3, r2
 800223c:	4192      	sbcs	r2, r2
 800223e:	445c      	add	r4, fp
 8002240:	4252      	negs	r2, r2
 8002242:	18a5      	adds	r5, r4, r2
 8002244:	022a      	lsls	r2, r5, #8
 8002246:	d500      	bpl.n	800224a <__aeabi_dsub+0x702>
 8002248:	e724      	b.n	8002094 <__aeabi_dsub+0x54c>
 800224a:	076f      	lsls	r7, r5, #29
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	431f      	orrs	r7, r3
 8002250:	08ed      	lsrs	r5, r5, #3
 8002252:	2301      	movs	r3, #1
 8002254:	e6d0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	000007fe 	.word	0x000007fe
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	465b      	mov	r3, fp
 8002266:	08d2      	lsrs	r2, r2, #3
 8002268:	075f      	lsls	r7, r3, #29
 800226a:	4666      	mov	r6, ip
 800226c:	4317      	orrs	r7, r2
 800226e:	08dd      	lsrs	r5, r3, #3
 8002270:	e566      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 8002272:	0025      	movs	r5, r4
 8002274:	3b20      	subs	r3, #32
 8002276:	40dd      	lsrs	r5, r3
 8002278:	4663      	mov	r3, ip
 800227a:	2b20      	cmp	r3, #32
 800227c:	d005      	beq.n	800228a <__aeabi_dsub+0x742>
 800227e:	2340      	movs	r3, #64	@ 0x40
 8002280:	4661      	mov	r1, ip
 8002282:	1a5b      	subs	r3, r3, r1
 8002284:	409c      	lsls	r4, r3
 8002286:	4320      	orrs	r0, r4
 8002288:	4680      	mov	r8, r0
 800228a:	4647      	mov	r7, r8
 800228c:	1e7b      	subs	r3, r7, #1
 800228e:	419f      	sbcs	r7, r3
 8002290:	432f      	orrs	r7, r5
 8002292:	e5a0      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002294:	2120      	movs	r1, #32
 8002296:	2700      	movs	r7, #0
 8002298:	1a09      	subs	r1, r1, r0
 800229a:	e4d2      	b.n	8001c42 <__aeabi_dsub+0xfa>
 800229c:	2f00      	cmp	r7, #0
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x75a>
 80022a0:	e713      	b.n	80020ca <__aeabi_dsub+0x582>
 80022a2:	465c      	mov	r4, fp
 80022a4:	0017      	movs	r7, r2
 80022a6:	2500      	movs	r5, #0
 80022a8:	e5f6      	b.n	8001e98 <__aeabi_dsub+0x350>
 80022aa:	08d7      	lsrs	r7, r2, #3
 80022ac:	0749      	lsls	r1, r1, #29
 80022ae:	2302      	movs	r3, #2
 80022b0:	430f      	orrs	r7, r1
 80022b2:	092d      	lsrs	r5, r5, #4
 80022b4:	e6a0      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 80022b6:	0007      	movs	r7, r0
 80022b8:	e542      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022ba:	465b      	mov	r3, fp
 80022bc:	2601      	movs	r6, #1
 80022be:	075f      	lsls	r7, r3, #29
 80022c0:	08dd      	lsrs	r5, r3, #3
 80022c2:	4663      	mov	r3, ip
 80022c4:	08d2      	lsrs	r2, r2, #3
 80022c6:	4317      	orrs	r7, r2
 80022c8:	401e      	ands	r6, r3
 80022ca:	e539      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022cc:	465b      	mov	r3, fp
 80022ce:	08d2      	lsrs	r2, r2, #3
 80022d0:	075f      	lsls	r7, r3, #29
 80022d2:	4317      	orrs	r7, r2
 80022d4:	08dd      	lsrs	r5, r3, #3
 80022d6:	e533      	b.n	8001d40 <__aeabi_dsub+0x1f8>
 80022d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002354 <__aeabi_dsub+0x80c>)
 80022da:	08db      	lsrs	r3, r3, #3
 80022dc:	4022      	ands	r2, r4
 80022de:	0757      	lsls	r7, r2, #29
 80022e0:	0252      	lsls	r2, r2, #9
 80022e2:	2501      	movs	r5, #1
 80022e4:	431f      	orrs	r7, r3
 80022e6:	0b14      	lsrs	r4, r2, #12
 80022e8:	e5c2      	b.n	8001e70 <__aeabi_dsub+0x328>
 80022ea:	000e      	movs	r6, r1
 80022ec:	2001      	movs	r0, #1
 80022ee:	e65f      	b.n	8001fb0 <__aeabi_dsub+0x468>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <__aeabi_dsub+0x7c8>
 80022f4:	464b      	mov	r3, r9
 80022f6:	1b5b      	subs	r3, r3, r5
 80022f8:	469c      	mov	ip, r3
 80022fa:	2d00      	cmp	r5, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x7b8>
 80022fe:	e548      	b.n	8001d92 <__aeabi_dsub+0x24a>
 8002300:	2701      	movs	r7, #1
 8002302:	2b38      	cmp	r3, #56	@ 0x38
 8002304:	dd00      	ble.n	8002308 <__aeabi_dsub+0x7c0>
 8002306:	e566      	b.n	8001dd6 <__aeabi_dsub+0x28e>
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	041b      	lsls	r3, r3, #16
 800230c:	431c      	orrs	r4, r3
 800230e:	e550      	b.n	8001db2 <__aeabi_dsub+0x26a>
 8002310:	1c6b      	adds	r3, r5, #1
 8002312:	4d11      	ldr	r5, [pc, #68]	@ (8002358 <__aeabi_dsub+0x810>)
 8002314:	422b      	tst	r3, r5
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x7d2>
 8002318:	e673      	b.n	8002002 <__aeabi_dsub+0x4ba>
 800231a:	4659      	mov	r1, fp
 800231c:	0023      	movs	r3, r4
 800231e:	4311      	orrs	r1, r2
 8002320:	468a      	mov	sl, r1
 8002322:	4303      	orrs	r3, r0
 8002324:	e600      	b.n	8001f28 <__aeabi_dsub+0x3e0>
 8002326:	0767      	lsls	r7, r4, #29
 8002328:	08c0      	lsrs	r0, r0, #3
 800232a:	2300      	movs	r3, #0
 800232c:	4307      	orrs	r7, r0
 800232e:	08e5      	lsrs	r5, r4, #3
 8002330:	e662      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 8002332:	0764      	lsls	r4, r4, #29
 8002334:	08ff      	lsrs	r7, r7, #3
 8002336:	4327      	orrs	r7, r4
 8002338:	0905      	lsrs	r5, r0, #4
 800233a:	e65d      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800233c:	08d2      	lsrs	r2, r2, #3
 800233e:	0749      	lsls	r1, r1, #29
 8002340:	4311      	orrs	r1, r2
 8002342:	000f      	movs	r7, r1
 8002344:	2302      	movs	r3, #2
 8002346:	092d      	lsrs	r5, r5, #4
 8002348:	e656      	b.n	8001ff8 <__aeabi_dsub+0x4b0>
 800234a:	0007      	movs	r7, r0
 800234c:	e5a4      	b.n	8001e98 <__aeabi_dsub+0x350>
 800234e:	0038      	movs	r0, r7
 8002350:	e48f      	b.n	8001c72 <__aeabi_dsub+0x12a>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	ff7fffff 	.word	0xff7fffff
 8002358:	000007fe 	.word	0x000007fe

0800235c <__aeabi_dcmpun>:
 800235c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235e:	46c6      	mov	lr, r8
 8002360:	031e      	lsls	r6, r3, #12
 8002362:	0b36      	lsrs	r6, r6, #12
 8002364:	46b0      	mov	r8, r6
 8002366:	4e0d      	ldr	r6, [pc, #52]	@ (800239c <__aeabi_dcmpun+0x40>)
 8002368:	030c      	lsls	r4, r1, #12
 800236a:	004d      	lsls	r5, r1, #1
 800236c:	005f      	lsls	r7, r3, #1
 800236e:	b500      	push	{lr}
 8002370:	0b24      	lsrs	r4, r4, #12
 8002372:	0d6d      	lsrs	r5, r5, #21
 8002374:	0d7f      	lsrs	r7, r7, #21
 8002376:	42b5      	cmp	r5, r6
 8002378:	d00b      	beq.n	8002392 <__aeabi_dcmpun+0x36>
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <__aeabi_dcmpun+0x40>)
 800237c:	2000      	movs	r0, #0
 800237e:	428f      	cmp	r7, r1
 8002380:	d104      	bne.n	800238c <__aeabi_dcmpun+0x30>
 8002382:	4646      	mov	r6, r8
 8002384:	4316      	orrs	r6, r2
 8002386:	0030      	movs	r0, r6
 8002388:	1e43      	subs	r3, r0, #1
 800238a:	4198      	sbcs	r0, r3
 800238c:	bc80      	pop	{r7}
 800238e:	46b8      	mov	r8, r7
 8002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002392:	4304      	orrs	r4, r0
 8002394:	2001      	movs	r0, #1
 8002396:	2c00      	cmp	r4, #0
 8002398:	d1f8      	bne.n	800238c <__aeabi_dcmpun+0x30>
 800239a:	e7ee      	b.n	800237a <__aeabi_dcmpun+0x1e>
 800239c:	000007ff 	.word	0x000007ff

080023a0 <__aeabi_d2iz>:
 80023a0:	000b      	movs	r3, r1
 80023a2:	0002      	movs	r2, r0
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d16      	ldr	r5, [pc, #88]	@ (8002400 <__aeabi_d2iz+0x60>)
 80023a8:	030c      	lsls	r4, r1, #12
 80023aa:	b082      	sub	sp, #8
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	9200      	str	r2, [sp, #0]
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	0b24      	lsrs	r4, r4, #12
 80023b6:	0d49      	lsrs	r1, r1, #21
 80023b8:	0fde      	lsrs	r6, r3, #31
 80023ba:	42a9      	cmp	r1, r5
 80023bc:	dd04      	ble.n	80023c8 <__aeabi_d2iz+0x28>
 80023be:	4811      	ldr	r0, [pc, #68]	@ (8002404 <__aeabi_d2iz+0x64>)
 80023c0:	4281      	cmp	r1, r0
 80023c2:	dd03      	ble.n	80023cc <__aeabi_d2iz+0x2c>
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <__aeabi_d2iz+0x68>)
 80023c6:	18f0      	adds	r0, r6, r3
 80023c8:	b002      	add	sp, #8
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	2080      	movs	r0, #128	@ 0x80
 80023ce:	0340      	lsls	r0, r0, #13
 80023d0:	4320      	orrs	r0, r4
 80023d2:	4c0e      	ldr	r4, [pc, #56]	@ (800240c <__aeabi_d2iz+0x6c>)
 80023d4:	1a64      	subs	r4, r4, r1
 80023d6:	2c1f      	cmp	r4, #31
 80023d8:	dd08      	ble.n	80023ec <__aeabi_d2iz+0x4c>
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <__aeabi_d2iz+0x70>)
 80023dc:	1a5b      	subs	r3, r3, r1
 80023de:	40d8      	lsrs	r0, r3
 80023e0:	0003      	movs	r3, r0
 80023e2:	4258      	negs	r0, r3
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	d1ef      	bne.n	80023c8 <__aeabi_d2iz+0x28>
 80023e8:	0018      	movs	r0, r3
 80023ea:	e7ed      	b.n	80023c8 <__aeabi_d2iz+0x28>
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <__aeabi_d2iz+0x74>)
 80023ee:	9a00      	ldr	r2, [sp, #0]
 80023f0:	469c      	mov	ip, r3
 80023f2:	0003      	movs	r3, r0
 80023f4:	4461      	add	r1, ip
 80023f6:	408b      	lsls	r3, r1
 80023f8:	40e2      	lsrs	r2, r4
 80023fa:	4313      	orrs	r3, r2
 80023fc:	e7f1      	b.n	80023e2 <__aeabi_d2iz+0x42>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	000003fe 	.word	0x000003fe
 8002404:	0000041d 	.word	0x0000041d
 8002408:	7fffffff 	.word	0x7fffffff
 800240c:	00000433 	.word	0x00000433
 8002410:	00000413 	.word	0x00000413
 8002414:	fffffbed 	.word	0xfffffbed

08002418 <__aeabi_i2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2800      	cmp	r0, #0
 800241c:	d016      	beq.n	800244c <__aeabi_i2d+0x34>
 800241e:	17c3      	asrs	r3, r0, #31
 8002420:	18c5      	adds	r5, r0, r3
 8002422:	405d      	eors	r5, r3
 8002424:	0fc4      	lsrs	r4, r0, #31
 8002426:	0028      	movs	r0, r5
 8002428:	f000 f848 	bl	80024bc <__clzsi2>
 800242c:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <__aeabi_i2d+0x58>)
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	055b      	lsls	r3, r3, #21
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	280a      	cmp	r0, #10
 8002436:	dc14      	bgt.n	8002462 <__aeabi_i2d+0x4a>
 8002438:	0002      	movs	r2, r0
 800243a:	002e      	movs	r6, r5
 800243c:	3215      	adds	r2, #21
 800243e:	4096      	lsls	r6, r2
 8002440:	220b      	movs	r2, #11
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d5      	lsrs	r5, r2
 8002446:	032d      	lsls	r5, r5, #12
 8002448:	0b2d      	lsrs	r5, r5, #12
 800244a:	e003      	b.n	8002454 <__aeabi_i2d+0x3c>
 800244c:	2400      	movs	r4, #0
 800244e:	2300      	movs	r3, #0
 8002450:	2500      	movs	r5, #0
 8002452:	2600      	movs	r6, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	432b      	orrs	r3, r5
 8002458:	07e4      	lsls	r4, r4, #31
 800245a:	4323      	orrs	r3, r4
 800245c:	0030      	movs	r0, r6
 800245e:	0019      	movs	r1, r3
 8002460:	bd70      	pop	{r4, r5, r6, pc}
 8002462:	380b      	subs	r0, #11
 8002464:	4085      	lsls	r5, r0
 8002466:	032d      	lsls	r5, r5, #12
 8002468:	2600      	movs	r6, #0
 800246a:	0b2d      	lsrs	r5, r5, #12
 800246c:	e7f2      	b.n	8002454 <__aeabi_i2d+0x3c>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	0000041e 	.word	0x0000041e

08002474 <__aeabi_ui2d>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e04      	subs	r4, r0, #0
 8002478:	d010      	beq.n	800249c <__aeabi_ui2d+0x28>
 800247a:	f000 f81f 	bl	80024bc <__clzsi2>
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <__aeabi_ui2d+0x44>)
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	055b      	lsls	r3, r3, #21
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	280a      	cmp	r0, #10
 8002488:	dc0f      	bgt.n	80024aa <__aeabi_ui2d+0x36>
 800248a:	220b      	movs	r2, #11
 800248c:	0021      	movs	r1, r4
 800248e:	1a12      	subs	r2, r2, r0
 8002490:	40d1      	lsrs	r1, r2
 8002492:	3015      	adds	r0, #21
 8002494:	030a      	lsls	r2, r1, #12
 8002496:	4084      	lsls	r4, r0
 8002498:	0b12      	lsrs	r2, r2, #12
 800249a:	e001      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 800249c:	2300      	movs	r3, #0
 800249e:	2200      	movs	r2, #0
 80024a0:	051b      	lsls	r3, r3, #20
 80024a2:	4313      	orrs	r3, r2
 80024a4:	0020      	movs	r0, r4
 80024a6:	0019      	movs	r1, r3
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	0022      	movs	r2, r4
 80024ac:	380b      	subs	r0, #11
 80024ae:	4082      	lsls	r2, r0
 80024b0:	0312      	lsls	r2, r2, #12
 80024b2:	2400      	movs	r4, #0
 80024b4:	0b12      	lsrs	r2, r2, #12
 80024b6:	e7f3      	b.n	80024a0 <__aeabi_ui2d+0x2c>
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	@ (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <Oled_init>:
#include <stdio.h>
#include "OLED_WS0010.h"

Oled_HandleTypeDef Oled_init(GPIO_TypeDef* rs_port, uint16_t rs_pin,
		GPIO_TypeDef* en_port, uint16_t en_pin, GPIO_TypeDef* data_port[],
		uint16_t data_pin[]) {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	801a      	strh	r2, [r3, #0]
	Oled_HandleTypeDef oled;
	oled.rs_pin = rs_pin;
 8002508:	2110      	movs	r1, #16
 800250a:	187b      	adds	r3, r7, r1
 800250c:	1dba      	adds	r2, r7, #6
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	809a      	strh	r2, [r3, #4]
	oled.rs_port = rs_port;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	601a      	str	r2, [r3, #0]
	oled.enable_pin = en_pin;
 8002518:	187a      	adds	r2, r7, r1
 800251a:	2338      	movs	r3, #56	@ 0x38
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	8193      	strh	r3, [r2, #12]
	oled.enable_port = en_port;
 8002522:	000c      	movs	r4, r1
 8002524:	193b      	adds	r3, r7, r4
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]
	oled.data_pin = data_pin;
 800252a:	193b      	adds	r3, r7, r4
 800252c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800252e:	615a      	str	r2, [r3, #20]
	oled.data_port = data_port;
 8002530:	193b      	adds	r3, r7, r4
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	611a      	str	r2, [r3, #16]

	Oled_writeCommand(&oled, 0x33);
 8002536:	193b      	adds	r3, r7, r4
 8002538:	2133      	movs	r1, #51	@ 0x33
 800253a:	0018      	movs	r0, r3
 800253c:	f000 f975 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x32);
 8002540:	193b      	adds	r3, r7, r4
 8002542:	2132      	movs	r1, #50	@ 0x32
 8002544:	0018      	movs	r0, r3
 8002546:	f000 f970 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x28);
 800254a:	193b      	adds	r3, r7, r4
 800254c:	2128      	movs	r1, #40	@ 0x28
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f96b 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002554:	193b      	adds	r3, r7, r4
 8002556:	2101      	movs	r1, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f966 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x08 | 0x04);
 800255e:	193b      	adds	r3, r7, r4
 8002560:	210c      	movs	r1, #12
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f961 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x02);
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2106      	movs	r1, #6
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f95c 	bl	800282a <Oled_writeCommand>

	//WS0010
	Oled_writeCommand(&oled, 0x08);
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2108      	movs	r1, #8
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f957 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x17);
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2117      	movs	r1, #23
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f952 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x01);
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2101      	movs	r1, #1
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f94d 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, 0x04 | 0x08);
 8002590:	193b      	adds	r3, r7, r4
 8002592:	210c      	movs	r1, #12
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f948 	bl	800282a <Oled_writeCommand>
	Oled_writeCommand(&oled, OLED_CLEAR_DISPLAY);
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f943 	bl	800282a <Oled_writeCommand>

	return oled;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	193a      	adds	r2, r7, r4
 80025a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025aa:	c313      	stmia	r3!, {r0, r1, r4}
 80025ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ae:	c313      	stmia	r3!, {r0, r1, r4}
}
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00b      	add	sp, #44	@ 0x2c
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <refresh_displayed_info>:
void refresh_displayed_info( Oled_HandleTypeDef *oled, double set_temp_inside, double current_temp_inside){
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b08d      	sub	sp, #52	@ 0x34
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	603a      	str	r2, [r7, #0]
 80025c2:	607b      	str	r3, [r7, #4]
	char set_temp_inside_string [8] = {0};
 80025c4:	2420      	movs	r4, #32
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	0018      	movs	r0, r3
 80025ca:	2308      	movs	r3, #8
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f00d fefc 	bl	80103cc <memset>
	char current_temp_inside_string [8] = {0};
 80025d4:	2518      	movs	r5, #24
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	0018      	movs	r0, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f00d fef4 	bl	80103cc <memset>
	char celsius_unit[] = {223, 'C', '\0'}; // 223 stands for °
 80025e4:	2614      	movs	r6, #20
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <refresh_displayed_info+0xe4>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	8019      	strh	r1, [r3, #0]
 80025ee:	7892      	ldrb	r2, [r2, #2]
 80025f0:	709a      	strb	r2, [r3, #2]

	Oled_cursor(oled, 0, 0);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f869 	bl	80026d0 <Oled_cursor>
	memset(set_temp_inside_string, (int)' ', 8);
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	2208      	movs	r2, #8
 8002602:	2120      	movs	r1, #32
 8002604:	0018      	movs	r0, r3
 8002606:	f00d fee1 	bl	80103cc <memset>
	snprintf(set_temp_inside_string,8,"%.1lf",set_temp_inside);
 800260a:	4925      	ldr	r1, [pc, #148]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800260c:	1938      	adds	r0, r7, r4
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	000a      	movs	r2, r1
 8002618:	2108      	movs	r1, #8
 800261a:	f00d fe55 	bl	80102c8 <sniprintf>
	Oled_string(oled, set_temp_inside_string);
 800261e:	193a      	adds	r2, r7, r4
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f000 f886 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 0,6);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2206      	movs	r2, #6
 800262e:	2100      	movs	r1, #0
 8002630:	0018      	movs	r0, r3
 8002632:	f000 f84d 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002636:	19ba      	adds	r2, r7, r6
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f87a 	bl	8002736 <Oled_string>

	Oled_cursor(oled, 1, 0);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	2101      	movs	r1, #1
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f841 	bl	80026d0 <Oled_cursor>
	memset(current_temp_inside_string, (int)' ', 8);
 800264e:	197b      	adds	r3, r7, r5
 8002650:	2208      	movs	r2, #8
 8002652:	2120      	movs	r1, #32
 8002654:	0018      	movs	r0, r3
 8002656:	f00d feb9 	bl	80103cc <memset>
	snprintf(current_temp_inside_string,8,"%.1lf",current_temp_inside);
 800265a:	4911      	ldr	r1, [pc, #68]	@ (80026a0 <refresh_displayed_info+0xe8>)
 800265c:	1978      	adds	r0, r7, r5
 800265e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002662:	9200      	str	r2, [sp, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	000a      	movs	r2, r1
 8002668:	2108      	movs	r1, #8
 800266a:	f00d fe2d 	bl	80102c8 <sniprintf>
	Oled_string(oled, current_temp_inside_string);
 800266e:	197a      	adds	r2, r7, r5
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f85e 	bl	8002736 <Oled_string>
	Oled_cursor(oled, 1,6);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2206      	movs	r2, #6
 800267e:	2101      	movs	r1, #1
 8002680:	0018      	movs	r0, r3
 8002682:	f000 f825 	bl	80026d0 <Oled_cursor>
	Oled_string(oled, celsius_unit);
 8002686:	19ba      	adds	r2, r7, r6
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f852 	bl	8002736 <Oled_string>
}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b00b      	add	sp, #44	@ 0x2c
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	08012fe0 	.word	0x08012fe0
 80026a0:	08012fd8 	.word	0x08012fd8

080026a4 <Oled_resupply_power>:

void Oled_resupply_power(Oled_HandleTypeDef *oled){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	uint8_t command = OLED_PWRDWN;
 80026ac:	210f      	movs	r1, #15
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2213      	movs	r2, #19
 80026b2:	701a      	strb	r2, [r3, #0]
	Oled_writeCommand(oled,command);
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f8b4 	bl	800282a <Oled_writeCommand>
	HAL_Delay(100);
 80026c2:	2064      	movs	r0, #100	@ 0x64
 80026c4:	f001 feb6 	bl	8004434 <HAL_Delay>
//	command = OLED_PWRUP;
//	Oled_writeCommand(oled,command);

}
 80026c8:	46c0      	nop			@ (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <Oled_cursor>:
	char buf[17];
	sprintf(buf, "%d", value);
	Oled_string(oled, buf);
}

void Oled_cursor(Oled_HandleTypeDef *oled, uint8_t row, uint8_t col) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	0008      	movs	r0, r1
 80026da:	0011      	movs	r1, r2
 80026dc:	1cfb      	adds	r3, r7, #3
 80026de:	1c02      	adds	r2, r0, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	1cbb      	adds	r3, r7, #2
 80026e4:	1c0a      	adds	r2, r1, #0
 80026e6:	701a      	strb	r2, [r3, #0]
	uint8_t ROW[] = { 0x00, 0x40, 0x10, 0x50 };
 80026e8:	210c      	movs	r1, #12
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <Oled_cursor+0x48>)
 80026ee:	601a      	str	r2, [r3, #0]
	Oled_writeCommand(oled, 0x80 + ROW[row] + col);
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	187a      	adds	r2, r7, r1
 80026f6:	5cd2      	ldrb	r2, [r2, r3]
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3b80      	subs	r3, #128	@ 0x80
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f88e 	bl	800282a <Oled_writeCommand>
}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b004      	add	sp, #16
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	50104000 	.word	0x50104000

0800271c <Oled_clear>:

void Oled_blink(Oled_HandleTypeDef *oled) {
	Oled_writeCommand(oled, 0x08 | 0x04 | 0x02 | 0x01);
}

void Oled_clear(Oled_HandleTypeDef *oled) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	Oled_writeCommand(oled, OLED_CLEAR_DISPLAY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2101      	movs	r1, #1
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f87e 	bl	800282a <Oled_writeCommand>
}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <Oled_string>:
	if (0 <= y && y <= 1) {
		Oled_writeCommand(oled, 0x80 | y);
	}
}

void Oled_string(Oled_HandleTypeDef *oled, char * string) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	char temp;
	while ((temp = *string++)) {
 8002740:	e007      	b.n	8002752 <Oled_string+0x1c>
		Oled_writeData(oled, temp);
 8002742:	230f      	movs	r3, #15
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f892 	bl	8002876 <Oled_writeData>
	while ((temp = *string++)) {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	603a      	str	r2, [r7, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	187a      	adds	r2, r7, r1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	7013      	strb	r3, [r2, #0]
 8002760:	187b      	adds	r3, r7, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ec      	bne.n	8002742 <Oled_string+0xc>
	}
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}

08002772 <Oled_write>:

void Oled_write(Oled_HandleTypeDef *oled, uint8_t data) {
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	000a      	movs	r2, r1
 800277c:	1cfb      	adds	r3, r7, #3
 800277e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(oled->data_port[0], oled->data_pin[0], data & (1 << 0));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	8819      	ldrh	r1, [r3, #0]
 800278c:	1cfb      	adds	r3, r7, #3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	f003 f983 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[1], oled->data_pin[1], data & (1 << 1));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	3304      	adds	r3, #4
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	3302      	adds	r3, #2
 80027aa:	8819      	ldrh	r1, [r3, #0]
 80027ac:	1cfb      	adds	r3, r7, #3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2202      	movs	r2, #2
 80027b2:	4013      	ands	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	001a      	movs	r2, r3
 80027b8:	f003 f973 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[2], oled->data_pin[2], data & (1 << 2));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	3308      	adds	r3, #8
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	3304      	adds	r3, #4
 80027ca:	8819      	ldrh	r1, [r3, #0]
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2204      	movs	r2, #4
 80027d2:	4013      	ands	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	f003 f963 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->data_port[3], oled->data_pin[3], data & (1 << 3));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	330c      	adds	r3, #12
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	3306      	adds	r3, #6
 80027ea:	8819      	ldrh	r1, [r3, #0]
 80027ec:	1cfb      	adds	r3, r7, #3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	f003 f953 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	899b      	ldrh	r3, [r3, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	0019      	movs	r1, r3
 8002808:	f003 f94b 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800280c:	2001      	movs	r0, #1
 800280e:	f001 fe11 	bl	8004434 <HAL_Delay>
	HAL_GPIO_WritePin(oled->enable_port, oled->enable_pin, 0);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6898      	ldr	r0, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	899b      	ldrh	r3, [r3, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	0019      	movs	r1, r3
 800281e:	f003 f940 	bl	8005aa2 <HAL_GPIO_WritePin>
}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	b002      	add	sp, #8
 8002828:	bd80      	pop	{r7, pc}

0800282a <Oled_writeCommand>:

void Oled_writeCommand(Oled_HandleTypeDef *oled, uint8_t command) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	000a      	movs	r2, r1
 8002834:	1cfb      	adds	r3, r7, #3
 8002836:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	889b      	ldrh	r3, [r3, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	0019      	movs	r1, r3
 8002844:	f003 f92d 	bl	8005aa2 <HAL_GPIO_WritePin>
	Oled_write(oled, (command >> 4));
 8002848:	1cfb      	adds	r3, r7, #3
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ff8c 	bl	8002772 <Oled_write>
	Oled_write(oled, command & 0x0F);
 800285a:	1cfb      	adds	r3, r7, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	220f      	movs	r2, #15
 8002860:	4013      	ands	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ff82 	bl	8002772 <Oled_write>

}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <Oled_writeData>:

void Oled_writeData(Oled_HandleTypeDef *oled, uint8_t data) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	000a      	movs	r2, r1
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(oled->rs_port, oled->rs_pin, 1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	0019      	movs	r1, r3
 8002890:	f003 f907 	bl	8005aa2 <HAL_GPIO_WritePin>
	Oled_write(oled, data >> 4);
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff66 	bl	8002772 <Oled_write>
	Oled_write(oled, data & 0x0F);
 80028a6:	1cfb      	adds	r3, r7, #3
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	220f      	movs	r2, #15
 80028ac:	4013      	ands	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7ff ff5c 	bl	8002772 <Oled_write>

}
 80028ba:	46c0      	nop			@ (mov r8, r8)
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <LT8722_Init>:
#include <stdint.h>
#include "main.h"
#include "lt8722.h"

int LT8722_Init(SPI_HandleTypeDef *hspi){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	// Initialization is done based on LT8722 datasheet provided steps

	// --- Step #1 Enable_REQ bit to 1 ---

	// Take the default SPIS_REG value and add 1 to [0] place
	uint8_t data_to_send[4] = {0x00, 0x0A, 0xA2, 0x15};
 80028cc:	2110      	movs	r1, #16
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <LT8722_Init+0x128>)
 80028d2:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_Command_Reg_Addr;
 80028d4:	200f      	movs	r0, #15
 80028d6:	183b      	adds	r3, r7, r0
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	1839      	adds	r1, r7, r0
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	2304      	movs	r3, #4
 80028e4:	f000 fa22 	bl	8002d2c <write_lt8722_reg>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <LT8722_Init+0x2c>
		return 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e078      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #2 Set SPIS_DAC register to 0xFF00 0000
	data_to_send[0] = 0xFF;
 80028f0:	2110      	movs	r1, #16
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x00;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0x00;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x00;
 8002904:	187b      	adds	r3, r7, r1
 8002906:	2200      	movs	r2, #0
 8002908:	70da      	strb	r2, [r3, #3]
	reg = SPIS_DAC_Reg_Addr;
 800290a:	200f      	movs	r0, #15
 800290c:	183b      	adds	r3, r7, r0
 800290e:	2208      	movs	r2, #8
 8002910:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002912:	187a      	adds	r2, r7, r1
 8002914:	1839      	adds	r1, r7, r0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	2304      	movs	r3, #4
 800291a:	f000 fa07 	bl	8002d2c <write_lt8722_reg>
 800291e:	1e03      	subs	r3, r0, #0
 8002920:	d001      	beq.n	8002926 <LT8722_Init+0x62>
		return 1;
 8002922:	2301      	movs	r3, #1
 8002924:	e05d      	b.n	80029e2 <LT8722_Init+0x11e>

	// --- Step #3 Clear SPI_Status register

	data_to_send[0] = 0x00;
 8002926:	2110      	movs	r1, #16
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
	reg = SPIS_Status_Reg_Addr;
 800292e:	200f      	movs	r0, #15
 8002930:	183b      	adds	r3, r7, r0
 8002932:	2202      	movs	r2, #2
 8002934:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002936:	187a      	adds	r2, r7, r1
 8002938:	1839      	adds	r1, r7, r0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	2304      	movs	r3, #4
 800293e:	f000 f9f5 	bl	8002d2c <write_lt8722_reg>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <LT8722_Init+0x86>
		return 1;
 8002946:	2301      	movs	r3, #1
 8002948:	e04b      	b.n	80029e2 <LT8722_Init+0x11e>

	HAL_Delay(1); //Waiting for prebiased output condition to dissipate
 800294a:	2001      	movs	r0, #1
 800294c:	f001 fd72 	bl	8004434 <HAL_Delay>

	// --- Step #4 Slowly turn down SPIS_DAC code to 0x0000 0000
	// This should be done not quicker than in 5 ms.

	reg = SPIS_DAC_Reg_Addr;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2208      	movs	r2, #8
 8002956:	701a      	strb	r2, [r3, #0]

	for(int i=1; i <= 17;i++){
 8002958:	2301      	movs	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e01b      	b.n	8002996 <LT8722_Init+0xd2>
		data_to_send[0] = 255 - 15*i;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	1c1a      	adds	r2, r3, #0
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	2110      	movs	r1, #16
 8002970:	187b      	adds	r3, r7, r1
 8002972:	701a      	strb	r2, [r3, #0]
		if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 8002974:	187a      	adds	r2, r7, r1
 8002976:	230f      	movs	r3, #15
 8002978:	18f9      	adds	r1, r7, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	2304      	movs	r3, #4
 800297e:	f000 f9d5 	bl	8002d2c <write_lt8722_reg>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <LT8722_Init+0xc6>
			return 1;
 8002986:	2301      	movs	r3, #1
 8002988:	e02b      	b.n	80029e2 <LT8722_Init+0x11e>
		HAL_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f001 fd52 	bl	8004434 <HAL_Delay>
	for(int i=1; i <= 17;i++){
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b11      	cmp	r3, #17
 800299a:	dde0      	ble.n	800295e <LT8722_Init+0x9a>
	}

	// --- Step #5 Enable PWM switching by raising the SWEN pin and writing SWEN_REQ bit 1

	HAL_GPIO_WritePin(LT8722_SWEN_GPIO_Port,LT8722_SWEN_Pin, SET);
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4813      	ldr	r0, [pc, #76]	@ (80029f0 <LT8722_Init+0x12c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	0019      	movs	r1, r3
 80029a6:	f003 f87c 	bl	8005aa2 <HAL_GPIO_WritePin>

	data_to_send[0] = 0x00;
 80029aa:	2110      	movs	r1, #16
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
	data_to_send[1] = 0x0A;
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	220a      	movs	r2, #10
 80029b6:	705a      	strb	r2, [r3, #1]
	data_to_send[2] = 0xA2;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	22a2      	movs	r2, #162	@ 0xa2
 80029bc:	709a      	strb	r2, [r3, #2]
	data_to_send[3] = 0x17;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2217      	movs	r2, #23
 80029c2:	70da      	strb	r2, [r3, #3]
	reg = SPIS_Command_Reg_Addr;
 80029c4:	200f      	movs	r0, #15
 80029c6:	183b      	adds	r3, r7, r0
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]

	if(write_lt8722_reg(hspi, &reg, data_to_send, 4) != 0)
 80029cc:	187a      	adds	r2, r7, r1
 80029ce:	1839      	adds	r1, r7, r0
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	2304      	movs	r3, #4
 80029d4:	f000 f9aa 	bl	8002d2c <write_lt8722_reg>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <LT8722_Init+0x11c>
		return 1;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LT8722_Init+0x11e>

	return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b006      	add	sp, #24
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	15a20a00 	.word	0x15a20a00
 80029f0:	50000400 	.word	0x50000400

080029f4 <is_load_connected>:

int is_load_connected(SPI_HandleTypeDef *hspi, ADC_HandleTypeDef *hadc){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	// First we put some voltage on the output
	if(set_vout(hspi, 6.0) != 0)
 80029fe:	2200      	movs	r2, #0
 8002a00:	4b4f      	ldr	r3, [pc, #316]	@ (8002b40 <is_load_connected+0x14c>)
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	0008      	movs	r0, r1
 8002a06:	f000 f8a9 	bl	8002b5c <set_vout>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d001      	beq.n	8002a12 <is_load_connected+0x1e>
		return 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e091      	b.n	8002b36 <is_load_connected+0x142>

	// Change AMUX so that AOUT gives out V1P65
	uint8_t reg = SPIS_AMUX_Reg_Addr;
 8002a12:	210f      	movs	r1, #15
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	220e      	movs	r2, #14
 8002a18:	701a      	strb	r2, [r3, #0]
	uint8_t data_to_send = SPIS_AMUX_Reg_To_Read_V1P65_Val;
 8002a1a:	200e      	movs	r0, #14
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	2247      	movs	r2, #71	@ 0x47
 8002a20:	701a      	strb	r2, [r3, #0]
	if(write_lt8722_reg(hspi, &reg, &data_to_send, 1)!=0)
 8002a22:	183a      	adds	r2, r7, r0
 8002a24:	1879      	adds	r1, r7, r1
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 f97f 	bl	8002d2c <write_lt8722_reg>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d001      	beq.n	8002a36 <is_load_connected+0x42>
		return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e07f      	b.n	8002b36 <is_load_connected+0x142>

	// Read the V1P65
	HAL_ADC_Start(hadc);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 f853 	bl	8004ae4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK){}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	2301      	movs	r3, #1
 8002a42:	425a      	negs	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f002 f8d5 	bl	8004bf8 <HAL_ADC_PollForConversion>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d1f6      	bne.n	8002a40 <is_load_connected+0x4c>
	double V1P65 = HAL_ADC_GetValue(hadc) * 3.3 / 4096;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f002 f963 	bl	8004d20 <HAL_ADC_GetValue>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7ff fd09 	bl	8002474 <__aeabi_ui2d>
 8002a62:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <is_load_connected+0x150>)
 8002a64:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <is_load_connected+0x154>)
 8002a66:	f7fe fd89 	bl	800157c <__aeabi_dmul>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	000b      	movs	r3, r1
 8002a6e:	0010      	movs	r0, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	2200      	movs	r2, #0
 8002a74:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <is_load_connected+0x158>)
 8002a76:	f7fe f947 	bl	8000d08 <__aeabi_ddiv>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	623a      	str	r2, [r7, #32]
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_ADC_Stop(hadc);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f002 f87b 	bl	8004b80 <HAL_ADC_Stop>

	// Change AMUX so that AOUT gives out VIout
	data_to_send = SPIS_AMUX_Reg_To_Read_Iout_Val;
 8002a8a:	210e      	movs	r1, #14
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2244      	movs	r2, #68	@ 0x44
 8002a90:	701a      	strb	r2, [r3, #0]
	if(write_lt8722_reg(hspi, &reg, &data_to_send, 1)!=0)
 8002a92:	187a      	adds	r2, r7, r1
 8002a94:	230f      	movs	r3, #15
 8002a96:	18f9      	adds	r1, r7, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f000 f946 	bl	8002d2c <write_lt8722_reg>
 8002aa0:	1e03      	subs	r3, r0, #0
 8002aa2:	d001      	beq.n	8002aa8 <is_load_connected+0xb4>
		return 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e046      	b.n	8002b36 <is_load_connected+0x142>

	// Read the VIout
	HAL_ADC_Start(hadc);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f002 f81a 	bl	8004ae4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) != HAL_OK){}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	425a      	negs	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	0011      	movs	r1, r2
 8002aba:	0018      	movs	r0, r3
 8002abc:	f002 f89c 	bl	8004bf8 <HAL_ADC_PollForConversion>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d1f6      	bne.n	8002ab2 <is_load_connected+0xbe>
	double VIOut = HAL_ADC_GetValue(hadc) * 3.3 / 4096;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f002 f92a 	bl	8004d20 <HAL_ADC_GetValue>
 8002acc:	0003      	movs	r3, r0
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fcd0 	bl	8002474 <__aeabi_ui2d>
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b44 <is_load_connected+0x150>)
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <is_load_connected+0x154>)
 8002ad8:	f7fe fd50 	bl	800157c <__aeabi_dmul>
 8002adc:	0002      	movs	r2, r0
 8002ade:	000b      	movs	r3, r1
 8002ae0:	0010      	movs	r0, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <is_load_connected+0x158>)
 8002ae8:	f7fe f90e 	bl	8000d08 <__aeabi_ddiv>
 8002aec:	0002      	movs	r2, r0
 8002aee:	000b      	movs	r3, r1
 8002af0:	61ba      	str	r2, [r7, #24]
 8002af2:	61fb      	str	r3, [r7, #28]
	HAL_ADC_Stop(hadc);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f002 f842 	bl	8004b80 <HAL_ADC_Stop>

	// Calculate the current

	double Iout = (V1P65 - VIOut) * 8;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	6a38      	ldr	r0, [r7, #32]
 8002b02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b04:	f7ff f820 	bl	8001b48 <__aeabi_dsub>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	000b      	movs	r3, r1
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <is_load_connected+0x15c>)
 8002b14:	f7fe fd32 	bl	800157c <__aeabi_dmul>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	000b      	movs	r3, r1
 8002b1c:	613a      	str	r2, [r7, #16]
 8002b1e:	617b      	str	r3, [r7, #20]

	if (Iout >= 0.2){
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <is_load_connected+0x160>)
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <is_load_connected+0x164>)
 8002b24:	6938      	ldr	r0, [r7, #16]
 8002b26:	6979      	ldr	r1, [r7, #20]
 8002b28:	f7fd fcb0 	bl	800048c <__aeabi_dcmpge>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <is_load_connected+0x140>
		return 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <is_load_connected+0x142>
	}
	return 0;
 8002b34:	2300      	movs	r3, #0

}
 8002b36:	0018      	movs	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b00a      	add	sp, #40	@ 0x28
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	40180000 	.word	0x40180000
 8002b44:	66666666 	.word	0x66666666
 8002b48:	400a6666 	.word	0x400a6666
 8002b4c:	40b00000 	.word	0x40b00000
 8002b50:	40200000 	.word	0x40200000
 8002b54:	9999999a 	.word	0x9999999a
 8002b58:	3fc99999 	.word	0x3fc99999

08002b5c <set_vout>:
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);

	return 0;
}

int set_vout(SPI_HandleTypeDef *hspi, double vout){
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	603a      	str	r2, [r7, #0]
 8002b66:	607b      	str	r3, [r7, #4]
	uint8_t SPIS_DAC_Code[4] = {0};
 8002b68:	2418      	movs	r4, #24
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	uint8_t reg = SPIS_DAC_Reg_Addr;
 8002b70:	2517      	movs	r5, #23
 8002b72:	197b      	adds	r3, r7, r5
 8002b74:	2208      	movs	r2, #8
 8002b76:	701a      	strb	r2, [r3, #0]
	uint32_t code = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]

	if(vout > MAX_POS_Vout){
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <set_vout+0x1b8>)
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <set_vout+0x1bc>)
 8002b80:	6838      	ldr	r0, [r7, #0]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	f7fd fc78 	bl	8000478 <__aeabi_dcmpgt>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d014      	beq.n	8002bb6 <set_vout+0x5a>
		SPIS_DAC_Code[0] = 0xFF;
 8002b8c:	0021      	movs	r1, r4
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	22ff      	movs	r2, #255	@ 0xff
 8002b92:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	227a      	movs	r2, #122	@ 0x7a
 8002b98:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MIN_POS_SPIS_DAC_Code & 0x000000FF));
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002ba6:	187a      	adds	r2, r7, r1
 8002ba8:	1979      	adds	r1, r7, r5
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	2304      	movs	r3, #4
 8002bae:	f000 f8bd 	bl	8002d2c <write_lt8722_reg>
		return 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e0a9      	b.n	8002d0a <set_vout+0x1ae>
	}
	if(vout > 0){
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	f7fd fc5b 	bl	8000478 <__aeabi_dcmpgt>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d041      	beq.n	8002c4a <set_vout+0xee>
		code = (MIN_POS_SPIS_DAC_Code & 0xFFFFFF) + ((MAX_POS_Vout-vout)/MAX_POS_Vout) * (0xFFFFFF - (MIN_POS_SPIS_DAC_Code & 0xFFFFFF));
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4852      	ldr	r0, [pc, #328]	@ (8002d14 <set_vout+0x1b8>)
 8002bcc:	4952      	ldr	r1, [pc, #328]	@ (8002d18 <set_vout+0x1bc>)
 8002bce:	f7fe ffbb 	bl	8001b48 <__aeabi_dsub>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	000b      	movs	r3, r1
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <set_vout+0x1b8>)
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <set_vout+0x1bc>)
 8002bde:	f7fe f893 	bl	8000d08 <__aeabi_ddiv>
 8002be2:	0002      	movs	r2, r0
 8002be4:	000b      	movs	r3, r1
 8002be6:	0010      	movs	r0, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	22e0      	movs	r2, #224	@ 0xe0
 8002bec:	0612      	lsls	r2, r2, #24
 8002bee:	4b4b      	ldr	r3, [pc, #300]	@ (8002d1c <set_vout+0x1c0>)
 8002bf0:	f7fe fcc4 	bl	800157c <__aeabi_dmul>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4b48      	ldr	r3, [pc, #288]	@ (8002d20 <set_vout+0x1c4>)
 8002c00:	f7fd fcbc 	bl	800057c <__aeabi_dadd>
 8002c04:	0002      	movs	r2, r0
 8002c06:	000b      	movs	r3, r1
 8002c08:	0010      	movs	r0, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	f7fd fc48 	bl	80004a0 <__aeabi_d2uiz>
 8002c10:	0003      	movs	r3, r0
 8002c12:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0xFF;
 8002c14:	2118      	movs	r1, #24
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	22ff      	movs	r2, #255	@ 0xff
 8002c1a:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	0c1b      	lsrs	r3, r3, #16
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002c38:	187a      	adds	r2, r7, r1
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	18f9      	adds	r1, r7, r3
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	2304      	movs	r3, #4
 8002c42:	f000 f873 	bl	8002d2c <write_lt8722_reg>
		return 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e05f      	b.n	8002d0a <set_vout+0x1ae>
	}
	if(vout < MAX_NEG_Vout){
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4b35      	ldr	r3, [pc, #212]	@ (8002d24 <set_vout+0x1c8>)
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	f7fd fbfd 	bl	8000450 <__aeabi_dcmplt>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d015      	beq.n	8002c86 <set_vout+0x12a>
		SPIS_DAC_Code[0] = 0x00;
 8002c5a:	2118      	movs	r1, #24
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x00FF0000)>>16);
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	228b      	movs	r2, #139	@ 0x8b
 8002c66:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x0000FF00)>>8);
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((MAX_NEG_SPIS_DAC_Code & 0x000000FF));
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	2200      	movs	r2, #0
 8002c72:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002c74:	187a      	adds	r2, r7, r1
 8002c76:	2317      	movs	r3, #23
 8002c78:	18f9      	adds	r1, r7, r3
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	f000 f855 	bl	8002d2c <write_lt8722_reg>
		return 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e041      	b.n	8002d0a <set_vout+0x1ae>
	}
	if(vout < 0){
 8002c86:	2200      	movs	r2, #0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6838      	ldr	r0, [r7, #0]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	f7fd fbdf 	bl	8000450 <__aeabi_dcmplt>
 8002c92:	1e03      	subs	r3, r0, #0
 8002c94:	d030      	beq.n	8002cf8 <set_vout+0x19c>
		code = (vout/MAX_NEG_Vout) * (MAX_NEG_SPIS_DAC_Code & 0x00FFFFFF);
 8002c96:	2200      	movs	r2, #0
 8002c98:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <set_vout+0x1c8>)
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	f7fe f833 	bl	8000d08 <__aeabi_ddiv>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	2200      	movs	r2, #0
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <set_vout+0x1cc>)
 8002cae:	f7fe fc65 	bl	800157c <__aeabi_dmul>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	000b      	movs	r3, r1
 8002cb6:	0010      	movs	r0, r2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	f7fd fbf1 	bl	80004a0 <__aeabi_d2uiz>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61fb      	str	r3, [r7, #28]
		SPIS_DAC_Code[0] = 0x00;
 8002cc2:	2118      	movs	r1, #24
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
		SPIS_DAC_Code[1] = (uint8_t) ((code & 0x00FF0000)>>16);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	705a      	strb	r2, [r3, #1]
		SPIS_DAC_Code[2] = (uint8_t) ((code & 0x0000FF00)>>8);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	709a      	strb	r2, [r3, #2]
		SPIS_DAC_Code[3] = (uint8_t) ((code & 0x000000FF));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	70da      	strb	r2, [r3, #3]
		write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002ce6:	187a      	adds	r2, r7, r1
 8002ce8:	2317      	movs	r3, #23
 8002cea:	18f9      	adds	r1, r7, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	2304      	movs	r3, #4
 8002cf0:	f000 f81c 	bl	8002d2c <write_lt8722_reg>
		return 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e008      	b.n	8002d0a <set_vout+0x1ae>
	}
	write_lt8722_reg(hspi, &reg, SPIS_DAC_Code, 4);
 8002cf8:	2318      	movs	r3, #24
 8002cfa:	18fa      	adds	r2, r7, r3
 8002cfc:	2317      	movs	r3, #23
 8002cfe:	18f9      	adds	r1, r7, r3
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	2304      	movs	r3, #4
 8002d04:	f000 f812 	bl	8002d2c <write_lt8722_reg>
	return 0;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b008      	add	sp, #32
 8002d10:	bdb0      	pop	{r4, r5, r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	147ae148 	.word	0x147ae148
 8002d18:	402447ae 	.word	0x402447ae
 8002d1c:	4160bfff 	.word	0x4160bfff
 8002d20:	415e8000 	.word	0x415e8000
 8002d24:	c0250000 	.word	0xc0250000
 8002d28:	41616000 	.word	0x41616000

08002d2c <write_lt8722_reg>:


int write_lt8722_reg(SPI_HandleTypeDef *hspi, uint8_t *reg_addr, uint8_t *data, uint8_t size){
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b08c      	sub	sp, #48	@ 0x30
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	001a      	movs	r2, r3
 8002d3a:	1cfb      	adds	r3, r7, #3
 8002d3c:	701a      	strb	r2, [r3, #0]

	if (size > 4)
 8002d3e:	1cfb      	adds	r3, r7, #3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d901      	bls.n	8002d4a <write_lt8722_reg+0x1e>
		return 1;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e05c      	b.n	8002e04 <write_lt8722_reg+0xd8>

	uint8_t tx_data[8] = {Data_Write_Command,*reg_addr,0x00,0x00,0x00,0x00,0x00,0x00};
 8002d4a:	211c      	movs	r1, #28
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	22f2      	movs	r2, #242	@ 0xf2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	705a      	strb	r2, [r3, #1]
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	709a      	strb	r2, [r3, #2]
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2200      	movs	r2, #0
 8002d64:	70da      	strb	r2, [r3, #3]
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2200      	movs	r2, #0
 8002d6a:	711a      	strb	r2, [r3, #4]
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2200      	movs	r2, #0
 8002d70:	715a      	strb	r2, [r3, #5]
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2200      	movs	r2, #0
 8002d76:	719a      	strb	r2, [r3, #6]
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	71da      	strb	r2, [r3, #7]

	for (int i=0;i<size;i++){
 8002d7e:	2300      	movs	r3, #0
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d82:	e00b      	b.n	8002d9c <write_lt8722_reg+0x70>
		tx_data[i+2] = data[i];
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	18d2      	adds	r2, r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	7811      	ldrb	r1, [r2, #0]
 8002d90:	221c      	movs	r2, #28
 8002d92:	18ba      	adds	r2, r7, r2
 8002d94:	54d1      	strb	r1, [r2, r3]
	for (int i=0;i<size;i++){
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	3301      	adds	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	1cfb      	adds	r3, r7, #3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	dbee      	blt.n	8002d84 <write_lt8722_reg+0x58>
	}
	uint8_t rx_data[8] = {0};
 8002da6:	2414      	movs	r4, #20
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	0018      	movs	r0, r3
 8002dac:	2308      	movs	r3, #8
 8002dae:	001a      	movs	r2, r3
 8002db0:	2100      	movs	r1, #0
 8002db2:	f00d fb0b 	bl	80103cc <memset>

	tx_data[6] = get_CRC8(tx_data, 6);
 8002db6:	251c      	movs	r5, #28
 8002db8:	197b      	adds	r3, r7, r5
 8002dba:	2106      	movs	r1, #6
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 f825 	bl	8002e0c <get_CRC8>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	197b      	adds	r3, r7, r5
 8002dc8:	719a      	strb	r2, [r3, #6]

	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, RESET);
 8002dca:	23a0      	movs	r3, #160	@ 0xa0
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2140      	movs	r1, #64	@ 0x40
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f002 fe65 	bl	8005aa2 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx_data, rx_data, 8, 100);
 8002dd8:	193a      	adds	r2, r7, r4
 8002dda:	1979      	adds	r1, r7, r5
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	2364      	movs	r3, #100	@ 0x64
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2308      	movs	r3, #8
 8002de4:	f006 f9ac 	bl	8009140 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
 8002de8:	23a0      	movs	r3, #160	@ 0xa0
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	2201      	movs	r2, #1
 8002dee:	2140      	movs	r1, #64	@ 0x40
 8002df0:	0018      	movs	r0, r3
 8002df2:	f002 fe56 	bl	8005aa2 <HAL_GPIO_WritePin>
	if(rx_data[7] != SLAVE_ACK)
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	79db      	ldrb	r3, [r3, #7]
 8002dfa:	2ba5      	cmp	r3, #165	@ 0xa5
 8002dfc:	d001      	beq.n	8002e02 <write_lt8722_reg+0xd6>
		return 1;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <write_lt8722_reg+0xd8>

	return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b00a      	add	sp, #40	@ 0x28
 8002e0a:	bdb0      	pop	{r4, r5, r7, pc}

08002e0c <get_CRC8>:
		return 1;
	HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, SET);
	return 0;
}

uint8_t get_CRC8(const uint8_t *data, uint16_t length) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	000a      	movs	r2, r1
 8002e16:	1cbb      	adds	r3, r7, #2
 8002e18:	801a      	strh	r2, [r3, #0]
    uint8_t crc = 0x00;               // Initial value
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
    uint8_t polynomial = 0x07;        // CRC-8 polynomial
 8002e22:	230a      	movs	r3, #10
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	2207      	movs	r2, #7
 8002e28:	701a      	strb	r2, [r3, #0]

    for (uint16_t i = 0; i < length; i++) {
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e03b      	b.n	8002eac <get_CRC8+0xa0>
        crc ^= data[i];               // XOR-in byte into CRC
 8002e34:	230c      	movs	r3, #12
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	7819      	ldrb	r1, [r3, #0]
 8002e40:	220f      	movs	r2, #15
 8002e42:	18bb      	adds	r3, r7, r2
 8002e44:	18ba      	adds	r2, r7, r2
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	404a      	eors	r2, r1
 8002e4a:	701a      	strb	r2, [r3, #0]

        for (uint8_t j = 0; j < 8; j++) {
 8002e4c:	230b      	movs	r3, #11
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e01f      	b.n	8002e96 <get_CRC8+0x8a>
            if (crc & 0x80) {
 8002e56:	210f      	movs	r1, #15
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	da0d      	bge.n	8002e7e <get_CRC8+0x72>
                crc = (crc << 1) ^ polynomial;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b25b      	sxtb	r3, r3
 8002e68:	18db      	adds	r3, r3, r3
 8002e6a:	b25a      	sxtb	r2, r3
 8002e6c:	230a      	movs	r3, #10
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	4053      	eors	r3, r2
 8002e76:	b25a      	sxtb	r2, r3
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e005      	b.n	8002e8a <get_CRC8+0x7e>
            } else {
                crc <<= 1;
 8002e7e:	230f      	movs	r3, #15
 8002e80:	18fa      	adds	r2, r7, r3
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	7013      	strb	r3, [r2, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8002e8a:	210b      	movs	r1, #11
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	3201      	adds	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	230b      	movs	r3, #11
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d9da      	bls.n	8002e56 <get_CRC8+0x4a>
    for (uint16_t i = 0; i < length; i++) {
 8002ea0:	210c      	movs	r1, #12
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	3201      	adds	r2, #1
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	230c      	movs	r3, #12
 8002eae:	18fa      	adds	r2, r7, r3
 8002eb0:	1cbb      	adds	r3, r7, #2
 8002eb2:	8812      	ldrh	r2, [r2, #0]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3bc      	bcc.n	8002e34 <get_CRC8+0x28>
            }
        }
    }

    return crc;
 8002eba:	230f      	movs	r3, #15
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	b097      	sub	sp, #92	@ 0x5c
 8002ecc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ece:	f001 fa2b 	bl	8004328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ed2:	f000 f941 	bl	8003158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ed6:	f000 fb11 	bl	80034fc <MX_GPIO_Init>
  MX_USB_Device_Init();
 8002eda:	f00b f8db 	bl	800e094 <MX_USB_Device_Init>
  MX_I2C2_Init();
 8002ede:	f000 f9ff 	bl	80032e0 <MX_I2C2_Init>
  MX_ADC1_Init();
 8002ee2:	f000 f991 	bl	8003208 <MX_ADC1_Init>
  MX_TIM17_Init();
 8002ee6:	f000 fadf 	bl	80034a8 <MX_TIM17_Init>
  MX_SPI2_Init();
 8002eea:	f000 fa39 	bl	8003360 <MX_SPI2_Init>
  MX_TIM16_Init();
 8002eee:	f000 fab1 	bl	8003454 <MX_TIM16_Init>
  MX_TIM7_Init();
 8002ef2:	f000 fa73 	bl	80033dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50); // Stabilize voltage for OLED
 8002ef6:	2032      	movs	r0, #50	@ 0x32
 8002ef8:	f001 fa9c 	bl	8004434 <HAL_Delay>
  GPIO_TypeDef *data_ports[] = {OLED_D04_GPIO_Port, OLED_D05_GPIO_Port, OLED_D06_GPIO_Port, OLED_D07_GPIO_Port};
 8002efc:	2530      	movs	r5, #48	@ 0x30
 8002efe:	197b      	adds	r3, r7, r5
 8002f00:	4a85      	ldr	r2, [pc, #532]	@ (8003118 <main+0x250>)
 8002f02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f04:	c313      	stmia	r3!, {r0, r1, r4}
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	601a      	str	r2, [r3, #0]
  uint16_t data_pins[] = {OLED_D04_Pin, OLED_D05_Pin, OLED_D06_Pin, OLED_D07_Pin};
 8002f0a:	2428      	movs	r4, #40	@ 0x28
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	4a83      	ldr	r2, [pc, #524]	@ (800311c <main+0x254>)
 8002f10:	ca03      	ldmia	r2!, {r0, r1}
 8002f12:	c303      	stmia	r3!, {r0, r1}
  Oled_HandleTypeDef oled = Oled_init(OLED_RS_GPIO_Port, OLED_RS_Pin, OLED_EN_GPIO_Port, OLED_EN_Pin, data_ports, data_pins);
 8002f14:	2610      	movs	r6, #16
 8002f16:	19b8      	adds	r0, r7, r6
 8002f18:	4a81      	ldr	r2, [pc, #516]	@ (8003120 <main+0x258>)
 8002f1a:	4981      	ldr	r1, [pc, #516]	@ (8003120 <main+0x258>)
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	197b      	adds	r3, r7, r5
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	2310      	movs	r3, #16
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	0013      	movs	r3, r2
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f7ff fae4 	bl	80024f8 <Oled_init>
  Oled_resupply_power(&oled);
 8002f30:	19bb      	adds	r3, r7, r6
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7ff fbb6 	bl	80026a4 <Oled_resupply_power>


  double current_temp_inside = 0;
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60ba      	str	r2, [r7, #8]
 8002f3e:	60fb      	str	r3, [r7, #12]
  double current_temp_outside = 0;
 8002f40:	2200      	movs	r2, #0
 8002f42:	2300      	movs	r3, #0
 8002f44:	603a      	str	r2, [r7, #0]
 8002f46:	607b      	str	r3, [r7, #4]
  // Check if Thermometers are connected
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002f48:	e01d      	b.n	8002f86 <main+0xbe>
	  Oled_cursor(&oled, 0, 0);
 8002f4a:	2410      	movs	r4, #16
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff fbbc 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 8002f58:	4a72      	ldr	r2, [pc, #456]	@ (8003124 <main+0x25c>)
 8002f5a:	193b      	adds	r3, r7, r4
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fbe9 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2200      	movs	r2, #0
 8002f68:	2101      	movs	r1, #1
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fbb0 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Thermo");
 8002f70:	4a6d      	ldr	r2, [pc, #436]	@ (8003128 <main+0x260>)
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	0011      	movs	r1, r2
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fbdd 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002f7c:	23fa      	movs	r3, #250	@ 0xfa
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	0018      	movs	r0, r3
 8002f82:	f001 fa57 	bl	8004434 <HAL_Delay>
  while(read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside) != 0 || read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0 ){
 8002f86:	003a      	movs	r2, r7
 8002f88:	4b68      	ldr	r3, [pc, #416]	@ (800312c <main+0x264>)
 8002f8a:	2190      	movs	r1, #144	@ 0x90
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f001 f89d 	bl	80040cc <read_temp>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d1d9      	bne.n	8002f4a <main+0x82>
 8002f96:	2308      	movs	r3, #8
 8002f98:	18fa      	adds	r2, r7, r3
 8002f9a:	4b64      	ldr	r3, [pc, #400]	@ (800312c <main+0x264>)
 8002f9c:	2192      	movs	r1, #146	@ 0x92
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f001 f894 	bl	80040cc <read_temp>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d1d0      	bne.n	8002f4a <main+0x82>
  }

  Oled_clear(&oled);
 8002fa8:	2310      	movs	r3, #16
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff fbb5 	bl	800271c <Oled_clear>

  while(LT8722_Init(&hspi2)!=0){
 8002fb2:	e01d      	b.n	8002ff0 <main+0x128>
	  Oled_cursor(&oled, 0, 0);
 8002fb4:	2410      	movs	r4, #16
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2100      	movs	r1, #0
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fb87 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Failed");
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003130 <main+0x268>)
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fbb4 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fb7b 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "init");
 8002fda:	4a56      	ldr	r2, [pc, #344]	@ (8003134 <main+0x26c>)
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	0011      	movs	r1, r2
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff fba8 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8002fe6:	23fa      	movs	r3, #250	@ 0xfa
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	0018      	movs	r0, r3
 8002fec:	f001 fa22 	bl	8004434 <HAL_Delay>
  while(LT8722_Init(&hspi2)!=0){
 8002ff0:	4b51      	ldr	r3, [pc, #324]	@ (8003138 <main+0x270>)
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fc66 	bl	80028c4 <LT8722_Init>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d1db      	bne.n	8002fb4 <main+0xec>
  }

  while(is_load_connected(&hspi2, &hadc1)!=1){
 8002ffc:	e01d      	b.n	800303a <main+0x172>
	  Oled_cursor(&oled, 0, 0);
 8002ffe:	2410      	movs	r4, #16
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	0018      	movs	r0, r3
 8003008:	f7ff fb62 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Missing");
 800300c:	4a45      	ldr	r2, [pc, #276]	@ (8003124 <main+0x25c>)
 800300e:	193b      	adds	r3, r7, r4
 8003010:	0011      	movs	r1, r2
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff fb8f 	bl	8002736 <Oled_string>
	  Oled_cursor(&oled, 1, 0);
 8003018:	193b      	adds	r3, r7, r4
 800301a:	2200      	movs	r2, #0
 800301c:	2101      	movs	r1, #1
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff fb56 	bl	80026d0 <Oled_cursor>
	  Oled_string(&oled, "Peltier");
 8003024:	4a45      	ldr	r2, [pc, #276]	@ (800313c <main+0x274>)
 8003026:	193b      	adds	r3, r7, r4
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f7ff fb83 	bl	8002736 <Oled_string>
	  HAL_Delay(500);
 8003030:	23fa      	movs	r3, #250	@ 0xfa
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	0018      	movs	r0, r3
 8003036:	f001 f9fd 	bl	8004434 <HAL_Delay>
  while(is_load_connected(&hspi2, &hadc1)!=1){
 800303a:	4a41      	ldr	r2, [pc, #260]	@ (8003140 <main+0x278>)
 800303c:	4b3e      	ldr	r3, [pc, #248]	@ (8003138 <main+0x270>)
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff fcd7 	bl	80029f4 <is_load_connected>
 8003046:	0003      	movs	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d1d8      	bne.n	8002ffe <main+0x136>
  }

  while(read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside) != 0){}
 800304c:	46c0      	nop			@ (mov r8, r8)
 800304e:	2308      	movs	r3, #8
 8003050:	18fa      	adds	r2, r7, r3
 8003052:	4b36      	ldr	r3, [pc, #216]	@ (800312c <main+0x264>)
 8003054:	2192      	movs	r1, #146	@ 0x92
 8003056:	0018      	movs	r0, r3
 8003058:	f001 f838 	bl	80040cc <read_temp>
 800305c:	1e03      	subs	r3, r0, #0
 800305e:	d1f6      	bne.n	800304e <main+0x186>
  set_temp_inside = current_temp_inside;
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4937      	ldr	r1, [pc, #220]	@ (8003144 <main+0x27c>)
 8003066:	600a      	str	r2, [r1, #0]
 8003068:	604b      	str	r3, [r1, #4]
  double pid_output = 0;
 800306a:	2200      	movs	r2, #0
 800306c:	2300      	movs	r3, #0
 800306e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003070:	647b      	str	r3, [r7, #68]	@ 0x44

  HAL_TIM_Base_Start_IT(&htim17); // Starting PID timer. Period 1 second.
 8003072:	4b35      	ldr	r3, [pc, #212]	@ (8003148 <main+0x280>)
 8003074:	0018      	movs	r0, r3
 8003076:	f006 fc13 	bl	80098a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); // Starting OLED refreshing timer. Period 33 miliseconds.
 800307a:	4b34      	ldr	r3, [pc, #208]	@ (800314c <main+0x284>)
 800307c:	0018      	movs	r0, r3
 800307e:	f006 fc0f 	bl	80098a0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(time_to_rerun_PID_loop){
 8003082:	4b33      	ldr	r3, [pc, #204]	@ (8003150 <main+0x288>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d030      	beq.n	80030ec <main+0x224>
		read_temp(&hi2c2, TMP1075_2_addr, &current_temp_inside);
 800308a:	2308      	movs	r3, #8
 800308c:	18fa      	adds	r2, r7, r3
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <main+0x264>)
 8003090:	2192      	movs	r1, #146	@ 0x92
 8003092:	0018      	movs	r0, r3
 8003094:	f001 f81a 	bl	80040cc <read_temp>
		read_temp(&hi2c2, TMP1075_1_addr, &current_temp_outside);
 8003098:	003a      	movs	r2, r7
 800309a:	4b24      	ldr	r3, [pc, #144]	@ (800312c <main+0x264>)
 800309c:	2190      	movs	r1, #144	@ 0x90
 800309e:	0018      	movs	r0, r3
 80030a0:	f001 f814 	bl	80040cc <read_temp>
		pid_output = compute_pid_output(set_temp_inside - current_temp_inside);
 80030a4:	4b27      	ldr	r3, [pc, #156]	@ (8003144 <main+0x27c>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f7fe fd4b 	bl	8001b48 <__aeabi_dsub>
 80030b2:	0002      	movs	r2, r0
 80030b4:	000b      	movs	r3, r1
 80030b6:	0010      	movs	r0, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	f000 fc25 	bl	8003908 <compute_pid_output>
 80030be:	0002      	movs	r2, r0
 80030c0:	000b      	movs	r3, r1
 80030c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
		set_vout(&hspi2, pid_output);
 80030c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ca:	491b      	ldr	r1, [pc, #108]	@ (8003138 <main+0x270>)
 80030cc:	0008      	movs	r0, r1
 80030ce:	f7ff fd45 	bl	8002b5c <set_vout>

		send_temps_via_usb(current_temp_inside, current_temp_outside);
 80030d2:	68b8      	ldr	r0, [r7, #8]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f001 f862 	bl	80041a2 <send_temps_via_usb>
		listen_for_temp_change_sent_via_usb(&set_temp_inside);
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <main+0x27c>)
 80030e0:	0018      	movs	r0, r3
 80030e2:	f001 f881 	bl	80041e8 <listen_for_temp_change_sent_via_usb>

		time_to_rerun_PID_loop = 0;
 80030e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <main+0x288>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
	}
	if(time_to_refresh_OLED){
 80030ec:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <main+0x28c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0c6      	beq.n	8003082 <main+0x1ba>
		refresh_displayed_info(&oled, set_temp_inside, current_temp_inside);
 80030f4:	4b13      	ldr	r3, [pc, #76]	@ (8003144 <main+0x27c>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2410      	movs	r4, #16
 8003100:	193c      	adds	r4, r7, r4
 8003102:	9200      	str	r2, [sp, #0]
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	0002      	movs	r2, r0
 8003108:	000b      	movs	r3, r1
 800310a:	0020      	movs	r0, r4
 800310c:	f7ff fa54 	bl	80025b8 <refresh_displayed_info>
		time_to_refresh_OLED = 0;
 8003110:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <main+0x28c>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
	if(time_to_rerun_PID_loop){
 8003116:	e7b4      	b.n	8003082 <main+0x1ba>
 8003118:	08013018 	.word	0x08013018
 800311c:	08013028 	.word	0x08013028
 8003120:	50000400 	.word	0x50000400
 8003124:	08012ff0 	.word	0x08012ff0
 8003128:	08012ff8 	.word	0x08012ff8
 800312c:	20000348 	.word	0x20000348
 8003130:	08013000 	.word	0x08013000
 8003134:	08013008 	.word	0x08013008
 8003138:	2000039c 	.word	0x2000039c
 800313c:	08013010 	.word	0x08013010
 8003140:	200002e4 	.word	0x200002e4
 8003144:	200004f8 	.word	0x200004f8
 8003148:	20000498 	.word	0x20000498
 800314c:	20000400 	.word	0x20000400
 8003150:	200004e4 	.word	0x200004e4
 8003154:	200004e8 	.word	0x200004e8

08003158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b093      	sub	sp, #76	@ 0x4c
 800315c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800315e:	2410      	movs	r4, #16
 8003160:	193b      	adds	r3, r7, r4
 8003162:	0018      	movs	r0, r3
 8003164:	2338      	movs	r3, #56	@ 0x38
 8003166:	001a      	movs	r2, r3
 8003168:	2100      	movs	r1, #0
 800316a:	f00d f92f 	bl	80103cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800316e:	003b      	movs	r3, r7
 8003170:	0018      	movs	r0, r3
 8003172:	2310      	movs	r3, #16
 8003174:	001a      	movs	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	f00d f928 	bl	80103cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	0018      	movs	r0, r3
 8003182:	f005 f8b9 	bl	80082f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003186:	193b      	adds	r3, r7, r4
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800318c:	193b      	adds	r3, r7, r4
 800318e:	2280      	movs	r2, #128	@ 0x80
 8003190:	0252      	lsls	r2, r2, #9
 8003192:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003194:	0021      	movs	r1, r4
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2202      	movs	r2, #2
 800319a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2203      	movs	r2, #3
 80031a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	220c      	movs	r2, #12
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	0292      	lsls	r2, r2, #10
 80031b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	0492      	lsls	r2, r2, #18
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	0592      	lsls	r2, r2, #22
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	0018      	movs	r0, r3
 80031ca:	f005 f8d5 	bl	8008378 <HAL_RCC_OscConfig>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d001      	beq.n	80031d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80031d2:	f000 fb93 	bl	80038fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d6:	003b      	movs	r3, r7
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031dc:	003b      	movs	r3, r7
 80031de:	2202      	movs	r2, #2
 80031e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e2:	003b      	movs	r3, r7
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031e8:	003b      	movs	r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031ee:	003b      	movs	r3, r7
 80031f0:	2101      	movs	r1, #1
 80031f2:	0018      	movs	r0, r3
 80031f4:	f005 fbda 	bl	80089ac <HAL_RCC_ClockConfig>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d001      	beq.n	8003200 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80031fc:	f000 fb7e 	bl	80038fc <Error_Handler>
  }
}
 8003200:	46c0      	nop			@ (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b013      	add	sp, #76	@ 0x4c
 8003206:	bd90      	pop	{r4, r7, pc}

08003208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	0018      	movs	r0, r3
 8003212:	230c      	movs	r3, #12
 8003214:	001a      	movs	r2, r3
 8003216:	2100      	movs	r1, #0
 8003218:	f00d f8d8 	bl	80103cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800321e:	4a2e      	ldr	r2, [pc, #184]	@ (80032d8 <MX_ADC1_Init+0xd0>)
 8003220:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003222:	4b2c      	ldr	r3, [pc, #176]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	05d2      	lsls	r2, r2, #23
 8003228:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800322a:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003230:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003236:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800323e:	2204      	movs	r2, #4
 8003240:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003242:	4b24      	ldr	r3, [pc, #144]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003244:	2200      	movs	r2, #0
 8003246:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003248:	4b22      	ldr	r3, [pc, #136]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800324a:	2200      	movs	r2, #0
 800324c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800324e:	4b21      	ldr	r3, [pc, #132]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003250:	2200      	movs	r2, #0
 8003252:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003254:	4b1f      	ldr	r3, [pc, #124]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003256:	2201      	movs	r2, #1
 8003258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800325a:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800325c:	2220      	movs	r2, #32
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003264:	2200      	movs	r2, #0
 8003266:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800326e:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003270:	222c      	movs	r2, #44	@ 0x2c
 8003272:	2100      	movs	r1, #0
 8003274:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003276:	4b17      	ldr	r3, [pc, #92]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800327c:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800327e:	2205      	movs	r2, #5
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8003282:	4b14      	ldr	r3, [pc, #80]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003284:	2205      	movs	r2, #5
 8003286:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003288:	4b12      	ldr	r3, [pc, #72]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 800328a:	223c      	movs	r2, #60	@ 0x3c
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003290:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003292:	2200      	movs	r2, #0
 8003294:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 8003298:	0018      	movs	r0, r3
 800329a:	f001 fa7b 	bl	8004794 <HAL_ADC_Init>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d001      	beq.n	80032a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80032a2:	f000 fb2b 	bl	80038fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <MX_ADC1_Init+0xd4>)
 80032aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	2200      	movs	r2, #0
 80032b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	2200      	movs	r2, #0
 80032b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b8:	1d3a      	adds	r2, r7, #4
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <MX_ADC1_Init+0xcc>)
 80032bc:	0011      	movs	r1, r2
 80032be:	0018      	movs	r0, r3
 80032c0:	f001 fe6a 	bl	8004f98 <HAL_ADC_ConfigChannel>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d001      	beq.n	80032cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80032c8:	f000 fb18 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200002e4 	.word	0x200002e4
 80032d8:	40012400 	.word	0x40012400
 80032dc:	1c000080 	.word	0x1c000080

080032e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <MX_I2C2_Init+0x74>)
 80032e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003358 <MX_I2C2_Init+0x78>)
 80032e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0090194B;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <MX_I2C2_Init+0x74>)
 80032ec:	4a1b      	ldr	r2, [pc, #108]	@ (800335c <MX_I2C2_Init+0x7c>)
 80032ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80032f0:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <MX_I2C2_Init+0x74>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032f6:	4b17      	ldr	r3, [pc, #92]	@ (8003354 <MX_I2C2_Init+0x74>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032fc:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <MX_I2C2_Init+0x74>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003302:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <MX_I2C2_Init+0x74>)
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <MX_I2C2_Init+0x74>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <MX_I2C2_Init+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003314:	4b0f      	ldr	r3, [pc, #60]	@ (8003354 <MX_I2C2_Init+0x74>)
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800331a:	4b0e      	ldr	r3, [pc, #56]	@ (8003354 <MX_I2C2_Init+0x74>)
 800331c:	0018      	movs	r0, r3
 800331e:	f002 fc2d 	bl	8005b7c <HAL_I2C_Init>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003326:	f000 fae9 	bl	80038fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <MX_I2C2_Init+0x74>)
 800332c:	2100      	movs	r1, #0
 800332e:	0018      	movs	r0, r3
 8003330:	f003 f9d0 	bl	80066d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d001      	beq.n	800333c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003338:	f000 fae0 	bl	80038fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <MX_I2C2_Init+0x74>)
 800333e:	2100      	movs	r1, #0
 8003340:	0018      	movs	r0, r3
 8003342:	f003 fa13 	bl	800676c <HAL_I2CEx_ConfigDigitalFilter>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800334a:	f000 fad7 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20000348 	.word	0x20000348
 8003358:	40005800 	.word	0x40005800
 800335c:	0090194b 	.word	0x0090194b

08003360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <MX_SPI2_Init+0x74>)
 8003366:	4a1c      	ldr	r2, [pc, #112]	@ (80033d8 <MX_SPI2_Init+0x78>)
 8003368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800336a:	4b1a      	ldr	r3, [pc, #104]	@ (80033d4 <MX_SPI2_Init+0x74>)
 800336c:	2282      	movs	r2, #130	@ 0x82
 800336e:	0052      	lsls	r2, r2, #1
 8003370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003372:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <MX_SPI2_Init+0x74>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003378:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <MX_SPI2_Init+0x74>)
 800337a:	22e0      	movs	r2, #224	@ 0xe0
 800337c:	00d2      	lsls	r2, r2, #3
 800337e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <MX_SPI2_Init+0x74>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <MX_SPI2_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <MX_SPI2_Init+0x74>)
 800338e:	2280      	movs	r2, #128	@ 0x80
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003394:	4b0f      	ldr	r3, [pc, #60]	@ (80033d4 <MX_SPI2_Init+0x74>)
 8003396:	2210      	movs	r2, #16
 8003398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <MX_SPI2_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033ae:	2207      	movs	r2, #7
 80033b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033b8:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033ba:	2208      	movs	r2, #8
 80033bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <MX_SPI2_Init+0x74>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f005 fe05 	bl	8008fd0 <HAL_SPI_Init>
 80033c6:	1e03      	subs	r3, r0, #0
 80033c8:	d001      	beq.n	80033ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80033ca:	f000 fa97 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	2000039c 	.word	0x2000039c
 80033d8:	40003800 	.word	0x40003800

080033dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	0018      	movs	r0, r3
 80033e6:	230c      	movs	r3, #12
 80033e8:	001a      	movs	r2, r3
 80033ea:	2100      	movs	r1, #0
 80033ec:	f00c ffee 	bl	80103cc <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <MX_TIM7_Init+0x6c>)
 80033f2:	4a16      	ldr	r2, [pc, #88]	@ (800344c <MX_TIM7_Init+0x70>)
 80033f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000-1;
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <MX_TIM7_Init+0x6c>)
 80033f8:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <MX_TIM7_Init+0x74>)
 80033fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <MX_TIM7_Init+0x6c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33-1;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <MX_TIM7_Init+0x6c>)
 8003404:	2220      	movs	r2, #32
 8003406:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <MX_TIM7_Init+0x6c>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <MX_TIM7_Init+0x6c>)
 8003410:	0018      	movs	r0, r3
 8003412:	f006 f9ed 	bl	80097f0 <HAL_TIM_Base_Init>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800341a:	f000 fa6f 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800342a:	1d3a      	adds	r2, r7, #4
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <MX_TIM7_Init+0x6c>)
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f006 fc75 	bl	8009d20 <HAL_TIMEx_MasterConfigSynchronization>
 8003436:	1e03      	subs	r3, r0, #0
 8003438:	d001      	beq.n	800343e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800343a:	f000 fa5f 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b004      	add	sp, #16
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			@ (mov r8, r8)
 8003448:	20000400 	.word	0x20000400
 800344c:	40001400 	.word	0x40001400
 8003450:	0000bb7f 	.word	0x0000bb7f

08003454 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003458:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <MX_TIM16_Init+0x44>)
 800345a:	4a10      	ldr	r2, [pc, #64]	@ (800349c <MX_TIM16_Init+0x48>)
 800345c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 800345e:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_TIM16_Init+0x44>)
 8003460:	4a0f      	ldr	r2, [pc, #60]	@ (80034a0 <MX_TIM16_Init+0x4c>)
 8003462:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <MX_TIM16_Init+0x44>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <MX_TIM16_Init+0x44>)
 800346c:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <MX_TIM16_Init+0x50>)
 800346e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <MX_TIM16_Init+0x44>)
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <MX_TIM16_Init+0x44>)
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <MX_TIM16_Init+0x44>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003482:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <MX_TIM16_Init+0x44>)
 8003484:	0018      	movs	r0, r3
 8003486:	f006 f9b3 	bl	80097f0 <HAL_TIM_Base_Init>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800348e:	f000 fa35 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000044c 	.word	0x2000044c
 800349c:	40014400 	.word	0x40014400
 80034a0:	0000bb7f 	.word	0x0000bb7f
 80034a4:	000003e7 	.word	0x000003e7

080034a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034ae:	4a10      	ldr	r2, [pc, #64]	@ (80034f0 <MX_TIM17_Init+0x48>)
 80034b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48000-1;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034b4:	4a0f      	ldr	r2, [pc, #60]	@ (80034f4 <MX_TIM17_Init+0x4c>)
 80034b6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80034be:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034c0:	4a0d      	ldr	r2, [pc, #52]	@ (80034f8 <MX_TIM17_Init+0x50>)
 80034c2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c4:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80034ca:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d0:	4b06      	ldr	r3, [pc, #24]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80034d6:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <MX_TIM17_Init+0x44>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f006 f989 	bl	80097f0 <HAL_TIM_Base_Init>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80034e2:	f000 fa0b 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000498 	.word	0x20000498
 80034f0:	40014800 	.word	0x40014800
 80034f4:	0000bb7f 	.word	0x0000bb7f
 80034f8:	000003e7 	.word	0x000003e7

080034fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b08b      	sub	sp, #44	@ 0x2c
 8003500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003502:	2414      	movs	r4, #20
 8003504:	193b      	adds	r3, r7, r4
 8003506:	0018      	movs	r0, r3
 8003508:	2314      	movs	r3, #20
 800350a:	001a      	movs	r2, r3
 800350c:	2100      	movs	r1, #0
 800350e:	f00c ff5d 	bl	80103cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003512:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003516:	4b6c      	ldr	r3, [pc, #432]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003518:	2120      	movs	r1, #32
 800351a:	430a      	orrs	r2, r1
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
 800351e:	4b6a      	ldr	r3, [pc, #424]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	2220      	movs	r2, #32
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	4b67      	ldr	r3, [pc, #412]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 800352c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352e:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003530:	2101      	movs	r1, #1
 8003532:	430a      	orrs	r2, r1
 8003534:	635a      	str	r2, [r3, #52]	@ 0x34
 8003536:	4b64      	ldr	r3, [pc, #400]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353a:	2201      	movs	r2, #1
 800353c:	4013      	ands	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003546:	4b60      	ldr	r3, [pc, #384]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003548:	2102      	movs	r1, #2
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34
 800354e:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800355a:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 800355c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800355e:	4b5a      	ldr	r3, [pc, #360]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003560:	2104      	movs	r1, #4
 8003562:	430a      	orrs	r2, r1
 8003564:	635a      	str	r2, [r3, #52]	@ 0x34
 8003566:	4b58      	ldr	r3, [pc, #352]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356a:	2204      	movs	r2, #4
 800356c:	4013      	ands	r3, r2
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003572:	4b55      	ldr	r3, [pc, #340]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003578:	2108      	movs	r1, #8
 800357a:	430a      	orrs	r2, r1
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
 800357e:	4b52      	ldr	r3, [pc, #328]	@ (80036c8 <MX_GPIO_Init+0x1cc>)
 8003580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003582:	2208      	movs	r2, #8
 8003584:	4013      	ands	r3, r2
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LT8722_CS_GPIO_Port, LT8722_CS_Pin, GPIO_PIN_RESET);
 800358a:	23a0      	movs	r3, #160	@ 0xa0
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	2200      	movs	r2, #0
 8003590:	2140      	movs	r1, #64	@ 0x40
 8003592:	0018      	movs	r0, r3
 8003594:	f002 fa85 	bl	8005aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin, GPIO_PIN_RESET);
 8003598:	2387      	movs	r3, #135	@ 0x87
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	484b      	ldr	r0, [pc, #300]	@ (80036cc <MX_GPIO_Init+0x1d0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	0019      	movs	r1, r3
 80035a2:	f002 fa7e 	bl	8005aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80035a6:	4b4a      	ldr	r3, [pc, #296]	@ (80036d0 <MX_GPIO_Init+0x1d4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	2140      	movs	r1, #64	@ 0x40
 80035ac:	0018      	movs	r0, r3
 80035ae:	f002 fa78 	bl	8005aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin, GPIO_PIN_RESET);
 80035b2:	4b48      	ldr	r3, [pc, #288]	@ (80036d4 <MX_GPIO_Init+0x1d8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	210f      	movs	r1, #15
 80035b8:	0018      	movs	r0, r3
 80035ba:	f002 fa72 	bl	8005aa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Temp_Down_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Down_Btn_Pin;
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	2202      	movs	r2, #2
 80035c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	2284      	movs	r2, #132	@ 0x84
 80035c8:	0392      	lsls	r2, r2, #14
 80035ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Down_Btn_GPIO_Port, &GPIO_InitStruct);
 80035d2:	193a      	adds	r2, r7, r4
 80035d4:	23a0      	movs	r3, #160	@ 0xa0
 80035d6:	05db      	lsls	r3, r3, #23
 80035d8:	0011      	movs	r1, r2
 80035da:	0018      	movs	r0, r3
 80035dc:	f002 f8d8 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LT8722_CS_Pin */
  GPIO_InitStruct.Pin = LT8722_CS_Pin;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	2201      	movs	r2, #1
 80035ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LT8722_CS_GPIO_Port, &GPIO_InitStruct);
 80035f8:	193a      	adds	r2, r7, r4
 80035fa:	23a0      	movs	r3, #160	@ 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	0011      	movs	r1, r2
 8003600:	0018      	movs	r0, r3
 8003602:	f002 f8c5 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LT8722_SWEN_Pin OLED_RW_Pin OLED_EN_Pin OLED_RS_Pin */
  GPIO_InitStruct.Pin = LT8722_SWEN_Pin|OLED_RW_Pin|OLED_EN_Pin|OLED_RS_Pin;
 8003606:	0021      	movs	r1, r4
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2287      	movs	r2, #135	@ 0x87
 800360c:	00d2      	lsls	r2, r2, #3
 800360e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	000c      	movs	r4, r1
 8003612:	193b      	adds	r3, r7, r4
 8003614:	2201      	movs	r2, #1
 8003616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	193b      	adds	r3, r7, r4
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003624:	193b      	adds	r3, r7, r4
 8003626:	4a29      	ldr	r2, [pc, #164]	@ (80036cc <MX_GPIO_Init+0x1d0>)
 8003628:	0019      	movs	r1, r3
 800362a:	0010      	movs	r0, r2
 800362c:	f002 f8b0 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_Up_Btn_Pin */
  GPIO_InitStruct.Pin = Temp_Up_Btn_Pin;
 8003630:	0021      	movs	r1, r4
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	0152      	lsls	r2, r2, #5
 8003638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800363a:	187b      	adds	r3, r7, r1
 800363c:	2284      	movs	r2, #132	@ 0x84
 800363e:	0392      	lsls	r2, r2, #14
 8003640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	000c      	movs	r4, r1
 8003644:	193b      	adds	r3, r7, r4
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Temp_Up_Btn_GPIO_Port, &GPIO_InitStruct);
 800364a:	193b      	adds	r3, r7, r4
 800364c:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <MX_GPIO_Init+0x1d0>)
 800364e:	0019      	movs	r1, r3
 8003650:	0010      	movs	r0, r2
 8003652:	f002 f89d 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8003656:	193b      	adds	r3, r7, r4
 8003658:	2240      	movs	r2, #64	@ 0x40
 800365a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365c:	193b      	adds	r3, r7, r4
 800365e:	2201      	movs	r2, #1
 8003660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	193b      	adds	r3, r7, r4
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	193b      	adds	r3, r7, r4
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800366e:	193b      	adds	r3, r7, r4
 8003670:	4a17      	ldr	r2, [pc, #92]	@ (80036d0 <MX_GPIO_Init+0x1d4>)
 8003672:	0019      	movs	r1, r3
 8003674:	0010      	movs	r0, r2
 8003676:	f002 f88b 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_D07_Pin OLED_D06_Pin OLED_D04_Pin OLED_D05_Pin */
  GPIO_InitStruct.Pin = OLED_D07_Pin|OLED_D06_Pin|OLED_D04_Pin|OLED_D05_Pin;
 800367a:	0021      	movs	r1, r4
 800367c:	187b      	adds	r3, r7, r1
 800367e:	220f      	movs	r2, #15
 8003680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	2201      	movs	r2, #1
 8003686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	187b      	adds	r3, r7, r1
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003694:	187b      	adds	r3, r7, r1
 8003696:	4a0f      	ldr	r2, [pc, #60]	@ (80036d4 <MX_GPIO_Init+0x1d8>)
 8003698:	0019      	movs	r1, r3
 800369a:	0010      	movs	r0, r2
 800369c:	f002 f878 	bl	8005790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2005      	movs	r0, #5
 80036a6:	f002 f841 	bl	800572c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80036aa:	2005      	movs	r0, #5
 80036ac:	f002 f853 	bl	8005756 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	2007      	movs	r0, #7
 80036b6:	f002 f839 	bl	800572c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80036ba:	2007      	movs	r0, #7
 80036bc:	f002 f84b 	bl	8005756 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b00b      	add	sp, #44	@ 0x2c
 80036c6:	bd90      	pop	{r4, r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	50000400 	.word	0x50000400
 80036d0:	50000800 	.word	0x50000800
 80036d4:	50000c00 	.word	0x50000c00

080036d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b08b      	sub	sp, #44	@ 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM17) { //PID and USB timer
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a51      	ldr	r2, [pc, #324]	@ (800382c <HAL_TIM_PeriodElapsedCallback+0x154>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d107      	bne.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x22>
    	time_to_rerun_PID_loop = 1;
 80036ea:	4b51      	ldr	r3, [pc, #324]	@ (8003830 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80036f0:	4b50      	ldr	r3, [pc, #320]	@ (8003834 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80036f2:	2140      	movs	r1, #64	@ 0x40
 80036f4:	0018      	movs	r0, r3
 80036f6:	f002 f9f1 	bl	8005adc <HAL_GPIO_TogglePin>
    }

    if (htim->Instance == TIM16) { //Button pressed time counting timer
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003838 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d000      	beq.n	8003706 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8003704:	e086      	b.n	8003814 <HAL_TIM_PeriodElapsedCallback+0x13c>

    	// ----------- REVISIT THIS. SPEED CARRIES OVER IF DIFFERENT BUTTON IS PRESSED RIGHT AFTER ANOTHER IS RELEASED -----------------

    	double temp_change_speeds[] = {0.5, 1, 2, 5};
 8003706:	2408      	movs	r4, #8
 8003708:	193a      	adds	r2, r7, r4
 800370a:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800370c:	0010      	movs	r0, r2
 800370e:	0019      	movs	r1, r3
 8003710:	2320      	movs	r3, #32
 8003712:	001a      	movs	r2, r3
 8003714:	f00c fefe 	bl	8010514 <memcpy>
    	static int speed_index = 0;
    	static int period_counter = 0;
    	if(temp_down_btn_is_pressed_down){
 8003718:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d039      	beq.n	8003794 <HAL_TIM_PeriodElapsedCallback+0xbc>
			if(HAL_GPIO_ReadPin(Temp_Down_Btn_GPIO_Port, Temp_Down_Btn_Pin) == 0){
 8003720:	23a0      	movs	r3, #160	@ 0xa0
 8003722:	05db      	lsls	r3, r3, #23
 8003724:	2102      	movs	r1, #2
 8003726:	0018      	movs	r0, r3
 8003728:	f002 f99e 	bl	8005a68 <HAL_GPIO_ReadPin>
 800372c:	1e03      	subs	r3, r0, #0
 800372e:	d124      	bne.n	800377a <HAL_TIM_PeriodElapsedCallback+0xa2>
				set_temp_inside -= temp_change_speeds[speed_index];
 8003730:	4b44      	ldr	r3, [pc, #272]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	193a      	adds	r2, r7, r4
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	18d3      	adds	r3, r2, r3
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f7fe fa00 	bl	8001b48 <__aeabi_dsub>
 8003748:	0002      	movs	r2, r0
 800374a:	000b      	movs	r3, r1
 800374c:	493d      	ldr	r1, [pc, #244]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800374e:	600a      	str	r2, [r1, #0]
 8003750:	604b      	str	r3, [r1, #4]
				period_counter++;
 8003752:	4b3e      	ldr	r3, [pc, #248]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	4b3c      	ldr	r3, [pc, #240]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800375a:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 800375c:	4b3a      	ldr	r3, [pc, #232]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d017      	beq.n	8003794 <HAL_TIM_PeriodElapsedCallback+0xbc>
					speed_index = period_counter/3;
 8003764:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2103      	movs	r1, #3
 800376a:	0018      	movs	r0, r3
 800376c:	f7fc fd6e 	bl	800024c <__divsi3>
 8003770:	0003      	movs	r3, r0
 8003772:	001a      	movs	r2, r3
 8003774:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e00c      	b.n	8003794 <HAL_TIM_PeriodElapsedCallback+0xbc>
			}
			else{
				temp_down_btn_is_pressed_down = 0;
 800377a:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 8003780:	4b33      	ldr	r3, [pc, #204]	@ (8003850 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003782:	0018      	movs	r0, r3
 8003784:	f006 f8e8 	bl	8009958 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 8003788:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 800378e:	4b2e      	ldr	r3, [pc, #184]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
			}
    	}
    	if(temp_up_btn_is_pressed_down){
 8003794:	4b2f      	ldr	r3, [pc, #188]	@ (8003854 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03b      	beq.n	8003814 <HAL_TIM_PeriodElapsedCallback+0x13c>
			if(HAL_GPIO_ReadPin(Temp_Up_Btn_GPIO_Port, Temp_Up_Btn_Pin) == 0){
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	015b      	lsls	r3, r3, #5
 80037a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003858 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f002 f95f 	bl	8005a68 <HAL_GPIO_ReadPin>
 80037aa:	1e03      	subs	r3, r0, #0
 80037ac:	d125      	bne.n	80037fa <HAL_TIM_PeriodElapsedCallback+0x122>
				set_temp_inside += temp_change_speeds[speed_index];;
 80037ae:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2208      	movs	r2, #8
 80037b4:	18ba      	adds	r2, r7, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f7fc feda 	bl	800057c <__aeabi_dadd>
 80037c8:	0002      	movs	r2, r0
 80037ca:	000b      	movs	r3, r1
 80037cc:	491d      	ldr	r1, [pc, #116]	@ (8003844 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80037ce:	600a      	str	r2, [r1, #0]
 80037d0:	604b      	str	r3, [r1, #4]
				period_counter++;
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037da:	601a      	str	r2, [r3, #0]
				if(speed_index != 3)
 80037dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d017      	beq.n	8003814 <HAL_TIM_PeriodElapsedCallback+0x13c>
					speed_index = period_counter/3;
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2103      	movs	r1, #3
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fc fd2e 	bl	800024c <__divsi3>
 80037f0:	0003      	movs	r3, r0
 80037f2:	001a      	movs	r2, r3
 80037f4:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e00c      	b.n	8003814 <HAL_TIM_PeriodElapsedCallback+0x13c>
			}
			else{
				temp_up_btn_is_pressed_down = 0;
 80037fa:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim16);
 8003800:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003802:	0018      	movs	r0, r3
 8003804:	f006 f8a8 	bl	8009958 <HAL_TIM_Base_Stop_IT>
				period_counter = 0;
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
				speed_index = 0;
 800380e:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
			}
    	}

    }

    if (htim->Instance == TIM7) { //Display refresh timer
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a10      	ldr	r2, [pc, #64]	@ (800385c <HAL_TIM_PeriodElapsedCallback+0x184>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d102      	bne.n	8003824 <HAL_TIM_PeriodElapsedCallback+0x14c>
    	time_to_refresh_OLED = 1;
 800381e:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    }


}
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b00b      	add	sp, #44	@ 0x2c
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	40014800 	.word	0x40014800
 8003830:	200004e4 	.word	0x200004e4
 8003834:	50000800 	.word	0x50000800
 8003838:	40014400 	.word	0x40014400
 800383c:	08013030 	.word	0x08013030
 8003840:	200004ec 	.word	0x200004ec
 8003844:	200004f8 	.word	0x200004f8
 8003848:	20000500 	.word	0x20000500
 800384c:	20000504 	.word	0x20000504
 8003850:	2000044c 	.word	0x2000044c
 8003854:	200004f0 	.word	0x200004f0
 8003858:	50000400 	.word	0x50000400
 800385c:	40001400 	.word	0x40001400
 8003860:	200004e8 	.word	0x200004e8

08003864 <HAL_GPIO_EXTI_Falling_Callback>:
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	0002      	movs	r2, r0
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == Temp_Down_Btn_Pin) {
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d10e      	bne.n	8003896 <HAL_GPIO_EXTI_Falling_Callback+0x32>
    	set_temp_inside -= 0.1 ;
 8003878:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003880:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003882:	f7fe f961 	bl	8001b48 <__aeabi_dsub>
 8003886:	0002      	movs	r2, r0
 8003888:	000b      	movs	r3, r1
 800388a:	4916      	ldr	r1, [pc, #88]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800388c:	600a      	str	r2, [r1, #0]
 800388e:	604b      	str	r3, [r1, #4]
    	temp_down_btn_is_pressed_down = 1;
 8003890:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    }
    if (GPIO_Pin == Temp_Up_Btn_Pin) {
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	429a      	cmp	r2, r3
 80038a0:	d10e      	bne.n	80038c0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
    	set_temp_inside += 0.1 ;
 80038a2:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	4a0f      	ldr	r2, [pc, #60]	@ (80038e8 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80038ac:	f7fc fe66 	bl	800057c <__aeabi_dadd>
 80038b0:	0002      	movs	r2, r0
 80038b2:	000b      	movs	r3, r1
 80038b4:	490b      	ldr	r1, [pc, #44]	@ (80038e4 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80038b6:	600a      	str	r2, [r1, #0]
 80038b8:	604b      	str	r3, [r1, #4]
    	temp_up_btn_is_pressed_down = 1;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    }
    htim16.Instance->CNT = 0;
 80038c0:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE); // So that timer ran for the first time does not immediately raise an interrupt
 80038c8:	4b0b      	ldr	r3, [pc, #44]	@ (80038f8 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2202      	movs	r2, #2
 80038ce:	4252      	negs	r2, r2
 80038d0:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim16);
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_GPIO_EXTI_Falling_Callback+0x94>)
 80038d4:	0018      	movs	r0, r3
 80038d6:	f005 ffe3 	bl	80098a0 <HAL_TIM_Base_Start_IT>
}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	200004f8 	.word	0x200004f8
 80038e8:	9999999a 	.word	0x9999999a
 80038ec:	3fb99999 	.word	0x3fb99999
 80038f0:	200004ec 	.word	0x200004ec
 80038f4:	200004f0 	.word	0x200004f0
 80038f8:	2000044c 	.word	0x2000044c

080038fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003900:	b672      	cpsid	i
}
 8003902:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	e7fd      	b.n	8003904 <Error_Handler+0x8>

08003908 <compute_pid_output>:
#include <stdlib.h>
#include "pid.h"

double compute_pid_output(double error){
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6038      	str	r0, [r7, #0]
 8003910:	6079      	str	r1, [r7, #4]
	static double integral = 0;
	static double previous_error[10] = {0};
	double pid_output = Kp*error + Ki*integral + Kd*compute_derivative_part(error, previous_error, 10);
 8003912:	2200      	movs	r2, #0
 8003914:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <compute_pid_output+0xdc>)
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	f7fd fe2f 	bl	800157c <__aeabi_dmul>
 800391e:	0002      	movs	r2, r0
 8003920:	000b      	movs	r3, r1
 8003922:	0014      	movs	r4, r2
 8003924:	001d      	movs	r5, r3
 8003926:	4b30      	ldr	r3, [pc, #192]	@ (80039e8 <compute_pid_output+0xe0>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	4a2f      	ldr	r2, [pc, #188]	@ (80039ec <compute_pid_output+0xe4>)
 800392e:	4b30      	ldr	r3, [pc, #192]	@ (80039f0 <compute_pid_output+0xe8>)
 8003930:	f7fd fe24 	bl	800157c <__aeabi_dmul>
 8003934:	0002      	movs	r2, r0
 8003936:	000b      	movs	r3, r1
 8003938:	0020      	movs	r0, r4
 800393a:	0029      	movs	r1, r5
 800393c:	f7fc fe1e 	bl	800057c <__aeabi_dadd>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	0014      	movs	r4, r2
 8003946:	001d      	movs	r5, r3
 8003948:	4a2a      	ldr	r2, [pc, #168]	@ (80039f4 <compute_pid_output+0xec>)
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	230a      	movs	r3, #10
 8003950:	f000 f854 	bl	80039fc <compute_derivative_part>
 8003954:	2200      	movs	r2, #0
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <compute_pid_output+0xf0>)
 8003958:	f7fd fe10 	bl	800157c <__aeabi_dmul>
 800395c:	0002      	movs	r2, r0
 800395e:	000b      	movs	r3, r1
 8003960:	0020      	movs	r0, r4
 8003962:	0029      	movs	r1, r5
 8003964:	f7fc fe0a 	bl	800057c <__aeabi_dadd>
 8003968:	0002      	movs	r2, r0
 800396a:	000b      	movs	r3, r1
 800396c:	60ba      	str	r2, [r7, #8]
 800396e:	60fb      	str	r3, [r7, #12]
	push_new_value_from_the_end(error, previous_error, 10);
 8003970:	4a20      	ldr	r2, [pc, #128]	@ (80039f4 <compute_pid_output+0xec>)
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	230a      	movs	r3, #10
 8003978:	f000 f88e 	bl	8003a98 <push_new_value_from_the_end>
	if(abs(integral + error * dT) < integral_cap){
 800397c:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <compute_pid_output+0xe0>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f7fc fdf9 	bl	800057c <__aeabi_dadd>
 800398a:	0002      	movs	r2, r0
 800398c:	000b      	movs	r3, r1
 800398e:	0010      	movs	r0, r2
 8003990:	0019      	movs	r1, r3
 8003992:	f7fe fd05 	bl	80023a0 <__aeabi_d2iz>
 8003996:	0003      	movs	r3, r0
 8003998:	3331      	adds	r3, #49	@ 0x31
 800399a:	db1b      	blt.n	80039d4 <compute_pid_output+0xcc>
 800399c:	4b12      	ldr	r3, [pc, #72]	@ (80039e8 <compute_pid_output+0xe0>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f7fc fde9 	bl	800057c <__aeabi_dadd>
 80039aa:	0002      	movs	r2, r0
 80039ac:	000b      	movs	r3, r1
 80039ae:	0010      	movs	r0, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	f7fe fcf5 	bl	80023a0 <__aeabi_d2iz>
 80039b6:	0003      	movs	r3, r0
 80039b8:	2b31      	cmp	r3, #49	@ 0x31
 80039ba:	dc0b      	bgt.n	80039d4 <compute_pid_output+0xcc>
		integral += error * dT;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <compute_pid_output+0xe0>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f7fc fdd9 	bl	800057c <__aeabi_dadd>
 80039ca:	0002      	movs	r2, r0
 80039cc:	000b      	movs	r3, r1
 80039ce:	4906      	ldr	r1, [pc, #24]	@ (80039e8 <compute_pid_output+0xe0>)
 80039d0:	600a      	str	r2, [r1, #0]
 80039d2:	604b      	str	r3, [r1, #4]
	}
	return pid_output;
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	0010      	movs	r0, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b004      	add	sp, #16
 80039e0:	bdb0      	pop	{r4, r5, r7, pc}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	40240000 	.word	0x40240000
 80039e8:	20000508 	.word	0x20000508
 80039ec:	9999999a 	.word	0x9999999a
 80039f0:	3fa99999 	.word	0x3fa99999
 80039f4:	20000510 	.word	0x20000510
 80039f8:	407f4000 	.word	0x407f4000

080039fc <compute_derivative_part>:

double compute_derivative_part(double current_error, double *error_history, int size){
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60b8      	str	r0, [r7, #8]
 8003a04:	60f9      	str	r1, [r7, #12]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
	for(int i = 0;i<size;i++){
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e038      	b.n	8003a82 <compute_derivative_part+0x86>
		if(current_error - error_history[size-1-i] != 0){
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1e5a      	subs	r2, r3, #1
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	18d3      	adds	r3, r2, r3
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68b8      	ldr	r0, [r7, #8]
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	f7fe f88f 	bl	8001b48 <__aeabi_dsub>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	000b      	movs	r3, r1
 8003a2e:	0010      	movs	r0, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	2200      	movs	r2, #0
 8003a34:	2300      	movs	r3, #0
 8003a36:	f7fc fd05 	bl	8000444 <__aeabi_dcmpeq>
 8003a3a:	1e03      	subs	r3, r0, #0
 8003a3c:	d11e      	bne.n	8003a7c <compute_derivative_part+0x80>
			return (current_error - error_history[size-1-i])/(dT*(1+i));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	18d3      	adds	r3, r2, r3
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	68b8      	ldr	r0, [r7, #8]
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	f7fe f878 	bl	8001b48 <__aeabi_dsub>
 8003a58:	0002      	movs	r2, r0
 8003a5a:	000b      	movs	r3, r1
 8003a5c:	0014      	movs	r4, r2
 8003a5e:	001d      	movs	r5, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fe fcd7 	bl	8002418 <__aeabi_i2d>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	000b      	movs	r3, r1
 8003a6e:	0020      	movs	r0, r4
 8003a70:	0029      	movs	r1, r5
 8003a72:	f7fd f949 	bl	8000d08 <__aeabi_ddiv>
 8003a76:	0002      	movs	r2, r0
 8003a78:	000b      	movs	r3, r1
 8003a7a:	e008      	b.n	8003a8e <compute_derivative_part+0x92>
	for(int i = 0;i<size;i++){
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dbc2      	blt.n	8003a10 <compute_derivative_part+0x14>
		}
	}
	return 0.0;
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	0010      	movs	r0, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b006      	add	sp, #24
 8003a96:	bdb0      	pop	{r4, r5, r7, pc}

08003a98 <push_new_value_from_the_end>:

int push_new_value_from_the_end(double new_val, double *array, int size){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60b8      	str	r0, [r7, #8]
 8003aa0:	60f9      	str	r1, [r7, #12]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
	for(int i = size-2;i>=0; i--){
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	3b02      	subs	r3, #2
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e00f      	b.n	8003ace <push_new_value_from_the_end+0x36>
		array[i] = array[i+1];
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	18d3      	adds	r3, r2, r3
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	00d2      	lsls	r2, r2, #3
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	1889      	adds	r1, r1, r2
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	600a      	str	r2, [r1, #0]
 8003ac6:	604b      	str	r3, [r1, #4]
	for(int i = size-2;i>=0; i--){
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	daec      	bge.n	8003aae <push_new_value_from_the_end+0x16>
	}
	array[size - 1] = new_val;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	@ (8003af4 <push_new_value_from_the_end+0x5c>)
 8003ad8:	4694      	mov	ip, r2
 8003ada:	4463      	add	r3, ip
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	18d1      	adds	r1, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	600a      	str	r2, [r1, #0]
 8003ae8:	604b      	str	r3, [r1, #4]
	return 0;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b006      	add	sp, #24
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	1fffffff 	.word	0x1fffffff

08003af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afe:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b04:	2101      	movs	r1, #1
 8003b06:	430a      	orrs	r2, r1
 8003b08:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b1c:	2180      	movs	r1, #128	@ 0x80
 8003b1e:	0549      	lsls	r1, r1, #21
 8003b20:	430a      	orrs	r2, r1
 8003b22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <HAL_MspInit+0x4c>)
 8003b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	055b      	lsls	r3, r3, #21
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003b32:	23c0      	movs	r3, #192	@ 0xc0
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fca0 	bl	800447c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b08b      	sub	sp, #44	@ 0x2c
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	2414      	movs	r4, #20
 8003b52:	193b      	adds	r3, r7, r4
 8003b54:	0018      	movs	r0, r3
 8003b56:	2314      	movs	r3, #20
 8003b58:	001a      	movs	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f00c fc36 	bl	80103cc <memset>
  if(hadc->Instance==ADC1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <HAL_ADC_MspInit+0x90>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d131      	bne.n	8003bce <HAL_ADC_MspInit+0x86>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	0349      	lsls	r1, r1, #13
 8003b74:	430a      	orrs	r2, r1
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b78:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	035b      	lsls	r3, r3, #13
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b8a:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b92:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_ADC_MspInit+0x94>)
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	2201      	movs	r2, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ba4:	193b      	adds	r3, r7, r4
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	193a      	adds	r2, r7, r4
 8003bb2:	23a0      	movs	r3, #160	@ 0xa0
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f001 fde9 	bl	8005790 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	200c      	movs	r0, #12
 8003bc4:	f001 fdb2 	bl	800572c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003bc8:	200c      	movs	r0, #12
 8003bca:	f001 fdc4 	bl	8005756 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b00b      	add	sp, #44	@ 0x2c
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	40012400 	.word	0x40012400
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b097      	sub	sp, #92	@ 0x5c
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	2344      	movs	r3, #68	@ 0x44
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	0018      	movs	r0, r3
 8003bee:	2314      	movs	r3, #20
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f00c fbea 	bl	80103cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bf8:	2418      	movs	r4, #24
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	232c      	movs	r3, #44	@ 0x2c
 8003c00:	001a      	movs	r2, r3
 8003c02:	2100      	movs	r1, #0
 8003c04:	f00c fbe2 	bl	80103cc <memset>
  if(hi2c->Instance==I2C2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ce4 <HAL_I2C_MspInit+0x104>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d163      	bne.n	8003cda <HAL_I2C_MspInit+0xfa>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2240      	movs	r2, #64	@ 0x40
 8003c16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	0018      	movs	r0, r3
 8003c22:	f005 f84d 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c2a:	f7ff fe67 	bl	80038fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c32:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c34:	2102      	movs	r1, #2
 8003c36:	430a      	orrs	r2, r1
 8003c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c46:	4b28      	ldr	r3, [pc, #160]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c4a:	4b27      	ldr	r3, [pc, #156]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c52:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	2201      	movs	r2, #1
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c5e:	2144      	movs	r1, #68	@ 0x44
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	01d2      	lsls	r2, r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c68:	000c      	movs	r4, r1
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	2212      	movs	r2, #18
 8003c6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c70:	193b      	adds	r3, r7, r4
 8003c72:	2201      	movs	r2, #1
 8003c74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	193b      	adds	r3, r7, r4
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8003c7c:	193b      	adds	r3, r7, r4
 8003c7e:	2206      	movs	r2, #6
 8003c80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <HAL_I2C_MspInit+0x10c>)
 8003c86:	0019      	movs	r1, r3
 8003c88:	0010      	movs	r0, r2
 8003c8a:	f001 fd81 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c8e:	0021      	movs	r1, r4
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	0092      	lsls	r2, r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2212      	movs	r2, #18
 8003c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C2;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2208      	movs	r2, #8
 8003cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb0:	187a      	adds	r2, r7, r1
 8003cb2:	23a0      	movs	r3, #160	@ 0xa0
 8003cb4:	05db      	lsls	r3, r3, #23
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f001 fd69 	bl	8005790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc2:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	03c9      	lsls	r1, r1, #15
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_I2C_MspInit+0x108>)
 8003cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	03db      	lsls	r3, r3, #15
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b017      	add	sp, #92	@ 0x5c
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	40005800 	.word	0x40005800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	50000400 	.word	0x50000400

08003cf0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b08b      	sub	sp, #44	@ 0x2c
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	2414      	movs	r4, #20
 8003cfa:	193b      	adds	r3, r7, r4
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	2314      	movs	r3, #20
 8003d00:	001a      	movs	r2, r3
 8003d02:	2100      	movs	r1, #0
 8003d04:	f00c fb62 	bl	80103cc <memset>
  if(hspi->Instance==SPI2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	@ (8003da8 <HAL_SPI_MspInit+0xb8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d146      	bne.n	8003da0 <HAL_SPI_MspInit+0xb0>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d12:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d16:	4b25      	ldr	r3, [pc, #148]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	01c9      	lsls	r1, r1, #7
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d20:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	01db      	lsls	r3, r3, #7
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d32:	4b1e      	ldr	r3, [pc, #120]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	430a      	orrs	r2, r1
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <HAL_SPI_MspInit+0xbc>)
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PA0     ------> SPI2_SCK
    PA3     ------> SPI2_MISO
    PA4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003d46:	193b      	adds	r3, r7, r4
 8003d48:	2209      	movs	r2, #9
 8003d4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	2202      	movs	r2, #2
 8003d50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	193a      	adds	r2, r7, r4
 8003d66:	23a0      	movs	r3, #160	@ 0xa0
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	0011      	movs	r1, r2
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f001 fd0f 	bl	8005790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d72:	0021      	movs	r1, r4
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	2210      	movs	r2, #16
 8003d78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	2200      	movs	r2, #0
 8003d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2201      	movs	r2, #1
 8003d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d92:	187a      	adds	r2, r7, r1
 8003d94:	23a0      	movs	r3, #160	@ 0xa0
 8003d96:	05db      	lsls	r3, r3, #23
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f001 fcf8 	bl	8005790 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003da0:	46c0      	nop			@ (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b00b      	add	sp, #44	@ 0x2c
 8003da6:	bd90      	pop	{r4, r7, pc}
 8003da8:	40003800 	.word	0x40003800
 8003dac:	40021000 	.word	0x40021000

08003db0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a29      	ldr	r2, [pc, #164]	@ (8003e64 <HAL_TIM_Base_MspInit+0xb4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d114      	bne.n	8003dec <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003dc2:	4b29      	ldr	r3, [pc, #164]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dc6:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003dc8:	2120      	movs	r1, #32
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dce:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2012      	movs	r0, #18
 8003de0:	f001 fca4 	bl	800572c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003de4:	2012      	movs	r0, #18
 8003de6:	f001 fcb6 	bl	8005756 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003dea:	e036      	b.n	8003e5a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM16)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_TIM_Base_MspInit+0xbc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d116      	bne.n	8003e24 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003df6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003df8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003dfc:	2180      	movs	r1, #128	@ 0x80
 8003dfe:	0289      	lsls	r1, r1, #10
 8003e00:	430a      	orrs	r2, r1
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e04:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003e12:	2200      	movs	r2, #0
 8003e14:	2100      	movs	r1, #0
 8003e16:	2015      	movs	r0, #21
 8003e18:	f001 fc88 	bl	800572c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003e1c:	2015      	movs	r0, #21
 8003e1e:	f001 fc9a 	bl	8005756 <HAL_NVIC_EnableIRQ>
}
 8003e22:	e01a      	b.n	8003e5a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM17)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_TIM_Base_MspInit+0xc0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d115      	bne.n	8003e5a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003e34:	2180      	movs	r1, #128	@ 0x80
 8003e36:	02c9      	lsls	r1, r1, #11
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e68 <HAL_TIM_Base_MspInit+0xb8>)
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	02db      	lsls	r3, r3, #11
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2016      	movs	r0, #22
 8003e50:	f001 fc6c 	bl	800572c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003e54:	2016      	movs	r0, #22
 8003e56:	f001 fc7e 	bl	8005756 <HAL_NVIC_EnableIRQ>
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b006      	add	sp, #24
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	40001400 	.word	0x40001400
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	40014800 	.word	0x40014800

08003e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e78:	46c0      	nop			@ (mov r8, r8)
 8003e7a:	e7fd      	b.n	8003e78 <NMI_Handler+0x4>

08003e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e80:	46c0      	nop			@ (mov r8, r8)
 8003e82:	e7fd      	b.n	8003e80 <HardFault_Handler+0x4>

08003e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e9c:	f000 faae 	bl	80043fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Down_Btn_Pin);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f001 fe32 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Temp_Up_Btn_Pin);
 8003eba:	2380      	movs	r3, #128	@ 0x80
 8003ebc:	015b      	lsls	r3, r3, #5
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f001 fe28 	bl	8005b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <USB_IRQHandler>:

/**
  * @brief This function handles USB interrupt.
  */
void USB_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8003ed0:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <USB_IRQHandler+0x14>)
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f002 fe1c 	bl	8006b10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003ed8:	46c0      	nop			@ (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	20001a5c 	.word	0x20001a5c

08003ee4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 Interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <ADC1_IRQHandler+0x14>)
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 ff24 	bl	8004d38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	200002e4 	.word	0x200002e4

08003efc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global Interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <TIM7_IRQHandler+0x14>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f005 fd56 	bl	80099b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	20000400 	.word	0x20000400

08003f14 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003f18:	4b03      	ldr	r3, [pc, #12]	@ (8003f28 <TIM16_IRQHandler+0x14>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f005 fd4a 	bl	80099b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003f20:	46c0      	nop			@ (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	2000044c 	.word	0x2000044c

08003f2c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003f30:	4b03      	ldr	r3, [pc, #12]	@ (8003f40 <TIM17_IRQHandler+0x14>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f005 fd3e 	bl	80099b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	20000498 	.word	0x20000498

08003f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  return 1;
 8003f48:	2301      	movs	r3, #1
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_kill>:

int _kill(int pid, int sig)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f5a:	f00c faa3 	bl	80104a4 <__errno>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	2216      	movs	r2, #22
 8003f62:	601a      	str	r2, [r3, #0]
  return -1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	425b      	negs	r3, r3
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_exit>:

void _exit (int status)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f78:	2301      	movs	r3, #1
 8003f7a:	425a      	negs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0011      	movs	r1, r2
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff ffe5 	bl	8003f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	e7fd      	b.n	8003f86 <_exit+0x16>

08003f8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e00a      	b.n	8003fb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f9c:	e000      	b.n	8003fa0 <_read+0x16>
 8003f9e:	bf00      	nop
 8003fa0:	0001      	movs	r1, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	60ba      	str	r2, [r7, #8]
 8003fa8:	b2ca      	uxtb	r2, r1
 8003faa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	dbf0      	blt.n	8003f9c <_read+0x12>
  }

  return len;
 8003fba:	687b      	ldr	r3, [r7, #4]
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b006      	add	sp, #24
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e009      	b.n	8003fea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	60ba      	str	r2, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	e000      	b.n	8003fe4 <_write+0x20>
 8003fe2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	dbf1      	blt.n	8003fd6 <_write+0x12>
  }
  return len;
 8003ff2:	687b      	ldr	r3, [r7, #4]
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b006      	add	sp, #24
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_close>:

int _close(int file)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004004:	2301      	movs	r3, #1
 8004006:	425b      	negs	r3, r3
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2280      	movs	r2, #128	@ 0x80
 800401e:	0192      	lsls	r2, r2, #6
 8004020:	605a      	str	r2, [r3, #4]
  return 0;
 8004022:	2300      	movs	r3, #0
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}

0800402c <_isatty>:

int _isatty(int file)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004034:	2301      	movs	r3, #1
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}

0800403e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}

08004054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800405c:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <_sbrk+0x5c>)
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <_sbrk+0x60>)
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <_sbrk+0x64>)
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <_sbrk+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <_sbrk+0x64>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	18d3      	adds	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d207      	bcs.n	8004094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004084:	f00c fa0e 	bl	80104a4 <__errno>
 8004088:	0003      	movs	r3, r0
 800408a:	220c      	movs	r2, #12
 800408c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800408e:	2301      	movs	r3, #1
 8004090:	425b      	negs	r3, r3
 8004092:	e009      	b.n	80040a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004094:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <_sbrk+0x64>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <_sbrk+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	18d2      	adds	r2, r2, r3
 80040a2:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <_sbrk+0x64>)
 80040a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b006      	add	sp, #24
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20024000 	.word	0x20024000
 80040b4:	00000400 	.word	0x00000400
 80040b8:	20000560 	.word	0x20000560
 80040bc:	200020a8 	.word	0x200020a8

080040c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <read_temp>:
#include "main.h"
#include "tmp1075.h"

int read_temp(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, double *temp){
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b089      	sub	sp, #36	@ 0x24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	200b      	movs	r0, #11
 80040d8:	183b      	adds	r3, r7, r0
 80040da:	1c0a      	adds	r2, r1, #0
 80040dc:	701a      	strb	r2, [r3, #0]
	uint8_t raw_data[2] = {0};
 80040de:	2414      	movs	r4, #20
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	2200      	movs	r2, #0
 80040e4:	801a      	strh	r2, [r3, #0]
	if(read_reg(hi2c,dev_addr,TEMP_reg_addr,raw_data,2) != 0)
 80040e6:	183b      	adds	r3, r7, r0
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b299      	uxth	r1, r3
 80040ec:	193b      	adds	r3, r7, r4
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	2202      	movs	r2, #2
 80040f2:	9200      	str	r2, [sp, #0]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f000 f821 	bl	800413c <read_reg>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d001      	beq.n	8004102 <read_temp+0x36>
		return 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	e015      	b.n	800412e <read_temp+0x62>
	*temp = ((raw_data[0] << 4) | (raw_data[1]) >> 4) * 0.0625; //0.0625C per LSB
 8004102:	2214      	movs	r2, #20
 8004104:	18bb      	adds	r3, r7, r2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	18ba      	adds	r2, r7, r2
 800410c:	7852      	ldrb	r2, [r2, #1]
 800410e:	0912      	lsrs	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	4313      	orrs	r3, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f7fe f97f 	bl	8002418 <__aeabi_i2d>
 800411a:	2200      	movs	r2, #0
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <read_temp+0x6c>)
 800411e:	f7fd fa2d 	bl	800157c <__aeabi_dmul>
 8004122:	0002      	movs	r2, r0
 8004124:	000b      	movs	r3, r1
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	600a      	str	r2, [r1, #0]
 800412a:	604b      	str	r3, [r1, #4]
	return 0;
 800412c:	2300      	movs	r3, #0
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b007      	add	sp, #28
 8004134:	bd90      	pop	{r4, r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	3fb00000 	.word	0x3fb00000

0800413c <read_reg>:

int read_reg(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint8_t reg_addr, uint8_t *rx_data, uint8_t size){
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b087      	sub	sp, #28
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	0008      	movs	r0, r1
 8004146:	0011      	movs	r1, r2
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	240a      	movs	r4, #10
 800414c:	193b      	adds	r3, r7, r4
 800414e:	1c02      	adds	r2, r0, #0
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	2009      	movs	r0, #9
 8004154:	183b      	adds	r3, r7, r0
 8004156:	1c0a      	adds	r2, r1, #0
 8004158:	701a      	strb	r2, [r3, #0]

	if(HAL_I2C_Master_Transmit(hi2c, dev_addr, &reg_addr, 1, 100) != HAL_OK)
 800415a:	183a      	adds	r2, r7, r0
 800415c:	193b      	adds	r3, r7, r4
 800415e:	8819      	ldrh	r1, [r3, #0]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	2364      	movs	r3, #100	@ 0x64
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2301      	movs	r3, #1
 8004168:	f001 fdae 	bl	8005cc8 <HAL_I2C_Master_Transmit>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d001      	beq.n	8004174 <read_reg+0x38>
		return 1;
 8004170:	2301      	movs	r3, #1
 8004172:	e012      	b.n	800419a <read_reg+0x5e>

	if(HAL_I2C_Master_Receive(hi2c, dev_addr, rx_data, size, 100) != HAL_OK)
 8004174:	2320      	movs	r3, #32
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b29c      	uxth	r4, r3
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	230a      	movs	r3, #10
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	8819      	ldrh	r1, [r3, #0]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	2364      	movs	r3, #100	@ 0x64
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	0023      	movs	r3, r4
 800418c:	f001 fec6 	bl	8005f1c <HAL_I2C_Master_Receive>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <read_reg+0x5c>
		return 1;
 8004194:	2301      	movs	r3, #1
 8004196:	e000      	b.n	800419a <read_reg+0x5e>

	return 0;
 8004198:	2300      	movs	r3, #0
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	b005      	add	sp, #20
 80041a0:	bd90      	pop	{r4, r7, pc}

080041a2 <send_temps_via_usb>:
#include <string.h>
#include "usb_helpers.h"
#include "usbd_cdc_if.h"


void send_temps_via_usb(double current_temp_inside, double current_temp_outside){
 80041a2:	b5b0      	push	{r4, r5, r7, lr}
 80041a4:	b08c      	sub	sp, #48	@ 0x30
 80041a6:	af02      	add	r7, sp, #8
 80041a8:	60b8      	str	r0, [r7, #8]
 80041aa:	60f9      	str	r1, [r7, #12]
 80041ac:	603a      	str	r2, [r7, #0]
 80041ae:	607b      	str	r3, [r7, #4]
	uint8_t usb_tx_data[20] = {0};
 80041b0:	2514      	movs	r5, #20
 80041b2:	197b      	adds	r3, r7, r5
 80041b4:	0018      	movs	r0, r3
 80041b6:	2314      	movs	r3, #20
 80041b8:	001a      	movs	r2, r3
 80041ba:	2100      	movs	r1, #0
 80041bc:	f00c f906 	bl	80103cc <memset>
	put_temps_into_char_array(current_temp_inside, current_temp_outside, usb_tx_data, 20);
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68b8      	ldr	r0, [r7, #8]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	2414      	movs	r4, #20
 80041ca:	9401      	str	r4, [sp, #4]
 80041cc:	197c      	adds	r4, r7, r5
 80041ce:	9400      	str	r4, [sp, #0]
 80041d0:	f000 f85a 	bl	8004288 <put_temps_into_char_array>
	CDC_Transmit_FS(usb_tx_data, 20);
 80041d4:	197b      	adds	r3, r7, r5
 80041d6:	2114      	movs	r1, #20
 80041d8:	0018      	movs	r0, r3
 80041da:	f009 ffef 	bl	800e1bc <CDC_Transmit_FS>
}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b00a      	add	sp, #40	@ 0x28
 80041e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080041e8 <listen_for_temp_change_sent_via_usb>:

void listen_for_temp_change_sent_via_usb(double *set_temp_inside){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	uint32_t len = 20;
 80041f0:	2314      	movs	r3, #20
 80041f2:	60fb      	str	r3, [r7, #12]
	static uint8_t usb_rx_data[20] = {0};
	CDC_Receive(usb_rx_data, &len);
 80041f4:	230c      	movs	r3, #12
 80041f6:	18fa      	adds	r2, r7, r3
 80041f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <listen_for_temp_change_sent_via_usb+0x48>)
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f009 ff7d 	bl	800e0fc <CDC_Receive>

	if(usb_rx_data[0] != '\0' && string_to_double(usb_rx_data, 20, set_temp_inside) != 1){
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <listen_for_temp_change_sent_via_usb+0x48>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00e      	beq.n	8004228 <listen_for_temp_change_sent_via_usb+0x40>
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <listen_for_temp_change_sent_via_usb+0x48>)
 800420e:	2114      	movs	r1, #20
 8004210:	0018      	movs	r0, r3
 8004212:	f000 f80f 	bl	8004234 <string_to_double>
 8004216:	0003      	movs	r3, r0
 8004218:	2b01      	cmp	r3, #1
 800421a:	d005      	beq.n	8004228 <listen_for_temp_change_sent_via_usb+0x40>
		memset(usb_rx_data, 0, 20);
 800421c:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <listen_for_temp_change_sent_via_usb+0x48>)
 800421e:	2214      	movs	r2, #20
 8004220:	2100      	movs	r1, #0
 8004222:	0018      	movs	r0, r3
 8004224:	f00c f8d2 	bl	80103cc <memset>
	}
}
 8004228:	46c0      	nop			@ (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b004      	add	sp, #16
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000564 	.word	0x20000564

08004234 <string_to_double>:


int string_to_double(uint8_t *data, uint8_t size, double *result){
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	230b      	movs	r3, #11
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	1c0a      	adds	r2, r1, #0
 8004244:	701a      	strb	r2, [r3, #0]
	char *endptr = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
	double temp = strtod((const char*)data, &endptr);
 800424a:	2314      	movs	r3, #20
 800424c:	18fa      	adds	r2, r7, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	0011      	movs	r1, r2
 8004252:	0018      	movs	r0, r3
 8004254:	f00b fb06 	bl	800f864 <strtod>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	61ba      	str	r2, [r7, #24]
 800425e:	61fb      	str	r3, [r7, #28]

	if (*endptr != '\0' && *endptr != '\n')
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <string_to_double+0x40>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b0a      	cmp	r3, #10
 800426e:	d001      	beq.n	8004274 <string_to_double+0x40>
		return 1;
 8004270:	2301      	movs	r3, #1
 8004272:	e005      	b.n	8004280 <string_to_double+0x4c>

	*result = temp;
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	600a      	str	r2, [r1, #0]
 800427c:	604b      	str	r3, [r1, #4]
	return 0;
 800427e:	2300      	movs	r3, #0

}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b008      	add	sp, #32
 8004286:	bd80      	pop	{r7, pc}

08004288 <put_temps_into_char_array>:
int put_temps_into_char_array(double temp1, double temp2, uint8_t *char_array, uint8_t size){
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b089      	sub	sp, #36	@ 0x24
 800428c:	af04      	add	r7, sp, #16
 800428e:	60b8      	str	r0, [r7, #8]
 8004290:	60f9      	str	r1, [r7, #12]
 8004292:	603a      	str	r2, [r7, #0]
 8004294:	607b      	str	r3, [r7, #4]
	memset(char_array,0, size);
 8004296:	2424      	movs	r4, #36	@ 0x24
 8004298:	193b      	adds	r3, r7, r4
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2100      	movs	r1, #0
 80042a0:	0018      	movs	r0, r3
 80042a2:	f00c f893 	bl	80103cc <memset>
	snprintf((char*)char_array, size, "%.1lf, %.1lf\n", temp1, temp2);
 80042a6:	193b      	adds	r3, r7, r4
 80042a8:	7819      	ldrb	r1, [r3, #0]
 80042aa:	4c09      	ldr	r4, [pc, #36]	@ (80042d0 <put_temps_into_char_array+0x48>)
 80042ac:	6a38      	ldr	r0, [r7, #32]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	9202      	str	r2, [sp, #8]
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	9200      	str	r2, [sp, #0]
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	0022      	movs	r2, r4
 80042c0:	f00c f802 	bl	80102c8 <sniprintf>
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b005      	add	sp, #20
 80042cc:	bd90      	pop	{r4, r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	08013050 	.word	0x08013050

080042d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042d4:	480d      	ldr	r0, [pc, #52]	@ (800430c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042d8:	f7ff fef2 	bl	80040c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042dc:	480c      	ldr	r0, [pc, #48]	@ (8004310 <LoopForever+0x6>)
  ldr r1, =_edata
 80042de:	490d      	ldr	r1, [pc, #52]	@ (8004314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80042e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004318 <LoopForever+0xe>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <LoopForever+0x12>)
  ldr r4, =_ebss
 80042f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004320 <LoopForever+0x16>)
  movs r3, #0
 80042f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004302:	f00c f8d5 	bl	80104b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004306:	f7fe fddf 	bl	8002ec8 <main>

0800430a <LoopForever>:

LoopForever:
  b LoopForever
 800430a:	e7fe      	b.n	800430a <LoopForever>
  ldr   r0, =_estack
 800430c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004314:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8004318:	0801366c 	.word	0x0801366c
  ldr r2, =_sbss
 800431c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8004320:	200020a8 	.word	0x200020a8

08004324 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004324:	e7fe      	b.n	8004324 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>
	...

08004328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800432e:	1dfb      	adds	r3, r7, #7
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_Init+0x3c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <HAL_Init+0x3c>)
 800433a:	2180      	movs	r1, #128	@ 0x80
 800433c:	0049      	lsls	r1, r1, #1
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004342:	2003      	movs	r0, #3
 8004344:	f000 f810 	bl	8004368 <HAL_InitTick>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d003      	beq.n	8004354 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800434c:	1dfb      	adds	r3, r7, #7
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e001      	b.n	8004358 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004354:	f7ff fbd0 	bl	8003af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b002      	add	sp, #8
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40022000 	.word	0x40022000

08004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004370:	230f      	movs	r3, #15
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004378:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <HAL_InitTick+0x88>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02b      	beq.n	80043d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004380:	4b1c      	ldr	r3, [pc, #112]	@ (80043f4 <HAL_InitTick+0x8c>)
 8004382:	681c      	ldr	r4, [r3, #0]
 8004384:	4b1a      	ldr	r3, [pc, #104]	@ (80043f0 <HAL_InitTick+0x88>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	0019      	movs	r1, r3
 800438a:	23fa      	movs	r3, #250	@ 0xfa
 800438c:	0098      	lsls	r0, r3, #2
 800438e:	f7fb fed3 	bl	8000138 <__udivsi3>
 8004392:	0003      	movs	r3, r0
 8004394:	0019      	movs	r1, r3
 8004396:	0020      	movs	r0, r4
 8004398:	f7fb fece 	bl	8000138 <__udivsi3>
 800439c:	0003      	movs	r3, r0
 800439e:	0018      	movs	r0, r3
 80043a0:	f001 f9e9 	bl	8005776 <HAL_SYSTICK_Config>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d112      	bne.n	80043ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d80a      	bhi.n	80043c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	2301      	movs	r3, #1
 80043b2:	425b      	negs	r3, r3
 80043b4:	2200      	movs	r2, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f001 f9b8 	bl	800572c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043bc:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <HAL_InitTick+0x90>)
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e00d      	b.n	80043e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e008      	b.n	80043e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043ce:	230f      	movs	r3, #15
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e003      	b.n	80043e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043d8:	230f      	movs	r3, #15
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80043e0:	230f      	movs	r3, #15
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	781b      	ldrb	r3, [r3, #0]
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b005      	add	sp, #20
 80043ec:	bd90      	pop	{r4, r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	20000008 	.word	0x20000008
 80043f4:	20000000 	.word	0x20000000
 80043f8:	20000004 	.word	0x20000004

080043fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <HAL_IncTick+0x1c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	001a      	movs	r2, r3
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_IncTick+0x20>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	18d2      	adds	r2, r2, r3
 800440c:	4b03      	ldr	r3, [pc, #12]	@ (800441c <HAL_IncTick+0x20>)
 800440e:	601a      	str	r2, [r3, #0]
}
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	20000008 	.word	0x20000008
 800441c:	20000578 	.word	0x20000578

08004420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  return uwTick;
 8004424:	4b02      	ldr	r3, [pc, #8]	@ (8004430 <HAL_GetTick+0x10>)
 8004426:	681b      	ldr	r3, [r3, #0]
}
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	20000578 	.word	0x20000578

08004434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff fff0 	bl	8004420 <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	d005      	beq.n	800445a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_Delay+0x44>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	001a      	movs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	189b      	adds	r3, r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	f7ff ffe0 	bl	8004420 <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d8f7      	bhi.n	800445c <HAL_Delay+0x28>
  {
  }
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	b004      	add	sp, #16
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	20000008 	.word	0x20000008

0800447c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004484:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a06      	ldr	r2, [pc, #24]	@ (80044a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800448a:	4013      	ands	r3, r2
 800448c:	0019      	movs	r1, r3
 800448e:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	40010000 	.word	0x40010000
 80044a4:	fffff9ff 	.word	0xfffff9ff

080044a8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80044b8:	401a      	ands	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b002      	add	sp, #8
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			@ (mov r8, r8)
 80044cc:	fe3fffff 	.word	0xfe3fffff

080044d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	23e0      	movs	r3, #224	@ 0xe0
 80044de:	045b      	lsls	r3, r3, #17
 80044e0:	4013      	ands	r3, r2
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b002      	add	sp, #8
 80044e8:	bd80      	pop	{r7, pc}

080044ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	2104      	movs	r1, #4
 80044fe:	400a      	ands	r2, r1
 8004500:	2107      	movs	r1, #7
 8004502:	4091      	lsls	r1, r2
 8004504:	000a      	movs	r2, r1
 8004506:	43d2      	mvns	r2, r2
 8004508:	401a      	ands	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2104      	movs	r1, #4
 800450e:	400b      	ands	r3, r1
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4099      	lsls	r1, r3
 8004514:	000b      	movs	r3, r1
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b004      	add	sp, #16
 8004522:	bd80      	pop	{r7, pc}

08004524 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	2104      	movs	r1, #4
 8004536:	400a      	ands	r2, r1
 8004538:	2107      	movs	r1, #7
 800453a:	4091      	lsls	r1, r2
 800453c:	000a      	movs	r2, r1
 800453e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2104      	movs	r1, #4
 8004544:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004546:	40da      	lsrs	r2, r3
 8004548:	0013      	movs	r3, r2
}
 800454a:	0018      	movs	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	b002      	add	sp, #8
 8004550:	bd80      	pop	{r7, pc}

08004552 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	23c0      	movs	r3, #192	@ 0xc0
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4013      	ands	r3, r2
 8004564:	d101      	bne.n	800456a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800456a:	2300      	movs	r3, #0
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}

08004574 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	211f      	movs	r1, #31
 8004588:	400a      	ands	r2, r1
 800458a:	210f      	movs	r1, #15
 800458c:	4091      	lsls	r1, r2
 800458e:	000a      	movs	r2, r1
 8004590:	43d2      	mvns	r2, r2
 8004592:	401a      	ands	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0e9b      	lsrs	r3, r3, #26
 8004598:	210f      	movs	r1, #15
 800459a:	4019      	ands	r1, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	201f      	movs	r0, #31
 80045a0:	4003      	ands	r3, r0
 80045a2:	4099      	lsls	r1, r3
 80045a4:	000b      	movs	r3, r1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045ac:	46c0      	nop			@ (mov r8, r8)
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b004      	add	sp, #16
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	035b      	lsls	r3, r3, #13
 80045c6:	0b5b      	lsrs	r3, r3, #13
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045ce:	46c0      	nop			@ (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	0352      	lsls	r2, r2, #13
 80045e8:	0b52      	lsrs	r2, r2, #13
 80045ea:	43d2      	mvns	r2, r2
 80045ec:	401a      	ands	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}

080045fa <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2203      	movs	r2, #3
 8004608:	4013      	ands	r3, r2
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	0212      	lsls	r2, r2, #8
 8004628:	43d2      	mvns	r2, r2
 800462a:	401a      	ands	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	400b      	ands	r3, r1
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004636:	400b      	ands	r3, r1
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	07ffff00 	.word	0x07ffff00

0800464c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a05      	ldr	r2, [pc, #20]	@ (8004670 <LL_ADC_EnableInternalRegulator+0x24>)
 800465a:	4013      	ands	r3, r2
 800465c:	2280      	movs	r2, #128	@ 0x80
 800465e:	0552      	lsls	r2, r2, #21
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b002      	add	sp, #8
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	6fffffe8 	.word	0x6fffffe8

08004674 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	2380      	movs	r3, #128	@ 0x80
 8004682:	055b      	lsls	r3, r3, #21
 8004684:	401a      	ands	r2, r3
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	055b      	lsls	r3, r3, #21
 800468a:	429a      	cmp	r2, r3
 800468c:	d101      	bne.n	8004692 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004692:	2300      	movs	r3, #0
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b002      	add	sp, #8
 800469a:	bd80      	pop	{r7, pc}

0800469c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a04      	ldr	r2, [pc, #16]	@ (80046bc <LL_ADC_Enable+0x20>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	2201      	movs	r2, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046b4:	46c0      	nop			@ (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b002      	add	sp, #8
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	7fffffe8 	.word	0x7fffffe8

080046c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a04      	ldr	r2, [pc, #16]	@ (80046e0 <LL_ADC_Disable+0x20>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	2202      	movs	r2, #2
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b002      	add	sp, #8
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	7fffffe8 	.word	0x7fffffe8

080046e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2201      	movs	r2, #1
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <LL_ADC_IsEnabled+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_ADC_IsEnabled+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}

08004706 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2202      	movs	r2, #2
 8004714:	4013      	ands	r3, r2
 8004716:	2b02      	cmp	r3, #2
 8004718:	d101      	bne.n	800471e <LL_ADC_IsDisableOngoing+0x18>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <LL_ADC_IsDisableOngoing+0x1a>
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b002      	add	sp, #8
 8004726:	bd80      	pop	{r7, pc}

08004728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <LL_ADC_REG_StartConversion+0x20>)
 8004736:	4013      	ands	r3, r2
 8004738:	2204      	movs	r2, #4
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004740:	46c0      	nop			@ (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b002      	add	sp, #8
 8004746:	bd80      	pop	{r7, pc}
 8004748:	7fffffe8 	.word	0x7fffffe8

0800474c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a04      	ldr	r2, [pc, #16]	@ (800476c <LL_ADC_REG_StopConversion+0x20>)
 800475a:	4013      	ands	r3, r2
 800475c:	2210      	movs	r2, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b002      	add	sp, #8
 800476a:	bd80      	pop	{r7, pc}
 800476c:	7fffffe8 	.word	0x7fffffe8

08004770 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2204      	movs	r2, #4
 800477e:	4013      	ands	r3, r2
 8004780:	2b04      	cmp	r3, #4
 8004782:	d101      	bne.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479c:	231f      	movs	r3, #31
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e17f      	b.n	8004aba <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff f9bf 	bl	8003b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2254      	movs	r2, #84	@ 0x54
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0018      	movs	r0, r3
 80047de:	f7ff ff49 	bl	8004674 <LL_ADC_IsInternalRegulatorEnabled>
 80047e2:	1e03      	subs	r3, r0, #0
 80047e4:	d115      	bne.n	8004812 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	0018      	movs	r0, r3
 80047ec:	f7ff ff2e 	bl	800464c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f0:	4bb4      	ldr	r3, [pc, #720]	@ (8004ac4 <HAL_ADC_Init+0x330>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	49b4      	ldr	r1, [pc, #720]	@ (8004ac8 <HAL_ADC_Init+0x334>)
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7fb fc9e 	bl	8000138 <__udivsi3>
 80047fc:	0003      	movs	r3, r0
 80047fe:	3301      	adds	r3, #1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004804:	e002      	b.n	800480c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b01      	subs	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f9      	bne.n	8004806 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff ff2c 	bl	8004674 <LL_ADC_IsInternalRegulatorEnabled>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d10f      	bne.n	8004840 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004824:	2210      	movs	r2, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	2201      	movs	r2, #1
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004838:	231f      	movs	r3, #31
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff ff93 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 800484a:	0003      	movs	r3, r0
 800484c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	2210      	movs	r2, #16
 8004854:	4013      	ands	r3, r2
 8004856:	d000      	beq.n	800485a <HAL_ADC_Init+0xc6>
 8004858:	e122      	b.n	8004aa0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d000      	beq.n	8004862 <HAL_ADC_Init+0xce>
 8004860:	e11e      	b.n	8004aa0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	4a99      	ldr	r2, [pc, #612]	@ (8004acc <HAL_ADC_Init+0x338>)
 8004868:	4013      	ands	r3, r2
 800486a:	2202      	movs	r2, #2
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0018      	movs	r0, r3
 8004878:	f7ff ff34 	bl	80046e4 <LL_ADC_IsEnabled>
 800487c:	1e03      	subs	r3, r0, #0
 800487e:	d000      	beq.n	8004882 <HAL_ADC_Init+0xee>
 8004880:	e0ad      	b.n	80049de <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7e1b      	ldrb	r3, [r3, #24]
 800488a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800488c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	7e5b      	ldrb	r3, [r3, #25]
 8004892:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004894:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7e9b      	ldrb	r3, [r3, #26]
 800489a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800489c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_ADC_Init+0x118>
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	015b      	lsls	r3, r3, #5
 80048aa:	e000      	b.n	80048ae <HAL_ADC_Init+0x11a>
 80048ac:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80048ae:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80048b4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da04      	bge.n	80048c8 <HAL_ADC_Init+0x134>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	e001      	b.n	80048cc <HAL_ADC_Init+0x138>
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80048cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	212c      	movs	r1, #44	@ 0x2c
 80048d2:	5c5b      	ldrb	r3, [r3, r1]
 80048d4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80048d6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	5c9b      	ldrb	r3, [r3, r2]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d115      	bne.n	8004914 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7e9b      	ldrb	r3, [r3, #26]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2280      	movs	r2, #128	@ 0x80
 80048f4:	0252      	lsls	r2, r2, #9
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e00b      	b.n	8004914 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004900:	2220      	movs	r2, #32
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	2201      	movs	r2, #1
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004920:	23e0      	movs	r3, #224	@ 0xe0
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800492a:	4313      	orrs	r3, r2
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a65      	ldr	r2, [pc, #404]	@ (8004ad0 <HAL_ADC_Init+0x33c>)
 800493a:	4013      	ands	r3, r2
 800493c:	0019      	movs	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	430a      	orrs	r2, r1
 8004946:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0f9b      	lsrs	r3, r3, #30
 800494e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004954:	4313      	orrs	r3, r2
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	223c      	movs	r2, #60	@ 0x3c
 8004960:	5c9b      	ldrb	r3, [r3, r2]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d111      	bne.n	800498a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	0f9b      	lsrs	r3, r3, #30
 800496c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004972:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8004978:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800497e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	2201      	movs	r2, #1
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	4a50      	ldr	r2, [pc, #320]	@ (8004ad4 <HAL_ADC_Init+0x340>)
 8004992:	4013      	ands	r3, r2
 8004994:	0019      	movs	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	430a      	orrs	r2, r1
 800499e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	23c0      	movs	r3, #192	@ 0xc0
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d018      	beq.n	80049de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	05db      	lsls	r3, r3, #23
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d012      	beq.n	80049de <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d00c      	beq.n	80049de <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80049c4:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <HAL_ADC_Init+0x344>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a44      	ldr	r2, [pc, #272]	@ (8004adc <HAL_ADC_Init+0x348>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	0019      	movs	r1, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	23f0      	movs	r3, #240	@ 0xf0
 80049d4:	039b      	lsls	r3, r3, #14
 80049d6:	401a      	ands	r2, r3
 80049d8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad8 <HAL_ADC_Init+0x344>)
 80049da:	430a      	orrs	r2, r1
 80049dc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e6:	001a      	movs	r2, r3
 80049e8:	2100      	movs	r1, #0
 80049ea:	f7ff fd7e 	bl	80044ea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	493a      	ldr	r1, [pc, #232]	@ (8004ae0 <HAL_ADC_Init+0x34c>)
 80049f8:	001a      	movs	r2, r3
 80049fa:	f7ff fd76 	bl	80044ea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2110      	movs	r1, #16
 8004a12:	4249      	negs	r1, r1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a18:	e018      	b.n	8004a4c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	039b      	lsls	r3, r3, #14
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d112      	bne.n	8004a4c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	221c      	movs	r2, #28
 8004a36:	4013      	ands	r3, r2
 8004a38:	2210      	movs	r2, #16
 8004a3a:	4252      	negs	r2, r2
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	0011      	movs	r1, r2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2100      	movs	r1, #0
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7ff fd66 	bl	8004524 <LL_ADC_GetSamplingTimeCommonChannels>
 8004a58:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d10b      	bne.n	8004a7a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	4393      	bics	r3, r2
 8004a70:	2201      	movs	r2, #1
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a78:	e01c      	b.n	8004ab4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	2212      	movs	r2, #18
 8004a80:	4393      	bics	r3, r2
 8004a82:	2210      	movs	r2, #16
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004a96:	231f      	movs	r3, #31
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004a9e:	e009      	b.n	8004ab4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004aac:	231f      	movs	r3, #31
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004ab4:	231f      	movs	r3, #31
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b008      	add	sp, #32
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	00030d40 	.word	0x00030d40
 8004acc:	fffffefd 	.word	0xfffffefd
 8004ad0:	ffde0201 	.word	0xffde0201
 8004ad4:	1ffffc02 	.word	0x1ffffc02
 8004ad8:	40012708 	.word	0x40012708
 8004adc:	ffc3ffff 	.word	0xffc3ffff
 8004ae0:	07ffff04 	.word	0x07ffff04

08004ae4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b5b0      	push	{r4, r5, r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff fe3d 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d135      	bne.n	8004b66 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2254      	movs	r2, #84	@ 0x54
 8004afe:	5c9b      	ldrb	r3, [r3, r2]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_ADC_Start+0x24>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e035      	b.n	8004b74 <HAL_ADC_Start+0x90>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2254      	movs	r2, #84	@ 0x54
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b10:	250f      	movs	r5, #15
 8004b12:	197c      	adds	r4, r7, r5
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 fc58 	bl	80053cc <ADC_Enable>
 8004b1c:	0003      	movs	r3, r0
 8004b1e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b20:	197b      	adds	r3, r7, r5
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d119      	bne.n	8004b5c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <HAL_ADC_Start+0x98>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2280      	movs	r2, #128	@ 0x80
 8004b32:	0052      	lsls	r2, r2, #1
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	221c      	movs	r2, #28
 8004b46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2254      	movs	r2, #84	@ 0x54
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff fde7 	bl	8004728 <LL_ADC_REG_StartConversion>
 8004b5a:	e008      	b.n	8004b6e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2254      	movs	r2, #84	@ 0x54
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]
 8004b64:	e003      	b.n	8004b6e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b66:	230f      	movs	r3, #15
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004b6e:	230f      	movs	r3, #15
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	781b      	ldrb	r3, [r3, #0]
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b004      	add	sp, #16
 8004b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b7c:	fffff0fe 	.word	0xfffff0fe

08004b80 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004b80:	b5b0      	push	{r4, r5, r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2254      	movs	r2, #84	@ 0x54
 8004b8c:	5c9b      	ldrb	r3, [r3, r2]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_Stop+0x16>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e029      	b.n	8004bea <HAL_ADC_Stop+0x6a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2254      	movs	r2, #84	@ 0x54
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004b9e:	250f      	movs	r5, #15
 8004ba0:	197c      	adds	r4, r7, r5
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 fbcf 	bl	8005348 <ADC_ConversionStop>
 8004baa:	0003      	movs	r3, r0
 8004bac:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004bae:	197b      	adds	r3, r7, r5
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d112      	bne.n	8004bdc <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004bb6:	197c      	adds	r4, r7, r5
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fc8c 	bl	80054d8 <ADC_Disable>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004bc4:	197b      	adds	r3, r7, r5
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <HAL_ADC_Stop+0x74>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2254      	movs	r2, #84	@ 0x54
 8004be0:	2100      	movs	r1, #0
 8004be2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	781b      	ldrb	r3, [r3, #0]
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	fffffefe 	.word	0xfffffefe

08004bf8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d102      	bne.n	8004c10 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e00f      	b.n	8004c30 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	4013      	ands	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	2220      	movs	r2, #32
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e072      	b.n	8004d12 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004c30:	f7ff fbf6 	bl	8004420 <HAL_GetTick>
 8004c34:	0003      	movs	r3, r0
 8004c36:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004c38:	e01f      	b.n	8004c7a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	d01c      	beq.n	8004c7a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004c40:	f7ff fbee 	bl	8004420 <HAL_GetTick>
 8004c44:	0002      	movs	r2, r0
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <HAL_ADC_PollForConversion+0x5e>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d111      	bne.n	8004c7a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d10b      	bne.n	8004c7a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c66:	2204      	movs	r2, #4
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2254      	movs	r2, #84	@ 0x54
 8004c72:	2100      	movs	r1, #0
 8004c74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e04b      	b.n	8004d12 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	d0d9      	beq.n	8004c3a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	2280      	movs	r2, #128	@ 0x80
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff fc5a 	bl	8004552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d02e      	beq.n	8004d00 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7e9b      	ldrb	r3, [r3, #26]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d12a      	bne.n	8004d00 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d123      	bne.n	8004d00 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7ff fd57 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d110      	bne.n	8004ce8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	210c      	movs	r1, #12
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cda:	4a10      	ldr	r2, [pc, #64]	@ (8004d1c <HAL_ADC_PollForConversion+0x124>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2201      	movs	r2, #1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ce6:	e00b      	b.n	8004d00 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cec:	2220      	movs	r2, #32
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7e1b      	ldrb	r3, [r3, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b004      	add	sp, #16
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			@ (mov r8, r8)
 8004d1c:	fffffefe 	.word	0xfffffefe

08004d20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b002      	add	sp, #8
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2202      	movs	r2, #2
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d017      	beq.n	8004d8c <HAL_ADC_IRQHandler+0x54>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4013      	ands	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d106      	bne.n	8004d7c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	0112      	lsls	r2, r2, #4
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fc18 	bl	80055b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	4013      	ands	r3, r2
 8004d92:	d003      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x64>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2204      	movs	r2, #4
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2208      	movs	r2, #8
 8004da0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004da2:	d04d      	beq.n	8004e40 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2208      	movs	r2, #8
 8004da8:	4013      	ands	r3, r2
 8004daa:	d049      	beq.n	8004e40 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	2210      	movs	r2, #16
 8004db2:	4013      	ands	r3, r2
 8004db4:	d106      	bne.n	8004dc4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	0092      	lsls	r2, r2, #2
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff fbc2 	bl	8004552 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d02e      	beq.n	8004e30 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7e9b      	ldrb	r3, [r3, #26]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d12a      	bne.n	8004e30 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2208      	movs	r2, #8
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d123      	bne.n	8004e30 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fcbf 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d110      	bne.n	8004e18 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	210c      	movs	r1, #12
 8004e02:	438a      	bics	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	4a56      	ldr	r2, [pc, #344]	@ (8004f64 <HAL_ADC_IRQHandler+0x22c>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2201      	movs	r2, #1
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e16:	e00b      	b.n	8004e30 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f898 	bl	8004f68 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	220c      	movs	r2, #12
 8004e3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2280      	movs	r2, #128	@ 0x80
 8004e44:	4013      	ands	r3, r2
 8004e46:	d012      	beq.n	8004e6e <HAL_ADC_IRQHandler+0x136>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2280      	movs	r2, #128	@ 0x80
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e54:	2280      	movs	r2, #128	@ 0x80
 8004e56:	0252      	lsls	r2, r2, #9
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f000 f889 	bl	8004f78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2280      	movs	r2, #128	@ 0x80
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4013      	ands	r3, r2
 8004e76:	d014      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x16a>
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e86:	2280      	movs	r2, #128	@ 0x80
 8004e88:	0292      	lsls	r2, r2, #10
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f000 fb7e 	bl	8005594 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2280      	movs	r2, #128	@ 0x80
 8004e9e:	0052      	lsls	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	2380      	movs	r3, #128	@ 0x80
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d014      	beq.n	8004ed6 <HAL_ADC_IRQHandler+0x19e>
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	2380      	movs	r3, #128	@ 0x80
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eba:	2280      	movs	r2, #128	@ 0x80
 8004ebc:	02d2      	lsls	r2, r2, #11
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 fb6c 	bl	80055a4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2280      	movs	r2, #128	@ 0x80
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	4013      	ands	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x1fe>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d027      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e008      	b.n	8004f06 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff fb7e 	bl	80045fa <LL_ADC_REG_GetDMATransfer>
 8004efe:	1e03      	subs	r3, r0, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d110      	bne.n	8004f2e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	00d2      	lsls	r2, r2, #3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1e:	2202      	movs	r2, #2
 8004f20:	431a      	orrs	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 f82d 	bl	8004f88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2210      	movs	r2, #16
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	019b      	lsls	r3, r3, #6
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d00d      	beq.n	8004f5c <HAL_ADC_IRQHandler+0x224>
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	2380      	movs	r3, #128	@ 0x80
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	4013      	ands	r3, r2
 8004f48:	d008      	beq.n	8004f5c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 fb39 	bl	80055c4 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2280      	movs	r2, #128	@ 0x80
 8004f58:	0192      	lsls	r2, r2, #6
 8004f5a:	601a      	str	r2, [r3, #0]
  }
}
 8004f5c:	46c0      	nop			@ (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b006      	add	sp, #24
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fffffefe 	.word	0xfffffefe

08004f68 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f70:	46c0      	nop			@ (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f90:	46c0      	nop			@ (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa2:	2317      	movs	r3, #23
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2254      	movs	r2, #84	@ 0x54
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x24>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e1c0      	b.n	800533e <HAL_ADC_ConfigChannel+0x3a6>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2254      	movs	r2, #84	@ 0x54
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f7ff fbd1 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d000      	beq.n	8004fd4 <HAL_ADC_ConfigChannel+0x3c>
 8004fd2:	e1a3      	b.n	800531c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d100      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x46>
 8004fdc:	e143      	b.n	8005266 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	2380      	movs	r3, #128	@ 0x80
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d004      	beq.n	8004ff4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004fee:	4ac1      	ldr	r2, [pc, #772]	@ (80052f4 <HAL_ADC_ConfigChannel+0x35c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0019      	movs	r1, r3
 8004ffe:	0010      	movs	r0, r2
 8005000:	f7ff fad8 	bl	80045b4 <LL_ADC_REG_SetSequencerChAdd>
 8005004:	e0c9      	b.n	800519a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	211f      	movs	r1, #31
 8005010:	400b      	ands	r3, r1
 8005012:	210f      	movs	r1, #15
 8005014:	4099      	lsls	r1, r3
 8005016:	000b      	movs	r3, r1
 8005018:	43db      	mvns	r3, r3
 800501a:	4013      	ands	r3, r2
 800501c:	0019      	movs	r1, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	035b      	lsls	r3, r3, #13
 8005024:	0b5b      	lsrs	r3, r3, #13
 8005026:	d105      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x9c>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	0e9b      	lsrs	r3, r3, #26
 800502e:	221f      	movs	r2, #31
 8005030:	4013      	ands	r3, r2
 8005032:	e098      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2201      	movs	r2, #1
 800503a:	4013      	ands	r3, r2
 800503c:	d000      	beq.n	8005040 <HAL_ADC_ConfigChannel+0xa8>
 800503e:	e091      	b.n	8005164 <HAL_ADC_ConfigChannel+0x1cc>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2202      	movs	r2, #2
 8005046:	4013      	ands	r3, r2
 8005048:	d000      	beq.n	800504c <HAL_ADC_ConfigChannel+0xb4>
 800504a:	e089      	b.n	8005160 <HAL_ADC_ConfigChannel+0x1c8>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2204      	movs	r2, #4
 8005052:	4013      	ands	r3, r2
 8005054:	d000      	beq.n	8005058 <HAL_ADC_ConfigChannel+0xc0>
 8005056:	e081      	b.n	800515c <HAL_ADC_ConfigChannel+0x1c4>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	4013      	ands	r3, r2
 8005060:	d000      	beq.n	8005064 <HAL_ADC_ConfigChannel+0xcc>
 8005062:	e079      	b.n	8005158 <HAL_ADC_ConfigChannel+0x1c0>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2210      	movs	r2, #16
 800506a:	4013      	ands	r3, r2
 800506c:	d000      	beq.n	8005070 <HAL_ADC_ConfigChannel+0xd8>
 800506e:	e071      	b.n	8005154 <HAL_ADC_ConfigChannel+0x1bc>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2220      	movs	r2, #32
 8005076:	4013      	ands	r3, r2
 8005078:	d000      	beq.n	800507c <HAL_ADC_ConfigChannel+0xe4>
 800507a:	e069      	b.n	8005150 <HAL_ADC_ConfigChannel+0x1b8>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2240      	movs	r2, #64	@ 0x40
 8005082:	4013      	ands	r3, r2
 8005084:	d000      	beq.n	8005088 <HAL_ADC_ConfigChannel+0xf0>
 8005086:	e061      	b.n	800514c <HAL_ADC_ConfigChannel+0x1b4>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	4013      	ands	r3, r2
 8005090:	d000      	beq.n	8005094 <HAL_ADC_ConfigChannel+0xfc>
 8005092:	e059      	b.n	8005148 <HAL_ADC_ConfigChannel+0x1b0>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	4013      	ands	r3, r2
 800509e:	d151      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x1ac>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	d149      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x1a8>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	2380      	movs	r3, #128	@ 0x80
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4013      	ands	r3, r2
 80050b6:	d141      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1a4>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	4013      	ands	r3, r2
 80050c2:	d139      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x1a0>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	015b      	lsls	r3, r3, #5
 80050cc:	4013      	ands	r3, r2
 80050ce:	d131      	bne.n	8005134 <HAL_ADC_ConfigChannel+0x19c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	019b      	lsls	r3, r3, #6
 80050d8:	4013      	ands	r3, r2
 80050da:	d129      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x198>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	01db      	lsls	r3, r3, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	d121      	bne.n	800512c <HAL_ADC_ConfigChannel+0x194>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	4013      	ands	r3, r2
 80050f2:	d119      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x190>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	025b      	lsls	r3, r3, #9
 80050fc:	4013      	ands	r3, r2
 80050fe:	d111      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x18c>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	029b      	lsls	r3, r3, #10
 8005108:	4013      	ands	r3, r2
 800510a:	d109      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x188>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	02db      	lsls	r3, r3, #11
 8005114:	4013      	ands	r3, r2
 8005116:	d001      	beq.n	800511c <HAL_ADC_ConfigChannel+0x184>
 8005118:	2312      	movs	r3, #18
 800511a:	e024      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 800511c:	2300      	movs	r3, #0
 800511e:	e022      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005120:	2311      	movs	r3, #17
 8005122:	e020      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005124:	2310      	movs	r3, #16
 8005126:	e01e      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005128:	230f      	movs	r3, #15
 800512a:	e01c      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 800512c:	230e      	movs	r3, #14
 800512e:	e01a      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005130:	230d      	movs	r3, #13
 8005132:	e018      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005134:	230c      	movs	r3, #12
 8005136:	e016      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005138:	230b      	movs	r3, #11
 800513a:	e014      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 800513c:	230a      	movs	r3, #10
 800513e:	e012      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005140:	2309      	movs	r3, #9
 8005142:	e010      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005144:	2308      	movs	r3, #8
 8005146:	e00e      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005148:	2307      	movs	r3, #7
 800514a:	e00c      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 800514c:	2306      	movs	r3, #6
 800514e:	e00a      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005150:	2305      	movs	r3, #5
 8005152:	e008      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005154:	2304      	movs	r3, #4
 8005156:	e006      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005158:	2303      	movs	r3, #3
 800515a:	e004      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 800515c:	2302      	movs	r3, #2
 800515e:	e002      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_ADC_ConfigChannel+0x1ce>
 8005164:	2300      	movs	r3, #0
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	6852      	ldr	r2, [r2, #4]
 800516a:	201f      	movs	r0, #31
 800516c:	4002      	ands	r2, r0
 800516e:	4093      	lsls	r3, r2
 8005170:	000a      	movs	r2, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d808      	bhi.n	800519a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	001a      	movs	r2, r3
 8005196:	f7ff f9ed 	bl	8004574 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	001a      	movs	r2, r3
 80051a8:	f7ff fa34 	bl	8004614 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db00      	blt.n	80051b6 <HAL_ADC_ConfigChannel+0x21e>
 80051b4:	e0bc      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051b6:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7ff f989 	bl	80044d0 <LL_ADC_GetCommonPathInternalCh>
 80051be:	0003      	movs	r3, r0
 80051c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a4d      	ldr	r2, [pc, #308]	@ (80052fc <HAL_ADC_ConfigChannel+0x364>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d122      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	2380      	movs	r3, #128	@ 0x80
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80051d4:	d11d      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2280      	movs	r2, #128	@ 0x80
 80051da:	0412      	lsls	r2, r2, #16
 80051dc:	4313      	orrs	r3, r2
 80051de:	4a46      	ldr	r2, [pc, #280]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	0010      	movs	r0, r2
 80051e4:	f7ff f960 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051e8:	4b45      	ldr	r3, [pc, #276]	@ (8005300 <HAL_ADC_ConfigChannel+0x368>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4945      	ldr	r1, [pc, #276]	@ (8005304 <HAL_ADC_ConfigChannel+0x36c>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7fa ffa2 	bl	8000138 <__udivsi3>
 80051f4:	0003      	movs	r3, r0
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	0013      	movs	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	189b      	adds	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005202:	e002      	b.n	800520a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f9      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005210:	e08e      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a3c      	ldr	r2, [pc, #240]	@ (8005308 <HAL_ADC_ConfigChannel+0x370>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d10e      	bne.n	800523a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	2380      	movs	r3, #128	@ 0x80
 8005220:	045b      	lsls	r3, r3, #17
 8005222:	4013      	ands	r3, r2
 8005224:	d109      	bne.n	800523a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2280      	movs	r2, #128	@ 0x80
 800522a:	0452      	lsls	r2, r2, #17
 800522c:	4313      	orrs	r3, r2
 800522e:	4a32      	ldr	r2, [pc, #200]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 8005230:	0019      	movs	r1, r3
 8005232:	0010      	movs	r0, r2
 8005234:	f7ff f938 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
 8005238:	e07a      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a33      	ldr	r2, [pc, #204]	@ (800530c <HAL_ADC_ConfigChannel+0x374>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d000      	beq.n	8005246 <HAL_ADC_ConfigChannel+0x2ae>
 8005244:	e074      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	03db      	lsls	r3, r3, #15
 800524c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800524e:	d000      	beq.n	8005252 <HAL_ADC_ConfigChannel+0x2ba>
 8005250:	e06e      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	03d2      	lsls	r2, r2, #15
 8005258:	4313      	orrs	r3, r2
 800525a:	4a27      	ldr	r2, [pc, #156]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 800525c:	0019      	movs	r1, r3
 800525e:	0010      	movs	r0, r2
 8005260:	f7ff f922 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
 8005264:	e064      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	2380      	movs	r3, #128	@ 0x80
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	429a      	cmp	r2, r3
 8005270:	d004      	beq.n	800527c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005276:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <HAL_ADC_ConfigChannel+0x35c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d107      	bne.n	800528c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	0019      	movs	r1, r3
 8005286:	0010      	movs	r0, r2
 8005288:	f7ff f9a5 	bl	80045d6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da4d      	bge.n	8005330 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005294:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 8005296:	0018      	movs	r0, r3
 8005298:	f7ff f91a 	bl	80044d0 <LL_ADC_GetCommonPathInternalCh>
 800529c:	0003      	movs	r3, r0
 800529e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <HAL_ADC_ConfigChannel+0x364>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <HAL_ADC_ConfigChannel+0x378>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	4a11      	ldr	r2, [pc, #68]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 80052b2:	0019      	movs	r1, r3
 80052b4:	0010      	movs	r0, r2
 80052b6:	f7ff f8f7 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
 80052ba:	e039      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a11      	ldr	r2, [pc, #68]	@ (8005308 <HAL_ADC_ConfigChannel+0x370>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <HAL_ADC_ConfigChannel+0x37c>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 80052ce:	0019      	movs	r1, r3
 80052d0:	0010      	movs	r0, r2
 80052d2:	f7ff f8e9 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
 80052d6:	e02b      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <HAL_ADC_ConfigChannel+0x374>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d126      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005318 <HAL_ADC_ConfigChannel+0x380>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	4a03      	ldr	r2, [pc, #12]	@ (80052f8 <HAL_ADC_ConfigChannel+0x360>)
 80052ea:	0019      	movs	r1, r3
 80052ec:	0010      	movs	r0, r2
 80052ee:	f7ff f8db 	bl	80044a8 <LL_ADC_SetCommonPathInternalCh>
 80052f2:	e01d      	b.n	8005330 <HAL_ADC_ConfigChannel+0x398>
 80052f4:	80000004 	.word	0x80000004
 80052f8:	40012708 	.word	0x40012708
 80052fc:	b0001000 	.word	0xb0001000
 8005300:	20000000 	.word	0x20000000
 8005304:	00030d40 	.word	0x00030d40
 8005308:	b8004000 	.word	0xb8004000
 800530c:	b4002000 	.word	0xb4002000
 8005310:	ff7fffff 	.word	0xff7fffff
 8005314:	feffffff 	.word	0xfeffffff
 8005318:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005320:	2220      	movs	r2, #32
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005328:	2317      	movs	r3, #23
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2254      	movs	r2, #84	@ 0x54
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8005338:	2317      	movs	r3, #23
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	781b      	ldrb	r3, [r3, #0]
}
 800533e:	0018      	movs	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	b006      	add	sp, #24
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			@ (mov r8, r8)

08005348 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	0018      	movs	r0, r3
 8005356:	f7ff fa0b 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 800535a:	1e03      	subs	r3, r0, #0
 800535c:	d031      	beq.n	80053c2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff f9cf 	bl	8004706 <LL_ADC_IsDisableOngoing>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d104      	bne.n	8005376 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0018      	movs	r0, r3
 8005372:	f7ff f9eb 	bl	800474c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005376:	f7ff f853 	bl	8004420 <HAL_GetTick>
 800537a:	0003      	movs	r3, r0
 800537c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800537e:	e01a      	b.n	80053b6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005380:	f7ff f84e 	bl	8004420 <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d913      	bls.n	80053b6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2204      	movs	r2, #4
 8005396:	4013      	ands	r3, r2
 8005398:	d00d      	beq.n	80053b6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	2210      	movs	r2, #16
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053aa:	2201      	movs	r2, #1
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e006      	b.n	80053c4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2204      	movs	r2, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	d1de      	bne.n	8005380 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b004      	add	sp, #16
 80053ca:	bd80      	pop	{r7, pc}

080053cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	0018      	movs	r0, r3
 80053de:	f7ff f981 	bl	80046e4 <LL_ADC_IsEnabled>
 80053e2:	1e03      	subs	r3, r0, #0
 80053e4:	d000      	beq.n	80053e8 <ADC_Enable+0x1c>
 80053e6:	e069      	b.n	80054bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4a36      	ldr	r2, [pc, #216]	@ (80054c8 <ADC_Enable+0xfc>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	d00d      	beq.n	8005410 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f8:	2210      	movs	r2, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005404:	2201      	movs	r2, #1
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e056      	b.n	80054be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	0018      	movs	r0, r3
 8005416:	f7ff f941 	bl	800469c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800541a:	4b2c      	ldr	r3, [pc, #176]	@ (80054cc <ADC_Enable+0x100>)
 800541c:	0018      	movs	r0, r3
 800541e:	f7ff f857 	bl	80044d0 <LL_ADC_GetCommonPathInternalCh>
 8005422:	0002      	movs	r2, r0
 8005424:	2380      	movs	r3, #128	@ 0x80
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	4013      	ands	r3, r2
 800542a:	d00f      	beq.n	800544c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800542c:	4b28      	ldr	r3, [pc, #160]	@ (80054d0 <ADC_Enable+0x104>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4928      	ldr	r1, [pc, #160]	@ (80054d4 <ADC_Enable+0x108>)
 8005432:	0018      	movs	r0, r3
 8005434:	f7fa fe80 	bl	8000138 <__udivsi3>
 8005438:	0003      	movs	r3, r0
 800543a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800543c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800543e:	e002      	b.n	8005446 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f9      	bne.n	8005440 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	7e5b      	ldrb	r3, [r3, #25]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d033      	beq.n	80054bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005454:	f7fe ffe4 	bl	8004420 <HAL_GetTick>
 8005458:	0003      	movs	r3, r0
 800545a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800545c:	e027      	b.n	80054ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	0018      	movs	r0, r3
 8005464:	f7ff f93e 	bl	80046e4 <LL_ADC_IsEnabled>
 8005468:	1e03      	subs	r3, r0, #0
 800546a:	d104      	bne.n	8005476 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	0018      	movs	r0, r3
 8005472:	f7ff f913 	bl	800469c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005476:	f7fe ffd3 	bl	8004420 <HAL_GetTick>
 800547a:	0002      	movs	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d914      	bls.n	80054ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	4013      	ands	r3, r2
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00d      	beq.n	80054ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	2210      	movs	r2, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a2:	2201      	movs	r2, #1
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e007      	b.n	80054be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d1d0      	bne.n	800545e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	0018      	movs	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	80000017 	.word	0x80000017
 80054cc:	40012708 	.word	0x40012708
 80054d0:	20000000 	.word	0x20000000
 80054d4:	00030d40 	.word	0x00030d40

080054d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7ff f90e 	bl	8004706 <LL_ADC_IsDisableOngoing>
 80054ea:	0003      	movs	r3, r0
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	0018      	movs	r0, r3
 80054f4:	f7ff f8f6 	bl	80046e4 <LL_ADC_IsEnabled>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d046      	beq.n	800558a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d143      	bne.n	800558a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2205      	movs	r2, #5
 800550a:	4013      	ands	r3, r2
 800550c:	2b01      	cmp	r3, #1
 800550e:	d10d      	bne.n	800552c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff f8d3 	bl	80046c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2203      	movs	r2, #3
 8005520:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005522:	f7fe ff7d 	bl	8004420 <HAL_GetTick>
 8005526:	0003      	movs	r3, r0
 8005528:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800552a:	e028      	b.n	800557e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	2210      	movs	r2, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553c:	2201      	movs	r2, #1
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e021      	b.n	800558c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005548:	f7fe ff6a 	bl	8004420 <HAL_GetTick>
 800554c:	0002      	movs	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d913      	bls.n	800557e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2201      	movs	r2, #1
 800555e:	4013      	ands	r3, r2
 8005560:	d00d      	beq.n	800557e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	2210      	movs	r2, #16
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005572:	2201      	movs	r2, #1
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e006      	b.n	800558c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2201      	movs	r2, #1
 8005586:	4013      	ands	r3, r2
 8005588:	d1de      	bne.n	8005548 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	0018      	movs	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800559c:	46c0      	nop			@ (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	0002      	movs	r2, r0
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e6:	d809      	bhi.n	80055fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e8:	1dfb      	adds	r3, r7, #7
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	001a      	movs	r2, r3
 80055ee:	231f      	movs	r3, #31
 80055f0:	401a      	ands	r2, r3
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__NVIC_EnableIRQ+0x30>)
 80055f4:	2101      	movs	r1, #1
 80055f6:	4091      	lsls	r1, r2
 80055f8:	000a      	movs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80055fc:	46c0      	nop			@ (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bd80      	pop	{r7, pc}
 8005604:	e000e100 	.word	0xe000e100

08005608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	0002      	movs	r2, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	1dfb      	adds	r3, r7, #7
 8005614:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005616:	1dfb      	adds	r3, r7, #7
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b7f      	cmp	r3, #127	@ 0x7f
 800561c:	d828      	bhi.n	8005670 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800561e:	4a2f      	ldr	r2, [pc, #188]	@ (80056dc <__NVIC_SetPriority+0xd4>)
 8005620:	1dfb      	adds	r3, r7, #7
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	b25b      	sxtb	r3, r3
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	33c0      	adds	r3, #192	@ 0xc0
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	589b      	ldr	r3, [r3, r2]
 800562e:	1dfa      	adds	r2, r7, #7
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	0011      	movs	r1, r2
 8005634:	2203      	movs	r2, #3
 8005636:	400a      	ands	r2, r1
 8005638:	00d2      	lsls	r2, r2, #3
 800563a:	21ff      	movs	r1, #255	@ 0xff
 800563c:	4091      	lsls	r1, r2
 800563e:	000a      	movs	r2, r1
 8005640:	43d2      	mvns	r2, r2
 8005642:	401a      	ands	r2, r3
 8005644:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	401a      	ands	r2, r3
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	0018      	movs	r0, r3
 8005654:	2303      	movs	r3, #3
 8005656:	4003      	ands	r3, r0
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800565c:	481f      	ldr	r0, [pc, #124]	@ (80056dc <__NVIC_SetPriority+0xd4>)
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b25b      	sxtb	r3, r3
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	430a      	orrs	r2, r1
 8005668:	33c0      	adds	r3, #192	@ 0xc0
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800566e:	e031      	b.n	80056d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005670:	4a1b      	ldr	r2, [pc, #108]	@ (80056e0 <__NVIC_SetPriority+0xd8>)
 8005672:	1dfb      	adds	r3, r7, #7
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	0019      	movs	r1, r3
 8005678:	230f      	movs	r3, #15
 800567a:	400b      	ands	r3, r1
 800567c:	3b08      	subs	r3, #8
 800567e:	089b      	lsrs	r3, r3, #2
 8005680:	3306      	adds	r3, #6
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	3304      	adds	r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1dfa      	adds	r2, r7, #7
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	0011      	movs	r1, r2
 8005690:	2203      	movs	r2, #3
 8005692:	400a      	ands	r2, r1
 8005694:	00d2      	lsls	r2, r2, #3
 8005696:	21ff      	movs	r1, #255	@ 0xff
 8005698:	4091      	lsls	r1, r2
 800569a:	000a      	movs	r2, r1
 800569c:	43d2      	mvns	r2, r2
 800569e:	401a      	ands	r2, r3
 80056a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	22ff      	movs	r2, #255	@ 0xff
 80056a8:	401a      	ands	r2, r3
 80056aa:	1dfb      	adds	r3, r7, #7
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	0018      	movs	r0, r3
 80056b0:	2303      	movs	r3, #3
 80056b2:	4003      	ands	r3, r0
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056b8:	4809      	ldr	r0, [pc, #36]	@ (80056e0 <__NVIC_SetPriority+0xd8>)
 80056ba:	1dfb      	adds	r3, r7, #7
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	001c      	movs	r4, r3
 80056c0:	230f      	movs	r3, #15
 80056c2:	4023      	ands	r3, r4
 80056c4:	3b08      	subs	r3, #8
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	430a      	orrs	r2, r1
 80056ca:	3306      	adds	r3, #6
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	18c3      	adds	r3, r0, r3
 80056d0:	3304      	adds	r3, #4
 80056d2:	601a      	str	r2, [r3, #0]
}
 80056d4:	46c0      	nop			@ (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b003      	add	sp, #12
 80056da:	bd90      	pop	{r4, r7, pc}
 80056dc:	e000e100 	.word	0xe000e100
 80056e0:	e000ed00 	.word	0xe000ed00

080056e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	045b      	lsls	r3, r3, #17
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d301      	bcc.n	80056fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056f8:	2301      	movs	r3, #1
 80056fa:	e010      	b.n	800571e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <SysTick_Config+0x44>)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	3a01      	subs	r2, #1
 8005702:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005704:	2301      	movs	r3, #1
 8005706:	425b      	negs	r3, r3
 8005708:	2103      	movs	r1, #3
 800570a:	0018      	movs	r0, r3
 800570c:	f7ff ff7c 	bl	8005608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <SysTick_Config+0x44>)
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005716:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <SysTick_Config+0x44>)
 8005718:	2207      	movs	r2, #7
 800571a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800571c:	2300      	movs	r3, #0
}
 800571e:	0018      	movs	r0, r3
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	e000e010 	.word	0xe000e010

0800572c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	210f      	movs	r1, #15
 8005738:	187b      	adds	r3, r7, r1
 800573a:	1c02      	adds	r2, r0, #0
 800573c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	187b      	adds	r3, r7, r1
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b25b      	sxtb	r3, r3
 8005746:	0011      	movs	r1, r2
 8005748:	0018      	movs	r0, r3
 800574a:	f7ff ff5d 	bl	8005608 <__NVIC_SetPriority>
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b004      	add	sp, #16
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	0002      	movs	r2, r0
 800575e:	1dfb      	adds	r3, r7, #7
 8005760:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005762:	1dfb      	adds	r3, r7, #7
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	b25b      	sxtb	r3, r3
 8005768:	0018      	movs	r0, r3
 800576a:	f7ff ff33 	bl	80055d4 <__NVIC_EnableIRQ>
}
 800576e:	46c0      	nop			@ (mov r8, r8)
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff ffaf 	bl	80056e4 <SysTick_Config>
 8005786:	0003      	movs	r3, r0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800579e:	e14d      	b.n	8005a3c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2101      	movs	r1, #1
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4091      	lsls	r1, r2
 80057aa:	000a      	movs	r2, r1
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d100      	bne.n	80057b8 <HAL_GPIO_Init+0x28>
 80057b6:	e13e      	b.n	8005a36 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	4013      	ands	r3, r2
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d005      	beq.n	80057d0 <HAL_GPIO_Init+0x40>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2203      	movs	r2, #3
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d130      	bne.n	8005832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	2203      	movs	r2, #3
 80057dc:	409a      	lsls	r2, r3
 80057de:	0013      	movs	r3, r2
 80057e0:	43da      	mvns	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4013      	ands	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	409a      	lsls	r2, r3
 80057f2:	0013      	movs	r3, r2
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005806:	2201      	movs	r2, #1
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	409a      	lsls	r2, r3
 800580c:	0013      	movs	r3, r2
 800580e:	43da      	mvns	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4013      	ands	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	2201      	movs	r2, #1
 800581e:	401a      	ands	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	409a      	lsls	r2, r3
 8005824:	0013      	movs	r3, r2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2203      	movs	r2, #3
 8005838:	4013      	ands	r3, r2
 800583a:	2b03      	cmp	r3, #3
 800583c:	d017      	beq.n	800586e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2203      	movs	r2, #3
 800584a:	409a      	lsls	r2, r3
 800584c:	0013      	movs	r3, r2
 800584e:	43da      	mvns	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4013      	ands	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	409a      	lsls	r2, r3
 8005860:	0013      	movs	r3, r2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2203      	movs	r2, #3
 8005874:	4013      	ands	r3, r2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d123      	bne.n	80058c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	08da      	lsrs	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3208      	adds	r2, #8
 8005882:	0092      	lsls	r2, r2, #2
 8005884:	58d3      	ldr	r3, [r2, r3]
 8005886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	2207      	movs	r2, #7
 800588c:	4013      	ands	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	220f      	movs	r2, #15
 8005892:	409a      	lsls	r2, r3
 8005894:	0013      	movs	r3, r2
 8005896:	43da      	mvns	r2, r3
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4013      	ands	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2107      	movs	r1, #7
 80058a6:	400b      	ands	r3, r1
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	409a      	lsls	r2, r3
 80058ac:	0013      	movs	r3, r2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	08da      	lsrs	r2, r3, #3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3208      	adds	r2, #8
 80058bc:	0092      	lsls	r2, r2, #2
 80058be:	6939      	ldr	r1, [r7, #16]
 80058c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	2203      	movs	r2, #3
 80058ce:	409a      	lsls	r2, r3
 80058d0:	0013      	movs	r3, r2
 80058d2:	43da      	mvns	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4013      	ands	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2203      	movs	r2, #3
 80058e0:	401a      	ands	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	409a      	lsls	r2, r3
 80058e8:	0013      	movs	r3, r2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	23c0      	movs	r3, #192	@ 0xc0
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	4013      	ands	r3, r2
 8005900:	d100      	bne.n	8005904 <HAL_GPIO_Init+0x174>
 8005902:	e098      	b.n	8005a36 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005904:	4a53      	ldr	r2, [pc, #332]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	3318      	adds	r3, #24
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	589b      	ldr	r3, [r3, r2]
 8005910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2203      	movs	r2, #3
 8005916:	4013      	ands	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	220f      	movs	r2, #15
 800591c:	409a      	lsls	r2, r3
 800591e:	0013      	movs	r3, r2
 8005920:	43da      	mvns	r2, r3
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	23a0      	movs	r3, #160	@ 0xa0
 800592c:	05db      	lsls	r3, r3, #23
 800592e:	429a      	cmp	r2, r3
 8005930:	d019      	beq.n	8005966 <HAL_GPIO_Init+0x1d6>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a48      	ldr	r2, [pc, #288]	@ (8005a58 <HAL_GPIO_Init+0x2c8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_GPIO_Init+0x1d2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a47      	ldr	r2, [pc, #284]	@ (8005a5c <HAL_GPIO_Init+0x2cc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00d      	beq.n	800595e <HAL_GPIO_Init+0x1ce>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a46      	ldr	r2, [pc, #280]	@ (8005a60 <HAL_GPIO_Init+0x2d0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <HAL_GPIO_Init+0x1ca>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a45      	ldr	r2, [pc, #276]	@ (8005a64 <HAL_GPIO_Init+0x2d4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_GPIO_Init+0x1c6>
 8005952:	2304      	movs	r3, #4
 8005954:	e008      	b.n	8005968 <HAL_GPIO_Init+0x1d8>
 8005956:	2305      	movs	r3, #5
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x1d8>
 800595a:	2303      	movs	r3, #3
 800595c:	e004      	b.n	8005968 <HAL_GPIO_Init+0x1d8>
 800595e:	2302      	movs	r3, #2
 8005960:	e002      	b.n	8005968 <HAL_GPIO_Init+0x1d8>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_GPIO_Init+0x1d8>
 8005966:	2300      	movs	r3, #0
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	2103      	movs	r1, #3
 800596c:	400a      	ands	r2, r1
 800596e:	00d2      	lsls	r2, r2, #3
 8005970:	4093      	lsls	r3, r2
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005978:	4936      	ldr	r1, [pc, #216]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3318      	adds	r3, #24
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005986:	4b33      	ldr	r3, [pc, #204]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	43da      	mvns	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	035b      	lsls	r3, r3, #13
 800599e:	4013      	ands	r3, r2
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80059b0:	4b28      	ldr	r3, [pc, #160]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	43da      	mvns	r2, r3
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	2380      	movs	r3, #128	@ 0x80
 80059c6:	039b      	lsls	r3, r3, #14
 80059c8:	4013      	ands	r3, r2
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059da:	4a1e      	ldr	r2, [pc, #120]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 80059dc:	2384      	movs	r3, #132	@ 0x84
 80059de:	58d3      	ldr	r3, [r2, r3]
 80059e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	43da      	mvns	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	4013      	ands	r3, r2
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a00:	4914      	ldr	r1, [pc, #80]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 8005a02:	2284      	movs	r2, #132	@ 0x84
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005a08:	4a12      	ldr	r2, [pc, #72]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 8005a0a:	2380      	movs	r3, #128	@ 0x80
 8005a0c:	58d3      	ldr	r3, [r2, r3]
 8005a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	43da      	mvns	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	2380      	movs	r3, #128	@ 0x80
 8005a20:	025b      	lsls	r3, r3, #9
 8005a22:	4013      	ands	r3, r2
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a2e:	4909      	ldr	r1, [pc, #36]	@ (8005a54 <HAL_GPIO_Init+0x2c4>)
 8005a30:	2280      	movs	r2, #128	@ 0x80
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	40da      	lsrs	r2, r3
 8005a44:	1e13      	subs	r3, r2, #0
 8005a46:	d000      	beq.n	8005a4a <HAL_GPIO_Init+0x2ba>
 8005a48:	e6aa      	b.n	80057a0 <HAL_GPIO_Init+0x10>
  }
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	46c0      	nop			@ (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b006      	add	sp, #24
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40021800 	.word	0x40021800
 8005a58:	50000400 	.word	0x50000400
 8005a5c:	50000800 	.word	0x50000800
 8005a60:	50000c00 	.word	0x50000c00
 8005a64:	50001000 	.word	0x50001000

08005a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	000a      	movs	r2, r1
 8005a72:	1cbb      	adds	r3, r7, #2
 8005a74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	1cba      	adds	r2, r7, #2
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005a82:	230f      	movs	r3, #15
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e003      	b.n	8005a94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a8c:	230f      	movs	r3, #15
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005a94:	230f      	movs	r3, #15
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	781b      	ldrb	r3, [r3, #0]
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	0008      	movs	r0, r1
 8005aac:	0011      	movs	r1, r2
 8005aae:	1cbb      	adds	r3, r7, #2
 8005ab0:	1c02      	adds	r2, r0, #0
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	1c7b      	adds	r3, r7, #1
 8005ab6:	1c0a      	adds	r2, r1, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005aba:	1c7b      	adds	r3, r7, #1
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ac2:	1cbb      	adds	r3, r7, #2
 8005ac4:	881a      	ldrh	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005aca:	e003      	b.n	8005ad4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005acc:	1cbb      	adds	r3, r7, #2
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ad4:	46c0      	nop			@ (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	000a      	movs	r2, r1
 8005ae6:	1cbb      	adds	r3, r7, #2
 8005ae8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005af0:	1cbb      	adds	r3, r7, #2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4013      	ands	r3, r2
 8005af8:	041a      	lsls	r2, r3, #16
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	1cb9      	adds	r1, r7, #2
 8005b00:	8809      	ldrh	r1, [r1, #0]
 8005b02:	400b      	ands	r3, r1
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	619a      	str	r2, [r3, #24]
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	1dbb      	adds	r3, r7, #6
 8005b1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8005b20:	4b10      	ldr	r3, [pc, #64]	@ (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	1dba      	adds	r2, r7, #6
 8005b26:	8812      	ldrh	r2, [r2, #0]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d008      	beq.n	8005b3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b2e:	1dba      	adds	r2, r7, #6
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 f815 	bl	8005b68 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	1dba      	adds	r2, r7, #6
 8005b44:	8812      	ldrh	r2, [r2, #0]
 8005b46:	4013      	ands	r3, r2
 8005b48:	d008      	beq.n	8005b5c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b4c:	1dba      	adds	r2, r7, #6
 8005b4e:	8812      	ldrh	r2, [r2, #0]
 8005b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005b52:	1dbb      	adds	r3, r7, #6
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7fd fe84 	bl	8003864 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005b5c:	46c0      	nop			@ (mov r8, r8)
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b002      	add	sp, #8
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021800 	.word	0x40021800

08005b68 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	0002      	movs	r2, r0
 8005b70:	1dbb      	adds	r3, r7, #6
 8005b72:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e08f      	b.n	8005cae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2241      	movs	r2, #65	@ 0x41
 8005b92:	5c9b      	ldrb	r3, [r3, r2]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d107      	bne.n	8005baa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f7fe f81b 	bl	8003be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2241      	movs	r2, #65	@ 0x41
 8005bae:	2124      	movs	r1, #36	@ 0x24
 8005bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	438a      	bics	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	493b      	ldr	r1, [pc, #236]	@ (8005cb8 <HAL_I2C_Init+0x13c>)
 8005bcc:	400a      	ands	r2, r1
 8005bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4938      	ldr	r1, [pc, #224]	@ (8005cbc <HAL_I2C_Init+0x140>)
 8005bdc:	400a      	ands	r2, r1
 8005bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d108      	bne.n	8005bfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2180      	movs	r1, #128	@ 0x80
 8005bf2:	0209      	lsls	r1, r1, #8
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	e007      	b.n	8005c0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2184      	movs	r1, #132	@ 0x84
 8005c04:	0209      	lsls	r1, r1, #8
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d109      	bne.n	8005c26 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2180      	movs	r1, #128	@ 0x80
 8005c1e:	0109      	lsls	r1, r1, #4
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	e007      	b.n	8005c36 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4923      	ldr	r1, [pc, #140]	@ (8005cc0 <HAL_I2C_Init+0x144>)
 8005c32:	400a      	ands	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4920      	ldr	r1, [pc, #128]	@ (8005cc4 <HAL_I2C_Init+0x148>)
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	491a      	ldr	r1, [pc, #104]	@ (8005cbc <HAL_I2C_Init+0x140>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69d9      	ldr	r1, [r3, #28]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2241      	movs	r2, #65	@ 0x41
 8005c9a:	2120      	movs	r1, #32
 8005c9c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2242      	movs	r2, #66	@ 0x42
 8005ca8:	2100      	movs	r1, #0
 8005caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	0018      	movs	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b002      	add	sp, #8
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	f0ffffff 	.word	0xf0ffffff
 8005cbc:	ffff7fff 	.word	0xffff7fff
 8005cc0:	fffff7ff 	.word	0xfffff7ff
 8005cc4:	02008000 	.word	0x02008000

08005cc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b089      	sub	sp, #36	@ 0x24
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	0008      	movs	r0, r1
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	230a      	movs	r3, #10
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	1c02      	adds	r2, r0, #0
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	2308      	movs	r3, #8
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	1c0a      	adds	r2, r1, #0
 8005ce4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2241      	movs	r2, #65	@ 0x41
 8005cea:	5c9b      	ldrb	r3, [r3, r2]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d000      	beq.n	8005cf4 <HAL_I2C_Master_Transmit+0x2c>
 8005cf2:	e10a      	b.n	8005f0a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	5c9b      	ldrb	r3, [r3, r2]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2C_Master_Transmit+0x3a>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e104      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2240      	movs	r2, #64	@ 0x40
 8005d06:	2101      	movs	r1, #1
 8005d08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fe fb89 	bl	8004420 <HAL_GetTick>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d12:	2380      	movs	r3, #128	@ 0x80
 8005d14:	0219      	lsls	r1, r3, #8
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2319      	movs	r3, #25
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f000 fa26 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005d24:	1e03      	subs	r3, r0, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0ef      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2241      	movs	r2, #65	@ 0x41
 8005d30:	2121      	movs	r1, #33	@ 0x21
 8005d32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2242      	movs	r2, #66	@ 0x42
 8005d38:	2110      	movs	r1, #16
 8005d3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	18ba      	adds	r2, r7, r2
 8005d4e:	8812      	ldrh	r2, [r2, #0]
 8005d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2bff      	cmp	r3, #255	@ 0xff
 8005d60:	d906      	bls.n	8005d70 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	22ff      	movs	r2, #255	@ 0xff
 8005d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	045b      	lsls	r3, r3, #17
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e007      	b.n	8005d80 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	049b      	lsls	r3, r3, #18
 8005d7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d027      	beq.n	8005dd8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	697c      	ldr	r4, [r7, #20]
 8005dc4:	230a      	movs	r3, #10
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	8819      	ldrh	r1, [r3, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	4b51      	ldr	r3, [pc, #324]	@ (8005f14 <HAL_I2C_Master_Transmit+0x24c>)
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	f000 fc45 	bl	8006660 <I2C_TransferConfig>
 8005dd6:	e06f      	b.n	8005eb8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	697c      	ldr	r4, [r7, #20]
 8005de0:	230a      	movs	r3, #10
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	8819      	ldrh	r1, [r3, #0]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f14 <HAL_I2C_Master_Transmit+0x24c>)
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	0023      	movs	r3, r4
 8005dee:	f000 fc37 	bl	8006660 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005df2:	e061      	b.n	8005eb8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 fa10 	bl	8006220 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e081      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d03a      	beq.n	8005eb8 <HAL_I2C_Master_Transmit+0x1f0>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d136      	bne.n	8005eb8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	0013      	movs	r3, r2
 8005e54:	2200      	movs	r2, #0
 8005e56:	2180      	movs	r1, #128	@ 0x80
 8005e58:	f000 f98a 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005e5c:	1e03      	subs	r3, r0, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e053      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2bff      	cmp	r3, #255	@ 0xff
 8005e6c:	d911      	bls.n	8005e92 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	22ff      	movs	r2, #255	@ 0xff
 8005e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	045c      	lsls	r4, r3, #17
 8005e7e:	230a      	movs	r3, #10
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	8819      	ldrh	r1, [r3, #0]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	0023      	movs	r3, r4
 8005e8c:	f000 fbe8 	bl	8006660 <I2C_TransferConfig>
 8005e90:	e012      	b.n	8005eb8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	2380      	movs	r3, #128	@ 0x80
 8005ea4:	049c      	lsls	r4, r3, #18
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	8819      	ldrh	r1, [r3, #0]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	0023      	movs	r3, r4
 8005eb4:	f000 fbd4 	bl	8006660 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d198      	bne.n	8005df4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 f9ef 	bl	80062ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ece:	1e03      	subs	r3, r0, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e01a      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2220      	movs	r2, #32
 8005edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	490b      	ldr	r1, [pc, #44]	@ (8005f18 <HAL_I2C_Master_Transmit+0x250>)
 8005eea:	400a      	ands	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2241      	movs	r2, #65	@ 0x41
 8005ef2:	2120      	movs	r1, #32
 8005ef4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2242      	movs	r2, #66	@ 0x42
 8005efa:	2100      	movs	r1, #0
 8005efc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2240      	movs	r2, #64	@ 0x40
 8005f02:	2100      	movs	r1, #0
 8005f04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b007      	add	sp, #28
 8005f12:	bd90      	pop	{r4, r7, pc}
 8005f14:	80002000 	.word	0x80002000
 8005f18:	fe00e800 	.word	0xfe00e800

08005f1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b590      	push	{r4, r7, lr}
 8005f1e:	b089      	sub	sp, #36	@ 0x24
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	0008      	movs	r0, r1
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	0019      	movs	r1, r3
 8005f2a:	230a      	movs	r3, #10
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	1c02      	adds	r2, r0, #0
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	2308      	movs	r3, #8
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	1c0a      	adds	r2, r1, #0
 8005f38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2241      	movs	r2, #65	@ 0x41
 8005f3e:	5c9b      	ldrb	r3, [r3, r2]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d000      	beq.n	8005f48 <HAL_I2C_Master_Receive+0x2c>
 8005f46:	e0e8      	b.n	800611a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	5c9b      	ldrb	r3, [r3, r2]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_I2C_Master_Receive+0x3a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e0e2      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2240      	movs	r2, #64	@ 0x40
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f5e:	f7fe fa5f 	bl	8004420 <HAL_GetTick>
 8005f62:	0003      	movs	r3, r0
 8005f64:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	0219      	lsls	r1, r3, #8
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2319      	movs	r3, #25
 8005f72:	2201      	movs	r2, #1
 8005f74:	f000 f8fc 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0cd      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2241      	movs	r2, #65	@ 0x41
 8005f84:	2122      	movs	r1, #34	@ 0x22
 8005f86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2242      	movs	r2, #66	@ 0x42
 8005f8c:	2110      	movs	r1, #16
 8005f8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2208      	movs	r2, #8
 8005fa0:	18ba      	adds	r2, r7, r2
 8005fa2:	8812      	ldrh	r2, [r2, #0]
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2bff      	cmp	r3, #255	@ 0xff
 8005fb4:	d911      	bls.n	8005fda <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	22ff      	movs	r2, #255	@ 0xff
 8005fba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	2380      	movs	r3, #128	@ 0x80
 8005fc4:	045c      	lsls	r4, r3, #17
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	8819      	ldrh	r1, [r3, #0]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	4b55      	ldr	r3, [pc, #340]	@ (8006124 <HAL_I2C_Master_Receive+0x208>)
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	0023      	movs	r3, r4
 8005fd4:	f000 fb44 	bl	8006660 <I2C_TransferConfig>
 8005fd8:	e076      	b.n	80060c8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	2380      	movs	r3, #128	@ 0x80
 8005fec:	049c      	lsls	r4, r3, #18
 8005fee:	230a      	movs	r3, #10
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	8819      	ldrh	r1, [r3, #0]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8006124 <HAL_I2C_Master_Receive+0x208>)
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	0023      	movs	r3, r4
 8005ffc:	f000 fb30 	bl	8006660 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006000:	e062      	b.n	80060c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	0018      	movs	r0, r3
 800600a:	f000 f993 	bl	8006334 <I2C_WaitOnRXNEFlagUntilTimeout>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e082      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d03a      	beq.n	80060c8 <HAL_I2C_Master_Receive+0x1ac>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d136      	bne.n	80060c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800605a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	0013      	movs	r3, r2
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	@ 0x80
 8006068:	f000 f882 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 800606c:	1e03      	subs	r3, r0, #0
 800606e:	d001      	beq.n	8006074 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e053      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2bff      	cmp	r3, #255	@ 0xff
 800607c:	d911      	bls.n	80060a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	@ 0xff
 8006082:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	2380      	movs	r3, #128	@ 0x80
 800608c:	045c      	lsls	r4, r3, #17
 800608e:	230a      	movs	r3, #10
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	8819      	ldrh	r1, [r3, #0]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	2300      	movs	r3, #0
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	0023      	movs	r3, r4
 800609c:	f000 fae0 	bl	8006660 <I2C_TransferConfig>
 80060a0:	e012      	b.n	80060c8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	2380      	movs	r3, #128	@ 0x80
 80060b4:	049c      	lsls	r4, r3, #18
 80060b6:	230a      	movs	r3, #10
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	8819      	ldrh	r1, [r3, #0]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	2300      	movs	r3, #0
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	0023      	movs	r3, r4
 80060c4:	f000 facc 	bl	8006660 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d197      	bne.n	8006002 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	0018      	movs	r0, r3
 80060da:	f000 f8e7 	bl	80062ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e01a      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2220      	movs	r2, #32
 80060ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	490b      	ldr	r1, [pc, #44]	@ (8006128 <HAL_I2C_Master_Receive+0x20c>)
 80060fa:	400a      	ands	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2241      	movs	r2, #65	@ 0x41
 8006102:	2120      	movs	r1, #32
 8006104:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2242      	movs	r2, #66	@ 0x42
 800610a:	2100      	movs	r1, #0
 800610c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2240      	movs	r2, #64	@ 0x40
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e000      	b.n	800611c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
  }
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b007      	add	sp, #28
 8006122:	bd90      	pop	{r4, r7, pc}
 8006124:	80002400 	.word	0x80002400
 8006128:	fe00e800 	.word	0xfe00e800

0800612c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2202      	movs	r2, #2
 800613c:	4013      	ands	r3, r2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d103      	bne.n	800614a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	2201      	movs	r2, #1
 8006152:	4013      	ands	r3, r2
 8006154:	2b01      	cmp	r3, #1
 8006156:	d007      	beq.n	8006168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2101      	movs	r1, #1
 8006164:	430a      	orrs	r2, r1
 8006166:	619a      	str	r2, [r3, #24]
  }
}
 8006168:	46c0      	nop			@ (mov r8, r8)
 800616a:	46bd      	mov	sp, r7
 800616c:	b002      	add	sp, #8
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	1dfb      	adds	r3, r7, #7
 800617e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006180:	e03a      	b.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 f971 	bl	8006470 <I2C_IsErrorOccurred>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d001      	beq.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e040      	b.n	8006218 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	d02d      	beq.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619c:	f7fe f940 	bl	8004420 <HAL_GetTick>
 80061a0:	0002      	movs	r2, r0
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d302      	bcc.n	80061b2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d122      	bne.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	425a      	negs	r2, r3
 80061c2:	4153      	adcs	r3, r2
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	001a      	movs	r2, r3
 80061c8:	1dfb      	adds	r3, r7, #7
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d113      	bne.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d4:	2220      	movs	r2, #32
 80061d6:	431a      	orrs	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2241      	movs	r2, #65	@ 0x41
 80061e0:	2120      	movs	r1, #32
 80061e2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2242      	movs	r2, #66	@ 0x42
 80061e8:	2100      	movs	r1, #0
 80061ea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2240      	movs	r2, #64	@ 0x40
 80061f0:	2100      	movs	r1, #0
 80061f2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e00f      	b.n	8006218 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	425a      	negs	r2, r3
 8006208:	4153      	adcs	r3, r2
 800620a:	b2db      	uxtb	r3, r3
 800620c:	001a      	movs	r2, r3
 800620e:	1dfb      	adds	r3, r7, #7
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d0b5      	beq.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	0018      	movs	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	b004      	add	sp, #16
 800621e:	bd80      	pop	{r7, pc}

08006220 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800622c:	e032      	b.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	0018      	movs	r0, r3
 8006236:	f000 f91b 	bl	8006470 <I2C_IsErrorOccurred>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d001      	beq.n	8006242 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e030      	b.n	80062a4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	3301      	adds	r3, #1
 8006246:	d025      	beq.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006248:	f7fe f8ea 	bl	8004420 <HAL_GetTick>
 800624c:	0002      	movs	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11a      	bne.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2202      	movs	r2, #2
 8006266:	4013      	ands	r3, r2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d013      	beq.n	8006294 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006270:	2220      	movs	r2, #32
 8006272:	431a      	orrs	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2241      	movs	r2, #65	@ 0x41
 800627c:	2120      	movs	r1, #32
 800627e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2242      	movs	r2, #66	@ 0x42
 8006284:	2100      	movs	r1, #0
 8006286:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2240      	movs	r2, #64	@ 0x40
 800628c:	2100      	movs	r1, #0
 800628e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e007      	b.n	80062a4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2202      	movs	r2, #2
 800629c:	4013      	ands	r3, r2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d1c5      	bne.n	800622e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b004      	add	sp, #16
 80062aa:	bd80      	pop	{r7, pc}

080062ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062b8:	e02f      	b.n	800631a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 f8d5 	bl	8006470 <I2C_IsErrorOccurred>
 80062c6:	1e03      	subs	r3, r0, #0
 80062c8:	d001      	beq.n	80062ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e02d      	b.n	800632a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fe f8a7 	bl	8004420 <HAL_GetTick>
 80062d2:	0002      	movs	r2, r0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11a      	bne.n	800631a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2220      	movs	r2, #32
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d013      	beq.n	800631a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	2220      	movs	r2, #32
 80062f8:	431a      	orrs	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2241      	movs	r2, #65	@ 0x41
 8006302:	2120      	movs	r1, #32
 8006304:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2242      	movs	r2, #66	@ 0x42
 800630a:	2100      	movs	r1, #0
 800630c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2240      	movs	r2, #64	@ 0x40
 8006312:	2100      	movs	r1, #0
 8006314:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e007      	b.n	800632a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	2220      	movs	r2, #32
 8006322:	4013      	ands	r3, r2
 8006324:	2b20      	cmp	r3, #32
 8006326:	d1c8      	bne.n	80062ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	b004      	add	sp, #16
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2317      	movs	r3, #23
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006348:	e07b      	b.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 f88d 	bl	8006470 <I2C_IsErrorOccurred>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d003      	beq.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800635a:	2317      	movs	r3, #23
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2220      	movs	r2, #32
 800636a:	4013      	ands	r3, r2
 800636c:	2b20      	cmp	r3, #32
 800636e:	d140      	bne.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006370:	2117      	movs	r1, #23
 8006372:	187b      	adds	r3, r7, r1
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d13b      	bne.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	2204      	movs	r2, #4
 8006382:	4013      	ands	r3, r2
 8006384:	2b04      	cmp	r3, #4
 8006386:	d106      	bne.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006390:	187b      	adds	r3, r7, r1
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2210      	movs	r2, #16
 800639e:	4013      	ands	r3, r2
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d123      	bne.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2210      	movs	r2, #16
 80063aa:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2204      	movs	r2, #4
 80063b0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2220      	movs	r2, #32
 80063b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4929      	ldr	r1, [pc, #164]	@ (800646c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80063c6:	400a      	ands	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2241      	movs	r2, #65	@ 0x41
 80063ce:	2120      	movs	r1, #32
 80063d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2242      	movs	r2, #66	@ 0x42
 80063d6:	2100      	movs	r1, #0
 80063d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2240      	movs	r2, #64	@ 0x40
 80063de:	2100      	movs	r1, #0
 80063e0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80063e2:	2317      	movs	r3, #23
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	2201      	movs	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e002      	b.n	80063f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80063f2:	f7fe f815 	bl	8004420 <HAL_GetTick>
 80063f6:	0002      	movs	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11c      	bne.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8006408:	2017      	movs	r0, #23
 800640a:	183b      	adds	r3, r7, r0
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d117      	bne.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	2204      	movs	r2, #4
 800641a:	4013      	ands	r3, r2
 800641c:	2b04      	cmp	r3, #4
 800641e:	d010      	beq.n	8006442 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006424:	2220      	movs	r2, #32
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2241      	movs	r2, #65	@ 0x41
 8006430:	2120      	movs	r1, #32
 8006432:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800643c:	183b      	adds	r3, r7, r0
 800643e:	2201      	movs	r2, #1
 8006440:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2204      	movs	r2, #4
 800644a:	4013      	ands	r3, r2
 800644c:	2b04      	cmp	r3, #4
 800644e:	d005      	beq.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006450:	2317      	movs	r3, #23
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d100      	bne.n	800645c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800645a:	e776      	b.n	800634a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800645c:	2317      	movs	r3, #23
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	781b      	ldrb	r3, [r3, #0]
}
 8006462:	0018      	movs	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	b006      	add	sp, #24
 8006468:	bd80      	pop	{r7, pc}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	fe00e800 	.word	0xfe00e800

08006470 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	@ 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800647c:	2327      	movs	r3, #39	@ 0x27
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2210      	movs	r2, #16
 8006498:	4013      	ands	r3, r2
 800649a:	d100      	bne.n	800649e <I2C_IsErrorOccurred+0x2e>
 800649c:	e079      	b.n	8006592 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2210      	movs	r2, #16
 80064a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064a6:	e057      	b.n	8006558 <I2C_IsErrorOccurred+0xe8>
 80064a8:	2227      	movs	r2, #39	@ 0x27
 80064aa:	18bb      	adds	r3, r7, r2
 80064ac:	18ba      	adds	r2, r7, r2
 80064ae:	7812      	ldrb	r2, [r2, #0]
 80064b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3301      	adds	r3, #1
 80064b6:	d04f      	beq.n	8006558 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064b8:	f7fd ffb2 	bl	8004420 <HAL_GetTick>
 80064bc:	0002      	movs	r2, r0
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d302      	bcc.n	80064ce <I2C_IsErrorOccurred+0x5e>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d144      	bne.n	8006558 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	01db      	lsls	r3, r3, #7
 80064d8:	4013      	ands	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064dc:	2013      	movs	r0, #19
 80064de:	183b      	adds	r3, r7, r0
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	2142      	movs	r1, #66	@ 0x42
 80064e4:	5c52      	ldrb	r2, [r2, r1]
 80064e6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	2380      	movs	r3, #128	@ 0x80
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	401a      	ands	r2, r3
 80064f4:	2380      	movs	r3, #128	@ 0x80
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d126      	bne.n	800654a <I2C_IsErrorOccurred+0xda>
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	2380      	movs	r3, #128	@ 0x80
 8006500:	01db      	lsls	r3, r3, #7
 8006502:	429a      	cmp	r2, r3
 8006504:	d021      	beq.n	800654a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006506:	183b      	adds	r3, r7, r0
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b20      	cmp	r3, #32
 800650c:	d01d      	beq.n	800654a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2180      	movs	r1, #128	@ 0x80
 800651a:	01c9      	lsls	r1, r1, #7
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006520:	f7fd ff7e 	bl	8004420 <HAL_GetTick>
 8006524:	0003      	movs	r3, r0
 8006526:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006528:	e00f      	b.n	800654a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800652a:	f7fd ff79 	bl	8004420 <HAL_GetTick>
 800652e:	0002      	movs	r2, r0
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b19      	cmp	r3, #25
 8006536:	d908      	bls.n	800654a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	2220      	movs	r2, #32
 800653c:	4313      	orrs	r3, r2
 800653e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006540:	2327      	movs	r3, #39	@ 0x27
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	2201      	movs	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]

              break;
 8006548:	e006      	b.n	8006558 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2220      	movs	r2, #32
 8006552:	4013      	ands	r3, r2
 8006554:	2b20      	cmp	r3, #32
 8006556:	d1e8      	bne.n	800652a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2220      	movs	r2, #32
 8006560:	4013      	ands	r3, r2
 8006562:	2b20      	cmp	r3, #32
 8006564:	d004      	beq.n	8006570 <I2C_IsErrorOccurred+0x100>
 8006566:	2327      	movs	r3, #39	@ 0x27
 8006568:	18fb      	adds	r3, r7, r3
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d09b      	beq.n	80064a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006570:	2327      	movs	r3, #39	@ 0x27
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2220      	movs	r2, #32
 8006580:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	2204      	movs	r2, #4
 8006586:	4313      	orrs	r3, r2
 8006588:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800658a:	2327      	movs	r3, #39	@ 0x27
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	2380      	movs	r3, #128	@ 0x80
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	d00c      	beq.n	80065be <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2201      	movs	r2, #1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2280      	movs	r2, #128	@ 0x80
 80065b2:	0052      	lsls	r2, r2, #1
 80065b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065b6:	2327      	movs	r3, #39	@ 0x27
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	2380      	movs	r3, #128	@ 0x80
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4013      	ands	r3, r2
 80065c6:	d00c      	beq.n	80065e2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2208      	movs	r2, #8
 80065cc:	4313      	orrs	r3, r2
 80065ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2280      	movs	r2, #128	@ 0x80
 80065d6:	00d2      	lsls	r2, r2, #3
 80065d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065da:	2327      	movs	r3, #39	@ 0x27
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	2380      	movs	r3, #128	@ 0x80
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4013      	ands	r3, r2
 80065ea:	d00c      	beq.n	8006606 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	2202      	movs	r2, #2
 80065f0:	4313      	orrs	r3, r2
 80065f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2280      	movs	r2, #128	@ 0x80
 80065fa:	0092      	lsls	r2, r2, #2
 80065fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065fe:	2327      	movs	r3, #39	@ 0x27
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006606:	2327      	movs	r3, #39	@ 0x27
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01d      	beq.n	800664c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	0018      	movs	r0, r3
 8006614:	f7ff fd8a 	bl	800612c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	490e      	ldr	r1, [pc, #56]	@ (800665c <I2C_IsErrorOccurred+0x1ec>)
 8006624:	400a      	ands	r2, r1
 8006626:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	431a      	orrs	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2241      	movs	r2, #65	@ 0x41
 8006638:	2120      	movs	r1, #32
 800663a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2242      	movs	r2, #66	@ 0x42
 8006640:	2100      	movs	r1, #0
 8006642:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2240      	movs	r2, #64	@ 0x40
 8006648:	2100      	movs	r1, #0
 800664a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800664c:	2327      	movs	r3, #39	@ 0x27
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
}
 8006652:	0018      	movs	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	b00a      	add	sp, #40	@ 0x28
 8006658:	bd80      	pop	{r7, pc}
 800665a:	46c0      	nop			@ (mov r8, r8)
 800665c:	fe00e800 	.word	0xfe00e800

08006660 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	0008      	movs	r0, r1
 800666a:	0011      	movs	r1, r2
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	240a      	movs	r4, #10
 8006670:	193b      	adds	r3, r7, r4
 8006672:	1c02      	adds	r2, r0, #0
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	2009      	movs	r0, #9
 8006678:	183b      	adds	r3, r7, r0
 800667a:	1c0a      	adds	r2, r1, #0
 800667c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800667e:	193b      	adds	r3, r7, r4
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	059b      	lsls	r3, r3, #22
 8006684:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006686:	183b      	adds	r3, r7, r0
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	0419      	lsls	r1, r3, #16
 800668c:	23ff      	movs	r3, #255	@ 0xff
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006692:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	4313      	orrs	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066aa:	0d51      	lsrs	r1, r2, #21
 80066ac:	2280      	movs	r2, #128	@ 0x80
 80066ae:	00d2      	lsls	r2, r2, #3
 80066b0:	400a      	ands	r2, r1
 80066b2:	4907      	ldr	r1, [pc, #28]	@ (80066d0 <I2C_TransferConfig+0x70>)
 80066b4:	430a      	orrs	r2, r1
 80066b6:	43d2      	mvns	r2, r2
 80066b8:	401a      	ands	r2, r3
 80066ba:	0011      	movs	r1, r2
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b007      	add	sp, #28
 80066cc:	bd90      	pop	{r4, r7, pc}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	03ff63ff 	.word	0x03ff63ff

080066d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2241      	movs	r2, #65	@ 0x41
 80066e2:	5c9b      	ldrb	r3, [r3, r2]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d138      	bne.n	800675c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2240      	movs	r2, #64	@ 0x40
 80066ee:	5c9b      	ldrb	r3, [r3, r2]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e032      	b.n	800675e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2240      	movs	r2, #64	@ 0x40
 80066fc:	2101      	movs	r1, #1
 80066fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2241      	movs	r2, #65	@ 0x41
 8006704:	2124      	movs	r1, #36	@ 0x24
 8006706:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2101      	movs	r1, #1
 8006714:	438a      	bics	r2, r1
 8006716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4911      	ldr	r1, [pc, #68]	@ (8006768 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006724:	400a      	ands	r2, r1
 8006726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6819      	ldr	r1, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2101      	movs	r1, #1
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2241      	movs	r2, #65	@ 0x41
 800674c:	2120      	movs	r1, #32
 800674e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2240      	movs	r2, #64	@ 0x40
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e000      	b.n	800675e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b002      	add	sp, #8
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	ffffefff 	.word	0xffffefff

0800676c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2241      	movs	r2, #65	@ 0x41
 800677a:	5c9b      	ldrb	r3, [r3, r2]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b20      	cmp	r3, #32
 8006780:	d139      	bne.n	80067f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2240      	movs	r2, #64	@ 0x40
 8006786:	5c9b      	ldrb	r3, [r3, r2]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800678c:	2302      	movs	r3, #2
 800678e:	e033      	b.n	80067f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2240      	movs	r2, #64	@ 0x40
 8006794:	2101      	movs	r1, #1
 8006796:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2241      	movs	r2, #65	@ 0x41
 800679c:	2124      	movs	r1, #36	@ 0x24
 800679e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2101      	movs	r1, #1
 80067ac:	438a      	bics	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4a11      	ldr	r2, [pc, #68]	@ (8006800 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2101      	movs	r1, #1
 80067de:	430a      	orrs	r2, r1
 80067e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2241      	movs	r2, #65	@ 0x41
 80067e6:	2120      	movs	r1, #32
 80067e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2240      	movs	r2, #64	@ 0x40
 80067ee:	2100      	movs	r1, #0
 80067f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b004      	add	sp, #16
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	fffff0ff 	.word	0xfffff0ff

08006804 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	000a      	movs	r2, r1
 800680e:	1cbb      	adds	r3, r7, #2
 8006810:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006812:	230a      	movs	r3, #10
 8006814:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8006816:	e002      	b.n	800681e <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b01      	subs	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f9      	bne.n	8006818 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8006824:	1cbb      	adds	r3, r7, #2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4a06      	ldr	r2, [pc, #24]	@ (8006844 <PCD_GET_EP_RX_CNT+0x40>)
 800682c:	4694      	mov	ip, r2
 800682e:	4463      	add	r3, ip
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	b29b      	uxth	r3, r3
 8006836:	059b      	lsls	r3, r3, #22
 8006838:	0d9b      	lsrs	r3, r3, #22
 800683a:	b29b      	uxth	r3, r3
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40009800 	.word	0x40009800

08006848 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	000a      	movs	r2, r1
 8006852:	1cbb      	adds	r3, r7, #2
 8006854:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8006856:	230a      	movs	r3, #10
 8006858:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800685a:	e002      	b.n	8006862 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3b01      	subs	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f9      	bne.n	800685c <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8006868:	1cbb      	adds	r3, r7, #2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	4a06      	ldr	r2, [pc, #24]	@ (8006888 <PCD_GET_EP_DBUF0_CNT+0x40>)
 8006870:	4694      	mov	ip, r2
 8006872:	4463      	add	r3, ip
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	0c1b      	lsrs	r3, r3, #16
 8006878:	b29b      	uxth	r3, r3
 800687a:	059b      	lsls	r3, r3, #22
 800687c:	0d9b      	lsrs	r3, r3, #22
 800687e:	b29b      	uxth	r3, r3
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b004      	add	sp, #16
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40009800 	.word	0x40009800

0800688c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	000a      	movs	r2, r1
 8006896:	1cbb      	adds	r3, r7, #2
 8006898:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800689a:	230a      	movs	r3, #10
 800689c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800689e:	e002      	b.n	80068a6 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f9      	bne.n	80068a0 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80068ac:	1cbb      	adds	r3, r7, #2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4a06      	ldr	r2, [pc, #24]	@ (80068cc <PCD_GET_EP_DBUF1_CNT+0x40>)
 80068b4:	4694      	mov	ip, r2
 80068b6:	4463      	add	r3, ip
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	0c1b      	lsrs	r3, r3, #16
 80068bc:	b29b      	uxth	r3, r3
 80068be:	059b      	lsls	r3, r3, #22
 80068c0:	0d9b      	lsrs	r3, r3, #22
 80068c2:	b29b      	uxth	r3, r3
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b004      	add	sp, #16
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40009800 	.word	0x40009800

080068d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0ea      	b.n	8006ab8 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a76      	ldr	r2, [pc, #472]	@ (8006ac0 <HAL_PCD_Init+0x1f0>)
 80068e6:	5c9b      	ldrb	r3, [r3, r2]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	23a5      	movs	r3, #165	@ 0xa5
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	2100      	movs	r1, #0
 80068f6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	0018      	movs	r0, r3
 80068fc:	f007 fdce 	bl	800e49c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a6f      	ldr	r2, [pc, #444]	@ (8006ac0 <HAL_PCD_Init+0x1f0>)
 8006904:	2103      	movs	r1, #3
 8006906:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	0018      	movs	r0, r3
 800690e:	f003 faa3 	bl	8009e58 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006912:	230f      	movs	r3, #15
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	e049      	b.n	80069b0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800691c:	200f      	movs	r0, #15
 800691e:	183b      	adds	r3, r7, r0
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	0013      	movs	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	189b      	adds	r3, r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	18cb      	adds	r3, r1, r3
 800692e:	3315      	adds	r3, #21
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006934:	183b      	adds	r3, r7, r0
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	0013      	movs	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	189b      	adds	r3, r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	18cb      	adds	r3, r1, r3
 8006944:	3314      	adds	r3, #20
 8006946:	183a      	adds	r2, r7, r0
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800694c:	183b      	adds	r3, r7, r0
 800694e:	781a      	ldrb	r2, [r3, #0]
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	0013      	movs	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	189b      	adds	r3, r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	18cb      	adds	r3, r1, r3
 800695c:	3317      	adds	r3, #23
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006962:	183b      	adds	r3, r7, r0
 8006964:	781a      	ldrb	r2, [r3, #0]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	0013      	movs	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	189b      	adds	r3, r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	18cb      	adds	r3, r1, r3
 8006972:	3324      	adds	r3, #36	@ 0x24
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006978:	183b      	adds	r3, r7, r0
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	0013      	movs	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	189b      	adds	r3, r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	18cb      	adds	r3, r1, r3
 8006988:	3328      	adds	r3, #40	@ 0x28
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800698e:	183b      	adds	r3, r7, r0
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	0013      	movs	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	189b      	adds	r3, r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	18cb      	adds	r3, r1, r3
 80069a0:	3304      	adds	r3, #4
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	183b      	adds	r3, r7, r0
 80069ac:	3201      	adds	r2, #1
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	791b      	ldrb	r3, [r3, #4]
 80069b4:	210f      	movs	r1, #15
 80069b6:	187a      	adds	r2, r7, r1
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d3ae      	bcc.n	800691c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069be:	187b      	adds	r3, r7, r1
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	e056      	b.n	8006a74 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80069c6:	240f      	movs	r4, #15
 80069c8:	193b      	adds	r3, r7, r4
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	2356      	movs	r3, #86	@ 0x56
 80069d0:	33ff      	adds	r3, #255	@ 0xff
 80069d2:	0019      	movs	r1, r3
 80069d4:	0013      	movs	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	189b      	adds	r3, r3, r2
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	18c3      	adds	r3, r0, r3
 80069de:	185b      	adds	r3, r3, r1
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80069e4:	193b      	adds	r3, r7, r4
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	23aa      	movs	r3, #170	@ 0xaa
 80069ec:	0059      	lsls	r1, r3, #1
 80069ee:	0013      	movs	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	189b      	adds	r3, r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	18c3      	adds	r3, r0, r3
 80069f8:	185b      	adds	r3, r3, r1
 80069fa:	193a      	adds	r2, r7, r4
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a00:	193b      	adds	r3, r7, r4
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	2358      	movs	r3, #88	@ 0x58
 8006a08:	33ff      	adds	r3, #255	@ 0xff
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	0013      	movs	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	18c3      	adds	r3, r0, r3
 8006a16:	185b      	adds	r3, r3, r1
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	781a      	ldrb	r2, [r3, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	23b2      	movs	r3, #178	@ 0xb2
 8006a24:	0059      	lsls	r1, r3, #1
 8006a26:	0013      	movs	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	18c3      	adds	r3, r0, r3
 8006a30:	185b      	adds	r3, r3, r1
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a36:	193b      	adds	r3, r7, r4
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	23b4      	movs	r3, #180	@ 0xb4
 8006a3e:	0059      	lsls	r1, r3, #1
 8006a40:	0013      	movs	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	189b      	adds	r3, r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	18c3      	adds	r3, r0, r3
 8006a4a:	185b      	adds	r3, r3, r1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a50:	193b      	adds	r3, r7, r4
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	23b6      	movs	r3, #182	@ 0xb6
 8006a58:	0059      	lsls	r1, r3, #1
 8006a5a:	0013      	movs	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	18c3      	adds	r3, r0, r3
 8006a64:	185b      	adds	r3, r3, r1
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a6a:	193b      	adds	r3, r7, r4
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	193b      	adds	r3, r7, r4
 8006a70:	3201      	adds	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	791b      	ldrb	r3, [r3, #4]
 8006a78:	220f      	movs	r2, #15
 8006a7a:	18ba      	adds	r2, r7, r2
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d3a1      	bcc.n	80069c6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	466a      	mov	r2, sp
 8006a8a:	7c19      	ldrb	r1, [r3, #16]
 8006a8c:	7011      	strb	r1, [r2, #0]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 fa19 	bl	8009eca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a07      	ldr	r2, [pc, #28]	@ (8006ac0 <HAL_PCD_Init+0x1f0>)
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7b1b      	ldrb	r3, [r3, #12]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d103      	bne.n	8006ab6 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f001 fbf1 	bl	8008298 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b005      	add	sp, #20
 8006abe:	bd90      	pop	{r4, r7, pc}
 8006ac0:	00000295 	.word	0x00000295

08006ac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	23a5      	movs	r3, #165	@ 0xa5
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_PCD_Start+0x18>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	e014      	b.n	8006b06 <HAL_PCD_Start+0x42>
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	23a5      	movs	r3, #165	@ 0xa5
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	0018      	movs	r0, r3
 8006aec:	f003 f9a0 	bl	8009e30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f004 ffaa 	bl	800ba4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	23a5      	movs	r3, #165	@ 0xa5
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	2100      	movs	r1, #0
 8006b02:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	0018      	movs	r0, r3
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f004 ffa6 	bl	800ba6e <USB_ReadInterrupts>
 8006b22:	0003      	movs	r3, r0
 8006b24:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8006b26:	4a7c      	ldr	r2, [pc, #496]	@ (8006d18 <HAL_PCD_IRQHandler+0x208>)
 8006b28:	23a0      	movs	r3, #160	@ 0xa0
 8006b2a:	58d3      	ldr	r3, [r2, r3]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d100      	bne.n	8006b34 <HAL_PCD_IRQHandler+0x24>
 8006b32:	e0ed      	b.n	8006d10 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	0018      	movs	r0, r3
 8006b42:	f000 fb35 	bl	80071b0 <PCD_EP_ISR_Handler>

    return;
 8006b46:	e0e4      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	2380      	movs	r3, #128	@ 0x80
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d011      	beq.n	8006b76 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	496f      	ldr	r1, [pc, #444]	@ (8006d1c <HAL_PCD_IRQHandler+0x20c>)
 8006b5e:	400a      	ands	r2, r1
 8006b60:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0018      	movs	r0, r3
 8006b66:	f007 fd5c 	bl	800e622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f000 f8e4 	bl	8006d3c <HAL_PCD_SetAddress>

    return;
 8006b74:	e0cd      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	2380      	movs	r3, #128	@ 0x80
 8006b7a:	01db      	lsls	r3, r3, #7
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d008      	beq.n	8006b92 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4965      	ldr	r1, [pc, #404]	@ (8006d20 <HAL_PCD_IRQHandler+0x210>)
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006b90:	e0bf      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	019b      	lsls	r3, r3, #6
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d008      	beq.n	8006bae <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	495f      	ldr	r1, [pc, #380]	@ (8006d24 <HAL_PCD_IRQHandler+0x214>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006bac:	e0b1      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	2380      	movs	r3, #128	@ 0x80
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d02c      	beq.n	8006c12 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2104      	movs	r1, #4
 8006bc4:	438a      	bics	r2, r1
 8006bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2108      	movs	r1, #8
 8006bd4:	438a      	bics	r2, r1
 8006bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	23b3      	movs	r3, #179	@ 0xb3
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d109      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	23b3      	movs	r3, #179	@ 0xb3
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	2100      	movs	r1, #0
 8006bec:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f007 ff94 	bl	800eb20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f007 fd52 	bl	800e6a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4947      	ldr	r1, [pc, #284]	@ (8006d28 <HAL_PCD_IRQHandler+0x218>)
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006c10:	e07f      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	2380      	movs	r3, #128	@ 0x80
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d01c      	beq.n	8006c56 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2108      	movs	r1, #8
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	493d      	ldr	r1, [pc, #244]	@ (8006d2c <HAL_PCD_IRQHandler+0x21c>)
 8006c38:	400a      	ands	r2, r1
 8006c3a:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2104      	movs	r1, #4
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f007 fd0c 	bl	800e66c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006c54:	e05d      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2280      	movs	r2, #128	@ 0x80
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d038      	beq.n	8006cd0 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4931      	ldr	r1, [pc, #196]	@ (8006d30 <HAL_PCD_IRQHandler+0x220>)
 8006c6a:	400a      	ands	r2, r1
 8006c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	23b3      	movs	r3, #179	@ 0xb3
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	5cd3      	ldrb	r3, [r2, r3]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d125      	bne.n	8006cc6 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2104      	movs	r1, #4
 8006c86:	430a      	orrs	r2, r1
 8006c88:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2108      	movs	r1, #8
 8006c96:	430a      	orrs	r2, r1
 8006c98:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	23b3      	movs	r3, #179	@ 0xb3
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	223c      	movs	r2, #60	@ 0x3c
 8006cae:	4013      	ands	r3, r2
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	23b4      	movs	r3, #180	@ 0xb4
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f007 ff2e 	bl	800eb20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006cc4:	e025      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f007 fccf 	bl	800e66c <HAL_PCD_SuspendCallback>
    return;
 8006cce:	e020      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	2380      	movs	r3, #128	@ 0x80
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4913      	ldr	r1, [pc, #76]	@ (8006d34 <HAL_PCD_IRQHandler+0x224>)
 8006ce6:	400a      	ands	r2, r1
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f007 fc89 	bl	800e604 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006cf2:	e00e      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	490b      	ldr	r1, [pc, #44]	@ (8006d38 <HAL_PCD_IRQHandler+0x228>)
 8006d0a:	400a      	ands	r2, r1
 8006d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8006d0e:	e000      	b.n	8006d12 <HAL_PCD_IRQHandler+0x202>
    return;
 8006d10:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b004      	add	sp, #16
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	40010000 	.word	0x40010000
 8006d1c:	0000fbff 	.word	0x0000fbff
 8006d20:	0000bfff 	.word	0x0000bfff
 8006d24:	0000dfff 	.word	0x0000dfff
 8006d28:	0000efff 	.word	0x0000efff
 8006d2c:	0000f7ff 	.word	0x0000f7ff
 8006d30:	0000ff7f 	.word	0x0000ff7f
 8006d34:	0000fdff 	.word	0x0000fdff
 8006d38:	0000feff 	.word	0x0000feff

08006d3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	000a      	movs	r2, r1
 8006d46:	1cfb      	adds	r3, r7, #3
 8006d48:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	23a5      	movs	r3, #165	@ 0xa5
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	5cd3      	ldrb	r3, [r2, r3]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_PCD_SetAddress+0x1e>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e016      	b.n	8006d88 <HAL_PCD_SetAddress+0x4c>
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	23a5      	movs	r3, #165	@ 0xa5
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	2101      	movs	r1, #1
 8006d62:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1cfa      	adds	r2, r7, #3
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	1cfb      	adds	r3, r7, #3
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	0019      	movs	r1, r3
 8006d76:	0010      	movs	r0, r2
 8006d78:	f004 fe56 	bl	800ba28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	23a5      	movs	r3, #165	@ 0xa5
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	2100      	movs	r1, #0
 8006d84:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	0018      	movs	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d90:	b590      	push	{r4, r7, lr}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	000c      	movs	r4, r1
 8006d9a:	0010      	movs	r0, r2
 8006d9c:	0019      	movs	r1, r3
 8006d9e:	1cfb      	adds	r3, r7, #3
 8006da0:	1c22      	adds	r2, r4, #0
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	003b      	movs	r3, r7
 8006da6:	1c02      	adds	r2, r0, #0
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	1cbb      	adds	r3, r7, #2
 8006dac:	1c0a      	adds	r2, r1, #0
 8006dae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006db0:	230b      	movs	r3, #11
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006db8:	1cfb      	adds	r3, r7, #3
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da10      	bge.n	8006de4 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dc2:	1cfb      	adds	r3, r7, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	401a      	ands	r2, r3
 8006dca:	0013      	movs	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	18d3      	adds	r3, r2, r3
 8006dd8:	3304      	adds	r3, #4
 8006dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2201      	movs	r2, #1
 8006de0:	705a      	strb	r2, [r3, #1]
 8006de2:	e010      	b.n	8006e06 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006de4:	1cfb      	adds	r3, r7, #3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2207      	movs	r2, #7
 8006dea:	401a      	ands	r2, r3
 8006dec:	0013      	movs	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	3351      	adds	r3, #81	@ 0x51
 8006df6:	33ff      	adds	r3, #255	@ 0xff
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	18d3      	adds	r3, r2, r3
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e06:	1cfb      	adds	r3, r7, #3
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	2207      	movs	r2, #7
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e14:	003b      	movs	r3, r7
 8006e16:	881a      	ldrh	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1cba      	adds	r2, r7, #2
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e24:	1cbb      	adds	r3, r7, #2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d102      	bne.n	8006e32 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	23a5      	movs	r3, #165	@ 0xa5
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	5cd3      	ldrb	r3, [r2, r3]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_PCD_EP_Open+0xb2>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e013      	b.n	8006e6a <HAL_PCD_EP_Open+0xda>
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	23a5      	movs	r3, #165	@ 0xa5
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	2101      	movs	r1, #1
 8006e4a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	0011      	movs	r1, r2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f003 f863 	bl	8009f20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	23a5      	movs	r3, #165	@ 0xa5
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	2100      	movs	r1, #0
 8006e62:	54d1      	strb	r1, [r2, r3]

  return ret;
 8006e64:	230b      	movs	r3, #11
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	781b      	ldrb	r3, [r3, #0]
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b005      	add	sp, #20
 8006e70:	bd90      	pop	{r4, r7, pc}

08006e72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	000a      	movs	r2, r1
 8006e7c:	1cfb      	adds	r3, r7, #3
 8006e7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e80:	1cfb      	adds	r3, r7, #3
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da10      	bge.n	8006eac <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e8a:	1cfb      	adds	r3, r7, #3
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2207      	movs	r2, #7
 8006e90:	401a      	ands	r2, r3
 8006e92:	0013      	movs	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	189b      	adds	r3, r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	3310      	adds	r3, #16
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	18d3      	adds	r3, r2, r3
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	705a      	strb	r2, [r3, #1]
 8006eaa:	e010      	b.n	8006ece <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eac:	1cfb      	adds	r3, r7, #3
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	0013      	movs	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	189b      	adds	r3, r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	3351      	adds	r3, #81	@ 0x51
 8006ebe:	33ff      	adds	r3, #255	@ 0xff
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	18d3      	adds	r3, r2, r3
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ece:	1cfb      	adds	r3, r7, #3
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	23a5      	movs	r3, #165	@ 0xa5
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	5cd3      	ldrb	r3, [r2, r3]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_PCD_EP_Close+0x7a>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e011      	b.n	8006f10 <HAL_PCD_EP_Close+0x9e>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	23a5      	movs	r3, #165	@ 0xa5
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	0011      	movs	r1, r2
 8006efe:	0018      	movs	r0, r3
 8006f00:	f003 fb42 	bl	800a588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	23a5      	movs	r3, #165	@ 0xa5
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	0018      	movs	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	b004      	add	sp, #16
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	200b      	movs	r0, #11
 8006f26:	183b      	adds	r3, r7, r0
 8006f28:	1c0a      	adds	r2, r1, #0
 8006f2a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f2c:	0001      	movs	r1, r0
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2207      	movs	r2, #7
 8006f34:	401a      	ands	r2, r3
 8006f36:	0013      	movs	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	3351      	adds	r3, #81	@ 0x51
 8006f40:	33ff      	adds	r3, #255	@ 0xff
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	3304      	adds	r3, #4
 8006f48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f62:	187b      	adds	r3, r7, r1
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2207      	movs	r2, #7
 8006f68:	4013      	ands	r3, r2
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	0011      	movs	r1, r2
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f003 fc6b 	bl	800a854 <USB_EPStartXfer>

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	0018      	movs	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b006      	add	sp, #24
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	000a      	movs	r2, r1
 8006f92:	1cfb      	adds	r3, r7, #3
 8006f94:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f96:	1cfb      	adds	r3, r7, #3
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2207      	movs	r2, #7
 8006f9c:	401a      	ands	r2, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	23b8      	movs	r3, #184	@ 0xb8
 8006fa2:	0059      	lsls	r1, r3, #1
 8006fa4:	0013      	movs	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	18c3      	adds	r3, r0, r3
 8006fae:	185b      	adds	r3, r3, r1
 8006fb0:	681b      	ldr	r3, [r3, #0]
}
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b002      	add	sp, #8
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	200b      	movs	r0, #11
 8006fc8:	183b      	adds	r3, r7, r0
 8006fca:	1c0a      	adds	r2, r1, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fce:	183b      	adds	r3, r7, r0
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2207      	movs	r2, #7
 8006fd4:	401a      	ands	r2, r3
 8006fd6:	0013      	movs	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	3310      	adds	r3, #16
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	18d3      	adds	r3, r2, r3
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2224      	movs	r2, #36	@ 0x24
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2201      	movs	r2, #1
 800700c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800700e:	183b      	adds	r3, r7, r0
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2207      	movs	r2, #7
 8007014:	4013      	ands	r3, r2
 8007016:	b2da      	uxtb	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	0011      	movs	r1, r2
 8007024:	0018      	movs	r0, r3
 8007026:	f003 fc15 	bl	800a854 <USB_EPStartXfer>

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	0018      	movs	r0, r3
 800702e:	46bd      	mov	sp, r7
 8007030:	b006      	add	sp, #24
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	000a      	movs	r2, r1
 800703e:	1cfb      	adds	r3, r7, #3
 8007040:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007042:	1cfb      	adds	r3, r7, #3
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2207      	movs	r2, #7
 8007048:	4013      	ands	r3, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7912      	ldrb	r2, [r2, #4]
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e048      	b.n	80070e8 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007056:	1cfb      	adds	r3, r7, #3
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b25b      	sxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	da10      	bge.n	8007082 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007060:	1cfb      	adds	r3, r7, #3
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2207      	movs	r2, #7
 8007066:	401a      	ands	r2, r3
 8007068:	0013      	movs	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	189b      	adds	r3, r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3310      	adds	r3, #16
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	18d3      	adds	r3, r2, r3
 8007076:	3304      	adds	r3, #4
 8007078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	705a      	strb	r2, [r3, #1]
 8007080:	e00e      	b.n	80070a0 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007082:	1cfb      	adds	r3, r7, #3
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	0013      	movs	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	189b      	adds	r3, r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	3351      	adds	r3, #81	@ 0x51
 8007090:	33ff      	adds	r3, #255	@ 0xff
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	3304      	adds	r3, #4
 8007098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070a6:	1cfb      	adds	r3, r7, #3
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2207      	movs	r2, #7
 80070ac:	4013      	ands	r3, r2
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	23a5      	movs	r3, #165	@ 0xa5
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	5cd3      	ldrb	r3, [r2, r3]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_PCD_EP_SetStall+0x90>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e011      	b.n	80070e8 <HAL_PCD_EP_SetStall+0xb4>
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	23a5      	movs	r3, #165	@ 0xa5
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	2101      	movs	r1, #1
 80070cc:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	0011      	movs	r1, r2
 80070d6:	0018      	movs	r0, r3
 80070d8:	f004 fbd2 	bl	800b880 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	23a5      	movs	r3, #165	@ 0xa5
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	2100      	movs	r1, #0
 80070e4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	0018      	movs	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b004      	add	sp, #16
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	000a      	movs	r2, r1
 80070fa:	1cfb      	adds	r3, r7, #3
 80070fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070fe:	1cfb      	adds	r3, r7, #3
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	220f      	movs	r2, #15
 8007104:	4013      	ands	r3, r2
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	7912      	ldrb	r2, [r2, #4]
 800710a:	4293      	cmp	r3, r2
 800710c:	d901      	bls.n	8007112 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e04a      	b.n	80071a8 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007112:	1cfb      	adds	r3, r7, #3
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b25b      	sxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	da10      	bge.n	800713e <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800711c:	1cfb      	adds	r3, r7, #3
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2207      	movs	r2, #7
 8007122:	401a      	ands	r2, r3
 8007124:	0013      	movs	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	189b      	adds	r3, r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	3310      	adds	r3, #16
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	18d3      	adds	r3, r2, r3
 8007132:	3304      	adds	r3, #4
 8007134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	705a      	strb	r2, [r3, #1]
 800713c:	e010      	b.n	8007160 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800713e:	1cfb      	adds	r3, r7, #3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2207      	movs	r2, #7
 8007144:	401a      	ands	r2, r3
 8007146:	0013      	movs	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	189b      	adds	r3, r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	3351      	adds	r3, #81	@ 0x51
 8007150:	33ff      	adds	r3, #255	@ 0xff
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	18d3      	adds	r3, r2, r3
 8007156:	3304      	adds	r3, #4
 8007158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007166:	1cfb      	adds	r3, r7, #3
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2207      	movs	r2, #7
 800716c:	4013      	ands	r3, r2
 800716e:	b2da      	uxtb	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	23a5      	movs	r3, #165	@ 0xa5
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	5cd3      	ldrb	r3, [r2, r3]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_PCD_EP_ClrStall+0x94>
 8007180:	2302      	movs	r3, #2
 8007182:	e011      	b.n	80071a8 <HAL_PCD_EP_ClrStall+0xb8>
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	23a5      	movs	r3, #165	@ 0xa5
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	2101      	movs	r1, #1
 800718c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	0011      	movs	r1, r2
 8007196:	0018      	movs	r0, r3
 8007198:	f004 fbb4 	bl	800b904 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	23a5      	movs	r3, #165	@ 0xa5
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	2100      	movs	r1, #0
 80071a4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b004      	add	sp, #16
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80071b0:	b5b0      	push	{r4, r5, r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071b8:	e355      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071c0:	2022      	movs	r0, #34	@ 0x22
 80071c2:	183b      	adds	r3, r7, r0
 80071c4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80071c6:	183b      	adds	r3, r7, r0
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	2421      	movs	r4, #33	@ 0x21
 80071ce:	193b      	adds	r3, r7, r4
 80071d0:	210f      	movs	r1, #15
 80071d2:	400a      	ands	r2, r1
 80071d4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80071d6:	193b      	adds	r3, r7, r4
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d000      	beq.n	80071e0 <PCD_EP_ISR_Handler+0x30>
 80071de:	e12b      	b.n	8007438 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80071e0:	183b      	adds	r3, r7, r0
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	2210      	movs	r2, #16
 80071e6:	4013      	ands	r3, r2
 80071e8:	d140      	bne.n	800726c <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4ac5      	ldr	r2, [pc, #788]	@ (8007508 <PCD_EP_ISR_Handler+0x358>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	2180      	movs	r1, #128	@ 0x80
 80071fe:	0209      	lsls	r1, r1, #8
 8007200:	430a      	orrs	r2, r1
 8007202:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3314      	adds	r3, #20
 8007208:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800720a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4abe      	ldr	r2, [pc, #760]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 8007212:	4694      	mov	ip, r2
 8007214:	4463      	add	r3, ip
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	059b      	lsls	r3, r3, #22
 800721c:	0d9a      	lsrs	r2, r3, #22
 800721e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007224:	695a      	ldr	r2, [r3, #20]
 8007226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	18d2      	adds	r2, r2, r3
 800722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2100      	movs	r1, #0
 8007234:	0018      	movs	r0, r3
 8007236:	f007 f9c7 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	7c5b      	ldrb	r3, [r3, #17]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d100      	bne.n	8007246 <PCD_EP_ISR_Handler+0x96>
 8007244:	e30f      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d000      	beq.n	8007250 <PCD_EP_ISR_Handler+0xa0>
 800724e:	e30a      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7c5b      	ldrb	r3, [r3, #17]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2280      	movs	r2, #128	@ 0x80
 8007258:	4252      	negs	r2, r2
 800725a:	4313      	orrs	r3, r2
 800725c:	b2da      	uxtb	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	745a      	strb	r2, [r3, #17]
 800726a:	e2fc      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3355      	adds	r3, #85	@ 0x55
 8007270:	33ff      	adds	r3, #255	@ 0xff
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	2132      	movs	r1, #50	@ 0x32
 800727c:	187b      	adds	r3, r7, r1
 800727e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007280:	187b      	adds	r3, r7, r1
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	2380      	movs	r3, #128	@ 0x80
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	4013      	ands	r3, r2
 800728a:	d029      	beq.n	80072e0 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	0019      	movs	r1, r3
 8007296:	0010      	movs	r0, r2
 8007298:	f7ff fab4 	bl	8006804 <PCD_GET_EP_RX_CNT>
 800729c:	0003      	movs	r3, r0
 800729e:	001a      	movs	r2, r3
 80072a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	22a7      	movs	r2, #167	@ 0xa7
 80072ac:	0092      	lsls	r2, r2, #2
 80072ae:	1899      	adds	r1, r3, r2
 80072b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f004 fc5b 	bl	800bb74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a92      	ldr	r2, [pc, #584]	@ (8007510 <PCD_EP_ISR_Handler+0x360>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	2180      	movs	r1, #128	@ 0x80
 80072d2:	430a      	orrs	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	0018      	movs	r0, r3
 80072da:	f007 f93f 	bl	800e55c <HAL_PCD_SetupStageCallback>
 80072de:	e2c2      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80072e0:	2332      	movs	r3, #50	@ 0x32
 80072e2:	18fb      	adds	r3, r7, r3
 80072e4:	2200      	movs	r2, #0
 80072e6:	5e9b      	ldrsh	r3, [r3, r2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	db00      	blt.n	80072ee <PCD_EP_ISR_Handler+0x13e>
 80072ec:	e2bb      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a86      	ldr	r2, [pc, #536]	@ (8007510 <PCD_EP_ISR_Handler+0x360>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007300:	2180      	movs	r1, #128	@ 0x80
 8007302:	430a      	orrs	r2, r1
 8007304:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f7ff fa77 	bl	8006804 <PCD_GET_EP_RX_CNT>
 8007316:	0003      	movs	r3, r0
 8007318:	001a      	movs	r2, r3
 800731a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800731e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <PCD_EP_ISR_Handler+0x1ac>
 8007326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d016      	beq.n	800735c <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
 8007332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007338:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800733a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800733e:	b29b      	uxth	r3, r3
 8007340:	f004 fc18 	bl	800bb74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	18d2      	adds	r2, r2, r3
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2100      	movs	r1, #0
 8007356:	0018      	movs	r0, r3
 8007358:	f007 f915 	bl	800e586 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	2132      	movs	r1, #50	@ 0x32
 8007364:	187b      	adds	r3, r7, r1
 8007366:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007368:	187b      	adds	r3, r7, r1
 800736a:	881a      	ldrh	r2, [r3, #0]
 800736c:	2380      	movs	r3, #128	@ 0x80
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	4013      	ands	r3, r2
 8007372:	d000      	beq.n	8007376 <PCD_EP_ISR_Handler+0x1c6>
 8007374:	e277      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
 8007376:	187b      	adds	r3, r7, r1
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	23c0      	movs	r3, #192	@ 0xc0
 800737c:	019b      	lsls	r3, r3, #6
 800737e:	401a      	ands	r2, r3
 8007380:	23c0      	movs	r3, #192	@ 0xc0
 8007382:	019b      	lsls	r3, r3, #6
 8007384:	429a      	cmp	r2, r3
 8007386:	d100      	bne.n	800738a <PCD_EP_ISR_Handler+0x1da>
 8007388:	e26d      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800738a:	4b60      	ldr	r3, [pc, #384]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	4b5f      	ldr	r3, [pc, #380]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 8007390:	0192      	lsls	r2, r2, #6
 8007392:	0992      	lsrs	r2, r2, #6
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b3e      	cmp	r3, #62	@ 0x3e
 800739c:	d916      	bls.n	80073cc <PCD_EP_ISR_Handler+0x21c>
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	221f      	movs	r2, #31
 80073ac:	4013      	ands	r3, r2
 80073ae:	d102      	bne.n	80073b6 <PCD_EP_ISR_Handler+0x206>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	4b55      	ldr	r3, [pc, #340]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	069b      	lsls	r3, r3, #26
 80073be:	431a      	orrs	r2, r3
 80073c0:	4b52      	ldr	r3, [pc, #328]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	0609      	lsls	r1, r1, #24
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	e01e      	b.n	800740a <PCD_EP_ISR_Handler+0x25a>
 80073cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <PCD_EP_ISR_Handler+0x234>
 80073d4:	4b4d      	ldr	r3, [pc, #308]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	4b4c      	ldr	r3, [pc, #304]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 80073da:	2180      	movs	r1, #128	@ 0x80
 80073dc:	0609      	lsls	r1, r1, #24
 80073de:	430a      	orrs	r2, r1
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	e012      	b.n	800740a <PCD_EP_ISR_Handler+0x25a>
 80073e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	085b      	lsrs	r3, r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2201      	movs	r2, #1
 80073f2:	4013      	ands	r3, r2
 80073f4:	d002      	beq.n	80073fc <PCD_EP_ISR_Handler+0x24c>
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	3301      	adds	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	4b43      	ldr	r3, [pc, #268]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	069a      	lsls	r2, r3, #26
 8007404:	4b41      	ldr	r3, [pc, #260]	@ (800750c <PCD_EP_ISR_Handler+0x35c>)
 8007406:	430a      	orrs	r2, r1
 8007408:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a40      	ldr	r2, [pc, #256]	@ (8007514 <PCD_EP_ISR_Handler+0x364>)
 8007412:	4013      	ands	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2280      	movs	r2, #128	@ 0x80
 800741a:	0152      	lsls	r2, r2, #5
 800741c:	4053      	eors	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	2280      	movs	r2, #128	@ 0x80
 8007424:	0192      	lsls	r2, r2, #6
 8007426:	4053      	eors	r3, r2
 8007428:	613b      	str	r3, [r7, #16]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4939      	ldr	r1, [pc, #228]	@ (8007518 <PCD_EP_ISR_Handler+0x368>)
 8007432:	430a      	orrs	r2, r1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e216      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	001a      	movs	r2, r3
 800743e:	2121      	movs	r1, #33	@ 0x21
 8007440:	187b      	adds	r3, r7, r1
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	2032      	movs	r0, #50	@ 0x32
 800744c:	183b      	adds	r3, r7, r0
 800744e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8007450:	183b      	adds	r3, r7, r0
 8007452:	2200      	movs	r2, #0
 8007454:	5e9b      	ldrsh	r3, [r3, r2]
 8007456:	2b00      	cmp	r3, #0
 8007458:	db00      	blt.n	800745c <PCD_EP_ISR_Handler+0x2ac>
 800745a:	e0e0      	b.n	800761e <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	001a      	movs	r2, r3
 8007462:	187b      	adds	r3, r7, r1
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a28      	ldr	r2, [pc, #160]	@ (8007510 <PCD_EP_ISR_Handler+0x360>)
 800746e:	4013      	ands	r3, r2
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	001a      	movs	r2, r3
 8007478:	0008      	movs	r0, r1
 800747a:	187b      	adds	r3, r7, r1
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	18d3      	adds	r3, r2, r3
 8007482:	69fa      	ldr	r2, [r7, #28]
 8007484:	2180      	movs	r1, #128	@ 0x80
 8007486:	430a      	orrs	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800748a:	183b      	adds	r3, r7, r0
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	0013      	movs	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	189b      	adds	r3, r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	3351      	adds	r3, #81	@ 0x51
 8007498:	33ff      	adds	r3, #255	@ 0xff
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	18d3      	adds	r3, r2, r3
 800749e:	3304      	adds	r3, #4
 80074a0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80074a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a4:	7b1b      	ldrb	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d11c      	bne.n	80074e4 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2524      	movs	r5, #36	@ 0x24
 80074b4:	197c      	adds	r4, r7, r5
 80074b6:	0019      	movs	r1, r3
 80074b8:	0010      	movs	r0, r2
 80074ba:	f7ff f9a3 	bl	8006804 <PCD_GET_EP_RX_CNT>
 80074be:	0003      	movs	r3, r0
 80074c0:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 80074c2:	002c      	movs	r4, r5
 80074c4:	193b      	adds	r3, r7, r4
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d100      	bne.n	80074ce <PCD_EP_ISR_Handler+0x31e>
 80074cc:	e07f      	b.n	80075ce <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d4:	6959      	ldr	r1, [r3, #20]
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d8:	88da      	ldrh	r2, [r3, #6]
 80074da:	193b      	adds	r3, r7, r4
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	f004 fb49 	bl	800bb74 <USB_ReadPMA>
 80074e2:	e074      	b.n	80075ce <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	78db      	ldrb	r3, [r3, #3]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d117      	bne.n	800751c <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80074ec:	2324      	movs	r3, #36	@ 0x24
 80074ee:	18fc      	adds	r4, r7, r3
 80074f0:	2332      	movs	r3, #50	@ 0x32
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	881a      	ldrh	r2, [r3, #0]
 80074f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 f9c8 	bl	8007890 <HAL_PCD_EP_DB_Receive>
 8007500:	0003      	movs	r3, r0
 8007502:	8023      	strh	r3, [r4, #0]
 8007504:	e063      	b.n	80075ce <PCD_EP_ISR_Handler+0x41e>
 8007506:	46c0      	nop			@ (mov r8, r8)
 8007508:	07ff8f0f 	.word	0x07ff8f0f
 800750c:	40009800 	.word	0x40009800
 8007510:	07ff0f8f 	.word	0x07ff0f8f
 8007514:	07ffbf8f 	.word	0x07ffbf8f
 8007518:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	001a      	movs	r2, r3
 8007522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	18d3      	adds	r3, r2, r3
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4ad4      	ldr	r2, [pc, #848]	@ (8007880 <PCD_EP_ISR_Handler+0x6d0>)
 800752e:	4013      	ands	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	001a      	movs	r2, r3
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	18d3      	adds	r3, r2, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	49d0      	ldr	r1, [pc, #832]	@ (8007884 <PCD_EP_ISR_Handler+0x6d4>)
 8007544:	430a      	orrs	r2, r1
 8007546:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	001a      	movs	r2, r3
 800754e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	18d3      	adds	r3, r2, r3
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	2380      	movs	r3, #128	@ 0x80
 800755a:	01db      	lsls	r3, r3, #7
 800755c:	4013      	ands	r3, r2
 800755e:	d01b      	beq.n	8007598 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	2524      	movs	r5, #36	@ 0x24
 800756a:	197c      	adds	r4, r7, r5
 800756c:	0019      	movs	r1, r3
 800756e:	0010      	movs	r0, r2
 8007570:	f7ff f96a 	bl	8006848 <PCD_GET_EP_DBUF0_CNT>
 8007574:	0003      	movs	r3, r0
 8007576:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8007578:	002c      	movs	r4, r5
 800757a:	193b      	adds	r3, r7, r4
 800757c:	881b      	ldrh	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d025      	beq.n	80075ce <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007588:	6959      	ldr	r1, [r3, #20]
 800758a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800758c:	891a      	ldrh	r2, [r3, #8]
 800758e:	193b      	adds	r3, r7, r4
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	f004 faef 	bl	800bb74 <USB_ReadPMA>
 8007596:	e01a      	b.n	80075ce <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2524      	movs	r5, #36	@ 0x24
 80075a2:	197c      	adds	r4, r7, r5
 80075a4:	0019      	movs	r1, r3
 80075a6:	0010      	movs	r0, r2
 80075a8:	f7ff f970 	bl	800688c <PCD_GET_EP_DBUF1_CNT>
 80075ac:	0003      	movs	r3, r0
 80075ae:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80075b0:	002c      	movs	r4, r5
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
 80075be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c0:	6959      	ldr	r1, [r3, #20]
 80075c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c4:	895a      	ldrh	r2, [r3, #10]
 80075c6:	193b      	adds	r3, r7, r4
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	f004 fad3 	bl	800bb74 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80075ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	2124      	movs	r1, #36	@ 0x24
 80075d4:	187b      	adds	r3, r7, r1
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	18d2      	adds	r2, r2, r3
 80075da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80075de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e0:	695a      	ldr	r2, [r3, #20]
 80075e2:	187b      	adds	r3, r7, r1
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	18d2      	adds	r2, r2, r3
 80075e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80075ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d005      	beq.n	8007600 <PCD_EP_ISR_Handler+0x450>
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d207      	bcs.n	8007610 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0011      	movs	r1, r2
 8007608:	0018      	movs	r0, r3
 800760a:	f006 ffbc 	bl	800e586 <HAL_PCD_DataOutStageCallback>
 800760e:	e006      	b.n	800761e <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007616:	0011      	movs	r1, r2
 8007618:	0018      	movs	r0, r3
 800761a:	f003 f91b 	bl	800a854 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800761e:	2032      	movs	r0, #50	@ 0x32
 8007620:	183b      	adds	r3, r7, r0
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	2280      	movs	r2, #128	@ 0x80
 8007626:	4013      	ands	r3, r2
 8007628:	d100      	bne.n	800762c <PCD_EP_ISR_Handler+0x47c>
 800762a:	e11c      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 800762c:	2121      	movs	r1, #33	@ 0x21
 800762e:	187b      	adds	r3, r7, r1
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	0013      	movs	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	189b      	adds	r3, r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	3310      	adds	r3, #16
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	18d3      	adds	r3, r2, r3
 8007640:	3304      	adds	r3, #4
 8007642:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	001a      	movs	r2, r3
 800764a:	187b      	adds	r3, r7, r1
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	18d3      	adds	r3, r2, r3
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a8c      	ldr	r2, [pc, #560]	@ (8007888 <PCD_EP_ISR_Handler+0x6d8>)
 8007656:	4013      	ands	r3, r2
 8007658:	62bb      	str	r3, [r7, #40]	@ 0x28
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	001a      	movs	r2, r3
 8007660:	187b      	adds	r3, r7, r1
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	18d3      	adds	r3, r2, r3
 8007668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800766a:	2180      	movs	r1, #128	@ 0x80
 800766c:	0209      	lsls	r1, r1, #8
 800766e:	430a      	orrs	r2, r1
 8007670:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007674:	78db      	ldrb	r3, [r3, #3]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d000      	beq.n	800767c <PCD_EP_ISR_Handler+0x4cc>
 800767a:	e0a3      	b.n	80077c4 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 800767c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800767e:	2200      	movs	r2, #0
 8007680:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007684:	7b1b      	ldrb	r3, [r3, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d100      	bne.n	800768c <PCD_EP_ISR_Handler+0x4dc>
 800768a:	e093      	b.n	80077b4 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800768c:	183b      	adds	r3, r7, r0
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	2240      	movs	r2, #64	@ 0x40
 8007692:	4013      	ands	r3, r2
 8007694:	d047      	beq.n	8007726 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d121      	bne.n	80076e2 <PCD_EP_ISR_Handler+0x532>
 800769e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	00db      	lsls	r3, r3, #3
 80076a4:	4a79      	ldr	r2, [pc, #484]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80076a6:	4694      	mov	ip, r2
 80076a8:	4463      	add	r3, ip
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	4976      	ldr	r1, [pc, #472]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80076b4:	468c      	mov	ip, r1
 80076b6:	4463      	add	r3, ip
 80076b8:	0192      	lsls	r2, r2, #6
 80076ba:	0992      	lsrs	r2, r2, #6
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4a71      	ldr	r2, [pc, #452]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80076c6:	4694      	mov	ip, r2
 80076c8:	4463      	add	r3, ip
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	496e      	ldr	r1, [pc, #440]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80076d4:	468c      	mov	ip, r1
 80076d6:	4463      	add	r3, ip
 80076d8:	2180      	movs	r1, #128	@ 0x80
 80076da:	0609      	lsls	r1, r1, #24
 80076dc:	430a      	orrs	r2, r1
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	e068      	b.n	80077b4 <PCD_EP_ISR_Handler+0x604>
 80076e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d164      	bne.n	80077b4 <PCD_EP_ISR_Handler+0x604>
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	4a66      	ldr	r2, [pc, #408]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80076f2:	4694      	mov	ip, r2
 80076f4:	4463      	add	r3, ip
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	4963      	ldr	r1, [pc, #396]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007700:	468c      	mov	ip, r1
 8007702:	4463      	add	r3, ip
 8007704:	0412      	lsls	r2, r2, #16
 8007706:	0c12      	lsrs	r2, r2, #16
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	00db      	lsls	r3, r3, #3
 8007710:	4a5e      	ldr	r2, [pc, #376]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007712:	189a      	adds	r2, r3, r2
 8007714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	495c      	ldr	r1, [pc, #368]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 800771c:	468c      	mov	ip, r1
 800771e:	4463      	add	r3, ip
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e046      	b.n	80077b4 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d121      	bne.n	8007772 <PCD_EP_ISR_Handler+0x5c2>
 800772e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	4a55      	ldr	r2, [pc, #340]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007736:	4694      	mov	ip, r2
 8007738:	4463      	add	r3, ip
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4952      	ldr	r1, [pc, #328]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007744:	468c      	mov	ip, r1
 8007746:	4463      	add	r3, ip
 8007748:	0192      	lsls	r2, r2, #6
 800774a:	0992      	lsrs	r2, r2, #6
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4a4d      	ldr	r2, [pc, #308]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007756:	4694      	mov	ip, r2
 8007758:	4463      	add	r3, ip
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	494a      	ldr	r1, [pc, #296]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007764:	468c      	mov	ip, r1
 8007766:	4463      	add	r3, ip
 8007768:	2180      	movs	r1, #128	@ 0x80
 800776a:	0609      	lsls	r1, r1, #24
 800776c:	430a      	orrs	r2, r1
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	e020      	b.n	80077b4 <PCD_EP_ISR_Handler+0x604>
 8007772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d11c      	bne.n	80077b4 <PCD_EP_ISR_Handler+0x604>
 800777a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4a42      	ldr	r2, [pc, #264]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007782:	4694      	mov	ip, r2
 8007784:	4463      	add	r3, ip
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	493f      	ldr	r1, [pc, #252]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 8007790:	468c      	mov	ip, r1
 8007792:	4463      	add	r3, ip
 8007794:	0412      	lsls	r2, r2, #16
 8007796:	0c12      	lsrs	r2, r2, #16
 8007798:	605a      	str	r2, [r3, #4]
 800779a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4a3a      	ldr	r2, [pc, #232]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80077a2:	189a      	adds	r2, r3, r2
 80077a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4938      	ldr	r1, [pc, #224]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80077ac:	468c      	mov	ip, r1
 80077ae:	4463      	add	r3, ip
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80077b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	0011      	movs	r1, r2
 80077bc:	0018      	movs	r0, r3
 80077be:	f006 ff03 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
 80077c2:	e050      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80077c4:	2332      	movs	r3, #50	@ 0x32
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	881a      	ldrh	r2, [r3, #0]
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4013      	ands	r3, r2
 80077d0:	d141      	bne.n	8007856 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	4a2c      	ldr	r2, [pc, #176]	@ (800788c <PCD_EP_ISR_Handler+0x6dc>)
 80077da:	4694      	mov	ip, r2
 80077dc:	4463      	add	r3, ip
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	0c1b      	lsrs	r3, r3, #16
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	2126      	movs	r1, #38	@ 0x26
 80077e6:	187b      	adds	r3, r7, r1
 80077e8:	0592      	lsls	r2, r2, #22
 80077ea:	0d92      	lsrs	r2, r2, #22
 80077ec:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	187b      	adds	r3, r7, r1
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d907      	bls.n	800780a <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 80077fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	187b      	adds	r3, r7, r1
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	1ad2      	subs	r2, r2, r3
 8007804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007806:	619a      	str	r2, [r3, #24]
 8007808:	e002      	b.n	8007810 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 800780a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780c:	2200      	movs	r2, #0
 800780e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d107      	bne.n	8007828 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	0011      	movs	r1, r2
 8007820:	0018      	movs	r0, r3
 8007822:	f006 fed1 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
 8007826:	e01e      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	2126      	movs	r1, #38	@ 0x26
 800782e:	187b      	adds	r3, r7, r1
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	18d2      	adds	r2, r2, r3
 8007834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007836:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800783a:	69da      	ldr	r2, [r3, #28]
 800783c:	187b      	adds	r3, r7, r1
 800783e:	881b      	ldrh	r3, [r3, #0]
 8007840:	18d2      	adds	r2, r2, r3
 8007842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007844:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800784c:	0011      	movs	r1, r2
 800784e:	0018      	movs	r0, r3
 8007850:	f003 f800 	bl	800a854 <USB_EPStartXfer>
 8007854:	e007      	b.n	8007866 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007856:	2332      	movs	r3, #50	@ 0x32
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	881a      	ldrh	r2, [r3, #0]
 800785c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f8ff 	bl	8007a64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800786c:	2380      	movs	r3, #128	@ 0x80
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	4013      	ands	r3, r2
 8007872:	d000      	beq.n	8007876 <PCD_EP_ISR_Handler+0x6c6>
 8007874:	e4a1      	b.n	80071ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	0018      	movs	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	b00e      	add	sp, #56	@ 0x38
 800787e:	bdb0      	pop	{r4, r5, r7, pc}
 8007880:	07ff8f8f 	.word	0x07ff8f8f
 8007884:	000080c0 	.word	0x000080c0
 8007888:	07ff8f0f 	.word	0x07ff8f0f
 800788c:	40009800 	.word	0x40009800

08007890 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b08a      	sub	sp, #40	@ 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	1dbb      	adds	r3, r7, #6
 800789c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800789e:	1dbb      	adds	r3, r7, #6
 80078a0:	881a      	ldrh	r2, [r3, #0]
 80078a2:	2380      	movs	r3, #128	@ 0x80
 80078a4:	01db      	lsls	r3, r3, #7
 80078a6:	4013      	ands	r3, r2
 80078a8:	d067      	beq.n	800797a <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	251e      	movs	r5, #30
 80078b4:	197c      	adds	r4, r7, r5
 80078b6:	0019      	movs	r1, r3
 80078b8:	0010      	movs	r0, r2
 80078ba:	f7fe ffc5 	bl	8006848 <PCD_GET_EP_DBUF0_CNT>
 80078be:	0003      	movs	r3, r0
 80078c0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	197b      	adds	r3, r7, r5
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d307      	bcc.n	80078de <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	699a      	ldr	r2, [r3, #24]
 80078d2:	197b      	adds	r3, r7, r5
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	619a      	str	r2, [r3, #24]
 80078dc:	e002      	b.n	80078e4 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11a      	bne.n	8007922 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	001a      	movs	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	18d3      	adds	r3, r2, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a55      	ldr	r2, [pc, #340]	@ (8007a54 <HAL_PCD_EP_DB_Receive+0x1c4>)
 80078fe:	4013      	ands	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2280      	movs	r2, #128	@ 0x80
 8007906:	0192      	lsls	r2, r2, #6
 8007908:	4053      	eors	r3, r2
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	001a      	movs	r2, r3
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	18d3      	adds	r3, r2, r3
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	494e      	ldr	r1, [pc, #312]	@ (8007a58 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800791e:	430a      	orrs	r2, r1
 8007920:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007922:	1dbb      	adds	r3, r7, #6
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	2240      	movs	r2, #64	@ 0x40
 8007928:	4013      	ands	r3, r2
 800792a:	d015      	beq.n	8007958 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	001a      	movs	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	18d3      	adds	r3, r2, r3
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a47      	ldr	r2, [pc, #284]	@ (8007a5c <HAL_PCD_EP_DB_Receive+0x1cc>)
 800793e:	4013      	ands	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	001a      	movs	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	18d3      	adds	r3, r2, r3
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4943      	ldr	r1, [pc, #268]	@ (8007a60 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007958:	241e      	movs	r4, #30
 800795a:	193b      	adds	r3, r7, r4
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d100      	bne.n	8007964 <HAL_PCD_EP_DB_Receive+0xd4>
 8007962:	e070      	b.n	8007a46 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6959      	ldr	r1, [r3, #20]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	891a      	ldrh	r2, [r3, #8]
 8007970:	193b      	adds	r3, r7, r4
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	f004 f8fe 	bl	800bb74 <USB_ReadPMA>
 8007978:	e065      	b.n	8007a46 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	251e      	movs	r5, #30
 8007984:	197c      	adds	r4, r7, r5
 8007986:	0019      	movs	r1, r3
 8007988:	0010      	movs	r0, r2
 800798a:	f7fe ff7f 	bl	800688c <PCD_GET_EP_DBUF1_CNT>
 800798e:	0003      	movs	r3, r0
 8007990:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	197b      	adds	r3, r7, r5
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d307      	bcc.n	80079ae <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	197b      	adds	r3, r7, r5
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	619a      	str	r2, [r3, #24]
 80079ac:	e002      	b.n	80079b4 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2200      	movs	r2, #0
 80079b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d11a      	bne.n	80079f2 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	001a      	movs	r2, r3
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	18d3      	adds	r3, r2, r3
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a21      	ldr	r2, [pc, #132]	@ (8007a54 <HAL_PCD_EP_DB_Receive+0x1c4>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	2280      	movs	r2, #128	@ 0x80
 80079d6:	0192      	lsls	r2, r2, #6
 80079d8:	4053      	eors	r3, r2
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	001a      	movs	r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	18d3      	adds	r3, r2, r3
 80079ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ec:	491a      	ldr	r1, [pc, #104]	@ (8007a58 <HAL_PCD_EP_DB_Receive+0x1c8>)
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80079f2:	1dbb      	adds	r3, r7, #6
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	2240      	movs	r2, #64	@ 0x40
 80079f8:	4013      	ands	r3, r2
 80079fa:	d115      	bne.n	8007a28 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	001a      	movs	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	18d3      	adds	r3, r2, r3
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a13      	ldr	r2, [pc, #76]	@ (8007a5c <HAL_PCD_EP_DB_Receive+0x1cc>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	623b      	str	r3, [r7, #32]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	001a      	movs	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	18d3      	adds	r3, r2, r3
 8007a20:	6a3a      	ldr	r2, [r7, #32]
 8007a22:	490f      	ldr	r1, [pc, #60]	@ (8007a60 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8007a24:	430a      	orrs	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8007a28:	241e      	movs	r4, #30
 8007a2a:	193b      	adds	r3, r7, r4
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6959      	ldr	r1, [r3, #20]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	895a      	ldrh	r2, [r3, #10]
 8007a3e:	193b      	adds	r3, r7, r4
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	f004 f897 	bl	800bb74 <USB_ReadPMA>
    }
  }

  return count;
 8007a46:	231e      	movs	r3, #30
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	881b      	ldrh	r3, [r3, #0]
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b00a      	add	sp, #40	@ 0x28
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	07ffbf8f 	.word	0x07ffbf8f
 8007a58:	00008080 	.word	0x00008080
 8007a5c:	07ff8f8f 	.word	0x07ff8f8f
 8007a60:	000080c0 	.word	0x000080c0

08007a64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007a64:	b5b0      	push	{r4, r5, r7, lr}
 8007a66:	b08e      	sub	sp, #56	@ 0x38
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	1dbb      	adds	r3, r7, #6
 8007a70:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a72:	1dbb      	adds	r3, r7, #6
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	2240      	movs	r2, #64	@ 0x40
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d100      	bne.n	8007a7e <HAL_PCD_EP_DB_Transmit+0x1a>
 8007a7c:	e1c3      	b.n	8007e06 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	251e      	movs	r5, #30
 8007a88:	197c      	adds	r4, r7, r5
 8007a8a:	0019      	movs	r1, r3
 8007a8c:	0010      	movs	r0, r2
 8007a8e:	f7fe fedb 	bl	8006848 <PCD_GET_EP_DBUF0_CNT>
 8007a92:	0003      	movs	r3, r0
 8007a94:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	197b      	adds	r3, r7, r5
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d907      	bls.n	8007ab2 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	699a      	ldr	r2, [r3, #24]
 8007aa6:	197b      	adds	r3, r7, r5
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	1ad2      	subs	r2, r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	619a      	str	r2, [r3, #24]
 8007ab0:	e002      	b.n	8007ab8 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d000      	beq.n	8007ac2 <HAL_PCD_EP_DB_Transmit+0x5e>
 8007ac0:	e0b2      	b.n	8007c28 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d121      	bne.n	8007b0e <HAL_PCD_EP_DB_Transmit+0xaa>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	00db      	lsls	r3, r3, #3
 8007ad0:	4ada      	ldr	r2, [pc, #872]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	4463      	add	r3, ip
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	49d7      	ldr	r1, [pc, #860]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007ae0:	468c      	mov	ip, r1
 8007ae2:	4463      	add	r3, ip
 8007ae4:	0192      	lsls	r2, r2, #6
 8007ae6:	0992      	lsrs	r2, r2, #6
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4ad2      	ldr	r2, [pc, #840]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007af2:	4694      	mov	ip, r2
 8007af4:	4463      	add	r3, ip
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	49cf      	ldr	r1, [pc, #828]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b00:	468c      	mov	ip, r1
 8007b02:	4463      	add	r3, ip
 8007b04:	2180      	movs	r1, #128	@ 0x80
 8007b06:	0609      	lsls	r1, r1, #24
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	e020      	b.n	8007b50 <HAL_PCD_EP_DB_Transmit+0xec>
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d11c      	bne.n	8007b50 <HAL_PCD_EP_DB_Transmit+0xec>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4ac7      	ldr	r2, [pc, #796]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b1e:	4694      	mov	ip, r2
 8007b20:	4463      	add	r3, ip
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	49c4      	ldr	r1, [pc, #784]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b2c:	468c      	mov	ip, r1
 8007b2e:	4463      	add	r3, ip
 8007b30:	0412      	lsls	r2, r2, #16
 8007b32:	0c12      	lsrs	r2, r2, #16
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4abf      	ldr	r2, [pc, #764]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b3e:	189a      	adds	r2, r3, r2
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	49bd      	ldr	r1, [pc, #756]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b48:	468c      	mov	ip, r1
 8007b4a:	4463      	add	r3, ip
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d121      	bne.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x138>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	4ab7      	ldr	r2, [pc, #732]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b60:	4694      	mov	ip, r2
 8007b62:	4463      	add	r3, ip
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	49b3      	ldr	r1, [pc, #716]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b6e:	468c      	mov	ip, r1
 8007b70:	4463      	add	r3, ip
 8007b72:	0192      	lsls	r2, r2, #6
 8007b74:	0992      	lsrs	r2, r2, #6
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4aaf      	ldr	r2, [pc, #700]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b80:	4694      	mov	ip, r2
 8007b82:	4463      	add	r3, ip
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	49ab      	ldr	r1, [pc, #684]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007b8e:	468c      	mov	ip, r1
 8007b90:	4463      	add	r3, ip
 8007b92:	2180      	movs	r1, #128	@ 0x80
 8007b94:	0609      	lsls	r1, r1, #24
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	e020      	b.n	8007bde <HAL_PCD_EP_DB_Transmit+0x17a>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d11c      	bne.n	8007bde <HAL_PCD_EP_DB_Transmit+0x17a>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4aa4      	ldr	r2, [pc, #656]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007bac:	4694      	mov	ip, r2
 8007bae:	4463      	add	r3, ip
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	49a0      	ldr	r1, [pc, #640]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007bba:	468c      	mov	ip, r1
 8007bbc:	4463      	add	r3, ip
 8007bbe:	0412      	lsls	r2, r2, #16
 8007bc0:	0c12      	lsrs	r2, r2, #16
 8007bc2:	605a      	str	r2, [r3, #4]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4a9c      	ldr	r2, [pc, #624]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007bcc:	189a      	adds	r2, r3, r2
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4999      	ldr	r1, [pc, #612]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007bd6:	468c      	mov	ip, r1
 8007bd8:	4463      	add	r3, ip
 8007bda:	6852      	ldr	r2, [r2, #4]
 8007bdc:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	0011      	movs	r1, r2
 8007be6:	0018      	movs	r0, r3
 8007be8:	f006 fcee 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007bec:	1dbb      	adds	r3, r7, #6
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	2380      	movs	r3, #128	@ 0x80
 8007bf2:	01db      	lsls	r3, r3, #7
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d100      	bne.n	8007bfa <HAL_PCD_EP_DB_Transmit+0x196>
 8007bf8:	e2d5      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	001a      	movs	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a8d      	ldr	r2, [pc, #564]	@ (8007e40 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	001a      	movs	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c20:	4988      	ldr	r1, [pc, #544]	@ (8007e44 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007c22:	430a      	orrs	r2, r1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e2be      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007c28:	1dbb      	adds	r3, r7, #6
 8007c2a:	881a      	ldrh	r2, [r3, #0]
 8007c2c:	2380      	movs	r3, #128	@ 0x80
 8007c2e:	01db      	lsls	r3, r3, #7
 8007c30:	4013      	ands	r3, r2
 8007c32:	d015      	beq.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	001a      	movs	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	18d3      	adds	r3, r2, r3
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a7e      	ldr	r2, [pc, #504]	@ (8007e40 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	001a      	movs	r2, r3
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	18d3      	adds	r3, r2, r3
 8007c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c5a:	497a      	ldr	r1, [pc, #488]	@ (8007e44 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2224      	movs	r2, #36	@ 0x24
 8007c64:	5c9b      	ldrb	r3, [r3, r2]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d000      	beq.n	8007c6c <HAL_PCD_EP_DB_Transmit+0x208>
 8007c6a:	e29c      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	211e      	movs	r1, #30
 8007c72:	187b      	adds	r3, r7, r1
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	18d2      	adds	r2, r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	69da      	ldr	r2, [r3, #28]
 8007c80:	187b      	adds	r3, r7, r1
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	18d2      	adds	r2, r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d309      	bcc.n	8007caa <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	6a1a      	ldr	r2, [r3, #32]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	1ad2      	subs	r2, r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	621a      	str	r2, [r3, #32]
 8007ca8:	e016      	b.n	8007cd8 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d108      	bne.n	8007cc4 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 8007cb2:	231e      	movs	r3, #30
 8007cb4:	18fb      	adds	r3, r7, r3
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2224      	movs	r2, #36	@ 0x24
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	5499      	strb	r1, [r3, r2]
 8007cc2:	e009      	b.n	8007cd8 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2224      	movs	r2, #36	@ 0x24
 8007cc8:	2100      	movs	r1, #0
 8007cca:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d162      	bne.n	8007da6 <HAL_PCD_EP_DB_Transmit+0x342>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4a55      	ldr	r2, [pc, #340]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007ce8:	4694      	mov	ip, r2
 8007cea:	4463      	add	r3, ip
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4951      	ldr	r1, [pc, #324]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007cf6:	468c      	mov	ip, r1
 8007cf8:	4463      	add	r3, ip
 8007cfa:	0192      	lsls	r2, r2, #6
 8007cfc:	0992      	lsrs	r2, r2, #6
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d04:	d91e      	bls.n	8007d44 <HAL_PCD_EP_DB_Transmit+0x2e0>
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	095b      	lsrs	r3, r3, #5
 8007d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	221f      	movs	r2, #31
 8007d10:	4013      	ands	r3, r2
 8007d12:	d102      	bne.n	8007d1a <HAL_PCD_EP_DB_Transmit+0x2b6>
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	3b01      	subs	r3, #1
 8007d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4a46      	ldr	r2, [pc, #280]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d22:	4694      	mov	ip, r2
 8007d24:	4463      	add	r3, ip
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	069b      	lsls	r3, r3, #26
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4941      	ldr	r1, [pc, #260]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d36:	468c      	mov	ip, r1
 8007d38:	4463      	add	r3, ip
 8007d3a:	2180      	movs	r1, #128	@ 0x80
 8007d3c:	0609      	lsls	r1, r1, #24
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e055      	b.n	8007df0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d111      	bne.n	8007d6e <HAL_PCD_EP_DB_Transmit+0x30a>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	4a3a      	ldr	r2, [pc, #232]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d52:	4694      	mov	ip, r2
 8007d54:	4463      	add	r3, ip
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4937      	ldr	r1, [pc, #220]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d60:	468c      	mov	ip, r1
 8007d62:	4463      	add	r3, ip
 8007d64:	2180      	movs	r1, #128	@ 0x80
 8007d66:	0609      	lsls	r1, r1, #24
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	e040      	b.n	8007df0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	085b      	lsrs	r3, r3, #1
 8007d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	2201      	movs	r2, #1
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d002      	beq.n	8007d82 <HAL_PCD_EP_DB_Transmit+0x31e>
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	3301      	adds	r3, #1
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4a2c      	ldr	r2, [pc, #176]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d8a:	4694      	mov	ip, r2
 8007d8c:	4463      	add	r3, ip
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	069a      	lsls	r2, r3, #26
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4828      	ldr	r0, [pc, #160]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007d9c:	4684      	mov	ip, r0
 8007d9e:	4463      	add	r3, ip
 8007da0:	430a      	orrs	r2, r1
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	e024      	b.n	8007df0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d120      	bne.n	8007df0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4a21      	ldr	r2, [pc, #132]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007db6:	4694      	mov	ip, r2
 8007db8:	4463      	add	r3, ip
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	491e      	ldr	r1, [pc, #120]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007dc4:	468c      	mov	ip, r1
 8007dc6:	4463      	add	r3, ip
 8007dc8:	0412      	lsls	r2, r2, #16
 8007dca:	0c12      	lsrs	r2, r2, #16
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4a19      	ldr	r2, [pc, #100]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007dd6:	4694      	mov	ip, r2
 8007dd8:	4463      	add	r3, ip
 8007dda:	6819      	ldr	r1, [r3, #0]
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	041a      	lsls	r2, r3, #16
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4815      	ldr	r0, [pc, #84]	@ (8007e3c <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8007de8:	4684      	mov	ip, r0
 8007dea:	4463      	add	r3, ip
 8007dec:	430a      	orrs	r2, r1
 8007dee:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6959      	ldr	r1, [r3, #20]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	891a      	ldrh	r2, [r3, #8]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f003 fe42 	bl	800ba88 <USB_WritePMA>
 8007e04:	e1cf      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	251e      	movs	r5, #30
 8007e10:	197c      	adds	r4, r7, r5
 8007e12:	0019      	movs	r1, r3
 8007e14:	0010      	movs	r0, r2
 8007e16:	f7fe fd39 	bl	800688c <PCD_GET_EP_DBUF1_CNT>
 8007e1a:	0003      	movs	r3, r0
 8007e1c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	197b      	adds	r3, r7, r5
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d30e      	bcc.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	197b      	adds	r3, r7, r5
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	1ad2      	subs	r2, r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	619a      	str	r2, [r3, #24]
 8007e38:	e009      	b.n	8007e4e <HAL_PCD_EP_DB_Transmit+0x3ea>
 8007e3a:	46c0      	nop			@ (mov r8, r8)
 8007e3c:	40009800 	.word	0x40009800
 8007e40:	07ff8f8f 	.word	0x07ff8f8f
 8007e44:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d000      	beq.n	8007e58 <HAL_PCD_EP_DB_Transmit+0x3f4>
 8007e56:	e0b2      	b.n	8007fbe <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d121      	bne.n	8007ea4 <HAL_PCD_EP_DB_Transmit+0x440>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4ab5      	ldr	r2, [pc, #724]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007e68:	4694      	mov	ip, r2
 8007e6a:	4463      	add	r3, ip
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	49b1      	ldr	r1, [pc, #708]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007e76:	468c      	mov	ip, r1
 8007e78:	4463      	add	r3, ip
 8007e7a:	0192      	lsls	r2, r2, #6
 8007e7c:	0992      	lsrs	r2, r2, #6
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4aad      	ldr	r2, [pc, #692]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007e88:	4694      	mov	ip, r2
 8007e8a:	4463      	add	r3, ip
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	49a9      	ldr	r1, [pc, #676]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007e96:	468c      	mov	ip, r1
 8007e98:	4463      	add	r3, ip
 8007e9a:	2180      	movs	r1, #128	@ 0x80
 8007e9c:	0609      	lsls	r1, r1, #24
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e020      	b.n	8007ee6 <HAL_PCD_EP_DB_Transmit+0x482>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d11c      	bne.n	8007ee6 <HAL_PCD_EP_DB_Transmit+0x482>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	4aa2      	ldr	r2, [pc, #648]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007eb4:	4694      	mov	ip, r2
 8007eb6:	4463      	add	r3, ip
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	499e      	ldr	r1, [pc, #632]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007ec2:	468c      	mov	ip, r1
 8007ec4:	4463      	add	r3, ip
 8007ec6:	0412      	lsls	r2, r2, #16
 8007ec8:	0c12      	lsrs	r2, r2, #16
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4a9a      	ldr	r2, [pc, #616]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007ed4:	189a      	adds	r2, r3, r2
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4997      	ldr	r1, [pc, #604]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007ede:	468c      	mov	ip, r1
 8007ee0:	4463      	add	r3, ip
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d121      	bne.n	8007f32 <HAL_PCD_EP_DB_Transmit+0x4ce>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	4a91      	ldr	r2, [pc, #580]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007ef6:	4694      	mov	ip, r2
 8007ef8:	4463      	add	r3, ip
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	498e      	ldr	r1, [pc, #568]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f04:	468c      	mov	ip, r1
 8007f06:	4463      	add	r3, ip
 8007f08:	0192      	lsls	r2, r2, #6
 8007f0a:	0992      	lsrs	r2, r2, #6
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	4a89      	ldr	r2, [pc, #548]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f16:	4694      	mov	ip, r2
 8007f18:	4463      	add	r3, ip
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	4986      	ldr	r1, [pc, #536]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f24:	468c      	mov	ip, r1
 8007f26:	4463      	add	r3, ip
 8007f28:	2180      	movs	r1, #128	@ 0x80
 8007f2a:	0609      	lsls	r1, r1, #24
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
 8007f30:	e020      	b.n	8007f74 <HAL_PCD_EP_DB_Transmit+0x510>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d11c      	bne.n	8007f74 <HAL_PCD_EP_DB_Transmit+0x510>
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4a7e      	ldr	r2, [pc, #504]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f42:	4694      	mov	ip, r2
 8007f44:	4463      	add	r3, ip
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	497b      	ldr	r1, [pc, #492]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f50:	468c      	mov	ip, r1
 8007f52:	4463      	add	r3, ip
 8007f54:	0412      	lsls	r2, r2, #16
 8007f56:	0c12      	lsrs	r2, r2, #16
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4a76      	ldr	r2, [pc, #472]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f62:	189a      	adds	r2, r3, r2
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4974      	ldr	r1, [pc, #464]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8007f6c:	468c      	mov	ip, r1
 8007f6e:	4463      	add	r3, ip
 8007f70:	6852      	ldr	r2, [r2, #4]
 8007f72:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f006 fb23 	bl	800e5c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007f82:	1dbb      	adds	r3, r7, #6
 8007f84:	881a      	ldrh	r2, [r3, #0]
 8007f86:	2380      	movs	r3, #128	@ 0x80
 8007f88:	01db      	lsls	r3, r3, #7
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d000      	beq.n	8007f90 <HAL_PCD_EP_DB_Transmit+0x52c>
 8007f8e:	e10a      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	001a      	movs	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	18d3      	adds	r3, r2, r3
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a67      	ldr	r2, [pc, #412]	@ (8008140 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	001a      	movs	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	18d3      	adds	r3, r2, r3
 8007fb4:	6a3a      	ldr	r2, [r7, #32]
 8007fb6:	4963      	ldr	r1, [pc, #396]	@ (8008144 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e0f3      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007fbe:	1dbb      	adds	r3, r7, #6
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	2380      	movs	r3, #128	@ 0x80
 8007fc4:	01db      	lsls	r3, r3, #7
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d115      	bne.n	8007ff6 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	001a      	movs	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	18d3      	adds	r3, r2, r3
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a59      	ldr	r2, [pc, #356]	@ (8008140 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	001a      	movs	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	18d3      	adds	r3, r2, r3
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	4954      	ldr	r1, [pc, #336]	@ (8008144 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2224      	movs	r2, #36	@ 0x24
 8007ffa:	5c9b      	ldrb	r3, [r3, r2]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d000      	beq.n	8008002 <HAL_PCD_EP_DB_Transmit+0x59e>
 8008000:	e0d1      	b.n	80081a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	211e      	movs	r1, #30
 8008008:	187b      	adds	r3, r7, r1
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	18d2      	adds	r2, r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	187b      	adds	r3, r7, r1
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	18d2      	adds	r2, r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	6a1a      	ldr	r2, [r3, #32]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	429a      	cmp	r2, r3
 800802a:	d309      	bcc.n	8008040 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6a1a      	ldr	r2, [r3, #32]
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	1ad2      	subs	r2, r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	621a      	str	r2, [r3, #32]
 800803e:	e016      	b.n	800806e <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d108      	bne.n	800805a <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 8008048:	231e      	movs	r3, #30
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2224      	movs	r2, #36	@ 0x24
 8008054:	2100      	movs	r1, #0
 8008056:	5499      	strb	r1, [r3, r2]
 8008058:	e009      	b.n	800806e <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2224      	movs	r2, #36	@ 0x24
 800806a:	2100      	movs	r1, #0
 800806c:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d168      	bne.n	8008148 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	4a2f      	ldr	r2, [pc, #188]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800807e:	4694      	mov	ip, r2
 8008080:	4463      	add	r3, ip
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	492c      	ldr	r1, [pc, #176]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800808c:	468c      	mov	ip, r1
 800808e:	4463      	add	r3, ip
 8008090:	0192      	lsls	r2, r2, #6
 8008092:	0992      	lsrs	r2, r2, #6
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	2b3e      	cmp	r3, #62	@ 0x3e
 800809a:	d91e      	bls.n	80080da <HAL_PCD_EP_DB_Transmit+0x676>
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	221f      	movs	r2, #31
 80080a6:	4013      	ands	r3, r2
 80080a8:	d102      	bne.n	80080b0 <HAL_PCD_EP_DB_Transmit+0x64c>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	4a21      	ldr	r2, [pc, #132]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80080b8:	4694      	mov	ip, r2
 80080ba:	4463      	add	r3, ip
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	069b      	lsls	r3, r3, #26
 80080c2:	431a      	orrs	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	491c      	ldr	r1, [pc, #112]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80080cc:	468c      	mov	ip, r1
 80080ce:	4463      	add	r3, ip
 80080d0:	2180      	movs	r1, #128	@ 0x80
 80080d2:	0609      	lsls	r1, r1, #24
 80080d4:	430a      	orrs	r2, r1
 80080d6:	605a      	str	r2, [r3, #4]
 80080d8:	e05b      	b.n	8008192 <HAL_PCD_EP_DB_Transmit+0x72e>
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d111      	bne.n	8008104 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	4a15      	ldr	r2, [pc, #84]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80080e8:	4694      	mov	ip, r2
 80080ea:	4463      	add	r3, ip
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	4911      	ldr	r1, [pc, #68]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80080f6:	468c      	mov	ip, r1
 80080f8:	4463      	add	r3, ip
 80080fa:	2180      	movs	r1, #128	@ 0x80
 80080fc:	0609      	lsls	r1, r1, #24
 80080fe:	430a      	orrs	r2, r1
 8008100:	605a      	str	r2, [r3, #4]
 8008102:	e046      	b.n	8008192 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	2201      	movs	r2, #1
 800810e:	4013      	ands	r3, r2
 8008110:	d002      	beq.n	8008118 <HAL_PCD_EP_DB_Transmit+0x6b4>
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	3301      	adds	r3, #1
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	4a07      	ldr	r2, [pc, #28]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008120:	4694      	mov	ip, r2
 8008122:	4463      	add	r3, ip
 8008124:	6859      	ldr	r1, [r3, #4]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	069a      	lsls	r2, r3, #26
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4802      	ldr	r0, [pc, #8]	@ (800813c <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8008132:	4684      	mov	ip, r0
 8008134:	4463      	add	r3, ip
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
 800813a:	e02a      	b.n	8008192 <HAL_PCD_EP_DB_Transmit+0x72e>
 800813c:	40009800 	.word	0x40009800
 8008140:	07ff8f8f 	.word	0x07ff8f8f
 8008144:	0000c080 	.word	0x0000c080
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d120      	bne.n	8008192 <HAL_PCD_EP_DB_Transmit+0x72e>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	4a25      	ldr	r2, [pc, #148]	@ (80081ec <HAL_PCD_EP_DB_Transmit+0x788>)
 8008158:	4694      	mov	ip, r2
 800815a:	4463      	add	r3, ip
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4921      	ldr	r1, [pc, #132]	@ (80081ec <HAL_PCD_EP_DB_Transmit+0x788>)
 8008166:	468c      	mov	ip, r1
 8008168:	4463      	add	r3, ip
 800816a:	0412      	lsls	r2, r2, #16
 800816c:	0c12      	lsrs	r2, r2, #16
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	4a1d      	ldr	r2, [pc, #116]	@ (80081ec <HAL_PCD_EP_DB_Transmit+0x788>)
 8008178:	4694      	mov	ip, r2
 800817a:	4463      	add	r3, ip
 800817c:	6859      	ldr	r1, [r3, #4]
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	041a      	lsls	r2, r3, #16
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4818      	ldr	r0, [pc, #96]	@ (80081ec <HAL_PCD_EP_DB_Transmit+0x788>)
 800818a:	4684      	mov	ip, r0
 800818c:	4463      	add	r3, ip
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6959      	ldr	r1, [r3, #20]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	895a      	ldrh	r2, [r3, #10]
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	f003 fc71 	bl	800ba88 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	001a      	movs	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <HAL_PCD_EP_DB_Transmit+0x78c>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	2210      	movs	r2, #16
 80081c0:	4053      	eors	r3, r2
 80081c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	2220      	movs	r2, #32
 80081c8:	4053      	eors	r3, r2
 80081ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	001a      	movs	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	18d3      	adds	r3, r2, r3
 80081da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081dc:	4905      	ldr	r1, [pc, #20]	@ (80081f4 <HAL_PCD_EP_DB_Transmit+0x790>)
 80081de:	430a      	orrs	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	0018      	movs	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	b00e      	add	sp, #56	@ 0x38
 80081ea:	bdb0      	pop	{r4, r5, r7, pc}
 80081ec:	40009800 	.word	0x40009800
 80081f0:	07ff8fbf 	.word	0x07ff8fbf
 80081f4:	00008080 	.word	0x00008080

080081f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	0008      	movs	r0, r1
 8008202:	0011      	movs	r1, r2
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	240a      	movs	r4, #10
 8008208:	193b      	adds	r3, r7, r4
 800820a:	1c02      	adds	r2, r0, #0
 800820c:	801a      	strh	r2, [r3, #0]
 800820e:	2308      	movs	r3, #8
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	1c0a      	adds	r2, r1, #0
 8008214:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008216:	0021      	movs	r1, r4
 8008218:	187b      	adds	r3, r7, r1
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	4013      	ands	r3, r2
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008226:	187b      	adds	r3, r7, r1
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	2207      	movs	r2, #7
 800822c:	401a      	ands	r2, r3
 800822e:	0013      	movs	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	189b      	adds	r3, r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	3310      	adds	r3, #16
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	18d3      	adds	r3, r2, r3
 800823c:	3304      	adds	r3, #4
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e00c      	b.n	800825c <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008242:	230a      	movs	r3, #10
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	881a      	ldrh	r2, [r3, #0]
 8008248:	0013      	movs	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	189b      	adds	r3, r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	3351      	adds	r3, #81	@ 0x51
 8008252:	33ff      	adds	r3, #255	@ 0xff
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	18d3      	adds	r3, r2, r3
 8008258:	3304      	adds	r3, #4
 800825a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800825c:	2308      	movs	r3, #8
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d107      	bne.n	8008276 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2200      	movs	r2, #0
 800826a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	b29a      	uxth	r2, r3
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	80da      	strh	r2, [r3, #6]
 8008274:	e00b      	b.n	800828e <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2201      	movs	r2, #1
 800827a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	b29a      	uxth	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0c1b      	lsrs	r3, r3, #16
 8008288:	b29a      	uxth	r2, r3
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	0018      	movs	r0, r3
 8008292:	46bd      	mov	sp, r7
 8008294:	b007      	add	sp, #28
 8008296:	bd90      	pop	{r4, r7, pc}

08008298 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	23b5      	movs	r3, #181	@ 0xb5
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	2101      	movs	r1, #1
 80082ae:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	23b3      	movs	r3, #179	@ 0xb3
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	2100      	movs	r1, #0
 80082b8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082be:	2201      	movs	r2, #1
 80082c0:	431a      	orrs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ca:	2202      	movs	r2, #2
 80082cc:	431a      	orrs	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b004      	add	sp, #16
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80082e0:	4b04      	ldr	r3, [pc, #16]	@ (80082f4 <HAL_PWREx_EnableVddUSB+0x18>)
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4b03      	ldr	r3, [pc, #12]	@ (80082f4 <HAL_PWREx_EnableVddUSB+0x18>)
 80082e6:	2180      	movs	r1, #128	@ 0x80
 80082e8:	00c9      	lsls	r1, r1, #3
 80082ea:	430a      	orrs	r2, r1
 80082ec:	605a      	str	r2, [r3, #4]
}
 80082ee:	46c0      	nop			@ (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40007000 	.word	0x40007000

080082f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008300:	4b19      	ldr	r3, [pc, #100]	@ (8008368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a19      	ldr	r2, [pc, #100]	@ (800836c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008306:	4013      	ands	r3, r2
 8008308:	0019      	movs	r1, r3
 800830a:	4b17      	ldr	r3, [pc, #92]	@ (8008368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	430a      	orrs	r2, r1
 8008310:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	2380      	movs	r3, #128	@ 0x80
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	429a      	cmp	r2, r3
 800831a:	d11f      	bne.n	800835c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800831c:	4b14      	ldr	r3, [pc, #80]	@ (8008370 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	0013      	movs	r3, r2
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	189b      	adds	r3, r3, r2
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4912      	ldr	r1, [pc, #72]	@ (8008374 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800832a:	0018      	movs	r0, r3
 800832c:	f7f7 ff04 	bl	8000138 <__udivsi3>
 8008330:	0003      	movs	r3, r0
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008336:	e008      	b.n	800834a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3b01      	subs	r3, #1
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e001      	b.n	800834a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e009      	b.n	800835e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800834a:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800834c:	695a      	ldr	r2, [r3, #20]
 800834e:	2380      	movs	r3, #128	@ 0x80
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	401a      	ands	r2, r3
 8008354:	2380      	movs	r3, #128	@ 0x80
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	429a      	cmp	r2, r3
 800835a:	d0ed      	beq.n	8008338 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	0018      	movs	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	b004      	add	sp, #16
 8008364:	bd80      	pop	{r7, pc}
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	40007000 	.word	0x40007000
 800836c:	fffff9ff 	.word	0xfffff9ff
 8008370:	20000000 	.word	0x20000000
 8008374:	000f4240 	.word	0x000f4240

08008378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e2fe      	b.n	8008988 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2201      	movs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	d100      	bne.n	8008396 <HAL_RCC_OscConfig+0x1e>
 8008394:	e07c      	b.n	8008490 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008396:	4bc3      	ldr	r3, [pc, #780]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2238      	movs	r2, #56	@ 0x38
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083a0:	4bc0      	ldr	r3, [pc, #768]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2203      	movs	r2, #3
 80083a6:	4013      	ands	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d102      	bne.n	80083b6 <HAL_RCC_OscConfig+0x3e>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d002      	beq.n	80083bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083bc:	4bb9      	ldr	r3, [pc, #740]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	4013      	ands	r3, r2
 80083c6:	d062      	beq.n	800848e <HAL_RCC_OscConfig+0x116>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d15e      	bne.n	800848e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e2d9      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	2380      	movs	r3, #128	@ 0x80
 80083da:	025b      	lsls	r3, r3, #9
 80083dc:	429a      	cmp	r2, r3
 80083de:	d107      	bne.n	80083f0 <HAL_RCC_OscConfig+0x78>
 80083e0:	4bb0      	ldr	r3, [pc, #704]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4baf      	ldr	r3, [pc, #700]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80083e6:	2180      	movs	r1, #128	@ 0x80
 80083e8:	0249      	lsls	r1, r1, #9
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e020      	b.n	8008432 <HAL_RCC_OscConfig+0xba>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	23a0      	movs	r3, #160	@ 0xa0
 80083f6:	02db      	lsls	r3, r3, #11
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d10e      	bne.n	800841a <HAL_RCC_OscConfig+0xa2>
 80083fc:	4ba9      	ldr	r3, [pc, #676]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	4ba8      	ldr	r3, [pc, #672]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008402:	2180      	movs	r1, #128	@ 0x80
 8008404:	02c9      	lsls	r1, r1, #11
 8008406:	430a      	orrs	r2, r1
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	4ba6      	ldr	r3, [pc, #664]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4ba5      	ldr	r3, [pc, #660]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008410:	2180      	movs	r1, #128	@ 0x80
 8008412:	0249      	lsls	r1, r1, #9
 8008414:	430a      	orrs	r2, r1
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	e00b      	b.n	8008432 <HAL_RCC_OscConfig+0xba>
 800841a:	4ba2      	ldr	r3, [pc, #648]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	4ba1      	ldr	r3, [pc, #644]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008420:	49a1      	ldr	r1, [pc, #644]	@ (80086a8 <HAL_RCC_OscConfig+0x330>)
 8008422:	400a      	ands	r2, r1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	4b9f      	ldr	r3, [pc, #636]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b9e      	ldr	r3, [pc, #632]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800842c:	499f      	ldr	r1, [pc, #636]	@ (80086ac <HAL_RCC_OscConfig+0x334>)
 800842e:	400a      	ands	r2, r1
 8008430:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d014      	beq.n	8008464 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843a:	f7fb fff1 	bl	8004420 <HAL_GetTick>
 800843e:	0003      	movs	r3, r0
 8008440:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008444:	f7fb ffec 	bl	8004420 <HAL_GetTick>
 8008448:	0002      	movs	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b64      	cmp	r3, #100	@ 0x64
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e298      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008456:	4b93      	ldr	r3, [pc, #588]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	2380      	movs	r3, #128	@ 0x80
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	4013      	ands	r3, r2
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0xcc>
 8008462:	e015      	b.n	8008490 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008464:	f7fb ffdc 	bl	8004420 <HAL_GetTick>
 8008468:	0003      	movs	r3, r0
 800846a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800846e:	f7fb ffd7 	bl	8004420 <HAL_GetTick>
 8008472:	0002      	movs	r2, r0
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b64      	cmp	r3, #100	@ 0x64
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e283      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008480:	4b88      	ldr	r3, [pc, #544]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	2380      	movs	r3, #128	@ 0x80
 8008486:	029b      	lsls	r3, r3, #10
 8008488:	4013      	ands	r3, r2
 800848a:	d1f0      	bne.n	800846e <HAL_RCC_OscConfig+0xf6>
 800848c:	e000      	b.n	8008490 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800848e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2202      	movs	r2, #2
 8008496:	4013      	ands	r3, r2
 8008498:	d100      	bne.n	800849c <HAL_RCC_OscConfig+0x124>
 800849a:	e099      	b.n	80085d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800849c:	4b81      	ldr	r3, [pc, #516]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2238      	movs	r2, #56	@ 0x38
 80084a2:	4013      	ands	r3, r2
 80084a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084a6:	4b7f      	ldr	r3, [pc, #508]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	2203      	movs	r2, #3
 80084ac:	4013      	ands	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d102      	bne.n	80084bc <HAL_RCC_OscConfig+0x144>
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d002      	beq.n	80084c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d135      	bne.n	800852e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c2:	4b78      	ldr	r3, [pc, #480]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	2380      	movs	r3, #128	@ 0x80
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	4013      	ands	r3, r2
 80084cc:	d005      	beq.n	80084da <HAL_RCC_OscConfig+0x162>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e256      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084da:	4b72      	ldr	r3, [pc, #456]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	4a74      	ldr	r2, [pc, #464]	@ (80086b0 <HAL_RCC_OscConfig+0x338>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	0019      	movs	r1, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	021a      	lsls	r2, r3, #8
 80084ea:	4b6e      	ldr	r3, [pc, #440]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d112      	bne.n	800851c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80084f6:	4b6b      	ldr	r3, [pc, #428]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a6e      	ldr	r2, [pc, #440]	@ (80086b4 <HAL_RCC_OscConfig+0x33c>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	0019      	movs	r1, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	4b67      	ldr	r3, [pc, #412]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008506:	430a      	orrs	r2, r1
 8008508:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800850a:	4b66      	ldr	r3, [pc, #408]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	0adb      	lsrs	r3, r3, #11
 8008510:	2207      	movs	r2, #7
 8008512:	4013      	ands	r3, r2
 8008514:	4a68      	ldr	r2, [pc, #416]	@ (80086b8 <HAL_RCC_OscConfig+0x340>)
 8008516:	40da      	lsrs	r2, r3
 8008518:	4b68      	ldr	r3, [pc, #416]	@ (80086bc <HAL_RCC_OscConfig+0x344>)
 800851a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800851c:	4b68      	ldr	r3, [pc, #416]	@ (80086c0 <HAL_RCC_OscConfig+0x348>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	0018      	movs	r0, r3
 8008522:	f7fb ff21 	bl	8004368 <HAL_InitTick>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d051      	beq.n	80085ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e22c      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d030      	beq.n	8008598 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008536:	4b5b      	ldr	r3, [pc, #364]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a5e      	ldr	r2, [pc, #376]	@ (80086b4 <HAL_RCC_OscConfig+0x33c>)
 800853c:	4013      	ands	r3, r2
 800853e:	0019      	movs	r1, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	4b57      	ldr	r3, [pc, #348]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008546:	430a      	orrs	r2, r1
 8008548:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800854a:	4b56      	ldr	r3, [pc, #344]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b55      	ldr	r3, [pc, #340]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008550:	2180      	movs	r1, #128	@ 0x80
 8008552:	0049      	lsls	r1, r1, #1
 8008554:	430a      	orrs	r2, r1
 8008556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fb ff62 	bl	8004420 <HAL_GetTick>
 800855c:	0003      	movs	r3, r0
 800855e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008562:	f7fb ff5d 	bl	8004420 <HAL_GetTick>
 8008566:	0002      	movs	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e209      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008574:	4b4b      	ldr	r3, [pc, #300]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	2380      	movs	r3, #128	@ 0x80
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	4013      	ands	r3, r2
 800857e:	d0f0      	beq.n	8008562 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008580:	4b48      	ldr	r3, [pc, #288]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	4a4a      	ldr	r2, [pc, #296]	@ (80086b0 <HAL_RCC_OscConfig+0x338>)
 8008586:	4013      	ands	r3, r2
 8008588:	0019      	movs	r1, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	4b44      	ldr	r3, [pc, #272]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	e01b      	b.n	80085d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008598:	4b42      	ldr	r3, [pc, #264]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	4b41      	ldr	r3, [pc, #260]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800859e:	4949      	ldr	r1, [pc, #292]	@ (80086c4 <HAL_RCC_OscConfig+0x34c>)
 80085a0:	400a      	ands	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fb ff3c 	bl	8004420 <HAL_GetTick>
 80085a8:	0003      	movs	r3, r0
 80085aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ae:	f7fb ff37 	bl	8004420 <HAL_GetTick>
 80085b2:	0002      	movs	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e1e3      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085c0:	4b38      	ldr	r3, [pc, #224]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	2380      	movs	r3, #128	@ 0x80
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	4013      	ands	r3, r2
 80085ca:	d1f0      	bne.n	80085ae <HAL_RCC_OscConfig+0x236>
 80085cc:	e000      	b.n	80085d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2208      	movs	r2, #8
 80085d6:	4013      	ands	r3, r2
 80085d8:	d047      	beq.n	800866a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80085da:	4b32      	ldr	r3, [pc, #200]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2238      	movs	r2, #56	@ 0x38
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b18      	cmp	r3, #24
 80085e4:	d10a      	bne.n	80085fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80085e6:	4b2f      	ldr	r3, [pc, #188]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 80085e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085ea:	2202      	movs	r2, #2
 80085ec:	4013      	ands	r3, r2
 80085ee:	d03c      	beq.n	800866a <HAL_RCC_OscConfig+0x2f2>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d138      	bne.n	800866a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e1c5      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d019      	beq.n	8008638 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008604:	4b27      	ldr	r3, [pc, #156]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008606:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008608:	4b26      	ldr	r3, [pc, #152]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800860a:	2101      	movs	r1, #1
 800860c:	430a      	orrs	r2, r1
 800860e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008610:	f7fb ff06 	bl	8004420 <HAL_GetTick>
 8008614:	0003      	movs	r3, r0
 8008616:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008618:	e008      	b.n	800862c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800861a:	f7fb ff01 	bl	8004420 <HAL_GetTick>
 800861e:	0002      	movs	r2, r0
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e1ad      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800862c:	4b1d      	ldr	r3, [pc, #116]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800862e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008630:	2202      	movs	r2, #2
 8008632:	4013      	ands	r3, r2
 8008634:	d0f1      	beq.n	800861a <HAL_RCC_OscConfig+0x2a2>
 8008636:	e018      	b.n	800866a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008638:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800863a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800863c:	4b19      	ldr	r3, [pc, #100]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800863e:	2101      	movs	r1, #1
 8008640:	438a      	bics	r2, r1
 8008642:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fb feec 	bl	8004420 <HAL_GetTick>
 8008648:	0003      	movs	r3, r0
 800864a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800864e:	f7fb fee7 	bl	8004420 <HAL_GetTick>
 8008652:	0002      	movs	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e193      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008660:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008664:	2202      	movs	r2, #2
 8008666:	4013      	ands	r3, r2
 8008668:	d1f1      	bne.n	800864e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2204      	movs	r2, #4
 8008670:	4013      	ands	r3, r2
 8008672:	d100      	bne.n	8008676 <HAL_RCC_OscConfig+0x2fe>
 8008674:	e0c6      	b.n	8008804 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008676:	231f      	movs	r3, #31
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800867e:	4b09      	ldr	r3, [pc, #36]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2238      	movs	r2, #56	@ 0x38
 8008684:	4013      	ands	r3, r2
 8008686:	2b20      	cmp	r3, #32
 8008688:	d11e      	bne.n	80086c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800868a:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <HAL_RCC_OscConfig+0x32c>)
 800868c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800868e:	2202      	movs	r2, #2
 8008690:	4013      	ands	r3, r2
 8008692:	d100      	bne.n	8008696 <HAL_RCC_OscConfig+0x31e>
 8008694:	e0b6      	b.n	8008804 <HAL_RCC_OscConfig+0x48c>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d000      	beq.n	80086a0 <HAL_RCC_OscConfig+0x328>
 800869e:	e0b1      	b.n	8008804 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e171      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
 80086a4:	40021000 	.word	0x40021000
 80086a8:	fffeffff 	.word	0xfffeffff
 80086ac:	fffbffff 	.word	0xfffbffff
 80086b0:	ffff80ff 	.word	0xffff80ff
 80086b4:	ffffc7ff 	.word	0xffffc7ff
 80086b8:	00f42400 	.word	0x00f42400
 80086bc:	20000000 	.word	0x20000000
 80086c0:	20000004 	.word	0x20000004
 80086c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086c8:	4bb1      	ldr	r3, [pc, #708]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80086ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086cc:	2380      	movs	r3, #128	@ 0x80
 80086ce:	055b      	lsls	r3, r3, #21
 80086d0:	4013      	ands	r3, r2
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_OscConfig+0x360>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <HAL_RCC_OscConfig+0x362>
 80086d8:	2300      	movs	r3, #0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80086de:	4bac      	ldr	r3, [pc, #688]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80086e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e2:	4bab      	ldr	r3, [pc, #684]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80086e4:	2180      	movs	r1, #128	@ 0x80
 80086e6:	0549      	lsls	r1, r1, #21
 80086e8:	430a      	orrs	r2, r1
 80086ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80086ec:	4ba8      	ldr	r3, [pc, #672]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80086ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	055b      	lsls	r3, r3, #21
 80086f4:	4013      	ands	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80086fa:	231f      	movs	r3, #31
 80086fc:	18fb      	adds	r3, r7, r3
 80086fe:	2201      	movs	r2, #1
 8008700:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008702:	4ba4      	ldr	r3, [pc, #656]	@ (8008994 <HAL_RCC_OscConfig+0x61c>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	2380      	movs	r3, #128	@ 0x80
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4013      	ands	r3, r2
 800870c:	d11a      	bne.n	8008744 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800870e:	4ba1      	ldr	r3, [pc, #644]	@ (8008994 <HAL_RCC_OscConfig+0x61c>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4ba0      	ldr	r3, [pc, #640]	@ (8008994 <HAL_RCC_OscConfig+0x61c>)
 8008714:	2180      	movs	r1, #128	@ 0x80
 8008716:	0049      	lsls	r1, r1, #1
 8008718:	430a      	orrs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800871c:	f7fb fe80 	bl	8004420 <HAL_GetTick>
 8008720:	0003      	movs	r3, r0
 8008722:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008726:	f7fb fe7b 	bl	8004420 <HAL_GetTick>
 800872a:	0002      	movs	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e127      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008738:	4b96      	ldr	r3, [pc, #600]	@ (8008994 <HAL_RCC_OscConfig+0x61c>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	2380      	movs	r3, #128	@ 0x80
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	4013      	ands	r3, r2
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <HAL_RCC_OscConfig+0x3e2>
 800874c:	4b90      	ldr	r3, [pc, #576]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800874e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008750:	4b8f      	ldr	r3, [pc, #572]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008752:	2101      	movs	r1, #1
 8008754:	430a      	orrs	r2, r1
 8008756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008758:	e01c      	b.n	8008794 <HAL_RCC_OscConfig+0x41c>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b05      	cmp	r3, #5
 8008760:	d10c      	bne.n	800877c <HAL_RCC_OscConfig+0x404>
 8008762:	4b8b      	ldr	r3, [pc, #556]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008766:	4b8a      	ldr	r3, [pc, #552]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008768:	2104      	movs	r1, #4
 800876a:	430a      	orrs	r2, r1
 800876c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800876e:	4b88      	ldr	r3, [pc, #544]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008772:	4b87      	ldr	r3, [pc, #540]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008774:	2101      	movs	r1, #1
 8008776:	430a      	orrs	r2, r1
 8008778:	65da      	str	r2, [r3, #92]	@ 0x5c
 800877a:	e00b      	b.n	8008794 <HAL_RCC_OscConfig+0x41c>
 800877c:	4b84      	ldr	r3, [pc, #528]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800877e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008780:	4b83      	ldr	r3, [pc, #524]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008782:	2101      	movs	r1, #1
 8008784:	438a      	bics	r2, r1
 8008786:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008788:	4b81      	ldr	r3, [pc, #516]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800878a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800878c:	4b80      	ldr	r3, [pc, #512]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800878e:	2104      	movs	r1, #4
 8008790:	438a      	bics	r2, r1
 8008792:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d014      	beq.n	80087c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879c:	f7fb fe40 	bl	8004420 <HAL_GetTick>
 80087a0:	0003      	movs	r3, r0
 80087a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087a4:	e009      	b.n	80087ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a6:	f7fb fe3b 	bl	8004420 <HAL_GetTick>
 80087aa:	0002      	movs	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	4a79      	ldr	r2, [pc, #484]	@ (8008998 <HAL_RCC_OscConfig+0x620>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e0e6      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ba:	4b75      	ldr	r3, [pc, #468]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80087bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087be:	2202      	movs	r2, #2
 80087c0:	4013      	ands	r3, r2
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x42e>
 80087c4:	e013      	b.n	80087ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fb fe2b 	bl	8004420 <HAL_GetTick>
 80087ca:	0003      	movs	r3, r0
 80087cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087ce:	e009      	b.n	80087e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d0:	f7fb fe26 	bl	8004420 <HAL_GetTick>
 80087d4:	0002      	movs	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	4a6f      	ldr	r2, [pc, #444]	@ (8008998 <HAL_RCC_OscConfig+0x620>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e0d1      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80087e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e8:	2202      	movs	r2, #2
 80087ea:	4013      	ands	r3, r2
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80087ee:	231f      	movs	r3, #31
 80087f0:	18fb      	adds	r3, r7, r3
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d105      	bne.n	8008804 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80087f8:	4b65      	ldr	r3, [pc, #404]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80087fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087fc:	4b64      	ldr	r3, [pc, #400]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80087fe:	4967      	ldr	r1, [pc, #412]	@ (800899c <HAL_RCC_OscConfig+0x624>)
 8008800:	400a      	ands	r2, r1
 8008802:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d100      	bne.n	800880e <HAL_RCC_OscConfig+0x496>
 800880c:	e0bb      	b.n	8008986 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800880e:	4b60      	ldr	r3, [pc, #384]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2238      	movs	r2, #56	@ 0x38
 8008814:	4013      	ands	r3, r2
 8008816:	2b10      	cmp	r3, #16
 8008818:	d100      	bne.n	800881c <HAL_RCC_OscConfig+0x4a4>
 800881a:	e07b      	b.n	8008914 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d156      	bne.n	80088d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008824:	4b5a      	ldr	r3, [pc, #360]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4b59      	ldr	r3, [pc, #356]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800882a:	495d      	ldr	r1, [pc, #372]	@ (80089a0 <HAL_RCC_OscConfig+0x628>)
 800882c:	400a      	ands	r2, r1
 800882e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008830:	f7fb fdf6 	bl	8004420 <HAL_GetTick>
 8008834:	0003      	movs	r3, r0
 8008836:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008838:	e008      	b.n	800884c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800883a:	f7fb fdf1 	bl	8004420 <HAL_GetTick>
 800883e:	0002      	movs	r2, r0
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e09d      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800884c:	4b50      	ldr	r3, [pc, #320]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	2380      	movs	r3, #128	@ 0x80
 8008852:	049b      	lsls	r3, r3, #18
 8008854:	4013      	ands	r3, r2
 8008856:	d1f0      	bne.n	800883a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008858:	4b4d      	ldr	r3, [pc, #308]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	4a51      	ldr	r2, [pc, #324]	@ (80089a4 <HAL_RCC_OscConfig+0x62c>)
 800885e:	4013      	ands	r3, r2
 8008860:	0019      	movs	r1, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	431a      	orrs	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008884:	431a      	orrs	r2, r3
 8008886:	4b42      	ldr	r3, [pc, #264]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008888:	430a      	orrs	r2, r1
 800888a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800888c:	4b40      	ldr	r3, [pc, #256]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b3f      	ldr	r3, [pc, #252]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008892:	2180      	movs	r1, #128	@ 0x80
 8008894:	0449      	lsls	r1, r1, #17
 8008896:	430a      	orrs	r2, r1
 8008898:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800889a:	4b3d      	ldr	r3, [pc, #244]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	4b3c      	ldr	r3, [pc, #240]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80088a0:	2180      	movs	r1, #128	@ 0x80
 80088a2:	0549      	lsls	r1, r1, #21
 80088a4:	430a      	orrs	r2, r1
 80088a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fb fdba 	bl	8004420 <HAL_GetTick>
 80088ac:	0003      	movs	r3, r0
 80088ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b2:	f7fb fdb5 	bl	8004420 <HAL_GetTick>
 80088b6:	0002      	movs	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e061      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088c4:	4b32      	ldr	r3, [pc, #200]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	2380      	movs	r3, #128	@ 0x80
 80088ca:	049b      	lsls	r3, r3, #18
 80088cc:	4013      	ands	r3, r2
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCC_OscConfig+0x53a>
 80088d0:	e059      	b.n	8008986 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	4b2e      	ldr	r3, [pc, #184]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80088d8:	4931      	ldr	r1, [pc, #196]	@ (80089a0 <HAL_RCC_OscConfig+0x628>)
 80088da:	400a      	ands	r2, r1
 80088dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088de:	f7fb fd9f 	bl	8004420 <HAL_GetTick>
 80088e2:	0003      	movs	r3, r0
 80088e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e8:	f7fb fd9a 	bl	8004420 <HAL_GetTick>
 80088ec:	0002      	movs	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e046      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088fa:	4b25      	ldr	r3, [pc, #148]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	2380      	movs	r3, #128	@ 0x80
 8008900:	049b      	lsls	r3, r3, #18
 8008902:	4013      	ands	r3, r2
 8008904:	d1f0      	bne.n	80088e8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008906:	4b22      	ldr	r3, [pc, #136]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	4b21      	ldr	r3, [pc, #132]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 800890c:	4926      	ldr	r1, [pc, #152]	@ (80089a8 <HAL_RCC_OscConfig+0x630>)
 800890e:	400a      	ands	r2, r1
 8008910:	60da      	str	r2, [r3, #12]
 8008912:	e038      	b.n	8008986 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d101      	bne.n	8008920 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e033      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008920:	4b1b      	ldr	r3, [pc, #108]	@ (8008990 <HAL_RCC_OscConfig+0x618>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2203      	movs	r2, #3
 800892a:	401a      	ands	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	429a      	cmp	r2, r3
 8008932:	d126      	bne.n	8008982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2270      	movs	r2, #112	@ 0x70
 8008938:	401a      	ands	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d11f      	bne.n	8008982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	23fe      	movs	r3, #254	@ 0xfe
 8008946:	01db      	lsls	r3, r3, #7
 8008948:	401a      	ands	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008950:	429a      	cmp	r2, r3
 8008952:	d116      	bne.n	8008982 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	23f8      	movs	r3, #248	@ 0xf8
 8008958:	039b      	lsls	r3, r3, #14
 800895a:	401a      	ands	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008960:	429a      	cmp	r2, r3
 8008962:	d10e      	bne.n	8008982 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	23e0      	movs	r3, #224	@ 0xe0
 8008968:	051b      	lsls	r3, r3, #20
 800896a:	401a      	ands	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008970:	429a      	cmp	r2, r3
 8008972:	d106      	bne.n	8008982 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	0f5b      	lsrs	r3, r3, #29
 8008978:	075a      	lsls	r2, r3, #29
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d001      	beq.n	8008986 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b008      	add	sp, #32
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40021000 	.word	0x40021000
 8008994:	40007000 	.word	0x40007000
 8008998:	00001388 	.word	0x00001388
 800899c:	efffffff 	.word	0xefffffff
 80089a0:	feffffff 	.word	0xfeffffff
 80089a4:	11c1808c 	.word	0x11c1808c
 80089a8:	eefefffc 	.word	0xeefefffc

080089ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e0e9      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089c0:	4b76      	ldr	r3, [pc, #472]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2207      	movs	r2, #7
 80089c6:	4013      	ands	r3, r2
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d91e      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ce:	4b73      	ldr	r3, [pc, #460]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2207      	movs	r2, #7
 80089d4:	4393      	bics	r3, r2
 80089d6:	0019      	movs	r1, r3
 80089d8:	4b70      	ldr	r3, [pc, #448]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089e0:	f7fb fd1e 	bl	8004420 <HAL_GetTick>
 80089e4:	0003      	movs	r3, r0
 80089e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80089e8:	e009      	b.n	80089fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ea:	f7fb fd19 	bl	8004420 <HAL_GetTick>
 80089ee:	0002      	movs	r2, r0
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	4a6a      	ldr	r2, [pc, #424]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1f4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e0ca      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80089fe:	4b67      	ldr	r3, [pc, #412]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2207      	movs	r2, #7
 8008a04:	4013      	ands	r3, r2
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d1ee      	bne.n	80089ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2202      	movs	r2, #2
 8008a12:	4013      	ands	r3, r2
 8008a14:	d015      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	d006      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008a20:	4b60      	ldr	r3, [pc, #384]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	4b5f      	ldr	r3, [pc, #380]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a26:	21e0      	movs	r1, #224	@ 0xe0
 8008a28:	01c9      	lsls	r1, r1, #7
 8008a2a:	430a      	orrs	r2, r1
 8008a2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	4a5d      	ldr	r2, [pc, #372]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	0019      	movs	r1, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	4b59      	ldr	r3, [pc, #356]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2201      	movs	r2, #1
 8008a48:	4013      	ands	r3, r2
 8008a4a:	d057      	beq.n	8008afc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d107      	bne.n	8008a64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a54:	4b53      	ldr	r3, [pc, #332]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	2380      	movs	r3, #128	@ 0x80
 8008a5a:	029b      	lsls	r3, r3, #10
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	d12b      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e097      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	2380      	movs	r3, #128	@ 0x80
 8008a72:	049b      	lsls	r3, r3, #18
 8008a74:	4013      	ands	r3, r2
 8008a76:	d11f      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e08b      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d107      	bne.n	8008a94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a84:	4b47      	ldr	r3, [pc, #284]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	2380      	movs	r3, #128	@ 0x80
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d113      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e07f      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d106      	bne.n	8008aaa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a9c:	4b41      	ldr	r3, [pc, #260]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	d108      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e074      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aaa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aae:	2202      	movs	r2, #2
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e06d      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	2207      	movs	r2, #7
 8008abe:	4393      	bics	r3, r2
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4b37      	ldr	r3, [pc, #220]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008acc:	f7fb fca8 	bl	8004420 <HAL_GetTick>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad4:	e009      	b.n	8008aea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ad6:	f7fb fca3 	bl	8004420 <HAL_GetTick>
 8008ada:	0002      	movs	r2, r0
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e054      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aea:	4b2e      	ldr	r3, [pc, #184]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2238      	movs	r2, #56	@ 0x38
 8008af0:	401a      	ands	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d1ec      	bne.n	8008ad6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008afc:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2207      	movs	r2, #7
 8008b02:	4013      	ands	r3, r2
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d21e      	bcs.n	8008b48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0a:	4b24      	ldr	r3, [pc, #144]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2207      	movs	r2, #7
 8008b10:	4393      	bics	r3, r2
 8008b12:	0019      	movs	r1, r3
 8008b14:	4b21      	ldr	r3, [pc, #132]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b1c:	f7fb fc80 	bl	8004420 <HAL_GetTick>
 8008b20:	0003      	movs	r3, r0
 8008b22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b24:	e009      	b.n	8008b3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b26:	f7fb fc7b 	bl	8004420 <HAL_GetTick>
 8008b2a:	0002      	movs	r2, r0
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e02c      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b3a:	4b18      	ldr	r3, [pc, #96]	@ (8008b9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2207      	movs	r2, #7
 8008b40:	4013      	ands	r3, r2
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1ee      	bne.n	8008b26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	4013      	ands	r3, r2
 8008b50:	d009      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008b52:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	4a15      	ldr	r2, [pc, #84]	@ (8008bac <HAL_RCC_ClockConfig+0x200>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	4b10      	ldr	r3, [pc, #64]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b62:	430a      	orrs	r2, r1
 8008b64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008b66:	f000 f829 	bl	8008bbc <HAL_RCC_GetSysClockFreq>
 8008b6a:	0001      	movs	r1, r0
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	220f      	movs	r2, #15
 8008b74:	401a      	ands	r2, r3
 8008b76:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb0 <HAL_RCC_ClockConfig+0x204>)
 8008b78:	0092      	lsls	r2, r2, #2
 8008b7a:	58d3      	ldr	r3, [r2, r3]
 8008b7c:	221f      	movs	r2, #31
 8008b7e:	4013      	ands	r3, r2
 8008b80:	000a      	movs	r2, r1
 8008b82:	40da      	lsrs	r2, r3
 8008b84:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <HAL_RCC_ClockConfig+0x208>)
 8008b86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b88:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb8 <HAL_RCC_ClockConfig+0x20c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f7fb fbeb 	bl	8004368 <HAL_InitTick>
 8008b92:	0003      	movs	r3, r0
}
 8008b94:	0018      	movs	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	b004      	add	sp, #16
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40022000 	.word	0x40022000
 8008ba0:	00001388 	.word	0x00001388
 8008ba4:	40021000 	.word	0x40021000
 8008ba8:	fffff0ff 	.word	0xfffff0ff
 8008bac:	ffff8fff 	.word	0xffff8fff
 8008bb0:	080130e8 	.word	0x080130e8
 8008bb4:	20000000 	.word	0x20000000
 8008bb8:	20000004 	.word	0x20000004

08008bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2238      	movs	r2, #56	@ 0x38
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d10f      	bne.n	8008bec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008bcc:	4b39      	ldr	r3, [pc, #228]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	0adb      	lsrs	r3, r3, #11
 8008bd2:	2207      	movs	r2, #7
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	0013      	movs	r3, r2
 8008bdc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	4835      	ldr	r0, [pc, #212]	@ (8008cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008be2:	f7f7 faa9 	bl	8000138 <__udivsi3>
 8008be6:	0003      	movs	r3, r0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	e05d      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008bec:	4b31      	ldr	r3, [pc, #196]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	2238      	movs	r2, #56	@ 0x38
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d102      	bne.n	8008bfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bf8:	4b30      	ldr	r3, [pc, #192]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	e054      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2238      	movs	r2, #56	@ 0x38
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b10      	cmp	r3, #16
 8008c08:	d138      	bne.n	8008c7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	4013      	ands	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c14:	4b27      	ldr	r3, [pc, #156]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d10d      	bne.n	8008c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	4824      	ldr	r0, [pc, #144]	@ (8008cbc <HAL_RCC_GetSysClockFreq+0x100>)
 8008c2c:	f7f7 fa84 	bl	8000138 <__udivsi3>
 8008c30:	0003      	movs	r3, r0
 8008c32:	0019      	movs	r1, r3
 8008c34:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	227f      	movs	r2, #127	@ 0x7f
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	434b      	muls	r3, r1
 8008c40:	617b      	str	r3, [r7, #20]
        break;
 8008c42:	e00d      	b.n	8008c60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	481c      	ldr	r0, [pc, #112]	@ (8008cb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008c48:	f7f7 fa76 	bl	8000138 <__udivsi3>
 8008c4c:	0003      	movs	r3, r0
 8008c4e:	0019      	movs	r1, r3
 8008c50:	4b18      	ldr	r3, [pc, #96]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	227f      	movs	r2, #127	@ 0x7f
 8008c58:	4013      	ands	r3, r2
 8008c5a:	434b      	muls	r3, r1
 8008c5c:	617b      	str	r3, [r7, #20]
        break;
 8008c5e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008c60:	4b14      	ldr	r3, [pc, #80]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	0f5b      	lsrs	r3, r3, #29
 8008c66:	2207      	movs	r2, #7
 8008c68:	4013      	ands	r3, r2
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	6978      	ldr	r0, [r7, #20]
 8008c72:	f7f7 fa61 	bl	8000138 <__udivsi3>
 8008c76:	0003      	movs	r3, r0
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	e015      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2238      	movs	r2, #56	@ 0x38
 8008c82:	4013      	ands	r3, r2
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	d103      	bne.n	8008c90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008c88:	2380      	movs	r3, #128	@ 0x80
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	e00b      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008c90:	4b08      	ldr	r3, [pc, #32]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2238      	movs	r2, #56	@ 0x38
 8008c96:	4013      	ands	r3, r2
 8008c98:	2b18      	cmp	r3, #24
 8008c9a:	d103      	bne.n	8008ca4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008c9c:	23fa      	movs	r3, #250	@ 0xfa
 8008c9e:	01db      	lsls	r3, r3, #7
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	e001      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ca8:	693b      	ldr	r3, [r7, #16]
}
 8008caa:	0018      	movs	r0, r3
 8008cac:	46bd      	mov	sp, r7
 8008cae:	b006      	add	sp, #24
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	46c0      	nop			@ (mov r8, r8)
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	00f42400 	.word	0x00f42400
 8008cbc:	007a1200 	.word	0x007a1200

08008cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008cc8:	2313      	movs	r3, #19
 8008cca:	18fb      	adds	r3, r7, r3
 8008ccc:	2200      	movs	r2, #0
 8008cce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cd0:	2312      	movs	r3, #18
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	2380      	movs	r3, #128	@ 0x80
 8008cde:	029b      	lsls	r3, r3, #10
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d100      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008ce4:	e0a3      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ce6:	2011      	movs	r0, #17
 8008ce8:	183b      	adds	r3, r7, r0
 8008cea:	2200      	movs	r2, #0
 8008cec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cee:	4bb0      	ldr	r3, [pc, #704]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cf2:	2380      	movs	r3, #128	@ 0x80
 8008cf4:	055b      	lsls	r3, r3, #21
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d110      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cfa:	4bad      	ldr	r3, [pc, #692]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cfe:	4bac      	ldr	r3, [pc, #688]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d00:	2180      	movs	r1, #128	@ 0x80
 8008d02:	0549      	lsls	r1, r1, #21
 8008d04:	430a      	orrs	r2, r1
 8008d06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d08:	4ba9      	ldr	r3, [pc, #676]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d0c:	2380      	movs	r3, #128	@ 0x80
 8008d0e:	055b      	lsls	r3, r3, #21
 8008d10:	4013      	ands	r3, r2
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d16:	183b      	adds	r3, r7, r0
 8008d18:	2201      	movs	r2, #1
 8008d1a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d1c:	4ba5      	ldr	r3, [pc, #660]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	4ba4      	ldr	r3, [pc, #656]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	0049      	lsls	r1, r1, #1
 8008d26:	430a      	orrs	r2, r1
 8008d28:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d2a:	f7fb fb79 	bl	8004420 <HAL_GetTick>
 8008d2e:	0003      	movs	r3, r0
 8008d30:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d32:	e00b      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d34:	f7fb fb74 	bl	8004420 <HAL_GetTick>
 8008d38:	0002      	movs	r2, r0
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d904      	bls.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008d42:	2313      	movs	r3, #19
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	2203      	movs	r2, #3
 8008d48:	701a      	strb	r2, [r3, #0]
        break;
 8008d4a:	e005      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d4c:	4b99      	ldr	r3, [pc, #612]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	2380      	movs	r3, #128	@ 0x80
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	4013      	ands	r3, r2
 8008d56:	d0ed      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008d58:	2313      	movs	r3, #19
 8008d5a:	18fb      	adds	r3, r7, r3
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d154      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d62:	4b93      	ldr	r3, [pc, #588]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d66:	23c0      	movs	r3, #192	@ 0xc0
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d019      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d014      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d82:	4a8d      	ldr	r2, [pc, #564]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d88:	4b89      	ldr	r3, [pc, #548]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d8c:	4b88      	ldr	r3, [pc, #544]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d8e:	2180      	movs	r1, #128	@ 0x80
 8008d90:	0249      	lsls	r1, r1, #9
 8008d92:	430a      	orrs	r2, r1
 8008d94:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d96:	4b86      	ldr	r3, [pc, #536]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d9a:	4b85      	ldr	r3, [pc, #532]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d9c:	4987      	ldr	r1, [pc, #540]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008d9e:	400a      	ands	r2, r1
 8008da0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008da2:	4b83      	ldr	r3, [pc, #524]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2201      	movs	r2, #1
 8008dac:	4013      	ands	r3, r2
 8008dae:	d016      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db0:	f7fb fb36 	bl	8004420 <HAL_GetTick>
 8008db4:	0003      	movs	r3, r0
 8008db6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008db8:	e00c      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dba:	f7fb fb31 	bl	8004420 <HAL_GetTick>
 8008dbe:	0002      	movs	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	4a7e      	ldr	r2, [pc, #504]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d904      	bls.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008dca:	2313      	movs	r3, #19
 8008dcc:	18fb      	adds	r3, r7, r3
 8008dce:	2203      	movs	r2, #3
 8008dd0:	701a      	strb	r2, [r3, #0]
            break;
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dd4:	4b76      	ldr	r3, [pc, #472]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd8:	2202      	movs	r2, #2
 8008dda:	4013      	ands	r3, r2
 8008ddc:	d0ed      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008dde:	2313      	movs	r3, #19
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008de8:	4b71      	ldr	r3, [pc, #452]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dec:	4a72      	ldr	r2, [pc, #456]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	0019      	movs	r1, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008df6:	4b6e      	ldr	r3, [pc, #440]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dfc:	e00c      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dfe:	2312      	movs	r3, #18
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	2213      	movs	r2, #19
 8008e04:	18ba      	adds	r2, r7, r2
 8008e06:	7812      	ldrb	r2, [r2, #0]
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e005      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	2312      	movs	r3, #18
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	2213      	movs	r2, #19
 8008e12:	18ba      	adds	r2, r7, r2
 8008e14:	7812      	ldrb	r2, [r2, #0]
 8008e16:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e18:	2311      	movs	r3, #17
 8008e1a:	18fb      	adds	r3, r7, r3
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e22:	4b63      	ldr	r3, [pc, #396]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e26:	4b62      	ldr	r3, [pc, #392]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e28:	4966      	ldr	r1, [pc, #408]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2201      	movs	r2, #1
 8008e34:	4013      	ands	r3, r2
 8008e36:	d009      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e38:	4b5d      	ldr	r3, [pc, #372]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	4393      	bics	r3, r2
 8008e40:	0019      	movs	r1, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4b5a      	ldr	r3, [pc, #360]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2202      	movs	r2, #2
 8008e52:	4013      	ands	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e56:	4b56      	ldr	r3, [pc, #344]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5a:	220c      	movs	r2, #12
 8008e5c:	4393      	bics	r3, r2
 8008e5e:	0019      	movs	r1, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	4b52      	ldr	r3, [pc, #328]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e66:	430a      	orrs	r2, r1
 8008e68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2204      	movs	r2, #4
 8008e70:	4013      	ands	r3, r2
 8008e72:	d009      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e74:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e78:	2230      	movs	r2, #48	@ 0x30
 8008e7a:	4393      	bics	r3, r2
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e84:	430a      	orrs	r2, r1
 8008e86:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	4013      	ands	r3, r2
 8008e90:	d009      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e92:	4b47      	ldr	r3, [pc, #284]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e96:	4a4c      	ldr	r2, [pc, #304]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	0019      	movs	r1, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	4b43      	ldr	r3, [pc, #268]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2240      	movs	r2, #64	@ 0x40
 8008eac:	4013      	ands	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb4:	4a45      	ldr	r2, [pc, #276]	@ (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	0019      	movs	r1, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695a      	ldr	r2, [r3, #20]
 8008ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	2380      	movs	r3, #128	@ 0x80
 8008eca:	01db      	lsls	r3, r3, #7
 8008ecc:	4013      	ands	r3, r2
 8008ece:	d015      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ed0:	4b37      	ldr	r3, [pc, #220]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	0899      	lsrs	r1, r3, #2
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	4b34      	ldr	r3, [pc, #208]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1a      	ldr	r2, [r3, #32]
 8008ee6:	2380      	movs	r3, #128	@ 0x80
 8008ee8:	05db      	lsls	r3, r3, #23
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d106      	bne.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008eee:	4b30      	ldr	r3, [pc, #192]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ef4:	2180      	movs	r1, #128	@ 0x80
 8008ef6:	0249      	lsls	r1, r1, #9
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	4013      	ands	r3, r2
 8008f06:	d014      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008f08:	4b29      	ldr	r3, [pc, #164]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	4393      	bics	r3, r2
 8008f10:	0019      	movs	r1, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	4b26      	ldr	r3, [pc, #152]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d106      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008f24:	4b22      	ldr	r3, [pc, #136]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	4b21      	ldr	r3, [pc, #132]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f2a:	2180      	movs	r1, #128	@ 0x80
 8008f2c:	0249      	lsls	r1, r1, #9
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	2380      	movs	r3, #128	@ 0x80
 8008f38:	019b      	lsls	r3, r3, #6
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	d014      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	220c      	movs	r2, #12
 8008f44:	4393      	bics	r3, r2
 8008f46:	0019      	movs	r1, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69da      	ldr	r2, [r3, #28]
 8008f4c:	4b18      	ldr	r3, [pc, #96]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	2b04      	cmp	r3, #4
 8008f58:	d106      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008f5a:	4b15      	ldr	r3, [pc, #84]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	4b14      	ldr	r3, [pc, #80]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f60:	2180      	movs	r1, #128	@ 0x80
 8008f62:	0249      	lsls	r1, r1, #9
 8008f64:	430a      	orrs	r2, r1
 8008f66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	2380      	movs	r3, #128	@ 0x80
 8008f6e:	045b      	lsls	r3, r3, #17
 8008f70:	4013      	ands	r3, r2
 8008f72:	d016      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f74:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	4a13      	ldr	r2, [pc, #76]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	0019      	movs	r1, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f82:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f84:	430a      	orrs	r2, r1
 8008f86:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f8c:	2380      	movs	r3, #128	@ 0x80
 8008f8e:	019b      	lsls	r3, r3, #6
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d106      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008f9a:	2180      	movs	r1, #128	@ 0x80
 8008f9c:	0449      	lsls	r1, r1, #17
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008fa2:	2312      	movs	r3, #18
 8008fa4:	18fb      	adds	r3, r7, r3
 8008fa6:	781b      	ldrb	r3, [r3, #0]
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b006      	add	sp, #24
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	40021000 	.word	0x40021000
 8008fb4:	40007000 	.word	0x40007000
 8008fb8:	fffffcff 	.word	0xfffffcff
 8008fbc:	fffeffff 	.word	0xfffeffff
 8008fc0:	00001388 	.word	0x00001388
 8008fc4:	efffffff 	.word	0xefffffff
 8008fc8:	ffffcfff 	.word	0xffffcfff
 8008fcc:	ffff3fff 	.word	0xffff3fff

08008fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e0a8      	b.n	8009134 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d109      	bne.n	8008ffe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	2382      	movs	r3, #130	@ 0x82
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d009      	beq.n	800900a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	61da      	str	r2, [r3, #28]
 8008ffc:	e005      	b.n	800900a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	225d      	movs	r2, #93	@ 0x5d
 8009014:	5c9b      	ldrb	r3, [r3, r2]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d107      	bne.n	800902c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	225c      	movs	r2, #92	@ 0x5c
 8009020:	2100      	movs	r1, #0
 8009022:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	0018      	movs	r0, r3
 8009028:	f7fa fe62 	bl	8003cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	225d      	movs	r2, #93	@ 0x5d
 8009030:	2102      	movs	r1, #2
 8009032:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2140      	movs	r1, #64	@ 0x40
 8009040:	438a      	bics	r2, r1
 8009042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	23e0      	movs	r3, #224	@ 0xe0
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	429a      	cmp	r2, r3
 800904e:	d902      	bls.n	8009056 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	e002      	b.n	800905c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009056:	2380      	movs	r3, #128	@ 0x80
 8009058:	015b      	lsls	r3, r3, #5
 800905a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	23f0      	movs	r3, #240	@ 0xf0
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	429a      	cmp	r2, r3
 8009066:	d008      	beq.n	800907a <HAL_SPI_Init+0xaa>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	23e0      	movs	r3, #224	@ 0xe0
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	429a      	cmp	r2, r3
 8009072:	d002      	beq.n	800907a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	2382      	movs	r3, #130	@ 0x82
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	401a      	ands	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6899      	ldr	r1, [r3, #8]
 8009088:	2384      	movs	r3, #132	@ 0x84
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	400b      	ands	r3, r1
 800908e:	431a      	orrs	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2102      	movs	r1, #2
 8009096:	400b      	ands	r3, r1
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	2101      	movs	r1, #1
 80090a0:	400b      	ands	r3, r1
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6999      	ldr	r1, [r3, #24]
 80090a8:	2380      	movs	r3, #128	@ 0x80
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	400b      	ands	r3, r1
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	2138      	movs	r1, #56	@ 0x38
 80090b6:	400b      	ands	r3, r1
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	2180      	movs	r1, #128	@ 0x80
 80090c0:	400b      	ands	r3, r1
 80090c2:	431a      	orrs	r2, r3
 80090c4:	0011      	movs	r1, r2
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090ca:	2380      	movs	r3, #128	@ 0x80
 80090cc:	019b      	lsls	r3, r3, #6
 80090ce:	401a      	ands	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	2204      	movs	r2, #4
 80090e0:	401a      	ands	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e6:	2110      	movs	r1, #16
 80090e8:	400b      	ands	r3, r1
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090f0:	2108      	movs	r1, #8
 80090f2:	400b      	ands	r3, r1
 80090f4:	431a      	orrs	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68d9      	ldr	r1, [r3, #12]
 80090fa:	23f0      	movs	r3, #240	@ 0xf0
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	400b      	ands	r3, r1
 8009100:	431a      	orrs	r2, r3
 8009102:	0011      	movs	r1, r2
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	2380      	movs	r3, #128	@ 0x80
 8009108:	015b      	lsls	r3, r3, #5
 800910a:	401a      	ands	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	69da      	ldr	r2, [r3, #28]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4907      	ldr	r1, [pc, #28]	@ (800913c <HAL_SPI_Init+0x16c>)
 8009120:	400a      	ands	r2, r1
 8009122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	225d      	movs	r2, #93	@ 0x5d
 800912e:	2101      	movs	r1, #1
 8009130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	0018      	movs	r0, r3
 8009136:	46bd      	mov	sp, r7
 8009138:	b004      	add	sp, #16
 800913a:	bd80      	pop	{r7, pc}
 800913c:	fffff7ff 	.word	0xfffff7ff

08009140 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	@ 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	001a      	movs	r2, r3
 800914e:	1cbb      	adds	r3, r7, #2
 8009150:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009152:	2301      	movs	r3, #1
 8009154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009156:	2323      	movs	r3, #35	@ 0x23
 8009158:	18fb      	adds	r3, r7, r3
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	225c      	movs	r2, #92	@ 0x5c
 8009162:	5c9b      	ldrb	r3, [r3, r2]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d101      	bne.n	800916c <HAL_SPI_TransmitReceive+0x2c>
 8009168:	2302      	movs	r3, #2
 800916a:	e1c4      	b.n	80094f6 <HAL_SPI_TransmitReceive+0x3b6>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	225c      	movs	r2, #92	@ 0x5c
 8009170:	2101      	movs	r1, #1
 8009172:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009174:	f7fb f954 	bl	8004420 <HAL_GetTick>
 8009178:	0003      	movs	r3, r0
 800917a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800917c:	201b      	movs	r0, #27
 800917e:	183b      	adds	r3, r7, r0
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	215d      	movs	r1, #93	@ 0x5d
 8009184:	5c52      	ldrb	r2, [r2, r1]
 8009186:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800918e:	2312      	movs	r3, #18
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	1cba      	adds	r2, r7, #2
 8009194:	8812      	ldrh	r2, [r2, #0]
 8009196:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009198:	183b      	adds	r3, r7, r0
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d011      	beq.n	80091c4 <HAL_SPI_TransmitReceive+0x84>
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	2382      	movs	r3, #130	@ 0x82
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d107      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x7a>
 80091b2:	183b      	adds	r3, r7, r0
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d004      	beq.n	80091c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80091ba:	2323      	movs	r3, #35	@ 0x23
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	2202      	movs	r2, #2
 80091c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80091c2:	e191      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <HAL_SPI_TransmitReceive+0x98>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <HAL_SPI_TransmitReceive+0x98>
 80091d0:	1cbb      	adds	r3, r7, #2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d104      	bne.n	80091e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80091d8:	2323      	movs	r3, #35	@ 0x23
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	2201      	movs	r2, #1
 80091de:	701a      	strb	r2, [r3, #0]
    goto error;
 80091e0:	e182      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	225d      	movs	r2, #93	@ 0x5d
 80091e6:	5c9b      	ldrb	r3, [r3, r2]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d003      	beq.n	80091f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	225d      	movs	r2, #93	@ 0x5d
 80091f2:	2105      	movs	r1, #5
 80091f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	1cba      	adds	r2, r7, #2
 8009206:	2146      	movs	r1, #70	@ 0x46
 8009208:	8812      	ldrh	r2, [r2, #0]
 800920a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	1cba      	adds	r2, r7, #2
 8009210:	2144      	movs	r1, #68	@ 0x44
 8009212:	8812      	ldrh	r2, [r2, #0]
 8009214:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	1cba      	adds	r2, r7, #2
 8009220:	8812      	ldrh	r2, [r2, #0]
 8009222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	1cba      	adds	r2, r7, #2
 8009228:	8812      	ldrh	r2, [r2, #0]
 800922a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	23e0      	movs	r3, #224	@ 0xe0
 800923e:	00db      	lsls	r3, r3, #3
 8009240:	429a      	cmp	r2, r3
 8009242:	d908      	bls.n	8009256 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685a      	ldr	r2, [r3, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	49ac      	ldr	r1, [pc, #688]	@ (8009500 <HAL_SPI_TransmitReceive+0x3c0>)
 8009250:	400a      	ands	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
 8009254:	e008      	b.n	8009268 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2180      	movs	r1, #128	@ 0x80
 8009262:	0149      	lsls	r1, r1, #5
 8009264:	430a      	orrs	r2, r1
 8009266:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2240      	movs	r2, #64	@ 0x40
 8009270:	4013      	ands	r3, r2
 8009272:	2b40      	cmp	r3, #64	@ 0x40
 8009274:	d007      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2140      	movs	r1, #64	@ 0x40
 8009282:	430a      	orrs	r2, r1
 8009284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	23e0      	movs	r3, #224	@ 0xe0
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	429a      	cmp	r2, r3
 8009290:	d800      	bhi.n	8009294 <HAL_SPI_TransmitReceive+0x154>
 8009292:	e083      	b.n	800939c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x168>
 800929c:	2312      	movs	r3, #18
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d000      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x168>
 80092a6:	e06d      	b.n	8009384 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	881a      	ldrh	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	1c9a      	adds	r2, r3, #2
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092cc:	e05a      	b.n	8009384 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	2202      	movs	r2, #2
 80092d6:	4013      	ands	r3, r2
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d11b      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x1d4>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d016      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x1d4>
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d113      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2201      	movs	r2, #1
 800931c:	4013      	ands	r3, r2
 800931e:	2b01      	cmp	r3, #1
 8009320:	d11c      	bne.n	800935c <HAL_SPI_TransmitReceive+0x21c>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2246      	movs	r2, #70	@ 0x46
 8009326:	5a9b      	ldrh	r3, [r3, r2]
 8009328:	b29b      	uxth	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d016      	beq.n	800935c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009338:	b292      	uxth	r2, r2
 800933a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009340:	1c9a      	adds	r2, r3, #2
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2246      	movs	r2, #70	@ 0x46
 800934a:	5a9b      	ldrh	r3, [r3, r2]
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b299      	uxth	r1, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2246      	movs	r2, #70	@ 0x46
 8009356:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009358:	2301      	movs	r3, #1
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800935c:	f7fb f860 	bl	8004420 <HAL_GetTick>
 8009360:	0002      	movs	r2, r0
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009368:	429a      	cmp	r2, r3
 800936a:	d80b      	bhi.n	8009384 <HAL_SPI_TransmitReceive+0x244>
 800936c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936e:	3301      	adds	r3, #1
 8009370:	d008      	beq.n	8009384 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009372:	2323      	movs	r3, #35	@ 0x23
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2203      	movs	r2, #3
 8009378:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	225d      	movs	r2, #93	@ 0x5d
 800937e:	2101      	movs	r1, #1
 8009380:	5499      	strb	r1, [r3, r2]
        goto error;
 8009382:	e0b1      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009388:	b29b      	uxth	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d19f      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x18e>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2246      	movs	r2, #70	@ 0x46
 8009392:	5a9b      	ldrh	r3, [r3, r2]
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d199      	bne.n	80092ce <HAL_SPI_TransmitReceive+0x18e>
 800939a:	e089      	b.n	80094b0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <HAL_SPI_TransmitReceive+0x270>
 80093a4:	2312      	movs	r3, #18
 80093a6:	18fb      	adds	r3, r7, r3
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d000      	beq.n	80093b0 <HAL_SPI_TransmitReceive+0x270>
 80093ae:	e074      	b.n	800949a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	7812      	ldrb	r2, [r2, #0]
 80093bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093d6:	e060      	b.n	800949a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2202      	movs	r2, #2
 80093e0:	4013      	ands	r3, r2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d11c      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x2e0>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d017      	beq.n	8009420 <HAL_SPI_TransmitReceive+0x2e0>
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d114      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	330c      	adds	r3, #12
 8009400:	7812      	ldrb	r2, [r2, #0]
 8009402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009412:	b29b      	uxth	r3, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2201      	movs	r2, #1
 8009428:	4013      	ands	r3, r2
 800942a:	2b01      	cmp	r3, #1
 800942c:	d11e      	bne.n	800946c <HAL_SPI_TransmitReceive+0x32c>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2246      	movs	r2, #70	@ 0x46
 8009432:	5a9b      	ldrh	r3, [r3, r2]
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d018      	beq.n	800946c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	330c      	adds	r3, #12
 8009440:	001a      	movs	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	b2d2      	uxtb	r2, r2
 800944a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009450:	1c5a      	adds	r2, r3, #1
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2246      	movs	r2, #70	@ 0x46
 800945a:	5a9b      	ldrh	r3, [r3, r2]
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b299      	uxth	r1, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2246      	movs	r2, #70	@ 0x46
 8009466:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009468:	2301      	movs	r3, #1
 800946a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800946c:	f7fa ffd8 	bl	8004420 <HAL_GetTick>
 8009470:	0002      	movs	r2, r0
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009478:	429a      	cmp	r2, r3
 800947a:	d802      	bhi.n	8009482 <HAL_SPI_TransmitReceive+0x342>
 800947c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947e:	3301      	adds	r3, #1
 8009480:	d102      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x348>
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	2b00      	cmp	r3, #0
 8009486:	d108      	bne.n	800949a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009488:	2323      	movs	r3, #35	@ 0x23
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	2203      	movs	r2, #3
 800948e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	225d      	movs	r2, #93	@ 0x5d
 8009494:	2101      	movs	r1, #1
 8009496:	5499      	strb	r1, [r3, r2]
        goto error;
 8009498:	e026      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d199      	bne.n	80093d8 <HAL_SPI_TransmitReceive+0x298>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2246      	movs	r2, #70	@ 0x46
 80094a8:	5a9b      	ldrh	r3, [r3, r2]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d193      	bne.n	80093d8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	0018      	movs	r0, r3
 80094b8:	f000 f954 	bl	8009764 <SPI_EndRxTxTransaction>
 80094bc:	1e03      	subs	r3, r0, #0
 80094be:	d006      	beq.n	80094ce <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80094c0:	2323      	movs	r3, #35	@ 0x23
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	2201      	movs	r2, #1
 80094c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2220      	movs	r2, #32
 80094cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d004      	beq.n	80094e0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80094d6:	2323      	movs	r3, #35	@ 0x23
 80094d8:	18fb      	adds	r3, r7, r3
 80094da:	2201      	movs	r2, #1
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	e003      	b.n	80094e8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	225d      	movs	r2, #93	@ 0x5d
 80094e4:	2101      	movs	r1, #1
 80094e6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	225c      	movs	r2, #92	@ 0x5c
 80094ec:	2100      	movs	r1, #0
 80094ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80094f0:	2323      	movs	r3, #35	@ 0x23
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	781b      	ldrb	r3, [r3, #0]
}
 80094f6:	0018      	movs	r0, r3
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b00a      	add	sp, #40	@ 0x28
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	ffffefff 	.word	0xffffefff

08009504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	1dfb      	adds	r3, r7, #7
 8009512:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009514:	f7fa ff84 	bl	8004420 <HAL_GetTick>
 8009518:	0002      	movs	r2, r0
 800951a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	18d3      	adds	r3, r2, r3
 8009522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009524:	f7fa ff7c 	bl	8004420 <HAL_GetTick>
 8009528:	0003      	movs	r3, r0
 800952a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800952c:	4b3a      	ldr	r3, [pc, #232]	@ (8009618 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	015b      	lsls	r3, r3, #5
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	4353      	muls	r3, r2
 8009538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800953a:	e058      	b.n	80095ee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	d055      	beq.n	80095ee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009542:	f7fa ff6d 	bl	8004420 <HAL_GetTick>
 8009546:	0002      	movs	r2, r0
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	429a      	cmp	r2, r3
 8009550:	d902      	bls.n	8009558 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d142      	bne.n	80095de <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	21e0      	movs	r1, #224	@ 0xe0
 8009564:	438a      	bics	r2, r1
 8009566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	2382      	movs	r3, #130	@ 0x82
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	429a      	cmp	r2, r3
 8009572:	d113      	bne.n	800959c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	2380      	movs	r3, #128	@ 0x80
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	429a      	cmp	r2, r3
 800957e:	d005      	beq.n	800958c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	2380      	movs	r3, #128	@ 0x80
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	429a      	cmp	r2, r3
 800958a:	d107      	bne.n	800959c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2140      	movs	r1, #64	@ 0x40
 8009598:	438a      	bics	r2, r1
 800959a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095a0:	2380      	movs	r3, #128	@ 0x80
 80095a2:	019b      	lsls	r3, r3, #6
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d110      	bne.n	80095ca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	491a      	ldr	r1, [pc, #104]	@ (800961c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80095b4:	400a      	ands	r2, r1
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2180      	movs	r1, #128	@ 0x80
 80095c4:	0189      	lsls	r1, r1, #6
 80095c6:	430a      	orrs	r2, r1
 80095c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	225d      	movs	r2, #93	@ 0x5d
 80095ce:	2101      	movs	r1, #1
 80095d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	225c      	movs	r2, #92	@ 0x5c
 80095d6:	2100      	movs	r1, #0
 80095d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e017      	b.n	800960e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80095e4:	2300      	movs	r3, #0
 80095e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	4013      	ands	r3, r2
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	425a      	negs	r2, r3
 80095fe:	4153      	adcs	r3, r2
 8009600:	b2db      	uxtb	r3, r3
 8009602:	001a      	movs	r2, r3
 8009604:	1dfb      	adds	r3, r7, #7
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d197      	bne.n	800953c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	0018      	movs	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	b008      	add	sp, #32
 8009614:	bd80      	pop	{r7, pc}
 8009616:	46c0      	nop			@ (mov r8, r8)
 8009618:	20000000 	.word	0x20000000
 800961c:	ffffdfff 	.word	0xffffdfff

08009620 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08a      	sub	sp, #40	@ 0x28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800962e:	2317      	movs	r3, #23
 8009630:	18fb      	adds	r3, r7, r3
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009636:	f7fa fef3 	bl	8004420 <HAL_GetTick>
 800963a:	0002      	movs	r2, r0
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	1a9b      	subs	r3, r3, r2
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	18d3      	adds	r3, r2, r3
 8009644:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009646:	f7fa feeb 	bl	8004420 <HAL_GetTick>
 800964a:	0003      	movs	r3, r0
 800964c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009656:	4b41      	ldr	r3, [pc, #260]	@ (800975c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	0013      	movs	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	189b      	adds	r3, r3, r2
 8009660:	00da      	lsls	r2, r3, #3
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	0d1b      	lsrs	r3, r3, #20
 8009666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009668:	4353      	muls	r3, r2
 800966a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800966c:	e068      	b.n	8009740 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	23c0      	movs	r3, #192	@ 0xc0
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	429a      	cmp	r2, r3
 8009676:	d10a      	bne.n	800968e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d107      	bne.n	800968e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	b2da      	uxtb	r2, r3
 8009684:	2117      	movs	r1, #23
 8009686:	187b      	adds	r3, r7, r1
 8009688:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800968a:	187b      	adds	r3, r7, r1
 800968c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	d055      	beq.n	8009740 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009694:	f7fa fec4 	bl	8004420 <HAL_GetTick>
 8009698:	0002      	movs	r2, r0
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d902      	bls.n	80096aa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d142      	bne.n	8009730 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	21e0      	movs	r1, #224	@ 0xe0
 80096b6:	438a      	bics	r2, r1
 80096b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	2382      	movs	r3, #130	@ 0x82
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d113      	bne.n	80096ee <SPI_WaitFifoStateUntilTimeout+0xce>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	2380      	movs	r3, #128	@ 0x80
 80096cc:	021b      	lsls	r3, r3, #8
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d005      	beq.n	80096de <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	2380      	movs	r3, #128	@ 0x80
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	429a      	cmp	r2, r3
 80096dc:	d107      	bne.n	80096ee <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2140      	movs	r1, #64	@ 0x40
 80096ea:	438a      	bics	r2, r1
 80096ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096f2:	2380      	movs	r3, #128	@ 0x80
 80096f4:	019b      	lsls	r3, r3, #6
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d110      	bne.n	800971c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4916      	ldr	r1, [pc, #88]	@ (8009760 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009706:	400a      	ands	r2, r1
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2180      	movs	r1, #128	@ 0x80
 8009716:	0189      	lsls	r1, r1, #6
 8009718:	430a      	orrs	r2, r1
 800971a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	225d      	movs	r2, #93	@ 0x5d
 8009720:	2101      	movs	r1, #1
 8009722:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	225c      	movs	r2, #92	@ 0x5c
 8009728:	2100      	movs	r1, #0
 800972a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e010      	b.n	8009752 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	3b01      	subs	r3, #1
 800973e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	4013      	ands	r3, r2
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d18e      	bne.n	800966e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	0018      	movs	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	b00a      	add	sp, #40	@ 0x28
 8009758:	bd80      	pop	{r7, pc}
 800975a:	46c0      	nop			@ (mov r8, r8)
 800975c:	20000000 	.word	0x20000000
 8009760:	ffffdfff 	.word	0xffffdfff

08009764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	23c0      	movs	r3, #192	@ 0xc0
 8009774:	0159      	lsls	r1, r3, #5
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	0013      	movs	r3, r2
 800977e:	2200      	movs	r2, #0
 8009780:	f7ff ff4e 	bl	8009620 <SPI_WaitFifoStateUntilTimeout>
 8009784:	1e03      	subs	r3, r0, #0
 8009786:	d007      	beq.n	8009798 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800978c:	2220      	movs	r2, #32
 800978e:	431a      	orrs	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e027      	b.n	80097e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	0013      	movs	r3, r2
 80097a2:	2200      	movs	r2, #0
 80097a4:	2180      	movs	r1, #128	@ 0x80
 80097a6:	f7ff fead 	bl	8009504 <SPI_WaitFlagStateUntilTimeout>
 80097aa:	1e03      	subs	r3, r0, #0
 80097ac:	d007      	beq.n	80097be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097b2:	2220      	movs	r2, #32
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e014      	b.n	80097e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	23c0      	movs	r3, #192	@ 0xc0
 80097c2:	00d9      	lsls	r1, r3, #3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	0013      	movs	r3, r2
 80097cc:	2200      	movs	r2, #0
 80097ce:	f7ff ff27 	bl	8009620 <SPI_WaitFifoStateUntilTimeout>
 80097d2:	1e03      	subs	r3, r0, #0
 80097d4:	d007      	beq.n	80097e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097da:	2220      	movs	r2, #32
 80097dc:	431a      	orrs	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e000      	b.n	80097e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b004      	add	sp, #16
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e04a      	b.n	8009898 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	223d      	movs	r2, #61	@ 0x3d
 8009806:	5c9b      	ldrb	r3, [r3, r2]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d107      	bne.n	800981e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	223c      	movs	r2, #60	@ 0x3c
 8009812:	2100      	movs	r1, #0
 8009814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	0018      	movs	r0, r3
 800981a:	f7fa fac9 	bl	8003db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	223d      	movs	r2, #61	@ 0x3d
 8009822:	2102      	movs	r1, #2
 8009824:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	3304      	adds	r3, #4
 800982e:	0019      	movs	r1, r3
 8009830:	0010      	movs	r0, r2
 8009832:	f000 f9e7 	bl	8009c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2248      	movs	r2, #72	@ 0x48
 800983a:	2101      	movs	r1, #1
 800983c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	223e      	movs	r2, #62	@ 0x3e
 8009842:	2101      	movs	r1, #1
 8009844:	5499      	strb	r1, [r3, r2]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	223f      	movs	r2, #63	@ 0x3f
 800984a:	2101      	movs	r1, #1
 800984c:	5499      	strb	r1, [r3, r2]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2240      	movs	r2, #64	@ 0x40
 8009852:	2101      	movs	r1, #1
 8009854:	5499      	strb	r1, [r3, r2]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2241      	movs	r2, #65	@ 0x41
 800985a:	2101      	movs	r1, #1
 800985c:	5499      	strb	r1, [r3, r2]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2242      	movs	r2, #66	@ 0x42
 8009862:	2101      	movs	r1, #1
 8009864:	5499      	strb	r1, [r3, r2]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2243      	movs	r2, #67	@ 0x43
 800986a:	2101      	movs	r1, #1
 800986c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2244      	movs	r2, #68	@ 0x44
 8009872:	2101      	movs	r1, #1
 8009874:	5499      	strb	r1, [r3, r2]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2245      	movs	r2, #69	@ 0x45
 800987a:	2101      	movs	r1, #1
 800987c:	5499      	strb	r1, [r3, r2]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2246      	movs	r2, #70	@ 0x46
 8009882:	2101      	movs	r1, #1
 8009884:	5499      	strb	r1, [r3, r2]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2247      	movs	r2, #71	@ 0x47
 800988a:	2101      	movs	r1, #1
 800988c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	223d      	movs	r2, #61	@ 0x3d
 8009892:	2101      	movs	r1, #1
 8009894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	0018      	movs	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	b002      	add	sp, #8
 800989e:	bd80      	pop	{r7, pc}

080098a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	223d      	movs	r2, #61	@ 0x3d
 80098ac:	5c9b      	ldrb	r3, [r3, r2]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d001      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e041      	b.n	800993c <HAL_TIM_Base_Start_IT+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	223d      	movs	r2, #61	@ 0x3d
 80098bc:	2102      	movs	r1, #2
 80098be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2101      	movs	r1, #1
 80098cc:	430a      	orrs	r2, r1
 80098ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009944 <HAL_TIM_Base_Start_IT+0xa4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00e      	beq.n	80098f8 <HAL_TIM_Base_Start_IT+0x58>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a1a      	ldr	r2, [pc, #104]	@ (8009948 <HAL_TIM_Base_Start_IT+0xa8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d009      	beq.n	80098f8 <HAL_TIM_Base_Start_IT+0x58>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a18      	ldr	r2, [pc, #96]	@ (800994c <HAL_TIM_Base_Start_IT+0xac>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d004      	beq.n	80098f8 <HAL_TIM_Base_Start_IT+0x58>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a17      	ldr	r2, [pc, #92]	@ (8009950 <HAL_TIM_Base_Start_IT+0xb0>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d116      	bne.n	8009926 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	4a15      	ldr	r2, [pc, #84]	@ (8009954 <HAL_TIM_Base_Start_IT+0xb4>)
 8009900:	4013      	ands	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b06      	cmp	r3, #6
 8009908:	d016      	beq.n	8009938 <HAL_TIM_Base_Start_IT+0x98>
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	2380      	movs	r3, #128	@ 0x80
 800990e:	025b      	lsls	r3, r3, #9
 8009910:	429a      	cmp	r2, r3
 8009912:	d011      	beq.n	8009938 <HAL_TIM_Base_Start_IT+0x98>
    {
      __HAL_TIM_ENABLE(htim);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2101      	movs	r1, #1
 8009920:	430a      	orrs	r2, r1
 8009922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009924:	e008      	b.n	8009938 <HAL_TIM_Base_Start_IT+0x98>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2101      	movs	r1, #1
 8009932:	430a      	orrs	r2, r1
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e000      	b.n	800993a <HAL_TIM_Base_Start_IT+0x9a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009938:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	0018      	movs	r0, r3
 800993e:	46bd      	mov	sp, r7
 8009940:	b004      	add	sp, #16
 8009942:	bd80      	pop	{r7, pc}
 8009944:	40012c00 	.word	0x40012c00
 8009948:	40000400 	.word	0x40000400
 800994c:	40000800 	.word	0x40000800
 8009950:	40014000 	.word	0x40014000
 8009954:	00010007 	.word	0x00010007

08009958 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2101      	movs	r1, #1
 800996c:	438a      	bics	r2, r1
 800996e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	4a0d      	ldr	r2, [pc, #52]	@ (80099ac <HAL_TIM_Base_Stop_IT+0x54>)
 8009978:	4013      	ands	r3, r2
 800997a:	d10d      	bne.n	8009998 <HAL_TIM_Base_Stop_IT+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	4a0b      	ldr	r2, [pc, #44]	@ (80099b0 <HAL_TIM_Base_Stop_IT+0x58>)
 8009984:	4013      	ands	r3, r2
 8009986:	d107      	bne.n	8009998 <HAL_TIM_Base_Stop_IT+0x40>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2101      	movs	r1, #1
 8009994:	438a      	bics	r2, r1
 8009996:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	223d      	movs	r2, #61	@ 0x3d
 800999c:	2101      	movs	r1, #1
 800999e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	0018      	movs	r0, r3
 80099a4:	46bd      	mov	sp, r7
 80099a6:	b002      	add	sp, #8
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	00001111 	.word	0x00001111
 80099b0:	00000444 	.word	0x00000444

080099b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2202      	movs	r2, #2
 80099d0:	4013      	ands	r3, r2
 80099d2:	d021      	beq.n	8009a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2202      	movs	r2, #2
 80099d8:	4013      	ands	r3, r2
 80099da:	d01d      	beq.n	8009a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2203      	movs	r2, #3
 80099e2:	4252      	negs	r2, r2
 80099e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	2203      	movs	r2, #3
 80099f4:	4013      	ands	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	0018      	movs	r0, r3
 80099fc:	f000 f8ea 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009a00:	e007      	b.n	8009a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f000 f8dd 	bl	8009bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f000 f8e9 	bl	8009be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2204      	movs	r2, #4
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	d022      	beq.n	8009a66 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2204      	movs	r2, #4
 8009a24:	4013      	ands	r3, r2
 8009a26:	d01e      	beq.n	8009a66 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	4252      	negs	r2, r2
 8009a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	23c0      	movs	r3, #192	@ 0xc0
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4013      	ands	r3, r2
 8009a44:	d004      	beq.n	8009a50 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f000 f8c3 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009a4e:	e007      	b.n	8009a60 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	0018      	movs	r0, r3
 8009a54:	f000 f8b6 	bl	8009bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f000 f8c2 	bl	8009be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	d021      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2208      	movs	r2, #8
 8009a72:	4013      	ands	r3, r2
 8009a74:	d01d      	beq.n	8009ab2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2209      	movs	r2, #9
 8009a7c:	4252      	negs	r2, r2
 8009a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2204      	movs	r2, #4
 8009a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69db      	ldr	r3, [r3, #28]
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	4013      	ands	r3, r2
 8009a90:	d004      	beq.n	8009a9c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	0018      	movs	r0, r3
 8009a96:	f000 f89d 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009a9a:	e007      	b.n	8009aac <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f000 f890 	bl	8009bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f000 f89c 	bl	8009be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2210      	movs	r2, #16
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	d022      	beq.n	8009b00 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2210      	movs	r2, #16
 8009abe:	4013      	ands	r3, r2
 8009ac0:	d01e      	beq.n	8009b00 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2211      	movs	r2, #17
 8009ac8:	4252      	negs	r2, r2
 8009aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2208      	movs	r2, #8
 8009ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	23c0      	movs	r3, #192	@ 0xc0
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4013      	ands	r3, r2
 8009ade:	d004      	beq.n	8009aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f000 f876 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e007      	b.n	8009afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 f869 	bl	8009bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	0018      	movs	r0, r3
 8009af6:	f000 f875 	bl	8009be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2201      	movs	r2, #1
 8009b04:	4013      	ands	r3, r2
 8009b06:	d00c      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	d008      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2202      	movs	r2, #2
 8009b16:	4252      	negs	r2, r2
 8009b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f7f9 fddb 	bl	80036d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2280      	movs	r2, #128	@ 0x80
 8009b26:	4013      	ands	r3, r2
 8009b28:	d104      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	2380      	movs	r3, #128	@ 0x80
 8009b2e:	019b      	lsls	r3, r3, #6
 8009b30:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009b32:	d00b      	beq.n	8009b4c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2280      	movs	r2, #128	@ 0x80
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d007      	beq.n	8009b4c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1e      	ldr	r2, [pc, #120]	@ (8009bbc <HAL_TIM_IRQHandler+0x208>)
 8009b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 f962 	bl	8009e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	2380      	movs	r3, #128	@ 0x80
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	4013      	ands	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2280      	movs	r2, #128	@ 0x80
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	d007      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a17      	ldr	r2, [pc, #92]	@ (8009bc0 <HAL_TIM_IRQHandler+0x20c>)
 8009b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 f959 	bl	8009e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2240      	movs	r2, #64	@ 0x40
 8009b72:	4013      	ands	r3, r2
 8009b74:	d00c      	beq.n	8009b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2240      	movs	r2, #64	@ 0x40
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	d008      	beq.n	8009b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2241      	movs	r2, #65	@ 0x41
 8009b84:	4252      	negs	r2, r2
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	f000 f832 	bl	8009bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2220      	movs	r2, #32
 8009b94:	4013      	ands	r3, r2
 8009b96:	d00c      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	d008      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2221      	movs	r2, #33	@ 0x21
 8009ba6:	4252      	negs	r2, r2
 8009ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	0018      	movs	r0, r3
 8009bae:	f000 f927 	bl	8009e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b004      	add	sp, #16
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	ffffdf7f 	.word	0xffffdf7f
 8009bc0:	fffffeff 	.word	0xfffffeff

08009bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bcc:	46c0      	nop			@ (mov r8, r8)
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b002      	add	sp, #8
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bdc:	46c0      	nop			@ (mov r8, r8)
 8009bde:	46bd      	mov	sp, r7
 8009be0:	b002      	add	sp, #8
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bec:	46c0      	nop			@ (mov r8, r8)
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b002      	add	sp, #8
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bfc:	46c0      	nop			@ (mov r8, r8)
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	b002      	add	sp, #8
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a3a      	ldr	r2, [pc, #232]	@ (8009d00 <TIM_Base_SetConfig+0xfc>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d007      	beq.n	8009c2c <TIM_Base_SetConfig+0x28>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a39      	ldr	r2, [pc, #228]	@ (8009d04 <TIM_Base_SetConfig+0x100>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d003      	beq.n	8009c2c <TIM_Base_SetConfig+0x28>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a38      	ldr	r2, [pc, #224]	@ (8009d08 <TIM_Base_SetConfig+0x104>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d108      	bne.n	8009c3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2270      	movs	r2, #112	@ 0x70
 8009c30:	4393      	bics	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a2f      	ldr	r2, [pc, #188]	@ (8009d00 <TIM_Base_SetConfig+0xfc>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d017      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2e      	ldr	r2, [pc, #184]	@ (8009d04 <TIM_Base_SetConfig+0x100>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2d      	ldr	r2, [pc, #180]	@ (8009d08 <TIM_Base_SetConfig+0x104>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00f      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2c      	ldr	r2, [pc, #176]	@ (8009d0c <TIM_Base_SetConfig+0x108>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00b      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a2b      	ldr	r2, [pc, #172]	@ (8009d10 <TIM_Base_SetConfig+0x10c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d007      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a2a      	ldr	r2, [pc, #168]	@ (8009d14 <TIM_Base_SetConfig+0x110>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d003      	beq.n	8009c76 <TIM_Base_SetConfig+0x72>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a29      	ldr	r2, [pc, #164]	@ (8009d18 <TIM_Base_SetConfig+0x114>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d108      	bne.n	8009c88 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4a28      	ldr	r2, [pc, #160]	@ (8009d1c <TIM_Base_SetConfig+0x118>)
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2280      	movs	r2, #128	@ 0x80
 8009c8c:	4393      	bics	r3, r2
 8009c8e:	001a      	movs	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a13      	ldr	r2, [pc, #76]	@ (8009d00 <TIM_Base_SetConfig+0xfc>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d00b      	beq.n	8009cce <TIM_Base_SetConfig+0xca>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a15      	ldr	r2, [pc, #84]	@ (8009d10 <TIM_Base_SetConfig+0x10c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d007      	beq.n	8009cce <TIM_Base_SetConfig+0xca>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a14      	ldr	r2, [pc, #80]	@ (8009d14 <TIM_Base_SetConfig+0x110>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d003      	beq.n	8009cce <TIM_Base_SetConfig+0xca>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a13      	ldr	r2, [pc, #76]	@ (8009d18 <TIM_Base_SetConfig+0x114>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d103      	bne.n	8009cd6 <TIM_Base_SetConfig+0xd2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d106      	bne.n	8009cf6 <TIM_Base_SetConfig+0xf2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	2201      	movs	r2, #1
 8009cee:	4393      	bics	r3, r2
 8009cf0:	001a      	movs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	611a      	str	r2, [r3, #16]
  }
}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	b004      	add	sp, #16
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	46c0      	nop			@ (mov r8, r8)
 8009d00:	40012c00 	.word	0x40012c00
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40002000 	.word	0x40002000
 8009d10:	40014000 	.word	0x40014000
 8009d14:	40014400 	.word	0x40014400
 8009d18:	40014800 	.word	0x40014800
 8009d1c:	fffffcff 	.word	0xfffffcff

08009d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	223c      	movs	r2, #60	@ 0x3c
 8009d2e:	5c9b      	ldrb	r3, [r3, r2]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d101      	bne.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e054      	b.n	8009de2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	223c      	movs	r2, #60	@ 0x3c
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	223d      	movs	r2, #61	@ 0x3d
 8009d44:	2102      	movs	r1, #2
 8009d46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a23      	ldr	r2, [pc, #140]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d108      	bne.n	8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4a22      	ldr	r2, [pc, #136]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2270      	movs	r2, #112	@ 0x70
 8009d78:	4393      	bics	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00e      	beq.n	8009db6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a15      	ldr	r2, [pc, #84]	@ (8009df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d009      	beq.n	8009db6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a14      	ldr	r2, [pc, #80]	@ (8009df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d004      	beq.n	8009db6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a12      	ldr	r2, [pc, #72]	@ (8009dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d10c      	bne.n	8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2280      	movs	r2, #128	@ 0x80
 8009dba:	4393      	bics	r3, r2
 8009dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	223d      	movs	r2, #61	@ 0x3d
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	223c      	movs	r2, #60	@ 0x3c
 8009ddc:	2100      	movs	r1, #0
 8009dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	0018      	movs	r0, r3
 8009de4:	46bd      	mov	sp, r7
 8009de6:	b004      	add	sp, #16
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	46c0      	nop			@ (mov r8, r8)
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	ff0fffff 	.word	0xff0fffff
 8009df4:	40000400 	.word	0x40000400
 8009df8:	40000800 	.word	0x40000800
 8009dfc:	40014000 	.word	0x40014000

08009e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e08:	46c0      	nop			@ (mov r8, r8)
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	b002      	add	sp, #8
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e18:	46c0      	nop			@ (mov r8, r8)
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b002      	add	sp, #8
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e28:	46c0      	nop			@ (mov r8, r8)
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b002      	add	sp, #8
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e3e:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <USB_EnableGlobalInt+0x24>)
 8009e40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	b004      	add	sp, #16
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	46c0      	nop			@ (mov r8, r8)
 8009e54:	0000bf80 	.word	0x0000bf80

08009e58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009e60:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <USB_DisableGlobalInt+0x24>)
 8009e62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	43d2      	mvns	r2, r2
 8009e6c:	401a      	ands	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	0018      	movs	r0, r3
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b004      	add	sp, #16
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	0000bf80 	.word	0x0000bf80

08009e80 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	000a      	movs	r2, r1
 8009e8a:	1cfb      	adds	r3, r7, #3
 8009e8c:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8009e8e:	1cfb      	adds	r3, r7, #3
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	085a      	lsrs	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8009ea2:	e00d      	b.n	8009ec0 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8009ea4:	1cfb      	adds	r3, r7, #3
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d107      	bne.n	8009ebc <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb0:	2280      	movs	r2, #128	@ 0x80
 8009eb2:	0612      	lsls	r2, r2, #24
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8009eba:	e001      	b.n	8009ec0 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e000      	b.n	8009ec2 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b002      	add	sp, #8
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009eca:	b084      	sub	sp, #16
 8009ecc:	b5b0      	push	{r4, r5, r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	2004      	movs	r0, #4
 8009ed6:	2420      	movs	r4, #32
 8009ed8:	1900      	adds	r0, r0, r4
 8009eda:	19c0      	adds	r0, r0, r7
 8009edc:	6001      	str	r1, [r0, #0]
 8009ede:	6042      	str	r2, [r0, #4]
 8009ee0:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eec:	2201      	movs	r2, #1
 8009eee:	4393      	bics	r3, r2
 8009ef0:	001a      	movs	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8009ef6:	250f      	movs	r5, #15
 8009ef8:	197c      	adds	r4, r7, r5
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2100      	movs	r1, #0
 8009efe:	0018      	movs	r0, r3
 8009f00:	f7ff ffbe 	bl	8009e80 <USB_SetCurrentMode>
 8009f04:	0003      	movs	r3, r0
 8009f06:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8009f0e:	197b      	adds	r3, r7, r5
 8009f10:	781b      	ldrb	r3, [r3, #0]
}
 8009f12:	0018      	movs	r0, r3
 8009f14:	46bd      	mov	sp, r7
 8009f16:	b004      	add	sp, #16
 8009f18:	bcb0      	pop	{r4, r5, r7}
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	b004      	add	sp, #16
 8009f1e:	4718      	bx	r3

08009f20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b09e      	sub	sp, #120	@ 0x78
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f2a:	2377      	movs	r3, #119	@ 0x77
 8009f2c:	18fb      	adds	r3, r7, r3
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	18d3      	adds	r3, r2, r3
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4adc      	ldr	r2, [pc, #880]	@ (800a2b0 <USB_ActivateEndpoint+0x390>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d00e      	beq.n	8009f6a <USB_ActivateEndpoint+0x4a>
 8009f4c:	dc19      	bgt.n	8009f82 <USB_ActivateEndpoint+0x62>
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d01c      	beq.n	8009f8c <USB_ActivateEndpoint+0x6c>
 8009f52:	dc16      	bgt.n	8009f82 <USB_ActivateEndpoint+0x62>
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d002      	beq.n	8009f5e <USB_ActivateEndpoint+0x3e>
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d00c      	beq.n	8009f76 <USB_ActivateEndpoint+0x56>
 8009f5c:	e011      	b.n	8009f82 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f60:	2280      	movs	r2, #128	@ 0x80
 8009f62:	0092      	lsls	r2, r2, #2
 8009f64:	4313      	orrs	r3, r2
 8009f66:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009f68:	e011      	b.n	8009f8e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f6c:	22c0      	movs	r2, #192	@ 0xc0
 8009f6e:	00d2      	lsls	r2, r2, #3
 8009f70:	4313      	orrs	r3, r2
 8009f72:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009f74:	e00b      	b.n	8009f8e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f78:	2280      	movs	r2, #128	@ 0x80
 8009f7a:	00d2      	lsls	r2, r2, #3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8009f80:	e005      	b.n	8009f8e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8009f82:	2377      	movs	r3, #119	@ 0x77
 8009f84:	18fb      	adds	r3, r7, r3
 8009f86:	2201      	movs	r2, #1
 8009f88:	701a      	strb	r2, [r3, #0]
      break;
 8009f8a:	e000      	b.n	8009f8e <USB_ActivateEndpoint+0x6e>
      break;
 8009f8c:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	18d3      	adds	r3, r2, r3
 8009f98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009f9a:	49c6      	ldr	r1, [pc, #792]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	18d3      	adds	r3, r2, r3
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4ac2      	ldr	r2, [pc, #776]	@ (800a2b8 <USB_ActivateEndpoint+0x398>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	18d3      	adds	r3, r2, r3
 8009fc2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009fc4:	49bb      	ldr	r1, [pc, #748]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	7b1b      	ldrb	r3, [r3, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d000      	beq.n	8009fd4 <USB_ActivateEndpoint+0xb4>
 8009fd2:	e155      	b.n	800a280 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d06e      	beq.n	800a0ba <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	00db      	lsls	r3, r3, #3
 8009fe2:	4ab6      	ldr	r2, [pc, #728]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 8009fe4:	4694      	mov	ip, r2
 8009fe6:	4463      	add	r3, ip
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	49b2      	ldr	r1, [pc, #712]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 8009ff2:	468c      	mov	ip, r1
 8009ff4:	4463      	add	r3, ip
 8009ff6:	0c12      	lsrs	r2, r2, #16
 8009ff8:	0412      	lsls	r2, r2, #16
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4aae      	ldr	r2, [pc, #696]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a004:	4694      	mov	ip, r2
 800a006:	4463      	add	r3, ip
 800a008:	6819      	ldr	r1, [r3, #0]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	089b      	lsrs	r3, r3, #2
 800a010:	b29b      	uxth	r3, r3
 800a012:	009a      	lsls	r2, r3, #2
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	48a8      	ldr	r0, [pc, #672]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a01c:	4684      	mov	ip, r0
 800a01e:	4463      	add	r3, ip
 800a020:	430a      	orrs	r2, r1
 800a022:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	18d3      	adds	r3, r2, r3
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	2240      	movs	r2, #64	@ 0x40
 800a036:	4013      	ands	r3, r2
 800a038:	d011      	beq.n	800a05e <USB_ActivateEndpoint+0x13e>
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	18d3      	adds	r3, r2, r3
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a9c      	ldr	r2, [pc, #624]	@ (800a2b8 <USB_ActivateEndpoint+0x398>)
 800a048:	4013      	ands	r3, r2
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	18d3      	adds	r3, r2, r3
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4999      	ldr	r1, [pc, #612]	@ (800a2c0 <USB_ActivateEndpoint+0x3a0>)
 800a05a:	430a      	orrs	r2, r1
 800a05c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d016      	beq.n	800a094 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	18d3      	adds	r3, r2, r3
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a94      	ldr	r2, [pc, #592]	@ (800a2c4 <USB_ActivateEndpoint+0x3a4>)
 800a074:	4013      	ands	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2220      	movs	r2, #32
 800a07c:	4053      	eors	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	18d3      	adds	r3, r2, r3
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4989      	ldr	r1, [pc, #548]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 800a08e:	430a      	orrs	r2, r1
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	e261      	b.n	800a558 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	18d3      	adds	r3, r2, r3
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a88      	ldr	r2, [pc, #544]	@ (800a2c4 <USB_ActivateEndpoint+0x3a4>)
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	613b      	str	r3, [r7, #16]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	18d3      	adds	r3, r2, r3
 800a0b0:	693a      	ldr	r2, [r7, #16]
 800a0b2:	4980      	ldr	r1, [pc, #512]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	e24e      	b.n	800a558 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4a7e      	ldr	r2, [pc, #504]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a0c2:	4694      	mov	ip, r2
 800a0c4:	4463      	add	r3, ip
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	00db      	lsls	r3, r3, #3
 800a0ce:	497b      	ldr	r1, [pc, #492]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a0d0:	468c      	mov	ip, r1
 800a0d2:	4463      	add	r3, ip
 800a0d4:	0c12      	lsrs	r2, r2, #16
 800a0d6:	0412      	lsls	r2, r2, #16
 800a0d8:	605a      	str	r2, [r3, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4a76      	ldr	r2, [pc, #472]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a0e2:	4694      	mov	ip, r2
 800a0e4:	4463      	add	r3, ip
 800a0e6:	6859      	ldr	r1, [r3, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	88db      	ldrh	r3, [r3, #6]
 800a0ec:	089b      	lsrs	r3, r3, #2
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	009a      	lsls	r2, r3, #2
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4870      	ldr	r0, [pc, #448]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a0fa:	4684      	mov	ip, r0
 800a0fc:	4463      	add	r3, ip
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	4a6c      	ldr	r2, [pc, #432]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a10a:	4694      	mov	ip, r2
 800a10c:	4463      	add	r3, ip
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	4969      	ldr	r1, [pc, #420]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a118:	468c      	mov	ip, r1
 800a11a:	4463      	add	r3, ip
 800a11c:	0192      	lsls	r2, r2, #6
 800a11e:	0992      	lsrs	r2, r2, #6
 800a120:	605a      	str	r2, [r3, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b3e      	cmp	r3, #62	@ 0x3e
 800a128:	d920      	bls.n	800a16c <USB_ActivateEndpoint+0x24c>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	095b      	lsrs	r3, r3, #5
 800a130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	221f      	movs	r2, #31
 800a138:	4013      	ands	r3, r2
 800a13a:	d102      	bne.n	800a142 <USB_ActivateEndpoint+0x222>
 800a13c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a13e:	3b01      	subs	r3, #1
 800a140:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	4a5c      	ldr	r2, [pc, #368]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a14a:	4694      	mov	ip, r2
 800a14c:	4463      	add	r3, ip
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a152:	069b      	lsls	r3, r3, #26
 800a154:	431a      	orrs	r2, r3
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	4957      	ldr	r1, [pc, #348]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a15e:	468c      	mov	ip, r1
 800a160:	4463      	add	r3, ip
 800a162:	2180      	movs	r1, #128	@ 0x80
 800a164:	0609      	lsls	r1, r1, #24
 800a166:	430a      	orrs	r2, r1
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	e032      	b.n	800a1d2 <USB_ActivateEndpoint+0x2b2>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d111      	bne.n	800a198 <USB_ActivateEndpoint+0x278>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	4a50      	ldr	r2, [pc, #320]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a17c:	4694      	mov	ip, r2
 800a17e:	4463      	add	r3, ip
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	494c      	ldr	r1, [pc, #304]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a18a:	468c      	mov	ip, r1
 800a18c:	4463      	add	r3, ip
 800a18e:	2180      	movs	r1, #128	@ 0x80
 800a190:	0609      	lsls	r1, r1, #24
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
 800a196:	e01c      	b.n	800a1d2 <USB_ActivateEndpoint+0x2b2>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	085b      	lsrs	r3, r3, #1
 800a19e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	d002      	beq.n	800a1b0 <USB_ActivateEndpoint+0x290>
 800a1aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	4a41      	ldr	r2, [pc, #260]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a1b8:	4694      	mov	ip, r2
 800a1ba:	4463      	add	r3, ip
 800a1bc:	6859      	ldr	r1, [r3, #4]
 800a1be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c0:	069a      	lsls	r2, r3, #26
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	483c      	ldr	r0, [pc, #240]	@ (800a2bc <USB_ActivateEndpoint+0x39c>)
 800a1ca:	4684      	mov	ip, r0
 800a1cc:	4463      	add	r3, ip
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	18d3      	adds	r3, r2, r3
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1e2:	2380      	movs	r3, #128	@ 0x80
 800a1e4:	01db      	lsls	r3, r3, #7
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	d011      	beq.n	800a20e <USB_ActivateEndpoint+0x2ee>
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	18d3      	adds	r3, r2, r3
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a30      	ldr	r2, [pc, #192]	@ (800a2b8 <USB_ActivateEndpoint+0x398>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	18d3      	adds	r3, r2, r3
 800a206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a208:	492f      	ldr	r1, [pc, #188]	@ (800a2c8 <USB_ActivateEndpoint+0x3a8>)
 800a20a:	430a      	orrs	r2, r1
 800a20c:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d11c      	bne.n	800a250 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	18d3      	adds	r3, r2, r3
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a2a      	ldr	r2, [pc, #168]	@ (800a2cc <USB_ActivateEndpoint+0x3ac>)
 800a224:	4013      	ands	r3, r2
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	2280      	movs	r2, #128	@ 0x80
 800a22c:	0152      	lsls	r2, r2, #5
 800a22e:	4053      	eors	r3, r2
 800a230:	61fb      	str	r3, [r7, #28]
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	2280      	movs	r2, #128	@ 0x80
 800a236:	0192      	lsls	r2, r2, #6
 800a238:	4053      	eors	r3, r2
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	18d3      	adds	r3, r2, r3
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	491a      	ldr	r1, [pc, #104]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 800a24a:	430a      	orrs	r2, r1
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e183      	b.n	800a558 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	18d3      	adds	r3, r2, r3
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a1b      	ldr	r2, [pc, #108]	@ (800a2cc <USB_ActivateEndpoint+0x3ac>)
 800a25e:	4013      	ands	r3, r2
 800a260:	623b      	str	r3, [r7, #32]
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	2280      	movs	r2, #128	@ 0x80
 800a266:	0192      	lsls	r2, r2, #6
 800a268:	4053      	eors	r3, r2
 800a26a:	623b      	str	r3, [r7, #32]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	18d3      	adds	r3, r2, r3
 800a276:	6a3a      	ldr	r2, [r7, #32]
 800a278:	490e      	ldr	r1, [pc, #56]	@ (800a2b4 <USB_ActivateEndpoint+0x394>)
 800a27a:	430a      	orrs	r2, r1
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e16b      	b.n	800a558 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d125      	bne.n	800a2d4 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	18d3      	adds	r3, r2, r3
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <USB_ActivateEndpoint+0x398>)
 800a296:	4013      	ands	r3, r2
 800a298:	663b      	str	r3, [r7, #96]	@ 0x60
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	18d3      	adds	r3, r2, r3
 800a2a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2a6:	490a      	ldr	r1, [pc, #40]	@ (800a2d0 <USB_ActivateEndpoint+0x3b0>)
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e024      	b.n	800a2f8 <USB_ActivateEndpoint+0x3d8>
 800a2ae:	46c0      	nop			@ (mov r8, r8)
 800a2b0:	07ff898f 	.word	0x07ff898f
 800a2b4:	00008080 	.word	0x00008080
 800a2b8:	07ff8f8f 	.word	0x07ff8f8f
 800a2bc:	40009800 	.word	0x40009800
 800a2c0:	000080c0 	.word	0x000080c0
 800a2c4:	07ff8fbf 	.word	0x07ff8fbf
 800a2c8:	0000c080 	.word	0x0000c080
 800a2cc:	07ffbf8f 	.word	0x07ffbf8f
 800a2d0:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	18d3      	adds	r3, r2, r3
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4aa1      	ldr	r2, [pc, #644]	@ (800a568 <USB_ActivateEndpoint+0x648>)
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	18d3      	adds	r3, r2, r3
 800a2f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a2f2:	499e      	ldr	r1, [pc, #632]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	4a9c      	ldr	r2, [pc, #624]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a300:	4694      	mov	ip, r2
 800a302:	4463      	add	r3, ip
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	4998      	ldr	r1, [pc, #608]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a30e:	468c      	mov	ip, r1
 800a310:	4463      	add	r3, ip
 800a312:	0c12      	lsrs	r2, r2, #16
 800a314:	0412      	lsls	r2, r2, #16
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	4a94      	ldr	r2, [pc, #592]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a320:	4694      	mov	ip, r2
 800a322:	4463      	add	r3, ip
 800a324:	6819      	ldr	r1, [r3, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	891b      	ldrh	r3, [r3, #8]
 800a32a:	089b      	lsrs	r3, r3, #2
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	009a      	lsls	r2, r3, #2
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	00db      	lsls	r3, r3, #3
 800a336:	488e      	ldr	r0, [pc, #568]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a338:	4684      	mov	ip, r0
 800a33a:	4463      	add	r3, ip
 800a33c:	430a      	orrs	r2, r1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	4a8a      	ldr	r2, [pc, #552]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a348:	4694      	mov	ip, r2
 800a34a:	4463      	add	r3, ip
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	4986      	ldr	r1, [pc, #536]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a356:	468c      	mov	ip, r1
 800a358:	4463      	add	r3, ip
 800a35a:	0c12      	lsrs	r2, r2, #16
 800a35c:	0412      	lsls	r2, r2, #16
 800a35e:	605a      	str	r2, [r3, #4]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	00db      	lsls	r3, r3, #3
 800a366:	4a82      	ldr	r2, [pc, #520]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a368:	4694      	mov	ip, r2
 800a36a:	4463      	add	r3, ip
 800a36c:	6859      	ldr	r1, [r3, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	895b      	ldrh	r3, [r3, #10]
 800a372:	089b      	lsrs	r3, r3, #2
 800a374:	b29b      	uxth	r3, r3
 800a376:	009a      	lsls	r2, r3, #2
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	487c      	ldr	r0, [pc, #496]	@ (800a570 <USB_ActivateEndpoint+0x650>)
 800a380:	4684      	mov	ip, r0
 800a382:	4463      	add	r3, ip
 800a384:	430a      	orrs	r2, r1
 800a386:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d169      	bne.n	800a464 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a39e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	01db      	lsls	r3, r3, #7
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d011      	beq.n	800a3cc <USB_ActivateEndpoint+0x4ac>
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	18d3      	adds	r3, r2, r3
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a6f      	ldr	r2, [pc, #444]	@ (800a574 <USB_ActivateEndpoint+0x654>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	18d3      	adds	r3, r2, r3
 800a3c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3c6:	496c      	ldr	r1, [pc, #432]	@ (800a578 <USB_ActivateEndpoint+0x658>)
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	18d3      	adds	r3, r2, r3
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	2240      	movs	r2, #64	@ 0x40
 800a3de:	4013      	ands	r3, r2
 800a3e0:	d011      	beq.n	800a406 <USB_ActivateEndpoint+0x4e6>
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	18d3      	adds	r3, r2, r3
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a61      	ldr	r2, [pc, #388]	@ (800a574 <USB_ActivateEndpoint+0x654>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	18d3      	adds	r3, r2, r3
 800a3fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a400:	495e      	ldr	r1, [pc, #376]	@ (800a57c <USB_ActivateEndpoint+0x65c>)
 800a402:	430a      	orrs	r2, r1
 800a404:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	18d3      	adds	r3, r2, r3
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a5b      	ldr	r2, [pc, #364]	@ (800a580 <USB_ActivateEndpoint+0x660>)
 800a414:	4013      	ands	r3, r2
 800a416:	633b      	str	r3, [r7, #48]	@ 0x30
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	2280      	movs	r2, #128	@ 0x80
 800a41c:	0152      	lsls	r2, r2, #5
 800a41e:	4053      	eors	r3, r2
 800a420:	633b      	str	r3, [r7, #48]	@ 0x30
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2280      	movs	r2, #128	@ 0x80
 800a426:	0192      	lsls	r2, r2, #6
 800a428:	4053      	eors	r3, r2
 800a42a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	18d3      	adds	r3, r2, r3
 800a436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a438:	494c      	ldr	r1, [pc, #304]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a43a:	430a      	orrs	r2, r1
 800a43c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	18d3      	adds	r3, r2, r3
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a4e      	ldr	r2, [pc, #312]	@ (800a584 <USB_ActivateEndpoint+0x664>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	18d3      	adds	r3, r2, r3
 800a45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a45c:	4943      	ldr	r1, [pc, #268]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a45e:	430a      	orrs	r2, r1
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	e079      	b.n	800a558 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	18d3      	adds	r3, r2, r3
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a472:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a474:	2380      	movs	r3, #128	@ 0x80
 800a476:	01db      	lsls	r3, r3, #7
 800a478:	4013      	ands	r3, r2
 800a47a:	d011      	beq.n	800a4a0 <USB_ActivateEndpoint+0x580>
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	18d3      	adds	r3, r2, r3
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a3a      	ldr	r2, [pc, #232]	@ (800a574 <USB_ActivateEndpoint+0x654>)
 800a48a:	4013      	ands	r3, r2
 800a48c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	18d3      	adds	r3, r2, r3
 800a498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a49a:	4937      	ldr	r1, [pc, #220]	@ (800a578 <USB_ActivateEndpoint+0x658>)
 800a49c:	430a      	orrs	r2, r1
 800a49e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	18d3      	adds	r3, r2, r3
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4b0:	2240      	movs	r2, #64	@ 0x40
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	d011      	beq.n	800a4da <USB_ActivateEndpoint+0x5ba>
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	18d3      	adds	r3, r2, r3
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a2c      	ldr	r2, [pc, #176]	@ (800a574 <USB_ActivateEndpoint+0x654>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	18d3      	adds	r3, r2, r3
 800a4d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4d4:	4929      	ldr	r1, [pc, #164]	@ (800a57c <USB_ActivateEndpoint+0x65c>)
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	78db      	ldrb	r3, [r3, #3]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d016      	beq.n	800a510 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	18d3      	adds	r3, r2, r3
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a25      	ldr	r2, [pc, #148]	@ (800a584 <USB_ActivateEndpoint+0x664>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	4053      	eors	r3, r2
 800a4fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	18d3      	adds	r3, r2, r3
 800a506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a508:	4918      	ldr	r1, [pc, #96]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a50a:	430a      	orrs	r2, r1
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	e011      	b.n	800a534 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	18d3      	adds	r3, r2, r3
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a19      	ldr	r2, [pc, #100]	@ (800a584 <USB_ActivateEndpoint+0x664>)
 800a51e:	4013      	ands	r3, r2
 800a520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	18d3      	adds	r3, r2, r3
 800a52c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a52e:	490f      	ldr	r1, [pc, #60]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a530:	430a      	orrs	r2, r1
 800a532:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	18d3      	adds	r3, r2, r3
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a0f      	ldr	r2, [pc, #60]	@ (800a580 <USB_ActivateEndpoint+0x660>)
 800a542:	4013      	ands	r3, r2
 800a544:	647b      	str	r3, [r7, #68]	@ 0x44
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	18d3      	adds	r3, r2, r3
 800a550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a552:	4906      	ldr	r1, [pc, #24]	@ (800a56c <USB_ActivateEndpoint+0x64c>)
 800a554:	430a      	orrs	r2, r1
 800a556:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a558:	2377      	movs	r3, #119	@ 0x77
 800a55a:	18fb      	adds	r3, r7, r3
 800a55c:	781b      	ldrb	r3, [r3, #0]
}
 800a55e:	0018      	movs	r0, r3
 800a560:	46bd      	mov	sp, r7
 800a562:	b01e      	add	sp, #120	@ 0x78
 800a564:	bd80      	pop	{r7, pc}
 800a566:	46c0      	nop			@ (mov r8, r8)
 800a568:	07ff8e8f 	.word	0x07ff8e8f
 800a56c:	00008080 	.word	0x00008080
 800a570:	40009800 	.word	0x40009800
 800a574:	07ff8f8f 	.word	0x07ff8f8f
 800a578:	0000c080 	.word	0x0000c080
 800a57c:	000080c0 	.word	0x000080c0
 800a580:	07ffbf8f 	.word	0x07ffbf8f
 800a584:	07ff8fbf 	.word	0x07ff8fbf

0800a588 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b096      	sub	sp, #88	@ 0x58
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	7b1b      	ldrb	r3, [r3, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d164      	bne.n	800a664 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02f      	beq.n	800a602 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	18d3      	adds	r3, r2, r3
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	613b      	str	r3, [r7, #16]
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2240      	movs	r2, #64	@ 0x40
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	d011      	beq.n	800a5dc <USB_DeactivateEndpoint+0x54>
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	18d3      	adds	r3, r2, r3
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a9d      	ldr	r2, [pc, #628]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	18d3      	adds	r3, r2, r3
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	499a      	ldr	r1, [pc, #616]	@ (800a840 <USB_DeactivateEndpoint+0x2b8>)
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	18d3      	adds	r3, r2, r3
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a96      	ldr	r2, [pc, #600]	@ (800a844 <USB_DeactivateEndpoint+0x2bc>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	60bb      	str	r3, [r7, #8]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	18d3      	adds	r3, r2, r3
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4993      	ldr	r1, [pc, #588]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	e117      	b.n	800a832 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	18d3      	adds	r3, r2, r3
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	69fa      	ldr	r2, [r7, #28]
 800a612:	2380      	movs	r3, #128	@ 0x80
 800a614:	01db      	lsls	r3, r3, #7
 800a616:	4013      	ands	r3, r2
 800a618:	d011      	beq.n	800a63e <USB_DeactivateEndpoint+0xb6>
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	18d3      	adds	r3, r2, r3
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a85      	ldr	r2, [pc, #532]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a628:	4013      	ands	r3, r2
 800a62a:	61bb      	str	r3, [r7, #24]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	18d3      	adds	r3, r2, r3
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	4984      	ldr	r1, [pc, #528]	@ (800a84c <USB_DeactivateEndpoint+0x2c4>)
 800a63a:	430a      	orrs	r2, r1
 800a63c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	18d3      	adds	r3, r2, r3
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a81      	ldr	r2, [pc, #516]	@ (800a850 <USB_DeactivateEndpoint+0x2c8>)
 800a64c:	4013      	ands	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	18d3      	adds	r3, r2, r3
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	497a      	ldr	r1, [pc, #488]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a65e:	430a      	orrs	r2, r1
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e0e6      	b.n	800a832 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d171      	bne.n	800a750 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	18d3      	adds	r3, r2, r3
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a67a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a67c:	2380      	movs	r3, #128	@ 0x80
 800a67e:	01db      	lsls	r3, r3, #7
 800a680:	4013      	ands	r3, r2
 800a682:	d011      	beq.n	800a6a8 <USB_DeactivateEndpoint+0x120>
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	18d3      	adds	r3, r2, r3
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a6a      	ldr	r2, [pc, #424]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a692:	4013      	ands	r3, r2
 800a694:	637b      	str	r3, [r7, #52]	@ 0x34
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	18d3      	adds	r3, r2, r3
 800a6a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6a2:	496a      	ldr	r1, [pc, #424]	@ (800a84c <USB_DeactivateEndpoint+0x2c4>)
 800a6a4:	430a      	orrs	r2, r1
 800a6a6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	18d3      	adds	r3, r2, r3
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	2240      	movs	r2, #64	@ 0x40
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	d011      	beq.n	800a6e2 <USB_DeactivateEndpoint+0x15a>
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	18d3      	adds	r3, r2, r3
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a5c      	ldr	r2, [pc, #368]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6dc:	4958      	ldr	r1, [pc, #352]	@ (800a840 <USB_DeactivateEndpoint+0x2b8>)
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	18d3      	adds	r3, r2, r3
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a53      	ldr	r2, [pc, #332]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	18d3      	adds	r3, r2, r3
 800a6fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a700:	494f      	ldr	r1, [pc, #316]	@ (800a840 <USB_DeactivateEndpoint+0x2b8>)
 800a702:	430a      	orrs	r2, r1
 800a704:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a4f      	ldr	r2, [pc, #316]	@ (800a850 <USB_DeactivateEndpoint+0x2c8>)
 800a714:	4013      	ands	r3, r2
 800a716:	627b      	str	r3, [r7, #36]	@ 0x24
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	18d3      	adds	r3, r2, r3
 800a722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a724:	4948      	ldr	r1, [pc, #288]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a726:	430a      	orrs	r2, r1
 800a728:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	18d3      	adds	r3, r2, r3
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a43      	ldr	r2, [pc, #268]	@ (800a844 <USB_DeactivateEndpoint+0x2bc>)
 800a738:	4013      	ands	r3, r2
 800a73a:	623b      	str	r3, [r7, #32]
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	18d3      	adds	r3, r2, r3
 800a746:	6a3a      	ldr	r2, [r7, #32]
 800a748:	493f      	ldr	r1, [pc, #252]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a74a:	430a      	orrs	r2, r1
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e070      	b.n	800a832 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	18d3      	adds	r3, r2, r3
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a75e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a760:	2380      	movs	r3, #128	@ 0x80
 800a762:	01db      	lsls	r3, r3, #7
 800a764:	4013      	ands	r3, r2
 800a766:	d011      	beq.n	800a78c <USB_DeactivateEndpoint+0x204>
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a31      	ldr	r2, [pc, #196]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a776:	4013      	ands	r3, r2
 800a778:	653b      	str	r3, [r7, #80]	@ 0x50
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	18d3      	adds	r3, r2, r3
 800a784:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a786:	4931      	ldr	r1, [pc, #196]	@ (800a84c <USB_DeactivateEndpoint+0x2c4>)
 800a788:	430a      	orrs	r2, r1
 800a78a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	18d3      	adds	r3, r2, r3
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a79a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a79c:	2240      	movs	r2, #64	@ 0x40
 800a79e:	4013      	ands	r3, r2
 800a7a0:	d011      	beq.n	800a7c6 <USB_DeactivateEndpoint+0x23e>
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	18d3      	adds	r3, r2, r3
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a23      	ldr	r2, [pc, #140]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	18d3      	adds	r3, r2, r3
 800a7be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7c0:	491f      	ldr	r1, [pc, #124]	@ (800a840 <USB_DeactivateEndpoint+0x2b8>)
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	18d3      	adds	r3, r2, r3
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a83c <USB_DeactivateEndpoint+0x2b4>)
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	18d3      	adds	r3, r2, r3
 800a7e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7e4:	4919      	ldr	r1, [pc, #100]	@ (800a84c <USB_DeactivateEndpoint+0x2c4>)
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	18d3      	adds	r3, r2, r3
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a13      	ldr	r2, [pc, #76]	@ (800a844 <USB_DeactivateEndpoint+0x2bc>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	18d3      	adds	r3, r2, r3
 800a806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a808:	490f      	ldr	r1, [pc, #60]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a80a:	430a      	orrs	r2, r1
 800a80c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	18d3      	adds	r3, r2, r3
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a0d      	ldr	r2, [pc, #52]	@ (800a850 <USB_DeactivateEndpoint+0x2c8>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	18d3      	adds	r3, r2, r3
 800a82a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a82c:	4906      	ldr	r1, [pc, #24]	@ (800a848 <USB_DeactivateEndpoint+0x2c0>)
 800a82e:	430a      	orrs	r2, r1
 800a830:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	b016      	add	sp, #88	@ 0x58
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	07ff8f8f 	.word	0x07ff8f8f
 800a840:	000080c0 	.word	0x000080c0
 800a844:	07ff8fbf 	.word	0x07ff8fbf
 800a848:	00008080 	.word	0x00008080
 800a84c:	0000c080 	.word	0x0000c080
 800a850:	07ffbf8f 	.word	0x07ffbf8f

0800a854 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800a854:	b590      	push	{r4, r7, lr}
 800a856:	b097      	sub	sp, #92	@ 0x5c
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d001      	beq.n	800a86a <USB_EPStartXfer+0x16>
 800a866:	f000 fcbf 	bl	800b1e8 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	699a      	ldr	r2, [r3, #24]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	429a      	cmp	r2, r3
 800a874:	d903      	bls.n	800a87e <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a87c:	e002      	b.n	800a884 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	7b1b      	ldrb	r3, [r3, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d12b      	bne.n	800a8e4 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6959      	ldr	r1, [r3, #20]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	88da      	ldrh	r2, [r3, #6]
 800a894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a896:	b29b      	uxth	r3, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 f8f5 	bl	800ba88 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	4ace      	ldr	r2, [pc, #824]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a8a6:	4694      	mov	ip, r2
 800a8a8:	4463      	add	r3, ip
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	00db      	lsls	r3, r3, #3
 800a8b2:	49cb      	ldr	r1, [pc, #812]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a8b4:	468c      	mov	ip, r1
 800a8b6:	4463      	add	r3, ip
 800a8b8:	0412      	lsls	r2, r2, #16
 800a8ba:	0c12      	lsrs	r2, r2, #16
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	4ac6      	ldr	r2, [pc, #792]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a8c6:	4694      	mov	ip, r2
 800a8c8:	4463      	add	r3, ip
 800a8ca:	6819      	ldr	r1, [r3, #0]
 800a8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8ce:	041a      	lsls	r2, r3, #16
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	48c2      	ldr	r0, [pc, #776]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a8d8:	4684      	mov	ip, r0
 800a8da:	4463      	add	r3, ip
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f000 fc67 	bl	800b1b2 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	78db      	ldrb	r3, [r3, #3]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d000      	beq.n	800a8ee <USB_EPStartXfer+0x9a>
 800a8ec:	e31a      	b.n	800af24 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6a1a      	ldr	r2, [r3, #32]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d800      	bhi.n	800a8fc <USB_EPStartXfer+0xa8>
 800a8fa:	e2c7      	b.n	800ae8c <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	18d3      	adds	r3, r2, r3
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4ab6      	ldr	r2, [pc, #728]	@ (800abe4 <USB_EPStartXfer+0x390>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	18d3      	adds	r3, r2, r3
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	49b3      	ldr	r1, [pc, #716]	@ (800abe8 <USB_EPStartXfer+0x394>)
 800a91c:	430a      	orrs	r2, r1
 800a91e:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6a1a      	ldr	r2, [r3, #32]
 800a924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	18d3      	adds	r3, r2, r3
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2240      	movs	r2, #64	@ 0x40
 800a93a:	4013      	ands	r3, r2
 800a93c:	d100      	bne.n	800a940 <USB_EPStartXfer+0xec>
 800a93e:	e155      	b.n	800abec <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	785b      	ldrb	r3, [r3, #1]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d162      	bne.n	800aa0e <USB_EPStartXfer+0x1ba>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	00db      	lsls	r3, r3, #3
 800a94e:	4aa4      	ldr	r2, [pc, #656]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a950:	4694      	mov	ip, r2
 800a952:	4463      	add	r3, ip
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	49a0      	ldr	r1, [pc, #640]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a95e:	468c      	mov	ip, r1
 800a960:	4463      	add	r3, ip
 800a962:	0192      	lsls	r2, r2, #6
 800a964:	0992      	lsrs	r2, r2, #6
 800a966:	605a      	str	r2, [r3, #4]
 800a968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a96a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a96c:	d91e      	bls.n	800a9ac <USB_EPStartXfer+0x158>
 800a96e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a970:	095b      	lsrs	r3, r3, #5
 800a972:	653b      	str	r3, [r7, #80]	@ 0x50
 800a974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a976:	221f      	movs	r2, #31
 800a978:	4013      	ands	r3, r2
 800a97a:	d102      	bne.n	800a982 <USB_EPStartXfer+0x12e>
 800a97c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a97e:	3b01      	subs	r3, #1
 800a980:	653b      	str	r3, [r7, #80]	@ 0x50
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	4a95      	ldr	r2, [pc, #596]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a98a:	4694      	mov	ip, r2
 800a98c:	4463      	add	r3, ip
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a992:	069b      	lsls	r3, r3, #26
 800a994:	431a      	orrs	r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	4990      	ldr	r1, [pc, #576]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a99e:	468c      	mov	ip, r1
 800a9a0:	4463      	add	r3, ip
 800a9a2:	2180      	movs	r1, #128	@ 0x80
 800a9a4:	0609      	lsls	r1, r1, #24
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	e055      	b.n	800aa58 <USB_EPStartXfer+0x204>
 800a9ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d111      	bne.n	800a9d6 <USB_EPStartXfer+0x182>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4a89      	ldr	r2, [pc, #548]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a9ba:	4694      	mov	ip, r2
 800a9bc:	4463      	add	r3, ip
 800a9be:	685a      	ldr	r2, [r3, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	4986      	ldr	r1, [pc, #536]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a9c8:	468c      	mov	ip, r1
 800a9ca:	4463      	add	r3, ip
 800a9cc:	2180      	movs	r1, #128	@ 0x80
 800a9ce:	0609      	lsls	r1, r1, #24
 800a9d0:	430a      	orrs	r2, r1
 800a9d2:	605a      	str	r2, [r3, #4]
 800a9d4:	e040      	b.n	800aa58 <USB_EPStartXfer+0x204>
 800a9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	d002      	beq.n	800a9ea <USB_EPStartXfer+0x196>
 800a9e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4a7b      	ldr	r2, [pc, #492]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800a9f2:	4694      	mov	ip, r2
 800a9f4:	4463      	add	r3, ip
 800a9f6:	6859      	ldr	r1, [r3, #4]
 800a9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9fa:	069a      	lsls	r2, r3, #26
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4877      	ldr	r0, [pc, #476]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aa04:	4684      	mov	ip, r0
 800aa06:	4463      	add	r3, ip
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]
 800aa0c:	e024      	b.n	800aa58 <USB_EPStartXfer+0x204>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d120      	bne.n	800aa58 <USB_EPStartXfer+0x204>
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	4a70      	ldr	r2, [pc, #448]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aa1e:	4694      	mov	ip, r2
 800aa20:	4463      	add	r3, ip
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	496d      	ldr	r1, [pc, #436]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aa2c:	468c      	mov	ip, r1
 800aa2e:	4463      	add	r3, ip
 800aa30:	0412      	lsls	r2, r2, #16
 800aa32:	0c12      	lsrs	r2, r2, #16
 800aa34:	605a      	str	r2, [r3, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	4a68      	ldr	r2, [pc, #416]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aa3e:	4694      	mov	ip, r2
 800aa40:	4463      	add	r3, ip
 800aa42:	6859      	ldr	r1, [r3, #4]
 800aa44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa46:	041a      	lsls	r2, r3, #16
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	00db      	lsls	r3, r3, #3
 800aa4e:	4864      	ldr	r0, [pc, #400]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aa50:	4684      	mov	ip, r0
 800aa52:	4463      	add	r3, ip
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800aa58:	201a      	movs	r0, #26
 800aa5a:	183b      	adds	r3, r7, r0
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	8952      	ldrh	r2, [r2, #10]
 800aa60:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6959      	ldr	r1, [r3, #20]
 800aa66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa68:	b29c      	uxth	r4, r3
 800aa6a:	183b      	adds	r3, r7, r0
 800aa6c:	881a      	ldrh	r2, [r3, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	0023      	movs	r3, r4
 800aa72:	f001 f809 	bl	800ba88 <USB_WritePMA>
            ep->xfer_buff += len;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	695a      	ldr	r2, [r3, #20]
 800aa7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa7c:	18d2      	adds	r2, r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6a1a      	ldr	r2, [r3, #32]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d906      	bls.n	800aa9c <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6a1a      	ldr	r2, [r3, #32]
 800aa92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa94:	1ad2      	subs	r2, r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	621a      	str	r2, [r3, #32]
 800aa9a:	e005      	b.n	800aaa8 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	785b      	ldrb	r3, [r3, #1]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d162      	bne.n	800ab76 <USB_EPStartXfer+0x322>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	4a4a      	ldr	r2, [pc, #296]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aab8:	4694      	mov	ip, r2
 800aaba:	4463      	add	r3, ip
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4946      	ldr	r1, [pc, #280]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aac6:	468c      	mov	ip, r1
 800aac8:	4463      	add	r3, ip
 800aaca:	0192      	lsls	r2, r2, #6
 800aacc:	0992      	lsrs	r2, r2, #6
 800aace:	601a      	str	r2, [r3, #0]
 800aad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aad2:	2b3e      	cmp	r3, #62	@ 0x3e
 800aad4:	d91e      	bls.n	800ab14 <USB_EPStartXfer+0x2c0>
 800aad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aad8:	095b      	lsrs	r3, r3, #5
 800aada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aadc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aade:	221f      	movs	r2, #31
 800aae0:	4013      	ands	r3, r2
 800aae2:	d102      	bne.n	800aaea <USB_EPStartXfer+0x296>
 800aae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aae6:	3b01      	subs	r3, #1
 800aae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	4a3b      	ldr	r2, [pc, #236]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aaf2:	4694      	mov	ip, r2
 800aaf4:	4463      	add	r3, ip
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aafa:	069b      	lsls	r3, r3, #26
 800aafc:	431a      	orrs	r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	4936      	ldr	r1, [pc, #216]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab06:	468c      	mov	ip, r1
 800ab08:	4463      	add	r3, ip
 800ab0a:	2180      	movs	r1, #128	@ 0x80
 800ab0c:	0609      	lsls	r1, r1, #24
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	e055      	b.n	800abc0 <USB_EPStartXfer+0x36c>
 800ab14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d111      	bne.n	800ab3e <USB_EPStartXfer+0x2ea>
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	4a2f      	ldr	r2, [pc, #188]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab22:	4694      	mov	ip, r2
 800ab24:	4463      	add	r3, ip
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	492c      	ldr	r1, [pc, #176]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab30:	468c      	mov	ip, r1
 800ab32:	4463      	add	r3, ip
 800ab34:	2180      	movs	r1, #128	@ 0x80
 800ab36:	0609      	lsls	r1, r1, #24
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	e040      	b.n	800abc0 <USB_EPStartXfer+0x36c>
 800ab3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab40:	085b      	lsrs	r3, r3, #1
 800ab42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab46:	2201      	movs	r2, #1
 800ab48:	4013      	ands	r3, r2
 800ab4a:	d002      	beq.n	800ab52 <USB_EPStartXfer+0x2fe>
 800ab4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab4e:	3301      	adds	r3, #1
 800ab50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	00db      	lsls	r3, r3, #3
 800ab58:	4a21      	ldr	r2, [pc, #132]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab5a:	4694      	mov	ip, r2
 800ab5c:	4463      	add	r3, ip
 800ab5e:	6819      	ldr	r1, [r3, #0]
 800ab60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab62:	069a      	lsls	r2, r3, #26
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	481d      	ldr	r0, [pc, #116]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab6c:	4684      	mov	ip, r0
 800ab6e:	4463      	add	r3, ip
 800ab70:	430a      	orrs	r2, r1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e024      	b.n	800abc0 <USB_EPStartXfer+0x36c>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d120      	bne.n	800abc0 <USB_EPStartXfer+0x36c>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	4a16      	ldr	r2, [pc, #88]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab86:	4694      	mov	ip, r2
 800ab88:	4463      	add	r3, ip
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	4913      	ldr	r1, [pc, #76]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800ab94:	468c      	mov	ip, r1
 800ab96:	4463      	add	r3, ip
 800ab98:	0412      	lsls	r2, r2, #16
 800ab9a:	0c12      	lsrs	r2, r2, #16
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	4a0e      	ldr	r2, [pc, #56]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800aba6:	4694      	mov	ip, r2
 800aba8:	4463      	add	r3, ip
 800abaa:	6819      	ldr	r1, [r3, #0]
 800abac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abae:	041a      	lsls	r2, r3, #16
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	480a      	ldr	r0, [pc, #40]	@ (800abe0 <USB_EPStartXfer+0x38c>)
 800abb8:	4684      	mov	ip, r0
 800abba:	4463      	add	r3, ip
 800abbc:	430a      	orrs	r2, r1
 800abbe:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800abc0:	201a      	movs	r0, #26
 800abc2:	183b      	adds	r3, r7, r0
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	8912      	ldrh	r2, [r2, #8]
 800abc8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	6959      	ldr	r1, [r3, #20]
 800abce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abd0:	b29c      	uxth	r4, r3
 800abd2:	183b      	adds	r3, r7, r0
 800abd4:	881a      	ldrh	r2, [r3, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	0023      	movs	r3, r4
 800abda:	f000 ff55 	bl	800ba88 <USB_WritePMA>
 800abde:	e2e8      	b.n	800b1b2 <USB_EPStartXfer+0x95e>
 800abe0:	40009800 	.word	0x40009800
 800abe4:	07ff8f8f 	.word	0x07ff8f8f
 800abe8:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d162      	bne.n	800acba <USB_EPStartXfer+0x466>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	00db      	lsls	r3, r3, #3
 800abfa:	4ac7      	ldr	r2, [pc, #796]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800abfc:	4694      	mov	ip, r2
 800abfe:	4463      	add	r3, ip
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	49c3      	ldr	r1, [pc, #780]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac0a:	468c      	mov	ip, r1
 800ac0c:	4463      	add	r3, ip
 800ac0e:	0192      	lsls	r2, r2, #6
 800ac10:	0992      	lsrs	r2, r2, #6
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac16:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac18:	d91e      	bls.n	800ac58 <USB_EPStartXfer+0x404>
 800ac1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac22:	221f      	movs	r2, #31
 800ac24:	4013      	ands	r3, r2
 800ac26:	d102      	bne.n	800ac2e <USB_EPStartXfer+0x3da>
 800ac28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	4ab8      	ldr	r2, [pc, #736]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac36:	4694      	mov	ip, r2
 800ac38:	4463      	add	r3, ip
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac3e:	069b      	lsls	r3, r3, #26
 800ac40:	431a      	orrs	r2, r3
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	00db      	lsls	r3, r3, #3
 800ac48:	49b3      	ldr	r1, [pc, #716]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac4a:	468c      	mov	ip, r1
 800ac4c:	4463      	add	r3, ip
 800ac4e:	2180      	movs	r1, #128	@ 0x80
 800ac50:	0609      	lsls	r1, r1, #24
 800ac52:	430a      	orrs	r2, r1
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	e055      	b.n	800ad04 <USB_EPStartXfer+0x4b0>
 800ac58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d111      	bne.n	800ac82 <USB_EPStartXfer+0x42e>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	4aac      	ldr	r2, [pc, #688]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac66:	4694      	mov	ip, r2
 800ac68:	4463      	add	r3, ip
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	49a9      	ldr	r1, [pc, #676]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac74:	468c      	mov	ip, r1
 800ac76:	4463      	add	r3, ip
 800ac78:	2180      	movs	r1, #128	@ 0x80
 800ac7a:	0609      	lsls	r1, r1, #24
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	e040      	b.n	800ad04 <USB_EPStartXfer+0x4b0>
 800ac82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac84:	085b      	lsrs	r3, r3, #1
 800ac86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	d002      	beq.n	800ac96 <USB_EPStartXfer+0x442>
 800ac90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac92:	3301      	adds	r3, #1
 800ac94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	4a9e      	ldr	r2, [pc, #632]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ac9e:	4694      	mov	ip, r2
 800aca0:	4463      	add	r3, ip
 800aca2:	6819      	ldr	r1, [r3, #0]
 800aca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aca6:	069a      	lsls	r2, r3, #26
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	489a      	ldr	r0, [pc, #616]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800acb0:	4684      	mov	ip, r0
 800acb2:	4463      	add	r3, ip
 800acb4:	430a      	orrs	r2, r1
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e024      	b.n	800ad04 <USB_EPStartXfer+0x4b0>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	785b      	ldrb	r3, [r3, #1]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d120      	bne.n	800ad04 <USB_EPStartXfer+0x4b0>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	4a93      	ldr	r2, [pc, #588]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800acca:	4694      	mov	ip, r2
 800accc:	4463      	add	r3, ip
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	4990      	ldr	r1, [pc, #576]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800acd8:	468c      	mov	ip, r1
 800acda:	4463      	add	r3, ip
 800acdc:	0412      	lsls	r2, r2, #16
 800acde:	0c12      	lsrs	r2, r2, #16
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	4a8b      	ldr	r2, [pc, #556]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800acea:	4694      	mov	ip, r2
 800acec:	4463      	add	r3, ip
 800acee:	6819      	ldr	r1, [r3, #0]
 800acf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acf2:	041a      	lsls	r2, r3, #16
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	4887      	ldr	r0, [pc, #540]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800acfc:	4684      	mov	ip, r0
 800acfe:	4463      	add	r3, ip
 800ad00:	430a      	orrs	r2, r1
 800ad02:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad04:	201a      	movs	r0, #26
 800ad06:	183b      	adds	r3, r7, r0
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	8912      	ldrh	r2, [r2, #8]
 800ad0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	6959      	ldr	r1, [r3, #20]
 800ad12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad14:	b29c      	uxth	r4, r3
 800ad16:	183b      	adds	r3, r7, r0
 800ad18:	881a      	ldrh	r2, [r3, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	0023      	movs	r3, r4
 800ad1e:	f000 feb3 	bl	800ba88 <USB_WritePMA>
            ep->xfer_buff += len;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	695a      	ldr	r2, [r3, #20]
 800ad26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad28:	18d2      	adds	r2, r2, r3
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	6a1a      	ldr	r2, [r3, #32]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d906      	bls.n	800ad48 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	6a1a      	ldr	r2, [r3, #32]
 800ad3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	621a      	str	r2, [r3, #32]
 800ad46:	e005      	b.n	800ad54 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2200      	movs	r2, #0
 800ad52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	785b      	ldrb	r3, [r3, #1]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d162      	bne.n	800ae22 <USB_EPStartXfer+0x5ce>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	4a6d      	ldr	r2, [pc, #436]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ad64:	4694      	mov	ip, r2
 800ad66:	4463      	add	r3, ip
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	4969      	ldr	r1, [pc, #420]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ad72:	468c      	mov	ip, r1
 800ad74:	4463      	add	r3, ip
 800ad76:	0192      	lsls	r2, r2, #6
 800ad78:	0992      	lsrs	r2, r2, #6
 800ad7a:	605a      	str	r2, [r3, #4]
 800ad7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad80:	d91e      	bls.n	800adc0 <USB_EPStartXfer+0x56c>
 800ad82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad84:	095b      	lsrs	r3, r3, #5
 800ad86:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad8a:	221f      	movs	r2, #31
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	d102      	bne.n	800ad96 <USB_EPStartXfer+0x542>
 800ad90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad92:	3b01      	subs	r3, #1
 800ad94:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	4a5e      	ldr	r2, [pc, #376]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ad9e:	4694      	mov	ip, r2
 800ada0:	4463      	add	r3, ip
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ada6:	069b      	lsls	r3, r3, #26
 800ada8:	431a      	orrs	r2, r3
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4959      	ldr	r1, [pc, #356]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800adb2:	468c      	mov	ip, r1
 800adb4:	4463      	add	r3, ip
 800adb6:	2180      	movs	r1, #128	@ 0x80
 800adb8:	0609      	lsls	r1, r1, #24
 800adba:	430a      	orrs	r2, r1
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	e055      	b.n	800ae6c <USB_EPStartXfer+0x618>
 800adc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d111      	bne.n	800adea <USB_EPStartXfer+0x596>
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	4a52      	ldr	r2, [pc, #328]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800adce:	4694      	mov	ip, r2
 800add0:	4463      	add	r3, ip
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	494f      	ldr	r1, [pc, #316]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800addc:	468c      	mov	ip, r1
 800adde:	4463      	add	r3, ip
 800ade0:	2180      	movs	r1, #128	@ 0x80
 800ade2:	0609      	lsls	r1, r1, #24
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
 800ade8:	e040      	b.n	800ae6c <USB_EPStartXfer+0x618>
 800adea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adec:	085b      	lsrs	r3, r3, #1
 800adee:	647b      	str	r3, [r7, #68]	@ 0x44
 800adf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adf2:	2201      	movs	r2, #1
 800adf4:	4013      	ands	r3, r2
 800adf6:	d002      	beq.n	800adfe <USB_EPStartXfer+0x5aa>
 800adf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adfa:	3301      	adds	r3, #1
 800adfc:	647b      	str	r3, [r7, #68]	@ 0x44
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	00db      	lsls	r3, r3, #3
 800ae04:	4a44      	ldr	r2, [pc, #272]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae06:	4694      	mov	ip, r2
 800ae08:	4463      	add	r3, ip
 800ae0a:	6859      	ldr	r1, [r3, #4]
 800ae0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae0e:	069a      	lsls	r2, r3, #26
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	00db      	lsls	r3, r3, #3
 800ae16:	4840      	ldr	r0, [pc, #256]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae18:	4684      	mov	ip, r0
 800ae1a:	4463      	add	r3, ip
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	605a      	str	r2, [r3, #4]
 800ae20:	e024      	b.n	800ae6c <USB_EPStartXfer+0x618>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d120      	bne.n	800ae6c <USB_EPStartXfer+0x618>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	4a39      	ldr	r2, [pc, #228]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae32:	4694      	mov	ip, r2
 800ae34:	4463      	add	r3, ip
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	4936      	ldr	r1, [pc, #216]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae40:	468c      	mov	ip, r1
 800ae42:	4463      	add	r3, ip
 800ae44:	0412      	lsls	r2, r2, #16
 800ae46:	0c12      	lsrs	r2, r2, #16
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4a31      	ldr	r2, [pc, #196]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae52:	4694      	mov	ip, r2
 800ae54:	4463      	add	r3, ip
 800ae56:	6859      	ldr	r1, [r3, #4]
 800ae58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae5a:	041a      	lsls	r2, r3, #16
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	482d      	ldr	r0, [pc, #180]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800ae64:	4684      	mov	ip, r0
 800ae66:	4463      	add	r3, ip
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ae6c:	201a      	movs	r0, #26
 800ae6e:	183b      	adds	r3, r7, r0
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	8952      	ldrh	r2, [r2, #10]
 800ae74:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6959      	ldr	r1, [r3, #20]
 800ae7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae7c:	b29c      	uxth	r4, r3
 800ae7e:	183b      	adds	r3, r7, r0
 800ae80:	881a      	ldrh	r2, [r3, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	0023      	movs	r3, r4
 800ae86:	f000 fdff 	bl	800ba88 <USB_WritePMA>
 800ae8a:	e192      	b.n	800b1b2 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	18d3      	adds	r3, r2, r3
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a1f      	ldr	r2, [pc, #124]	@ (800af1c <USB_EPStartXfer+0x6c8>)
 800aea0:	4013      	ands	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	491b      	ldr	r1, [pc, #108]	@ (800af20 <USB_EPStartXfer+0x6cc>)
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	4a16      	ldr	r2, [pc, #88]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800aebe:	4694      	mov	ip, r2
 800aec0:	4463      	add	r3, ip
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	00db      	lsls	r3, r3, #3
 800aeca:	4913      	ldr	r1, [pc, #76]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800aecc:	468c      	mov	ip, r1
 800aece:	4463      	add	r3, ip
 800aed0:	0412      	lsls	r2, r2, #16
 800aed2:	0c12      	lsrs	r2, r2, #16
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	4a0e      	ldr	r2, [pc, #56]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800aede:	4694      	mov	ip, r2
 800aee0:	4463      	add	r3, ip
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aee6:	041a      	lsls	r2, r3, #16
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	00db      	lsls	r3, r3, #3
 800aeee:	480a      	ldr	r0, [pc, #40]	@ (800af18 <USB_EPStartXfer+0x6c4>)
 800aef0:	4684      	mov	ip, r0
 800aef2:	4463      	add	r3, ip
 800aef4:	430a      	orrs	r2, r1
 800aef6:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aef8:	201a      	movs	r0, #26
 800aefa:	183b      	adds	r3, r7, r0
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	8912      	ldrh	r2, [r2, #8]
 800af00:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6959      	ldr	r1, [r3, #20]
 800af06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af08:	b29c      	uxth	r4, r3
 800af0a:	183b      	adds	r3, r7, r0
 800af0c:	881a      	ldrh	r2, [r3, #0]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	0023      	movs	r3, r4
 800af12:	f000 fdb9 	bl	800ba88 <USB_WritePMA>
 800af16:	e14c      	b.n	800b1b2 <USB_EPStartXfer+0x95e>
 800af18:	40009800 	.word	0x40009800
 800af1c:	07ff8e8f 	.word	0x07ff8e8f
 800af20:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	6a1a      	ldr	r2, [r3, #32]
 800af28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af2a:	1ad2      	subs	r2, r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	18d3      	adds	r3, r2, r3
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2240      	movs	r2, #64	@ 0x40
 800af3e:	4013      	ands	r3, r2
 800af40:	d100      	bne.n	800af44 <USB_EPStartXfer+0x6f0>
 800af42:	e09b      	b.n	800b07c <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d162      	bne.n	800b012 <USB_EPStartXfer+0x7be>
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	4ad6      	ldr	r2, [pc, #856]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800af54:	4694      	mov	ip, r2
 800af56:	4463      	add	r3, ip
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	00db      	lsls	r3, r3, #3
 800af60:	49d2      	ldr	r1, [pc, #840]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800af62:	468c      	mov	ip, r1
 800af64:	4463      	add	r3, ip
 800af66:	0192      	lsls	r2, r2, #6
 800af68:	0992      	lsrs	r2, r2, #6
 800af6a:	605a      	str	r2, [r3, #4]
 800af6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800af70:	d91e      	bls.n	800afb0 <USB_EPStartXfer+0x75c>
 800af72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af74:	095b      	lsrs	r3, r3, #5
 800af76:	643b      	str	r3, [r7, #64]	@ 0x40
 800af78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af7a:	221f      	movs	r2, #31
 800af7c:	4013      	ands	r3, r2
 800af7e:	d102      	bne.n	800af86 <USB_EPStartXfer+0x732>
 800af80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af82:	3b01      	subs	r3, #1
 800af84:	643b      	str	r3, [r7, #64]	@ 0x40
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	4ac7      	ldr	r2, [pc, #796]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800af8e:	4694      	mov	ip, r2
 800af90:	4463      	add	r3, ip
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af96:	069b      	lsls	r3, r3, #26
 800af98:	431a      	orrs	r2, r3
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	49c2      	ldr	r1, [pc, #776]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800afa2:	468c      	mov	ip, r1
 800afa4:	4463      	add	r3, ip
 800afa6:	2180      	movs	r1, #128	@ 0x80
 800afa8:	0609      	lsls	r1, r1, #24
 800afaa:	430a      	orrs	r2, r1
 800afac:	605a      	str	r2, [r3, #4]
 800afae:	e055      	b.n	800b05c <USB_EPStartXfer+0x808>
 800afb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d111      	bne.n	800afda <USB_EPStartXfer+0x786>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	4abb      	ldr	r2, [pc, #748]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800afbe:	4694      	mov	ip, r2
 800afc0:	4463      	add	r3, ip
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	49b8      	ldr	r1, [pc, #736]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800afcc:	468c      	mov	ip, r1
 800afce:	4463      	add	r3, ip
 800afd0:	2180      	movs	r1, #128	@ 0x80
 800afd2:	0609      	lsls	r1, r1, #24
 800afd4:	430a      	orrs	r2, r1
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	e040      	b.n	800b05c <USB_EPStartXfer+0x808>
 800afda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afdc:	085b      	lsrs	r3, r3, #1
 800afde:	643b      	str	r3, [r7, #64]	@ 0x40
 800afe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe2:	2201      	movs	r2, #1
 800afe4:	4013      	ands	r3, r2
 800afe6:	d002      	beq.n	800afee <USB_EPStartXfer+0x79a>
 800afe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afea:	3301      	adds	r3, #1
 800afec:	643b      	str	r3, [r7, #64]	@ 0x40
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	4aad      	ldr	r2, [pc, #692]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800aff6:	4694      	mov	ip, r2
 800aff8:	4463      	add	r3, ip
 800affa:	6859      	ldr	r1, [r3, #4]
 800affc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800affe:	069a      	lsls	r2, r3, #26
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	48a9      	ldr	r0, [pc, #676]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b008:	4684      	mov	ip, r0
 800b00a:	4463      	add	r3, ip
 800b00c:	430a      	orrs	r2, r1
 800b00e:	605a      	str	r2, [r3, #4]
 800b010:	e024      	b.n	800b05c <USB_EPStartXfer+0x808>
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d120      	bne.n	800b05c <USB_EPStartXfer+0x808>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	4aa2      	ldr	r2, [pc, #648]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b022:	4694      	mov	ip, r2
 800b024:	4463      	add	r3, ip
 800b026:	685a      	ldr	r2, [r3, #4]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	499f      	ldr	r1, [pc, #636]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b030:	468c      	mov	ip, r1
 800b032:	4463      	add	r3, ip
 800b034:	0412      	lsls	r2, r2, #16
 800b036:	0c12      	lsrs	r2, r2, #16
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	4a9a      	ldr	r2, [pc, #616]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b042:	4694      	mov	ip, r2
 800b044:	4463      	add	r3, ip
 800b046:	6859      	ldr	r1, [r3, #4]
 800b048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b04a:	041a      	lsls	r2, r3, #16
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	00db      	lsls	r3, r3, #3
 800b052:	4896      	ldr	r0, [pc, #600]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b054:	4684      	mov	ip, r0
 800b056:	4463      	add	r3, ip
 800b058:	430a      	orrs	r2, r1
 800b05a:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800b05c:	201a      	movs	r0, #26
 800b05e:	183b      	adds	r3, r7, r0
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	8952      	ldrh	r2, [r2, #10]
 800b064:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	6959      	ldr	r1, [r3, #20]
 800b06a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b06c:	b29c      	uxth	r4, r3
 800b06e:	183b      	adds	r3, r7, r0
 800b070:	881a      	ldrh	r2, [r3, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	0023      	movs	r3, r4
 800b076:	f000 fd07 	bl	800ba88 <USB_WritePMA>
 800b07a:	e09a      	b.n	800b1b2 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	785b      	ldrb	r3, [r3, #1]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d162      	bne.n	800b14a <USB_EPStartXfer+0x8f6>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	4a88      	ldr	r2, [pc, #544]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b08c:	4694      	mov	ip, r2
 800b08e:	4463      	add	r3, ip
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4984      	ldr	r1, [pc, #528]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b09a:	468c      	mov	ip, r1
 800b09c:	4463      	add	r3, ip
 800b09e:	0192      	lsls	r2, r2, #6
 800b0a0:	0992      	lsrs	r2, r2, #6
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b0a8:	d91e      	bls.n	800b0e8 <USB_EPStartXfer+0x894>
 800b0aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ac:	095b      	lsrs	r3, r3, #5
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0b2:	221f      	movs	r2, #31
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d102      	bne.n	800b0be <USB_EPStartXfer+0x86a>
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	00db      	lsls	r3, r3, #3
 800b0c4:	4a79      	ldr	r2, [pc, #484]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b0c6:	4694      	mov	ip, r2
 800b0c8:	4463      	add	r3, ip
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ce:	069b      	lsls	r3, r3, #26
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	4974      	ldr	r1, [pc, #464]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b0da:	468c      	mov	ip, r1
 800b0dc:	4463      	add	r3, ip
 800b0de:	2180      	movs	r1, #128	@ 0x80
 800b0e0:	0609      	lsls	r1, r1, #24
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	e055      	b.n	800b194 <USB_EPStartXfer+0x940>
 800b0e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d111      	bne.n	800b112 <USB_EPStartXfer+0x8be>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	4a6d      	ldr	r2, [pc, #436]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b0f6:	4694      	mov	ip, r2
 800b0f8:	4463      	add	r3, ip
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	496a      	ldr	r1, [pc, #424]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b104:	468c      	mov	ip, r1
 800b106:	4463      	add	r3, ip
 800b108:	2180      	movs	r1, #128	@ 0x80
 800b10a:	0609      	lsls	r1, r1, #24
 800b10c:	430a      	orrs	r2, r1
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	e040      	b.n	800b194 <USB_EPStartXfer+0x940>
 800b112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b11a:	2201      	movs	r2, #1
 800b11c:	4013      	ands	r3, r2
 800b11e:	d002      	beq.n	800b126 <USB_EPStartXfer+0x8d2>
 800b120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b122:	3301      	adds	r3, #1
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	00db      	lsls	r3, r3, #3
 800b12c:	4a5f      	ldr	r2, [pc, #380]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b12e:	4694      	mov	ip, r2
 800b130:	4463      	add	r3, ip
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b136:	069a      	lsls	r2, r3, #26
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	00db      	lsls	r3, r3, #3
 800b13e:	485b      	ldr	r0, [pc, #364]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b140:	4684      	mov	ip, r0
 800b142:	4463      	add	r3, ip
 800b144:	430a      	orrs	r2, r1
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	e024      	b.n	800b194 <USB_EPStartXfer+0x940>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	785b      	ldrb	r3, [r3, #1]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d120      	bne.n	800b194 <USB_EPStartXfer+0x940>
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4a54      	ldr	r2, [pc, #336]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b15a:	4694      	mov	ip, r2
 800b15c:	4463      	add	r3, ip
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	4951      	ldr	r1, [pc, #324]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b168:	468c      	mov	ip, r1
 800b16a:	4463      	add	r3, ip
 800b16c:	0412      	lsls	r2, r2, #16
 800b16e:	0c12      	lsrs	r2, r2, #16
 800b170:	601a      	str	r2, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	4a4c      	ldr	r2, [pc, #304]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b17a:	4694      	mov	ip, r2
 800b17c:	4463      	add	r3, ip
 800b17e:	6819      	ldr	r1, [r3, #0]
 800b180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b182:	041a      	lsls	r2, r3, #16
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	4848      	ldr	r0, [pc, #288]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b18c:	4684      	mov	ip, r0
 800b18e:	4463      	add	r3, ip
 800b190:	430a      	orrs	r2, r1
 800b192:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b194:	201a      	movs	r0, #26
 800b196:	183b      	adds	r3, r7, r0
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	8912      	ldrh	r2, [r2, #8]
 800b19c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	6959      	ldr	r1, [r3, #20]
 800b1a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1a4:	b29c      	uxth	r4, r3
 800b1a6:	183b      	adds	r3, r7, r0
 800b1a8:	881a      	ldrh	r2, [r3, #0]
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	0023      	movs	r3, r4
 800b1ae:	f000 fc6b 	bl	800ba88 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	18d3      	adds	r3, r2, r3
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a3c      	ldr	r2, [pc, #240]	@ (800b2b0 <USB_EPStartXfer+0xa5c>)
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	4053      	eors	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	4053      	eors	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	18d3      	adds	r3, r2, r3
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4934      	ldr	r1, [pc, #208]	@ (800b2b4 <USB_EPStartXfer+0xa60>)
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	e340      	b.n	800b86a <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	7b1b      	ldrb	r3, [r3, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d000      	beq.n	800b1f2 <USB_EPStartXfer+0x99e>
 800b1f0:	e07e      	b.n	800b2f0 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	699a      	ldr	r2, [r3, #24]
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d909      	bls.n	800b212 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	699a      	ldr	r2, [r3, #24]
 800b208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b20a:	1ad2      	subs	r2, r2, r3
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	619a      	str	r2, [r3, #24]
 800b210:	e005      	b.n	800b21e <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2200      	movs	r2, #0
 800b21c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	4a21      	ldr	r2, [pc, #132]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b226:	4694      	mov	ip, r2
 800b228:	4463      	add	r3, ip
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	00db      	lsls	r3, r3, #3
 800b232:	491e      	ldr	r1, [pc, #120]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b234:	468c      	mov	ip, r1
 800b236:	4463      	add	r3, ip
 800b238:	0192      	lsls	r2, r2, #6
 800b23a:	0992      	lsrs	r2, r2, #6
 800b23c:	605a      	str	r2, [r3, #4]
 800b23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b240:	2b3e      	cmp	r3, #62	@ 0x3e
 800b242:	d91e      	bls.n	800b282 <USB_EPStartXfer+0xa2e>
 800b244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b24a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b24c:	221f      	movs	r2, #31
 800b24e:	4013      	ands	r3, r2
 800b250:	d102      	bne.n	800b258 <USB_EPStartXfer+0xa04>
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	3b01      	subs	r3, #1
 800b256:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	4a13      	ldr	r2, [pc, #76]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b260:	4694      	mov	ip, r2
 800b262:	4463      	add	r3, ip
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	069b      	lsls	r3, r3, #26
 800b26a:	431a      	orrs	r2, r3
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	00db      	lsls	r3, r3, #3
 800b272:	490e      	ldr	r1, [pc, #56]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b274:	468c      	mov	ip, r1
 800b276:	4463      	add	r3, ip
 800b278:	2180      	movs	r1, #128	@ 0x80
 800b27a:	0609      	lsls	r1, r1, #24
 800b27c:	430a      	orrs	r2, r1
 800b27e:	605a      	str	r2, [r3, #4]
 800b280:	e2d7      	b.n	800b832 <USB_EPStartXfer+0xfde>
 800b282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b284:	2b00      	cmp	r3, #0
 800b286:	d117      	bne.n	800b2b8 <USB_EPStartXfer+0xa64>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	00db      	lsls	r3, r3, #3
 800b28e:	4a07      	ldr	r2, [pc, #28]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b290:	4694      	mov	ip, r2
 800b292:	4463      	add	r3, ip
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	4903      	ldr	r1, [pc, #12]	@ (800b2ac <USB_EPStartXfer+0xa58>)
 800b29e:	468c      	mov	ip, r1
 800b2a0:	4463      	add	r3, ip
 800b2a2:	2180      	movs	r1, #128	@ 0x80
 800b2a4:	0609      	lsls	r1, r1, #24
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
 800b2aa:	e2c2      	b.n	800b832 <USB_EPStartXfer+0xfde>
 800b2ac:	40009800 	.word	0x40009800
 800b2b0:	07ff8fbf 	.word	0x07ff8fbf
 800b2b4:	00008080 	.word	0x00008080
 800b2b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ba:	085b      	lsrs	r3, r3, #1
 800b2bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	d002      	beq.n	800b2cc <USB_EPStartXfer+0xa78>
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	4ac4      	ldr	r2, [pc, #784]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b2d4:	4694      	mov	ip, r2
 800b2d6:	4463      	add	r3, ip
 800b2d8:	6859      	ldr	r1, [r3, #4]
 800b2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2dc:	069a      	lsls	r2, r3, #26
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	00db      	lsls	r3, r3, #3
 800b2e4:	48bf      	ldr	r0, [pc, #764]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b2e6:	4684      	mov	ip, r0
 800b2e8:	4463      	add	r3, ip
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	605a      	str	r2, [r3, #4]
 800b2ee:	e2a0      	b.n	800b832 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	78db      	ldrb	r3, [r3, #3]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d000      	beq.n	800b2fa <USB_EPStartXfer+0xaa6>
 800b2f8:	e15f      	b.n	800b5ba <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	785b      	ldrb	r3, [r3, #1]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d168      	bne.n	800b3d4 <USB_EPStartXfer+0xb80>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	00db      	lsls	r3, r3, #3
 800b308:	4ab6      	ldr	r2, [pc, #728]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b30a:	4694      	mov	ip, r2
 800b30c:	4463      	add	r3, ip
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	00db      	lsls	r3, r3, #3
 800b316:	49b3      	ldr	r1, [pc, #716]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b318:	468c      	mov	ip, r1
 800b31a:	4463      	add	r3, ip
 800b31c:	0192      	lsls	r2, r2, #6
 800b31e:	0992      	lsrs	r2, r2, #6
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	2b3e      	cmp	r3, #62	@ 0x3e
 800b328:	d920      	bls.n	800b36c <USB_EPStartXfer+0xb18>
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	095b      	lsrs	r3, r3, #5
 800b330:	637b      	str	r3, [r7, #52]	@ 0x34
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	221f      	movs	r2, #31
 800b338:	4013      	ands	r3, r2
 800b33a:	d102      	bne.n	800b342 <USB_EPStartXfer+0xaee>
 800b33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b33e:	3b01      	subs	r3, #1
 800b340:	637b      	str	r3, [r7, #52]	@ 0x34
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	00db      	lsls	r3, r3, #3
 800b348:	4aa6      	ldr	r2, [pc, #664]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b34a:	4694      	mov	ip, r2
 800b34c:	4463      	add	r3, ip
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b352:	069b      	lsls	r3, r3, #26
 800b354:	431a      	orrs	r2, r3
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	49a1      	ldr	r1, [pc, #644]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b35e:	468c      	mov	ip, r1
 800b360:	4463      	add	r3, ip
 800b362:	2180      	movs	r1, #128	@ 0x80
 800b364:	0609      	lsls	r1, r1, #24
 800b366:	430a      	orrs	r2, r1
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	e059      	b.n	800b420 <USB_EPStartXfer+0xbcc>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d111      	bne.n	800b398 <USB_EPStartXfer+0xb44>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	4a9a      	ldr	r2, [pc, #616]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b37c:	4694      	mov	ip, r2
 800b37e:	4463      	add	r3, ip
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	4996      	ldr	r1, [pc, #600]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b38a:	468c      	mov	ip, r1
 800b38c:	4463      	add	r3, ip
 800b38e:	2180      	movs	r1, #128	@ 0x80
 800b390:	0609      	lsls	r1, r1, #24
 800b392:	430a      	orrs	r2, r1
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	e043      	b.n	800b420 <USB_EPStartXfer+0xbcc>
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	085b      	lsrs	r3, r3, #1
 800b39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	d002      	beq.n	800b3b0 <USB_EPStartXfer+0xb5c>
 800b3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	4a8b      	ldr	r2, [pc, #556]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b3b8:	4694      	mov	ip, r2
 800b3ba:	4463      	add	r3, ip
 800b3bc:	6819      	ldr	r1, [r3, #0]
 800b3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c0:	069a      	lsls	r2, r3, #26
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	4886      	ldr	r0, [pc, #536]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b3ca:	4684      	mov	ip, r0
 800b3cc:	4463      	add	r3, ip
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	e025      	b.n	800b420 <USB_EPStartXfer+0xbcc>
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	785b      	ldrb	r3, [r3, #1]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d121      	bne.n	800b420 <USB_EPStartXfer+0xbcc>
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	4a80      	ldr	r2, [pc, #512]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b3e4:	4694      	mov	ip, r2
 800b3e6:	4463      	add	r3, ip
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	497c      	ldr	r1, [pc, #496]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b3f2:	468c      	mov	ip, r1
 800b3f4:	4463      	add	r3, ip
 800b3f6:	0412      	lsls	r2, r2, #16
 800b3f8:	0c12      	lsrs	r2, r2, #16
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	4a78      	ldr	r2, [pc, #480]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b404:	4694      	mov	ip, r2
 800b406:	4463      	add	r3, ip
 800b408:	6819      	ldr	r1, [r3, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	041a      	lsls	r2, r3, #16
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	00db      	lsls	r3, r3, #3
 800b416:	4873      	ldr	r0, [pc, #460]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b418:	4684      	mov	ip, r0
 800b41a:	4463      	add	r3, ip
 800b41c:	430a      	orrs	r2, r1
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d168      	bne.n	800b4fa <USB_EPStartXfer+0xca6>
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4a6d      	ldr	r2, [pc, #436]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b430:	4694      	mov	ip, r2
 800b432:	4463      	add	r3, ip
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	4969      	ldr	r1, [pc, #420]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b43e:	468c      	mov	ip, r1
 800b440:	4463      	add	r3, ip
 800b442:	0192      	lsls	r2, r2, #6
 800b444:	0992      	lsrs	r2, r2, #6
 800b446:	605a      	str	r2, [r3, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b44e:	d920      	bls.n	800b492 <USB_EPStartXfer+0xc3e>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	095b      	lsrs	r3, r3, #5
 800b456:	633b      	str	r3, [r7, #48]	@ 0x30
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	221f      	movs	r2, #31
 800b45e:	4013      	ands	r3, r2
 800b460:	d102      	bne.n	800b468 <USB_EPStartXfer+0xc14>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	3b01      	subs	r3, #1
 800b466:	633b      	str	r3, [r7, #48]	@ 0x30
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	00db      	lsls	r3, r3, #3
 800b46e:	4a5d      	ldr	r2, [pc, #372]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b470:	4694      	mov	ip, r2
 800b472:	4463      	add	r3, ip
 800b474:	685a      	ldr	r2, [r3, #4]
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	069b      	lsls	r3, r3, #26
 800b47a:	431a      	orrs	r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	4958      	ldr	r1, [pc, #352]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b484:	468c      	mov	ip, r1
 800b486:	4463      	add	r3, ip
 800b488:	2180      	movs	r1, #128	@ 0x80
 800b48a:	0609      	lsls	r1, r1, #24
 800b48c:	430a      	orrs	r2, r1
 800b48e:	605a      	str	r2, [r3, #4]
 800b490:	e059      	b.n	800b546 <USB_EPStartXfer+0xcf2>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d111      	bne.n	800b4be <USB_EPStartXfer+0xc6a>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	4a50      	ldr	r2, [pc, #320]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b4a2:	4694      	mov	ip, r2
 800b4a4:	4463      	add	r3, ip
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	494d      	ldr	r1, [pc, #308]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b4b0:	468c      	mov	ip, r1
 800b4b2:	4463      	add	r3, ip
 800b4b4:	2180      	movs	r1, #128	@ 0x80
 800b4b6:	0609      	lsls	r1, r1, #24
 800b4b8:	430a      	orrs	r2, r1
 800b4ba:	605a      	str	r2, [r3, #4]
 800b4bc:	e043      	b.n	800b546 <USB_EPStartXfer+0xcf2>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	085b      	lsrs	r3, r3, #1
 800b4c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	d002      	beq.n	800b4d6 <USB_EPStartXfer+0xc82>
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	4a41      	ldr	r2, [pc, #260]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b4de:	4694      	mov	ip, r2
 800b4e0:	4463      	add	r3, ip
 800b4e2:	6859      	ldr	r1, [r3, #4]
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	069a      	lsls	r2, r3, #26
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	00db      	lsls	r3, r3, #3
 800b4ee:	483d      	ldr	r0, [pc, #244]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b4f0:	4684      	mov	ip, r0
 800b4f2:	4463      	add	r3, ip
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	605a      	str	r2, [r3, #4]
 800b4f8:	e025      	b.n	800b546 <USB_EPStartXfer+0xcf2>
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	785b      	ldrb	r3, [r3, #1]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d121      	bne.n	800b546 <USB_EPStartXfer+0xcf2>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	4a36      	ldr	r2, [pc, #216]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b50a:	4694      	mov	ip, r2
 800b50c:	4463      	add	r3, ip
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	4933      	ldr	r1, [pc, #204]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b518:	468c      	mov	ip, r1
 800b51a:	4463      	add	r3, ip
 800b51c:	0412      	lsls	r2, r2, #16
 800b51e:	0c12      	lsrs	r2, r2, #16
 800b520:	605a      	str	r2, [r3, #4]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	00db      	lsls	r3, r3, #3
 800b528:	4a2e      	ldr	r2, [pc, #184]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b52a:	4694      	mov	ip, r2
 800b52c:	4463      	add	r3, ip
 800b52e:	6859      	ldr	r1, [r3, #4]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	041a      	lsls	r2, r3, #16
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	4829      	ldr	r0, [pc, #164]	@ (800b5e4 <USB_EPStartXfer+0xd90>)
 800b53e:	4684      	mov	ip, r0
 800b540:	4463      	add	r3, ip
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d100      	bne.n	800b550 <USB_EPStartXfer+0xcfc>
 800b54e:	e170      	b.n	800b832 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	18d3      	adds	r3, r2, r3
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	2126      	movs	r1, #38	@ 0x26
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b562:	187b      	adds	r3, r7, r1
 800b564:	881a      	ldrh	r2, [r3, #0]
 800b566:	2380      	movs	r3, #128	@ 0x80
 800b568:	01db      	lsls	r3, r3, #7
 800b56a:	4013      	ands	r3, r2
 800b56c:	d004      	beq.n	800b578 <USB_EPStartXfer+0xd24>
 800b56e:	187b      	adds	r3, r7, r1
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	2240      	movs	r2, #64	@ 0x40
 800b574:	4013      	ands	r3, r2
 800b576:	d10d      	bne.n	800b594 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b578:	2126      	movs	r1, #38	@ 0x26
 800b57a:	187b      	adds	r3, r7, r1
 800b57c:	881a      	ldrh	r2, [r3, #0]
 800b57e:	2380      	movs	r3, #128	@ 0x80
 800b580:	01db      	lsls	r3, r3, #7
 800b582:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b584:	d000      	beq.n	800b588 <USB_EPStartXfer+0xd34>
 800b586:	e154      	b.n	800b832 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b588:	187b      	adds	r3, r7, r1
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	2240      	movs	r2, #64	@ 0x40
 800b58e:	4013      	ands	r3, r2
 800b590:	d000      	beq.n	800b594 <USB_EPStartXfer+0xd40>
 800b592:	e14e      	b.n	800b832 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	18d3      	adds	r3, r2, r3
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a11      	ldr	r2, [pc, #68]	@ (800b5e8 <USB_EPStartXfer+0xd94>)
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	623b      	str	r3, [r7, #32]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	18d3      	adds	r3, r2, r3
 800b5b0:	6a3a      	ldr	r2, [r7, #32]
 800b5b2:	490e      	ldr	r1, [pc, #56]	@ (800b5ec <USB_EPStartXfer+0xd98>)
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	e13b      	b.n	800b832 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	78db      	ldrb	r3, [r3, #3]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d000      	beq.n	800b5c4 <USB_EPStartXfer+0xd70>
 800b5c2:	e134      	b.n	800b82e <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	699a      	ldr	r2, [r3, #24]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d90f      	bls.n	800b5f0 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	699a      	ldr	r2, [r3, #24]
 800b5da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5dc:	1ad2      	subs	r2, r2, r3
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	619a      	str	r2, [r3, #24]
 800b5e2:	e00b      	b.n	800b5fc <USB_EPStartXfer+0xda8>
 800b5e4:	40009800 	.word	0x40009800
 800b5e8:	07ff8f8f 	.word	0x07ff8f8f
 800b5ec:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	699b      	ldr	r3, [r3, #24]
 800b5f4:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	785b      	ldrb	r3, [r3, #1]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d162      	bne.n	800b6ca <USB_EPStartXfer+0xe76>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	4a9a      	ldr	r2, [pc, #616]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b60c:	4694      	mov	ip, r2
 800b60e:	4463      	add	r3, ip
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	4996      	ldr	r1, [pc, #600]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b61a:	468c      	mov	ip, r1
 800b61c:	4463      	add	r3, ip
 800b61e:	0192      	lsls	r2, r2, #6
 800b620:	0992      	lsrs	r2, r2, #6
 800b622:	601a      	str	r2, [r3, #0]
 800b624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b626:	2b3e      	cmp	r3, #62	@ 0x3e
 800b628:	d91e      	bls.n	800b668 <USB_EPStartXfer+0xe14>
 800b62a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b62c:	095b      	lsrs	r3, r3, #5
 800b62e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b632:	221f      	movs	r2, #31
 800b634:	4013      	ands	r3, r2
 800b636:	d102      	bne.n	800b63e <USB_EPStartXfer+0xdea>
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	3b01      	subs	r3, #1
 800b63c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	00db      	lsls	r3, r3, #3
 800b644:	4a8b      	ldr	r2, [pc, #556]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b646:	4694      	mov	ip, r2
 800b648:	4463      	add	r3, ip
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64e:	069b      	lsls	r3, r3, #26
 800b650:	431a      	orrs	r2, r3
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	00db      	lsls	r3, r3, #3
 800b658:	4986      	ldr	r1, [pc, #536]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b65a:	468c      	mov	ip, r1
 800b65c:	4463      	add	r3, ip
 800b65e:	2180      	movs	r1, #128	@ 0x80
 800b660:	0609      	lsls	r1, r1, #24
 800b662:	430a      	orrs	r2, r1
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	e055      	b.n	800b714 <USB_EPStartXfer+0xec0>
 800b668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d111      	bne.n	800b692 <USB_EPStartXfer+0xe3e>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	4a7f      	ldr	r2, [pc, #508]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b676:	4694      	mov	ip, r2
 800b678:	4463      	add	r3, ip
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	00db      	lsls	r3, r3, #3
 800b682:	497c      	ldr	r1, [pc, #496]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b684:	468c      	mov	ip, r1
 800b686:	4463      	add	r3, ip
 800b688:	2180      	movs	r1, #128	@ 0x80
 800b68a:	0609      	lsls	r1, r1, #24
 800b68c:	430a      	orrs	r2, r1
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	e040      	b.n	800b714 <USB_EPStartXfer+0xec0>
 800b692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b694:	085b      	lsrs	r3, r3, #1
 800b696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b69a:	2201      	movs	r2, #1
 800b69c:	4013      	ands	r3, r2
 800b69e:	d002      	beq.n	800b6a6 <USB_EPStartXfer+0xe52>
 800b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	4a71      	ldr	r2, [pc, #452]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b6ae:	4694      	mov	ip, r2
 800b6b0:	4463      	add	r3, ip
 800b6b2:	6819      	ldr	r1, [r3, #0]
 800b6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6b6:	069a      	lsls	r2, r3, #26
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	486d      	ldr	r0, [pc, #436]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b6c0:	4684      	mov	ip, r0
 800b6c2:	4463      	add	r3, ip
 800b6c4:	430a      	orrs	r2, r1
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e024      	b.n	800b714 <USB_EPStartXfer+0xec0>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	785b      	ldrb	r3, [r3, #1]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d120      	bne.n	800b714 <USB_EPStartXfer+0xec0>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	4a66      	ldr	r2, [pc, #408]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b6da:	4694      	mov	ip, r2
 800b6dc:	4463      	add	r3, ip
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	00db      	lsls	r3, r3, #3
 800b6e6:	4963      	ldr	r1, [pc, #396]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b6e8:	468c      	mov	ip, r1
 800b6ea:	4463      	add	r3, ip
 800b6ec:	0412      	lsls	r2, r2, #16
 800b6ee:	0c12      	lsrs	r2, r2, #16
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	4a5e      	ldr	r2, [pc, #376]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b6fa:	4694      	mov	ip, r2
 800b6fc:	4463      	add	r3, ip
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b702:	041a      	lsls	r2, r3, #16
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	485a      	ldr	r0, [pc, #360]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b70c:	4684      	mov	ip, r0
 800b70e:	4463      	add	r3, ip
 800b710:	430a      	orrs	r2, r1
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d162      	bne.n	800b7e2 <USB_EPStartXfer+0xf8e>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	4a54      	ldr	r2, [pc, #336]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b724:	4694      	mov	ip, r2
 800b726:	4463      	add	r3, ip
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	4950      	ldr	r1, [pc, #320]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b732:	468c      	mov	ip, r1
 800b734:	4463      	add	r3, ip
 800b736:	0192      	lsls	r2, r2, #6
 800b738:	0992      	lsrs	r2, r2, #6
 800b73a:	605a      	str	r2, [r3, #4]
 800b73c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b73e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b740:	d91e      	bls.n	800b780 <USB_EPStartXfer+0xf2c>
 800b742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b744:	095b      	lsrs	r3, r3, #5
 800b746:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b74a:	221f      	movs	r2, #31
 800b74c:	4013      	ands	r3, r2
 800b74e:	d102      	bne.n	800b756 <USB_EPStartXfer+0xf02>
 800b750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b752:	3b01      	subs	r3, #1
 800b754:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	4a45      	ldr	r2, [pc, #276]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b75e:	4694      	mov	ip, r2
 800b760:	4463      	add	r3, ip
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b766:	069b      	lsls	r3, r3, #26
 800b768:	431a      	orrs	r2, r3
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4940      	ldr	r1, [pc, #256]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b772:	468c      	mov	ip, r1
 800b774:	4463      	add	r3, ip
 800b776:	2180      	movs	r1, #128	@ 0x80
 800b778:	0609      	lsls	r1, r1, #24
 800b77a:	430a      	orrs	r2, r1
 800b77c:	605a      	str	r2, [r3, #4]
 800b77e:	e058      	b.n	800b832 <USB_EPStartXfer+0xfde>
 800b780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b782:	2b00      	cmp	r3, #0
 800b784:	d111      	bne.n	800b7aa <USB_EPStartXfer+0xf56>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	4a39      	ldr	r2, [pc, #228]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b78e:	4694      	mov	ip, r2
 800b790:	4463      	add	r3, ip
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	00db      	lsls	r3, r3, #3
 800b79a:	4936      	ldr	r1, [pc, #216]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b79c:	468c      	mov	ip, r1
 800b79e:	4463      	add	r3, ip
 800b7a0:	2180      	movs	r1, #128	@ 0x80
 800b7a2:	0609      	lsls	r1, r1, #24
 800b7a4:	430a      	orrs	r2, r1
 800b7a6:	605a      	str	r2, [r3, #4]
 800b7a8:	e043      	b.n	800b832 <USB_EPStartXfer+0xfde>
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7ac:	085b      	lsrs	r3, r3, #1
 800b7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	d002      	beq.n	800b7be <USB_EPStartXfer+0xf6a>
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	4a2b      	ldr	r2, [pc, #172]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b7c6:	4694      	mov	ip, r2
 800b7c8:	4463      	add	r3, ip
 800b7ca:	6859      	ldr	r1, [r3, #4]
 800b7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ce:	069a      	lsls	r2, r3, #26
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	4827      	ldr	r0, [pc, #156]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b7d8:	4684      	mov	ip, r0
 800b7da:	4463      	add	r3, ip
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	605a      	str	r2, [r3, #4]
 800b7e0:	e027      	b.n	800b832 <USB_EPStartXfer+0xfde>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	785b      	ldrb	r3, [r3, #1]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d123      	bne.n	800b832 <USB_EPStartXfer+0xfde>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4a20      	ldr	r2, [pc, #128]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b7f2:	4694      	mov	ip, r2
 800b7f4:	4463      	add	r3, ip
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	00db      	lsls	r3, r3, #3
 800b7fe:	491d      	ldr	r1, [pc, #116]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b800:	468c      	mov	ip, r1
 800b802:	4463      	add	r3, ip
 800b804:	0412      	lsls	r2, r2, #16
 800b806:	0c12      	lsrs	r2, r2, #16
 800b808:	605a      	str	r2, [r3, #4]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	4a18      	ldr	r2, [pc, #96]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b812:	4694      	mov	ip, r2
 800b814:	4463      	add	r3, ip
 800b816:	6859      	ldr	r1, [r3, #4]
 800b818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b81a:	041a      	lsls	r2, r3, #16
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	00db      	lsls	r3, r3, #3
 800b822:	4814      	ldr	r0, [pc, #80]	@ (800b874 <USB_EPStartXfer+0x1020>)
 800b824:	4684      	mov	ip, r0
 800b826:	4463      	add	r3, ip
 800b828:	430a      	orrs	r2, r1
 800b82a:	605a      	str	r2, [r3, #4]
 800b82c:	e001      	b.n	800b832 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e01c      	b.n	800b86c <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	18d3      	adds	r3, r2, r3
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a0e      	ldr	r2, [pc, #56]	@ (800b878 <USB_EPStartXfer+0x1024>)
 800b840:	4013      	ands	r3, r2
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	2280      	movs	r2, #128	@ 0x80
 800b848:	0152      	lsls	r2, r2, #5
 800b84a:	4053      	eors	r3, r2
 800b84c:	61fb      	str	r3, [r7, #28]
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	2280      	movs	r2, #128	@ 0x80
 800b852:	0192      	lsls	r2, r2, #6
 800b854:	4053      	eors	r3, r2
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	18d3      	adds	r3, r2, r3
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	4905      	ldr	r1, [pc, #20]	@ (800b87c <USB_EPStartXfer+0x1028>)
 800b866:	430a      	orrs	r2, r1
 800b868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	0018      	movs	r0, r3
 800b86e:	46bd      	mov	sp, r7
 800b870:	b017      	add	sp, #92	@ 0x5c
 800b872:	bd90      	pop	{r4, r7, pc}
 800b874:	40009800 	.word	0x40009800
 800b878:	07ffbf8f 	.word	0x07ffbf8f
 800b87c:	00008080 	.word	0x00008080

0800b880 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d016      	beq.n	800b8c0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	18d3      	adds	r3, r2, r3
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a16      	ldr	r2, [pc, #88]	@ (800b8f8 <USB_EPSetStall+0x78>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60bb      	str	r3, [r7, #8]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	2210      	movs	r2, #16
 800b8a8:	4053      	eors	r3, r2
 800b8aa:	60bb      	str	r3, [r7, #8]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	18d3      	adds	r3, r2, r3
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	4910      	ldr	r1, [pc, #64]	@ (800b8fc <USB_EPSetStall+0x7c>)
 800b8ba:	430a      	orrs	r2, r1
 800b8bc:	601a      	str	r2, [r3, #0]
 800b8be:	e016      	b.n	800b8ee <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	18d3      	adds	r3, r2, r3
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800b900 <USB_EPSetStall+0x80>)
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	60fb      	str	r3, [r7, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2280      	movs	r2, #128	@ 0x80
 800b8d6:	0152      	lsls	r2, r2, #5
 800b8d8:	4053      	eors	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	18d3      	adds	r3, r2, r3
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4904      	ldr	r1, [pc, #16]	@ (800b8fc <USB_EPSetStall+0x7c>)
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	b004      	add	sp, #16
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	07ff8fbf 	.word	0x07ff8fbf
 800b8fc:	00008080 	.word	0x00008080
 800b900:	07ffbf8f 	.word	0x07ffbf8f

0800b904 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	7b1b      	ldrb	r3, [r3, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d000      	beq.n	800b918 <USB_EPClearStall+0x14>
 800b916:	e075      	b.n	800ba04 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	785b      	ldrb	r3, [r3, #1]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d037      	beq.n	800b990 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	18d3      	adds	r3, r2, r3
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2240      	movs	r2, #64	@ 0x40
 800b932:	4013      	ands	r3, r2
 800b934:	d011      	beq.n	800b95a <USB_EPClearStall+0x56>
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	18d3      	adds	r3, r2, r3
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a33      	ldr	r2, [pc, #204]	@ (800ba10 <USB_EPClearStall+0x10c>)
 800b944:	4013      	ands	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	18d3      	adds	r3, r2, r3
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	492f      	ldr	r1, [pc, #188]	@ (800ba14 <USB_EPClearStall+0x110>)
 800b956:	430a      	orrs	r2, r1
 800b958:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	78db      	ldrb	r3, [r3, #3]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d050      	beq.n	800ba04 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	18d3      	adds	r3, r2, r3
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba18 <USB_EPClearStall+0x114>)
 800b970:	4013      	ands	r3, r2
 800b972:	60bb      	str	r3, [r7, #8]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2220      	movs	r2, #32
 800b978:	4053      	eors	r3, r2
 800b97a:	60bb      	str	r3, [r7, #8]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	18d3      	adds	r3, r2, r3
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	4924      	ldr	r1, [pc, #144]	@ (800ba1c <USB_EPClearStall+0x118>)
 800b98a:	430a      	orrs	r2, r1
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e039      	b.n	800ba04 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	18d3      	adds	r3, r2, r3
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	61fb      	str	r3, [r7, #28]
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	2380      	movs	r3, #128	@ 0x80
 800b9a2:	01db      	lsls	r3, r3, #7
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	d011      	beq.n	800b9cc <USB_EPClearStall+0xc8>
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	18d3      	adds	r3, r2, r3
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a16      	ldr	r2, [pc, #88]	@ (800ba10 <USB_EPClearStall+0x10c>)
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	61bb      	str	r3, [r7, #24]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	18d3      	adds	r3, r2, r3
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	4916      	ldr	r1, [pc, #88]	@ (800ba20 <USB_EPClearStall+0x11c>)
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	18d3      	adds	r3, r2, r3
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a12      	ldr	r2, [pc, #72]	@ (800ba24 <USB_EPClearStall+0x120>)
 800b9da:	4013      	ands	r3, r2
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2280      	movs	r2, #128	@ 0x80
 800b9e2:	0152      	lsls	r2, r2, #5
 800b9e4:	4053      	eors	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2280      	movs	r2, #128	@ 0x80
 800b9ec:	0192      	lsls	r2, r2, #6
 800b9ee:	4053      	eors	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	18d3      	adds	r3, r2, r3
 800b9fc:	697a      	ldr	r2, [r7, #20]
 800b9fe:	4907      	ldr	r1, [pc, #28]	@ (800ba1c <USB_EPClearStall+0x118>)
 800ba00:	430a      	orrs	r2, r1
 800ba02:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	0018      	movs	r0, r3
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	b008      	add	sp, #32
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	46c0      	nop			@ (mov r8, r8)
 800ba10:	07ff8f8f 	.word	0x07ff8f8f
 800ba14:	000080c0 	.word	0x000080c0
 800ba18:	07ff8fbf 	.word	0x07ff8fbf
 800ba1c:	00008080 	.word	0x00008080
 800ba20:	0000c080 	.word	0x0000c080
 800ba24:	07ffbf8f 	.word	0x07ffbf8f

0800ba28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	000a      	movs	r2, r1
 800ba32:	1cfb      	adds	r3, r7, #3
 800ba34:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800ba36:	1cfb      	adds	r3, r7, #3
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d102      	bne.n	800ba44 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2280      	movs	r2, #128	@ 0x80
 800ba42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	0018      	movs	r0, r3
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b002      	add	sp, #8
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b082      	sub	sp, #8
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba5a:	2280      	movs	r2, #128	@ 0x80
 800ba5c:	0212      	lsls	r2, r2, #8
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	0018      	movs	r0, r3
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	b002      	add	sp, #8
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b084      	sub	sp, #16
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba7a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
}
 800ba7e:	0018      	movs	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b004      	add	sp, #16
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08a      	sub	sp, #40	@ 0x28
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	0019      	movs	r1, r3
 800ba94:	1dbb      	adds	r3, r7, #6
 800ba96:	801a      	strh	r2, [r3, #0]
 800ba98:	1d3b      	adds	r3, r7, #4
 800ba9a:	1c0a      	adds	r2, r1, #0
 800ba9c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ba9e:	1d3b      	adds	r3, r7, #4
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	3303      	adds	r3, #3
 800baa4:	089b      	lsrs	r3, r3, #2
 800baa6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800baa8:	2016      	movs	r0, #22
 800baaa:	183b      	adds	r3, r7, r0
 800baac:	1d3a      	adds	r2, r7, #4
 800baae:	8812      	ldrh	r2, [r2, #0]
 800bab0:	2103      	movs	r1, #3
 800bab2:	400a      	ands	r2, r1
 800bab4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800baba:	183b      	adds	r3, r7, r0
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <USB_WritePMA+0x40>
  {
    NbWords--;
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800bac8:	1dbb      	adds	r3, r7, #6
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	4a28      	ldr	r2, [pc, #160]	@ (800bb70 <USB_WritePMA+0xe8>)
 800bace:	4694      	mov	ip, r2
 800bad0:	4463      	add	r3, ip
 800bad2:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	623b      	str	r3, [r7, #32]
 800bad8:	e01f      	b.n	800bb1a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	7859      	ldrb	r1, [r3, #1]
 800bae0:	0209      	lsls	r1, r1, #8
 800bae2:	430a      	orrs	r2, r1
 800bae4:	7899      	ldrb	r1, [r3, #2]
 800bae6:	0409      	lsls	r1, r1, #16
 800bae8:	430a      	orrs	r2, r1
 800baea:	78db      	ldrb	r3, [r3, #3]
 800baec:	061b      	lsls	r3, r3, #24
 800baee:	4313      	orrs	r3, r2
 800baf0:	001a      	movs	r2, r3
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	3304      	adds	r3, #4
 800bafa:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	3301      	adds	r3, #1
 800bb00:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	3301      	adds	r3, #1
 800bb06:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	3301      	adds	r3, #1
 800bb12:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	3b01      	subs	r3, #1
 800bb18:	623b      	str	r3, [r7, #32]
 800bb1a:	6a3b      	ldr	r3, [r7, #32]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1dc      	bne.n	800bada <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800bb20:	2316      	movs	r3, #22
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d01e      	beq.n	800bb68 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	001a      	movs	r2, r3
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	409a      	lsls	r2, r3
 800bb3a:	0013      	movs	r3, r2
 800bb3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	3301      	adds	r3, #1
 800bb46:	623b      	str	r3, [r7, #32]
      pBuf++;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800bb4e:	2116      	movs	r1, #22
 800bb50:	187b      	adds	r3, r7, r1
 800bb52:	881a      	ldrh	r2, [r3, #0]
 800bb54:	187b      	adds	r3, r7, r1
 800bb56:	3a01      	subs	r2, #1
 800bb58:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800bb5a:	187b      	adds	r3, r7, r1
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1e5      	bne.n	800bb2e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb66:	601a      	str	r2, [r3, #0]
  }
}
 800bb68:	46c0      	nop			@ (mov r8, r8)
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	b00a      	add	sp, #40	@ 0x28
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	40009800 	.word	0x40009800

0800bb74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b08b      	sub	sp, #44	@ 0x2c
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	0019      	movs	r1, r3
 800bb80:	1dbb      	adds	r3, r7, #6
 800bb82:	801a      	strh	r2, [r3, #0]
 800bb84:	1d3b      	adds	r3, r7, #4
 800bb86:	1c0a      	adds	r2, r1, #0
 800bb88:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800bb8a:	1d3b      	adds	r3, r7, #4
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	3303      	adds	r3, #3
 800bb90:	089b      	lsrs	r3, r3, #2
 800bb92:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800bb94:	201a      	movs	r0, #26
 800bb96:	183b      	adds	r3, r7, r0
 800bb98:	1d3a      	adds	r2, r7, #4
 800bb9a:	8812      	ldrh	r2, [r2, #0]
 800bb9c:	2103      	movs	r1, #3
 800bb9e:	400a      	ands	r2, r1
 800bba0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800bba6:	1dbb      	adds	r3, r7, #6
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	4a39      	ldr	r2, [pc, #228]	@ (800bc90 <USB_ReadPMA+0x11c>)
 800bbac:	4694      	mov	ip, r2
 800bbae:	4463      	add	r3, ip
 800bbb0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800bbb2:	183b      	adds	r3, r7, r0
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc4:	e03c      	b.n	800bc40 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	21ff      	movs	r1, #255	@ 0xff
 800bbce:	4011      	ands	r1, r2
 800bbd0:	000c      	movs	r4, r1
 800bbd2:	7819      	ldrb	r1, [r3, #0]
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4001      	ands	r1, r0
 800bbd8:	1c08      	adds	r0, r1, #0
 800bbda:	1c21      	adds	r1, r4, #0
 800bbdc:	4301      	orrs	r1, r0
 800bbde:	7019      	strb	r1, [r3, #0]
 800bbe0:	0a11      	lsrs	r1, r2, #8
 800bbe2:	20ff      	movs	r0, #255	@ 0xff
 800bbe4:	4001      	ands	r1, r0
 800bbe6:	000c      	movs	r4, r1
 800bbe8:	7859      	ldrb	r1, [r3, #1]
 800bbea:	2000      	movs	r0, #0
 800bbec:	4001      	ands	r1, r0
 800bbee:	1c08      	adds	r0, r1, #0
 800bbf0:	1c21      	adds	r1, r4, #0
 800bbf2:	4301      	orrs	r1, r0
 800bbf4:	7059      	strb	r1, [r3, #1]
 800bbf6:	0c11      	lsrs	r1, r2, #16
 800bbf8:	20ff      	movs	r0, #255	@ 0xff
 800bbfa:	4001      	ands	r1, r0
 800bbfc:	000c      	movs	r4, r1
 800bbfe:	7899      	ldrb	r1, [r3, #2]
 800bc00:	2000      	movs	r0, #0
 800bc02:	4001      	ands	r1, r0
 800bc04:	1c08      	adds	r0, r1, #0
 800bc06:	1c21      	adds	r1, r4, #0
 800bc08:	4301      	orrs	r1, r0
 800bc0a:	7099      	strb	r1, [r3, #2]
 800bc0c:	0e10      	lsrs	r0, r2, #24
 800bc0e:	78da      	ldrb	r2, [r3, #3]
 800bc10:	2100      	movs	r1, #0
 800bc12:	400a      	ands	r2, r1
 800bc14:	1c11      	adds	r1, r2, #0
 800bc16:	1c02      	adds	r2, r0, #0
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	623b      	str	r3, [r7, #32]
    pBuf++;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	3301      	adds	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	3301      	adds	r3, #1
 800bc32:	617b      	str	r3, [r7, #20]
    pBuf++;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	3301      	adds	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1bf      	bne.n	800bbc6 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800bc46:	231a      	movs	r3, #26
 800bc48:	18fb      	adds	r3, r7, r3
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01b      	beq.n	800bc88 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	00db      	lsls	r3, r3, #3
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	40da      	lsrs	r2, r3
 800bc60:	0013      	movs	r3, r2
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	701a      	strb	r2, [r3, #0]
      count++;
 800bc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	3301      	adds	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800bc74:	211a      	movs	r1, #26
 800bc76:	187b      	adds	r3, r7, r1
 800bc78:	881a      	ldrh	r2, [r3, #0]
 800bc7a:	187b      	adds	r3, r7, r1
 800bc7c:	3a01      	subs	r2, #1
 800bc7e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800bc80:	187b      	adds	r3, r7, r1
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e6      	bne.n	800bc56 <USB_ReadPMA+0xe2>
  }
}
 800bc88:	46c0      	nop			@ (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b00b      	add	sp, #44	@ 0x2c
 800bc8e:	bd90      	pop	{r4, r7, pc}
 800bc90:	40009800 	.word	0x40009800

0800bc94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	000a      	movs	r2, r1
 800bc9e:	1cfb      	adds	r3, r7, #3
 800bca0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bca2:	2387      	movs	r3, #135	@ 0x87
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	0018      	movs	r0, r3
 800bca8:	f002 ff74 	bl	800eb94 <USBD_static_malloc>
 800bcac:	0003      	movs	r3, r0
 800bcae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10a      	bne.n	800bccc <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	23b5      	movs	r3, #181	@ 0xb5
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	58d2      	ldr	r2, [r2, r3]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32b0      	adds	r2, #176	@ 0xb0
 800bcc2:	0092      	lsls	r2, r2, #2
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	e0e9      	b.n	800bea0 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bccc:	2387      	movs	r3, #135	@ 0x87
 800bcce:	009a      	lsls	r2, r3, #2
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	0018      	movs	r0, r3
 800bcd6:	f004 fb79 	bl	80103cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	23b5      	movs	r3, #181	@ 0xb5
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	58d2      	ldr	r2, [r2, r3]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	32b0      	adds	r2, #176	@ 0xb0
 800bce6:	0092      	lsls	r2, r2, #2
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	23b5      	movs	r3, #181	@ 0xb5
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	58d2      	ldr	r2, [r2, r3]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	32b0      	adds	r2, #176	@ 0xb0
 800bcf8:	0092      	lsls	r2, r2, #2
 800bcfa:	58d1      	ldr	r1, [r2, r3]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	23af      	movs	r3, #175	@ 0xaf
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7c1b      	ldrb	r3, [r3, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d13c      	bne.n	800bd86 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd0c:	4b66      	ldr	r3, [pc, #408]	@ (800bea8 <USBD_CDC_Init+0x214>)
 800bd0e:	7819      	ldrb	r1, [r3, #0]
 800bd10:	2380      	movs	r3, #128	@ 0x80
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f002 fd79 	bl	800e80e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd1c:	4b62      	ldr	r3, [pc, #392]	@ (800bea8 <USBD_CDC_Init+0x214>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	001a      	movs	r2, r3
 800bd22:	230f      	movs	r3, #15
 800bd24:	401a      	ands	r2, r3
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	0013      	movs	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	189b      	adds	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	18cb      	adds	r3, r1, r3
 800bd32:	3324      	adds	r3, #36	@ 0x24
 800bd34:	2201      	movs	r2, #1
 800bd36:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd38:	4b5c      	ldr	r3, [pc, #368]	@ (800beac <USBD_CDC_Init+0x218>)
 800bd3a:	7819      	ldrb	r1, [r3, #0]
 800bd3c:	2380      	movs	r3, #128	@ 0x80
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f002 fd63 	bl	800e80e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd48:	4b58      	ldr	r3, [pc, #352]	@ (800beac <USBD_CDC_Init+0x218>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	001a      	movs	r2, r3
 800bd4e:	230f      	movs	r3, #15
 800bd50:	401a      	ands	r2, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	23b2      	movs	r3, #178	@ 0xb2
 800bd56:	0059      	lsls	r1, r3, #1
 800bd58:	0013      	movs	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	18c3      	adds	r3, r0, r3
 800bd62:	185b      	adds	r3, r3, r1
 800bd64:	2201      	movs	r2, #1
 800bd66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd68:	4b51      	ldr	r3, [pc, #324]	@ (800beb0 <USBD_CDC_Init+0x21c>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	230f      	movs	r3, #15
 800bd70:	401a      	ands	r2, r3
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	0013      	movs	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	189b      	adds	r3, r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	18cb      	adds	r3, r1, r3
 800bd7e:	3326      	adds	r3, #38	@ 0x26
 800bd80:	2210      	movs	r2, #16
 800bd82:	801a      	strh	r2, [r3, #0]
 800bd84:	e039      	b.n	800bdfa <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd86:	4b48      	ldr	r3, [pc, #288]	@ (800bea8 <USBD_CDC_Init+0x214>)
 800bd88:	7819      	ldrb	r1, [r3, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	2340      	movs	r3, #64	@ 0x40
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f002 fd3d 	bl	800e80e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd94:	4b44      	ldr	r3, [pc, #272]	@ (800bea8 <USBD_CDC_Init+0x214>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	001a      	movs	r2, r3
 800bd9a:	230f      	movs	r3, #15
 800bd9c:	401a      	ands	r2, r3
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	0013      	movs	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	189b      	adds	r3, r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	18cb      	adds	r3, r1, r3
 800bdaa:	3324      	adds	r3, #36	@ 0x24
 800bdac:	2201      	movs	r2, #1
 800bdae:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bdb0:	4b3e      	ldr	r3, [pc, #248]	@ (800beac <USBD_CDC_Init+0x218>)
 800bdb2:	7819      	ldrb	r1, [r3, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	2340      	movs	r3, #64	@ 0x40
 800bdb8:	2202      	movs	r2, #2
 800bdba:	f002 fd28 	bl	800e80e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bdbe:	4b3b      	ldr	r3, [pc, #236]	@ (800beac <USBD_CDC_Init+0x218>)
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	001a      	movs	r2, r3
 800bdc4:	230f      	movs	r3, #15
 800bdc6:	401a      	ands	r2, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	23b2      	movs	r3, #178	@ 0xb2
 800bdcc:	0059      	lsls	r1, r3, #1
 800bdce:	0013      	movs	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	189b      	adds	r3, r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	18c3      	adds	r3, r0, r3
 800bdd8:	185b      	adds	r3, r3, r1
 800bdda:	2201      	movs	r2, #1
 800bddc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdde:	4b34      	ldr	r3, [pc, #208]	@ (800beb0 <USBD_CDC_Init+0x21c>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	001a      	movs	r2, r3
 800bde4:	230f      	movs	r3, #15
 800bde6:	401a      	ands	r2, r3
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	0013      	movs	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	189b      	adds	r3, r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	18cb      	adds	r3, r1, r3
 800bdf4:	3326      	adds	r3, #38	@ 0x26
 800bdf6:	2210      	movs	r2, #16
 800bdf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdfa:	4b2d      	ldr	r3, [pc, #180]	@ (800beb0 <USBD_CDC_Init+0x21c>)
 800bdfc:	7819      	ldrb	r1, [r3, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	2308      	movs	r3, #8
 800be02:	2203      	movs	r2, #3
 800be04:	f002 fd03 	bl	800e80e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800be08:	4b29      	ldr	r3, [pc, #164]	@ (800beb0 <USBD_CDC_Init+0x21c>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	001a      	movs	r2, r3
 800be0e:	230f      	movs	r3, #15
 800be10:	401a      	ands	r2, r3
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	0013      	movs	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	189b      	adds	r3, r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	18cb      	adds	r3, r1, r3
 800be1e:	3324      	adds	r3, #36	@ 0x24
 800be20:	2201      	movs	r2, #1
 800be22:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	2381      	movs	r3, #129	@ 0x81
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	2100      	movs	r1, #0
 800be2c:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	23b5      	movs	r3, #181	@ 0xb5
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	58d3      	ldr	r3, [r2, r3]
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	33b0      	adds	r3, #176	@ 0xb0
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	3304      	adds	r3, #4
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	2385      	movs	r3, #133	@ 0x85
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	2100      	movs	r1, #0
 800be4e:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	2386      	movs	r3, #134	@ 0x86
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	2100      	movs	r1, #0
 800be58:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	2381      	movs	r3, #129	@ 0x81
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	58d3      	ldr	r3, [r2, r3]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 800be66:	2302      	movs	r3, #2
 800be68:	e01a      	b.n	800bea0 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7c1b      	ldrb	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10b      	bne.n	800be8a <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be72:	4b0e      	ldr	r3, [pc, #56]	@ (800beac <USBD_CDC_Init+0x218>)
 800be74:	7819      	ldrb	r1, [r3, #0]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	2381      	movs	r3, #129	@ 0x81
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	58d2      	ldr	r2, [r2, r3]
 800be7e:	2380      	movs	r3, #128	@ 0x80
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f002 fe06 	bl	800ea94 <USBD_LL_PrepareReceive>
 800be88:	e009      	b.n	800be9e <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be8a:	4b08      	ldr	r3, [pc, #32]	@ (800beac <USBD_CDC_Init+0x218>)
 800be8c:	7819      	ldrb	r1, [r3, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	2381      	movs	r3, #129	@ 0x81
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	58d2      	ldr	r2, [r2, r3]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	2340      	movs	r3, #64	@ 0x40
 800be9a:	f002 fdfb 	bl	800ea94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	0018      	movs	r0, r3
 800bea2:	46bd      	mov	sp, r7
 800bea4:	b004      	add	sp, #16
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	20000093 	.word	0x20000093
 800beac:	20000094 	.word	0x20000094
 800beb0:	20000095 	.word	0x20000095

0800beb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	000a      	movs	r2, r1
 800bebe:	1cfb      	adds	r3, r7, #3
 800bec0:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bec2:	4b41      	ldr	r3, [pc, #260]	@ (800bfc8 <USBD_CDC_DeInit+0x114>)
 800bec4:	781a      	ldrb	r2, [r3, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	0011      	movs	r1, r2
 800beca:	0018      	movs	r0, r3
 800becc:	f002 fcd6 	bl	800e87c <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bed0:	4b3d      	ldr	r3, [pc, #244]	@ (800bfc8 <USBD_CDC_DeInit+0x114>)
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	001a      	movs	r2, r3
 800bed6:	230f      	movs	r3, #15
 800bed8:	401a      	ands	r2, r3
 800beda:	6879      	ldr	r1, [r7, #4]
 800bedc:	0013      	movs	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	189b      	adds	r3, r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	18cb      	adds	r3, r1, r3
 800bee6:	3324      	adds	r3, #36	@ 0x24
 800bee8:	2200      	movs	r2, #0
 800beea:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800beec:	4b37      	ldr	r3, [pc, #220]	@ (800bfcc <USBD_CDC_DeInit+0x118>)
 800beee:	781a      	ldrb	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	0011      	movs	r1, r2
 800bef4:	0018      	movs	r0, r3
 800bef6:	f002 fcc1 	bl	800e87c <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800befa:	4b34      	ldr	r3, [pc, #208]	@ (800bfcc <USBD_CDC_DeInit+0x118>)
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	001a      	movs	r2, r3
 800bf00:	230f      	movs	r3, #15
 800bf02:	401a      	ands	r2, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	23b2      	movs	r3, #178	@ 0xb2
 800bf08:	0059      	lsls	r1, r3, #1
 800bf0a:	0013      	movs	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	189b      	adds	r3, r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	18c3      	adds	r3, r0, r3
 800bf14:	185b      	adds	r3, r3, r1
 800bf16:	2200      	movs	r2, #0
 800bf18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bf1a:	4b2d      	ldr	r3, [pc, #180]	@ (800bfd0 <USBD_CDC_DeInit+0x11c>)
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	0011      	movs	r1, r2
 800bf22:	0018      	movs	r0, r3
 800bf24:	f002 fcaa 	bl	800e87c <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bf28:	4b29      	ldr	r3, [pc, #164]	@ (800bfd0 <USBD_CDC_DeInit+0x11c>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	001a      	movs	r2, r3
 800bf2e:	230f      	movs	r3, #15
 800bf30:	401a      	ands	r2, r3
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	0013      	movs	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	189b      	adds	r3, r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	18cb      	adds	r3, r1, r3
 800bf3e:	3324      	adds	r3, #36	@ 0x24
 800bf40:	2200      	movs	r2, #0
 800bf42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bf44:	4b22      	ldr	r3, [pc, #136]	@ (800bfd0 <USBD_CDC_DeInit+0x11c>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	001a      	movs	r2, r3
 800bf4a:	230f      	movs	r3, #15
 800bf4c:	401a      	ands	r2, r3
 800bf4e:	6879      	ldr	r1, [r7, #4]
 800bf50:	0013      	movs	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	189b      	adds	r3, r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	18cb      	adds	r3, r1, r3
 800bf5a:	3326      	adds	r3, #38	@ 0x26
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	23b5      	movs	r3, #181	@ 0xb5
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	58d2      	ldr	r2, [r2, r3]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	32b0      	adds	r2, #176	@ 0xb0
 800bf6c:	0092      	lsls	r2, r2, #2
 800bf6e:	58d3      	ldr	r3, [r2, r3]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d024      	beq.n	800bfbe <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	23b5      	movs	r3, #181	@ 0xb5
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	58d3      	ldr	r3, [r2, r3]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	33b0      	adds	r3, #176	@ 0xb0
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	18d3      	adds	r3, r2, r3
 800bf84:	3304      	adds	r3, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	23b5      	movs	r3, #181	@ 0xb5
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	58d2      	ldr	r2, [r2, r3]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	32b0      	adds	r2, #176	@ 0xb0
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	58d3      	ldr	r3, [r2, r3]
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f002 fe05 	bl	800ebac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	23b5      	movs	r3, #181	@ 0xb5
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	58d2      	ldr	r2, [r2, r3]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	32b0      	adds	r2, #176	@ 0xb0
 800bfae:	0092      	lsls	r2, r2, #2
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	23af      	movs	r3, #175	@ 0xaf
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	2100      	movs	r1, #0
 800bfbc:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	0018      	movs	r0, r3
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	b002      	add	sp, #8
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	20000093 	.word	0x20000093
 800bfcc:	20000094 	.word	0x20000094
 800bfd0:	20000095 	.word	0x20000095

0800bfd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	23b5      	movs	r3, #181	@ 0xb5
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	58d2      	ldr	r2, [r2, r3]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	32b0      	adds	r2, #176	@ 0xb0
 800bfea:	0092      	lsls	r2, r2, #2
 800bfec:	58d3      	ldr	r3, [r2, r3]
 800bfee:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bff0:	230d      	movs	r3, #13
 800bff2:	18fb      	adds	r3, r7, r3
 800bff4:	2200      	movs	r2, #0
 800bff6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800bff8:	230a      	movs	r3, #10
 800bffa:	18fb      	adds	r3, r7, r3
 800bffc:	2200      	movs	r2, #0
 800bffe:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c000:	2317      	movs	r3, #23
 800c002:	18fb      	adds	r3, r7, r3
 800c004:	2200      	movs	r2, #0
 800c006:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 800c00e:	2303      	movs	r3, #3
 800c010:	e0d1      	b.n	800c1b6 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	001a      	movs	r2, r3
 800c018:	2360      	movs	r3, #96	@ 0x60
 800c01a:	4013      	ands	r3, r2
 800c01c:	d05b      	beq.n	800c0d6 <USBD_CDC_Setup+0x102>
 800c01e:	2b20      	cmp	r3, #32
 800c020:	d000      	beq.n	800c024 <USBD_CDC_Setup+0x50>
 800c022:	e0ba      	b.n	800c19a <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	88db      	ldrh	r3, [r3, #6]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d043      	beq.n	800c0b4 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	b25b      	sxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	da22      	bge.n	800c07c <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	23b5      	movs	r3, #181	@ 0xb5
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	58d3      	ldr	r3, [r2, r3]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	33b0      	adds	r3, #176	@ 0xb0
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	18d3      	adds	r3, r2, r3
 800c046:	3304      	adds	r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	683a      	ldr	r2, [r7, #0]
 800c04e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c050:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	88d2      	ldrh	r2, [r2, #6]
 800c056:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	88db      	ldrh	r3, [r3, #6]
 800c05c:	220e      	movs	r2, #14
 800c05e:	18ba      	adds	r2, r7, r2
 800c060:	b299      	uxth	r1, r3
 800c062:	2907      	cmp	r1, #7
 800c064:	d900      	bls.n	800c068 <USBD_CDC_Setup+0x94>
 800c066:	2307      	movs	r3, #7
 800c068:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c06a:	6939      	ldr	r1, [r7, #16]
 800c06c:	230e      	movs	r3, #14
 800c06e:	18fb      	adds	r3, r7, r3
 800c070:	881a      	ldrh	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	0018      	movs	r0, r3
 800c076:	f001 ff87 	bl	800df88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c07a:	e099      	b.n	800c1b0 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	7859      	ldrb	r1, [r3, #1]
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	2380      	movs	r3, #128	@ 0x80
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	2b3f      	cmp	r3, #63	@ 0x3f
 800c08e:	d803      	bhi.n	800c098 <USBD_CDC_Setup+0xc4>
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	88db      	ldrh	r3, [r3, #6]
 800c094:	b2da      	uxtb	r2, r3
 800c096:	e000      	b.n	800c09a <USBD_CDC_Setup+0xc6>
 800c098:	2240      	movs	r2, #64	@ 0x40
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	4948      	ldr	r1, [pc, #288]	@ (800c1c0 <USBD_CDC_Setup+0x1ec>)
 800c09e:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c0a0:	6939      	ldr	r1, [r7, #16]
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	4a46      	ldr	r2, [pc, #280]	@ (800c1c0 <USBD_CDC_Setup+0x1ec>)
 800c0a6:	5c9b      	ldrb	r3, [r3, r2]
 800c0a8:	001a      	movs	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f001 ff98 	bl	800dfe2 <USBD_CtlPrepareRx>
      break;
 800c0b2:	e07d      	b.n	800c1b0 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	23b5      	movs	r3, #181	@ 0xb5
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	58d3      	ldr	r3, [r2, r3]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	33b0      	adds	r3, #176	@ 0xb0
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	18d3      	adds	r3, r2, r3
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	7850      	ldrb	r0, [r2, #1]
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4798      	blx	r3
      break;
 800c0d4:	e06c      	b.n	800c1b0 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	2b0b      	cmp	r3, #11
 800c0dc:	d03c      	beq.n	800c158 <USBD_CDC_Setup+0x184>
 800c0de:	dc4d      	bgt.n	800c17c <USBD_CDC_Setup+0x1a8>
 800c0e0:	2b0a      	cmp	r3, #10
 800c0e2:	d01f      	beq.n	800c124 <USBD_CDC_Setup+0x150>
 800c0e4:	dc4a      	bgt.n	800c17c <USBD_CDC_Setup+0x1a8>
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d002      	beq.n	800c0f0 <USBD_CDC_Setup+0x11c>
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d051      	beq.n	800c192 <USBD_CDC_Setup+0x1be>
 800c0ee:	e045      	b.n	800c17c <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	23a7      	movs	r3, #167	@ 0xa7
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	5cd3      	ldrb	r3, [r2, r3]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d107      	bne.n	800c10e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0fe:	230a      	movs	r3, #10
 800c100:	18f9      	adds	r1, r7, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2202      	movs	r2, #2
 800c106:	0018      	movs	r0, r3
 800c108:	f001 ff3e 	bl	800df88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c10c:	e044      	b.n	800c198 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	0011      	movs	r1, r2
 800c114:	0018      	movs	r0, r3
 800c116:	f001 feaf 	bl	800de78 <USBD_CtlError>
            ret = USBD_FAIL;
 800c11a:	2317      	movs	r3, #23
 800c11c:	18fb      	adds	r3, r7, r3
 800c11e:	2203      	movs	r2, #3
 800c120:	701a      	strb	r2, [r3, #0]
          break;
 800c122:	e039      	b.n	800c198 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	23a7      	movs	r3, #167	@ 0xa7
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	5cd3      	ldrb	r3, [r2, r3]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d107      	bne.n	800c142 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c132:	230d      	movs	r3, #13
 800c134:	18f9      	adds	r1, r7, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	0018      	movs	r0, r3
 800c13c:	f001 ff24 	bl	800df88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c140:	e02a      	b.n	800c198 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	0011      	movs	r1, r2
 800c148:	0018      	movs	r0, r3
 800c14a:	f001 fe95 	bl	800de78 <USBD_CtlError>
            ret = USBD_FAIL;
 800c14e:	2317      	movs	r3, #23
 800c150:	18fb      	adds	r3, r7, r3
 800c152:	2203      	movs	r2, #3
 800c154:	701a      	strb	r2, [r3, #0]
          break;
 800c156:	e01f      	b.n	800c198 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	23a7      	movs	r3, #167	@ 0xa7
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	5cd3      	ldrb	r3, [r2, r3]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b03      	cmp	r3, #3
 800c164:	d017      	beq.n	800c196 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	0011      	movs	r1, r2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f001 fe83 	bl	800de78 <USBD_CtlError>
            ret = USBD_FAIL;
 800c172:	2317      	movs	r3, #23
 800c174:	18fb      	adds	r3, r7, r3
 800c176:	2203      	movs	r2, #3
 800c178:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c17a:	e00c      	b.n	800c196 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	0011      	movs	r1, r2
 800c182:	0018      	movs	r0, r3
 800c184:	f001 fe78 	bl	800de78 <USBD_CtlError>
          ret = USBD_FAIL;
 800c188:	2317      	movs	r3, #23
 800c18a:	18fb      	adds	r3, r7, r3
 800c18c:	2203      	movs	r2, #3
 800c18e:	701a      	strb	r2, [r3, #0]
          break;
 800c190:	e002      	b.n	800c198 <USBD_CDC_Setup+0x1c4>
          break;
 800c192:	46c0      	nop			@ (mov r8, r8)
 800c194:	e00c      	b.n	800c1b0 <USBD_CDC_Setup+0x1dc>
          break;
 800c196:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c198:	e00a      	b.n	800c1b0 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	0011      	movs	r1, r2
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f001 fe69 	bl	800de78 <USBD_CtlError>
      ret = USBD_FAIL;
 800c1a6:	2317      	movs	r3, #23
 800c1a8:	18fb      	adds	r3, r7, r3
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	701a      	strb	r2, [r3, #0]
      break;
 800c1ae:	46c0      	nop			@ (mov r8, r8)
  }

  return (uint8_t)ret;
 800c1b0:	2317      	movs	r3, #23
 800c1b2:	18fb      	adds	r3, r7, r3
 800c1b4:	781b      	ldrb	r3, [r3, #0]
}
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b006      	add	sp, #24
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	00000201 	.word	0x00000201

0800c1c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	000a      	movs	r2, r1
 800c1ce:	1cfb      	adds	r3, r7, #3
 800c1d0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	23b2      	movs	r3, #178	@ 0xb2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	58d3      	ldr	r3, [r2, r3]
 800c1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	23b5      	movs	r3, #181	@ 0xb5
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	58d2      	ldr	r2, [r2, r3]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	32b0      	adds	r2, #176	@ 0xb0
 800c1e8:	0092      	lsls	r2, r2, #2
 800c1ea:	58d3      	ldr	r3, [r2, r3]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c1f0:	2303      	movs	r3, #3
 800c1f2:	e072      	b.n	800c2da <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	23b5      	movs	r3, #181	@ 0xb5
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	58d2      	ldr	r2, [r2, r3]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	32b0      	adds	r2, #176	@ 0xb0
 800c200:	0092      	lsls	r2, r2, #2
 800c202:	58d3      	ldr	r3, [r2, r3]
 800c204:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c206:	1cfb      	adds	r3, r7, #3
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	220f      	movs	r2, #15
 800c20c:	401a      	ands	r2, r3
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	0013      	movs	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	189b      	adds	r3, r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	18cb      	adds	r3, r1, r3
 800c21a:	3318      	adds	r3, #24
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d031      	beq.n	800c286 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c222:	1cfb      	adds	r3, r7, #3
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	220f      	movs	r2, #15
 800c228:	401a      	ands	r2, r3
 800c22a:	6879      	ldr	r1, [r7, #4]
 800c22c:	0013      	movs	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	189b      	adds	r3, r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	18cb      	adds	r3, r1, r3
 800c236:	3318      	adds	r3, #24
 800c238:	6818      	ldr	r0, [r3, #0]
 800c23a:	1cfb      	adds	r3, r7, #3
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	220f      	movs	r2, #15
 800c240:	401a      	ands	r2, r3
 800c242:	68f9      	ldr	r1, [r7, #12]
 800c244:	0013      	movs	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	189b      	adds	r3, r3, r2
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	18cb      	adds	r3, r1, r3
 800c24e:	3324      	adds	r3, #36	@ 0x24
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	0019      	movs	r1, r3
 800c254:	f7f3 fff6 	bl	8000244 <__aeabi_uidivmod>
 800c258:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c25a:	d114      	bne.n	800c286 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c25c:	1cfb      	adds	r3, r7, #3
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	220f      	movs	r2, #15
 800c262:	401a      	ands	r2, r3
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	0013      	movs	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	18cb      	adds	r3, r1, r3
 800c270:	3318      	adds	r3, #24
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c276:	1cfb      	adds	r3, r7, #3
 800c278:	7819      	ldrb	r1, [r3, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	2300      	movs	r3, #0
 800c27e:	2200      	movs	r2, #0
 800c280:	f002 fbd8 	bl	800ea34 <USBD_LL_Transmit>
 800c284:	e028      	b.n	800c2d8 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	2385      	movs	r3, #133	@ 0x85
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	2100      	movs	r1, #0
 800c28e:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	23b5      	movs	r3, #181	@ 0xb5
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	58d3      	ldr	r3, [r2, r3]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	33b0      	adds	r3, #176	@ 0xb0
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	18d3      	adds	r3, r2, r3
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d016      	beq.n	800c2d8 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	23b5      	movs	r3, #181	@ 0xb5
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	58d3      	ldr	r3, [r2, r3]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	33b0      	adds	r3, #176	@ 0xb0
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	18d3      	adds	r3, r2, r3
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	691c      	ldr	r4, [r3, #16]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	2382      	movs	r3, #130	@ 0x82
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	58d0      	ldr	r0, [r2, r3]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2284      	movs	r2, #132	@ 0x84
 800c2cc:	0092      	lsls	r2, r2, #2
 800c2ce:	1899      	adds	r1, r3, r2
 800c2d0:	1cfb      	adds	r3, r7, #3
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	001a      	movs	r2, r3
 800c2d6:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	0018      	movs	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	b005      	add	sp, #20
 800c2e0:	bd90      	pop	{r4, r7, pc}

0800c2e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	000a      	movs	r2, r1
 800c2ec:	1cfb      	adds	r3, r7, #3
 800c2ee:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	23b5      	movs	r3, #181	@ 0xb5
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	58d2      	ldr	r2, [r2, r3]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	32b0      	adds	r2, #176	@ 0xb0
 800c2fc:	0092      	lsls	r2, r2, #2
 800c2fe:	58d3      	ldr	r3, [r2, r3]
 800c300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	23b5      	movs	r3, #181	@ 0xb5
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	58d2      	ldr	r2, [r2, r3]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	32b0      	adds	r2, #176	@ 0xb0
 800c30e:	0092      	lsls	r2, r2, #2
 800c310:	58d3      	ldr	r3, [r2, r3]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d101      	bne.n	800c31a <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 800c316:	2303      	movs	r3, #3
 800c318:	e022      	b.n	800c360 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c31a:	1cfb      	adds	r3, r7, #3
 800c31c:	781a      	ldrb	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	0011      	movs	r1, r2
 800c322:	0018      	movs	r0, r3
 800c324:	f002 fbe6 	bl	800eaf4 <USBD_LL_GetRxDataSize>
 800c328:	0001      	movs	r1, r0
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	2383      	movs	r3, #131	@ 0x83
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	23b5      	movs	r3, #181	@ 0xb5
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	58d3      	ldr	r3, [r2, r3]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	33b0      	adds	r3, #176	@ 0xb0
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	18d3      	adds	r3, r2, r3
 800c342:	3304      	adds	r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	68f9      	ldr	r1, [r7, #12]
 800c34a:	2381      	movs	r3, #129	@ 0x81
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	58c8      	ldr	r0, [r1, r3]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2183      	movs	r1, #131	@ 0x83
 800c354:	0089      	lsls	r1, r1, #2
 800c356:	468c      	mov	ip, r1
 800c358:	4463      	add	r3, ip
 800c35a:	0019      	movs	r1, r3
 800c35c:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	0018      	movs	r0, r3
 800c362:	46bd      	mov	sp, r7
 800c364:	b004      	add	sp, #16
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	23b5      	movs	r3, #181	@ 0xb5
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	58d2      	ldr	r2, [r2, r3]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	32b0      	adds	r2, #176	@ 0xb0
 800c37c:	0092      	lsls	r2, r2, #2
 800c37e:	58d3      	ldr	r3, [r2, r3]
 800c380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c388:	2303      	movs	r3, #3
 800c38a:	e02b      	b.n	800c3e4 <USBD_CDC_EP0_RxReady+0x7c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	23b5      	movs	r3, #181	@ 0xb5
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	58d3      	ldr	r3, [r2, r3]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	33b0      	adds	r3, #176	@ 0xb0
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	18d3      	adds	r3, r2, r3
 800c39c:	3304      	adds	r3, #4
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01e      	beq.n	800c3e2 <USBD_CDC_EP0_RxReady+0x7a>
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	2380      	movs	r3, #128	@ 0x80
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	5cd3      	ldrb	r3, [r2, r3]
 800c3ac:	2bff      	cmp	r3, #255	@ 0xff
 800c3ae:	d018      	beq.n	800c3e2 <USBD_CDC_EP0_RxReady+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	23b5      	movs	r3, #181	@ 0xb5
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	58d3      	ldr	r3, [r2, r3]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	33b0      	adds	r3, #176	@ 0xb0
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	18d3      	adds	r3, r2, r3
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	2280      	movs	r2, #128	@ 0x80
 800c3ca:	0092      	lsls	r2, r2, #2
 800c3cc:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 800c3ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4c06      	ldr	r4, [pc, #24]	@ (800c3ec <USBD_CDC_EP0_RxReady+0x84>)
 800c3d4:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	2380      	movs	r3, #128	@ 0x80
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	21ff      	movs	r1, #255	@ 0xff
 800c3e0:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b005      	add	sp, #20
 800c3ea:	bd90      	pop	{r4, r7, pc}
 800c3ec:	00000201 	.word	0x00000201

0800c3f0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3f8:	4b20      	ldr	r3, [pc, #128]	@ (800c47c <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c3fa:	2182      	movs	r1, #130	@ 0x82
 800c3fc:	0018      	movs	r0, r3
 800c3fe:	f000 fd9c 	bl	800cf3a <USBD_GetEpDesc>
 800c402:	0003      	movs	r3, r0
 800c404:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c406:	4b1d      	ldr	r3, [pc, #116]	@ (800c47c <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c408:	2101      	movs	r1, #1
 800c40a:	0018      	movs	r0, r3
 800c40c:	f000 fd95 	bl	800cf3a <USBD_GetEpDesc>
 800c410:	0003      	movs	r3, r0
 800c412:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c414:	4b19      	ldr	r3, [pc, #100]	@ (800c47c <USBD_CDC_GetFSCfgDesc+0x8c>)
 800c416:	2181      	movs	r1, #129	@ 0x81
 800c418:	0018      	movs	r0, r3
 800c41a:	f000 fd8e 	bl	800cf3a <USBD_GetEpDesc>
 800c41e:	0003      	movs	r3, r0
 800c420:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2210      	movs	r2, #16
 800c42c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	791a      	ldrb	r2, [r3, #4]
 800c438:	2100      	movs	r1, #0
 800c43a:	400a      	ands	r2, r1
 800c43c:	1c11      	adds	r1, r2, #0
 800c43e:	2240      	movs	r2, #64	@ 0x40
 800c440:	430a      	orrs	r2, r1
 800c442:	711a      	strb	r2, [r3, #4]
 800c444:	795a      	ldrb	r2, [r3, #5]
 800c446:	2100      	movs	r1, #0
 800c448:	400a      	ands	r2, r1
 800c44a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00b      	beq.n	800c46a <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	791a      	ldrb	r2, [r3, #4]
 800c456:	2100      	movs	r1, #0
 800c458:	400a      	ands	r2, r1
 800c45a:	1c11      	adds	r1, r2, #0
 800c45c:	2240      	movs	r2, #64	@ 0x40
 800c45e:	430a      	orrs	r2, r1
 800c460:	711a      	strb	r2, [r3, #4]
 800c462:	795a      	ldrb	r2, [r3, #5]
 800c464:	2100      	movs	r1, #0
 800c466:	400a      	ands	r2, r1
 800c468:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2243      	movs	r2, #67	@ 0x43
 800c46e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c470:	4b02      	ldr	r3, [pc, #8]	@ (800c47c <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 800c472:	0018      	movs	r0, r3
 800c474:	46bd      	mov	sp, r7
 800c476:	b006      	add	sp, #24
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	46c0      	nop			@ (mov r8, r8)
 800c47c:	20000050 	.word	0x20000050

0800c480 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c488:	4b20      	ldr	r3, [pc, #128]	@ (800c50c <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c48a:	2182      	movs	r1, #130	@ 0x82
 800c48c:	0018      	movs	r0, r3
 800c48e:	f000 fd54 	bl	800cf3a <USBD_GetEpDesc>
 800c492:	0003      	movs	r3, r0
 800c494:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c496:	4b1d      	ldr	r3, [pc, #116]	@ (800c50c <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c498:	2101      	movs	r1, #1
 800c49a:	0018      	movs	r0, r3
 800c49c:	f000 fd4d 	bl	800cf3a <USBD_GetEpDesc>
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4a4:	4b19      	ldr	r3, [pc, #100]	@ (800c50c <USBD_CDC_GetHSCfgDesc+0x8c>)
 800c4a6:	2181      	movs	r1, #129	@ 0x81
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f000 fd46 	bl	800cf3a <USBD_GetEpDesc>
 800c4ae:	0003      	movs	r3, r0
 800c4b0:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2210      	movs	r2, #16
 800c4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00b      	beq.n	800c4dc <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	791a      	ldrb	r2, [r3, #4]
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	400a      	ands	r2, r1
 800c4cc:	711a      	strb	r2, [r3, #4]
 800c4ce:	795a      	ldrb	r2, [r3, #5]
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	400a      	ands	r2, r1
 800c4d4:	1c11      	adds	r1, r2, #0
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	430a      	orrs	r2, r1
 800c4da:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	791a      	ldrb	r2, [r3, #4]
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	400a      	ands	r2, r1
 800c4ea:	711a      	strb	r2, [r3, #4]
 800c4ec:	795a      	ldrb	r2, [r3, #5]
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	400a      	ands	r2, r1
 800c4f2:	1c11      	adds	r1, r2, #0
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2243      	movs	r2, #67	@ 0x43
 800c4fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c500:	4b02      	ldr	r3, [pc, #8]	@ (800c50c <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 800c502:	0018      	movs	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	b006      	add	sp, #24
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	46c0      	nop			@ (mov r8, r8)
 800c50c:	20000050 	.word	0x20000050

0800c510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c518:	4b20      	ldr	r3, [pc, #128]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c51a:	2182      	movs	r1, #130	@ 0x82
 800c51c:	0018      	movs	r0, r3
 800c51e:	f000 fd0c 	bl	800cf3a <USBD_GetEpDesc>
 800c522:	0003      	movs	r3, r0
 800c524:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c526:	4b1d      	ldr	r3, [pc, #116]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c528:	2101      	movs	r1, #1
 800c52a:	0018      	movs	r0, r3
 800c52c:	f000 fd05 	bl	800cf3a <USBD_GetEpDesc>
 800c530:	0003      	movs	r3, r0
 800c532:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c534:	4b19      	ldr	r3, [pc, #100]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 800c536:	2181      	movs	r1, #129	@ 0x81
 800c538:	0018      	movs	r0, r3
 800c53a:	f000 fcfe 	bl	800cf3a <USBD_GetEpDesc>
 800c53e:	0003      	movs	r3, r0
 800c540:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d002      	beq.n	800c54e <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2210      	movs	r2, #16
 800c54c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	791a      	ldrb	r2, [r3, #4]
 800c558:	2100      	movs	r1, #0
 800c55a:	400a      	ands	r2, r1
 800c55c:	1c11      	adds	r1, r2, #0
 800c55e:	2240      	movs	r2, #64	@ 0x40
 800c560:	430a      	orrs	r2, r1
 800c562:	711a      	strb	r2, [r3, #4]
 800c564:	795a      	ldrb	r2, [r3, #5]
 800c566:	2100      	movs	r1, #0
 800c568:	400a      	ands	r2, r1
 800c56a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	791a      	ldrb	r2, [r3, #4]
 800c576:	2100      	movs	r1, #0
 800c578:	400a      	ands	r2, r1
 800c57a:	1c11      	adds	r1, r2, #0
 800c57c:	2240      	movs	r2, #64	@ 0x40
 800c57e:	430a      	orrs	r2, r1
 800c580:	711a      	strb	r2, [r3, #4]
 800c582:	795a      	ldrb	r2, [r3, #5]
 800c584:	2100      	movs	r1, #0
 800c586:	400a      	ands	r2, r1
 800c588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2243      	movs	r2, #67	@ 0x43
 800c58e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c590:	4b02      	ldr	r3, [pc, #8]	@ (800c59c <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 800c592:	0018      	movs	r0, r3
 800c594:	46bd      	mov	sp, r7
 800c596:	b006      	add	sp, #24
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	20000050 	.word	0x20000050

0800c5a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	220a      	movs	r2, #10
 800c5ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5ae:	4b02      	ldr	r3, [pc, #8]	@ (800c5b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	b002      	add	sp, #8
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	2000000c 	.word	0x2000000c

0800c5bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e00b      	b.n	800c5e8 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	23b5      	movs	r3, #181	@ 0xb5
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	58d3      	ldr	r3, [r2, r3]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	33b0      	adds	r3, #176	@ 0xb0
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	18d3      	adds	r3, r2, r3
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	b002      	add	sp, #8
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	23b5      	movs	r3, #181	@ 0xb5
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	58d2      	ldr	r2, [r2, r3]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	32b0      	adds	r2, #176	@ 0xb0
 800c608:	0092      	lsls	r2, r2, #2
 800c60a:	58d3      	ldr	r3, [r2, r3]
 800c60c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	e00a      	b.n	800c62e <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	2382      	movs	r3, #130	@ 0x82
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	2384      	movs	r3, #132	@ 0x84
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	6879      	ldr	r1, [r7, #4]
 800c62a:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	0018      	movs	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	b006      	add	sp, #24
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	23b5      	movs	r3, #181	@ 0xb5
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	58d2      	ldr	r2, [r2, r3]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	32b0      	adds	r2, #176	@ 0xb0
 800c64c:	0092      	lsls	r2, r2, #2
 800c64e:	58d3      	ldr	r3, [r2, r3]
 800c650:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c658:	2303      	movs	r3, #3
 800c65a:	e005      	b.n	800c668 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	2381      	movs	r3, #129	@ 0x81
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	0018      	movs	r0, r3
 800c66a:	46bd      	mov	sp, r7
 800c66c:	b004      	add	sp, #16
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c670:	b590      	push	{r4, r7, lr}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	23b5      	movs	r3, #181	@ 0xb5
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	58d2      	ldr	r2, [r2, r3]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	32b0      	adds	r2, #176	@ 0xb0
 800c684:	0092      	lsls	r2, r2, #2
 800c686:	58d3      	ldr	r3, [r2, r3]
 800c688:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c68a:	230f      	movs	r3, #15
 800c68c:	18fb      	adds	r3, r7, r3
 800c68e:	2201      	movs	r2, #1
 800c690:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e030      	b.n	800c6fe <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	2385      	movs	r3, #133	@ 0x85
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	58d3      	ldr	r3, [r2, r3]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d127      	bne.n	800c6f8 <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	2385      	movs	r3, #133	@ 0x85
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c6b2:	4b15      	ldr	r3, [pc, #84]	@ (800c708 <USBD_CDC_TransmitPacket+0x98>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	001a      	movs	r2, r3
 800c6b8:	230f      	movs	r3, #15
 800c6ba:	401a      	ands	r2, r3
 800c6bc:	68b9      	ldr	r1, [r7, #8]
 800c6be:	2384      	movs	r3, #132	@ 0x84
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	58c9      	ldr	r1, [r1, r3]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	0013      	movs	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	189b      	adds	r3, r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	18c3      	adds	r3, r0, r3
 800c6d0:	3318      	adds	r3, #24
 800c6d2:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c708 <USBD_CDC_TransmitPacket+0x98>)
 800c6d6:	7819      	ldrb	r1, [r3, #0]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	2382      	movs	r3, #130	@ 0x82
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	58d4      	ldr	r4, [r2, r3]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	2384      	movs	r3, #132	@ 0x84
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	58d3      	ldr	r3, [r2, r3]
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	0022      	movs	r2, r4
 800c6ec:	f002 f9a2 	bl	800ea34 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c6f0:	230f      	movs	r3, #15
 800c6f2:	18fb      	adds	r3, r7, r3
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 800c6f8:	230f      	movs	r3, #15
 800c6fa:	18fb      	adds	r3, r7, r3
 800c6fc:	781b      	ldrb	r3, [r3, #0]
}
 800c6fe:	0018      	movs	r0, r3
 800c700:	46bd      	mov	sp, r7
 800c702:	b005      	add	sp, #20
 800c704:	bd90      	pop	{r4, r7, pc}
 800c706:	46c0      	nop			@ (mov r8, r8)
 800c708:	20000093 	.word	0x20000093

0800c70c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	23b5      	movs	r3, #181	@ 0xb5
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	58d2      	ldr	r2, [r2, r3]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	32b0      	adds	r2, #176	@ 0xb0
 800c720:	0092      	lsls	r2, r2, #2
 800c722:	58d3      	ldr	r3, [r2, r3]
 800c724:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	23b5      	movs	r3, #181	@ 0xb5
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	58d2      	ldr	r2, [r2, r3]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	32b0      	adds	r2, #176	@ 0xb0
 800c732:	0092      	lsls	r2, r2, #2
 800c734:	58d3      	ldr	r3, [r2, r3]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e01a      	b.n	800c774 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	7c1b      	ldrb	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c746:	4b0d      	ldr	r3, [pc, #52]	@ (800c77c <USBD_CDC_ReceivePacket+0x70>)
 800c748:	7819      	ldrb	r1, [r3, #0]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	2381      	movs	r3, #129	@ 0x81
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	58d2      	ldr	r2, [r2, r3]
 800c752:	2380      	movs	r3, #128	@ 0x80
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f002 f99c 	bl	800ea94 <USBD_LL_PrepareReceive>
 800c75c:	e009      	b.n	800c772 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c75e:	4b07      	ldr	r3, [pc, #28]	@ (800c77c <USBD_CDC_ReceivePacket+0x70>)
 800c760:	7819      	ldrb	r1, [r3, #0]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	2381      	movs	r3, #129	@ 0x81
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	58d2      	ldr	r2, [r2, r3]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	2340      	movs	r3, #64	@ 0x40
 800c76e:	f002 f991 	bl	800ea94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	0018      	movs	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	b004      	add	sp, #16
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20000094 	.word	0x20000094

0800c780 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c780:	b5b0      	push	{r4, r5, r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	1dfb      	adds	r3, r7, #7
 800c78c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c794:	2303      	movs	r3, #3
 800c796:	e029      	b.n	800c7ec <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	23ae      	movs	r3, #174	@ 0xae
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	2100      	movs	r1, #0
 800c7a0:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	23b1      	movs	r3, #177	@ 0xb1
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	23b4      	movs	r3, #180	@ 0xb4
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d004      	beq.n	800c7c6 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	23ad      	movs	r3, #173	@ 0xad
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	68b9      	ldr	r1, [r7, #8]
 800c7c4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	23a7      	movs	r3, #167	@ 0xa7
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	1dfa      	adds	r2, r7, #7
 800c7d4:	7812      	ldrb	r2, [r2, #0]
 800c7d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7d8:	2517      	movs	r5, #23
 800c7da:	197c      	adds	r4, r7, r5
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	0018      	movs	r0, r3
 800c7e0:	f001 ff7e 	bl	800e6e0 <USBD_LL_Init>
 800c7e4:	0003      	movs	r3, r0
 800c7e6:	7023      	strb	r3, [r4, #0]

  return ret;
 800c7e8:	197b      	adds	r3, r7, r5
 800c7ea:	781b      	ldrb	r3, [r3, #0]
}
 800c7ec:	0018      	movs	r0, r3
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	b006      	add	sp, #24
 800c7f2:	bdb0      	pop	{r4, r5, r7, pc}

0800c7f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7fe:	230e      	movs	r3, #14
 800c800:	18fb      	adds	r3, r7, r3
 800c802:	2200      	movs	r2, #0
 800c804:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e02b      	b.n	800c868 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	23ae      	movs	r3, #174	@ 0xae
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	23b5      	movs	r3, #181	@ 0xb5
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	58d2      	ldr	r2, [r2, r3]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	32ae      	adds	r2, #174	@ 0xae
 800c826:	0092      	lsls	r2, r2, #2
 800c828:	58d3      	ldr	r3, [r2, r3]
 800c82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d011      	beq.n	800c854 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	23b5      	movs	r3, #181	@ 0xb5
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	58d2      	ldr	r2, [r2, r3]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	32ae      	adds	r2, #174	@ 0xae
 800c83c:	0092      	lsls	r2, r2, #2
 800c83e:	58d3      	ldr	r3, [r2, r3]
 800c840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c842:	220e      	movs	r2, #14
 800c844:	18ba      	adds	r2, r7, r2
 800c846:	0010      	movs	r0, r2
 800c848:	4798      	blx	r3
 800c84a:	0001      	movs	r1, r0
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	23b4      	movs	r3, #180	@ 0xb4
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	23b6      	movs	r3, #182	@ 0xb6
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	58d3      	ldr	r3, [r2, r3]
 800c85c:	1c59      	adds	r1, r3, #1
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	23b6      	movs	r3, #182	@ 0xb6
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	0018      	movs	r0, r3
 800c86a:	46bd      	mov	sp, r7
 800c86c:	b004      	add	sp, #16
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	0018      	movs	r0, r3
 800c87c:	f001 ffa2 	bl	800e7c4 <USBD_LL_Start>
 800c880:	0003      	movs	r3, r0
}
 800c882:	0018      	movs	r0, r3
 800c884:	46bd      	mov	sp, r7
 800c886:	b002      	add	sp, #8
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b082      	sub	sp, #8
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c892:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c894:	0018      	movs	r0, r3
 800c896:	46bd      	mov	sp, r7
 800c898:	b002      	add	sp, #8
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c89c:	b590      	push	{r4, r7, lr}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	000a      	movs	r2, r1
 800c8a6:	1cfb      	adds	r3, r7, #3
 800c8a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8aa:	210f      	movs	r1, #15
 800c8ac:	187b      	adds	r3, r7, r1
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	23ae      	movs	r3, #174	@ 0xae
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	58d3      	ldr	r3, [r2, r3]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00c      	beq.n	800c8d8 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	23ae      	movs	r3, #174	@ 0xae
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	58d3      	ldr	r3, [r2, r3]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	187c      	adds	r4, r7, r1
 800c8ca:	1cfa      	adds	r2, r7, #3
 800c8cc:	7811      	ldrb	r1, [r2, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	0010      	movs	r0, r2
 800c8d2:	4798      	blx	r3
 800c8d4:	0003      	movs	r3, r0
 800c8d6:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8d8:	230f      	movs	r3, #15
 800c8da:	18fb      	adds	r3, r7, r3
 800c8dc:	781b      	ldrb	r3, [r3, #0]
}
 800c8de:	0018      	movs	r0, r3
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	b005      	add	sp, #20
 800c8e4:	bd90      	pop	{r4, r7, pc}

0800c8e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8e6:	b590      	push	{r4, r7, lr}
 800c8e8:	b085      	sub	sp, #20
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	000a      	movs	r2, r1
 800c8f0:	1cfb      	adds	r3, r7, #3
 800c8f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8f4:	240f      	movs	r4, #15
 800c8f6:	193b      	adds	r3, r7, r4
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	23ae      	movs	r3, #174	@ 0xae
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	58d3      	ldr	r3, [r2, r3]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	1cfa      	adds	r2, r7, #3
 800c908:	7811      	ldrb	r1, [r2, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	0010      	movs	r0, r2
 800c90e:	4798      	blx	r3
 800c910:	1e03      	subs	r3, r0, #0
 800c912:	d002      	beq.n	800c91a <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 800c914:	193b      	adds	r3, r7, r4
 800c916:	2203      	movs	r2, #3
 800c918:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c91a:	230f      	movs	r3, #15
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	781b      	ldrb	r3, [r3, #0]
}
 800c920:	0018      	movs	r0, r3
 800c922:	46bd      	mov	sp, r7
 800c924:	b005      	add	sp, #20
 800c926:	bd90      	pop	{r4, r7, pc}

0800c928 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a30      	ldr	r2, [pc, #192]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c936:	4694      	mov	ip, r2
 800c938:	4463      	add	r3, ip
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	0011      	movs	r1, r2
 800c93e:	0018      	movs	r0, r3
 800c940:	f001 fa5d 	bl	800ddfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c944:	687a      	ldr	r2, [r7, #4]
 800c946:	23a5      	movs	r3, #165	@ 0xa5
 800c948:	009b      	lsls	r3, r3, #2
 800c94a:	2101      	movs	r1, #1
 800c94c:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	23ac      	movs	r3, #172	@ 0xac
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	5ad3      	ldrh	r3, [r2, r3]
 800c956:	0019      	movs	r1, r3
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	23a6      	movs	r3, #166	@ 0xa6
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a25      	ldr	r2, [pc, #148]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c964:	5c9b      	ldrb	r3, [r3, r2]
 800c966:	001a      	movs	r2, r3
 800c968:	231f      	movs	r3, #31
 800c96a:	4013      	ands	r3, r2
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d01f      	beq.n	800c9b0 <USBD_LL_SetupStage+0x88>
 800c970:	d82b      	bhi.n	800c9ca <USBD_LL_SetupStage+0xa2>
 800c972:	2b00      	cmp	r3, #0
 800c974:	d002      	beq.n	800c97c <USBD_LL_SetupStage+0x54>
 800c976:	2b01      	cmp	r3, #1
 800c978:	d00d      	beq.n	800c996 <USBD_LL_SetupStage+0x6e>
 800c97a:	e026      	b.n	800c9ca <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c980:	189a      	adds	r2, r3, r2
 800c982:	230f      	movs	r3, #15
 800c984:	18fc      	adds	r4, r7, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	0011      	movs	r1, r2
 800c98a:	0018      	movs	r0, r3
 800c98c:	f000 fb5c 	bl	800d048 <USBD_StdDevReq>
 800c990:	0003      	movs	r3, r0
 800c992:	7023      	strb	r3, [r4, #0]
      break;
 800c994:	e029      	b.n	800c9ea <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a17      	ldr	r2, [pc, #92]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c99a:	189a      	adds	r2, r3, r2
 800c99c:	230f      	movs	r3, #15
 800c99e:	18fc      	adds	r4, r7, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	0011      	movs	r1, r2
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 fbcd 	bl	800d144 <USBD_StdItfReq>
 800c9aa:	0003      	movs	r3, r0
 800c9ac:	7023      	strb	r3, [r4, #0]
      break;
 800c9ae:	e01c      	b.n	800c9ea <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a11      	ldr	r2, [pc, #68]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c9b4:	189a      	adds	r2, r3, r2
 800c9b6:	230f      	movs	r3, #15
 800c9b8:	18fc      	adds	r4, r7, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	0011      	movs	r1, r2
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f000 fc4d 	bl	800d25e <USBD_StdEPReq>
 800c9c4:	0003      	movs	r3, r0
 800c9c6:	7023      	strb	r3, [r4, #0]
      break;
 800c9c8:	e00f      	b.n	800c9ea <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c9f8 <USBD_LL_SetupStage+0xd0>)
 800c9ce:	5c9b      	ldrb	r3, [r3, r2]
 800c9d0:	227f      	movs	r2, #127	@ 0x7f
 800c9d2:	4393      	bics	r3, r2
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	230f      	movs	r3, #15
 800c9d8:	18fc      	adds	r4, r7, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	0011      	movs	r1, r2
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f001 ff77 	bl	800e8d2 <USBD_LL_StallEP>
 800c9e4:	0003      	movs	r3, r0
 800c9e6:	7023      	strb	r3, [r4, #0]
      break;
 800c9e8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c9ea:	230f      	movs	r3, #15
 800c9ec:	18fb      	adds	r3, r7, r3
 800c9ee:	781b      	ldrb	r3, [r3, #0]
}
 800c9f0:	0018      	movs	r0, r3
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b005      	add	sp, #20
 800c9f6:	bd90      	pop	{r4, r7, pc}
 800c9f8:	000002aa 	.word	0x000002aa

0800c9fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fe:	b087      	sub	sp, #28
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	607a      	str	r2, [r7, #4]
 800ca06:	200b      	movs	r0, #11
 800ca08:	183b      	adds	r3, r7, r0
 800ca0a:	1c0a      	adds	r2, r1, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0e:	2317      	movs	r3, #23
 800ca10:	18fb      	adds	r3, r7, r3
 800ca12:	2200      	movs	r2, #0
 800ca14:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 800ca16:	183b      	adds	r3, r7, r0
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d000      	beq.n	800ca20 <USBD_LL_DataOutStage+0x24>
 800ca1e:	e084      	b.n	800cb2a <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3355      	adds	r3, #85	@ 0x55
 800ca24:	33ff      	adds	r3, #255	@ 0xff
 800ca26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	23a5      	movs	r3, #165	@ 0xa5
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	58d3      	ldr	r3, [r2, r3]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d000      	beq.n	800ca36 <USBD_LL_DataOutStage+0x3a>
 800ca34:	e0c0      	b.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d914      	bls.n	800ca6c <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	689a      	ldr	r2, [r3, #8]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	1ad2      	subs	r2, r2, r3
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	68d9      	ldr	r1, [r3, #12]
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	000b      	movs	r3, r1
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d900      	bls.n	800ca60 <USBD_LL_DataOutStage+0x64>
 800ca5e:	0013      	movs	r3, r2
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	001a      	movs	r2, r3
 800ca66:	f001 fadc 	bl	800e022 <USBD_CtlContinueRx>
 800ca6a:	e0a5      	b.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4a55      	ldr	r2, [pc, #340]	@ (800cbc4 <USBD_LL_DataOutStage+0x1c8>)
 800ca70:	5c9b      	ldrb	r3, [r3, r2]
 800ca72:	001a      	movs	r2, r3
 800ca74:	231f      	movs	r3, #31
 800ca76:	4013      	ands	r3, r2
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d018      	beq.n	800caae <USBD_LL_DataOutStage+0xb2>
 800ca7c:	d825      	bhi.n	800caca <USBD_LL_DataOutStage+0xce>
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <USBD_LL_DataOutStage+0x8c>
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d005      	beq.n	800ca92 <USBD_LL_DataOutStage+0x96>
 800ca86:	e020      	b.n	800caca <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca88:	2316      	movs	r3, #22
 800ca8a:	18fb      	adds	r3, r7, r3
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	701a      	strb	r2, [r3, #0]
            break;
 800ca90:	e020      	b.n	800cad4 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4a4c      	ldr	r2, [pc, #304]	@ (800cbc8 <USBD_LL_DataOutStage+0x1cc>)
 800ca96:	5a9b      	ldrh	r3, [r3, r2]
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	2316      	movs	r3, #22
 800ca9c:	18fc      	adds	r4, r7, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	0011      	movs	r1, r2
 800caa2:	0018      	movs	r0, r3
 800caa4:	f000 fa31 	bl	800cf0a <USBD_CoreFindIF>
 800caa8:	0003      	movs	r3, r0
 800caaa:	7023      	strb	r3, [r4, #0]
            break;
 800caac:	e012      	b.n	800cad4 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4a45      	ldr	r2, [pc, #276]	@ (800cbc8 <USBD_LL_DataOutStage+0x1cc>)
 800cab2:	5a9b      	ldrh	r3, [r3, r2]
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	2316      	movs	r3, #22
 800cab8:	18fc      	adds	r4, r7, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	0011      	movs	r1, r2
 800cabe:	0018      	movs	r0, r3
 800cac0:	f000 fa2f 	bl	800cf22 <USBD_CoreFindEP>
 800cac4:	0003      	movs	r3, r0
 800cac6:	7023      	strb	r3, [r4, #0]
            break;
 800cac8:	e004      	b.n	800cad4 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800caca:	2316      	movs	r3, #22
 800cacc:	18fb      	adds	r3, r7, r3
 800cace:	2200      	movs	r2, #0
 800cad0:	701a      	strb	r2, [r3, #0]
            break;
 800cad2:	46c0      	nop			@ (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cad4:	2116      	movs	r1, #22
 800cad6:	187b      	adds	r3, r7, r1
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d120      	bne.n	800cb20 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	23a7      	movs	r3, #167	@ 0xa7
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	5cd3      	ldrb	r3, [r2, r3]
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d119      	bne.n	800cb20 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800caec:	187b      	adds	r3, r7, r1
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	32ae      	adds	r2, #174	@ 0xae
 800caf4:	0092      	lsls	r2, r2, #2
 800caf6:	58d3      	ldr	r3, [r2, r3]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d010      	beq.n	800cb20 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 800cafe:	0008      	movs	r0, r1
 800cb00:	187b      	adds	r3, r7, r1
 800cb02:	7819      	ldrb	r1, [r3, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	23b5      	movs	r3, #181	@ 0xb5
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cb0c:	183b      	adds	r3, r7, r0
 800cb0e:	781a      	ldrb	r2, [r3, #0]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	32ae      	adds	r2, #174	@ 0xae
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	58d3      	ldr	r3, [r2, r3]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	0010      	movs	r0, r2
 800cb1e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	0018      	movs	r0, r3
 800cb24:	f001 fa8e 	bl	800e044 <USBD_CtlSendStatus>
 800cb28:	e046      	b.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cb2a:	260b      	movs	r6, #11
 800cb2c:	19bb      	adds	r3, r7, r6
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	227f      	movs	r2, #127	@ 0x7f
 800cb32:	4013      	ands	r3, r2
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	2516      	movs	r5, #22
 800cb38:	197c      	adds	r4, r7, r5
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	0011      	movs	r1, r2
 800cb3e:	0018      	movs	r0, r3
 800cb40:	f000 f9ef 	bl	800cf22 <USBD_CoreFindEP>
 800cb44:	0003      	movs	r3, r0
 800cb46:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb48:	0029      	movs	r1, r5
 800cb4a:	187b      	adds	r3, r7, r1
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2bff      	cmp	r3, #255	@ 0xff
 800cb50:	d032      	beq.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
 800cb52:	187b      	adds	r3, r7, r1
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d12e      	bne.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	23a7      	movs	r3, #167	@ 0xa7
 800cb5e:	009b      	lsls	r3, r3, #2
 800cb60:	5cd3      	ldrb	r3, [r2, r3]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	d11f      	bne.n	800cba8 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb68:	187b      	adds	r3, r7, r1
 800cb6a:	781a      	ldrb	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	32ae      	adds	r2, #174	@ 0xae
 800cb70:	0092      	lsls	r2, r2, #2
 800cb72:	58d3      	ldr	r3, [r2, r3]
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d016      	beq.n	800cba8 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 800cb7a:	0008      	movs	r0, r1
 800cb7c:	187b      	adds	r3, r7, r1
 800cb7e:	7819      	ldrb	r1, [r3, #0]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	23b5      	movs	r3, #181	@ 0xb5
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb88:	183b      	adds	r3, r7, r0
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	32ae      	adds	r2, #174	@ 0xae
 800cb90:	0092      	lsls	r2, r2, #2
 800cb92:	58d3      	ldr	r3, [r2, r3]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	2217      	movs	r2, #23
 800cb98:	18bc      	adds	r4, r7, r2
 800cb9a:	19ba      	adds	r2, r7, r6
 800cb9c:	7811      	ldrb	r1, [r2, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	0010      	movs	r0, r2
 800cba2:	4798      	blx	r3
 800cba4:	0003      	movs	r3, r0
 800cba6:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 800cba8:	2217      	movs	r2, #23
 800cbaa:	18bb      	adds	r3, r7, r2
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d002      	beq.n	800cbb8 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 800cbb2:	18bb      	adds	r3, r7, r2
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	e000      	b.n	800cbba <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	0018      	movs	r0, r3
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b007      	add	sp, #28
 800cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc2:	46c0      	nop			@ (mov r8, r8)
 800cbc4:	000002aa 	.word	0x000002aa
 800cbc8:	000002ae 	.word	0x000002ae

0800cbcc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	607a      	str	r2, [r7, #4]
 800cbd6:	200b      	movs	r0, #11
 800cbd8:	183b      	adds	r3, r7, r0
 800cbda:	1c0a      	adds	r2, r1, #0
 800cbdc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cbde:	183b      	adds	r3, r7, r0
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d000      	beq.n	800cbe8 <USBD_LL_DataInStage+0x1c>
 800cbe6:	e07d      	b.n	800cce4 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	3314      	adds	r3, #20
 800cbec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	23a5      	movs	r3, #165	@ 0xa5
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	58d3      	ldr	r3, [r2, r3]
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d164      	bne.n	800ccc4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d914      	bls.n	800cc30 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	689a      	ldr	r2, [r3, #8]
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	1ad2      	subs	r2, r2, r3
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	0018      	movs	r0, r3
 800cc1e:	f001 f9cf 	bl	800dfc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	2300      	movs	r3, #0
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	f001 ff33 	bl	800ea94 <USBD_LL_PrepareReceive>
 800cc2e:	e049      	b.n	800ccc4 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	68da      	ldr	r2, [r3, #12]
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d11f      	bne.n	800cc7c <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d319      	bcc.n	800cc7c <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	68f9      	ldr	r1, [r7, #12]
 800cc4e:	23a6      	movs	r3, #166	@ 0xa6
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d211      	bcs.n	800cc7c <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	0018      	movs	r0, r3
 800cc60:	f001 f9ae 	bl	800dfc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	23a6      	movs	r3, #166	@ 0xa6
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	2300      	movs	r3, #0
 800cc72:	2200      	movs	r2, #0
 800cc74:	2100      	movs	r1, #0
 800cc76:	f001 ff0d 	bl	800ea94 <USBD_LL_PrepareReceive>
 800cc7a:	e023      	b.n	800ccc4 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	23a7      	movs	r3, #167	@ 0xa7
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	5cd3      	ldrb	r3, [r2, r3]
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d113      	bne.n	800ccb2 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	23ae      	movs	r3, #174	@ 0xae
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	58d3      	ldr	r3, [r2, r3]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00c      	beq.n	800ccb2 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	23b5      	movs	r3, #181	@ 0xb5
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	2100      	movs	r1, #0
 800cca0:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	23ae      	movs	r3, #174	@ 0xae
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	58d3      	ldr	r3, [r2, r3]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	0010      	movs	r0, r2
 800ccb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2180      	movs	r1, #128	@ 0x80
 800ccb6:	0018      	movs	r0, r3
 800ccb8:	f001 fe0b 	bl	800e8d2 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	f001 f9d4 	bl	800e06c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	23a8      	movs	r3, #168	@ 0xa8
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	5cd3      	ldrb	r3, [r2, r3]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d050      	beq.n	800cd72 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	0018      	movs	r0, r3
 800ccd4:	f7ff fdd9 	bl	800c88a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	23a8      	movs	r3, #168	@ 0xa8
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	2100      	movs	r1, #0
 800cce0:	54d1      	strb	r1, [r2, r3]
 800cce2:	e046      	b.n	800cd72 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cce4:	260b      	movs	r6, #11
 800cce6:	19bb      	adds	r3, r7, r6
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	2280      	movs	r2, #128	@ 0x80
 800ccec:	4252      	negs	r2, r2
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	2517      	movs	r5, #23
 800ccf4:	197c      	adds	r4, r7, r5
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	0011      	movs	r1, r2
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f000 f911 	bl	800cf22 <USBD_CoreFindEP>
 800cd00:	0003      	movs	r3, r0
 800cd02:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd04:	0029      	movs	r1, r5
 800cd06:	187b      	adds	r3, r7, r1
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2bff      	cmp	r3, #255	@ 0xff
 800cd0c:	d031      	beq.n	800cd72 <USBD_LL_DataInStage+0x1a6>
 800cd0e:	187b      	adds	r3, r7, r1
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d12d      	bne.n	800cd72 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	23a7      	movs	r3, #167	@ 0xa7
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	5cd3      	ldrb	r3, [r2, r3]
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b03      	cmp	r3, #3
 800cd22:	d126      	bne.n	800cd72 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cd24:	187b      	adds	r3, r7, r1
 800cd26:	781a      	ldrb	r2, [r3, #0]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	32ae      	adds	r2, #174	@ 0xae
 800cd2c:	0092      	lsls	r2, r2, #2
 800cd2e:	58d3      	ldr	r3, [r2, r3]
 800cd30:	695b      	ldr	r3, [r3, #20]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d01d      	beq.n	800cd72 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 800cd36:	0008      	movs	r0, r1
 800cd38:	187b      	adds	r3, r7, r1
 800cd3a:	7819      	ldrb	r1, [r3, #0]
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	23b5      	movs	r3, #181	@ 0xb5
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cd44:	183b      	adds	r3, r7, r0
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	32ae      	adds	r2, #174	@ 0xae
 800cd4c:	0092      	lsls	r2, r2, #2
 800cd4e:	58d3      	ldr	r3, [r2, r3]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	2516      	movs	r5, #22
 800cd54:	197c      	adds	r4, r7, r5
 800cd56:	19ba      	adds	r2, r7, r6
 800cd58:	7811      	ldrb	r1, [r2, #0]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	0010      	movs	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	0003      	movs	r3, r0
 800cd62:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 800cd64:	197b      	adds	r3, r7, r5
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 800cd6c:	197b      	adds	r3, r7, r5
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	e000      	b.n	800cd74 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	0018      	movs	r0, r3
 800cd76:	46bd      	mov	sp, r7
 800cd78:	b007      	add	sp, #28
 800cd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd7c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd84:	240f      	movs	r4, #15
 800cd86:	193b      	adds	r3, r7, r4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	23a7      	movs	r3, #167	@ 0xa7
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	2101      	movs	r1, #1
 800cd94:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	23a5      	movs	r3, #165	@ 0xa5
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	23a9      	movs	r3, #169	@ 0xa9
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	2100      	movs	r1, #0
 800cdae:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	23a8      	movs	r3, #168	@ 0xa8
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	23ae      	movs	r3, #174	@ 0xae
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	58d3      	ldr	r3, [r2, r3]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d016      	beq.n	800cdf4 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	23ae      	movs	r3, #174	@ 0xae
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	58d3      	ldr	r3, [r2, r3]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00f      	beq.n	800cdf4 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	23ae      	movs	r3, #174	@ 0xae
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	58d3      	ldr	r3, [r2, r3]
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	b2d9      	uxtb	r1, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	0018      	movs	r0, r3
 800cde8:	4790      	blx	r2
 800cdea:	1e03      	subs	r3, r0, #0
 800cdec:	d002      	beq.n	800cdf4 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 800cdee:	193b      	adds	r3, r7, r4
 800cdf0:	2203      	movs	r2, #3
 800cdf2:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	2340      	movs	r3, #64	@ 0x40
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f001 fd07 	bl	800e80e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	23b2      	movs	r3, #178	@ 0xb2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	2101      	movs	r1, #1
 800ce08:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	23b0      	movs	r3, #176	@ 0xb0
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	2140      	movs	r1, #64	@ 0x40
 800ce12:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	2340      	movs	r3, #64	@ 0x40
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2180      	movs	r1, #128	@ 0x80
 800ce1c:	f001 fcf7 	bl	800e80e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2240      	movs	r2, #64	@ 0x40
 800ce2a:	621a      	str	r2, [r3, #32]

  return ret;
 800ce2c:	230f      	movs	r3, #15
 800ce2e:	18fb      	adds	r3, r7, r3
 800ce30:	781b      	ldrb	r3, [r3, #0]
}
 800ce32:	0018      	movs	r0, r3
 800ce34:	46bd      	mov	sp, r7
 800ce36:	b005      	add	sp, #20
 800ce38:	bd90      	pop	{r4, r7, pc}

0800ce3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	000a      	movs	r2, r1
 800ce44:	1cfb      	adds	r3, r7, #3
 800ce46:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	1cfa      	adds	r2, r7, #3
 800ce4c:	7812      	ldrb	r2, [r2, #0]
 800ce4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	0018      	movs	r0, r3
 800ce54:	46bd      	mov	sp, r7
 800ce56:	b002      	add	sp, #8
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	23a7      	movs	r3, #167	@ 0xa7
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	5cd3      	ldrb	r3, [r2, r3]
 800ce6c:	b2d9      	uxtb	r1, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4a05      	ldr	r2, [pc, #20]	@ (800ce88 <USBD_LL_Suspend+0x2c>)
 800ce72:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	23a7      	movs	r3, #167	@ 0xa7
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	2104      	movs	r1, #4
 800ce7c:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	0018      	movs	r0, r3
 800ce82:	46bd      	mov	sp, r7
 800ce84:	b002      	add	sp, #8
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	0000029d 	.word	0x0000029d

0800ce8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	23a7      	movs	r3, #167	@ 0xa7
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	5cd3      	ldrb	r3, [r2, r3]
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b04      	cmp	r3, #4
 800cea0:	d107      	bne.n	800ceb2 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a05      	ldr	r2, [pc, #20]	@ (800cebc <USBD_LL_Resume+0x30>)
 800cea6:	5c9b      	ldrb	r3, [r3, r2]
 800cea8:	b2d9      	uxtb	r1, r3
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	23a7      	movs	r3, #167	@ 0xa7
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	0000029d 	.word	0x0000029d

0800cec0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	23a7      	movs	r3, #167	@ 0xa7
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	5cd3      	ldrb	r3, [r2, r3]
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	d114      	bne.n	800cf00 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	23ae      	movs	r3, #174	@ 0xae
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	58d3      	ldr	r3, [r2, r3]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00e      	beq.n	800cf00 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	23ae      	movs	r3, #174	@ 0xae
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	58d3      	ldr	r3, [r2, r3]
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d007      	beq.n	800cf00 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	23ae      	movs	r3, #174	@ 0xae
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	58d3      	ldr	r3, [r2, r3]
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	0010      	movs	r0, r2
 800cefe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	0018      	movs	r0, r3
 800cf04:	46bd      	mov	sp, r7
 800cf06:	b002      	add	sp, #8
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	000a      	movs	r2, r1
 800cf14:	1cfb      	adds	r3, r7, #3
 800cf16:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b002      	add	sp, #8
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	000a      	movs	r2, r1
 800cf2c:	1cfb      	adds	r3, r7, #3
 800cf2e:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cf30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cf32:	0018      	movs	r0, r3
 800cf34:	46bd      	mov	sp, r7
 800cf36:	b002      	add	sp, #8
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b086      	sub	sp, #24
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	000a      	movs	r2, r1
 800cf44:	1cfb      	adds	r3, r7, #3
 800cf46:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cf50:	2300      	movs	r3, #0
 800cf52:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	789a      	ldrb	r2, [r3, #2]
 800cf58:	78db      	ldrb	r3, [r3, #3]
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	7812      	ldrb	r2, [r2, #0]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d92a      	bls.n	800cfbe <USBD_GetEpDesc+0x84>
  {
    ptr = desc->bLength;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	001a      	movs	r2, r3
 800cf6e:	230a      	movs	r3, #10
 800cf70:	18fb      	adds	r3, r7, r3
 800cf72:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 800cf74:	e016      	b.n	800cfa4 <USBD_GetEpDesc+0x6a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cf76:	230a      	movs	r3, #10
 800cf78:	18fa      	adds	r2, r7, r3
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	0011      	movs	r1, r2
 800cf7e:	0018      	movs	r0, r3
 800cf80:	f000 f822 	bl	800cfc8 <USBD_GetNextDesc>
 800cf84:	0003      	movs	r3, r0
 800cf86:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	785b      	ldrb	r3, [r3, #1]
 800cf8c:	2b05      	cmp	r3, #5
 800cf8e:	d109      	bne.n	800cfa4 <USBD_GetEpDesc+0x6a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	789b      	ldrb	r3, [r3, #2]
 800cf98:	1cfa      	adds	r2, r7, #3
 800cf9a:	7812      	ldrb	r2, [r2, #0]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d00d      	beq.n	800cfbc <USBD_GetEpDesc+0x82>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	789a      	ldrb	r2, [r3, #2]
 800cfa8:	78db      	ldrb	r3, [r3, #3]
 800cfaa:	021b      	lsls	r3, r3, #8
 800cfac:	4313      	orrs	r3, r2
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	230a      	movs	r3, #10
 800cfb2:	18fb      	adds	r3, r7, r3
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d8dd      	bhi.n	800cf76 <USBD_GetEpDesc+0x3c>
 800cfba:	e000      	b.n	800cfbe <USBD_GetEpDesc+0x84>
          break;
 800cfbc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cfbe:	693b      	ldr	r3, [r7, #16]
}
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	b006      	add	sp, #24
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	7812      	ldrb	r2, [r2, #0]
 800cfde:	189b      	adds	r3, r3, r2
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	001a      	movs	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	189b      	adds	r3, r3, r2
 800cff0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cff2:	68fb      	ldr	r3, [r7, #12]
}
 800cff4:	0018      	movs	r0, r3
 800cff6:	46bd      	mov	sp, r7
 800cff8:	b004      	add	sp, #16
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	781a      	ldrb	r2, [r3, #0]
 800d00c:	2112      	movs	r1, #18
 800d00e:	187b      	adds	r3, r7, r1
 800d010:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	3301      	adds	r3, #1
 800d016:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	2010      	movs	r0, #16
 800d01e:	183b      	adds	r3, r7, r0
 800d020:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d022:	183b      	adds	r3, r7, r0
 800d024:	2200      	movs	r2, #0
 800d026:	5e9b      	ldrsh	r3, [r3, r2]
 800d028:	021b      	lsls	r3, r3, #8
 800d02a:	b21a      	sxth	r2, r3
 800d02c:	187b      	adds	r3, r7, r1
 800d02e:	2100      	movs	r1, #0
 800d030:	5e5b      	ldrsh	r3, [r3, r1]
 800d032:	4313      	orrs	r3, r2
 800d034:	b21a      	sxth	r2, r3
 800d036:	210e      	movs	r1, #14
 800d038:	187b      	adds	r3, r7, r1
 800d03a:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800d03c:	187b      	adds	r3, r7, r1
 800d03e:	881b      	ldrh	r3, [r3, #0]
}
 800d040:	0018      	movs	r0, r3
 800d042:	46bd      	mov	sp, r7
 800d044:	b006      	add	sp, #24
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d052:	230f      	movs	r3, #15
 800d054:	18fb      	adds	r3, r7, r3
 800d056:	2200      	movs	r2, #0
 800d058:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	001a      	movs	r2, r3
 800d060:	2360      	movs	r3, #96	@ 0x60
 800d062:	4013      	ands	r3, r2
 800d064:	2b40      	cmp	r3, #64	@ 0x40
 800d066:	d004      	beq.n	800d072 <USBD_StdDevReq+0x2a>
 800d068:	d85b      	bhi.n	800d122 <USBD_StdDevReq+0xda>
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d013      	beq.n	800d096 <USBD_StdDevReq+0x4e>
 800d06e:	2b20      	cmp	r3, #32
 800d070:	d157      	bne.n	800d122 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	23b5      	movs	r3, #181	@ 0xb5
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	58d2      	ldr	r2, [r2, r3]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	@ 0xae
 800d07e:	0092      	lsls	r2, r2, #2
 800d080:	58d3      	ldr	r3, [r2, r3]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	220f      	movs	r2, #15
 800d086:	18bc      	adds	r4, r7, r2
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	0010      	movs	r0, r2
 800d08e:	4798      	blx	r3
 800d090:	0003      	movs	r3, r0
 800d092:	7023      	strb	r3, [r4, #0]
      break;
 800d094:	e04c      	b.n	800d130 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	785b      	ldrb	r3, [r3, #1]
 800d09a:	2b09      	cmp	r3, #9
 800d09c:	d839      	bhi.n	800d112 <USBD_StdDevReq+0xca>
 800d09e:	009a      	lsls	r2, r3, #2
 800d0a0:	4b27      	ldr	r3, [pc, #156]	@ (800d140 <USBD_StdDevReq+0xf8>)
 800d0a2:	18d3      	adds	r3, r2, r3
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	0011      	movs	r1, r2
 800d0ae:	0018      	movs	r0, r3
 800d0b0:	f000 fada 	bl	800d668 <USBD_GetDescriptor>
          break;
 800d0b4:	e034      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	0011      	movs	r1, r2
 800d0bc:	0018      	movs	r0, r3
 800d0be:	f000 fcad 	bl	800da1c <USBD_SetAddress>
          break;
 800d0c2:	e02d      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d0c4:	230f      	movs	r3, #15
 800d0c6:	18fc      	adds	r4, r7, r3
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	0011      	movs	r1, r2
 800d0ce:	0018      	movs	r0, r3
 800d0d0:	f000 fcfa 	bl	800dac8 <USBD_SetConfig>
 800d0d4:	0003      	movs	r3, r0
 800d0d6:	7023      	strb	r3, [r4, #0]
          break;
 800d0d8:	e022      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	0011      	movs	r1, r2
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	f000 fdbf 	bl	800dc64 <USBD_GetConfig>
          break;
 800d0e6:	e01b      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	0011      	movs	r1, r2
 800d0ee:	0018      	movs	r0, r3
 800d0f0:	f000 fdf4 	bl	800dcdc <USBD_GetStatus>
          break;
 800d0f4:	e014      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	0011      	movs	r1, r2
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f000 fe28 	bl	800dd52 <USBD_SetFeature>
          break;
 800d102:	e00d      	b.n	800d120 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	0011      	movs	r1, r2
 800d10a:	0018      	movs	r0, r3
 800d10c:	f000 fe50 	bl	800ddb0 <USBD_ClrFeature>
          break;
 800d110:	e006      	b.n	800d120 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	0011      	movs	r1, r2
 800d118:	0018      	movs	r0, r3
 800d11a:	f000 fead 	bl	800de78 <USBD_CtlError>
          break;
 800d11e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d120:	e006      	b.n	800d130 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	0011      	movs	r1, r2
 800d128:	0018      	movs	r0, r3
 800d12a:	f000 fea5 	bl	800de78 <USBD_CtlError>
      break;
 800d12e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d130:	230f      	movs	r3, #15
 800d132:	18fb      	adds	r3, r7, r3
 800d134:	781b      	ldrb	r3, [r3, #0]
}
 800d136:	0018      	movs	r0, r3
 800d138:	46bd      	mov	sp, r7
 800d13a:	b005      	add	sp, #20
 800d13c:	bd90      	pop	{r4, r7, pc}
 800d13e:	46c0      	nop			@ (mov r8, r8)
 800d140:	08013128 	.word	0x08013128

0800d144 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d144:	b5b0      	push	{r4, r5, r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d14e:	230f      	movs	r3, #15
 800d150:	18fb      	adds	r3, r7, r3
 800d152:	2200      	movs	r2, #0
 800d154:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	001a      	movs	r2, r3
 800d15c:	2360      	movs	r3, #96	@ 0x60
 800d15e:	4013      	ands	r3, r2
 800d160:	2b40      	cmp	r3, #64	@ 0x40
 800d162:	d005      	beq.n	800d170 <USBD_StdItfReq+0x2c>
 800d164:	d900      	bls.n	800d168 <USBD_StdItfReq+0x24>
 800d166:	e06c      	b.n	800d242 <USBD_StdItfReq+0xfe>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <USBD_StdItfReq+0x2c>
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	d168      	bne.n	800d242 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	23a7      	movs	r3, #167	@ 0xa7
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	5cd3      	ldrb	r3, [r2, r3]
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	3b01      	subs	r3, #1
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d857      	bhi.n	800d230 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	889b      	ldrh	r3, [r3, #4]
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b01      	cmp	r3, #1
 800d188:	d84b      	bhi.n	800d222 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	889b      	ldrh	r3, [r3, #4]
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	250e      	movs	r5, #14
 800d192:	197c      	adds	r4, r7, r5
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	0011      	movs	r1, r2
 800d198:	0018      	movs	r0, r3
 800d19a:	f7ff feb6 	bl	800cf0a <USBD_CoreFindIF>
 800d19e:	0003      	movs	r3, r0
 800d1a0:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1a2:	0029      	movs	r1, r5
 800d1a4:	187b      	adds	r3, r7, r1
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2bff      	cmp	r3, #255	@ 0xff
 800d1aa:	d028      	beq.n	800d1fe <USBD_StdItfReq+0xba>
 800d1ac:	187b      	adds	r3, r7, r1
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d124      	bne.n	800d1fe <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d1b4:	187b      	adds	r3, r7, r1
 800d1b6:	781a      	ldrb	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	32ae      	adds	r2, #174	@ 0xae
 800d1bc:	0092      	lsls	r2, r2, #2
 800d1be:	58d3      	ldr	r3, [r2, r3]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d016      	beq.n	800d1f4 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 800d1c6:	0008      	movs	r0, r1
 800d1c8:	187b      	adds	r3, r7, r1
 800d1ca:	7819      	ldrb	r1, [r3, #0]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	23b5      	movs	r3, #181	@ 0xb5
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1d4:	183b      	adds	r3, r7, r0
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	32ae      	adds	r2, #174	@ 0xae
 800d1dc:	0092      	lsls	r2, r2, #2
 800d1de:	58d3      	ldr	r3, [r2, r3]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	220f      	movs	r2, #15
 800d1e4:	18bc      	adds	r4, r7, r2
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	0010      	movs	r0, r2
 800d1ec:	4798      	blx	r3
 800d1ee:	0003      	movs	r3, r0
 800d1f0:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1f2:	e008      	b.n	800d206 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d1f4:	230f      	movs	r3, #15
 800d1f6:	18fb      	adds	r3, r7, r3
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 800d1fc:	e003      	b.n	800d206 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d1fe:	230f      	movs	r3, #15
 800d200:	18fb      	adds	r3, r7, r3
 800d202:	2203      	movs	r2, #3
 800d204:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	88db      	ldrh	r3, [r3, #6]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d117      	bne.n	800d23e <USBD_StdItfReq+0xfa>
 800d20e:	230f      	movs	r3, #15
 800d210:	18fb      	adds	r3, r7, r3
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d112      	bne.n	800d23e <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	0018      	movs	r0, r3
 800d21c:	f000 ff12 	bl	800e044 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d220:	e00d      	b.n	800d23e <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	0011      	movs	r1, r2
 800d228:	0018      	movs	r0, r3
 800d22a:	f000 fe25 	bl	800de78 <USBD_CtlError>
          break;
 800d22e:	e006      	b.n	800d23e <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	0011      	movs	r1, r2
 800d236:	0018      	movs	r0, r3
 800d238:	f000 fe1e 	bl	800de78 <USBD_CtlError>
          break;
 800d23c:	e000      	b.n	800d240 <USBD_StdItfReq+0xfc>
          break;
 800d23e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d240:	e006      	b.n	800d250 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	0011      	movs	r1, r2
 800d248:	0018      	movs	r0, r3
 800d24a:	f000 fe15 	bl	800de78 <USBD_CtlError>
      break;
 800d24e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d250:	230f      	movs	r3, #15
 800d252:	18fb      	adds	r3, r7, r3
 800d254:	781b      	ldrb	r3, [r3, #0]
}
 800d256:	0018      	movs	r0, r3
 800d258:	46bd      	mov	sp, r7
 800d25a:	b004      	add	sp, #16
 800d25c:	bdb0      	pop	{r4, r5, r7, pc}

0800d25e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25e:	b5b0      	push	{r4, r5, r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d268:	230f      	movs	r3, #15
 800d26a:	18fb      	adds	r3, r7, r3
 800d26c:	2200      	movs	r2, #0
 800d26e:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	889a      	ldrh	r2, [r3, #4]
 800d274:	230e      	movs	r3, #14
 800d276:	18fb      	adds	r3, r7, r3
 800d278:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	001a      	movs	r2, r3
 800d280:	2360      	movs	r3, #96	@ 0x60
 800d282:	4013      	ands	r3, r2
 800d284:	2b40      	cmp	r3, #64	@ 0x40
 800d286:	d006      	beq.n	800d296 <USBD_StdEPReq+0x38>
 800d288:	d900      	bls.n	800d28c <USBD_StdEPReq+0x2e>
 800d28a:	e1de      	b.n	800d64a <USBD_StdEPReq+0x3ec>
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d039      	beq.n	800d304 <USBD_StdEPReq+0xa6>
 800d290:	2b20      	cmp	r3, #32
 800d292:	d000      	beq.n	800d296 <USBD_StdEPReq+0x38>
 800d294:	e1d9      	b.n	800d64a <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d296:	250d      	movs	r5, #13
 800d298:	197c      	adds	r4, r7, r5
 800d29a:	230e      	movs	r3, #14
 800d29c:	18fb      	adds	r3, r7, r3
 800d29e:	781a      	ldrb	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	0011      	movs	r1, r2
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f7ff fe3c 	bl	800cf22 <USBD_CoreFindEP>
 800d2aa:	0003      	movs	r3, r0
 800d2ac:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ae:	197b      	adds	r3, r7, r5
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2bff      	cmp	r3, #255	@ 0xff
 800d2b4:	d100      	bne.n	800d2b8 <USBD_StdEPReq+0x5a>
 800d2b6:	e1cf      	b.n	800d658 <USBD_StdEPReq+0x3fa>
 800d2b8:	197b      	adds	r3, r7, r5
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d000      	beq.n	800d2c2 <USBD_StdEPReq+0x64>
 800d2c0:	e1ca      	b.n	800d658 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 800d2c2:	197b      	adds	r3, r7, r5
 800d2c4:	7819      	ldrb	r1, [r3, #0]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	23b5      	movs	r3, #181	@ 0xb5
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d2ce:	0029      	movs	r1, r5
 800d2d0:	187b      	adds	r3, r7, r1
 800d2d2:	781a      	ldrb	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	32ae      	adds	r2, #174	@ 0xae
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	58d3      	ldr	r3, [r2, r3]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d100      	bne.n	800d2e4 <USBD_StdEPReq+0x86>
 800d2e2:	e1b9      	b.n	800d658 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d2e4:	187b      	adds	r3, r7, r1
 800d2e6:	781a      	ldrb	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	32ae      	adds	r2, #174	@ 0xae
 800d2ec:	0092      	lsls	r2, r2, #2
 800d2ee:	58d3      	ldr	r3, [r2, r3]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	220f      	movs	r2, #15
 800d2f4:	18bc      	adds	r4, r7, r2
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	0010      	movs	r0, r2
 800d2fc:	4798      	blx	r3
 800d2fe:	0003      	movs	r3, r0
 800d300:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 800d302:	e1a9      	b.n	800d658 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	2b03      	cmp	r3, #3
 800d30a:	d007      	beq.n	800d31c <USBD_StdEPReq+0xbe>
 800d30c:	dd00      	ble.n	800d310 <USBD_StdEPReq+0xb2>
 800d30e:	e194      	b.n	800d63a <USBD_StdEPReq+0x3dc>
 800d310:	2b00      	cmp	r3, #0
 800d312:	d100      	bne.n	800d316 <USBD_StdEPReq+0xb8>
 800d314:	e0c9      	b.n	800d4aa <USBD_StdEPReq+0x24c>
 800d316:	2b01      	cmp	r3, #1
 800d318:	d04d      	beq.n	800d3b6 <USBD_StdEPReq+0x158>
 800d31a:	e18e      	b.n	800d63a <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	23a7      	movs	r3, #167	@ 0xa7
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	5cd3      	ldrb	r3, [r2, r3]
 800d324:	b2db      	uxtb	r3, r3
 800d326:	2b02      	cmp	r3, #2
 800d328:	d002      	beq.n	800d330 <USBD_StdEPReq+0xd2>
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d01e      	beq.n	800d36c <USBD_StdEPReq+0x10e>
 800d32e:	e03a      	b.n	800d3a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d330:	220e      	movs	r2, #14
 800d332:	18bb      	adds	r3, r7, r2
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d011      	beq.n	800d35e <USBD_StdEPReq+0x100>
 800d33a:	18bb      	adds	r3, r7, r2
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b80      	cmp	r3, #128	@ 0x80
 800d340:	d00d      	beq.n	800d35e <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d342:	18bb      	adds	r3, r7, r2
 800d344:	781a      	ldrb	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	0011      	movs	r1, r2
 800d34a:	0018      	movs	r0, r3
 800d34c:	f001 fac1 	bl	800e8d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2180      	movs	r1, #128	@ 0x80
 800d354:	0018      	movs	r0, r3
 800d356:	f001 fabc 	bl	800e8d2 <USBD_LL_StallEP>
 800d35a:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d35c:	e02a      	b.n	800d3b4 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	0011      	movs	r1, r2
 800d364:	0018      	movs	r0, r3
 800d366:	f000 fd87 	bl	800de78 <USBD_CtlError>
              break;
 800d36a:	e023      	b.n	800d3b4 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	885b      	ldrh	r3, [r3, #2]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d113      	bne.n	800d39c <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d374:	220e      	movs	r2, #14
 800d376:	18bb      	adds	r3, r7, r2
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00e      	beq.n	800d39c <USBD_StdEPReq+0x13e>
 800d37e:	18bb      	adds	r3, r7, r2
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b80      	cmp	r3, #128	@ 0x80
 800d384:	d00a      	beq.n	800d39c <USBD_StdEPReq+0x13e>
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	88db      	ldrh	r3, [r3, #6]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d106      	bne.n	800d39c <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d38e:	18bb      	adds	r3, r7, r2
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	0011      	movs	r1, r2
 800d396:	0018      	movs	r0, r3
 800d398:	f001 fa9b 	bl	800e8d2 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	0018      	movs	r0, r3
 800d3a0:	f000 fe50 	bl	800e044 <USBD_CtlSendStatus>

              break;
 800d3a4:	e006      	b.n	800d3b4 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	0011      	movs	r1, r2
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f000 fd63 	bl	800de78 <USBD_CtlError>
              break;
 800d3b2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d3b4:	e148      	b.n	800d648 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	23a7      	movs	r3, #167	@ 0xa7
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	5cd3      	ldrb	r3, [r2, r3]
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d002      	beq.n	800d3ca <USBD_StdEPReq+0x16c>
 800d3c4:	2b03      	cmp	r3, #3
 800d3c6:	d01e      	beq.n	800d406 <USBD_StdEPReq+0x1a8>
 800d3c8:	e066      	b.n	800d498 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3ca:	220e      	movs	r2, #14
 800d3cc:	18bb      	adds	r3, r7, r2
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d011      	beq.n	800d3f8 <USBD_StdEPReq+0x19a>
 800d3d4:	18bb      	adds	r3, r7, r2
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b80      	cmp	r3, #128	@ 0x80
 800d3da:	d00d      	beq.n	800d3f8 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3dc:	18bb      	adds	r3, r7, r2
 800d3de:	781a      	ldrb	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	0011      	movs	r1, r2
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	f001 fa74 	bl	800e8d2 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2180      	movs	r1, #128	@ 0x80
 800d3ee:	0018      	movs	r0, r3
 800d3f0:	f001 fa6f 	bl	800e8d2 <USBD_LL_StallEP>
 800d3f4:	46c0      	nop			@ (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3f6:	e057      	b.n	800d4a8 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 800d3f8:	683a      	ldr	r2, [r7, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	0011      	movs	r1, r2
 800d3fe:	0018      	movs	r0, r3
 800d400:	f000 fd3a 	bl	800de78 <USBD_CtlError>
              break;
 800d404:	e050      	b.n	800d4a8 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	885b      	ldrh	r3, [r3, #2]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d14b      	bne.n	800d4a6 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d40e:	210e      	movs	r1, #14
 800d410:	187b      	adds	r3, r7, r1
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	227f      	movs	r2, #127	@ 0x7f
 800d416:	4013      	ands	r3, r2
 800d418:	d006      	beq.n	800d428 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d41a:	187b      	adds	r3, r7, r1
 800d41c:	781a      	ldrb	r2, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	0011      	movs	r1, r2
 800d422:	0018      	movs	r0, r3
 800d424:	f001 fa80 	bl	800e928 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	0018      	movs	r0, r3
 800d42c:	f000 fe0a 	bl	800e044 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d430:	250d      	movs	r5, #13
 800d432:	197c      	adds	r4, r7, r5
 800d434:	230e      	movs	r3, #14
 800d436:	18fb      	adds	r3, r7, r3
 800d438:	781a      	ldrb	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	0011      	movs	r1, r2
 800d43e:	0018      	movs	r0, r3
 800d440:	f7ff fd6f 	bl	800cf22 <USBD_CoreFindEP>
 800d444:	0003      	movs	r3, r0
 800d446:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d448:	197b      	adds	r3, r7, r5
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2bff      	cmp	r3, #255	@ 0xff
 800d44e:	d02a      	beq.n	800d4a6 <USBD_StdEPReq+0x248>
 800d450:	197b      	adds	r3, r7, r5
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d126      	bne.n	800d4a6 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 800d458:	197b      	adds	r3, r7, r5
 800d45a:	7819      	ldrb	r1, [r3, #0]
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	23b5      	movs	r3, #181	@ 0xb5
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d464:	0029      	movs	r1, r5
 800d466:	187b      	adds	r3, r7, r1
 800d468:	781a      	ldrb	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	32ae      	adds	r2, #174	@ 0xae
 800d46e:	0092      	lsls	r2, r2, #2
 800d470:	58d3      	ldr	r3, [r2, r3]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d016      	beq.n	800d4a6 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d478:	187b      	adds	r3, r7, r1
 800d47a:	781a      	ldrb	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	32ae      	adds	r2, #174	@ 0xae
 800d480:	0092      	lsls	r2, r2, #2
 800d482:	58d3      	ldr	r3, [r2, r3]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	220f      	movs	r2, #15
 800d488:	18bc      	adds	r4, r7, r2
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	0010      	movs	r0, r2
 800d490:	4798      	blx	r3
 800d492:	0003      	movs	r3, r0
 800d494:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 800d496:	e006      	b.n	800d4a6 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	0011      	movs	r1, r2
 800d49e:	0018      	movs	r0, r3
 800d4a0:	f000 fcea 	bl	800de78 <USBD_CtlError>
              break;
 800d4a4:	e000      	b.n	800d4a8 <USBD_StdEPReq+0x24a>
              break;
 800d4a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d4a8:	e0ce      	b.n	800d648 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	23a7      	movs	r3, #167	@ 0xa7
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	5cd3      	ldrb	r3, [r2, r3]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	d002      	beq.n	800d4be <USBD_StdEPReq+0x260>
 800d4b8:	2b03      	cmp	r3, #3
 800d4ba:	d03c      	beq.n	800d536 <USBD_StdEPReq+0x2d8>
 800d4bc:	e0b5      	b.n	800d62a <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4be:	220e      	movs	r2, #14
 800d4c0:	18bb      	adds	r3, r7, r2
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00a      	beq.n	800d4de <USBD_StdEPReq+0x280>
 800d4c8:	18bb      	adds	r3, r7, r2
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b80      	cmp	r3, #128	@ 0x80
 800d4ce:	d006      	beq.n	800d4de <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	0011      	movs	r1, r2
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f000 fcce 	bl	800de78 <USBD_CtlError>
                break;
 800d4dc:	e0ac      	b.n	800d638 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4de:	220e      	movs	r2, #14
 800d4e0:	18bb      	adds	r3, r7, r2
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	b25b      	sxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	da0c      	bge.n	800d504 <USBD_StdEPReq+0x2a6>
 800d4ea:	18bb      	adds	r3, r7, r2
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	227f      	movs	r2, #127	@ 0x7f
 800d4f0:	401a      	ands	r2, r3
 800d4f2:	0013      	movs	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	189b      	adds	r3, r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	3310      	adds	r3, #16
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	18d3      	adds	r3, r2, r3
 800d500:	3304      	adds	r3, #4
 800d502:	e00d      	b.n	800d520 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d504:	230e      	movs	r3, #14
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	227f      	movs	r2, #127	@ 0x7f
 800d50c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d50e:	0013      	movs	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	189b      	adds	r3, r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	3351      	adds	r3, #81	@ 0x51
 800d518:	33ff      	adds	r3, #255	@ 0xff
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	18d3      	adds	r3, r2, r3
 800d51e:	3304      	adds	r3, #4
 800d520:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2200      	movs	r2, #0
 800d526:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2202      	movs	r2, #2
 800d52e:	0018      	movs	r0, r3
 800d530:	f000 fd2a 	bl	800df88 <USBD_CtlSendData>
              break;
 800d534:	e080      	b.n	800d638 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d536:	220e      	movs	r2, #14
 800d538:	18bb      	adds	r3, r7, r2
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b25b      	sxtb	r3, r3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da14      	bge.n	800d56c <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d542:	18bb      	adds	r3, r7, r2
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	220f      	movs	r2, #15
 800d548:	401a      	ands	r2, r3
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	0013      	movs	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	189b      	adds	r3, r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	18cb      	adds	r3, r1, r3
 800d556:	3324      	adds	r3, #36	@ 0x24
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d11e      	bne.n	800d59c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	0011      	movs	r1, r2
 800d564:	0018      	movs	r0, r3
 800d566:	f000 fc87 	bl	800de78 <USBD_CtlError>
                  break;
 800d56a:	e065      	b.n	800d638 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d56c:	230e      	movs	r3, #14
 800d56e:	18fb      	adds	r3, r7, r3
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	220f      	movs	r2, #15
 800d574:	401a      	ands	r2, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	23b2      	movs	r3, #178	@ 0xb2
 800d57a:	0059      	lsls	r1, r3, #1
 800d57c:	0013      	movs	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	189b      	adds	r3, r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	18c3      	adds	r3, r0, r3
 800d586:	185b      	adds	r3, r3, r1
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d106      	bne.n	800d59c <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	0011      	movs	r1, r2
 800d594:	0018      	movs	r0, r3
 800d596:	f000 fc6f 	bl	800de78 <USBD_CtlError>
                  break;
 800d59a:	e04d      	b.n	800d638 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d59c:	220e      	movs	r2, #14
 800d59e:	18bb      	adds	r3, r7, r2
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	b25b      	sxtb	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	da0c      	bge.n	800d5c2 <USBD_StdEPReq+0x364>
 800d5a8:	18bb      	adds	r3, r7, r2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	227f      	movs	r2, #127	@ 0x7f
 800d5ae:	401a      	ands	r2, r3
 800d5b0:	0013      	movs	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	189b      	adds	r3, r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	3310      	adds	r3, #16
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	18d3      	adds	r3, r2, r3
 800d5be:	3304      	adds	r3, #4
 800d5c0:	e00d      	b.n	800d5de <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5c2:	230e      	movs	r3, #14
 800d5c4:	18fb      	adds	r3, r7, r3
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	227f      	movs	r2, #127	@ 0x7f
 800d5ca:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5cc:	0013      	movs	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	189b      	adds	r3, r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	3351      	adds	r3, #81	@ 0x51
 800d5d6:	33ff      	adds	r3, #255	@ 0xff
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	18d3      	adds	r3, r2, r3
 800d5dc:	3304      	adds	r3, #4
 800d5de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d5e0:	220e      	movs	r2, #14
 800d5e2:	18bb      	adds	r3, r7, r2
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <USBD_StdEPReq+0x394>
 800d5ea:	18bb      	adds	r3, r7, r2
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b80      	cmp	r3, #128	@ 0x80
 800d5f0:	d103      	bne.n	800d5fa <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	601a      	str	r2, [r3, #0]
 800d5f8:	e010      	b.n	800d61c <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d5fa:	230e      	movs	r3, #14
 800d5fc:	18fb      	adds	r3, r7, r3
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	0011      	movs	r1, r2
 800d604:	0018      	movs	r0, r3
 800d606:	f001 f9ba 	bl	800e97e <USBD_LL_IsStallEP>
 800d60a:	1e03      	subs	r3, r0, #0
 800d60c:	d003      	beq.n	800d616 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2201      	movs	r2, #1
 800d612:	601a      	str	r2, [r3, #0]
 800d614:	e002      	b.n	800d61c <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d61c:	68b9      	ldr	r1, [r7, #8]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2202      	movs	r2, #2
 800d622:	0018      	movs	r0, r3
 800d624:	f000 fcb0 	bl	800df88 <USBD_CtlSendData>
              break;
 800d628:	e006      	b.n	800d638 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	0011      	movs	r1, r2
 800d630:	0018      	movs	r0, r3
 800d632:	f000 fc21 	bl	800de78 <USBD_CtlError>
              break;
 800d636:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d638:	e006      	b.n	800d648 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	0011      	movs	r1, r2
 800d640:	0018      	movs	r0, r3
 800d642:	f000 fc19 	bl	800de78 <USBD_CtlError>
          break;
 800d646:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d648:	e007      	b.n	800d65a <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	0011      	movs	r1, r2
 800d650:	0018      	movs	r0, r3
 800d652:	f000 fc11 	bl	800de78 <USBD_CtlError>
      break;
 800d656:	e000      	b.n	800d65a <USBD_StdEPReq+0x3fc>
      break;
 800d658:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d65a:	230f      	movs	r3, #15
 800d65c:	18fb      	adds	r3, r7, r3
 800d65e:	781b      	ldrb	r3, [r3, #0]
}
 800d660:	0018      	movs	r0, r3
 800d662:	46bd      	mov	sp, r7
 800d664:	b004      	add	sp, #16
 800d666:	bdb0      	pop	{r4, r5, r7, pc}

0800d668 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d672:	2308      	movs	r3, #8
 800d674:	18fb      	adds	r3, r7, r3
 800d676:	2200      	movs	r2, #0
 800d678:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d67e:	230b      	movs	r3, #11
 800d680:	18fb      	adds	r3, r7, r3
 800d682:	2200      	movs	r2, #0
 800d684:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	885b      	ldrh	r3, [r3, #2]
 800d68a:	0a1b      	lsrs	r3, r3, #8
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	2b0f      	cmp	r3, #15
 800d690:	d900      	bls.n	800d694 <USBD_GetDescriptor+0x2c>
 800d692:	e17b      	b.n	800d98c <USBD_GetDescriptor+0x324>
 800d694:	009a      	lsls	r2, r3, #2
 800d696:	4bdd      	ldr	r3, [pc, #884]	@ (800da0c <USBD_GetDescriptor+0x3a4>)
 800d698:	18d3      	adds	r3, r2, r3
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	23ad      	movs	r3, #173	@ 0xad
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	58d3      	ldr	r3, [r2, r3]
 800d6a6:	69db      	ldr	r3, [r3, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00d      	beq.n	800d6c8 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	23ad      	movs	r3, #173	@ 0xad
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	58d3      	ldr	r3, [r2, r3]
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	7c12      	ldrb	r2, [r2, #16]
 800d6ba:	2108      	movs	r1, #8
 800d6bc:	1879      	adds	r1, r7, r1
 800d6be:	0010      	movs	r0, r2
 800d6c0:	4798      	blx	r3
 800d6c2:	0003      	movs	r3, r0
 800d6c4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6c6:	e16e      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	0011      	movs	r1, r2
 800d6ce:	0018      	movs	r0, r3
 800d6d0:	f000 fbd2 	bl	800de78 <USBD_CtlError>
        err++;
 800d6d4:	210b      	movs	r1, #11
 800d6d6:	187b      	adds	r3, r7, r1
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	187b      	adds	r3, r7, r1
 800d6dc:	3201      	adds	r2, #1
 800d6de:	701a      	strb	r2, [r3, #0]
      break;
 800d6e0:	e161      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	23ad      	movs	r3, #173	@ 0xad
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	58d3      	ldr	r3, [r2, r3]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	7c12      	ldrb	r2, [r2, #16]
 800d6f0:	2108      	movs	r1, #8
 800d6f2:	1879      	adds	r1, r7, r1
 800d6f4:	0010      	movs	r0, r2
 800d6f6:	4798      	blx	r3
 800d6f8:	0003      	movs	r3, r0
 800d6fa:	60fb      	str	r3, [r7, #12]
      break;
 800d6fc:	e153      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	7c1b      	ldrb	r3, [r3, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10f      	bne.n	800d726 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	23ae      	movs	r3, #174	@ 0xae
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	58d3      	ldr	r3, [r2, r3]
 800d70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d710:	2208      	movs	r2, #8
 800d712:	18ba      	adds	r2, r7, r2
 800d714:	0010      	movs	r0, r2
 800d716:	4798      	blx	r3
 800d718:	0003      	movs	r3, r0
 800d71a:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	2202      	movs	r2, #2
 800d722:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d724:	e13f      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	23ae      	movs	r3, #174	@ 0xae
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	58d3      	ldr	r3, [r2, r3]
 800d72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d730:	2208      	movs	r2, #8
 800d732:	18ba      	adds	r2, r7, r2
 800d734:	0010      	movs	r0, r2
 800d736:	4798      	blx	r3
 800d738:	0003      	movs	r3, r0
 800d73a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3301      	adds	r3, #1
 800d740:	2202      	movs	r2, #2
 800d742:	701a      	strb	r2, [r3, #0]
      break;
 800d744:	e12f      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	885b      	ldrh	r3, [r3, #2]
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	2b05      	cmp	r3, #5
 800d74e:	d900      	bls.n	800d752 <USBD_GetDescriptor+0xea>
 800d750:	e0d0      	b.n	800d8f4 <USBD_GetDescriptor+0x28c>
 800d752:	009a      	lsls	r2, r3, #2
 800d754:	4bae      	ldr	r3, [pc, #696]	@ (800da10 <USBD_GetDescriptor+0x3a8>)
 800d756:	18d3      	adds	r3, r2, r3
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	23ad      	movs	r3, #173	@ 0xad
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	58d3      	ldr	r3, [r2, r3]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00d      	beq.n	800d786 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	23ad      	movs	r3, #173	@ 0xad
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	58d3      	ldr	r3, [r2, r3]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	7c12      	ldrb	r2, [r2, #16]
 800d778:	2108      	movs	r1, #8
 800d77a:	1879      	adds	r1, r7, r1
 800d77c:	0010      	movs	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	0003      	movs	r3, r0
 800d782:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d784:	e0c3      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	0011      	movs	r1, r2
 800d78c:	0018      	movs	r0, r3
 800d78e:	f000 fb73 	bl	800de78 <USBD_CtlError>
            err++;
 800d792:	210b      	movs	r1, #11
 800d794:	187b      	adds	r3, r7, r1
 800d796:	781a      	ldrb	r2, [r3, #0]
 800d798:	187b      	adds	r3, r7, r1
 800d79a:	3201      	adds	r2, #1
 800d79c:	701a      	strb	r2, [r3, #0]
          break;
 800d79e:	e0b6      	b.n	800d90e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	23ad      	movs	r3, #173	@ 0xad
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	58d3      	ldr	r3, [r2, r3]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00d      	beq.n	800d7ca <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	23ad      	movs	r3, #173	@ 0xad
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	58d3      	ldr	r3, [r2, r3]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	7c12      	ldrb	r2, [r2, #16]
 800d7bc:	2108      	movs	r1, #8
 800d7be:	1879      	adds	r1, r7, r1
 800d7c0:	0010      	movs	r0, r2
 800d7c2:	4798      	blx	r3
 800d7c4:	0003      	movs	r3, r0
 800d7c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7c8:	e0a1      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d7ca:	683a      	ldr	r2, [r7, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	0011      	movs	r1, r2
 800d7d0:	0018      	movs	r0, r3
 800d7d2:	f000 fb51 	bl	800de78 <USBD_CtlError>
            err++;
 800d7d6:	210b      	movs	r1, #11
 800d7d8:	187b      	adds	r3, r7, r1
 800d7da:	781a      	ldrb	r2, [r3, #0]
 800d7dc:	187b      	adds	r3, r7, r1
 800d7de:	3201      	adds	r2, #1
 800d7e0:	701a      	strb	r2, [r3, #0]
          break;
 800d7e2:	e094      	b.n	800d90e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	23ad      	movs	r3, #173	@ 0xad
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	58d3      	ldr	r3, [r2, r3]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00d      	beq.n	800d80e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	23ad      	movs	r3, #173	@ 0xad
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	58d3      	ldr	r3, [r2, r3]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	7c12      	ldrb	r2, [r2, #16]
 800d800:	2108      	movs	r1, #8
 800d802:	1879      	adds	r1, r7, r1
 800d804:	0010      	movs	r0, r2
 800d806:	4798      	blx	r3
 800d808:	0003      	movs	r3, r0
 800d80a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d80c:	e07f      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	0011      	movs	r1, r2
 800d814:	0018      	movs	r0, r3
 800d816:	f000 fb2f 	bl	800de78 <USBD_CtlError>
            err++;
 800d81a:	210b      	movs	r1, #11
 800d81c:	187b      	adds	r3, r7, r1
 800d81e:	781a      	ldrb	r2, [r3, #0]
 800d820:	187b      	adds	r3, r7, r1
 800d822:	3201      	adds	r2, #1
 800d824:	701a      	strb	r2, [r3, #0]
          break;
 800d826:	e072      	b.n	800d90e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	23ad      	movs	r3, #173	@ 0xad
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	58d3      	ldr	r3, [r2, r3]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00d      	beq.n	800d852 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	23ad      	movs	r3, #173	@ 0xad
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	58d3      	ldr	r3, [r2, r3]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	7c12      	ldrb	r2, [r2, #16]
 800d844:	2108      	movs	r1, #8
 800d846:	1879      	adds	r1, r7, r1
 800d848:	0010      	movs	r0, r2
 800d84a:	4798      	blx	r3
 800d84c:	0003      	movs	r3, r0
 800d84e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d850:	e05d      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	0011      	movs	r1, r2
 800d858:	0018      	movs	r0, r3
 800d85a:	f000 fb0d 	bl	800de78 <USBD_CtlError>
            err++;
 800d85e:	210b      	movs	r1, #11
 800d860:	187b      	adds	r3, r7, r1
 800d862:	781a      	ldrb	r2, [r3, #0]
 800d864:	187b      	adds	r3, r7, r1
 800d866:	3201      	adds	r2, #1
 800d868:	701a      	strb	r2, [r3, #0]
          break;
 800d86a:	e050      	b.n	800d90e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	23ad      	movs	r3, #173	@ 0xad
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	58d3      	ldr	r3, [r2, r3]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00d      	beq.n	800d896 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	23ad      	movs	r3, #173	@ 0xad
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	58d3      	ldr	r3, [r2, r3]
 800d882:	695b      	ldr	r3, [r3, #20]
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	7c12      	ldrb	r2, [r2, #16]
 800d888:	2108      	movs	r1, #8
 800d88a:	1879      	adds	r1, r7, r1
 800d88c:	0010      	movs	r0, r2
 800d88e:	4798      	blx	r3
 800d890:	0003      	movs	r3, r0
 800d892:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d894:	e03b      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	0011      	movs	r1, r2
 800d89c:	0018      	movs	r0, r3
 800d89e:	f000 faeb 	bl	800de78 <USBD_CtlError>
            err++;
 800d8a2:	210b      	movs	r1, #11
 800d8a4:	187b      	adds	r3, r7, r1
 800d8a6:	781a      	ldrb	r2, [r3, #0]
 800d8a8:	187b      	adds	r3, r7, r1
 800d8aa:	3201      	adds	r2, #1
 800d8ac:	701a      	strb	r2, [r3, #0]
          break;
 800d8ae:	e02e      	b.n	800d90e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	23ad      	movs	r3, #173	@ 0xad
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	58d3      	ldr	r3, [r2, r3]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00d      	beq.n	800d8da <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	23ad      	movs	r3, #173	@ 0xad
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	58d3      	ldr	r3, [r2, r3]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	7c12      	ldrb	r2, [r2, #16]
 800d8cc:	2108      	movs	r1, #8
 800d8ce:	1879      	adds	r1, r7, r1
 800d8d0:	0010      	movs	r0, r2
 800d8d2:	4798      	blx	r3
 800d8d4:	0003      	movs	r3, r0
 800d8d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8d8:	e019      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	0011      	movs	r1, r2
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	f000 fac9 	bl	800de78 <USBD_CtlError>
            err++;
 800d8e6:	210b      	movs	r1, #11
 800d8e8:	187b      	adds	r3, r7, r1
 800d8ea:	781a      	ldrb	r2, [r3, #0]
 800d8ec:	187b      	adds	r3, r7, r1
 800d8ee:	3201      	adds	r2, #1
 800d8f0:	701a      	strb	r2, [r3, #0]
          break;
 800d8f2:	e00c      	b.n	800d90e <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	0011      	movs	r1, r2
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f000 fabc 	bl	800de78 <USBD_CtlError>
          err++;
 800d900:	210b      	movs	r1, #11
 800d902:	187b      	adds	r3, r7, r1
 800d904:	781a      	ldrb	r2, [r3, #0]
 800d906:	187b      	adds	r3, r7, r1
 800d908:	3201      	adds	r2, #1
 800d90a:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d90c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d90e:	e04a      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7c1b      	ldrb	r3, [r3, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10b      	bne.n	800d930 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	23ae      	movs	r3, #174	@ 0xae
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	58d3      	ldr	r3, [r2, r3]
 800d920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d922:	2208      	movs	r2, #8
 800d924:	18ba      	adds	r2, r7, r2
 800d926:	0010      	movs	r0, r2
 800d928:	4798      	blx	r3
 800d92a:	0003      	movs	r3, r0
 800d92c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d92e:	e03a      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	0011      	movs	r1, r2
 800d936:	0018      	movs	r0, r3
 800d938:	f000 fa9e 	bl	800de78 <USBD_CtlError>
        err++;
 800d93c:	210b      	movs	r1, #11
 800d93e:	187b      	adds	r3, r7, r1
 800d940:	781a      	ldrb	r2, [r3, #0]
 800d942:	187b      	adds	r3, r7, r1
 800d944:	3201      	adds	r2, #1
 800d946:	701a      	strb	r2, [r3, #0]
      break;
 800d948:	e02d      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	7c1b      	ldrb	r3, [r3, #16]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10f      	bne.n	800d972 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	23ae      	movs	r3, #174	@ 0xae
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	58d3      	ldr	r3, [r2, r3]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d95c:	2208      	movs	r2, #8
 800d95e:	18ba      	adds	r2, r7, r2
 800d960:	0010      	movs	r0, r2
 800d962:	4798      	blx	r3
 800d964:	0003      	movs	r3, r0
 800d966:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3301      	adds	r3, #1
 800d96c:	2207      	movs	r2, #7
 800d96e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d970:	e019      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 800d972:	683a      	ldr	r2, [r7, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	0011      	movs	r1, r2
 800d978:	0018      	movs	r0, r3
 800d97a:	f000 fa7d 	bl	800de78 <USBD_CtlError>
        err++;
 800d97e:	210b      	movs	r1, #11
 800d980:	187b      	adds	r3, r7, r1
 800d982:	781a      	ldrb	r2, [r3, #0]
 800d984:	187b      	adds	r3, r7, r1
 800d986:	3201      	adds	r2, #1
 800d988:	701a      	strb	r2, [r3, #0]
      break;
 800d98a:	e00c      	b.n	800d9a6 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	0011      	movs	r1, r2
 800d992:	0018      	movs	r0, r3
 800d994:	f000 fa70 	bl	800de78 <USBD_CtlError>
      err++;
 800d998:	210b      	movs	r1, #11
 800d99a:	187b      	adds	r3, r7, r1
 800d99c:	781a      	ldrb	r2, [r3, #0]
 800d99e:	187b      	adds	r3, r7, r1
 800d9a0:	3201      	adds	r2, #1
 800d9a2:	701a      	strb	r2, [r3, #0]
      break;
 800d9a4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800d9a6:	230b      	movs	r3, #11
 800d9a8:	18fb      	adds	r3, r7, r3
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d131      	bne.n	800da14 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	88db      	ldrh	r3, [r3, #6]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d023      	beq.n	800da00 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 800d9b8:	2108      	movs	r1, #8
 800d9ba:	187b      	adds	r3, r7, r1
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d017      	beq.n	800d9f2 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	88da      	ldrh	r2, [r3, #6]
 800d9c6:	187b      	adds	r3, r7, r1
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	1c18      	adds	r0, r3, #0
 800d9cc:	1c11      	adds	r1, r2, #0
 800d9ce:	b28a      	uxth	r2, r1
 800d9d0:	b283      	uxth	r3, r0
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d900      	bls.n	800d9d8 <USBD_GetDescriptor+0x370>
 800d9d6:	1c01      	adds	r1, r0, #0
 800d9d8:	b28a      	uxth	r2, r1
 800d9da:	2108      	movs	r1, #8
 800d9dc:	187b      	adds	r3, r7, r1
 800d9de:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d9e0:	187b      	adds	r3, r7, r1
 800d9e2:	881b      	ldrh	r3, [r3, #0]
 800d9e4:	001a      	movs	r2, r3
 800d9e6:	68f9      	ldr	r1, [r7, #12]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	0018      	movs	r0, r3
 800d9ec:	f000 facc 	bl	800df88 <USBD_CtlSendData>
 800d9f0:	e011      	b.n	800da16 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	0011      	movs	r1, r2
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f000 fa3d 	bl	800de78 <USBD_CtlError>
 800d9fe:	e00a      	b.n	800da16 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	0018      	movs	r0, r3
 800da04:	f000 fb1e 	bl	800e044 <USBD_CtlSendStatus>
 800da08:	e005      	b.n	800da16 <USBD_GetDescriptor+0x3ae>
 800da0a:	46c0      	nop			@ (mov r8, r8)
 800da0c:	08013150 	.word	0x08013150
 800da10:	08013190 	.word	0x08013190
    return;
 800da14:	46c0      	nop			@ (mov r8, r8)
  }
}
 800da16:	46bd      	mov	sp, r7
 800da18:	b004      	add	sp, #16
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da1c:	b590      	push	{r4, r7, lr}
 800da1e:	b085      	sub	sp, #20
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	889b      	ldrh	r3, [r3, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d13e      	bne.n	800daac <USBD_SetAddress+0x90>
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	88db      	ldrh	r3, [r3, #6]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d13a      	bne.n	800daac <USBD_SetAddress+0x90>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	885b      	ldrh	r3, [r3, #2]
 800da3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800da3c:	d836      	bhi.n	800daac <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	885b      	ldrh	r3, [r3, #2]
 800da42:	b2da      	uxtb	r2, r3
 800da44:	230f      	movs	r3, #15
 800da46:	18fb      	adds	r3, r7, r3
 800da48:	217f      	movs	r1, #127	@ 0x7f
 800da4a:	400a      	ands	r2, r1
 800da4c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	23a7      	movs	r3, #167	@ 0xa7
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	5cd3      	ldrb	r3, [r2, r3]
 800da56:	b2db      	uxtb	r3, r3
 800da58:	2b03      	cmp	r3, #3
 800da5a:	d106      	bne.n	800da6a <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	0011      	movs	r1, r2
 800da62:	0018      	movs	r0, r3
 800da64:	f000 fa08 	bl	800de78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da68:	e027      	b.n	800daba <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	240f      	movs	r4, #15
 800da6e:	193a      	adds	r2, r7, r4
 800da70:	4914      	ldr	r1, [pc, #80]	@ (800dac4 <USBD_SetAddress+0xa8>)
 800da72:	7812      	ldrb	r2, [r2, #0]
 800da74:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da76:	193b      	adds	r3, r7, r4
 800da78:	781a      	ldrb	r2, [r3, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	0011      	movs	r1, r2
 800da7e:	0018      	movs	r0, r3
 800da80:	f000 ffad 	bl	800e9de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	0018      	movs	r0, r3
 800da88:	f000 fadc 	bl	800e044 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da8c:	193b      	adds	r3, r7, r4
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d005      	beq.n	800daa0 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	23a7      	movs	r3, #167	@ 0xa7
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	2102      	movs	r1, #2
 800da9c:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da9e:	e00c      	b.n	800daba <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	23a7      	movs	r3, #167	@ 0xa7
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	2101      	movs	r1, #1
 800daa8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daaa:	e006      	b.n	800daba <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	0011      	movs	r1, r2
 800dab2:	0018      	movs	r0, r3
 800dab4:	f000 f9e0 	bl	800de78 <USBD_CtlError>
  }
}
 800dab8:	46c0      	nop			@ (mov r8, r8)
 800daba:	46c0      	nop			@ (mov r8, r8)
 800dabc:	46bd      	mov	sp, r7
 800dabe:	b005      	add	sp, #20
 800dac0:	bd90      	pop	{r4, r7, pc}
 800dac2:	46c0      	nop			@ (mov r8, r8)
 800dac4:	0000029e 	.word	0x0000029e

0800dac8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dac8:	b5b0      	push	{r4, r5, r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dad2:	230f      	movs	r3, #15
 800dad4:	18fb      	adds	r3, r7, r3
 800dad6:	2200      	movs	r2, #0
 800dad8:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	885b      	ldrh	r3, [r3, #2]
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	4b5f      	ldr	r3, [pc, #380]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dae2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dae4:	4b5e      	ldr	r3, [pc, #376]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d907      	bls.n	800dafc <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 800daec:	683a      	ldr	r2, [r7, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	0011      	movs	r1, r2
 800daf2:	0018      	movs	r0, r3
 800daf4:	f000 f9c0 	bl	800de78 <USBD_CtlError>
    return USBD_FAIL;
 800daf8:	2303      	movs	r3, #3
 800dafa:	e0ac      	b.n	800dc56 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	23a7      	movs	r3, #167	@ 0xa7
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	5cd3      	ldrb	r3, [r2, r3]
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b02      	cmp	r3, #2
 800db08:	d002      	beq.n	800db10 <USBD_SetConfig+0x48>
 800db0a:	2b03      	cmp	r3, #3
 800db0c:	d033      	beq.n	800db76 <USBD_SetConfig+0xae>
 800db0e:	e08d      	b.n	800dc2c <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db10:	4b53      	ldr	r3, [pc, #332]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d029      	beq.n	800db6c <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 800db18:	4b51      	ldr	r3, [pc, #324]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	001a      	movs	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db22:	4b4f      	ldr	r3, [pc, #316]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db24:	781a      	ldrb	r2, [r3, #0]
 800db26:	250f      	movs	r5, #15
 800db28:	197c      	adds	r4, r7, r5
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	0011      	movs	r1, r2
 800db2e:	0018      	movs	r0, r3
 800db30:	f7fe feb4 	bl	800c89c <USBD_SetClassConfig>
 800db34:	0003      	movs	r3, r0
 800db36:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800db38:	197b      	adds	r3, r7, r5
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00b      	beq.n	800db58 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 800db40:	683a      	ldr	r2, [r7, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	0011      	movs	r1, r2
 800db46:	0018      	movs	r0, r3
 800db48:	f000 f996 	bl	800de78 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	23a7      	movs	r3, #167	@ 0xa7
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	2102      	movs	r1, #2
 800db54:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800db56:	e07b      	b.n	800dc50 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	0018      	movs	r0, r3
 800db5c:	f000 fa72 	bl	800e044 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	23a7      	movs	r3, #167	@ 0xa7
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	2103      	movs	r1, #3
 800db68:	54d1      	strb	r1, [r2, r3]
      break;
 800db6a:	e071      	b.n	800dc50 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	0018      	movs	r0, r3
 800db70:	f000 fa68 	bl	800e044 <USBD_CtlSendStatus>
      break;
 800db74:	e06c      	b.n	800dc50 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db76:	4b3a      	ldr	r3, [pc, #232]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d115      	bne.n	800dbaa <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	23a7      	movs	r3, #167	@ 0xa7
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	2102      	movs	r1, #2
 800db86:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 800db88:	4b35      	ldr	r3, [pc, #212]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	001a      	movs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db92:	4b33      	ldr	r3, [pc, #204]	@ (800dc60 <USBD_SetConfig+0x198>)
 800db94:	781a      	ldrb	r2, [r3, #0]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	0011      	movs	r1, r2
 800db9a:	0018      	movs	r0, r3
 800db9c:	f7fe fea3 	bl	800c8e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	0018      	movs	r0, r3
 800dba4:	f000 fa4e 	bl	800e044 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dba8:	e052      	b.n	800dc50 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 800dbaa:	4b2d      	ldr	r3, [pc, #180]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	001a      	movs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d034      	beq.n	800dc22 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	0011      	movs	r1, r2
 800dbc2:	0018      	movs	r0, r3
 800dbc4:	f7fe fe8f 	bl	800c8e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dbc8:	4b25      	ldr	r3, [pc, #148]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	001a      	movs	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbd2:	4b23      	ldr	r3, [pc, #140]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dbd4:	781a      	ldrb	r2, [r3, #0]
 800dbd6:	250f      	movs	r5, #15
 800dbd8:	197c      	adds	r4, r7, r5
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	0011      	movs	r1, r2
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f7fe fe5c 	bl	800c89c <USBD_SetClassConfig>
 800dbe4:	0003      	movs	r3, r0
 800dbe6:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 800dbe8:	197b      	adds	r3, r7, r5
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d013      	beq.n	800dc18 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 800dbf0:	683a      	ldr	r2, [r7, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	0011      	movs	r1, r2
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	f000 f93e 	bl	800de78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	0011      	movs	r1, r2
 800dc06:	0018      	movs	r0, r3
 800dc08:	f7fe fe6d 	bl	800c8e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	23a7      	movs	r3, #167	@ 0xa7
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	2102      	movs	r1, #2
 800dc14:	54d1      	strb	r1, [r2, r3]
      break;
 800dc16:	e01b      	b.n	800dc50 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f000 fa12 	bl	800e044 <USBD_CtlSendStatus>
      break;
 800dc20:	e016      	b.n	800dc50 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	0018      	movs	r0, r3
 800dc26:	f000 fa0d 	bl	800e044 <USBD_CtlSendStatus>
      break;
 800dc2a:	e011      	b.n	800dc50 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	0011      	movs	r1, r2
 800dc32:	0018      	movs	r0, r3
 800dc34:	f000 f920 	bl	800de78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc38:	4b09      	ldr	r3, [pc, #36]	@ (800dc60 <USBD_SetConfig+0x198>)
 800dc3a:	781a      	ldrb	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	0011      	movs	r1, r2
 800dc40:	0018      	movs	r0, r3
 800dc42:	f7fe fe50 	bl	800c8e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc46:	230f      	movs	r3, #15
 800dc48:	18fb      	adds	r3, r7, r3
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	701a      	strb	r2, [r3, #0]
      break;
 800dc4e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800dc50:	230f      	movs	r3, #15
 800dc52:	18fb      	adds	r3, r7, r3
 800dc54:	781b      	ldrb	r3, [r3, #0]
}
 800dc56:	0018      	movs	r0, r3
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	b004      	add	sp, #16
 800dc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc5e:	46c0      	nop			@ (mov r8, r8)
 800dc60:	2000057c 	.word	0x2000057c

0800dc64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	88db      	ldrh	r3, [r3, #6]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d006      	beq.n	800dc84 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	0011      	movs	r1, r2
 800dc7c:	0018      	movs	r0, r3
 800dc7e:	f000 f8fb 	bl	800de78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dc82:	e027      	b.n	800dcd4 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	23a7      	movs	r3, #167	@ 0xa7
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	5cd3      	ldrb	r3, [r2, r3]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	dc02      	bgt.n	800dc98 <USBD_GetConfig+0x34>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	dc03      	bgt.n	800dc9e <USBD_GetConfig+0x3a>
 800dc96:	e016      	b.n	800dcc6 <USBD_GetConfig+0x62>
 800dc98:	2b03      	cmp	r3, #3
 800dc9a:	d00c      	beq.n	800dcb6 <USBD_GetConfig+0x52>
 800dc9c:	e013      	b.n	800dcc6 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3308      	adds	r3, #8
 800dca8:	0019      	movs	r1, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	0018      	movs	r0, r3
 800dcb0:	f000 f96a 	bl	800df88 <USBD_CtlSendData>
        break;
 800dcb4:	e00e      	b.n	800dcd4 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	1d19      	adds	r1, r3, #4
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f000 f962 	bl	800df88 <USBD_CtlSendData>
        break;
 800dcc4:	e006      	b.n	800dcd4 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	0011      	movs	r1, r2
 800dccc:	0018      	movs	r0, r3
 800dcce:	f000 f8d3 	bl	800de78 <USBD_CtlError>
        break;
 800dcd2:	46c0      	nop			@ (mov r8, r8)
}
 800dcd4:	46c0      	nop			@ (mov r8, r8)
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	b002      	add	sp, #8
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	23a7      	movs	r3, #167	@ 0xa7
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	5cd3      	ldrb	r3, [r2, r3]
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d822      	bhi.n	800dd3c <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	88db      	ldrh	r3, [r3, #6]
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d006      	beq.n	800dd0c <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	0011      	movs	r1, r2
 800dd04:	0018      	movs	r0, r3
 800dd06:	f000 f8b7 	bl	800de78 <USBD_CtlError>
        break;
 800dd0a:	e01e      	b.n	800dd4a <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	23a9      	movs	r3, #169	@ 0xa9
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	58d3      	ldr	r3, [r2, r3]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d005      	beq.n	800dd2a <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	2202      	movs	r2, #2
 800dd24:	431a      	orrs	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	330c      	adds	r3, #12
 800dd2e:	0019      	movs	r1, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2202      	movs	r2, #2
 800dd34:	0018      	movs	r0, r3
 800dd36:	f000 f927 	bl	800df88 <USBD_CtlSendData>
      break;
 800dd3a:	e006      	b.n	800dd4a <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	0011      	movs	r1, r2
 800dd42:	0018      	movs	r0, r3
 800dd44:	f000 f898 	bl	800de78 <USBD_CtlError>
      break;
 800dd48:	46c0      	nop			@ (mov r8, r8)
  }
}
 800dd4a:	46c0      	nop			@ (mov r8, r8)
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	b002      	add	sp, #8
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b082      	sub	sp, #8
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	885b      	ldrh	r3, [r3, #2]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d109      	bne.n	800dd78 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	23a9      	movs	r3, #169	@ 0xa9
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	0018      	movs	r0, r3
 800dd72:	f000 f967 	bl	800e044 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dd76:	e017      	b.n	800dda8 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	885b      	ldrh	r3, [r3, #2]
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d10d      	bne.n	800dd9c <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	889b      	ldrh	r3, [r3, #4]
 800dd84:	0a1b      	lsrs	r3, r3, #8
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	b2d9      	uxtb	r1, r3
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	23a8      	movs	r3, #168	@ 0xa8
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	0018      	movs	r0, r3
 800dd96:	f000 f955 	bl	800e044 <USBD_CtlSendStatus>
}
 800dd9a:	e005      	b.n	800dda8 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	0011      	movs	r1, r2
 800dda2:	0018      	movs	r0, r3
 800dda4:	f000 f868 	bl	800de78 <USBD_CtlError>
}
 800dda8:	46c0      	nop			@ (mov r8, r8)
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	b002      	add	sp, #8
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	23a7      	movs	r3, #167	@ 0xa7
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	5cd3      	ldrb	r3, [r2, r3]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d80d      	bhi.n	800dde6 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	885b      	ldrh	r3, [r3, #2]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d110      	bne.n	800ddf4 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	23a9      	movs	r3, #169	@ 0xa9
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	2100      	movs	r1, #0
 800ddda:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	0018      	movs	r0, r3
 800dde0:	f000 f930 	bl	800e044 <USBD_CtlSendStatus>
      }
      break;
 800dde4:	e006      	b.n	800ddf4 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	0011      	movs	r1, r2
 800ddec:	0018      	movs	r0, r3
 800ddee:	f000 f843 	bl	800de78 <USBD_CtlError>
      break;
 800ddf2:	e000      	b.n	800ddf6 <USBD_ClrFeature+0x46>
      break;
 800ddf4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ddf6:	46c0      	nop			@ (mov r8, r8)
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	b002      	add	sp, #8
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	781a      	ldrb	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	3301      	adds	r3, #1
 800de18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	781a      	ldrb	r2, [r3, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3301      	adds	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	0018      	movs	r0, r3
 800de2c:	f7ff f8e6 	bl	800cffc <SWAPBYTE>
 800de30:	0003      	movs	r3, r0
 800de32:	001a      	movs	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3301      	adds	r3, #1
 800de42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	0018      	movs	r0, r3
 800de48:	f7ff f8d8 	bl	800cffc <SWAPBYTE>
 800de4c:	0003      	movs	r3, r0
 800de4e:	001a      	movs	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	3301      	adds	r3, #1
 800de58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3301      	adds	r3, #1
 800de5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	0018      	movs	r0, r3
 800de64:	f7ff f8ca 	bl	800cffc <SWAPBYTE>
 800de68:	0003      	movs	r3, r0
 800de6a:	001a      	movs	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	80da      	strh	r2, [r3, #6]
}
 800de70:	46c0      	nop			@ (mov r8, r8)
 800de72:	46bd      	mov	sp, r7
 800de74:	b004      	add	sp, #16
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2180      	movs	r1, #128	@ 0x80
 800de86:	0018      	movs	r0, r3
 800de88:	f000 fd23 	bl	800e8d2 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2100      	movs	r1, #0
 800de90:	0018      	movs	r0, r3
 800de92:	f000 fd1e 	bl	800e8d2 <USBD_LL_StallEP>
}
 800de96:	46c0      	nop			@ (mov r8, r8)
 800de98:	46bd      	mov	sp, r7
 800de9a:	b002      	add	sp, #8
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de9e:	b590      	push	{r4, r7, lr}
 800dea0:	b087      	sub	sp, #28
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800deaa:	2417      	movs	r4, #23
 800deac:	193b      	adds	r3, r7, r4
 800deae:	2200      	movs	r2, #0
 800deb0:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d044      	beq.n	800df42 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	0018      	movs	r0, r3
 800dec0:	f000 f843 	bl	800df4a <USBD_GetLen>
 800dec4:	0003      	movs	r3, r0
 800dec6:	3301      	adds	r3, #1
 800dec8:	b29b      	uxth	r3, r3
 800deca:	18db      	adds	r3, r3, r3
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ded2:	193b      	adds	r3, r7, r4
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	18d3      	adds	r3, r2, r3
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	7812      	ldrb	r2, [r2, #0]
 800dede:	701a      	strb	r2, [r3, #0]
  idx++;
 800dee0:	193b      	adds	r3, r7, r4
 800dee2:	781a      	ldrb	r2, [r3, #0]
 800dee4:	193b      	adds	r3, r7, r4
 800dee6:	3201      	adds	r2, #1
 800dee8:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800deea:	193b      	adds	r3, r7, r4
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	68ba      	ldr	r2, [r7, #8]
 800def0:	18d3      	adds	r3, r2, r3
 800def2:	2203      	movs	r2, #3
 800def4:	701a      	strb	r2, [r3, #0]
  idx++;
 800def6:	193b      	adds	r3, r7, r4
 800def8:	781a      	ldrb	r2, [r3, #0]
 800defa:	193b      	adds	r3, r7, r4
 800defc:	3201      	adds	r2, #1
 800defe:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 800df00:	e01a      	b.n	800df38 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 800df02:	2117      	movs	r1, #23
 800df04:	187b      	adds	r3, r7, r1
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	18d3      	adds	r3, r2, r3
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	7812      	ldrb	r2, [r2, #0]
 800df10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	3301      	adds	r3, #1
 800df16:	613b      	str	r3, [r7, #16]
    idx++;
 800df18:	187b      	adds	r3, r7, r1
 800df1a:	781a      	ldrb	r2, [r3, #0]
 800df1c:	187b      	adds	r3, r7, r1
 800df1e:	3201      	adds	r2, #1
 800df20:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 800df22:	187b      	adds	r3, r7, r1
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	18d3      	adds	r3, r2, r3
 800df2a:	2200      	movs	r2, #0
 800df2c:	701a      	strb	r2, [r3, #0]
    idx++;
 800df2e:	187b      	adds	r3, r7, r1
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	187b      	adds	r3, r7, r1
 800df34:	3201      	adds	r2, #1
 800df36:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1e0      	bne.n	800df02 <USBD_GetString+0x64>
 800df40:	e000      	b.n	800df44 <USBD_GetString+0xa6>
    return;
 800df42:	46c0      	nop			@ (mov r8, r8)
  }
}
 800df44:	46bd      	mov	sp, r7
 800df46:	b007      	add	sp, #28
 800df48:	bd90      	pop	{r4, r7, pc}

0800df4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df52:	230f      	movs	r3, #15
 800df54:	18fb      	adds	r3, r7, r3
 800df56:	2200      	movs	r2, #0
 800df58:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df5e:	e008      	b.n	800df72 <USBD_GetLen+0x28>
  {
    len++;
 800df60:	210f      	movs	r1, #15
 800df62:	187b      	adds	r3, r7, r1
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	187b      	adds	r3, r7, r1
 800df68:	3201      	adds	r2, #1
 800df6a:	701a      	strb	r2, [r3, #0]
    pbuff++;
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	3301      	adds	r3, #1
 800df70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1f2      	bne.n	800df60 <USBD_GetLen+0x16>
  }

  return len;
 800df7a:	230f      	movs	r3, #15
 800df7c:	18fb      	adds	r3, r7, r3
 800df7e:	781b      	ldrb	r3, [r3, #0]
}
 800df80:	0018      	movs	r0, r3
 800df82:	46bd      	mov	sp, r7
 800df84:	b004      	add	sp, #16
 800df86:	bd80      	pop	{r7, pc}

0800df88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	23a5      	movs	r3, #165	@ 0xa5
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	2102      	movs	r1, #2
 800df9c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	68f8      	ldr	r0, [r7, #12]
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	f000 fd3f 	bl	800ea34 <USBD_LL_Transmit>

  return USBD_OK;
 800dfb6:	2300      	movs	r3, #0
}
 800dfb8:	0018      	movs	r0, r3
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	b004      	add	sp, #16
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	f000 fd2e 	bl	800ea34 <USBD_LL_Transmit>

  return USBD_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	0018      	movs	r0, r3
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	b004      	add	sp, #16
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	23a5      	movs	r3, #165	@ 0xa5
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	2103      	movs	r1, #3
 800dff6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	23ac      	movs	r3, #172	@ 0xac
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	23ae      	movs	r3, #174	@ 0xae
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	6879      	ldr	r1, [r7, #4]
 800e00a:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	68ba      	ldr	r2, [r7, #8]
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	2100      	movs	r1, #0
 800e014:	f000 fd3e 	bl	800ea94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	0018      	movs	r0, r3
 800e01c:	46bd      	mov	sp, r7
 800e01e:	b004      	add	sp, #16
 800e020:	bd80      	pop	{r7, pc}

0800e022 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	60f8      	str	r0, [r7, #12]
 800e02a:	60b9      	str	r1, [r7, #8]
 800e02c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	2100      	movs	r1, #0
 800e036:	f000 fd2d 	bl	800ea94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	0018      	movs	r0, r3
 800e03e:	46bd      	mov	sp, r7
 800e040:	b004      	add	sp, #16
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	23a5      	movs	r3, #165	@ 0xa5
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	2104      	movs	r1, #4
 800e054:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	2300      	movs	r3, #0
 800e05a:	2200      	movs	r2, #0
 800e05c:	2100      	movs	r1, #0
 800e05e:	f000 fce9 	bl	800ea34 <USBD_LL_Transmit>

  return USBD_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	0018      	movs	r0, r3
 800e066:	46bd      	mov	sp, r7
 800e068:	b002      	add	sp, #8
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	23a5      	movs	r3, #165	@ 0xa5
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	2105      	movs	r1, #5
 800e07c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	2300      	movs	r3, #0
 800e082:	2200      	movs	r2, #0
 800e084:	2100      	movs	r1, #0
 800e086:	f000 fd05 	bl	800ea94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	0018      	movs	r0, r3
 800e08e:	46bd      	mov	sp, r7
 800e090:	b002      	add	sp, #8
 800e092:	bd80      	pop	{r7, pc}

0800e094 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e098:	4914      	ldr	r1, [pc, #80]	@ (800e0ec <MX_USB_Device_Init+0x58>)
 800e09a:	4b15      	ldr	r3, [pc, #84]	@ (800e0f0 <MX_USB_Device_Init+0x5c>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f7fe fb6e 	bl	800c780 <USBD_Init>
 800e0a4:	1e03      	subs	r3, r0, #0
 800e0a6:	d001      	beq.n	800e0ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e0a8:	f7f5 fc28 	bl	80038fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0ac:	4a11      	ldr	r2, [pc, #68]	@ (800e0f4 <MX_USB_Device_Init+0x60>)
 800e0ae:	4b10      	ldr	r3, [pc, #64]	@ (800e0f0 <MX_USB_Device_Init+0x5c>)
 800e0b0:	0011      	movs	r1, r2
 800e0b2:	0018      	movs	r0, r3
 800e0b4:	f7fe fb9e 	bl	800c7f4 <USBD_RegisterClass>
 800e0b8:	1e03      	subs	r3, r0, #0
 800e0ba:	d001      	beq.n	800e0c0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 800e0bc:	f7f5 fc1e 	bl	80038fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e0f8 <MX_USB_Device_Init+0x64>)
 800e0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f0 <MX_USB_Device_Init+0x5c>)
 800e0c4:	0011      	movs	r1, r2
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	f7fe fa78 	bl	800c5bc <USBD_CDC_RegisterInterface>
 800e0cc:	1e03      	subs	r3, r0, #0
 800e0ce:	d001      	beq.n	800e0d4 <MX_USB_Device_Init+0x40>
    Error_Handler();
 800e0d0:	f7f5 fc14 	bl	80038fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e0d4:	4b06      	ldr	r3, [pc, #24]	@ (800e0f0 <MX_USB_Device_Init+0x5c>)
 800e0d6:	0018      	movs	r0, r3
 800e0d8:	f7fe fbca 	bl	800c870 <USBD_Start>
 800e0dc:	1e03      	subs	r3, r0, #0
 800e0de:	d001      	beq.n	800e0e4 <MX_USB_Device_Init+0x50>
    Error_Handler();
 800e0e0:	f7f5 fc0c 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e0e4:	46c0      	nop			@ (mov r8, r8)
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	46c0      	nop			@ (mov r8, r8)
 800e0ec:	200000ac 	.word	0x200000ac
 800e0f0:	20000580 	.word	0x20000580
 800e0f4:	20000018 	.word	0x20000018
 800e0f8:	20000098 	.word	0x20000098

0800e0fc <CDC_Receive>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

int8_t CDC_Receive(uint8_t* pbuf, uint32_t *Len){
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
	CDC_Receive_FS(pbuf, Len);
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	0011      	movs	r1, r2
 800e10c:	0018      	movs	r0, r3
 800e10e:	f000 f83f 	bl	800e190 <CDC_Receive_FS>
	return USBD_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	0018      	movs	r0, r3
 800e116:	46bd      	mov	sp, r7
 800e118:	b002      	add	sp, #8
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e120:	4907      	ldr	r1, [pc, #28]	@ (800e140 <CDC_Init_FS+0x24>)
 800e122:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <CDC_Init_FS+0x28>)
 800e124:	2200      	movs	r2, #0
 800e126:	0018      	movs	r0, r3
 800e128:	f7fe fa62 	bl	800c5f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e12c:	4a06      	ldr	r2, [pc, #24]	@ (800e148 <CDC_Init_FS+0x2c>)
 800e12e:	4b05      	ldr	r3, [pc, #20]	@ (800e144 <CDC_Init_FS+0x28>)
 800e130:	0011      	movs	r1, r2
 800e132:	0018      	movs	r0, r3
 800e134:	f7fe fa7f 	bl	800c636 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e138:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e13a:	0018      	movs	r0, r3
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	2000105c 	.word	0x2000105c
 800e144:	20000580 	.word	0x20000580
 800e148:	2000085c 	.word	0x2000085c

0800e14c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e152:	0018      	movs	r0, r3
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6039      	str	r1, [r7, #0]
 800e160:	0011      	movs	r1, r2
 800e162:	1dfb      	adds	r3, r7, #7
 800e164:	1c02      	adds	r2, r0, #0
 800e166:	701a      	strb	r2, [r3, #0]
 800e168:	1d3b      	adds	r3, r7, #4
 800e16a:	1c0a      	adds	r2, r1, #0
 800e16c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e16e:	1dfb      	adds	r3, r7, #7
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	2b23      	cmp	r3, #35	@ 0x23
 800e174:	d804      	bhi.n	800e180 <CDC_Control_FS+0x28>
 800e176:	009a      	lsls	r2, r3, #2
 800e178:	4b04      	ldr	r3, [pc, #16]	@ (800e18c <CDC_Control_FS+0x34>)
 800e17a:	18d3      	adds	r3, r2, r3
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e180:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800e182:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e184:	0018      	movs	r0, r3
 800e186:	46bd      	mov	sp, r7
 800e188:	b002      	add	sp, #8
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	080131a8 	.word	0x080131a8

0800e190 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	4b06      	ldr	r3, [pc, #24]	@ (800e1b8 <CDC_Receive_FS+0x28>)
 800e19e:	0011      	movs	r1, r2
 800e1a0:	0018      	movs	r0, r3
 800e1a2:	f7fe fa48 	bl	800c636 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e1a6:	4b04      	ldr	r3, [pc, #16]	@ (800e1b8 <CDC_Receive_FS+0x28>)
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	f7fe faaf 	bl	800c70c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e1ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e1b0:	0018      	movs	r0, r3
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	b002      	add	sp, #8
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20000580 	.word	0x20000580

0800e1bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e1bc:	b5b0      	push	{r4, r5, r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	000a      	movs	r2, r1
 800e1c6:	1cbb      	adds	r3, r7, #2
 800e1c8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e1ca:	230f      	movs	r3, #15
 800e1cc:	18fb      	adds	r3, r7, r3
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e1d2:	4a11      	ldr	r2, [pc, #68]	@ (800e218 <CDC_Transmit_FS+0x5c>)
 800e1d4:	23af      	movs	r3, #175	@ 0xaf
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	58d3      	ldr	r3, [r2, r3]
 800e1da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	2385      	movs	r3, #133	@ 0x85
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	58d3      	ldr	r3, [r2, r3]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e010      	b.n	800e20e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e1ec:	1cbb      	adds	r3, r7, #2
 800e1ee:	881a      	ldrh	r2, [r3, #0]
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	4b09      	ldr	r3, [pc, #36]	@ (800e218 <CDC_Transmit_FS+0x5c>)
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	f7fe f9fb 	bl	800c5f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e1fa:	250f      	movs	r5, #15
 800e1fc:	197c      	adds	r4, r7, r5
 800e1fe:	4b06      	ldr	r3, [pc, #24]	@ (800e218 <CDC_Transmit_FS+0x5c>)
 800e200:	0018      	movs	r0, r3
 800e202:	f7fe fa35 	bl	800c670 <USBD_CDC_TransmitPacket>
 800e206:	0003      	movs	r3, r0
 800e208:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800e20a:	197b      	adds	r3, r7, r5
 800e20c:	781b      	ldrb	r3, [r3, #0]
}
 800e20e:	0018      	movs	r0, r3
 800e210:	46bd      	mov	sp, r7
 800e212:	b004      	add	sp, #16
 800e214:	bdb0      	pop	{r4, r5, r7, pc}
 800e216:	46c0      	nop			@ (mov r8, r8)
 800e218:	20000580 	.word	0x20000580

0800e21c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	1dfb      	adds	r3, r7, #7
 800e228:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e22a:	2117      	movs	r1, #23
 800e22c:	187b      	adds	r3, r7, r1
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e232:	187b      	adds	r3, r7, r1
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	b25b      	sxtb	r3, r3
}
 800e238:	0018      	movs	r0, r3
 800e23a:	46bd      	mov	sp, r7
 800e23c:	b006      	add	sp, #24
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	0002      	movs	r2, r0
 800e248:	6039      	str	r1, [r7, #0]
 800e24a:	1dfb      	adds	r3, r7, #7
 800e24c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	2212      	movs	r2, #18
 800e252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e254:	4b02      	ldr	r3, [pc, #8]	@ (800e260 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e256:	0018      	movs	r0, r3
 800e258:	46bd      	mov	sp, r7
 800e25a:	b002      	add	sp, #8
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	46c0      	nop			@ (mov r8, r8)
 800e260:	200000cc 	.word	0x200000cc

0800e264 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	0002      	movs	r2, r0
 800e26c:	6039      	str	r1, [r7, #0]
 800e26e:	1dfb      	adds	r3, r7, #7
 800e270:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	2204      	movs	r2, #4
 800e276:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e278:	4b02      	ldr	r3, [pc, #8]	@ (800e284 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e27a:	0018      	movs	r0, r3
 800e27c:	46bd      	mov	sp, r7
 800e27e:	b002      	add	sp, #8
 800e280:	bd80      	pop	{r7, pc}
 800e282:	46c0      	nop			@ (mov r8, r8)
 800e284:	200000e0 	.word	0x200000e0

0800e288 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	0002      	movs	r2, r0
 800e290:	6039      	str	r1, [r7, #0]
 800e292:	1dfb      	adds	r3, r7, #7
 800e294:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800e296:	1dfb      	adds	r3, r7, #7
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	4908      	ldr	r1, [pc, #32]	@ (800e2c4 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800e2a2:	4b09      	ldr	r3, [pc, #36]	@ (800e2c8 <USBD_CDC_ProductStrDescriptor+0x40>)
 800e2a4:	0018      	movs	r0, r3
 800e2a6:	f7ff fdfa 	bl	800de9e <USBD_GetString>
 800e2aa:	e005      	b.n	800e2b8 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	4905      	ldr	r1, [pc, #20]	@ (800e2c4 <USBD_CDC_ProductStrDescriptor+0x3c>)
 800e2b0:	4b05      	ldr	r3, [pc, #20]	@ (800e2c8 <USBD_CDC_ProductStrDescriptor+0x40>)
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f7ff fdf3 	bl	800de9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2b8:	4b02      	ldr	r3, [pc, #8]	@ (800e2c4 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	b002      	add	sp, #8
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	46c0      	nop			@ (mov r8, r8)
 800e2c4:	2000185c 	.word	0x2000185c
 800e2c8:	08013060 	.word	0x08013060

0800e2cc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	0002      	movs	r2, r0
 800e2d4:	6039      	str	r1, [r7, #0]
 800e2d6:	1dfb      	adds	r3, r7, #7
 800e2d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	4904      	ldr	r1, [pc, #16]	@ (800e2f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e2de:	4b05      	ldr	r3, [pc, #20]	@ (800e2f4 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 800e2e0:	0018      	movs	r0, r3
 800e2e2:	f7ff fddc 	bl	800de9e <USBD_GetString>
  return USBD_StrDesc;
 800e2e6:	4b02      	ldr	r3, [pc, #8]	@ (800e2f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 800e2e8:	0018      	movs	r0, r3
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	b002      	add	sp, #8
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	2000185c 	.word	0x2000185c
 800e2f4:	08013078 	.word	0x08013078

0800e2f8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	0002      	movs	r2, r0
 800e300:	6039      	str	r1, [r7, #0]
 800e302:	1dfb      	adds	r3, r7, #7
 800e304:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	221a      	movs	r2, #26
 800e30a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e30c:	f000 f84c 	bl	800e3a8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e310:	4b02      	ldr	r3, [pc, #8]	@ (800e31c <USBD_CDC_SerialStrDescriptor+0x24>)
}
 800e312:	0018      	movs	r0, r3
 800e314:	46bd      	mov	sp, r7
 800e316:	b002      	add	sp, #8
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	46c0      	nop			@ (mov r8, r8)
 800e31c:	200000e4 	.word	0x200000e4

0800e320 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	0002      	movs	r2, r0
 800e328:	6039      	str	r1, [r7, #0]
 800e32a:	1dfb      	adds	r3, r7, #7
 800e32c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800e32e:	1dfb      	adds	r3, r7, #7
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d106      	bne.n	800e344 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	4908      	ldr	r1, [pc, #32]	@ (800e35c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800e33a:	4b09      	ldr	r3, [pc, #36]	@ (800e360 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800e33c:	0018      	movs	r0, r3
 800e33e:	f7ff fdae 	bl	800de9e <USBD_GetString>
 800e342:	e005      	b.n	800e350 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	4905      	ldr	r1, [pc, #20]	@ (800e35c <USBD_CDC_ConfigStrDescriptor+0x3c>)
 800e348:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <USBD_CDC_ConfigStrDescriptor+0x40>)
 800e34a:	0018      	movs	r0, r3
 800e34c:	f7ff fda7 	bl	800de9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e350:	4b02      	ldr	r3, [pc, #8]	@ (800e35c <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 800e352:	0018      	movs	r0, r3
 800e354:	46bd      	mov	sp, r7
 800e356:	b002      	add	sp, #8
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	46c0      	nop			@ (mov r8, r8)
 800e35c:	2000185c 	.word	0x2000185c
 800e360:	0801308c 	.word	0x0801308c

0800e364 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	0002      	movs	r2, r0
 800e36c:	6039      	str	r1, [r7, #0]
 800e36e:	1dfb      	adds	r3, r7, #7
 800e370:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800e372:	1dfb      	adds	r3, r7, #7
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d106      	bne.n	800e388 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	4908      	ldr	r1, [pc, #32]	@ (800e3a0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800e37e:	4b09      	ldr	r3, [pc, #36]	@ (800e3a4 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800e380:	0018      	movs	r0, r3
 800e382:	f7ff fd8c 	bl	800de9e <USBD_GetString>
 800e386:	e005      	b.n	800e394 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e388:	683a      	ldr	r2, [r7, #0]
 800e38a:	4905      	ldr	r1, [pc, #20]	@ (800e3a0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 800e38c:	4b05      	ldr	r3, [pc, #20]	@ (800e3a4 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 800e38e:	0018      	movs	r0, r3
 800e390:	f7ff fd85 	bl	800de9e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e394:	4b02      	ldr	r3, [pc, #8]	@ (800e3a0 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 800e396:	0018      	movs	r0, r3
 800e398:	46bd      	mov	sp, r7
 800e39a:	b002      	add	sp, #8
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	46c0      	nop			@ (mov r8, r8)
 800e3a0:	2000185c 	.word	0x2000185c
 800e3a4:	08013098 	.word	0x08013098

0800e3a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e3ae:	4b10      	ldr	r3, [pc, #64]	@ (800e3f0 <Get_SerialNum+0x48>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f4 <Get_SerialNum+0x4c>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f8 <Get_SerialNum+0x50>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	18d3      	adds	r3, r2, r3
 800e3c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00b      	beq.n	800e3e6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e3ce:	490b      	ldr	r1, [pc, #44]	@ (800e3fc <Get_SerialNum+0x54>)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2208      	movs	r2, #8
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	f000 f815 	bl	800e404 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e3da:	4909      	ldr	r1, [pc, #36]	@ (800e400 <Get_SerialNum+0x58>)
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2204      	movs	r2, #4
 800e3e0:	0018      	movs	r0, r3
 800e3e2:	f000 f80f 	bl	800e404 <IntToUnicode>
  }
}
 800e3e6:	46c0      	nop			@ (mov r8, r8)
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	b004      	add	sp, #16
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	46c0      	nop			@ (mov r8, r8)
 800e3f0:	1fff7590 	.word	0x1fff7590
 800e3f4:	1fff7594 	.word	0x1fff7594
 800e3f8:	1fff7598 	.word	0x1fff7598
 800e3fc:	200000e6 	.word	0x200000e6
 800e400:	200000f6 	.word	0x200000f6

0800e404 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	1dfb      	adds	r3, r7, #7
 800e410:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800e412:	2117      	movs	r1, #23
 800e414:	187b      	adds	r3, r7, r1
 800e416:	2200      	movs	r2, #0
 800e418:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800e41a:	187b      	adds	r3, r7, r1
 800e41c:	2200      	movs	r2, #0
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e02f      	b.n	800e482 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	0f1b      	lsrs	r3, r3, #28
 800e426:	2b09      	cmp	r3, #9
 800e428:	d80d      	bhi.n	800e446 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	0f1b      	lsrs	r3, r3, #28
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	2317      	movs	r3, #23
 800e432:	18fb      	adds	r3, r7, r3
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	0019      	movs	r1, r3
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	185b      	adds	r3, r3, r1
 800e43e:	3230      	adds	r2, #48	@ 0x30
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	701a      	strb	r2, [r3, #0]
 800e444:	e00c      	b.n	800e460 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	0f1b      	lsrs	r3, r3, #28
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	2317      	movs	r3, #23
 800e44e:	18fb      	adds	r3, r7, r3
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	0019      	movs	r1, r3
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	185b      	adds	r3, r3, r1
 800e45a:	3237      	adds	r2, #55	@ 0x37
 800e45c:	b2d2      	uxtb	r2, r2
 800e45e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	011b      	lsls	r3, r3, #4
 800e464:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e466:	2117      	movs	r1, #23
 800e468:	187b      	adds	r3, r7, r1
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	005b      	lsls	r3, r3, #1
 800e46e:	3301      	adds	r3, #1
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	18d3      	adds	r3, r2, r3
 800e474:	2200      	movs	r2, #0
 800e476:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e478:	187b      	adds	r3, r7, r1
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	187b      	adds	r3, r7, r1
 800e47e:	3201      	adds	r2, #1
 800e480:	701a      	strb	r2, [r3, #0]
 800e482:	2317      	movs	r3, #23
 800e484:	18fa      	adds	r2, r7, r3
 800e486:	1dfb      	adds	r3, r7, #7
 800e488:	7812      	ldrb	r2, [r2, #0]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d3c8      	bcc.n	800e422 <IntToUnicode+0x1e>
  }
}
 800e490:	46c0      	nop			@ (mov r8, r8)
 800e492:	46c0      	nop			@ (mov r8, r8)
 800e494:	46bd      	mov	sp, r7
 800e496:	b006      	add	sp, #24
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e49c:	b590      	push	{r4, r7, lr}
 800e49e:	b091      	sub	sp, #68	@ 0x44
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e4a4:	2414      	movs	r4, #20
 800e4a6:	193b      	adds	r3, r7, r4
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	232c      	movs	r3, #44	@ 0x2c
 800e4ac:	001a      	movs	r2, r3
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	f001 ff8c 	bl	80103cc <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a25      	ldr	r2, [pc, #148]	@ (800e550 <HAL_PCD_MspInit+0xb4>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d144      	bne.n	800e548 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e4be:	193b      	adds	r3, r7, r4
 800e4c0:	2280      	movs	r2, #128	@ 0x80
 800e4c2:	0452      	lsls	r2, r2, #17
 800e4c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800e4c6:	193b      	adds	r3, r7, r4
 800e4c8:	2280      	movs	r2, #128	@ 0x80
 800e4ca:	0192      	lsls	r2, r2, #6
 800e4cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e4ce:	193b      	adds	r3, r7, r4
 800e4d0:	0018      	movs	r0, r3
 800e4d2:	f7fa fbf5 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 800e4d6:	1e03      	subs	r3, r0, #0
 800e4d8:	d001      	beq.n	800e4de <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 800e4da:	f7f5 fa0f 	bl	80038fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e4de:	4b1d      	ldr	r3, [pc, #116]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e4e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e4e4:	2180      	movs	r1, #128	@ 0x80
 800e4e6:	0189      	lsls	r1, r1, #6
 800e4e8:	430a      	orrs	r2, r1
 800e4ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e4ec:	4b19      	ldr	r3, [pc, #100]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e4ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4f0:	2380      	movs	r3, #128	@ 0x80
 800e4f2:	019b      	lsls	r3, r3, #6
 800e4f4:	4013      	ands	r3, r2
 800e4f6:	613b      	str	r3, [r7, #16]
 800e4f8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e4fa:	4b16      	ldr	r3, [pc, #88]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4fe:	2380      	movs	r3, #128	@ 0x80
 800e500:	055b      	lsls	r3, r3, #21
 800e502:	4013      	ands	r3, r2
 800e504:	d116      	bne.n	800e534 <HAL_PCD_MspInit+0x98>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e506:	4b13      	ldr	r3, [pc, #76]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e50a:	4b12      	ldr	r3, [pc, #72]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e50c:	2180      	movs	r1, #128	@ 0x80
 800e50e:	0549      	lsls	r1, r1, #21
 800e510:	430a      	orrs	r2, r1
 800e512:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e514:	4b0f      	ldr	r3, [pc, #60]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e518:	2380      	movs	r3, #128	@ 0x80
 800e51a:	055b      	lsls	r3, r3, #21
 800e51c:	4013      	ands	r3, r2
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800e522:	f7f9 fedb 	bl	80082dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e526:	4b0b      	ldr	r3, [pc, #44]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e52a:	4b0a      	ldr	r3, [pc, #40]	@ (800e554 <HAL_PCD_MspInit+0xb8>)
 800e52c:	490a      	ldr	r1, [pc, #40]	@ (800e558 <HAL_PCD_MspInit+0xbc>)
 800e52e:	400a      	ands	r2, r1
 800e530:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e532:	e001      	b.n	800e538 <HAL_PCD_MspInit+0x9c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e534:	f7f9 fed2 	bl	80082dc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e538:	2200      	movs	r2, #0
 800e53a:	2100      	movs	r1, #0
 800e53c:	2008      	movs	r0, #8
 800e53e:	f7f7 f8f5 	bl	800572c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e542:	2008      	movs	r0, #8
 800e544:	f7f7 f907 	bl	8005756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 800e548:	46c0      	nop			@ (mov r8, r8)
 800e54a:	46bd      	mov	sp, r7
 800e54c:	b011      	add	sp, #68	@ 0x44
 800e54e:	bd90      	pop	{r4, r7, pc}
 800e550:	40005c00 	.word	0x40005c00
 800e554:	40021000 	.word	0x40021000
 800e558:	efffffff 	.word	0xefffffff

0800e55c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	23b7      	movs	r3, #183	@ 0xb7
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	58d2      	ldr	r2, [r2, r3]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	21a7      	movs	r1, #167	@ 0xa7
 800e570:	0089      	lsls	r1, r1, #2
 800e572:	468c      	mov	ip, r1
 800e574:	4463      	add	r3, ip
 800e576:	0019      	movs	r1, r3
 800e578:	0010      	movs	r0, r2
 800e57a:	f7fe f9d5 	bl	800c928 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e57e:	46c0      	nop			@ (mov r8, r8)
 800e580:	46bd      	mov	sp, r7
 800e582:	b002      	add	sp, #8
 800e584:	bd80      	pop	{r7, pc}

0800e586 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e586:	b590      	push	{r4, r7, lr}
 800e588:	b083      	sub	sp, #12
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	6078      	str	r0, [r7, #4]
 800e58e:	000a      	movs	r2, r1
 800e590:	1cfb      	adds	r3, r7, #3
 800e592:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	23b7      	movs	r3, #183	@ 0xb7
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	58d4      	ldr	r4, [r2, r3]
 800e59c:	1cfb      	adds	r3, r7, #3
 800e59e:	781a      	ldrb	r2, [r3, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	23b4      	movs	r3, #180	@ 0xb4
 800e5a4:	0059      	lsls	r1, r3, #1
 800e5a6:	0013      	movs	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	189b      	adds	r3, r3, r2
 800e5ac:	00db      	lsls	r3, r3, #3
 800e5ae:	18c3      	adds	r3, r0, r3
 800e5b0:	185b      	adds	r3, r3, r1
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	1cfb      	adds	r3, r7, #3
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	0019      	movs	r1, r3
 800e5ba:	0020      	movs	r0, r4
 800e5bc:	f7fe fa1e 	bl	800c9fc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e5c0:	46c0      	nop			@ (mov r8, r8)
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	b003      	add	sp, #12
 800e5c6:	bd90      	pop	{r4, r7, pc}

0800e5c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	000a      	movs	r2, r1
 800e5d2:	1cfb      	adds	r3, r7, #3
 800e5d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	23b7      	movs	r3, #183	@ 0xb7
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	58d0      	ldr	r0, [r2, r3]
 800e5de:	1cfb      	adds	r3, r7, #3
 800e5e0:	781a      	ldrb	r2, [r3, #0]
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	0013      	movs	r3, r2
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	189b      	adds	r3, r3, r2
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	18cb      	adds	r3, r1, r3
 800e5ee:	3328      	adds	r3, #40	@ 0x28
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	1cfb      	adds	r3, r7, #3
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	0019      	movs	r1, r3
 800e5f8:	f7fe fae8 	bl	800cbcc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e5fc:	46c0      	nop			@ (mov r8, r8)
 800e5fe:	46bd      	mov	sp, r7
 800e600:	b002      	add	sp, #8
 800e602:	bd80      	pop	{r7, pc}

0800e604 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	23b7      	movs	r3, #183	@ 0xb7
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	58d3      	ldr	r3, [r2, r3]
 800e614:	0018      	movs	r0, r3
 800e616:	f7fe fc53 	bl	800cec0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e61a:	46c0      	nop			@ (mov r8, r8)
 800e61c:	46bd      	mov	sp, r7
 800e61e:	b002      	add	sp, #8
 800e620:	bd80      	pop	{r7, pc}

0800e622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b084      	sub	sp, #16
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e62a:	230f      	movs	r3, #15
 800e62c:	18fb      	adds	r3, r7, r3
 800e62e:	2201      	movs	r2, #1
 800e630:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	79db      	ldrb	r3, [r3, #7]
 800e636:	2b02      	cmp	r3, #2
 800e638:	d001      	beq.n	800e63e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800e63a:	f7f5 f95f 	bl	80038fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	23b7      	movs	r3, #183	@ 0xb7
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	58d2      	ldr	r2, [r2, r3]
 800e646:	230f      	movs	r3, #15
 800e648:	18fb      	adds	r3, r7, r3
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	0019      	movs	r1, r3
 800e64e:	0010      	movs	r0, r2
 800e650:	f7fe fbf3 	bl	800ce3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	23b7      	movs	r3, #183	@ 0xb7
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	58d3      	ldr	r3, [r2, r3]
 800e65c:	0018      	movs	r0, r3
 800e65e:	f7fe fb8d 	bl	800cd7c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e662:	46c0      	nop			@ (mov r8, r8)
 800e664:	46bd      	mov	sp, r7
 800e666:	b004      	add	sp, #16
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	23b7      	movs	r3, #183	@ 0xb7
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	58d3      	ldr	r3, [r2, r3]
 800e67c:	0018      	movs	r0, r3
 800e67e:	f7fe fbed 	bl	800ce5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7adb      	ldrb	r3, [r3, #11]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d005      	beq.n	800e696 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e68a:	4b05      	ldr	r3, [pc, #20]	@ (800e6a0 <HAL_PCD_SuspendCallback+0x34>)
 800e68c:	691a      	ldr	r2, [r3, #16]
 800e68e:	4b04      	ldr	r3, [pc, #16]	@ (800e6a0 <HAL_PCD_SuspendCallback+0x34>)
 800e690:	2106      	movs	r1, #6
 800e692:	430a      	orrs	r2, r1
 800e694:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e696:	46c0      	nop			@ (mov r8, r8)
 800e698:	46bd      	mov	sp, r7
 800e69a:	b002      	add	sp, #8
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	46c0      	nop			@ (mov r8, r8)
 800e6a0:	e000ed00 	.word	0xe000ed00

0800e6a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	7adb      	ldrb	r3, [r3, #11]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d007      	beq.n	800e6c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6b4:	4b09      	ldr	r3, [pc, #36]	@ (800e6dc <HAL_PCD_ResumeCallback+0x38>)
 800e6b6:	691a      	ldr	r2, [r3, #16]
 800e6b8:	4b08      	ldr	r3, [pc, #32]	@ (800e6dc <HAL_PCD_ResumeCallback+0x38>)
 800e6ba:	2106      	movs	r1, #6
 800e6bc:	438a      	bics	r2, r1
 800e6be:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800e6c0:	f000 fa7c 	bl	800ebbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	23b7      	movs	r3, #183	@ 0xb7
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	58d3      	ldr	r3, [r2, r3]
 800e6cc:	0018      	movs	r0, r3
 800e6ce:	f7fe fbdd 	bl	800ce8c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e6d2:	46c0      	nop			@ (mov r8, r8)
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	e000ed00 	.word	0xe000ed00

0800e6e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 800e6e8:	4a34      	ldr	r2, [pc, #208]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e6ea:	23b7      	movs	r3, #183	@ 0xb7
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	23b2      	movs	r3, #178	@ 0xb2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4930      	ldr	r1, [pc, #192]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e6fa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800e6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e6fe:	4a30      	ldr	r2, [pc, #192]	@ (800e7c0 <USBD_LL_Init+0xe0>)
 800e700:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800e702:	4b2e      	ldr	r3, [pc, #184]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e704:	2208      	movs	r2, #8
 800e706:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 800e708:	4b2c      	ldr	r3, [pc, #176]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e70a:	2208      	movs	r2, #8
 800e70c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 800e70e:	4b2b      	ldr	r3, [pc, #172]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e710:	2202      	movs	r2, #2
 800e712:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e714:	4b29      	ldr	r3, [pc, #164]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e716:	2202      	movs	r2, #2
 800e718:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800e71a:	4b28      	ldr	r3, [pc, #160]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800e720:	4b26      	ldr	r3, [pc, #152]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e722:	2200      	movs	r2, #0
 800e724:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800e726:	4b25      	ldr	r3, [pc, #148]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e728:	2200      	movs	r2, #0
 800e72a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800e72c:	4b23      	ldr	r3, [pc, #140]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e72e:	2200      	movs	r2, #0
 800e730:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800e732:	4b22      	ldr	r3, [pc, #136]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e734:	2200      	movs	r2, #0
 800e736:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800e738:	4b20      	ldr	r3, [pc, #128]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800e73e:	4b1f      	ldr	r3, [pc, #124]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e740:	2200      	movs	r2, #0
 800e742:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800e744:	4b1d      	ldr	r3, [pc, #116]	@ (800e7bc <USBD_LL_Init+0xdc>)
 800e746:	0018      	movs	r0, r3
 800e748:	f7f8 f8c2 	bl	80068d0 <HAL_PCD_Init>
 800e74c:	1e03      	subs	r3, r0, #0
 800e74e:	d001      	beq.n	800e754 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800e750:	f7f5 f8d4 	bl	80038fc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	23b2      	movs	r3, #178	@ 0xb2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	58d0      	ldr	r0, [r2, r3]
 800e75c:	2318      	movs	r3, #24
 800e75e:	2200      	movs	r2, #0
 800e760:	2100      	movs	r1, #0
 800e762:	f7f9 fd49 	bl	80081f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	23b2      	movs	r3, #178	@ 0xb2
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	58d0      	ldr	r0, [r2, r3]
 800e76e:	2358      	movs	r3, #88	@ 0x58
 800e770:	2200      	movs	r2, #0
 800e772:	2180      	movs	r1, #128	@ 0x80
 800e774:	f7f9 fd40 	bl	80081f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	23b2      	movs	r3, #178	@ 0xb2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	58d0      	ldr	r0, [r2, r3]
 800e780:	23c0      	movs	r3, #192	@ 0xc0
 800e782:	2200      	movs	r2, #0
 800e784:	2181      	movs	r1, #129	@ 0x81
 800e786:	f7f9 fd37 	bl	80081f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	23b2      	movs	r3, #178	@ 0xb2
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	58d0      	ldr	r0, [r2, r3]
 800e792:	2388      	movs	r3, #136	@ 0x88
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	2200      	movs	r2, #0
 800e798:	2101      	movs	r1, #1
 800e79a:	f7f9 fd2d 	bl	80081f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	23b2      	movs	r3, #178	@ 0xb2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	58d0      	ldr	r0, [r2, r3]
 800e7a6:	2380      	movs	r3, #128	@ 0x80
 800e7a8:	005b      	lsls	r3, r3, #1
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	2182      	movs	r1, #130	@ 0x82
 800e7ae:	f7f9 fd23 	bl	80081f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	0018      	movs	r0, r3
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	b002      	add	sp, #8
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20001a5c 	.word	0x20001a5c
 800e7c0:	40005c00 	.word	0x40005c00

0800e7c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7cc:	210f      	movs	r1, #15
 800e7ce:	187b      	adds	r3, r7, r1
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7d4:	260e      	movs	r6, #14
 800e7d6:	19bb      	adds	r3, r7, r6
 800e7d8:	2200      	movs	r2, #0
 800e7da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	23b2      	movs	r3, #178	@ 0xb2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	58d3      	ldr	r3, [r2, r3]
 800e7e4:	000d      	movs	r5, r1
 800e7e6:	187c      	adds	r4, r7, r1
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f7f8 f96b 	bl	8006ac4 <HAL_PCD_Start>
 800e7ee:	0003      	movs	r3, r0
 800e7f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f2:	19bc      	adds	r4, r7, r6
 800e7f4:	197b      	adds	r3, r7, r5
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	0018      	movs	r0, r3
 800e7fa:	f000 f9e6 	bl	800ebca <USBD_Get_USB_Status>
 800e7fe:	0003      	movs	r3, r0
 800e800:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e802:	19bb      	adds	r3, r7, r6
 800e804:	781b      	ldrb	r3, [r3, #0]
}
 800e806:	0018      	movs	r0, r3
 800e808:	46bd      	mov	sp, r7
 800e80a:	b005      	add	sp, #20
 800e80c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e80e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e80e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e810:	b085      	sub	sp, #20
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
 800e816:	000c      	movs	r4, r1
 800e818:	0010      	movs	r0, r2
 800e81a:	0019      	movs	r1, r3
 800e81c:	1cfb      	adds	r3, r7, #3
 800e81e:	1c22      	adds	r2, r4, #0
 800e820:	701a      	strb	r2, [r3, #0]
 800e822:	1cbb      	adds	r3, r7, #2
 800e824:	1c02      	adds	r2, r0, #0
 800e826:	701a      	strb	r2, [r3, #0]
 800e828:	003b      	movs	r3, r7
 800e82a:	1c0a      	adds	r2, r1, #0
 800e82c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e82e:	260f      	movs	r6, #15
 800e830:	19bb      	adds	r3, r7, r6
 800e832:	2200      	movs	r2, #0
 800e834:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e836:	250e      	movs	r5, #14
 800e838:	197b      	adds	r3, r7, r5
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	23b2      	movs	r3, #178	@ 0xb2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	58d0      	ldr	r0, [r2, r3]
 800e846:	19bc      	adds	r4, r7, r6
 800e848:	1cbb      	adds	r3, r7, #2
 800e84a:	781d      	ldrb	r5, [r3, #0]
 800e84c:	003b      	movs	r3, r7
 800e84e:	881a      	ldrh	r2, [r3, #0]
 800e850:	1cfb      	adds	r3, r7, #3
 800e852:	7819      	ldrb	r1, [r3, #0]
 800e854:	002b      	movs	r3, r5
 800e856:	f7f8 fa9b 	bl	8006d90 <HAL_PCD_EP_Open>
 800e85a:	0003      	movs	r3, r0
 800e85c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e85e:	250e      	movs	r5, #14
 800e860:	197c      	adds	r4, r7, r5
 800e862:	19bb      	adds	r3, r7, r6
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	0018      	movs	r0, r3
 800e868:	f000 f9af 	bl	800ebca <USBD_Get_USB_Status>
 800e86c:	0003      	movs	r3, r0
 800e86e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e870:	197b      	adds	r3, r7, r5
 800e872:	781b      	ldrb	r3, [r3, #0]
}
 800e874:	0018      	movs	r0, r3
 800e876:	46bd      	mov	sp, r7
 800e878:	b005      	add	sp, #20
 800e87a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e87c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	000a      	movs	r2, r1
 800e886:	1cfb      	adds	r3, r7, #3
 800e888:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e88a:	210f      	movs	r1, #15
 800e88c:	187b      	adds	r3, r7, r1
 800e88e:	2200      	movs	r2, #0
 800e890:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e892:	260e      	movs	r6, #14
 800e894:	19bb      	adds	r3, r7, r6
 800e896:	2200      	movs	r2, #0
 800e898:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	23b2      	movs	r3, #178	@ 0xb2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	58d2      	ldr	r2, [r2, r3]
 800e8a2:	000d      	movs	r5, r1
 800e8a4:	187c      	adds	r4, r7, r1
 800e8a6:	1cfb      	adds	r3, r7, #3
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	0019      	movs	r1, r3
 800e8ac:	0010      	movs	r0, r2
 800e8ae:	f7f8 fae0 	bl	8006e72 <HAL_PCD_EP_Close>
 800e8b2:	0003      	movs	r3, r0
 800e8b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8b6:	19bc      	adds	r4, r7, r6
 800e8b8:	197b      	adds	r3, r7, r5
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f000 f984 	bl	800ebca <USBD_Get_USB_Status>
 800e8c2:	0003      	movs	r3, r0
 800e8c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e8c6:	19bb      	adds	r3, r7, r6
 800e8c8:	781b      	ldrb	r3, [r3, #0]
}
 800e8ca:	0018      	movs	r0, r3
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	b005      	add	sp, #20
 800e8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e8d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d4:	b085      	sub	sp, #20
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
 800e8da:	000a      	movs	r2, r1
 800e8dc:	1cfb      	adds	r3, r7, #3
 800e8de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e0:	210f      	movs	r1, #15
 800e8e2:	187b      	adds	r3, r7, r1
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e8:	260e      	movs	r6, #14
 800e8ea:	19bb      	adds	r3, r7, r6
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	23b2      	movs	r3, #178	@ 0xb2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	58d2      	ldr	r2, [r2, r3]
 800e8f8:	000d      	movs	r5, r1
 800e8fa:	187c      	adds	r4, r7, r1
 800e8fc:	1cfb      	adds	r3, r7, #3
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	0019      	movs	r1, r3
 800e902:	0010      	movs	r0, r2
 800e904:	f7f8 fb96 	bl	8007034 <HAL_PCD_EP_SetStall>
 800e908:	0003      	movs	r3, r0
 800e90a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e90c:	19bc      	adds	r4, r7, r6
 800e90e:	197b      	adds	r3, r7, r5
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	0018      	movs	r0, r3
 800e914:	f000 f959 	bl	800ebca <USBD_Get_USB_Status>
 800e918:	0003      	movs	r3, r0
 800e91a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e91c:	19bb      	adds	r3, r7, r6
 800e91e:	781b      	ldrb	r3, [r3, #0]
}
 800e920:	0018      	movs	r0, r3
 800e922:	46bd      	mov	sp, r7
 800e924:	b005      	add	sp, #20
 800e926:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e928 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e92a:	b085      	sub	sp, #20
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	000a      	movs	r2, r1
 800e932:	1cfb      	adds	r3, r7, #3
 800e934:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e936:	210f      	movs	r1, #15
 800e938:	187b      	adds	r3, r7, r1
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e93e:	260e      	movs	r6, #14
 800e940:	19bb      	adds	r3, r7, r6
 800e942:	2200      	movs	r2, #0
 800e944:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	23b2      	movs	r3, #178	@ 0xb2
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	58d2      	ldr	r2, [r2, r3]
 800e94e:	000d      	movs	r5, r1
 800e950:	187c      	adds	r4, r7, r1
 800e952:	1cfb      	adds	r3, r7, #3
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	0019      	movs	r1, r3
 800e958:	0010      	movs	r0, r2
 800e95a:	f7f8 fbc9 	bl	80070f0 <HAL_PCD_EP_ClrStall>
 800e95e:	0003      	movs	r3, r0
 800e960:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e962:	19bc      	adds	r4, r7, r6
 800e964:	197b      	adds	r3, r7, r5
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	0018      	movs	r0, r3
 800e96a:	f000 f92e 	bl	800ebca <USBD_Get_USB_Status>
 800e96e:	0003      	movs	r3, r0
 800e970:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e972:	19bb      	adds	r3, r7, r6
 800e974:	781b      	ldrb	r3, [r3, #0]
}
 800e976:	0018      	movs	r0, r3
 800e978:	46bd      	mov	sp, r7
 800e97a:	b005      	add	sp, #20
 800e97c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e97e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b084      	sub	sp, #16
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	000a      	movs	r2, r1
 800e988:	1cfb      	adds	r3, r7, #3
 800e98a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	23b2      	movs	r3, #178	@ 0xb2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	58d3      	ldr	r3, [r2, r3]
 800e994:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e996:	1cfb      	adds	r3, r7, #3
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	b25b      	sxtb	r3, r3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	da0c      	bge.n	800e9ba <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e9a0:	1cfb      	adds	r3, r7, #3
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	227f      	movs	r2, #127	@ 0x7f
 800e9a6:	401a      	ands	r2, r3
 800e9a8:	68f9      	ldr	r1, [r7, #12]
 800e9aa:	0013      	movs	r3, r2
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	189b      	adds	r3, r3, r2
 800e9b0:	00db      	lsls	r3, r3, #3
 800e9b2:	18cb      	adds	r3, r1, r3
 800e9b4:	3316      	adds	r3, #22
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	e00d      	b.n	800e9d6 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e9ba:	1cfb      	adds	r3, r7, #3
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	227f      	movs	r2, #127	@ 0x7f
 800e9c0:	401a      	ands	r2, r3
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	23ab      	movs	r3, #171	@ 0xab
 800e9c6:	0059      	lsls	r1, r3, #1
 800e9c8:	0013      	movs	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	189b      	adds	r3, r3, r2
 800e9ce:	00db      	lsls	r3, r3, #3
 800e9d0:	18c3      	adds	r3, r0, r3
 800e9d2:	185b      	adds	r3, r3, r1
 800e9d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e9d6:	0018      	movs	r0, r3
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	b004      	add	sp, #16
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	000a      	movs	r2, r1
 800e9e8:	1cfb      	adds	r3, r7, #3
 800e9ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ec:	210f      	movs	r1, #15
 800e9ee:	187b      	adds	r3, r7, r1
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9f4:	260e      	movs	r6, #14
 800e9f6:	19bb      	adds	r3, r7, r6
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	23b2      	movs	r3, #178	@ 0xb2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	58d2      	ldr	r2, [r2, r3]
 800ea04:	000d      	movs	r5, r1
 800ea06:	187c      	adds	r4, r7, r1
 800ea08:	1cfb      	adds	r3, r7, #3
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	0019      	movs	r1, r3
 800ea0e:	0010      	movs	r0, r2
 800ea10:	f7f8 f994 	bl	8006d3c <HAL_PCD_SetAddress>
 800ea14:	0003      	movs	r3, r0
 800ea16:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea18:	19bc      	adds	r4, r7, r6
 800ea1a:	197b      	adds	r3, r7, r5
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	0018      	movs	r0, r3
 800ea20:	f000 f8d3 	bl	800ebca <USBD_Get_USB_Status>
 800ea24:	0003      	movs	r3, r0
 800ea26:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ea28:	19bb      	adds	r3, r7, r6
 800ea2a:	781b      	ldrb	r3, [r3, #0]
}
 800ea2c:	0018      	movs	r0, r3
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	b005      	add	sp, #20
 800ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea34 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	607a      	str	r2, [r7, #4]
 800ea3e:	603b      	str	r3, [r7, #0]
 800ea40:	230b      	movs	r3, #11
 800ea42:	18fb      	adds	r3, r7, r3
 800ea44:	1c0a      	adds	r2, r1, #0
 800ea46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea48:	2617      	movs	r6, #23
 800ea4a:	19bb      	adds	r3, r7, r6
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea50:	2516      	movs	r5, #22
 800ea52:	197b      	adds	r3, r7, r5
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	23b2      	movs	r3, #178	@ 0xb2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	58d0      	ldr	r0, [r2, r3]
 800ea60:	19bc      	adds	r4, r7, r6
 800ea62:	683d      	ldr	r5, [r7, #0]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	230b      	movs	r3, #11
 800ea68:	18fb      	adds	r3, r7, r3
 800ea6a:	7819      	ldrb	r1, [r3, #0]
 800ea6c:	002b      	movs	r3, r5
 800ea6e:	f7f8 faa4 	bl	8006fba <HAL_PCD_EP_Transmit>
 800ea72:	0003      	movs	r3, r0
 800ea74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea76:	2516      	movs	r5, #22
 800ea78:	197c      	adds	r4, r7, r5
 800ea7a:	19bb      	adds	r3, r7, r6
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	0018      	movs	r0, r3
 800ea80:	f000 f8a3 	bl	800ebca <USBD_Get_USB_Status>
 800ea84:	0003      	movs	r3, r0
 800ea86:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ea88:	197b      	adds	r3, r7, r5
 800ea8a:	781b      	ldrb	r3, [r3, #0]
}
 800ea8c:	0018      	movs	r0, r3
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	b007      	add	sp, #28
 800ea92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	607a      	str	r2, [r7, #4]
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	230b      	movs	r3, #11
 800eaa2:	18fb      	adds	r3, r7, r3
 800eaa4:	1c0a      	adds	r2, r1, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa8:	2617      	movs	r6, #23
 800eaaa:	19bb      	adds	r3, r7, r6
 800eaac:	2200      	movs	r2, #0
 800eaae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eab0:	2516      	movs	r5, #22
 800eab2:	197b      	adds	r3, r7, r5
 800eab4:	2200      	movs	r2, #0
 800eab6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eab8:	68fa      	ldr	r2, [r7, #12]
 800eaba:	23b2      	movs	r3, #178	@ 0xb2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	58d0      	ldr	r0, [r2, r3]
 800eac0:	19bc      	adds	r4, r7, r6
 800eac2:	683d      	ldr	r5, [r7, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	230b      	movs	r3, #11
 800eac8:	18fb      	adds	r3, r7, r3
 800eaca:	7819      	ldrb	r1, [r3, #0]
 800eacc:	002b      	movs	r3, r5
 800eace:	f7f8 fa23 	bl	8006f18 <HAL_PCD_EP_Receive>
 800ead2:	0003      	movs	r3, r0
 800ead4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ead6:	2516      	movs	r5, #22
 800ead8:	197c      	adds	r4, r7, r5
 800eada:	19bb      	adds	r3, r7, r6
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	0018      	movs	r0, r3
 800eae0:	f000 f873 	bl	800ebca <USBD_Get_USB_Status>
 800eae4:	0003      	movs	r3, r0
 800eae6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800eae8:	197b      	adds	r3, r7, r5
 800eaea:	781b      	ldrb	r3, [r3, #0]
}
 800eaec:	0018      	movs	r0, r3
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	b007      	add	sp, #28
 800eaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eaf4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	000a      	movs	r2, r1
 800eafe:	1cfb      	adds	r3, r7, #3
 800eb00:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	23b2      	movs	r3, #178	@ 0xb2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	58d2      	ldr	r2, [r2, r3]
 800eb0a:	1cfb      	adds	r3, r7, #3
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	0019      	movs	r1, r3
 800eb10:	0010      	movs	r0, r2
 800eb12:	f7f8 fa39 	bl	8006f88 <HAL_PCD_EP_GetRxCount>
 800eb16:	0003      	movs	r3, r0
}
 800eb18:	0018      	movs	r0, r3
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	b002      	add	sp, #8
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	000a      	movs	r2, r1
 800eb2a:	1cfb      	adds	r3, r7, #3
 800eb2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800eb2e:	1cfb      	adds	r3, r7, #3
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d002      	beq.n	800eb3c <HAL_PCDEx_LPM_Callback+0x1c>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d014      	beq.n	800eb64 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800eb3a:	e025      	b.n	800eb88 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	7adb      	ldrb	r3, [r3, #11]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d007      	beq.n	800eb54 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 800eb44:	f000 f83a 	bl	800ebbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb48:	4b11      	ldr	r3, [pc, #68]	@ (800eb90 <HAL_PCDEx_LPM_Callback+0x70>)
 800eb4a:	691a      	ldr	r2, [r3, #16]
 800eb4c:	4b10      	ldr	r3, [pc, #64]	@ (800eb90 <HAL_PCDEx_LPM_Callback+0x70>)
 800eb4e:	2106      	movs	r1, #6
 800eb50:	438a      	bics	r2, r1
 800eb52:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	23b7      	movs	r3, #183	@ 0xb7
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	58d3      	ldr	r3, [r2, r3]
 800eb5c:	0018      	movs	r0, r3
 800eb5e:	f7fe f995 	bl	800ce8c <USBD_LL_Resume>
    break;
 800eb62:	e011      	b.n	800eb88 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	23b7      	movs	r3, #183	@ 0xb7
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	58d3      	ldr	r3, [r2, r3]
 800eb6c:	0018      	movs	r0, r3
 800eb6e:	f7fe f975 	bl	800ce5c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7adb      	ldrb	r3, [r3, #11]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d005      	beq.n	800eb86 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb7a:	4b05      	ldr	r3, [pc, #20]	@ (800eb90 <HAL_PCDEx_LPM_Callback+0x70>)
 800eb7c:	691a      	ldr	r2, [r3, #16]
 800eb7e:	4b04      	ldr	r3, [pc, #16]	@ (800eb90 <HAL_PCDEx_LPM_Callback+0x70>)
 800eb80:	2106      	movs	r1, #6
 800eb82:	430a      	orrs	r2, r1
 800eb84:	611a      	str	r2, [r3, #16]
    break;
 800eb86:	46c0      	nop			@ (mov r8, r8)
}
 800eb88:	46c0      	nop			@ (mov r8, r8)
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	b002      	add	sp, #8
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	e000ed00 	.word	0xe000ed00

0800eb94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb9c:	4b02      	ldr	r3, [pc, #8]	@ (800eba8 <USBD_static_malloc+0x14>)
}
 800eb9e:	0018      	movs	r0, r3
 800eba0:	46bd      	mov	sp, r7
 800eba2:	b002      	add	sp, #8
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	46c0      	nop			@ (mov r8, r8)
 800eba8:	20001d3c 	.word	0x20001d3c

0800ebac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]

}
 800ebb4:	46c0      	nop			@ (mov r8, r8)
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b002      	add	sp, #8
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ebc0:	f7f4 faca 	bl	8003158 <SystemClock_Config>
}
 800ebc4:	46c0      	nop			@ (mov r8, r8)
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}

0800ebca <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b084      	sub	sp, #16
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	0002      	movs	r2, r0
 800ebd2:	1dfb      	adds	r3, r7, #7
 800ebd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd6:	230f      	movs	r3, #15
 800ebd8:	18fb      	adds	r3, r7, r3
 800ebda:	2200      	movs	r2, #0
 800ebdc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800ebde:	1dfb      	adds	r3, r7, #7
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d017      	beq.n	800ec16 <USBD_Get_USB_Status+0x4c>
 800ebe6:	dc1b      	bgt.n	800ec20 <USBD_Get_USB_Status+0x56>
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d00f      	beq.n	800ec0c <USBD_Get_USB_Status+0x42>
 800ebec:	dc18      	bgt.n	800ec20 <USBD_Get_USB_Status+0x56>
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <USBD_Get_USB_Status+0x2e>
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d005      	beq.n	800ec02 <USBD_Get_USB_Status+0x38>
 800ebf6:	e013      	b.n	800ec20 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ebf8:	230f      	movs	r3, #15
 800ebfa:	18fb      	adds	r3, r7, r3
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	701a      	strb	r2, [r3, #0]
    break;
 800ec00:	e013      	b.n	800ec2a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec02:	230f      	movs	r3, #15
 800ec04:	18fb      	adds	r3, r7, r3
 800ec06:	2203      	movs	r2, #3
 800ec08:	701a      	strb	r2, [r3, #0]
    break;
 800ec0a:	e00e      	b.n	800ec2a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec0c:	230f      	movs	r3, #15
 800ec0e:	18fb      	adds	r3, r7, r3
 800ec10:	2201      	movs	r2, #1
 800ec12:	701a      	strb	r2, [r3, #0]
    break;
 800ec14:	e009      	b.n	800ec2a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec16:	230f      	movs	r3, #15
 800ec18:	18fb      	adds	r3, r7, r3
 800ec1a:	2203      	movs	r2, #3
 800ec1c:	701a      	strb	r2, [r3, #0]
    break;
 800ec1e:	e004      	b.n	800ec2a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ec20:	230f      	movs	r3, #15
 800ec22:	18fb      	adds	r3, r7, r3
 800ec24:	2203      	movs	r2, #3
 800ec26:	701a      	strb	r2, [r3, #0]
    break;
 800ec28:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800ec2a:	230f      	movs	r3, #15
 800ec2c:	18fb      	adds	r3, r7, r3
 800ec2e:	781b      	ldrb	r3, [r3, #0]
}
 800ec30:	0018      	movs	r0, r3
 800ec32:	46bd      	mov	sp, r7
 800ec34:	b004      	add	sp, #16
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <sulp>:
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	0016      	movs	r6, r2
 800ec3c:	000d      	movs	r5, r1
 800ec3e:	f003 fae9 	bl	8012214 <__ulp>
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d00d      	beq.n	800ec62 <sulp+0x2a>
 800ec46:	236b      	movs	r3, #107	@ 0x6b
 800ec48:	006a      	lsls	r2, r5, #1
 800ec4a:	0d52      	lsrs	r2, r2, #21
 800ec4c:	1a9b      	subs	r3, r3, r2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	dd07      	ble.n	800ec62 <sulp+0x2a>
 800ec52:	2400      	movs	r4, #0
 800ec54:	4a03      	ldr	r2, [pc, #12]	@ (800ec64 <sulp+0x2c>)
 800ec56:	051b      	lsls	r3, r3, #20
 800ec58:	189d      	adds	r5, r3, r2
 800ec5a:	002b      	movs	r3, r5
 800ec5c:	0022      	movs	r2, r4
 800ec5e:	f7f2 fc8d 	bl	800157c <__aeabi_dmul>
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	3ff00000 	.word	0x3ff00000

0800ec68 <_strtod_l>:
 800ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec6a:	b0a3      	sub	sp, #140	@ 0x8c
 800ec6c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2600      	movs	r6, #0
 800ec72:	2700      	movs	r7, #0
 800ec74:	9005      	str	r0, [sp, #20]
 800ec76:	9109      	str	r1, [sp, #36]	@ 0x24
 800ec78:	921e      	str	r2, [sp, #120]	@ 0x78
 800ec7a:	911d      	str	r1, [sp, #116]	@ 0x74
 800ec7c:	780a      	ldrb	r2, [r1, #0]
 800ec7e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ec80:	d053      	beq.n	800ed2a <_strtod_l+0xc2>
 800ec82:	d83f      	bhi.n	800ed04 <_strtod_l+0x9c>
 800ec84:	2a0d      	cmp	r2, #13
 800ec86:	d839      	bhi.n	800ecfc <_strtod_l+0x94>
 800ec88:	2a08      	cmp	r2, #8
 800ec8a:	d839      	bhi.n	800ed00 <_strtod_l+0x98>
 800ec8c:	2a00      	cmp	r2, #0
 800ec8e:	d042      	beq.n	800ed16 <_strtod_l+0xae>
 800ec90:	2200      	movs	r2, #0
 800ec92:	9212      	str	r2, [sp, #72]	@ 0x48
 800ec94:	2100      	movs	r1, #0
 800ec96:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800ec98:	910c      	str	r1, [sp, #48]	@ 0x30
 800ec9a:	782a      	ldrb	r2, [r5, #0]
 800ec9c:	2a30      	cmp	r2, #48	@ 0x30
 800ec9e:	d000      	beq.n	800eca2 <_strtod_l+0x3a>
 800eca0:	e083      	b.n	800edaa <_strtod_l+0x142>
 800eca2:	786a      	ldrb	r2, [r5, #1]
 800eca4:	3120      	adds	r1, #32
 800eca6:	438a      	bics	r2, r1
 800eca8:	2a58      	cmp	r2, #88	@ 0x58
 800ecaa:	d000      	beq.n	800ecae <_strtod_l+0x46>
 800ecac:	e073      	b.n	800ed96 <_strtod_l+0x12e>
 800ecae:	9302      	str	r3, [sp, #8]
 800ecb0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecb2:	4a9b      	ldr	r2, [pc, #620]	@ (800ef20 <_strtod_l+0x2b8>)
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	ab1e      	add	r3, sp, #120	@ 0x78
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	9805      	ldr	r0, [sp, #20]
 800ecbc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ecbe:	a91d      	add	r1, sp, #116	@ 0x74
 800ecc0:	f002 fb60 	bl	8011384 <__gethex>
 800ecc4:	230f      	movs	r3, #15
 800ecc6:	0002      	movs	r2, r0
 800ecc8:	401a      	ands	r2, r3
 800ecca:	0004      	movs	r4, r0
 800eccc:	9206      	str	r2, [sp, #24]
 800ecce:	4218      	tst	r0, r3
 800ecd0:	d005      	beq.n	800ecde <_strtod_l+0x76>
 800ecd2:	2a06      	cmp	r2, #6
 800ecd4:	d12b      	bne.n	800ed2e <_strtod_l+0xc6>
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	3501      	adds	r5, #1
 800ecda:	951d      	str	r5, [sp, #116]	@ 0x74
 800ecdc:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecde:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <_strtod_l+0x82>
 800ece4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ece6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ece8:	6013      	str	r3, [r2, #0]
 800ecea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d019      	beq.n	800ed24 <_strtod_l+0xbc>
 800ecf0:	2380      	movs	r3, #128	@ 0x80
 800ecf2:	0030      	movs	r0, r6
 800ecf4:	061b      	lsls	r3, r3, #24
 800ecf6:	18f9      	adds	r1, r7, r3
 800ecf8:	b023      	add	sp, #140	@ 0x8c
 800ecfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecfc:	2a20      	cmp	r2, #32
 800ecfe:	d1c7      	bne.n	800ec90 <_strtod_l+0x28>
 800ed00:	3101      	adds	r1, #1
 800ed02:	e7ba      	b.n	800ec7a <_strtod_l+0x12>
 800ed04:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed06:	d1c3      	bne.n	800ec90 <_strtod_l+0x28>
 800ed08:	3a2c      	subs	r2, #44	@ 0x2c
 800ed0a:	9212      	str	r2, [sp, #72]	@ 0x48
 800ed0c:	1c4a      	adds	r2, r1, #1
 800ed0e:	921d      	str	r2, [sp, #116]	@ 0x74
 800ed10:	784a      	ldrb	r2, [r1, #1]
 800ed12:	2a00      	cmp	r2, #0
 800ed14:	d1be      	bne.n	800ec94 <_strtod_l+0x2c>
 800ed16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed18:	931d      	str	r3, [sp, #116]	@ 0x74
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ed1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1df      	bne.n	800ece4 <_strtod_l+0x7c>
 800ed24:	0030      	movs	r0, r6
 800ed26:	0039      	movs	r1, r7
 800ed28:	e7e6      	b.n	800ecf8 <_strtod_l+0x90>
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	e7ed      	b.n	800ed0a <_strtod_l+0xa2>
 800ed2e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ed30:	2a00      	cmp	r2, #0
 800ed32:	d007      	beq.n	800ed44 <_strtod_l+0xdc>
 800ed34:	2135      	movs	r1, #53	@ 0x35
 800ed36:	a820      	add	r0, sp, #128	@ 0x80
 800ed38:	f003 fb62 	bl	8012400 <__copybits>
 800ed3c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ed3e:	9805      	ldr	r0, [sp, #20]
 800ed40:	f002 ff24 	bl	8011b8c <_Bfree>
 800ed44:	9806      	ldr	r0, [sp, #24]
 800ed46:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ed48:	3801      	subs	r0, #1
 800ed4a:	2804      	cmp	r0, #4
 800ed4c:	d806      	bhi.n	800ed5c <_strtod_l+0xf4>
 800ed4e:	f7f1 f9df 	bl	8000110 <__gnu_thumb1_case_uqi>
 800ed52:	0312      	.short	0x0312
 800ed54:	1e1c      	.short	0x1e1c
 800ed56:	12          	.byte	0x12
 800ed57:	00          	.byte	0x00
 800ed58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ed5a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800ed5c:	05e4      	lsls	r4, r4, #23
 800ed5e:	d502      	bpl.n	800ed66 <_strtod_l+0xfe>
 800ed60:	2380      	movs	r3, #128	@ 0x80
 800ed62:	061b      	lsls	r3, r3, #24
 800ed64:	431f      	orrs	r7, r3
 800ed66:	4b6f      	ldr	r3, [pc, #444]	@ (800ef24 <_strtod_l+0x2bc>)
 800ed68:	423b      	tst	r3, r7
 800ed6a:	d1b8      	bne.n	800ecde <_strtod_l+0x76>
 800ed6c:	f001 fb9a 	bl	80104a4 <__errno>
 800ed70:	2322      	movs	r3, #34	@ 0x22
 800ed72:	6003      	str	r3, [r0, #0]
 800ed74:	e7b3      	b.n	800ecde <_strtod_l+0x76>
 800ed76:	496c      	ldr	r1, [pc, #432]	@ (800ef28 <_strtod_l+0x2c0>)
 800ed78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ed7a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ed7c:	400a      	ands	r2, r1
 800ed7e:	496b      	ldr	r1, [pc, #428]	@ (800ef2c <_strtod_l+0x2c4>)
 800ed80:	185b      	adds	r3, r3, r1
 800ed82:	051b      	lsls	r3, r3, #20
 800ed84:	431a      	orrs	r2, r3
 800ed86:	0017      	movs	r7, r2
 800ed88:	e7e8      	b.n	800ed5c <_strtod_l+0xf4>
 800ed8a:	4f66      	ldr	r7, [pc, #408]	@ (800ef24 <_strtod_l+0x2bc>)
 800ed8c:	e7e6      	b.n	800ed5c <_strtod_l+0xf4>
 800ed8e:	2601      	movs	r6, #1
 800ed90:	4f67      	ldr	r7, [pc, #412]	@ (800ef30 <_strtod_l+0x2c8>)
 800ed92:	4276      	negs	r6, r6
 800ed94:	e7e2      	b.n	800ed5c <_strtod_l+0xf4>
 800ed96:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed98:	1c5a      	adds	r2, r3, #1
 800ed9a:	921d      	str	r2, [sp, #116]	@ 0x74
 800ed9c:	785b      	ldrb	r3, [r3, #1]
 800ed9e:	2b30      	cmp	r3, #48	@ 0x30
 800eda0:	d0f9      	beq.n	800ed96 <_strtod_l+0x12e>
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d09b      	beq.n	800ecde <_strtod_l+0x76>
 800eda6:	2301      	movs	r3, #1
 800eda8:	930c      	str	r3, [sp, #48]	@ 0x30
 800edaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800edac:	220a      	movs	r2, #10
 800edae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800edb0:	2300      	movs	r3, #0
 800edb2:	9310      	str	r3, [sp, #64]	@ 0x40
 800edb4:	930d      	str	r3, [sp, #52]	@ 0x34
 800edb6:	9308      	str	r3, [sp, #32]
 800edb8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800edba:	7804      	ldrb	r4, [r0, #0]
 800edbc:	0023      	movs	r3, r4
 800edbe:	3b30      	subs	r3, #48	@ 0x30
 800edc0:	b2d9      	uxtb	r1, r3
 800edc2:	2909      	cmp	r1, #9
 800edc4:	d927      	bls.n	800ee16 <_strtod_l+0x1ae>
 800edc6:	2201      	movs	r2, #1
 800edc8:	495a      	ldr	r1, [pc, #360]	@ (800ef34 <_strtod_l+0x2cc>)
 800edca:	f001 fb07 	bl	80103dc <strncmp>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d033      	beq.n	800ee3a <_strtod_l+0x1d2>
 800edd2:	2000      	movs	r0, #0
 800edd4:	0023      	movs	r3, r4
 800edd6:	4684      	mov	ip, r0
 800edd8:	9a08      	ldr	r2, [sp, #32]
 800edda:	900e      	str	r0, [sp, #56]	@ 0x38
 800eddc:	9206      	str	r2, [sp, #24]
 800edde:	2220      	movs	r2, #32
 800ede0:	0019      	movs	r1, r3
 800ede2:	4391      	bics	r1, r2
 800ede4:	000a      	movs	r2, r1
 800ede6:	2100      	movs	r1, #0
 800ede8:	9107      	str	r1, [sp, #28]
 800edea:	2a45      	cmp	r2, #69	@ 0x45
 800edec:	d000      	beq.n	800edf0 <_strtod_l+0x188>
 800edee:	e0cb      	b.n	800ef88 <_strtod_l+0x320>
 800edf0:	9b06      	ldr	r3, [sp, #24]
 800edf2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800edf4:	4303      	orrs	r3, r0
 800edf6:	4313      	orrs	r3, r2
 800edf8:	428b      	cmp	r3, r1
 800edfa:	d08c      	beq.n	800ed16 <_strtod_l+0xae>
 800edfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800edfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee00:	3301      	adds	r3, #1
 800ee02:	931d      	str	r3, [sp, #116]	@ 0x74
 800ee04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee06:	785b      	ldrb	r3, [r3, #1]
 800ee08:	2b2b      	cmp	r3, #43	@ 0x2b
 800ee0a:	d07b      	beq.n	800ef04 <_strtod_l+0x29c>
 800ee0c:	000c      	movs	r4, r1
 800ee0e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ee10:	d17e      	bne.n	800ef10 <_strtod_l+0x2a8>
 800ee12:	2401      	movs	r4, #1
 800ee14:	e077      	b.n	800ef06 <_strtod_l+0x29e>
 800ee16:	9908      	ldr	r1, [sp, #32]
 800ee18:	2908      	cmp	r1, #8
 800ee1a:	dc09      	bgt.n	800ee30 <_strtod_l+0x1c8>
 800ee1c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ee1e:	4351      	muls	r1, r2
 800ee20:	185b      	adds	r3, r3, r1
 800ee22:	930d      	str	r3, [sp, #52]	@ 0x34
 800ee24:	9b08      	ldr	r3, [sp, #32]
 800ee26:	3001      	adds	r0, #1
 800ee28:	3301      	adds	r3, #1
 800ee2a:	9308      	str	r3, [sp, #32]
 800ee2c:	901d      	str	r0, [sp, #116]	@ 0x74
 800ee2e:	e7c3      	b.n	800edb8 <_strtod_l+0x150>
 800ee30:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ee32:	4355      	muls	r5, r2
 800ee34:	195b      	adds	r3, r3, r5
 800ee36:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee38:	e7f4      	b.n	800ee24 <_strtod_l+0x1bc>
 800ee3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	921d      	str	r2, [sp, #116]	@ 0x74
 800ee40:	9a08      	ldr	r2, [sp, #32]
 800ee42:	785b      	ldrb	r3, [r3, #1]
 800ee44:	2a00      	cmp	r2, #0
 800ee46:	d03e      	beq.n	800eec6 <_strtod_l+0x25e>
 800ee48:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee4a:	9206      	str	r2, [sp, #24]
 800ee4c:	001a      	movs	r2, r3
 800ee4e:	3a30      	subs	r2, #48	@ 0x30
 800ee50:	2a09      	cmp	r2, #9
 800ee52:	d912      	bls.n	800ee7a <_strtod_l+0x212>
 800ee54:	2201      	movs	r2, #1
 800ee56:	4694      	mov	ip, r2
 800ee58:	e7c1      	b.n	800edde <_strtod_l+0x176>
 800ee5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ee5c:	3001      	adds	r0, #1
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	921d      	str	r2, [sp, #116]	@ 0x74
 800ee62:	785b      	ldrb	r3, [r3, #1]
 800ee64:	2b30      	cmp	r3, #48	@ 0x30
 800ee66:	d0f8      	beq.n	800ee5a <_strtod_l+0x1f2>
 800ee68:	001a      	movs	r2, r3
 800ee6a:	3a31      	subs	r2, #49	@ 0x31
 800ee6c:	2a08      	cmp	r2, #8
 800ee6e:	d844      	bhi.n	800eefa <_strtod_l+0x292>
 800ee70:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee72:	2000      	movs	r0, #0
 800ee74:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ee76:	9006      	str	r0, [sp, #24]
 800ee78:	9213      	str	r2, [sp, #76]	@ 0x4c
 800ee7a:	001c      	movs	r4, r3
 800ee7c:	1c42      	adds	r2, r0, #1
 800ee7e:	3c30      	subs	r4, #48	@ 0x30
 800ee80:	2b30      	cmp	r3, #48	@ 0x30
 800ee82:	d01a      	beq.n	800eeba <_strtod_l+0x252>
 800ee84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee86:	9906      	ldr	r1, [sp, #24]
 800ee88:	189b      	adds	r3, r3, r2
 800ee8a:	930e      	str	r3, [sp, #56]	@ 0x38
 800ee8c:	230a      	movs	r3, #10
 800ee8e:	469c      	mov	ip, r3
 800ee90:	9d06      	ldr	r5, [sp, #24]
 800ee92:	1c4b      	adds	r3, r1, #1
 800ee94:	1b5d      	subs	r5, r3, r5
 800ee96:	42aa      	cmp	r2, r5
 800ee98:	dc17      	bgt.n	800eeca <_strtod_l+0x262>
 800ee9a:	43c3      	mvns	r3, r0
 800ee9c:	9a06      	ldr	r2, [sp, #24]
 800ee9e:	17db      	asrs	r3, r3, #31
 800eea0:	4003      	ands	r3, r0
 800eea2:	18d1      	adds	r1, r2, r3
 800eea4:	3201      	adds	r2, #1
 800eea6:	18d3      	adds	r3, r2, r3
 800eea8:	9306      	str	r3, [sp, #24]
 800eeaa:	2908      	cmp	r1, #8
 800eeac:	dc1c      	bgt.n	800eee8 <_strtod_l+0x280>
 800eeae:	230a      	movs	r3, #10
 800eeb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eeb2:	4353      	muls	r3, r2
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	18e3      	adds	r3, r4, r3
 800eeb8:	930d      	str	r3, [sp, #52]	@ 0x34
 800eeba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eebc:	0010      	movs	r0, r2
 800eebe:	1c59      	adds	r1, r3, #1
 800eec0:	911d      	str	r1, [sp, #116]	@ 0x74
 800eec2:	785b      	ldrb	r3, [r3, #1]
 800eec4:	e7c2      	b.n	800ee4c <_strtod_l+0x1e4>
 800eec6:	9808      	ldr	r0, [sp, #32]
 800eec8:	e7cc      	b.n	800ee64 <_strtod_l+0x1fc>
 800eeca:	2908      	cmp	r1, #8
 800eecc:	dc05      	bgt.n	800eeda <_strtod_l+0x272>
 800eece:	4665      	mov	r5, ip
 800eed0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800eed2:	4369      	muls	r1, r5
 800eed4:	910d      	str	r1, [sp, #52]	@ 0x34
 800eed6:	0019      	movs	r1, r3
 800eed8:	e7da      	b.n	800ee90 <_strtod_l+0x228>
 800eeda:	2b10      	cmp	r3, #16
 800eedc:	dcfb      	bgt.n	800eed6 <_strtod_l+0x26e>
 800eede:	4661      	mov	r1, ip
 800eee0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800eee2:	434d      	muls	r5, r1
 800eee4:	9510      	str	r5, [sp, #64]	@ 0x40
 800eee6:	e7f6      	b.n	800eed6 <_strtod_l+0x26e>
 800eee8:	2200      	movs	r2, #0
 800eeea:	290f      	cmp	r1, #15
 800eeec:	dce5      	bgt.n	800eeba <_strtod_l+0x252>
 800eeee:	230a      	movs	r3, #10
 800eef0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800eef2:	435d      	muls	r5, r3
 800eef4:	1963      	adds	r3, r4, r5
 800eef6:	9310      	str	r3, [sp, #64]	@ 0x40
 800eef8:	e7df      	b.n	800eeba <_strtod_l+0x252>
 800eefa:	2200      	movs	r2, #0
 800eefc:	920e      	str	r2, [sp, #56]	@ 0x38
 800eefe:	9206      	str	r2, [sp, #24]
 800ef00:	3201      	adds	r2, #1
 800ef02:	e7a8      	b.n	800ee56 <_strtod_l+0x1ee>
 800ef04:	2400      	movs	r4, #0
 800ef06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef08:	3302      	adds	r3, #2
 800ef0a:	931d      	str	r3, [sp, #116]	@ 0x74
 800ef0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef0e:	789b      	ldrb	r3, [r3, #2]
 800ef10:	001a      	movs	r2, r3
 800ef12:	3a30      	subs	r2, #48	@ 0x30
 800ef14:	2a09      	cmp	r2, #9
 800ef16:	d913      	bls.n	800ef40 <_strtod_l+0x2d8>
 800ef18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef1a:	921d      	str	r2, [sp, #116]	@ 0x74
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	e032      	b.n	800ef86 <_strtod_l+0x31e>
 800ef20:	08013420 	.word	0x08013420
 800ef24:	7ff00000 	.word	0x7ff00000
 800ef28:	ffefffff 	.word	0xffefffff
 800ef2c:	00000433 	.word	0x00000433
 800ef30:	7fffffff 	.word	0x7fffffff
 800ef34:	08013238 	.word	0x08013238
 800ef38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	921d      	str	r2, [sp, #116]	@ 0x74
 800ef3e:	785b      	ldrb	r3, [r3, #1]
 800ef40:	2b30      	cmp	r3, #48	@ 0x30
 800ef42:	d0f9      	beq.n	800ef38 <_strtod_l+0x2d0>
 800ef44:	2200      	movs	r2, #0
 800ef46:	9207      	str	r2, [sp, #28]
 800ef48:	001a      	movs	r2, r3
 800ef4a:	3a31      	subs	r2, #49	@ 0x31
 800ef4c:	2a08      	cmp	r2, #8
 800ef4e:	d81b      	bhi.n	800ef88 <_strtod_l+0x320>
 800ef50:	3b30      	subs	r3, #48	@ 0x30
 800ef52:	001a      	movs	r2, r3
 800ef54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef56:	9307      	str	r3, [sp, #28]
 800ef58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef5a:	1c59      	adds	r1, r3, #1
 800ef5c:	911d      	str	r1, [sp, #116]	@ 0x74
 800ef5e:	785b      	ldrb	r3, [r3, #1]
 800ef60:	001d      	movs	r5, r3
 800ef62:	3d30      	subs	r5, #48	@ 0x30
 800ef64:	2d09      	cmp	r5, #9
 800ef66:	d93a      	bls.n	800efde <_strtod_l+0x376>
 800ef68:	9d07      	ldr	r5, [sp, #28]
 800ef6a:	1b49      	subs	r1, r1, r5
 800ef6c:	000d      	movs	r5, r1
 800ef6e:	49b3      	ldr	r1, [pc, #716]	@ (800f23c <_strtod_l+0x5d4>)
 800ef70:	9107      	str	r1, [sp, #28]
 800ef72:	2d08      	cmp	r5, #8
 800ef74:	dc03      	bgt.n	800ef7e <_strtod_l+0x316>
 800ef76:	9207      	str	r2, [sp, #28]
 800ef78:	428a      	cmp	r2, r1
 800ef7a:	dd00      	ble.n	800ef7e <_strtod_l+0x316>
 800ef7c:	9107      	str	r1, [sp, #28]
 800ef7e:	2c00      	cmp	r4, #0
 800ef80:	d002      	beq.n	800ef88 <_strtod_l+0x320>
 800ef82:	9a07      	ldr	r2, [sp, #28]
 800ef84:	4252      	negs	r2, r2
 800ef86:	9207      	str	r2, [sp, #28]
 800ef88:	9a06      	ldr	r2, [sp, #24]
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	d14b      	bne.n	800f026 <_strtod_l+0x3be>
 800ef8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef90:	4310      	orrs	r0, r2
 800ef92:	d000      	beq.n	800ef96 <_strtod_l+0x32e>
 800ef94:	e6a3      	b.n	800ecde <_strtod_l+0x76>
 800ef96:	4662      	mov	r2, ip
 800ef98:	2a00      	cmp	r2, #0
 800ef9a:	d000      	beq.n	800ef9e <_strtod_l+0x336>
 800ef9c:	e6bb      	b.n	800ed16 <_strtod_l+0xae>
 800ef9e:	2b69      	cmp	r3, #105	@ 0x69
 800efa0:	d025      	beq.n	800efee <_strtod_l+0x386>
 800efa2:	dc21      	bgt.n	800efe8 <_strtod_l+0x380>
 800efa4:	2b49      	cmp	r3, #73	@ 0x49
 800efa6:	d022      	beq.n	800efee <_strtod_l+0x386>
 800efa8:	2b4e      	cmp	r3, #78	@ 0x4e
 800efaa:	d000      	beq.n	800efae <_strtod_l+0x346>
 800efac:	e6b3      	b.n	800ed16 <_strtod_l+0xae>
 800efae:	49a4      	ldr	r1, [pc, #656]	@ (800f240 <_strtod_l+0x5d8>)
 800efb0:	a81d      	add	r0, sp, #116	@ 0x74
 800efb2:	f002 fc1d 	bl	80117f0 <__match>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	d100      	bne.n	800efbc <_strtod_l+0x354>
 800efba:	e6ac      	b.n	800ed16 <_strtod_l+0xae>
 800efbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	2b28      	cmp	r3, #40	@ 0x28
 800efc2:	d12a      	bne.n	800f01a <_strtod_l+0x3b2>
 800efc4:	499f      	ldr	r1, [pc, #636]	@ (800f244 <_strtod_l+0x5dc>)
 800efc6:	aa20      	add	r2, sp, #128	@ 0x80
 800efc8:	a81d      	add	r0, sp, #116	@ 0x74
 800efca:	f002 fc25 	bl	8011818 <__hexnan>
 800efce:	2805      	cmp	r0, #5
 800efd0:	d123      	bne.n	800f01a <_strtod_l+0x3b2>
 800efd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800efd4:	4a9c      	ldr	r2, [pc, #624]	@ (800f248 <_strtod_l+0x5e0>)
 800efd6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800efd8:	431a      	orrs	r2, r3
 800efda:	0017      	movs	r7, r2
 800efdc:	e67f      	b.n	800ecde <_strtod_l+0x76>
 800efde:	210a      	movs	r1, #10
 800efe0:	434a      	muls	r2, r1
 800efe2:	18d2      	adds	r2, r2, r3
 800efe4:	3a30      	subs	r2, #48	@ 0x30
 800efe6:	e7b7      	b.n	800ef58 <_strtod_l+0x2f0>
 800efe8:	2b6e      	cmp	r3, #110	@ 0x6e
 800efea:	d0e0      	beq.n	800efae <_strtod_l+0x346>
 800efec:	e693      	b.n	800ed16 <_strtod_l+0xae>
 800efee:	4997      	ldr	r1, [pc, #604]	@ (800f24c <_strtod_l+0x5e4>)
 800eff0:	a81d      	add	r0, sp, #116	@ 0x74
 800eff2:	f002 fbfd 	bl	80117f0 <__match>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d100      	bne.n	800effc <_strtod_l+0x394>
 800effa:	e68c      	b.n	800ed16 <_strtod_l+0xae>
 800effc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800effe:	4994      	ldr	r1, [pc, #592]	@ (800f250 <_strtod_l+0x5e8>)
 800f000:	3b01      	subs	r3, #1
 800f002:	a81d      	add	r0, sp, #116	@ 0x74
 800f004:	931d      	str	r3, [sp, #116]	@ 0x74
 800f006:	f002 fbf3 	bl	80117f0 <__match>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	d102      	bne.n	800f014 <_strtod_l+0x3ac>
 800f00e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f010:	3301      	adds	r3, #1
 800f012:	931d      	str	r3, [sp, #116]	@ 0x74
 800f014:	2600      	movs	r6, #0
 800f016:	4f8c      	ldr	r7, [pc, #560]	@ (800f248 <_strtod_l+0x5e0>)
 800f018:	e661      	b.n	800ecde <_strtod_l+0x76>
 800f01a:	488e      	ldr	r0, [pc, #568]	@ (800f254 <_strtod_l+0x5ec>)
 800f01c:	f001 fa84 	bl	8010528 <nan>
 800f020:	0006      	movs	r6, r0
 800f022:	000f      	movs	r7, r1
 800f024:	e65b      	b.n	800ecde <_strtod_l+0x76>
 800f026:	9b07      	ldr	r3, [sp, #28]
 800f028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f02a:	1a9b      	subs	r3, r3, r2
 800f02c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f02e:	9b08      	ldr	r3, [sp, #32]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d101      	bne.n	800f038 <_strtod_l+0x3d0>
 800f034:	9b06      	ldr	r3, [sp, #24]
 800f036:	9308      	str	r3, [sp, #32]
 800f038:	9c06      	ldr	r4, [sp, #24]
 800f03a:	2c10      	cmp	r4, #16
 800f03c:	dd00      	ble.n	800f040 <_strtod_l+0x3d8>
 800f03e:	2410      	movs	r4, #16
 800f040:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f042:	f7f3 fa17 	bl	8002474 <__aeabi_ui2d>
 800f046:	9b06      	ldr	r3, [sp, #24]
 800f048:	0006      	movs	r6, r0
 800f04a:	000f      	movs	r7, r1
 800f04c:	2b09      	cmp	r3, #9
 800f04e:	dc13      	bgt.n	800f078 <_strtod_l+0x410>
 800f050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f052:	2b00      	cmp	r3, #0
 800f054:	d100      	bne.n	800f058 <_strtod_l+0x3f0>
 800f056:	e642      	b.n	800ecde <_strtod_l+0x76>
 800f058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	dc00      	bgt.n	800f060 <_strtod_l+0x3f8>
 800f05e:	e07e      	b.n	800f15e <_strtod_l+0x4f6>
 800f060:	2b16      	cmp	r3, #22
 800f062:	dc63      	bgt.n	800f12c <_strtod_l+0x4c4>
 800f064:	497c      	ldr	r1, [pc, #496]	@ (800f258 <_strtod_l+0x5f0>)
 800f066:	00db      	lsls	r3, r3, #3
 800f068:	18c9      	adds	r1, r1, r3
 800f06a:	0032      	movs	r2, r6
 800f06c:	6808      	ldr	r0, [r1, #0]
 800f06e:	6849      	ldr	r1, [r1, #4]
 800f070:	003b      	movs	r3, r7
 800f072:	f7f2 fa83 	bl	800157c <__aeabi_dmul>
 800f076:	e7d3      	b.n	800f020 <_strtod_l+0x3b8>
 800f078:	0022      	movs	r2, r4
 800f07a:	4b77      	ldr	r3, [pc, #476]	@ (800f258 <_strtod_l+0x5f0>)
 800f07c:	3a09      	subs	r2, #9
 800f07e:	00d2      	lsls	r2, r2, #3
 800f080:	189b      	adds	r3, r3, r2
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	f7f2 fa79 	bl	800157c <__aeabi_dmul>
 800f08a:	0006      	movs	r6, r0
 800f08c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f08e:	000f      	movs	r7, r1
 800f090:	f7f3 f9f0 	bl	8002474 <__aeabi_ui2d>
 800f094:	000b      	movs	r3, r1
 800f096:	0002      	movs	r2, r0
 800f098:	0039      	movs	r1, r7
 800f09a:	0030      	movs	r0, r6
 800f09c:	f7f1 fa6e 	bl	800057c <__aeabi_dadd>
 800f0a0:	9b06      	ldr	r3, [sp, #24]
 800f0a2:	0006      	movs	r6, r0
 800f0a4:	000f      	movs	r7, r1
 800f0a6:	2b0f      	cmp	r3, #15
 800f0a8:	ddd2      	ble.n	800f050 <_strtod_l+0x3e8>
 800f0aa:	9b06      	ldr	r3, [sp, #24]
 800f0ac:	1b1c      	subs	r4, r3, r4
 800f0ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0b0:	18e4      	adds	r4, r4, r3
 800f0b2:	2c00      	cmp	r4, #0
 800f0b4:	dc00      	bgt.n	800f0b8 <_strtod_l+0x450>
 800f0b6:	e09b      	b.n	800f1f0 <_strtod_l+0x588>
 800f0b8:	220f      	movs	r2, #15
 800f0ba:	0023      	movs	r3, r4
 800f0bc:	4013      	ands	r3, r2
 800f0be:	4214      	tst	r4, r2
 800f0c0:	d00a      	beq.n	800f0d8 <_strtod_l+0x470>
 800f0c2:	4965      	ldr	r1, [pc, #404]	@ (800f258 <_strtod_l+0x5f0>)
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	18c9      	adds	r1, r1, r3
 800f0c8:	0032      	movs	r2, r6
 800f0ca:	6808      	ldr	r0, [r1, #0]
 800f0cc:	6849      	ldr	r1, [r1, #4]
 800f0ce:	003b      	movs	r3, r7
 800f0d0:	f7f2 fa54 	bl	800157c <__aeabi_dmul>
 800f0d4:	0006      	movs	r6, r0
 800f0d6:	000f      	movs	r7, r1
 800f0d8:	230f      	movs	r3, #15
 800f0da:	439c      	bics	r4, r3
 800f0dc:	d073      	beq.n	800f1c6 <_strtod_l+0x55e>
 800f0de:	3326      	adds	r3, #38	@ 0x26
 800f0e0:	33ff      	adds	r3, #255	@ 0xff
 800f0e2:	429c      	cmp	r4, r3
 800f0e4:	dd4b      	ble.n	800f17e <_strtod_l+0x516>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	9306      	str	r3, [sp, #24]
 800f0ea:	9307      	str	r3, [sp, #28]
 800f0ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800f0ee:	9308      	str	r3, [sp, #32]
 800f0f0:	2322      	movs	r3, #34	@ 0x22
 800f0f2:	2600      	movs	r6, #0
 800f0f4:	9a05      	ldr	r2, [sp, #20]
 800f0f6:	4f54      	ldr	r7, [pc, #336]	@ (800f248 <_strtod_l+0x5e0>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0fc:	42b3      	cmp	r3, r6
 800f0fe:	d100      	bne.n	800f102 <_strtod_l+0x49a>
 800f100:	e5ed      	b.n	800ecde <_strtod_l+0x76>
 800f102:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f104:	9805      	ldr	r0, [sp, #20]
 800f106:	f002 fd41 	bl	8011b8c <_Bfree>
 800f10a:	9908      	ldr	r1, [sp, #32]
 800f10c:	9805      	ldr	r0, [sp, #20]
 800f10e:	f002 fd3d 	bl	8011b8c <_Bfree>
 800f112:	9907      	ldr	r1, [sp, #28]
 800f114:	9805      	ldr	r0, [sp, #20]
 800f116:	f002 fd39 	bl	8011b8c <_Bfree>
 800f11a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f11c:	9805      	ldr	r0, [sp, #20]
 800f11e:	f002 fd35 	bl	8011b8c <_Bfree>
 800f122:	9906      	ldr	r1, [sp, #24]
 800f124:	9805      	ldr	r0, [sp, #20]
 800f126:	f002 fd31 	bl	8011b8c <_Bfree>
 800f12a:	e5d8      	b.n	800ecde <_strtod_l+0x76>
 800f12c:	2325      	movs	r3, #37	@ 0x25
 800f12e:	9a06      	ldr	r2, [sp, #24]
 800f130:	1a9b      	subs	r3, r3, r2
 800f132:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f134:	4293      	cmp	r3, r2
 800f136:	dbb8      	blt.n	800f0aa <_strtod_l+0x442>
 800f138:	240f      	movs	r4, #15
 800f13a:	9b06      	ldr	r3, [sp, #24]
 800f13c:	4d46      	ldr	r5, [pc, #280]	@ (800f258 <_strtod_l+0x5f0>)
 800f13e:	1ae4      	subs	r4, r4, r3
 800f140:	00e1      	lsls	r1, r4, #3
 800f142:	1869      	adds	r1, r5, r1
 800f144:	0032      	movs	r2, r6
 800f146:	6808      	ldr	r0, [r1, #0]
 800f148:	6849      	ldr	r1, [r1, #4]
 800f14a:	003b      	movs	r3, r7
 800f14c:	f7f2 fa16 	bl	800157c <__aeabi_dmul>
 800f150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f152:	1b1c      	subs	r4, r3, r4
 800f154:	00e4      	lsls	r4, r4, #3
 800f156:	192d      	adds	r5, r5, r4
 800f158:	682a      	ldr	r2, [r5, #0]
 800f15a:	686b      	ldr	r3, [r5, #4]
 800f15c:	e789      	b.n	800f072 <_strtod_l+0x40a>
 800f15e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f160:	3316      	adds	r3, #22
 800f162:	dba2      	blt.n	800f0aa <_strtod_l+0x442>
 800f164:	9907      	ldr	r1, [sp, #28]
 800f166:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f168:	4b3b      	ldr	r3, [pc, #236]	@ (800f258 <_strtod_l+0x5f0>)
 800f16a:	1a52      	subs	r2, r2, r1
 800f16c:	00d2      	lsls	r2, r2, #3
 800f16e:	189b      	adds	r3, r3, r2
 800f170:	0030      	movs	r0, r6
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	0039      	movs	r1, r7
 800f178:	f7f1 fdc6 	bl	8000d08 <__aeabi_ddiv>
 800f17c:	e750      	b.n	800f020 <_strtod_l+0x3b8>
 800f17e:	2300      	movs	r3, #0
 800f180:	0030      	movs	r0, r6
 800f182:	0039      	movs	r1, r7
 800f184:	4d35      	ldr	r5, [pc, #212]	@ (800f25c <_strtod_l+0x5f4>)
 800f186:	1124      	asrs	r4, r4, #4
 800f188:	9309      	str	r3, [sp, #36]	@ 0x24
 800f18a:	2c01      	cmp	r4, #1
 800f18c:	dc1e      	bgt.n	800f1cc <_strtod_l+0x564>
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d001      	beq.n	800f196 <_strtod_l+0x52e>
 800f192:	0006      	movs	r6, r0
 800f194:	000f      	movs	r7, r1
 800f196:	4b32      	ldr	r3, [pc, #200]	@ (800f260 <_strtod_l+0x5f8>)
 800f198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f19a:	18ff      	adds	r7, r7, r3
 800f19c:	4b2f      	ldr	r3, [pc, #188]	@ (800f25c <_strtod_l+0x5f4>)
 800f19e:	00d5      	lsls	r5, r2, #3
 800f1a0:	195d      	adds	r5, r3, r5
 800f1a2:	0032      	movs	r2, r6
 800f1a4:	6828      	ldr	r0, [r5, #0]
 800f1a6:	6869      	ldr	r1, [r5, #4]
 800f1a8:	003b      	movs	r3, r7
 800f1aa:	f7f2 f9e7 	bl	800157c <__aeabi_dmul>
 800f1ae:	4b26      	ldr	r3, [pc, #152]	@ (800f248 <_strtod_l+0x5e0>)
 800f1b0:	4a2c      	ldr	r2, [pc, #176]	@ (800f264 <_strtod_l+0x5fc>)
 800f1b2:	0006      	movs	r6, r0
 800f1b4:	400b      	ands	r3, r1
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d895      	bhi.n	800f0e6 <_strtod_l+0x47e>
 800f1ba:	4a2b      	ldr	r2, [pc, #172]	@ (800f268 <_strtod_l+0x600>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d913      	bls.n	800f1e8 <_strtod_l+0x580>
 800f1c0:	2601      	movs	r6, #1
 800f1c2:	4f2a      	ldr	r7, [pc, #168]	@ (800f26c <_strtod_l+0x604>)
 800f1c4:	4276      	negs	r6, r6
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ca:	e086      	b.n	800f2da <_strtod_l+0x672>
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	4214      	tst	r4, r2
 800f1d0:	d004      	beq.n	800f1dc <_strtod_l+0x574>
 800f1d2:	682a      	ldr	r2, [r5, #0]
 800f1d4:	686b      	ldr	r3, [r5, #4]
 800f1d6:	f7f2 f9d1 	bl	800157c <__aeabi_dmul>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1de:	1064      	asrs	r4, r4, #1
 800f1e0:	3201      	adds	r2, #1
 800f1e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1e4:	3508      	adds	r5, #8
 800f1e6:	e7d0      	b.n	800f18a <_strtod_l+0x522>
 800f1e8:	23d4      	movs	r3, #212	@ 0xd4
 800f1ea:	049b      	lsls	r3, r3, #18
 800f1ec:	18cf      	adds	r7, r1, r3
 800f1ee:	e7ea      	b.n	800f1c6 <_strtod_l+0x55e>
 800f1f0:	2c00      	cmp	r4, #0
 800f1f2:	d0e8      	beq.n	800f1c6 <_strtod_l+0x55e>
 800f1f4:	4264      	negs	r4, r4
 800f1f6:	230f      	movs	r3, #15
 800f1f8:	0022      	movs	r2, r4
 800f1fa:	401a      	ands	r2, r3
 800f1fc:	421c      	tst	r4, r3
 800f1fe:	d00a      	beq.n	800f216 <_strtod_l+0x5ae>
 800f200:	4b15      	ldr	r3, [pc, #84]	@ (800f258 <_strtod_l+0x5f0>)
 800f202:	00d2      	lsls	r2, r2, #3
 800f204:	189b      	adds	r3, r3, r2
 800f206:	0030      	movs	r0, r6
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	0039      	movs	r1, r7
 800f20e:	f7f1 fd7b 	bl	8000d08 <__aeabi_ddiv>
 800f212:	0006      	movs	r6, r0
 800f214:	000f      	movs	r7, r1
 800f216:	1124      	asrs	r4, r4, #4
 800f218:	d0d5      	beq.n	800f1c6 <_strtod_l+0x55e>
 800f21a:	2c1f      	cmp	r4, #31
 800f21c:	dd28      	ble.n	800f270 <_strtod_l+0x608>
 800f21e:	2300      	movs	r3, #0
 800f220:	9306      	str	r3, [sp, #24]
 800f222:	9307      	str	r3, [sp, #28]
 800f224:	930d      	str	r3, [sp, #52]	@ 0x34
 800f226:	9308      	str	r3, [sp, #32]
 800f228:	2322      	movs	r3, #34	@ 0x22
 800f22a:	9a05      	ldr	r2, [sp, #20]
 800f22c:	2600      	movs	r6, #0
 800f22e:	6013      	str	r3, [r2, #0]
 800f230:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f232:	2700      	movs	r7, #0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d000      	beq.n	800f23a <_strtod_l+0x5d2>
 800f238:	e763      	b.n	800f102 <_strtod_l+0x49a>
 800f23a:	e550      	b.n	800ecde <_strtod_l+0x76>
 800f23c:	00004e1f 	.word	0x00004e1f
 800f240:	08013247 	.word	0x08013247
 800f244:	0801340c 	.word	0x0801340c
 800f248:	7ff00000 	.word	0x7ff00000
 800f24c:	0801323f 	.word	0x0801323f
 800f250:	08013279 	.word	0x08013279
 800f254:	08013408 	.word	0x08013408
 800f258:	08013498 	.word	0x08013498
 800f25c:	08013470 	.word	0x08013470
 800f260:	fcb00000 	.word	0xfcb00000
 800f264:	7ca00000 	.word	0x7ca00000
 800f268:	7c900000 	.word	0x7c900000
 800f26c:	7fefffff 	.word	0x7fefffff
 800f270:	2310      	movs	r3, #16
 800f272:	0022      	movs	r2, r4
 800f274:	401a      	ands	r2, r3
 800f276:	9209      	str	r2, [sp, #36]	@ 0x24
 800f278:	421c      	tst	r4, r3
 800f27a:	d001      	beq.n	800f280 <_strtod_l+0x618>
 800f27c:	335a      	adds	r3, #90	@ 0x5a
 800f27e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f280:	0030      	movs	r0, r6
 800f282:	0039      	movs	r1, r7
 800f284:	2300      	movs	r3, #0
 800f286:	4dc0      	ldr	r5, [pc, #768]	@ (800f588 <_strtod_l+0x920>)
 800f288:	2201      	movs	r2, #1
 800f28a:	4214      	tst	r4, r2
 800f28c:	d004      	beq.n	800f298 <_strtod_l+0x630>
 800f28e:	682a      	ldr	r2, [r5, #0]
 800f290:	686b      	ldr	r3, [r5, #4]
 800f292:	f7f2 f973 	bl	800157c <__aeabi_dmul>
 800f296:	2301      	movs	r3, #1
 800f298:	1064      	asrs	r4, r4, #1
 800f29a:	3508      	adds	r5, #8
 800f29c:	2c00      	cmp	r4, #0
 800f29e:	d1f3      	bne.n	800f288 <_strtod_l+0x620>
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <_strtod_l+0x640>
 800f2a4:	0006      	movs	r6, r0
 800f2a6:	000f      	movs	r7, r1
 800f2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00d      	beq.n	800f2ca <_strtod_l+0x662>
 800f2ae:	236b      	movs	r3, #107	@ 0x6b
 800f2b0:	007a      	lsls	r2, r7, #1
 800f2b2:	0d52      	lsrs	r2, r2, #21
 800f2b4:	0039      	movs	r1, r7
 800f2b6:	1a9b      	subs	r3, r3, r2
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	dd06      	ble.n	800f2ca <_strtod_l+0x662>
 800f2bc:	2b1f      	cmp	r3, #31
 800f2be:	dd5c      	ble.n	800f37a <_strtod_l+0x712>
 800f2c0:	2600      	movs	r6, #0
 800f2c2:	2b34      	cmp	r3, #52	@ 0x34
 800f2c4:	dd52      	ble.n	800f36c <_strtod_l+0x704>
 800f2c6:	27dc      	movs	r7, #220	@ 0xdc
 800f2c8:	04bf      	lsls	r7, r7, #18
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	0030      	movs	r0, r6
 800f2d0:	0039      	movs	r1, r7
 800f2d2:	f7f1 f8b7 	bl	8000444 <__aeabi_dcmpeq>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d1a1      	bne.n	800f21e <_strtod_l+0x5b6>
 800f2da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2dc:	9a08      	ldr	r2, [sp, #32]
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f2e2:	9b06      	ldr	r3, [sp, #24]
 800f2e4:	9805      	ldr	r0, [sp, #20]
 800f2e6:	f002 fcb9 	bl	8011c5c <__s2b>
 800f2ea:	900d      	str	r0, [sp, #52]	@ 0x34
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d100      	bne.n	800f2f2 <_strtod_l+0x68a>
 800f2f0:	e6f9      	b.n	800f0e6 <_strtod_l+0x47e>
 800f2f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2f4:	9907      	ldr	r1, [sp, #28]
 800f2f6:	43db      	mvns	r3, r3
 800f2f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2fa:	17db      	asrs	r3, r3, #31
 800f2fc:	1a52      	subs	r2, r2, r1
 800f2fe:	9214      	str	r2, [sp, #80]	@ 0x50
 800f300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f302:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800f304:	17d2      	asrs	r2, r2, #31
 800f306:	4011      	ands	r1, r2
 800f308:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f30a:	9114      	str	r1, [sp, #80]	@ 0x50
 800f30c:	401a      	ands	r2, r3
 800f30e:	2300      	movs	r3, #0
 800f310:	921a      	str	r2, [sp, #104]	@ 0x68
 800f312:	9306      	str	r3, [sp, #24]
 800f314:	9307      	str	r3, [sp, #28]
 800f316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f318:	9805      	ldr	r0, [sp, #20]
 800f31a:	6859      	ldr	r1, [r3, #4]
 800f31c:	f002 fbf2 	bl	8011b04 <_Balloc>
 800f320:	9008      	str	r0, [sp, #32]
 800f322:	2800      	cmp	r0, #0
 800f324:	d100      	bne.n	800f328 <_strtod_l+0x6c0>
 800f326:	e6e3      	b.n	800f0f0 <_strtod_l+0x488>
 800f328:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f32a:	300c      	adds	r0, #12
 800f32c:	0019      	movs	r1, r3
 800f32e:	691a      	ldr	r2, [r3, #16]
 800f330:	310c      	adds	r1, #12
 800f332:	3202      	adds	r2, #2
 800f334:	0092      	lsls	r2, r2, #2
 800f336:	f001 f8ed 	bl	8010514 <memcpy>
 800f33a:	ab20      	add	r3, sp, #128	@ 0x80
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	0032      	movs	r2, r6
 800f344:	003b      	movs	r3, r7
 800f346:	9805      	ldr	r0, [sp, #20]
 800f348:	9610      	str	r6, [sp, #64]	@ 0x40
 800f34a:	9711      	str	r7, [sp, #68]	@ 0x44
 800f34c:	f002 ffce 	bl	80122ec <__d2b>
 800f350:	901e      	str	r0, [sp, #120]	@ 0x78
 800f352:	2800      	cmp	r0, #0
 800f354:	d100      	bne.n	800f358 <_strtod_l+0x6f0>
 800f356:	e6cb      	b.n	800f0f0 <_strtod_l+0x488>
 800f358:	2101      	movs	r1, #1
 800f35a:	9805      	ldr	r0, [sp, #20]
 800f35c:	f002 fd1a 	bl	8011d94 <__i2b>
 800f360:	9007      	str	r0, [sp, #28]
 800f362:	2800      	cmp	r0, #0
 800f364:	d10e      	bne.n	800f384 <_strtod_l+0x71c>
 800f366:	2300      	movs	r3, #0
 800f368:	9307      	str	r3, [sp, #28]
 800f36a:	e6c1      	b.n	800f0f0 <_strtod_l+0x488>
 800f36c:	234b      	movs	r3, #75	@ 0x4b
 800f36e:	1a9a      	subs	r2, r3, r2
 800f370:	3b4c      	subs	r3, #76	@ 0x4c
 800f372:	4093      	lsls	r3, r2
 800f374:	4019      	ands	r1, r3
 800f376:	000f      	movs	r7, r1
 800f378:	e7a7      	b.n	800f2ca <_strtod_l+0x662>
 800f37a:	2201      	movs	r2, #1
 800f37c:	4252      	negs	r2, r2
 800f37e:	409a      	lsls	r2, r3
 800f380:	4016      	ands	r6, r2
 800f382:	e7a2      	b.n	800f2ca <_strtod_l+0x662>
 800f384:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f386:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f388:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f38a:	1ad4      	subs	r4, r2, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	db01      	blt.n	800f394 <_strtod_l+0x72c>
 800f390:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800f392:	195d      	adds	r5, r3, r5
 800f394:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f396:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f398:	1a5b      	subs	r3, r3, r1
 800f39a:	2136      	movs	r1, #54	@ 0x36
 800f39c:	189b      	adds	r3, r3, r2
 800f39e:	1a8a      	subs	r2, r1, r2
 800f3a0:	497a      	ldr	r1, [pc, #488]	@ (800f58c <_strtod_l+0x924>)
 800f3a2:	2001      	movs	r0, #1
 800f3a4:	468c      	mov	ip, r1
 800f3a6:	2100      	movs	r1, #0
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	9115      	str	r1, [sp, #84]	@ 0x54
 800f3ac:	9016      	str	r0, [sp, #88]	@ 0x58
 800f3ae:	4563      	cmp	r3, ip
 800f3b0:	da06      	bge.n	800f3c0 <_strtod_l+0x758>
 800f3b2:	4661      	mov	r1, ip
 800f3b4:	1ac9      	subs	r1, r1, r3
 800f3b6:	1a52      	subs	r2, r2, r1
 800f3b8:	291f      	cmp	r1, #31
 800f3ba:	dc3f      	bgt.n	800f43c <_strtod_l+0x7d4>
 800f3bc:	4088      	lsls	r0, r1
 800f3be:	9016      	str	r0, [sp, #88]	@ 0x58
 800f3c0:	18ab      	adds	r3, r5, r2
 800f3c2:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3c4:	18a4      	adds	r4, r4, r2
 800f3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3ca:	191c      	adds	r4, r3, r4
 800f3cc:	002b      	movs	r3, r5
 800f3ce:	4295      	cmp	r5, r2
 800f3d0:	dd00      	ble.n	800f3d4 <_strtod_l+0x76c>
 800f3d2:	0013      	movs	r3, r2
 800f3d4:	42a3      	cmp	r3, r4
 800f3d6:	dd00      	ble.n	800f3da <_strtod_l+0x772>
 800f3d8:	0023      	movs	r3, r4
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dd04      	ble.n	800f3e8 <_strtod_l+0x780>
 800f3de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3e0:	1ae4      	subs	r4, r4, r3
 800f3e2:	1ad2      	subs	r2, r2, r3
 800f3e4:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3e6:	1aed      	subs	r5, r5, r3
 800f3e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	dd16      	ble.n	800f41c <_strtod_l+0x7b4>
 800f3ee:	001a      	movs	r2, r3
 800f3f0:	9907      	ldr	r1, [sp, #28]
 800f3f2:	9805      	ldr	r0, [sp, #20]
 800f3f4:	f002 fd90 	bl	8011f18 <__pow5mult>
 800f3f8:	9007      	str	r0, [sp, #28]
 800f3fa:	2800      	cmp	r0, #0
 800f3fc:	d0b3      	beq.n	800f366 <_strtod_l+0x6fe>
 800f3fe:	0001      	movs	r1, r0
 800f400:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f402:	9805      	ldr	r0, [sp, #20]
 800f404:	f002 fcde 	bl	8011dc4 <__multiply>
 800f408:	9013      	str	r0, [sp, #76]	@ 0x4c
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d100      	bne.n	800f410 <_strtod_l+0x7a8>
 800f40e:	e66f      	b.n	800f0f0 <_strtod_l+0x488>
 800f410:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f412:	9805      	ldr	r0, [sp, #20]
 800f414:	f002 fbba 	bl	8011b8c <_Bfree>
 800f418:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f41a:	931e      	str	r3, [sp, #120]	@ 0x78
 800f41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f41e:	2b00      	cmp	r3, #0
 800f420:	dc12      	bgt.n	800f448 <_strtod_l+0x7e0>
 800f422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f424:	2b00      	cmp	r3, #0
 800f426:	dd18      	ble.n	800f45a <_strtod_l+0x7f2>
 800f428:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f42a:	9908      	ldr	r1, [sp, #32]
 800f42c:	9805      	ldr	r0, [sp, #20]
 800f42e:	f002 fd73 	bl	8011f18 <__pow5mult>
 800f432:	9008      	str	r0, [sp, #32]
 800f434:	2800      	cmp	r0, #0
 800f436:	d110      	bne.n	800f45a <_strtod_l+0x7f2>
 800f438:	2300      	movs	r3, #0
 800f43a:	e658      	b.n	800f0ee <_strtod_l+0x486>
 800f43c:	4954      	ldr	r1, [pc, #336]	@ (800f590 <_strtod_l+0x928>)
 800f43e:	1acb      	subs	r3, r1, r3
 800f440:	0001      	movs	r1, r0
 800f442:	4099      	lsls	r1, r3
 800f444:	9115      	str	r1, [sp, #84]	@ 0x54
 800f446:	e7ba      	b.n	800f3be <_strtod_l+0x756>
 800f448:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f44a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f44c:	9805      	ldr	r0, [sp, #20]
 800f44e:	f002 fdbf 	bl	8011fd0 <__lshift>
 800f452:	901e      	str	r0, [sp, #120]	@ 0x78
 800f454:	2800      	cmp	r0, #0
 800f456:	d1e4      	bne.n	800f422 <_strtod_l+0x7ba>
 800f458:	e64a      	b.n	800f0f0 <_strtod_l+0x488>
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	dd07      	ble.n	800f46e <_strtod_l+0x806>
 800f45e:	0022      	movs	r2, r4
 800f460:	9908      	ldr	r1, [sp, #32]
 800f462:	9805      	ldr	r0, [sp, #20]
 800f464:	f002 fdb4 	bl	8011fd0 <__lshift>
 800f468:	9008      	str	r0, [sp, #32]
 800f46a:	2800      	cmp	r0, #0
 800f46c:	d0e4      	beq.n	800f438 <_strtod_l+0x7d0>
 800f46e:	2d00      	cmp	r5, #0
 800f470:	dd08      	ble.n	800f484 <_strtod_l+0x81c>
 800f472:	002a      	movs	r2, r5
 800f474:	9907      	ldr	r1, [sp, #28]
 800f476:	9805      	ldr	r0, [sp, #20]
 800f478:	f002 fdaa 	bl	8011fd0 <__lshift>
 800f47c:	9007      	str	r0, [sp, #28]
 800f47e:	2800      	cmp	r0, #0
 800f480:	d100      	bne.n	800f484 <_strtod_l+0x81c>
 800f482:	e635      	b.n	800f0f0 <_strtod_l+0x488>
 800f484:	9a08      	ldr	r2, [sp, #32]
 800f486:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f488:	9805      	ldr	r0, [sp, #20]
 800f48a:	f002 fe29 	bl	80120e0 <__mdiff>
 800f48e:	9006      	str	r0, [sp, #24]
 800f490:	2800      	cmp	r0, #0
 800f492:	d100      	bne.n	800f496 <_strtod_l+0x82e>
 800f494:	e62c      	b.n	800f0f0 <_strtod_l+0x488>
 800f496:	68c3      	ldr	r3, [r0, #12]
 800f498:	9907      	ldr	r1, [sp, #28]
 800f49a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f49c:	2300      	movs	r3, #0
 800f49e:	60c3      	str	r3, [r0, #12]
 800f4a0:	f002 fe02 	bl	80120a8 <__mcmp>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	da3b      	bge.n	800f520 <_strtod_l+0x8b8>
 800f4a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4aa:	4333      	orrs	r3, r6
 800f4ac:	d167      	bne.n	800f57e <_strtod_l+0x916>
 800f4ae:	033b      	lsls	r3, r7, #12
 800f4b0:	d165      	bne.n	800f57e <_strtod_l+0x916>
 800f4b2:	22d6      	movs	r2, #214	@ 0xd6
 800f4b4:	4b37      	ldr	r3, [pc, #220]	@ (800f594 <_strtod_l+0x92c>)
 800f4b6:	04d2      	lsls	r2, r2, #19
 800f4b8:	403b      	ands	r3, r7
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d95f      	bls.n	800f57e <_strtod_l+0x916>
 800f4be:	9b06      	ldr	r3, [sp, #24]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d103      	bne.n	800f4ce <_strtod_l+0x866>
 800f4c6:	9b06      	ldr	r3, [sp, #24]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	dd57      	ble.n	800f57e <_strtod_l+0x916>
 800f4ce:	9906      	ldr	r1, [sp, #24]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	9805      	ldr	r0, [sp, #20]
 800f4d4:	f002 fd7c 	bl	8011fd0 <__lshift>
 800f4d8:	9907      	ldr	r1, [sp, #28]
 800f4da:	9006      	str	r0, [sp, #24]
 800f4dc:	f002 fde4 	bl	80120a8 <__mcmp>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	dd4c      	ble.n	800f57e <_strtod_l+0x916>
 800f4e4:	4b2b      	ldr	r3, [pc, #172]	@ (800f594 <_strtod_l+0x92c>)
 800f4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4e8:	403b      	ands	r3, r7
 800f4ea:	2a00      	cmp	r2, #0
 800f4ec:	d074      	beq.n	800f5d8 <_strtod_l+0x970>
 800f4ee:	22d6      	movs	r2, #214	@ 0xd6
 800f4f0:	04d2      	lsls	r2, r2, #19
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d870      	bhi.n	800f5d8 <_strtod_l+0x970>
 800f4f6:	22dc      	movs	r2, #220	@ 0xdc
 800f4f8:	0492      	lsls	r2, r2, #18
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d800      	bhi.n	800f500 <_strtod_l+0x898>
 800f4fe:	e693      	b.n	800f228 <_strtod_l+0x5c0>
 800f500:	0030      	movs	r0, r6
 800f502:	0039      	movs	r1, r7
 800f504:	4b24      	ldr	r3, [pc, #144]	@ (800f598 <_strtod_l+0x930>)
 800f506:	2200      	movs	r2, #0
 800f508:	f7f2 f838 	bl	800157c <__aeabi_dmul>
 800f50c:	4b21      	ldr	r3, [pc, #132]	@ (800f594 <_strtod_l+0x92c>)
 800f50e:	0006      	movs	r6, r0
 800f510:	000f      	movs	r7, r1
 800f512:	420b      	tst	r3, r1
 800f514:	d000      	beq.n	800f518 <_strtod_l+0x8b0>
 800f516:	e5f4      	b.n	800f102 <_strtod_l+0x49a>
 800f518:	2322      	movs	r3, #34	@ 0x22
 800f51a:	9a05      	ldr	r2, [sp, #20]
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	e5f0      	b.n	800f102 <_strtod_l+0x49a>
 800f520:	970e      	str	r7, [sp, #56]	@ 0x38
 800f522:	2800      	cmp	r0, #0
 800f524:	d175      	bne.n	800f612 <_strtod_l+0x9aa>
 800f526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f528:	033b      	lsls	r3, r7, #12
 800f52a:	0b1b      	lsrs	r3, r3, #12
 800f52c:	2a00      	cmp	r2, #0
 800f52e:	d039      	beq.n	800f5a4 <_strtod_l+0x93c>
 800f530:	4a1a      	ldr	r2, [pc, #104]	@ (800f59c <_strtod_l+0x934>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d138      	bne.n	800f5a8 <_strtod_l+0x940>
 800f536:	2101      	movs	r1, #1
 800f538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f53a:	4249      	negs	r1, r1
 800f53c:	0032      	movs	r2, r6
 800f53e:	0008      	movs	r0, r1
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00b      	beq.n	800f55c <_strtod_l+0x8f4>
 800f544:	24d4      	movs	r4, #212	@ 0xd4
 800f546:	4b13      	ldr	r3, [pc, #76]	@ (800f594 <_strtod_l+0x92c>)
 800f548:	0008      	movs	r0, r1
 800f54a:	403b      	ands	r3, r7
 800f54c:	04e4      	lsls	r4, r4, #19
 800f54e:	42a3      	cmp	r3, r4
 800f550:	d804      	bhi.n	800f55c <_strtod_l+0x8f4>
 800f552:	306c      	adds	r0, #108	@ 0x6c
 800f554:	0d1b      	lsrs	r3, r3, #20
 800f556:	1ac3      	subs	r3, r0, r3
 800f558:	4099      	lsls	r1, r3
 800f55a:	0008      	movs	r0, r1
 800f55c:	4282      	cmp	r2, r0
 800f55e:	d123      	bne.n	800f5a8 <_strtod_l+0x940>
 800f560:	4b0f      	ldr	r3, [pc, #60]	@ (800f5a0 <_strtod_l+0x938>)
 800f562:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f564:	4299      	cmp	r1, r3
 800f566:	d102      	bne.n	800f56e <_strtod_l+0x906>
 800f568:	3201      	adds	r2, #1
 800f56a:	d100      	bne.n	800f56e <_strtod_l+0x906>
 800f56c:	e5c0      	b.n	800f0f0 <_strtod_l+0x488>
 800f56e:	4b09      	ldr	r3, [pc, #36]	@ (800f594 <_strtod_l+0x92c>)
 800f570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f572:	2600      	movs	r6, #0
 800f574:	401a      	ands	r2, r3
 800f576:	0013      	movs	r3, r2
 800f578:	2280      	movs	r2, #128	@ 0x80
 800f57a:	0352      	lsls	r2, r2, #13
 800f57c:	189f      	adds	r7, r3, r2
 800f57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1bd      	bne.n	800f500 <_strtod_l+0x898>
 800f584:	e5bd      	b.n	800f102 <_strtod_l+0x49a>
 800f586:	46c0      	nop			@ (mov r8, r8)
 800f588:	08013438 	.word	0x08013438
 800f58c:	fffffc02 	.word	0xfffffc02
 800f590:	fffffbe2 	.word	0xfffffbe2
 800f594:	7ff00000 	.word	0x7ff00000
 800f598:	39500000 	.word	0x39500000
 800f59c:	000fffff 	.word	0x000fffff
 800f5a0:	7fefffff 	.word	0x7fefffff
 800f5a4:	4333      	orrs	r3, r6
 800f5a6:	d09d      	beq.n	800f4e4 <_strtod_l+0x87c>
 800f5a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d01c      	beq.n	800f5e8 <_strtod_l+0x980>
 800f5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f5b2:	4213      	tst	r3, r2
 800f5b4:	d0e3      	beq.n	800f57e <_strtod_l+0x916>
 800f5b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5b8:	0030      	movs	r0, r6
 800f5ba:	0039      	movs	r1, r7
 800f5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d016      	beq.n	800f5f0 <_strtod_l+0x988>
 800f5c2:	f7ff fb39 	bl	800ec38 <sulp>
 800f5c6:	0002      	movs	r2, r0
 800f5c8:	000b      	movs	r3, r1
 800f5ca:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f5cc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f5ce:	f7f0 ffd5 	bl	800057c <__aeabi_dadd>
 800f5d2:	0006      	movs	r6, r0
 800f5d4:	000f      	movs	r7, r1
 800f5d6:	e7d2      	b.n	800f57e <_strtod_l+0x916>
 800f5d8:	2601      	movs	r6, #1
 800f5da:	4a92      	ldr	r2, [pc, #584]	@ (800f824 <_strtod_l+0xbbc>)
 800f5dc:	4276      	negs	r6, r6
 800f5de:	189b      	adds	r3, r3, r2
 800f5e0:	4a91      	ldr	r2, [pc, #580]	@ (800f828 <_strtod_l+0xbc0>)
 800f5e2:	431a      	orrs	r2, r3
 800f5e4:	0017      	movs	r7, r2
 800f5e6:	e7ca      	b.n	800f57e <_strtod_l+0x916>
 800f5e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5ea:	4233      	tst	r3, r6
 800f5ec:	d0c7      	beq.n	800f57e <_strtod_l+0x916>
 800f5ee:	e7e2      	b.n	800f5b6 <_strtod_l+0x94e>
 800f5f0:	f7ff fb22 	bl	800ec38 <sulp>
 800f5f4:	0002      	movs	r2, r0
 800f5f6:	000b      	movs	r3, r1
 800f5f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f5fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f5fc:	f7f2 faa4 	bl	8001b48 <__aeabi_dsub>
 800f600:	2200      	movs	r2, #0
 800f602:	2300      	movs	r3, #0
 800f604:	0006      	movs	r6, r0
 800f606:	000f      	movs	r7, r1
 800f608:	f7f0 ff1c 	bl	8000444 <__aeabi_dcmpeq>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d0b6      	beq.n	800f57e <_strtod_l+0x916>
 800f610:	e60a      	b.n	800f228 <_strtod_l+0x5c0>
 800f612:	9907      	ldr	r1, [sp, #28]
 800f614:	9806      	ldr	r0, [sp, #24]
 800f616:	f002 fec9 	bl	80123ac <__ratio>
 800f61a:	2380      	movs	r3, #128	@ 0x80
 800f61c:	2200      	movs	r2, #0
 800f61e:	05db      	lsls	r3, r3, #23
 800f620:	0004      	movs	r4, r0
 800f622:	000d      	movs	r5, r1
 800f624:	f7f0 ff1e 	bl	8000464 <__aeabi_dcmple>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d06c      	beq.n	800f706 <_strtod_l+0xa9e>
 800f62c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d177      	bne.n	800f722 <_strtod_l+0xaba>
 800f632:	2e00      	cmp	r6, #0
 800f634:	d157      	bne.n	800f6e6 <_strtod_l+0xa7e>
 800f636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f638:	031b      	lsls	r3, r3, #12
 800f63a:	d15a      	bne.n	800f6f2 <_strtod_l+0xa8a>
 800f63c:	2200      	movs	r2, #0
 800f63e:	0020      	movs	r0, r4
 800f640:	0029      	movs	r1, r5
 800f642:	4b7a      	ldr	r3, [pc, #488]	@ (800f82c <_strtod_l+0xbc4>)
 800f644:	f7f0 ff04 	bl	8000450 <__aeabi_dcmplt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d159      	bne.n	800f700 <_strtod_l+0xa98>
 800f64c:	0020      	movs	r0, r4
 800f64e:	0029      	movs	r1, r5
 800f650:	2200      	movs	r2, #0
 800f652:	4b77      	ldr	r3, [pc, #476]	@ (800f830 <_strtod_l+0xbc8>)
 800f654:	f7f1 ff92 	bl	800157c <__aeabi_dmul>
 800f658:	0004      	movs	r4, r0
 800f65a:	000d      	movs	r5, r1
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	061b      	lsls	r3, r3, #24
 800f660:	18eb      	adds	r3, r5, r3
 800f662:	940a      	str	r4, [sp, #40]	@ 0x28
 800f664:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f66a:	9216      	str	r2, [sp, #88]	@ 0x58
 800f66c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f66e:	4a71      	ldr	r2, [pc, #452]	@ (800f834 <_strtod_l+0xbcc>)
 800f670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f672:	4013      	ands	r3, r2
 800f674:	9315      	str	r3, [sp, #84]	@ 0x54
 800f676:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f678:	4b6f      	ldr	r3, [pc, #444]	@ (800f838 <_strtod_l+0xbd0>)
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d000      	beq.n	800f680 <_strtod_l+0xa18>
 800f67e:	e087      	b.n	800f790 <_strtod_l+0xb28>
 800f680:	4a6e      	ldr	r2, [pc, #440]	@ (800f83c <_strtod_l+0xbd4>)
 800f682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f684:	4694      	mov	ip, r2
 800f686:	4463      	add	r3, ip
 800f688:	001f      	movs	r7, r3
 800f68a:	0030      	movs	r0, r6
 800f68c:	0019      	movs	r1, r3
 800f68e:	f002 fdc1 	bl	8012214 <__ulp>
 800f692:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f696:	f7f1 ff71 	bl	800157c <__aeabi_dmul>
 800f69a:	0032      	movs	r2, r6
 800f69c:	003b      	movs	r3, r7
 800f69e:	f7f0 ff6d 	bl	800057c <__aeabi_dadd>
 800f6a2:	4a64      	ldr	r2, [pc, #400]	@ (800f834 <_strtod_l+0xbcc>)
 800f6a4:	4b66      	ldr	r3, [pc, #408]	@ (800f840 <_strtod_l+0xbd8>)
 800f6a6:	0006      	movs	r6, r0
 800f6a8:	400a      	ands	r2, r1
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d940      	bls.n	800f730 <_strtod_l+0xac8>
 800f6ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f6b0:	4a64      	ldr	r2, [pc, #400]	@ (800f844 <_strtod_l+0xbdc>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d103      	bne.n	800f6be <_strtod_l+0xa56>
 800f6b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	d100      	bne.n	800f6be <_strtod_l+0xa56>
 800f6bc:	e518      	b.n	800f0f0 <_strtod_l+0x488>
 800f6be:	2601      	movs	r6, #1
 800f6c0:	4f60      	ldr	r7, [pc, #384]	@ (800f844 <_strtod_l+0xbdc>)
 800f6c2:	4276      	negs	r6, r6
 800f6c4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f6c6:	9805      	ldr	r0, [sp, #20]
 800f6c8:	f002 fa60 	bl	8011b8c <_Bfree>
 800f6cc:	9908      	ldr	r1, [sp, #32]
 800f6ce:	9805      	ldr	r0, [sp, #20]
 800f6d0:	f002 fa5c 	bl	8011b8c <_Bfree>
 800f6d4:	9907      	ldr	r1, [sp, #28]
 800f6d6:	9805      	ldr	r0, [sp, #20]
 800f6d8:	f002 fa58 	bl	8011b8c <_Bfree>
 800f6dc:	9906      	ldr	r1, [sp, #24]
 800f6de:	9805      	ldr	r0, [sp, #20]
 800f6e0:	f002 fa54 	bl	8011b8c <_Bfree>
 800f6e4:	e617      	b.n	800f316 <_strtod_l+0x6ae>
 800f6e6:	2e01      	cmp	r6, #1
 800f6e8:	d103      	bne.n	800f6f2 <_strtod_l+0xa8a>
 800f6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d100      	bne.n	800f6f2 <_strtod_l+0xa8a>
 800f6f0:	e59a      	b.n	800f228 <_strtod_l+0x5c0>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	4c54      	ldr	r4, [pc, #336]	@ (800f848 <_strtod_l+0xbe0>)
 800f6f6:	4d4d      	ldr	r5, [pc, #308]	@ (800f82c <_strtod_l+0xbc4>)
 800f6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6fc:	2400      	movs	r4, #0
 800f6fe:	e7b2      	b.n	800f666 <_strtod_l+0x9fe>
 800f700:	2400      	movs	r4, #0
 800f702:	4d4b      	ldr	r5, [pc, #300]	@ (800f830 <_strtod_l+0xbc8>)
 800f704:	e7aa      	b.n	800f65c <_strtod_l+0x9f4>
 800f706:	0020      	movs	r0, r4
 800f708:	0029      	movs	r1, r5
 800f70a:	4b49      	ldr	r3, [pc, #292]	@ (800f830 <_strtod_l+0xbc8>)
 800f70c:	2200      	movs	r2, #0
 800f70e:	f7f1 ff35 	bl	800157c <__aeabi_dmul>
 800f712:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f714:	0004      	movs	r4, r0
 800f716:	000d      	movs	r5, r1
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d09f      	beq.n	800f65c <_strtod_l+0x9f4>
 800f71c:	940a      	str	r4, [sp, #40]	@ 0x28
 800f71e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f720:	e7a1      	b.n	800f666 <_strtod_l+0x9fe>
 800f722:	2300      	movs	r3, #0
 800f724:	4c41      	ldr	r4, [pc, #260]	@ (800f82c <_strtod_l+0xbc4>)
 800f726:	0025      	movs	r5, r4
 800f728:	930a      	str	r3, [sp, #40]	@ 0x28
 800f72a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f72c:	001c      	movs	r4, r3
 800f72e:	e79a      	b.n	800f666 <_strtod_l+0x9fe>
 800f730:	23d4      	movs	r3, #212	@ 0xd4
 800f732:	049b      	lsls	r3, r3, #18
 800f734:	18cf      	adds	r7, r1, r3
 800f736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f738:	9710      	str	r7, [sp, #64]	@ 0x40
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1c2      	bne.n	800f6c4 <_strtod_l+0xa5c>
 800f73e:	4b3d      	ldr	r3, [pc, #244]	@ (800f834 <_strtod_l+0xbcc>)
 800f740:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f742:	403b      	ands	r3, r7
 800f744:	429a      	cmp	r2, r3
 800f746:	d1bd      	bne.n	800f6c4 <_strtod_l+0xa5c>
 800f748:	0020      	movs	r0, r4
 800f74a:	0029      	movs	r1, r5
 800f74c:	f7f0 fec6 	bl	80004dc <__aeabi_d2lz>
 800f750:	f7f0 fefe 	bl	8000550 <__aeabi_l2d>
 800f754:	0002      	movs	r2, r0
 800f756:	000b      	movs	r3, r1
 800f758:	0020      	movs	r0, r4
 800f75a:	0029      	movs	r1, r5
 800f75c:	f7f2 f9f4 	bl	8001b48 <__aeabi_dsub>
 800f760:	033c      	lsls	r4, r7, #12
 800f762:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f764:	0b24      	lsrs	r4, r4, #12
 800f766:	4334      	orrs	r4, r6
 800f768:	900e      	str	r0, [sp, #56]	@ 0x38
 800f76a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f76c:	4a37      	ldr	r2, [pc, #220]	@ (800f84c <_strtod_l+0xbe4>)
 800f76e:	431c      	orrs	r4, r3
 800f770:	d052      	beq.n	800f818 <_strtod_l+0xbb0>
 800f772:	4b37      	ldr	r3, [pc, #220]	@ (800f850 <_strtod_l+0xbe8>)
 800f774:	f7f0 fe6c 	bl	8000450 <__aeabi_dcmplt>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d000      	beq.n	800f77e <_strtod_l+0xb16>
 800f77c:	e4c1      	b.n	800f102 <_strtod_l+0x49a>
 800f77e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f780:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f782:	4a34      	ldr	r2, [pc, #208]	@ (800f854 <_strtod_l+0xbec>)
 800f784:	4b2a      	ldr	r3, [pc, #168]	@ (800f830 <_strtod_l+0xbc8>)
 800f786:	f7f0 fe77 	bl	8000478 <__aeabi_dcmpgt>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d09a      	beq.n	800f6c4 <_strtod_l+0xa5c>
 800f78e:	e4b8      	b.n	800f102 <_strtod_l+0x49a>
 800f790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f792:	2b00      	cmp	r3, #0
 800f794:	d02a      	beq.n	800f7ec <_strtod_l+0xb84>
 800f796:	23d4      	movs	r3, #212	@ 0xd4
 800f798:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f79a:	04db      	lsls	r3, r3, #19
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d825      	bhi.n	800f7ec <_strtod_l+0xb84>
 800f7a0:	0020      	movs	r0, r4
 800f7a2:	0029      	movs	r1, r5
 800f7a4:	4a2c      	ldr	r2, [pc, #176]	@ (800f858 <_strtod_l+0xbf0>)
 800f7a6:	4b2d      	ldr	r3, [pc, #180]	@ (800f85c <_strtod_l+0xbf4>)
 800f7a8:	f7f0 fe5c 	bl	8000464 <__aeabi_dcmple>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d016      	beq.n	800f7de <_strtod_l+0xb76>
 800f7b0:	0020      	movs	r0, r4
 800f7b2:	0029      	movs	r1, r5
 800f7b4:	f7f0 fe74 	bl	80004a0 <__aeabi_d2uiz>
 800f7b8:	2800      	cmp	r0, #0
 800f7ba:	d100      	bne.n	800f7be <_strtod_l+0xb56>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	f7f2 fe59 	bl	8002474 <__aeabi_ui2d>
 800f7c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f7c4:	0004      	movs	r4, r0
 800f7c6:	000d      	movs	r5, r1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d122      	bne.n	800f812 <_strtod_l+0xbaa>
 800f7cc:	2380      	movs	r3, #128	@ 0x80
 800f7ce:	061b      	lsls	r3, r3, #24
 800f7d0:	18cb      	adds	r3, r1, r3
 800f7d2:	9018      	str	r0, [sp, #96]	@ 0x60
 800f7d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f7d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f7d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7da:	9216      	str	r2, [sp, #88]	@ 0x58
 800f7dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f7de:	22d6      	movs	r2, #214	@ 0xd6
 800f7e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f7e2:	04d2      	lsls	r2, r2, #19
 800f7e4:	189b      	adds	r3, r3, r2
 800f7e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f7e8:	1a9b      	subs	r3, r3, r2
 800f7ea:	9317      	str	r3, [sp, #92]	@ 0x5c
 800f7ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f7ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f7f0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800f7f2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800f7f4:	f002 fd0e 	bl	8012214 <__ulp>
 800f7f8:	0002      	movs	r2, r0
 800f7fa:	000b      	movs	r3, r1
 800f7fc:	0030      	movs	r0, r6
 800f7fe:	0039      	movs	r1, r7
 800f800:	f7f1 febc 	bl	800157c <__aeabi_dmul>
 800f804:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f806:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f808:	f7f0 feb8 	bl	800057c <__aeabi_dadd>
 800f80c:	0006      	movs	r6, r0
 800f80e:	000f      	movs	r7, r1
 800f810:	e791      	b.n	800f736 <_strtod_l+0xace>
 800f812:	9418      	str	r4, [sp, #96]	@ 0x60
 800f814:	9519      	str	r5, [sp, #100]	@ 0x64
 800f816:	e7de      	b.n	800f7d6 <_strtod_l+0xb6e>
 800f818:	4b11      	ldr	r3, [pc, #68]	@ (800f860 <_strtod_l+0xbf8>)
 800f81a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f81c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f81e:	f7f0 fe17 	bl	8000450 <__aeabi_dcmplt>
 800f822:	e7b2      	b.n	800f78a <_strtod_l+0xb22>
 800f824:	fff00000 	.word	0xfff00000
 800f828:	000fffff 	.word	0x000fffff
 800f82c:	3ff00000 	.word	0x3ff00000
 800f830:	3fe00000 	.word	0x3fe00000
 800f834:	7ff00000 	.word	0x7ff00000
 800f838:	7fe00000 	.word	0x7fe00000
 800f83c:	fcb00000 	.word	0xfcb00000
 800f840:	7c9fffff 	.word	0x7c9fffff
 800f844:	7fefffff 	.word	0x7fefffff
 800f848:	bff00000 	.word	0xbff00000
 800f84c:	94a03595 	.word	0x94a03595
 800f850:	3fdfffff 	.word	0x3fdfffff
 800f854:	35afe535 	.word	0x35afe535
 800f858:	ffc00000 	.word	0xffc00000
 800f85c:	41dfffff 	.word	0x41dfffff
 800f860:	3fcfffff 	.word	0x3fcfffff

0800f864 <strtod>:
 800f864:	b510      	push	{r4, lr}
 800f866:	4c04      	ldr	r4, [pc, #16]	@ (800f878 <strtod+0x14>)
 800f868:	000a      	movs	r2, r1
 800f86a:	0001      	movs	r1, r0
 800f86c:	4b03      	ldr	r3, [pc, #12]	@ (800f87c <strtod+0x18>)
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	f7ff f9fa 	bl	800ec68 <_strtod_l>
 800f874:	bd10      	pop	{r4, pc}
 800f876:	46c0      	nop			@ (mov r8, r8)
 800f878:	20000278 	.word	0x20000278
 800f87c:	2000010c 	.word	0x2000010c

0800f880 <__cvt>:
 800f880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f882:	001f      	movs	r7, r3
 800f884:	2300      	movs	r3, #0
 800f886:	0016      	movs	r6, r2
 800f888:	b08b      	sub	sp, #44	@ 0x2c
 800f88a:	429f      	cmp	r7, r3
 800f88c:	da04      	bge.n	800f898 <__cvt+0x18>
 800f88e:	2180      	movs	r1, #128	@ 0x80
 800f890:	0609      	lsls	r1, r1, #24
 800f892:	187b      	adds	r3, r7, r1
 800f894:	001f      	movs	r7, r3
 800f896:	232d      	movs	r3, #45	@ 0x2d
 800f898:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f89a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f89c:	7013      	strb	r3, [r2, #0]
 800f89e:	2320      	movs	r3, #32
 800f8a0:	2203      	movs	r2, #3
 800f8a2:	439d      	bics	r5, r3
 800f8a4:	2d46      	cmp	r5, #70	@ 0x46
 800f8a6:	d007      	beq.n	800f8b8 <__cvt+0x38>
 800f8a8:	002b      	movs	r3, r5
 800f8aa:	3b45      	subs	r3, #69	@ 0x45
 800f8ac:	4259      	negs	r1, r3
 800f8ae:	414b      	adcs	r3, r1
 800f8b0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f8b2:	3a01      	subs	r2, #1
 800f8b4:	18cb      	adds	r3, r1, r3
 800f8b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8b8:	ab09      	add	r3, sp, #36	@ 0x24
 800f8ba:	9304      	str	r3, [sp, #16]
 800f8bc:	ab08      	add	r3, sp, #32
 800f8be:	9303      	str	r3, [sp, #12]
 800f8c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f8c2:	9200      	str	r2, [sp, #0]
 800f8c4:	9302      	str	r3, [sp, #8]
 800f8c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8c8:	0032      	movs	r2, r6
 800f8ca:	9301      	str	r3, [sp, #4]
 800f8cc:	003b      	movs	r3, r7
 800f8ce:	f000 feb7 	bl	8010640 <_dtoa_r>
 800f8d2:	0004      	movs	r4, r0
 800f8d4:	2d47      	cmp	r5, #71	@ 0x47
 800f8d6:	d11b      	bne.n	800f910 <__cvt+0x90>
 800f8d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f8da:	07db      	lsls	r3, r3, #31
 800f8dc:	d511      	bpl.n	800f902 <__cvt+0x82>
 800f8de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8e0:	18c3      	adds	r3, r0, r3
 800f8e2:	9307      	str	r3, [sp, #28]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	0030      	movs	r0, r6
 800f8ea:	0039      	movs	r1, r7
 800f8ec:	f7f0 fdaa 	bl	8000444 <__aeabi_dcmpeq>
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d001      	beq.n	800f8f8 <__cvt+0x78>
 800f8f4:	9b07      	ldr	r3, [sp, #28]
 800f8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f8:	2230      	movs	r2, #48	@ 0x30
 800f8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8fc:	9907      	ldr	r1, [sp, #28]
 800f8fe:	428b      	cmp	r3, r1
 800f900:	d320      	bcc.n	800f944 <__cvt+0xc4>
 800f902:	0020      	movs	r0, r4
 800f904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f906:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f908:	1b1b      	subs	r3, r3, r4
 800f90a:	6013      	str	r3, [r2, #0]
 800f90c:	b00b      	add	sp, #44	@ 0x2c
 800f90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f912:	18c3      	adds	r3, r0, r3
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	2d46      	cmp	r5, #70	@ 0x46
 800f918:	d1e4      	bne.n	800f8e4 <__cvt+0x64>
 800f91a:	7803      	ldrb	r3, [r0, #0]
 800f91c:	2b30      	cmp	r3, #48	@ 0x30
 800f91e:	d10c      	bne.n	800f93a <__cvt+0xba>
 800f920:	2200      	movs	r2, #0
 800f922:	2300      	movs	r3, #0
 800f924:	0030      	movs	r0, r6
 800f926:	0039      	movs	r1, r7
 800f928:	f7f0 fd8c 	bl	8000444 <__aeabi_dcmpeq>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d104      	bne.n	800f93a <__cvt+0xba>
 800f930:	2301      	movs	r3, #1
 800f932:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f934:	1a9b      	subs	r3, r3, r2
 800f936:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f938:	6013      	str	r3, [r2, #0]
 800f93a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f93c:	9a07      	ldr	r2, [sp, #28]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	18d3      	adds	r3, r2, r3
 800f942:	e7ce      	b.n	800f8e2 <__cvt+0x62>
 800f944:	1c59      	adds	r1, r3, #1
 800f946:	9109      	str	r1, [sp, #36]	@ 0x24
 800f948:	701a      	strb	r2, [r3, #0]
 800f94a:	e7d6      	b.n	800f8fa <__cvt+0x7a>

0800f94c <__exponent>:
 800f94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94e:	232b      	movs	r3, #43	@ 0x2b
 800f950:	b085      	sub	sp, #20
 800f952:	0005      	movs	r5, r0
 800f954:	1e0c      	subs	r4, r1, #0
 800f956:	7002      	strb	r2, [r0, #0]
 800f958:	da01      	bge.n	800f95e <__exponent+0x12>
 800f95a:	424c      	negs	r4, r1
 800f95c:	3302      	adds	r3, #2
 800f95e:	706b      	strb	r3, [r5, #1]
 800f960:	2c09      	cmp	r4, #9
 800f962:	dd2c      	ble.n	800f9be <__exponent+0x72>
 800f964:	ab02      	add	r3, sp, #8
 800f966:	1dde      	adds	r6, r3, #7
 800f968:	0020      	movs	r0, r4
 800f96a:	210a      	movs	r1, #10
 800f96c:	f7f0 fd54 	bl	8000418 <__aeabi_idivmod>
 800f970:	0037      	movs	r7, r6
 800f972:	3130      	adds	r1, #48	@ 0x30
 800f974:	3e01      	subs	r6, #1
 800f976:	0020      	movs	r0, r4
 800f978:	7031      	strb	r1, [r6, #0]
 800f97a:	210a      	movs	r1, #10
 800f97c:	9401      	str	r4, [sp, #4]
 800f97e:	f7f0 fc65 	bl	800024c <__divsi3>
 800f982:	9b01      	ldr	r3, [sp, #4]
 800f984:	0004      	movs	r4, r0
 800f986:	2b63      	cmp	r3, #99	@ 0x63
 800f988:	dcee      	bgt.n	800f968 <__exponent+0x1c>
 800f98a:	1eba      	subs	r2, r7, #2
 800f98c:	1ca8      	adds	r0, r5, #2
 800f98e:	0001      	movs	r1, r0
 800f990:	0013      	movs	r3, r2
 800f992:	3430      	adds	r4, #48	@ 0x30
 800f994:	7014      	strb	r4, [r2, #0]
 800f996:	ac02      	add	r4, sp, #8
 800f998:	3407      	adds	r4, #7
 800f99a:	429c      	cmp	r4, r3
 800f99c:	d80a      	bhi.n	800f9b4 <__exponent+0x68>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	4294      	cmp	r4, r2
 800f9a2:	d303      	bcc.n	800f9ac <__exponent+0x60>
 800f9a4:	3309      	adds	r3, #9
 800f9a6:	aa02      	add	r2, sp, #8
 800f9a8:	189b      	adds	r3, r3, r2
 800f9aa:	1bdb      	subs	r3, r3, r7
 800f9ac:	18c0      	adds	r0, r0, r3
 800f9ae:	1b40      	subs	r0, r0, r5
 800f9b0:	b005      	add	sp, #20
 800f9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b4:	781c      	ldrb	r4, [r3, #0]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	700c      	strb	r4, [r1, #0]
 800f9ba:	3101      	adds	r1, #1
 800f9bc:	e7eb      	b.n	800f996 <__exponent+0x4a>
 800f9be:	2330      	movs	r3, #48	@ 0x30
 800f9c0:	18e4      	adds	r4, r4, r3
 800f9c2:	70ab      	strb	r3, [r5, #2]
 800f9c4:	1d28      	adds	r0, r5, #4
 800f9c6:	70ec      	strb	r4, [r5, #3]
 800f9c8:	e7f1      	b.n	800f9ae <__exponent+0x62>
	...

0800f9cc <_printf_float>:
 800f9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ce:	b097      	sub	sp, #92	@ 0x5c
 800f9d0:	000d      	movs	r5, r1
 800f9d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f9d4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f9d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800f9da:	f000 fd11 	bl	8010400 <_localeconv_r>
 800f9de:	6803      	ldr	r3, [r0, #0]
 800f9e0:	0018      	movs	r0, r3
 800f9e2:	930d      	str	r3, [sp, #52]	@ 0x34
 800f9e4:	f7f0 fb8c 	bl	8000100 <strlen>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f9ec:	9314      	str	r3, [sp, #80]	@ 0x50
 800f9ee:	7e2b      	ldrb	r3, [r5, #24]
 800f9f0:	2207      	movs	r2, #7
 800f9f2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	930e      	str	r3, [sp, #56]	@ 0x38
 800f9f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	05c9      	lsls	r1, r1, #23
 800f9fe:	d545      	bpl.n	800fa8c <_printf_float+0xc0>
 800fa00:	189b      	adds	r3, r3, r2
 800fa02:	4393      	bics	r3, r2
 800fa04:	001a      	movs	r2, r3
 800fa06:	3208      	adds	r2, #8
 800fa08:	6022      	str	r2, [r4, #0]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	681e      	ldr	r6, [r3, #0]
 800fa0e:	685f      	ldr	r7, [r3, #4]
 800fa10:	007b      	lsls	r3, r7, #1
 800fa12:	085b      	lsrs	r3, r3, #1
 800fa14:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa16:	9610      	str	r6, [sp, #64]	@ 0x40
 800fa18:	64ae      	str	r6, [r5, #72]	@ 0x48
 800fa1a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800fa1c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fa1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fa20:	4ba7      	ldr	r3, [pc, #668]	@ (800fcc0 <_printf_float+0x2f4>)
 800fa22:	4252      	negs	r2, r2
 800fa24:	f7f2 fc9a 	bl	800235c <__aeabi_dcmpun>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d131      	bne.n	800fa90 <_printf_float+0xc4>
 800fa2c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fa2e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fa30:	2201      	movs	r2, #1
 800fa32:	4ba3      	ldr	r3, [pc, #652]	@ (800fcc0 <_printf_float+0x2f4>)
 800fa34:	4252      	negs	r2, r2
 800fa36:	f7f0 fd15 	bl	8000464 <__aeabi_dcmple>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d128      	bne.n	800fa90 <_printf_float+0xc4>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	2300      	movs	r3, #0
 800fa42:	0030      	movs	r0, r6
 800fa44:	0039      	movs	r1, r7
 800fa46:	f7f0 fd03 	bl	8000450 <__aeabi_dcmplt>
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d003      	beq.n	800fa56 <_printf_float+0x8a>
 800fa4e:	002b      	movs	r3, r5
 800fa50:	222d      	movs	r2, #45	@ 0x2d
 800fa52:	3343      	adds	r3, #67	@ 0x43
 800fa54:	701a      	strb	r2, [r3, #0]
 800fa56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa58:	4f9a      	ldr	r7, [pc, #616]	@ (800fcc4 <_printf_float+0x2f8>)
 800fa5a:	2b47      	cmp	r3, #71	@ 0x47
 800fa5c:	d800      	bhi.n	800fa60 <_printf_float+0x94>
 800fa5e:	4f9a      	ldr	r7, [pc, #616]	@ (800fcc8 <_printf_float+0x2fc>)
 800fa60:	2303      	movs	r3, #3
 800fa62:	2400      	movs	r4, #0
 800fa64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa66:	612b      	str	r3, [r5, #16]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	439a      	bics	r2, r3
 800fa6c:	602a      	str	r2, [r5, #0]
 800fa6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa70:	0029      	movs	r1, r5
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa78:	aa15      	add	r2, sp, #84	@ 0x54
 800fa7a:	f000 f9e5 	bl	800fe48 <_printf_common>
 800fa7e:	3001      	adds	r0, #1
 800fa80:	d000      	beq.n	800fa84 <_printf_float+0xb8>
 800fa82:	e09e      	b.n	800fbc2 <_printf_float+0x1f6>
 800fa84:	2001      	movs	r0, #1
 800fa86:	4240      	negs	r0, r0
 800fa88:	b017      	add	sp, #92	@ 0x5c
 800fa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa8c:	3307      	adds	r3, #7
 800fa8e:	e7b8      	b.n	800fa02 <_printf_float+0x36>
 800fa90:	0032      	movs	r2, r6
 800fa92:	003b      	movs	r3, r7
 800fa94:	0030      	movs	r0, r6
 800fa96:	0039      	movs	r1, r7
 800fa98:	f7f2 fc60 	bl	800235c <__aeabi_dcmpun>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d00b      	beq.n	800fab8 <_printf_float+0xec>
 800faa0:	2f00      	cmp	r7, #0
 800faa2:	da03      	bge.n	800faac <_printf_float+0xe0>
 800faa4:	002b      	movs	r3, r5
 800faa6:	222d      	movs	r2, #45	@ 0x2d
 800faa8:	3343      	adds	r3, #67	@ 0x43
 800faaa:	701a      	strb	r2, [r3, #0]
 800faac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800faae:	4f87      	ldr	r7, [pc, #540]	@ (800fccc <_printf_float+0x300>)
 800fab0:	2b47      	cmp	r3, #71	@ 0x47
 800fab2:	d8d5      	bhi.n	800fa60 <_printf_float+0x94>
 800fab4:	4f86      	ldr	r7, [pc, #536]	@ (800fcd0 <_printf_float+0x304>)
 800fab6:	e7d3      	b.n	800fa60 <_printf_float+0x94>
 800fab8:	2220      	movs	r2, #32
 800faba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800fabc:	686b      	ldr	r3, [r5, #4]
 800fabe:	4394      	bics	r4, r2
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	d146      	bne.n	800fb52 <_printf_float+0x186>
 800fac4:	3307      	adds	r3, #7
 800fac6:	606b      	str	r3, [r5, #4]
 800fac8:	2380      	movs	r3, #128	@ 0x80
 800faca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800facc:	00db      	lsls	r3, r3, #3
 800face:	4313      	orrs	r3, r2
 800fad0:	2200      	movs	r2, #0
 800fad2:	602b      	str	r3, [r5, #0]
 800fad4:	9206      	str	r2, [sp, #24]
 800fad6:	aa14      	add	r2, sp, #80	@ 0x50
 800fad8:	9205      	str	r2, [sp, #20]
 800fada:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fadc:	a90a      	add	r1, sp, #40	@ 0x28
 800fade:	9204      	str	r2, [sp, #16]
 800fae0:	aa13      	add	r2, sp, #76	@ 0x4c
 800fae2:	9203      	str	r2, [sp, #12]
 800fae4:	2223      	movs	r2, #35	@ 0x23
 800fae6:	1852      	adds	r2, r2, r1
 800fae8:	9202      	str	r2, [sp, #8]
 800faea:	9301      	str	r3, [sp, #4]
 800faec:	686b      	ldr	r3, [r5, #4]
 800faee:	0032      	movs	r2, r6
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faf4:	003b      	movs	r3, r7
 800faf6:	f7ff fec3 	bl	800f880 <__cvt>
 800fafa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fafc:	0007      	movs	r7, r0
 800fafe:	2c47      	cmp	r4, #71	@ 0x47
 800fb00:	d12d      	bne.n	800fb5e <_printf_float+0x192>
 800fb02:	1cd3      	adds	r3, r2, #3
 800fb04:	db02      	blt.n	800fb0c <_printf_float+0x140>
 800fb06:	686b      	ldr	r3, [r5, #4]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	dd47      	ble.n	800fb9c <_printf_float+0x1d0>
 800fb0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb0e:	3b02      	subs	r3, #2
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	930c      	str	r3, [sp, #48]	@ 0x30
 800fb14:	0028      	movs	r0, r5
 800fb16:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fb18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fb1a:	3901      	subs	r1, #1
 800fb1c:	3050      	adds	r0, #80	@ 0x50
 800fb1e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fb20:	f7ff ff14 	bl	800f94c <__exponent>
 800fb24:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb26:	0004      	movs	r4, r0
 800fb28:	1813      	adds	r3, r2, r0
 800fb2a:	612b      	str	r3, [r5, #16]
 800fb2c:	2a01      	cmp	r2, #1
 800fb2e:	dc02      	bgt.n	800fb36 <_printf_float+0x16a>
 800fb30:	682a      	ldr	r2, [r5, #0]
 800fb32:	07d2      	lsls	r2, r2, #31
 800fb34:	d501      	bpl.n	800fb3a <_printf_float+0x16e>
 800fb36:	3301      	adds	r3, #1
 800fb38:	612b      	str	r3, [r5, #16]
 800fb3a:	2323      	movs	r3, #35	@ 0x23
 800fb3c:	aa0a      	add	r2, sp, #40	@ 0x28
 800fb3e:	189b      	adds	r3, r3, r2
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d100      	bne.n	800fb48 <_printf_float+0x17c>
 800fb46:	e792      	b.n	800fa6e <_printf_float+0xa2>
 800fb48:	002b      	movs	r3, r5
 800fb4a:	222d      	movs	r2, #45	@ 0x2d
 800fb4c:	3343      	adds	r3, #67	@ 0x43
 800fb4e:	701a      	strb	r2, [r3, #0]
 800fb50:	e78d      	b.n	800fa6e <_printf_float+0xa2>
 800fb52:	2c47      	cmp	r4, #71	@ 0x47
 800fb54:	d1b8      	bne.n	800fac8 <_printf_float+0xfc>
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1b6      	bne.n	800fac8 <_printf_float+0xfc>
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	e7b3      	b.n	800fac6 <_printf_float+0xfa>
 800fb5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb60:	2b65      	cmp	r3, #101	@ 0x65
 800fb62:	d9d7      	bls.n	800fb14 <_printf_float+0x148>
 800fb64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb66:	2b66      	cmp	r3, #102	@ 0x66
 800fb68:	d11a      	bne.n	800fba0 <_printf_float+0x1d4>
 800fb6a:	686b      	ldr	r3, [r5, #4]
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	dd09      	ble.n	800fb84 <_printf_float+0x1b8>
 800fb70:	612a      	str	r2, [r5, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d102      	bne.n	800fb7c <_printf_float+0x1b0>
 800fb76:	6829      	ldr	r1, [r5, #0]
 800fb78:	07c9      	lsls	r1, r1, #31
 800fb7a:	d50b      	bpl.n	800fb94 <_printf_float+0x1c8>
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	189b      	adds	r3, r3, r2
 800fb80:	612b      	str	r3, [r5, #16]
 800fb82:	e007      	b.n	800fb94 <_printf_float+0x1c8>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d103      	bne.n	800fb90 <_printf_float+0x1c4>
 800fb88:	2201      	movs	r2, #1
 800fb8a:	6829      	ldr	r1, [r5, #0]
 800fb8c:	4211      	tst	r1, r2
 800fb8e:	d000      	beq.n	800fb92 <_printf_float+0x1c6>
 800fb90:	1c9a      	adds	r2, r3, #2
 800fb92:	612a      	str	r2, [r5, #16]
 800fb94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fb96:	2400      	movs	r4, #0
 800fb98:	65ab      	str	r3, [r5, #88]	@ 0x58
 800fb9a:	e7ce      	b.n	800fb3a <_printf_float+0x16e>
 800fb9c:	2367      	movs	r3, #103	@ 0x67
 800fb9e:	930c      	str	r3, [sp, #48]	@ 0x30
 800fba0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fba2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fba4:	4299      	cmp	r1, r3
 800fba6:	db06      	blt.n	800fbb6 <_printf_float+0x1ea>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	6129      	str	r1, [r5, #16]
 800fbac:	07db      	lsls	r3, r3, #31
 800fbae:	d5f1      	bpl.n	800fb94 <_printf_float+0x1c8>
 800fbb0:	3101      	adds	r1, #1
 800fbb2:	6129      	str	r1, [r5, #16]
 800fbb4:	e7ee      	b.n	800fb94 <_printf_float+0x1c8>
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	2900      	cmp	r1, #0
 800fbba:	dce0      	bgt.n	800fb7e <_printf_float+0x1b2>
 800fbbc:	1892      	adds	r2, r2, r2
 800fbbe:	1a52      	subs	r2, r2, r1
 800fbc0:	e7dd      	b.n	800fb7e <_printf_float+0x1b2>
 800fbc2:	682a      	ldr	r2, [r5, #0]
 800fbc4:	0553      	lsls	r3, r2, #21
 800fbc6:	d408      	bmi.n	800fbda <_printf_float+0x20e>
 800fbc8:	692b      	ldr	r3, [r5, #16]
 800fbca:	003a      	movs	r2, r7
 800fbcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fbce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fbd2:	47a0      	blx	r4
 800fbd4:	3001      	adds	r0, #1
 800fbd6:	d129      	bne.n	800fc2c <_printf_float+0x260>
 800fbd8:	e754      	b.n	800fa84 <_printf_float+0xb8>
 800fbda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbdc:	2b65      	cmp	r3, #101	@ 0x65
 800fbde:	d800      	bhi.n	800fbe2 <_printf_float+0x216>
 800fbe0:	e0db      	b.n	800fd9a <_printf_float+0x3ce>
 800fbe2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800fbe4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	2300      	movs	r3, #0
 800fbea:	f7f0 fc2b 	bl	8000444 <__aeabi_dcmpeq>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d033      	beq.n	800fc5a <_printf_float+0x28e>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	4a37      	ldr	r2, [pc, #220]	@ (800fcd4 <_printf_float+0x308>)
 800fbf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fbf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbfa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fbfc:	47a0      	blx	r4
 800fbfe:	3001      	adds	r0, #1
 800fc00:	d100      	bne.n	800fc04 <_printf_float+0x238>
 800fc02:	e73f      	b.n	800fa84 <_printf_float+0xb8>
 800fc04:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800fc06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc08:	42b3      	cmp	r3, r6
 800fc0a:	db02      	blt.n	800fc12 <_printf_float+0x246>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	07db      	lsls	r3, r3, #31
 800fc10:	d50c      	bpl.n	800fc2c <_printf_float+0x260>
 800fc12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc1c:	47a0      	blx	r4
 800fc1e:	2400      	movs	r4, #0
 800fc20:	3001      	adds	r0, #1
 800fc22:	d100      	bne.n	800fc26 <_printf_float+0x25a>
 800fc24:	e72e      	b.n	800fa84 <_printf_float+0xb8>
 800fc26:	1e73      	subs	r3, r6, #1
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	dc0a      	bgt.n	800fc42 <_printf_float+0x276>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	079b      	lsls	r3, r3, #30
 800fc30:	d500      	bpl.n	800fc34 <_printf_float+0x268>
 800fc32:	e106      	b.n	800fe42 <_printf_float+0x476>
 800fc34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fc36:	68e8      	ldr	r0, [r5, #12]
 800fc38:	4298      	cmp	r0, r3
 800fc3a:	db00      	blt.n	800fc3e <_printf_float+0x272>
 800fc3c:	e724      	b.n	800fa88 <_printf_float+0xbc>
 800fc3e:	0018      	movs	r0, r3
 800fc40:	e722      	b.n	800fa88 <_printf_float+0xbc>
 800fc42:	002a      	movs	r2, r5
 800fc44:	2301      	movs	r3, #1
 800fc46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fc4c:	321a      	adds	r2, #26
 800fc4e:	47b8      	blx	r7
 800fc50:	3001      	adds	r0, #1
 800fc52:	d100      	bne.n	800fc56 <_printf_float+0x28a>
 800fc54:	e716      	b.n	800fa84 <_printf_float+0xb8>
 800fc56:	3401      	adds	r4, #1
 800fc58:	e7e5      	b.n	800fc26 <_printf_float+0x25a>
 800fc5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	dc3b      	bgt.n	800fcd8 <_printf_float+0x30c>
 800fc60:	2301      	movs	r3, #1
 800fc62:	4a1c      	ldr	r2, [pc, #112]	@ (800fcd4 <_printf_float+0x308>)
 800fc64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc68:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fc6a:	47a0      	blx	r4
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d100      	bne.n	800fc72 <_printf_float+0x2a6>
 800fc70:	e708      	b.n	800fa84 <_printf_float+0xb8>
 800fc72:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800fc74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc76:	4333      	orrs	r3, r6
 800fc78:	d102      	bne.n	800fc80 <_printf_float+0x2b4>
 800fc7a:	682b      	ldr	r3, [r5, #0]
 800fc7c:	07db      	lsls	r3, r3, #31
 800fc7e:	d5d5      	bpl.n	800fc2c <_printf_float+0x260>
 800fc80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fc8a:	47a0      	blx	r4
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	3001      	adds	r0, #1
 800fc90:	d100      	bne.n	800fc94 <_printf_float+0x2c8>
 800fc92:	e6f7      	b.n	800fa84 <_printf_float+0xb8>
 800fc94:	930c      	str	r3, [sp, #48]	@ 0x30
 800fc96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fc9a:	425b      	negs	r3, r3
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	dc01      	bgt.n	800fca4 <_printf_float+0x2d8>
 800fca0:	0033      	movs	r3, r6
 800fca2:	e792      	b.n	800fbca <_printf_float+0x1fe>
 800fca4:	002a      	movs	r2, r5
 800fca6:	2301      	movs	r3, #1
 800fca8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fcaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fcae:	321a      	adds	r2, #26
 800fcb0:	47a0      	blx	r4
 800fcb2:	3001      	adds	r0, #1
 800fcb4:	d100      	bne.n	800fcb8 <_printf_float+0x2ec>
 800fcb6:	e6e5      	b.n	800fa84 <_printf_float+0xb8>
 800fcb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcba:	3301      	adds	r3, #1
 800fcbc:	e7ea      	b.n	800fc94 <_printf_float+0x2c8>
 800fcbe:	46c0      	nop			@ (mov r8, r8)
 800fcc0:	7fefffff 	.word	0x7fefffff
 800fcc4:	0801323e 	.word	0x0801323e
 800fcc8:	0801323a 	.word	0x0801323a
 800fccc:	08013246 	.word	0x08013246
 800fcd0:	08013242 	.word	0x08013242
 800fcd4:	0801324a 	.word	0x0801324a
 800fcd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fcda:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800fcdc:	930c      	str	r3, [sp, #48]	@ 0x30
 800fcde:	429e      	cmp	r6, r3
 800fce0:	dd00      	ble.n	800fce4 <_printf_float+0x318>
 800fce2:	001e      	movs	r6, r3
 800fce4:	2e00      	cmp	r6, #0
 800fce6:	dc31      	bgt.n	800fd4c <_printf_float+0x380>
 800fce8:	43f3      	mvns	r3, r6
 800fcea:	2400      	movs	r4, #0
 800fcec:	17db      	asrs	r3, r3, #31
 800fcee:	4033      	ands	r3, r6
 800fcf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800fcf2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800fcf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcf6:	1af3      	subs	r3, r6, r3
 800fcf8:	42a3      	cmp	r3, r4
 800fcfa:	dc30      	bgt.n	800fd5e <_printf_float+0x392>
 800fcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fcfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fd00:	429a      	cmp	r2, r3
 800fd02:	dc38      	bgt.n	800fd76 <_printf_float+0x3aa>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	07db      	lsls	r3, r3, #31
 800fd08:	d435      	bmi.n	800fd76 <_printf_float+0x3aa>
 800fd0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fd0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fd10:	1b9b      	subs	r3, r3, r6
 800fd12:	1b14      	subs	r4, r2, r4
 800fd14:	429c      	cmp	r4, r3
 800fd16:	dd00      	ble.n	800fd1a <_printf_float+0x34e>
 800fd18:	001c      	movs	r4, r3
 800fd1a:	2c00      	cmp	r4, #0
 800fd1c:	dc34      	bgt.n	800fd88 <_printf_float+0x3bc>
 800fd1e:	43e3      	mvns	r3, r4
 800fd20:	2600      	movs	r6, #0
 800fd22:	17db      	asrs	r3, r3, #31
 800fd24:	401c      	ands	r4, r3
 800fd26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fd28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	1b1b      	subs	r3, r3, r4
 800fd2e:	42b3      	cmp	r3, r6
 800fd30:	dc00      	bgt.n	800fd34 <_printf_float+0x368>
 800fd32:	e77b      	b.n	800fc2c <_printf_float+0x260>
 800fd34:	002a      	movs	r2, r5
 800fd36:	2301      	movs	r3, #1
 800fd38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fd3e:	321a      	adds	r2, #26
 800fd40:	47b8      	blx	r7
 800fd42:	3001      	adds	r0, #1
 800fd44:	d100      	bne.n	800fd48 <_printf_float+0x37c>
 800fd46:	e69d      	b.n	800fa84 <_printf_float+0xb8>
 800fd48:	3601      	adds	r6, #1
 800fd4a:	e7ec      	b.n	800fd26 <_printf_float+0x35a>
 800fd4c:	0033      	movs	r3, r6
 800fd4e:	003a      	movs	r2, r7
 800fd50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fd56:	47a0      	blx	r4
 800fd58:	3001      	adds	r0, #1
 800fd5a:	d1c5      	bne.n	800fce8 <_printf_float+0x31c>
 800fd5c:	e692      	b.n	800fa84 <_printf_float+0xb8>
 800fd5e:	002a      	movs	r2, r5
 800fd60:	2301      	movs	r3, #1
 800fd62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd66:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fd68:	321a      	adds	r2, #26
 800fd6a:	47b0      	blx	r6
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d100      	bne.n	800fd72 <_printf_float+0x3a6>
 800fd70:	e688      	b.n	800fa84 <_printf_float+0xb8>
 800fd72:	3401      	adds	r4, #1
 800fd74:	e7bd      	b.n	800fcf2 <_printf_float+0x326>
 800fd76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd7e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800fd80:	47a0      	blx	r4
 800fd82:	3001      	adds	r0, #1
 800fd84:	d1c1      	bne.n	800fd0a <_printf_float+0x33e>
 800fd86:	e67d      	b.n	800fa84 <_printf_float+0xb8>
 800fd88:	19ba      	adds	r2, r7, r6
 800fd8a:	0023      	movs	r3, r4
 800fd8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fd8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fd92:	47b0      	blx	r6
 800fd94:	3001      	adds	r0, #1
 800fd96:	d1c2      	bne.n	800fd1e <_printf_float+0x352>
 800fd98:	e674      	b.n	800fa84 <_printf_float+0xb8>
 800fd9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fd9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	dc02      	bgt.n	800fda8 <_printf_float+0x3dc>
 800fda2:	2301      	movs	r3, #1
 800fda4:	421a      	tst	r2, r3
 800fda6:	d039      	beq.n	800fe1c <_printf_float+0x450>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	003a      	movs	r2, r7
 800fdac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdb0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fdb2:	47b0      	blx	r6
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	d100      	bne.n	800fdba <_printf_float+0x3ee>
 800fdb8:	e664      	b.n	800fa84 <_printf_float+0xb8>
 800fdba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdc2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fdc4:	47b0      	blx	r6
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	d100      	bne.n	800fdcc <_printf_float+0x400>
 800fdca:	e65b      	b.n	800fa84 <_printf_float+0xb8>
 800fdcc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800fdce:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fdd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f7f0 fb33 	bl	8000444 <__aeabi_dcmpeq>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d11a      	bne.n	800fe18 <_printf_float+0x44c>
 800fde2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fde4:	1c7a      	adds	r2, r7, #1
 800fde6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fde8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fdec:	47b0      	blx	r6
 800fdee:	3001      	adds	r0, #1
 800fdf0:	d10e      	bne.n	800fe10 <_printf_float+0x444>
 800fdf2:	e647      	b.n	800fa84 <_printf_float+0xb8>
 800fdf4:	002a      	movs	r2, r5
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fdfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdfc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fdfe:	321a      	adds	r2, #26
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	d100      	bne.n	800fe08 <_printf_float+0x43c>
 800fe06:	e63d      	b.n	800fa84 <_printf_float+0xb8>
 800fe08:	3601      	adds	r6, #1
 800fe0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe0c:	429e      	cmp	r6, r3
 800fe0e:	dbf1      	blt.n	800fdf4 <_printf_float+0x428>
 800fe10:	002a      	movs	r2, r5
 800fe12:	0023      	movs	r3, r4
 800fe14:	3250      	adds	r2, #80	@ 0x50
 800fe16:	e6d9      	b.n	800fbcc <_printf_float+0x200>
 800fe18:	2600      	movs	r6, #0
 800fe1a:	e7f6      	b.n	800fe0a <_printf_float+0x43e>
 800fe1c:	003a      	movs	r2, r7
 800fe1e:	e7e2      	b.n	800fde6 <_printf_float+0x41a>
 800fe20:	002a      	movs	r2, r5
 800fe22:	2301      	movs	r3, #1
 800fe24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800fe2a:	3219      	adds	r2, #25
 800fe2c:	47b0      	blx	r6
 800fe2e:	3001      	adds	r0, #1
 800fe30:	d100      	bne.n	800fe34 <_printf_float+0x468>
 800fe32:	e627      	b.n	800fa84 <_printf_float+0xb8>
 800fe34:	3401      	adds	r4, #1
 800fe36:	68eb      	ldr	r3, [r5, #12]
 800fe38:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fe3a:	1a9b      	subs	r3, r3, r2
 800fe3c:	42a3      	cmp	r3, r4
 800fe3e:	dcef      	bgt.n	800fe20 <_printf_float+0x454>
 800fe40:	e6f8      	b.n	800fc34 <_printf_float+0x268>
 800fe42:	2400      	movs	r4, #0
 800fe44:	e7f7      	b.n	800fe36 <_printf_float+0x46a>
 800fe46:	46c0      	nop			@ (mov r8, r8)

0800fe48 <_printf_common>:
 800fe48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe4a:	0016      	movs	r6, r2
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	688a      	ldr	r2, [r1, #8]
 800fe50:	690b      	ldr	r3, [r1, #16]
 800fe52:	000c      	movs	r4, r1
 800fe54:	9000      	str	r0, [sp, #0]
 800fe56:	4293      	cmp	r3, r2
 800fe58:	da00      	bge.n	800fe5c <_printf_common+0x14>
 800fe5a:	0013      	movs	r3, r2
 800fe5c:	0022      	movs	r2, r4
 800fe5e:	6033      	str	r3, [r6, #0]
 800fe60:	3243      	adds	r2, #67	@ 0x43
 800fe62:	7812      	ldrb	r2, [r2, #0]
 800fe64:	2a00      	cmp	r2, #0
 800fe66:	d001      	beq.n	800fe6c <_printf_common+0x24>
 800fe68:	3301      	adds	r3, #1
 800fe6a:	6033      	str	r3, [r6, #0]
 800fe6c:	6823      	ldr	r3, [r4, #0]
 800fe6e:	069b      	lsls	r3, r3, #26
 800fe70:	d502      	bpl.n	800fe78 <_printf_common+0x30>
 800fe72:	6833      	ldr	r3, [r6, #0]
 800fe74:	3302      	adds	r3, #2
 800fe76:	6033      	str	r3, [r6, #0]
 800fe78:	6822      	ldr	r2, [r4, #0]
 800fe7a:	2306      	movs	r3, #6
 800fe7c:	0015      	movs	r5, r2
 800fe7e:	401d      	ands	r5, r3
 800fe80:	421a      	tst	r2, r3
 800fe82:	d027      	beq.n	800fed4 <_printf_common+0x8c>
 800fe84:	0023      	movs	r3, r4
 800fe86:	3343      	adds	r3, #67	@ 0x43
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	1e5a      	subs	r2, r3, #1
 800fe8c:	4193      	sbcs	r3, r2
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	0692      	lsls	r2, r2, #26
 800fe92:	d430      	bmi.n	800fef6 <_printf_common+0xae>
 800fe94:	0022      	movs	r2, r4
 800fe96:	9901      	ldr	r1, [sp, #4]
 800fe98:	9800      	ldr	r0, [sp, #0]
 800fe9a:	9d08      	ldr	r5, [sp, #32]
 800fe9c:	3243      	adds	r2, #67	@ 0x43
 800fe9e:	47a8      	blx	r5
 800fea0:	3001      	adds	r0, #1
 800fea2:	d025      	beq.n	800fef0 <_printf_common+0xa8>
 800fea4:	2206      	movs	r2, #6
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	2500      	movs	r5, #0
 800feaa:	4013      	ands	r3, r2
 800feac:	2b04      	cmp	r3, #4
 800feae:	d105      	bne.n	800febc <_printf_common+0x74>
 800feb0:	6833      	ldr	r3, [r6, #0]
 800feb2:	68e5      	ldr	r5, [r4, #12]
 800feb4:	1aed      	subs	r5, r5, r3
 800feb6:	43eb      	mvns	r3, r5
 800feb8:	17db      	asrs	r3, r3, #31
 800feba:	401d      	ands	r5, r3
 800febc:	68a3      	ldr	r3, [r4, #8]
 800febe:	6922      	ldr	r2, [r4, #16]
 800fec0:	4293      	cmp	r3, r2
 800fec2:	dd01      	ble.n	800fec8 <_printf_common+0x80>
 800fec4:	1a9b      	subs	r3, r3, r2
 800fec6:	18ed      	adds	r5, r5, r3
 800fec8:	2600      	movs	r6, #0
 800feca:	42b5      	cmp	r5, r6
 800fecc:	d120      	bne.n	800ff10 <_printf_common+0xc8>
 800fece:	2000      	movs	r0, #0
 800fed0:	e010      	b.n	800fef4 <_printf_common+0xac>
 800fed2:	3501      	adds	r5, #1
 800fed4:	68e3      	ldr	r3, [r4, #12]
 800fed6:	6832      	ldr	r2, [r6, #0]
 800fed8:	1a9b      	subs	r3, r3, r2
 800feda:	42ab      	cmp	r3, r5
 800fedc:	ddd2      	ble.n	800fe84 <_printf_common+0x3c>
 800fede:	0022      	movs	r2, r4
 800fee0:	2301      	movs	r3, #1
 800fee2:	9901      	ldr	r1, [sp, #4]
 800fee4:	9800      	ldr	r0, [sp, #0]
 800fee6:	9f08      	ldr	r7, [sp, #32]
 800fee8:	3219      	adds	r2, #25
 800feea:	47b8      	blx	r7
 800feec:	3001      	adds	r0, #1
 800feee:	d1f0      	bne.n	800fed2 <_printf_common+0x8a>
 800fef0:	2001      	movs	r0, #1
 800fef2:	4240      	negs	r0, r0
 800fef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fef6:	2030      	movs	r0, #48	@ 0x30
 800fef8:	18e1      	adds	r1, r4, r3
 800fefa:	3143      	adds	r1, #67	@ 0x43
 800fefc:	7008      	strb	r0, [r1, #0]
 800fefe:	0021      	movs	r1, r4
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	3145      	adds	r1, #69	@ 0x45
 800ff04:	7809      	ldrb	r1, [r1, #0]
 800ff06:	18a2      	adds	r2, r4, r2
 800ff08:	3243      	adds	r2, #67	@ 0x43
 800ff0a:	3302      	adds	r3, #2
 800ff0c:	7011      	strb	r1, [r2, #0]
 800ff0e:	e7c1      	b.n	800fe94 <_printf_common+0x4c>
 800ff10:	0022      	movs	r2, r4
 800ff12:	2301      	movs	r3, #1
 800ff14:	9901      	ldr	r1, [sp, #4]
 800ff16:	9800      	ldr	r0, [sp, #0]
 800ff18:	9f08      	ldr	r7, [sp, #32]
 800ff1a:	321a      	adds	r2, #26
 800ff1c:	47b8      	blx	r7
 800ff1e:	3001      	adds	r0, #1
 800ff20:	d0e6      	beq.n	800fef0 <_printf_common+0xa8>
 800ff22:	3601      	adds	r6, #1
 800ff24:	e7d1      	b.n	800feca <_printf_common+0x82>
	...

0800ff28 <_printf_i>:
 800ff28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff2a:	b08b      	sub	sp, #44	@ 0x2c
 800ff2c:	9206      	str	r2, [sp, #24]
 800ff2e:	000a      	movs	r2, r1
 800ff30:	3243      	adds	r2, #67	@ 0x43
 800ff32:	9307      	str	r3, [sp, #28]
 800ff34:	9005      	str	r0, [sp, #20]
 800ff36:	9203      	str	r2, [sp, #12]
 800ff38:	7e0a      	ldrb	r2, [r1, #24]
 800ff3a:	000c      	movs	r4, r1
 800ff3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff3e:	2a78      	cmp	r2, #120	@ 0x78
 800ff40:	d809      	bhi.n	800ff56 <_printf_i+0x2e>
 800ff42:	2a62      	cmp	r2, #98	@ 0x62
 800ff44:	d80b      	bhi.n	800ff5e <_printf_i+0x36>
 800ff46:	2a00      	cmp	r2, #0
 800ff48:	d100      	bne.n	800ff4c <_printf_i+0x24>
 800ff4a:	e0ba      	b.n	80100c2 <_printf_i+0x19a>
 800ff4c:	497a      	ldr	r1, [pc, #488]	@ (8010138 <_printf_i+0x210>)
 800ff4e:	9104      	str	r1, [sp, #16]
 800ff50:	2a58      	cmp	r2, #88	@ 0x58
 800ff52:	d100      	bne.n	800ff56 <_printf_i+0x2e>
 800ff54:	e08e      	b.n	8010074 <_printf_i+0x14c>
 800ff56:	0025      	movs	r5, r4
 800ff58:	3542      	adds	r5, #66	@ 0x42
 800ff5a:	702a      	strb	r2, [r5, #0]
 800ff5c:	e022      	b.n	800ffa4 <_printf_i+0x7c>
 800ff5e:	0010      	movs	r0, r2
 800ff60:	3863      	subs	r0, #99	@ 0x63
 800ff62:	2815      	cmp	r0, #21
 800ff64:	d8f7      	bhi.n	800ff56 <_printf_i+0x2e>
 800ff66:	f7f0 f8dd 	bl	8000124 <__gnu_thumb1_case_shi>
 800ff6a:	0016      	.short	0x0016
 800ff6c:	fff6001f 	.word	0xfff6001f
 800ff70:	fff6fff6 	.word	0xfff6fff6
 800ff74:	001ffff6 	.word	0x001ffff6
 800ff78:	fff6fff6 	.word	0xfff6fff6
 800ff7c:	fff6fff6 	.word	0xfff6fff6
 800ff80:	0036009f 	.word	0x0036009f
 800ff84:	fff6007e 	.word	0xfff6007e
 800ff88:	00b0fff6 	.word	0x00b0fff6
 800ff8c:	0036fff6 	.word	0x0036fff6
 800ff90:	fff6fff6 	.word	0xfff6fff6
 800ff94:	0082      	.short	0x0082
 800ff96:	0025      	movs	r5, r4
 800ff98:	681a      	ldr	r2, [r3, #0]
 800ff9a:	3542      	adds	r5, #66	@ 0x42
 800ff9c:	1d11      	adds	r1, r2, #4
 800ff9e:	6019      	str	r1, [r3, #0]
 800ffa0:	6813      	ldr	r3, [r2, #0]
 800ffa2:	702b      	strb	r3, [r5, #0]
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e09e      	b.n	80100e6 <_printf_i+0x1be>
 800ffa8:	6818      	ldr	r0, [r3, #0]
 800ffaa:	6809      	ldr	r1, [r1, #0]
 800ffac:	1d02      	adds	r2, r0, #4
 800ffae:	060d      	lsls	r5, r1, #24
 800ffb0:	d50b      	bpl.n	800ffca <_printf_i+0xa2>
 800ffb2:	6806      	ldr	r6, [r0, #0]
 800ffb4:	601a      	str	r2, [r3, #0]
 800ffb6:	2e00      	cmp	r6, #0
 800ffb8:	da03      	bge.n	800ffc2 <_printf_i+0x9a>
 800ffba:	232d      	movs	r3, #45	@ 0x2d
 800ffbc:	9a03      	ldr	r2, [sp, #12]
 800ffbe:	4276      	negs	r6, r6
 800ffc0:	7013      	strb	r3, [r2, #0]
 800ffc2:	4b5d      	ldr	r3, [pc, #372]	@ (8010138 <_printf_i+0x210>)
 800ffc4:	270a      	movs	r7, #10
 800ffc6:	9304      	str	r3, [sp, #16]
 800ffc8:	e018      	b.n	800fffc <_printf_i+0xd4>
 800ffca:	6806      	ldr	r6, [r0, #0]
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	0649      	lsls	r1, r1, #25
 800ffd0:	d5f1      	bpl.n	800ffb6 <_printf_i+0x8e>
 800ffd2:	b236      	sxth	r6, r6
 800ffd4:	e7ef      	b.n	800ffb6 <_printf_i+0x8e>
 800ffd6:	6808      	ldr	r0, [r1, #0]
 800ffd8:	6819      	ldr	r1, [r3, #0]
 800ffda:	c940      	ldmia	r1!, {r6}
 800ffdc:	0605      	lsls	r5, r0, #24
 800ffde:	d402      	bmi.n	800ffe6 <_printf_i+0xbe>
 800ffe0:	0640      	lsls	r0, r0, #25
 800ffe2:	d500      	bpl.n	800ffe6 <_printf_i+0xbe>
 800ffe4:	b2b6      	uxth	r6, r6
 800ffe6:	6019      	str	r1, [r3, #0]
 800ffe8:	4b53      	ldr	r3, [pc, #332]	@ (8010138 <_printf_i+0x210>)
 800ffea:	270a      	movs	r7, #10
 800ffec:	9304      	str	r3, [sp, #16]
 800ffee:	2a6f      	cmp	r2, #111	@ 0x6f
 800fff0:	d100      	bne.n	800fff4 <_printf_i+0xcc>
 800fff2:	3f02      	subs	r7, #2
 800fff4:	0023      	movs	r3, r4
 800fff6:	2200      	movs	r2, #0
 800fff8:	3343      	adds	r3, #67	@ 0x43
 800fffa:	701a      	strb	r2, [r3, #0]
 800fffc:	6863      	ldr	r3, [r4, #4]
 800fffe:	60a3      	str	r3, [r4, #8]
 8010000:	2b00      	cmp	r3, #0
 8010002:	db06      	blt.n	8010012 <_printf_i+0xea>
 8010004:	2104      	movs	r1, #4
 8010006:	6822      	ldr	r2, [r4, #0]
 8010008:	9d03      	ldr	r5, [sp, #12]
 801000a:	438a      	bics	r2, r1
 801000c:	6022      	str	r2, [r4, #0]
 801000e:	4333      	orrs	r3, r6
 8010010:	d00c      	beq.n	801002c <_printf_i+0x104>
 8010012:	9d03      	ldr	r5, [sp, #12]
 8010014:	0030      	movs	r0, r6
 8010016:	0039      	movs	r1, r7
 8010018:	f7f0 f914 	bl	8000244 <__aeabi_uidivmod>
 801001c:	9b04      	ldr	r3, [sp, #16]
 801001e:	3d01      	subs	r5, #1
 8010020:	5c5b      	ldrb	r3, [r3, r1]
 8010022:	702b      	strb	r3, [r5, #0]
 8010024:	0033      	movs	r3, r6
 8010026:	0006      	movs	r6, r0
 8010028:	429f      	cmp	r7, r3
 801002a:	d9f3      	bls.n	8010014 <_printf_i+0xec>
 801002c:	2f08      	cmp	r7, #8
 801002e:	d109      	bne.n	8010044 <_printf_i+0x11c>
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	07db      	lsls	r3, r3, #31
 8010034:	d506      	bpl.n	8010044 <_printf_i+0x11c>
 8010036:	6862      	ldr	r2, [r4, #4]
 8010038:	6923      	ldr	r3, [r4, #16]
 801003a:	429a      	cmp	r2, r3
 801003c:	dc02      	bgt.n	8010044 <_printf_i+0x11c>
 801003e:	2330      	movs	r3, #48	@ 0x30
 8010040:	3d01      	subs	r5, #1
 8010042:	702b      	strb	r3, [r5, #0]
 8010044:	9b03      	ldr	r3, [sp, #12]
 8010046:	1b5b      	subs	r3, r3, r5
 8010048:	6123      	str	r3, [r4, #16]
 801004a:	9b07      	ldr	r3, [sp, #28]
 801004c:	0021      	movs	r1, r4
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	9805      	ldr	r0, [sp, #20]
 8010052:	9b06      	ldr	r3, [sp, #24]
 8010054:	aa09      	add	r2, sp, #36	@ 0x24
 8010056:	f7ff fef7 	bl	800fe48 <_printf_common>
 801005a:	3001      	adds	r0, #1
 801005c:	d148      	bne.n	80100f0 <_printf_i+0x1c8>
 801005e:	2001      	movs	r0, #1
 8010060:	4240      	negs	r0, r0
 8010062:	b00b      	add	sp, #44	@ 0x2c
 8010064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010066:	2220      	movs	r2, #32
 8010068:	6809      	ldr	r1, [r1, #0]
 801006a:	430a      	orrs	r2, r1
 801006c:	6022      	str	r2, [r4, #0]
 801006e:	2278      	movs	r2, #120	@ 0x78
 8010070:	4932      	ldr	r1, [pc, #200]	@ (801013c <_printf_i+0x214>)
 8010072:	9104      	str	r1, [sp, #16]
 8010074:	0021      	movs	r1, r4
 8010076:	3145      	adds	r1, #69	@ 0x45
 8010078:	700a      	strb	r2, [r1, #0]
 801007a:	6819      	ldr	r1, [r3, #0]
 801007c:	6822      	ldr	r2, [r4, #0]
 801007e:	c940      	ldmia	r1!, {r6}
 8010080:	0610      	lsls	r0, r2, #24
 8010082:	d402      	bmi.n	801008a <_printf_i+0x162>
 8010084:	0650      	lsls	r0, r2, #25
 8010086:	d500      	bpl.n	801008a <_printf_i+0x162>
 8010088:	b2b6      	uxth	r6, r6
 801008a:	6019      	str	r1, [r3, #0]
 801008c:	07d3      	lsls	r3, r2, #31
 801008e:	d502      	bpl.n	8010096 <_printf_i+0x16e>
 8010090:	2320      	movs	r3, #32
 8010092:	4313      	orrs	r3, r2
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	2e00      	cmp	r6, #0
 8010098:	d001      	beq.n	801009e <_printf_i+0x176>
 801009a:	2710      	movs	r7, #16
 801009c:	e7aa      	b.n	800fff4 <_printf_i+0xcc>
 801009e:	2220      	movs	r2, #32
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	4393      	bics	r3, r2
 80100a4:	6023      	str	r3, [r4, #0]
 80100a6:	e7f8      	b.n	801009a <_printf_i+0x172>
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	680d      	ldr	r5, [r1, #0]
 80100ac:	1d10      	adds	r0, r2, #4
 80100ae:	6949      	ldr	r1, [r1, #20]
 80100b0:	6018      	str	r0, [r3, #0]
 80100b2:	6813      	ldr	r3, [r2, #0]
 80100b4:	062e      	lsls	r6, r5, #24
 80100b6:	d501      	bpl.n	80100bc <_printf_i+0x194>
 80100b8:	6019      	str	r1, [r3, #0]
 80100ba:	e002      	b.n	80100c2 <_printf_i+0x19a>
 80100bc:	066d      	lsls	r5, r5, #25
 80100be:	d5fb      	bpl.n	80100b8 <_printf_i+0x190>
 80100c0:	8019      	strh	r1, [r3, #0]
 80100c2:	2300      	movs	r3, #0
 80100c4:	9d03      	ldr	r5, [sp, #12]
 80100c6:	6123      	str	r3, [r4, #16]
 80100c8:	e7bf      	b.n	801004a <_printf_i+0x122>
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	1d11      	adds	r1, r2, #4
 80100ce:	6019      	str	r1, [r3, #0]
 80100d0:	6815      	ldr	r5, [r2, #0]
 80100d2:	2100      	movs	r1, #0
 80100d4:	0028      	movs	r0, r5
 80100d6:	6862      	ldr	r2, [r4, #4]
 80100d8:	f000 fa11 	bl	80104fe <memchr>
 80100dc:	2800      	cmp	r0, #0
 80100de:	d001      	beq.n	80100e4 <_printf_i+0x1bc>
 80100e0:	1b40      	subs	r0, r0, r5
 80100e2:	6060      	str	r0, [r4, #4]
 80100e4:	6863      	ldr	r3, [r4, #4]
 80100e6:	6123      	str	r3, [r4, #16]
 80100e8:	2300      	movs	r3, #0
 80100ea:	9a03      	ldr	r2, [sp, #12]
 80100ec:	7013      	strb	r3, [r2, #0]
 80100ee:	e7ac      	b.n	801004a <_printf_i+0x122>
 80100f0:	002a      	movs	r2, r5
 80100f2:	6923      	ldr	r3, [r4, #16]
 80100f4:	9906      	ldr	r1, [sp, #24]
 80100f6:	9805      	ldr	r0, [sp, #20]
 80100f8:	9d07      	ldr	r5, [sp, #28]
 80100fa:	47a8      	blx	r5
 80100fc:	3001      	adds	r0, #1
 80100fe:	d0ae      	beq.n	801005e <_printf_i+0x136>
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	079b      	lsls	r3, r3, #30
 8010104:	d415      	bmi.n	8010132 <_printf_i+0x20a>
 8010106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010108:	68e0      	ldr	r0, [r4, #12]
 801010a:	4298      	cmp	r0, r3
 801010c:	daa9      	bge.n	8010062 <_printf_i+0x13a>
 801010e:	0018      	movs	r0, r3
 8010110:	e7a7      	b.n	8010062 <_printf_i+0x13a>
 8010112:	0022      	movs	r2, r4
 8010114:	2301      	movs	r3, #1
 8010116:	9906      	ldr	r1, [sp, #24]
 8010118:	9805      	ldr	r0, [sp, #20]
 801011a:	9e07      	ldr	r6, [sp, #28]
 801011c:	3219      	adds	r2, #25
 801011e:	47b0      	blx	r6
 8010120:	3001      	adds	r0, #1
 8010122:	d09c      	beq.n	801005e <_printf_i+0x136>
 8010124:	3501      	adds	r5, #1
 8010126:	68e3      	ldr	r3, [r4, #12]
 8010128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801012a:	1a9b      	subs	r3, r3, r2
 801012c:	42ab      	cmp	r3, r5
 801012e:	dcf0      	bgt.n	8010112 <_printf_i+0x1ea>
 8010130:	e7e9      	b.n	8010106 <_printf_i+0x1de>
 8010132:	2500      	movs	r5, #0
 8010134:	e7f7      	b.n	8010126 <_printf_i+0x1fe>
 8010136:	46c0      	nop			@ (mov r8, r8)
 8010138:	0801324c 	.word	0x0801324c
 801013c:	0801325d 	.word	0x0801325d

08010140 <std>:
 8010140:	2300      	movs	r3, #0
 8010142:	b510      	push	{r4, lr}
 8010144:	0004      	movs	r4, r0
 8010146:	6003      	str	r3, [r0, #0]
 8010148:	6043      	str	r3, [r0, #4]
 801014a:	6083      	str	r3, [r0, #8]
 801014c:	8181      	strh	r1, [r0, #12]
 801014e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010150:	81c2      	strh	r2, [r0, #14]
 8010152:	6103      	str	r3, [r0, #16]
 8010154:	6143      	str	r3, [r0, #20]
 8010156:	6183      	str	r3, [r0, #24]
 8010158:	0019      	movs	r1, r3
 801015a:	2208      	movs	r2, #8
 801015c:	305c      	adds	r0, #92	@ 0x5c
 801015e:	f000 f935 	bl	80103cc <memset>
 8010162:	4b0b      	ldr	r3, [pc, #44]	@ (8010190 <std+0x50>)
 8010164:	6224      	str	r4, [r4, #32]
 8010166:	6263      	str	r3, [r4, #36]	@ 0x24
 8010168:	4b0a      	ldr	r3, [pc, #40]	@ (8010194 <std+0x54>)
 801016a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801016c:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <std+0x58>)
 801016e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010170:	4b0a      	ldr	r3, [pc, #40]	@ (801019c <std+0x5c>)
 8010172:	6323      	str	r3, [r4, #48]	@ 0x30
 8010174:	4b0a      	ldr	r3, [pc, #40]	@ (80101a0 <std+0x60>)
 8010176:	429c      	cmp	r4, r3
 8010178:	d005      	beq.n	8010186 <std+0x46>
 801017a:	4b0a      	ldr	r3, [pc, #40]	@ (80101a4 <std+0x64>)
 801017c:	429c      	cmp	r4, r3
 801017e:	d002      	beq.n	8010186 <std+0x46>
 8010180:	4b09      	ldr	r3, [pc, #36]	@ (80101a8 <std+0x68>)
 8010182:	429c      	cmp	r4, r3
 8010184:	d103      	bne.n	801018e <std+0x4e>
 8010186:	0020      	movs	r0, r4
 8010188:	3058      	adds	r0, #88	@ 0x58
 801018a:	f000 f9b5 	bl	80104f8 <__retarget_lock_init_recursive>
 801018e:	bd10      	pop	{r4, pc}
 8010190:	08010335 	.word	0x08010335
 8010194:	0801035d 	.word	0x0801035d
 8010198:	08010395 	.word	0x08010395
 801019c:	080103c1 	.word	0x080103c1
 80101a0:	20001f5c 	.word	0x20001f5c
 80101a4:	20001fc4 	.word	0x20001fc4
 80101a8:	2000202c 	.word	0x2000202c

080101ac <stdio_exit_handler>:
 80101ac:	b510      	push	{r4, lr}
 80101ae:	4a03      	ldr	r2, [pc, #12]	@ (80101bc <stdio_exit_handler+0x10>)
 80101b0:	4903      	ldr	r1, [pc, #12]	@ (80101c0 <stdio_exit_handler+0x14>)
 80101b2:	4804      	ldr	r0, [pc, #16]	@ (80101c4 <stdio_exit_handler+0x18>)
 80101b4:	f000 f86c 	bl	8010290 <_fwalk_sglue>
 80101b8:	bd10      	pop	{r4, pc}
 80101ba:	46c0      	nop			@ (mov r8, r8)
 80101bc:	20000100 	.word	0x20000100
 80101c0:	0801286d 	.word	0x0801286d
 80101c4:	2000027c 	.word	0x2000027c

080101c8 <cleanup_stdio>:
 80101c8:	6841      	ldr	r1, [r0, #4]
 80101ca:	4b0b      	ldr	r3, [pc, #44]	@ (80101f8 <cleanup_stdio+0x30>)
 80101cc:	b510      	push	{r4, lr}
 80101ce:	0004      	movs	r4, r0
 80101d0:	4299      	cmp	r1, r3
 80101d2:	d001      	beq.n	80101d8 <cleanup_stdio+0x10>
 80101d4:	f002 fb4a 	bl	801286c <_fflush_r>
 80101d8:	68a1      	ldr	r1, [r4, #8]
 80101da:	4b08      	ldr	r3, [pc, #32]	@ (80101fc <cleanup_stdio+0x34>)
 80101dc:	4299      	cmp	r1, r3
 80101de:	d002      	beq.n	80101e6 <cleanup_stdio+0x1e>
 80101e0:	0020      	movs	r0, r4
 80101e2:	f002 fb43 	bl	801286c <_fflush_r>
 80101e6:	68e1      	ldr	r1, [r4, #12]
 80101e8:	4b05      	ldr	r3, [pc, #20]	@ (8010200 <cleanup_stdio+0x38>)
 80101ea:	4299      	cmp	r1, r3
 80101ec:	d002      	beq.n	80101f4 <cleanup_stdio+0x2c>
 80101ee:	0020      	movs	r0, r4
 80101f0:	f002 fb3c 	bl	801286c <_fflush_r>
 80101f4:	bd10      	pop	{r4, pc}
 80101f6:	46c0      	nop			@ (mov r8, r8)
 80101f8:	20001f5c 	.word	0x20001f5c
 80101fc:	20001fc4 	.word	0x20001fc4
 8010200:	2000202c 	.word	0x2000202c

08010204 <global_stdio_init.part.0>:
 8010204:	b510      	push	{r4, lr}
 8010206:	4b09      	ldr	r3, [pc, #36]	@ (801022c <global_stdio_init.part.0+0x28>)
 8010208:	4a09      	ldr	r2, [pc, #36]	@ (8010230 <global_stdio_init.part.0+0x2c>)
 801020a:	2104      	movs	r1, #4
 801020c:	601a      	str	r2, [r3, #0]
 801020e:	4809      	ldr	r0, [pc, #36]	@ (8010234 <global_stdio_init.part.0+0x30>)
 8010210:	2200      	movs	r2, #0
 8010212:	f7ff ff95 	bl	8010140 <std>
 8010216:	2201      	movs	r2, #1
 8010218:	2109      	movs	r1, #9
 801021a:	4807      	ldr	r0, [pc, #28]	@ (8010238 <global_stdio_init.part.0+0x34>)
 801021c:	f7ff ff90 	bl	8010140 <std>
 8010220:	2202      	movs	r2, #2
 8010222:	2112      	movs	r1, #18
 8010224:	4805      	ldr	r0, [pc, #20]	@ (801023c <global_stdio_init.part.0+0x38>)
 8010226:	f7ff ff8b 	bl	8010140 <std>
 801022a:	bd10      	pop	{r4, pc}
 801022c:	20002094 	.word	0x20002094
 8010230:	080101ad 	.word	0x080101ad
 8010234:	20001f5c 	.word	0x20001f5c
 8010238:	20001fc4 	.word	0x20001fc4
 801023c:	2000202c 	.word	0x2000202c

08010240 <__sfp_lock_acquire>:
 8010240:	b510      	push	{r4, lr}
 8010242:	4802      	ldr	r0, [pc, #8]	@ (801024c <__sfp_lock_acquire+0xc>)
 8010244:	f000 f959 	bl	80104fa <__retarget_lock_acquire_recursive>
 8010248:	bd10      	pop	{r4, pc}
 801024a:	46c0      	nop			@ (mov r8, r8)
 801024c:	2000209d 	.word	0x2000209d

08010250 <__sfp_lock_release>:
 8010250:	b510      	push	{r4, lr}
 8010252:	4802      	ldr	r0, [pc, #8]	@ (801025c <__sfp_lock_release+0xc>)
 8010254:	f000 f952 	bl	80104fc <__retarget_lock_release_recursive>
 8010258:	bd10      	pop	{r4, pc}
 801025a:	46c0      	nop			@ (mov r8, r8)
 801025c:	2000209d 	.word	0x2000209d

08010260 <__sinit>:
 8010260:	b510      	push	{r4, lr}
 8010262:	0004      	movs	r4, r0
 8010264:	f7ff ffec 	bl	8010240 <__sfp_lock_acquire>
 8010268:	6a23      	ldr	r3, [r4, #32]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d002      	beq.n	8010274 <__sinit+0x14>
 801026e:	f7ff ffef 	bl	8010250 <__sfp_lock_release>
 8010272:	bd10      	pop	{r4, pc}
 8010274:	4b04      	ldr	r3, [pc, #16]	@ (8010288 <__sinit+0x28>)
 8010276:	6223      	str	r3, [r4, #32]
 8010278:	4b04      	ldr	r3, [pc, #16]	@ (801028c <__sinit+0x2c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1f6      	bne.n	801026e <__sinit+0xe>
 8010280:	f7ff ffc0 	bl	8010204 <global_stdio_init.part.0>
 8010284:	e7f3      	b.n	801026e <__sinit+0xe>
 8010286:	46c0      	nop			@ (mov r8, r8)
 8010288:	080101c9 	.word	0x080101c9
 801028c:	20002094 	.word	0x20002094

08010290 <_fwalk_sglue>:
 8010290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010292:	0014      	movs	r4, r2
 8010294:	2600      	movs	r6, #0
 8010296:	9000      	str	r0, [sp, #0]
 8010298:	9101      	str	r1, [sp, #4]
 801029a:	68a5      	ldr	r5, [r4, #8]
 801029c:	6867      	ldr	r7, [r4, #4]
 801029e:	3f01      	subs	r7, #1
 80102a0:	d504      	bpl.n	80102ac <_fwalk_sglue+0x1c>
 80102a2:	6824      	ldr	r4, [r4, #0]
 80102a4:	2c00      	cmp	r4, #0
 80102a6:	d1f8      	bne.n	801029a <_fwalk_sglue+0xa>
 80102a8:	0030      	movs	r0, r6
 80102aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80102ac:	89ab      	ldrh	r3, [r5, #12]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d908      	bls.n	80102c4 <_fwalk_sglue+0x34>
 80102b2:	220e      	movs	r2, #14
 80102b4:	5eab      	ldrsh	r3, [r5, r2]
 80102b6:	3301      	adds	r3, #1
 80102b8:	d004      	beq.n	80102c4 <_fwalk_sglue+0x34>
 80102ba:	0029      	movs	r1, r5
 80102bc:	9800      	ldr	r0, [sp, #0]
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	4798      	blx	r3
 80102c2:	4306      	orrs	r6, r0
 80102c4:	3568      	adds	r5, #104	@ 0x68
 80102c6:	e7ea      	b.n	801029e <_fwalk_sglue+0xe>

080102c8 <sniprintf>:
 80102c8:	b40c      	push	{r2, r3}
 80102ca:	b530      	push	{r4, r5, lr}
 80102cc:	4b18      	ldr	r3, [pc, #96]	@ (8010330 <sniprintf+0x68>)
 80102ce:	000c      	movs	r4, r1
 80102d0:	681d      	ldr	r5, [r3, #0]
 80102d2:	b09d      	sub	sp, #116	@ 0x74
 80102d4:	2900      	cmp	r1, #0
 80102d6:	da08      	bge.n	80102ea <sniprintf+0x22>
 80102d8:	238b      	movs	r3, #139	@ 0x8b
 80102da:	2001      	movs	r0, #1
 80102dc:	602b      	str	r3, [r5, #0]
 80102de:	4240      	negs	r0, r0
 80102e0:	b01d      	add	sp, #116	@ 0x74
 80102e2:	bc30      	pop	{r4, r5}
 80102e4:	bc08      	pop	{r3}
 80102e6:	b002      	add	sp, #8
 80102e8:	4718      	bx	r3
 80102ea:	2382      	movs	r3, #130	@ 0x82
 80102ec:	466a      	mov	r2, sp
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	8293      	strh	r3, [r2, #20]
 80102f2:	2300      	movs	r3, #0
 80102f4:	9002      	str	r0, [sp, #8]
 80102f6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80102f8:	9006      	str	r0, [sp, #24]
 80102fa:	4299      	cmp	r1, r3
 80102fc:	d000      	beq.n	8010300 <sniprintf+0x38>
 80102fe:	1e4b      	subs	r3, r1, #1
 8010300:	9304      	str	r3, [sp, #16]
 8010302:	9307      	str	r3, [sp, #28]
 8010304:	2301      	movs	r3, #1
 8010306:	466a      	mov	r2, sp
 8010308:	425b      	negs	r3, r3
 801030a:	82d3      	strh	r3, [r2, #22]
 801030c:	0028      	movs	r0, r5
 801030e:	ab21      	add	r3, sp, #132	@ 0x84
 8010310:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010312:	a902      	add	r1, sp, #8
 8010314:	9301      	str	r3, [sp, #4]
 8010316:	f002 f925 	bl	8012564 <_svfiprintf_r>
 801031a:	1c43      	adds	r3, r0, #1
 801031c:	da01      	bge.n	8010322 <sniprintf+0x5a>
 801031e:	238b      	movs	r3, #139	@ 0x8b
 8010320:	602b      	str	r3, [r5, #0]
 8010322:	2c00      	cmp	r4, #0
 8010324:	d0dc      	beq.n	80102e0 <sniprintf+0x18>
 8010326:	2200      	movs	r2, #0
 8010328:	9b02      	ldr	r3, [sp, #8]
 801032a:	701a      	strb	r2, [r3, #0]
 801032c:	e7d8      	b.n	80102e0 <sniprintf+0x18>
 801032e:	46c0      	nop			@ (mov r8, r8)
 8010330:	20000278 	.word	0x20000278

08010334 <__sread>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	000c      	movs	r4, r1
 8010338:	250e      	movs	r5, #14
 801033a:	5f49      	ldrsh	r1, [r1, r5]
 801033c:	f000 f88a 	bl	8010454 <_read_r>
 8010340:	2800      	cmp	r0, #0
 8010342:	db03      	blt.n	801034c <__sread+0x18>
 8010344:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8010346:	181b      	adds	r3, r3, r0
 8010348:	6563      	str	r3, [r4, #84]	@ 0x54
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	89a3      	ldrh	r3, [r4, #12]
 801034e:	4a02      	ldr	r2, [pc, #8]	@ (8010358 <__sread+0x24>)
 8010350:	4013      	ands	r3, r2
 8010352:	81a3      	strh	r3, [r4, #12]
 8010354:	e7f9      	b.n	801034a <__sread+0x16>
 8010356:	46c0      	nop			@ (mov r8, r8)
 8010358:	ffffefff 	.word	0xffffefff

0801035c <__swrite>:
 801035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035e:	001f      	movs	r7, r3
 8010360:	898b      	ldrh	r3, [r1, #12]
 8010362:	0005      	movs	r5, r0
 8010364:	000c      	movs	r4, r1
 8010366:	0016      	movs	r6, r2
 8010368:	05db      	lsls	r3, r3, #23
 801036a:	d505      	bpl.n	8010378 <__swrite+0x1c>
 801036c:	230e      	movs	r3, #14
 801036e:	5ec9      	ldrsh	r1, [r1, r3]
 8010370:	2200      	movs	r2, #0
 8010372:	2302      	movs	r3, #2
 8010374:	f000 f85a 	bl	801042c <_lseek_r>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	4a05      	ldr	r2, [pc, #20]	@ (8010390 <__swrite+0x34>)
 801037c:	0028      	movs	r0, r5
 801037e:	4013      	ands	r3, r2
 8010380:	81a3      	strh	r3, [r4, #12]
 8010382:	0032      	movs	r2, r6
 8010384:	230e      	movs	r3, #14
 8010386:	5ee1      	ldrsh	r1, [r4, r3]
 8010388:	003b      	movs	r3, r7
 801038a:	f000 f877 	bl	801047c <_write_r>
 801038e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010390:	ffffefff 	.word	0xffffefff

08010394 <__sseek>:
 8010394:	b570      	push	{r4, r5, r6, lr}
 8010396:	000c      	movs	r4, r1
 8010398:	250e      	movs	r5, #14
 801039a:	5f49      	ldrsh	r1, [r1, r5]
 801039c:	f000 f846 	bl	801042c <_lseek_r>
 80103a0:	89a3      	ldrh	r3, [r4, #12]
 80103a2:	1c42      	adds	r2, r0, #1
 80103a4:	d103      	bne.n	80103ae <__sseek+0x1a>
 80103a6:	4a05      	ldr	r2, [pc, #20]	@ (80103bc <__sseek+0x28>)
 80103a8:	4013      	ands	r3, r2
 80103aa:	81a3      	strh	r3, [r4, #12]
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	2280      	movs	r2, #128	@ 0x80
 80103b0:	0152      	lsls	r2, r2, #5
 80103b2:	4313      	orrs	r3, r2
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80103b8:	e7f8      	b.n	80103ac <__sseek+0x18>
 80103ba:	46c0      	nop			@ (mov r8, r8)
 80103bc:	ffffefff 	.word	0xffffefff

080103c0 <__sclose>:
 80103c0:	b510      	push	{r4, lr}
 80103c2:	230e      	movs	r3, #14
 80103c4:	5ec9      	ldrsh	r1, [r1, r3]
 80103c6:	f000 f81f 	bl	8010408 <_close_r>
 80103ca:	bd10      	pop	{r4, pc}

080103cc <memset>:
 80103cc:	0003      	movs	r3, r0
 80103ce:	1882      	adds	r2, r0, r2
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d100      	bne.n	80103d6 <memset+0xa>
 80103d4:	4770      	bx	lr
 80103d6:	7019      	strb	r1, [r3, #0]
 80103d8:	3301      	adds	r3, #1
 80103da:	e7f9      	b.n	80103d0 <memset+0x4>

080103dc <strncmp>:
 80103dc:	b530      	push	{r4, r5, lr}
 80103de:	0005      	movs	r5, r0
 80103e0:	1e10      	subs	r0, r2, #0
 80103e2:	d00b      	beq.n	80103fc <strncmp+0x20>
 80103e4:	2400      	movs	r4, #0
 80103e6:	3a01      	subs	r2, #1
 80103e8:	5d2b      	ldrb	r3, [r5, r4]
 80103ea:	5d08      	ldrb	r0, [r1, r4]
 80103ec:	4283      	cmp	r3, r0
 80103ee:	d104      	bne.n	80103fa <strncmp+0x1e>
 80103f0:	4294      	cmp	r4, r2
 80103f2:	d002      	beq.n	80103fa <strncmp+0x1e>
 80103f4:	3401      	adds	r4, #1
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1f6      	bne.n	80103e8 <strncmp+0xc>
 80103fa:	1a18      	subs	r0, r3, r0
 80103fc:	bd30      	pop	{r4, r5, pc}
	...

08010400 <_localeconv_r>:
 8010400:	4800      	ldr	r0, [pc, #0]	@ (8010404 <_localeconv_r+0x4>)
 8010402:	4770      	bx	lr
 8010404:	200001fc 	.word	0x200001fc

08010408 <_close_r>:
 8010408:	2300      	movs	r3, #0
 801040a:	b570      	push	{r4, r5, r6, lr}
 801040c:	4d06      	ldr	r5, [pc, #24]	@ (8010428 <_close_r+0x20>)
 801040e:	0004      	movs	r4, r0
 8010410:	0008      	movs	r0, r1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	f7f3 fdf2 	bl	8003ffc <_close>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d103      	bne.n	8010424 <_close_r+0x1c>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d000      	beq.n	8010424 <_close_r+0x1c>
 8010422:	6023      	str	r3, [r4, #0]
 8010424:	bd70      	pop	{r4, r5, r6, pc}
 8010426:	46c0      	nop			@ (mov r8, r8)
 8010428:	20002098 	.word	0x20002098

0801042c <_lseek_r>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	0004      	movs	r4, r0
 8010430:	0008      	movs	r0, r1
 8010432:	0011      	movs	r1, r2
 8010434:	001a      	movs	r2, r3
 8010436:	2300      	movs	r3, #0
 8010438:	4d05      	ldr	r5, [pc, #20]	@ (8010450 <_lseek_r+0x24>)
 801043a:	602b      	str	r3, [r5, #0]
 801043c:	f7f3 fdff 	bl	800403e <_lseek>
 8010440:	1c43      	adds	r3, r0, #1
 8010442:	d103      	bne.n	801044c <_lseek_r+0x20>
 8010444:	682b      	ldr	r3, [r5, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d000      	beq.n	801044c <_lseek_r+0x20>
 801044a:	6023      	str	r3, [r4, #0]
 801044c:	bd70      	pop	{r4, r5, r6, pc}
 801044e:	46c0      	nop			@ (mov r8, r8)
 8010450:	20002098 	.word	0x20002098

08010454 <_read_r>:
 8010454:	b570      	push	{r4, r5, r6, lr}
 8010456:	0004      	movs	r4, r0
 8010458:	0008      	movs	r0, r1
 801045a:	0011      	movs	r1, r2
 801045c:	001a      	movs	r2, r3
 801045e:	2300      	movs	r3, #0
 8010460:	4d05      	ldr	r5, [pc, #20]	@ (8010478 <_read_r+0x24>)
 8010462:	602b      	str	r3, [r5, #0]
 8010464:	f7f3 fd91 	bl	8003f8a <_read>
 8010468:	1c43      	adds	r3, r0, #1
 801046a:	d103      	bne.n	8010474 <_read_r+0x20>
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d000      	beq.n	8010474 <_read_r+0x20>
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	bd70      	pop	{r4, r5, r6, pc}
 8010476:	46c0      	nop			@ (mov r8, r8)
 8010478:	20002098 	.word	0x20002098

0801047c <_write_r>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	0004      	movs	r4, r0
 8010480:	0008      	movs	r0, r1
 8010482:	0011      	movs	r1, r2
 8010484:	001a      	movs	r2, r3
 8010486:	2300      	movs	r3, #0
 8010488:	4d05      	ldr	r5, [pc, #20]	@ (80104a0 <_write_r+0x24>)
 801048a:	602b      	str	r3, [r5, #0]
 801048c:	f7f3 fd9a 	bl	8003fc4 <_write>
 8010490:	1c43      	adds	r3, r0, #1
 8010492:	d103      	bne.n	801049c <_write_r+0x20>
 8010494:	682b      	ldr	r3, [r5, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d000      	beq.n	801049c <_write_r+0x20>
 801049a:	6023      	str	r3, [r4, #0]
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	46c0      	nop			@ (mov r8, r8)
 80104a0:	20002098 	.word	0x20002098

080104a4 <__errno>:
 80104a4:	4b01      	ldr	r3, [pc, #4]	@ (80104ac <__errno+0x8>)
 80104a6:	6818      	ldr	r0, [r3, #0]
 80104a8:	4770      	bx	lr
 80104aa:	46c0      	nop			@ (mov r8, r8)
 80104ac:	20000278 	.word	0x20000278

080104b0 <__libc_init_array>:
 80104b0:	b570      	push	{r4, r5, r6, lr}
 80104b2:	2600      	movs	r6, #0
 80104b4:	4c0c      	ldr	r4, [pc, #48]	@ (80104e8 <__libc_init_array+0x38>)
 80104b6:	4d0d      	ldr	r5, [pc, #52]	@ (80104ec <__libc_init_array+0x3c>)
 80104b8:	1b64      	subs	r4, r4, r5
 80104ba:	10a4      	asrs	r4, r4, #2
 80104bc:	42a6      	cmp	r6, r4
 80104be:	d109      	bne.n	80104d4 <__libc_init_array+0x24>
 80104c0:	2600      	movs	r6, #0
 80104c2:	f002 fd7b 	bl	8012fbc <_init>
 80104c6:	4c0a      	ldr	r4, [pc, #40]	@ (80104f0 <__libc_init_array+0x40>)
 80104c8:	4d0a      	ldr	r5, [pc, #40]	@ (80104f4 <__libc_init_array+0x44>)
 80104ca:	1b64      	subs	r4, r4, r5
 80104cc:	10a4      	asrs	r4, r4, #2
 80104ce:	42a6      	cmp	r6, r4
 80104d0:	d105      	bne.n	80104de <__libc_init_array+0x2e>
 80104d2:	bd70      	pop	{r4, r5, r6, pc}
 80104d4:	00b3      	lsls	r3, r6, #2
 80104d6:	58eb      	ldr	r3, [r5, r3]
 80104d8:	4798      	blx	r3
 80104da:	3601      	adds	r6, #1
 80104dc:	e7ee      	b.n	80104bc <__libc_init_array+0xc>
 80104de:	00b3      	lsls	r3, r6, #2
 80104e0:	58eb      	ldr	r3, [r5, r3]
 80104e2:	4798      	blx	r3
 80104e4:	3601      	adds	r6, #1
 80104e6:	e7f2      	b.n	80104ce <__libc_init_array+0x1e>
 80104e8:	08013664 	.word	0x08013664
 80104ec:	08013664 	.word	0x08013664
 80104f0:	08013668 	.word	0x08013668
 80104f4:	08013664 	.word	0x08013664

080104f8 <__retarget_lock_init_recursive>:
 80104f8:	4770      	bx	lr

080104fa <__retarget_lock_acquire_recursive>:
 80104fa:	4770      	bx	lr

080104fc <__retarget_lock_release_recursive>:
 80104fc:	4770      	bx	lr

080104fe <memchr>:
 80104fe:	b2c9      	uxtb	r1, r1
 8010500:	1882      	adds	r2, r0, r2
 8010502:	4290      	cmp	r0, r2
 8010504:	d101      	bne.n	801050a <memchr+0xc>
 8010506:	2000      	movs	r0, #0
 8010508:	4770      	bx	lr
 801050a:	7803      	ldrb	r3, [r0, #0]
 801050c:	428b      	cmp	r3, r1
 801050e:	d0fb      	beq.n	8010508 <memchr+0xa>
 8010510:	3001      	adds	r0, #1
 8010512:	e7f6      	b.n	8010502 <memchr+0x4>

08010514 <memcpy>:
 8010514:	2300      	movs	r3, #0
 8010516:	b510      	push	{r4, lr}
 8010518:	429a      	cmp	r2, r3
 801051a:	d100      	bne.n	801051e <memcpy+0xa>
 801051c:	bd10      	pop	{r4, pc}
 801051e:	5ccc      	ldrb	r4, [r1, r3]
 8010520:	54c4      	strb	r4, [r0, r3]
 8010522:	3301      	adds	r3, #1
 8010524:	e7f8      	b.n	8010518 <memcpy+0x4>
	...

08010528 <nan>:
 8010528:	2000      	movs	r0, #0
 801052a:	4901      	ldr	r1, [pc, #4]	@ (8010530 <nan+0x8>)
 801052c:	4770      	bx	lr
 801052e:	46c0      	nop			@ (mov r8, r8)
 8010530:	7ff80000 	.word	0x7ff80000

08010534 <quorem>:
 8010534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010536:	6903      	ldr	r3, [r0, #16]
 8010538:	690c      	ldr	r4, [r1, #16]
 801053a:	b089      	sub	sp, #36	@ 0x24
 801053c:	9003      	str	r0, [sp, #12]
 801053e:	9106      	str	r1, [sp, #24]
 8010540:	2000      	movs	r0, #0
 8010542:	42a3      	cmp	r3, r4
 8010544:	db63      	blt.n	801060e <quorem+0xda>
 8010546:	000b      	movs	r3, r1
 8010548:	3c01      	subs	r4, #1
 801054a:	3314      	adds	r3, #20
 801054c:	00a5      	lsls	r5, r4, #2
 801054e:	9304      	str	r3, [sp, #16]
 8010550:	195b      	adds	r3, r3, r5
 8010552:	9305      	str	r3, [sp, #20]
 8010554:	9b03      	ldr	r3, [sp, #12]
 8010556:	3314      	adds	r3, #20
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	195d      	adds	r5, r3, r5
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	682f      	ldr	r7, [r5, #0]
 8010560:	681e      	ldr	r6, [r3, #0]
 8010562:	0038      	movs	r0, r7
 8010564:	3601      	adds	r6, #1
 8010566:	0031      	movs	r1, r6
 8010568:	f7ef fde6 	bl	8000138 <__udivsi3>
 801056c:	9002      	str	r0, [sp, #8]
 801056e:	42b7      	cmp	r7, r6
 8010570:	d327      	bcc.n	80105c2 <quorem+0x8e>
 8010572:	9b04      	ldr	r3, [sp, #16]
 8010574:	2700      	movs	r7, #0
 8010576:	469c      	mov	ip, r3
 8010578:	9e01      	ldr	r6, [sp, #4]
 801057a:	9707      	str	r7, [sp, #28]
 801057c:	4662      	mov	r2, ip
 801057e:	ca08      	ldmia	r2!, {r3}
 8010580:	6830      	ldr	r0, [r6, #0]
 8010582:	4694      	mov	ip, r2
 8010584:	9a02      	ldr	r2, [sp, #8]
 8010586:	b299      	uxth	r1, r3
 8010588:	4351      	muls	r1, r2
 801058a:	0c1b      	lsrs	r3, r3, #16
 801058c:	4353      	muls	r3, r2
 801058e:	19c9      	adds	r1, r1, r7
 8010590:	0c0a      	lsrs	r2, r1, #16
 8010592:	189b      	adds	r3, r3, r2
 8010594:	b289      	uxth	r1, r1
 8010596:	b282      	uxth	r2, r0
 8010598:	1a52      	subs	r2, r2, r1
 801059a:	9907      	ldr	r1, [sp, #28]
 801059c:	0c1f      	lsrs	r7, r3, #16
 801059e:	1852      	adds	r2, r2, r1
 80105a0:	0c00      	lsrs	r0, r0, #16
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	1411      	asrs	r1, r2, #16
 80105a6:	1ac3      	subs	r3, r0, r3
 80105a8:	185b      	adds	r3, r3, r1
 80105aa:	1419      	asrs	r1, r3, #16
 80105ac:	b292      	uxth	r2, r2
 80105ae:	041b      	lsls	r3, r3, #16
 80105b0:	431a      	orrs	r2, r3
 80105b2:	9b05      	ldr	r3, [sp, #20]
 80105b4:	9107      	str	r1, [sp, #28]
 80105b6:	c604      	stmia	r6!, {r2}
 80105b8:	4563      	cmp	r3, ip
 80105ba:	d2df      	bcs.n	801057c <quorem+0x48>
 80105bc:	682b      	ldr	r3, [r5, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d02b      	beq.n	801061a <quorem+0xe6>
 80105c2:	9906      	ldr	r1, [sp, #24]
 80105c4:	9803      	ldr	r0, [sp, #12]
 80105c6:	f001 fd6f 	bl	80120a8 <__mcmp>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	db1e      	blt.n	801060c <quorem+0xd8>
 80105ce:	2600      	movs	r6, #0
 80105d0:	9d01      	ldr	r5, [sp, #4]
 80105d2:	9904      	ldr	r1, [sp, #16]
 80105d4:	c901      	ldmia	r1!, {r0}
 80105d6:	682b      	ldr	r3, [r5, #0]
 80105d8:	b287      	uxth	r7, r0
 80105da:	b29a      	uxth	r2, r3
 80105dc:	1bd2      	subs	r2, r2, r7
 80105de:	1992      	adds	r2, r2, r6
 80105e0:	0c00      	lsrs	r0, r0, #16
 80105e2:	0c1b      	lsrs	r3, r3, #16
 80105e4:	1a1b      	subs	r3, r3, r0
 80105e6:	1410      	asrs	r0, r2, #16
 80105e8:	181b      	adds	r3, r3, r0
 80105ea:	141e      	asrs	r6, r3, #16
 80105ec:	b292      	uxth	r2, r2
 80105ee:	041b      	lsls	r3, r3, #16
 80105f0:	431a      	orrs	r2, r3
 80105f2:	9b05      	ldr	r3, [sp, #20]
 80105f4:	c504      	stmia	r5!, {r2}
 80105f6:	428b      	cmp	r3, r1
 80105f8:	d2ec      	bcs.n	80105d4 <quorem+0xa0>
 80105fa:	9a01      	ldr	r2, [sp, #4]
 80105fc:	00a3      	lsls	r3, r4, #2
 80105fe:	18d3      	adds	r3, r2, r3
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	2a00      	cmp	r2, #0
 8010604:	d014      	beq.n	8010630 <quorem+0xfc>
 8010606:	9b02      	ldr	r3, [sp, #8]
 8010608:	3301      	adds	r3, #1
 801060a:	9302      	str	r3, [sp, #8]
 801060c:	9802      	ldr	r0, [sp, #8]
 801060e:	b009      	add	sp, #36	@ 0x24
 8010610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010612:	682b      	ldr	r3, [r5, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d104      	bne.n	8010622 <quorem+0xee>
 8010618:	3c01      	subs	r4, #1
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	3d04      	subs	r5, #4
 801061e:	42ab      	cmp	r3, r5
 8010620:	d3f7      	bcc.n	8010612 <quorem+0xde>
 8010622:	9b03      	ldr	r3, [sp, #12]
 8010624:	611c      	str	r4, [r3, #16]
 8010626:	e7cc      	b.n	80105c2 <quorem+0x8e>
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	2a00      	cmp	r2, #0
 801062c:	d104      	bne.n	8010638 <quorem+0x104>
 801062e:	3c01      	subs	r4, #1
 8010630:	9a01      	ldr	r2, [sp, #4]
 8010632:	3b04      	subs	r3, #4
 8010634:	429a      	cmp	r2, r3
 8010636:	d3f7      	bcc.n	8010628 <quorem+0xf4>
 8010638:	9b03      	ldr	r3, [sp, #12]
 801063a:	611c      	str	r4, [r3, #16]
 801063c:	e7e3      	b.n	8010606 <quorem+0xd2>
	...

08010640 <_dtoa_r>:
 8010640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010642:	0014      	movs	r4, r2
 8010644:	001d      	movs	r5, r3
 8010646:	69c6      	ldr	r6, [r0, #28]
 8010648:	b09d      	sub	sp, #116	@ 0x74
 801064a:	940a      	str	r4, [sp, #40]	@ 0x28
 801064c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801064e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8010650:	9003      	str	r0, [sp, #12]
 8010652:	2e00      	cmp	r6, #0
 8010654:	d10f      	bne.n	8010676 <_dtoa_r+0x36>
 8010656:	2010      	movs	r0, #16
 8010658:	f001 f986 	bl	8011968 <malloc>
 801065c:	9b03      	ldr	r3, [sp, #12]
 801065e:	1e02      	subs	r2, r0, #0
 8010660:	61d8      	str	r0, [r3, #28]
 8010662:	d104      	bne.n	801066e <_dtoa_r+0x2e>
 8010664:	21ef      	movs	r1, #239	@ 0xef
 8010666:	4bc7      	ldr	r3, [pc, #796]	@ (8010984 <_dtoa_r+0x344>)
 8010668:	48c7      	ldr	r0, [pc, #796]	@ (8010988 <_dtoa_r+0x348>)
 801066a:	f002 f94f 	bl	801290c <__assert_func>
 801066e:	6046      	str	r6, [r0, #4]
 8010670:	6086      	str	r6, [r0, #8]
 8010672:	6006      	str	r6, [r0, #0]
 8010674:	60c6      	str	r6, [r0, #12]
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	6819      	ldr	r1, [r3, #0]
 801067c:	2900      	cmp	r1, #0
 801067e:	d00b      	beq.n	8010698 <_dtoa_r+0x58>
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	2301      	movs	r3, #1
 8010684:	4093      	lsls	r3, r2
 8010686:	604a      	str	r2, [r1, #4]
 8010688:	608b      	str	r3, [r1, #8]
 801068a:	9803      	ldr	r0, [sp, #12]
 801068c:	f001 fa7e 	bl	8011b8c <_Bfree>
 8010690:	2200      	movs	r2, #0
 8010692:	9b03      	ldr	r3, [sp, #12]
 8010694:	69db      	ldr	r3, [r3, #28]
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	2d00      	cmp	r5, #0
 801069a:	da1e      	bge.n	80106da <_dtoa_r+0x9a>
 801069c:	2301      	movs	r3, #1
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	006b      	lsls	r3, r5, #1
 80106a2:	085b      	lsrs	r3, r3, #1
 80106a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106a6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80106a8:	4bb8      	ldr	r3, [pc, #736]	@ (801098c <_dtoa_r+0x34c>)
 80106aa:	4ab8      	ldr	r2, [pc, #736]	@ (801098c <_dtoa_r+0x34c>)
 80106ac:	403b      	ands	r3, r7
 80106ae:	4293      	cmp	r3, r2
 80106b0:	d116      	bne.n	80106e0 <_dtoa_r+0xa0>
 80106b2:	4bb7      	ldr	r3, [pc, #732]	@ (8010990 <_dtoa_r+0x350>)
 80106b4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80106b6:	6013      	str	r3, [r2, #0]
 80106b8:	033b      	lsls	r3, r7, #12
 80106ba:	0b1b      	lsrs	r3, r3, #12
 80106bc:	4323      	orrs	r3, r4
 80106be:	d101      	bne.n	80106c4 <_dtoa_r+0x84>
 80106c0:	f000 fd80 	bl	80111c4 <_dtoa_r+0xb84>
 80106c4:	4bb3      	ldr	r3, [pc, #716]	@ (8010994 <_dtoa_r+0x354>)
 80106c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80106c8:	9308      	str	r3, [sp, #32]
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	d002      	beq.n	80106d4 <_dtoa_r+0x94>
 80106ce:	4bb2      	ldr	r3, [pc, #712]	@ (8010998 <_dtoa_r+0x358>)
 80106d0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80106d2:	6013      	str	r3, [r2, #0]
 80106d4:	9808      	ldr	r0, [sp, #32]
 80106d6:	b01d      	add	sp, #116	@ 0x74
 80106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106da:	2300      	movs	r3, #0
 80106dc:	603b      	str	r3, [r7, #0]
 80106de:	e7e2      	b.n	80106a6 <_dtoa_r+0x66>
 80106e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80106e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80106e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80106ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80106ec:	2200      	movs	r2, #0
 80106ee:	2300      	movs	r3, #0
 80106f0:	f7ef fea8 	bl	8000444 <__aeabi_dcmpeq>
 80106f4:	1e06      	subs	r6, r0, #0
 80106f6:	d00b      	beq.n	8010710 <_dtoa_r+0xd0>
 80106f8:	2301      	movs	r3, #1
 80106fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80106fc:	6013      	str	r3, [r2, #0]
 80106fe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010700:	2b00      	cmp	r3, #0
 8010702:	d002      	beq.n	801070a <_dtoa_r+0xca>
 8010704:	4ba5      	ldr	r3, [pc, #660]	@ (801099c <_dtoa_r+0x35c>)
 8010706:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010708:	6013      	str	r3, [r2, #0]
 801070a:	4ba5      	ldr	r3, [pc, #660]	@ (80109a0 <_dtoa_r+0x360>)
 801070c:	9308      	str	r3, [sp, #32]
 801070e:	e7e1      	b.n	80106d4 <_dtoa_r+0x94>
 8010710:	ab1a      	add	r3, sp, #104	@ 0x68
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	9803      	ldr	r0, [sp, #12]
 801071a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801071c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801071e:	f001 fde5 	bl	80122ec <__d2b>
 8010722:	007a      	lsls	r2, r7, #1
 8010724:	9005      	str	r0, [sp, #20]
 8010726:	0d52      	lsrs	r2, r2, #21
 8010728:	d100      	bne.n	801072c <_dtoa_r+0xec>
 801072a:	e07b      	b.n	8010824 <_dtoa_r+0x1e4>
 801072c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801072e:	9618      	str	r6, [sp, #96]	@ 0x60
 8010730:	0319      	lsls	r1, r3, #12
 8010732:	4b9c      	ldr	r3, [pc, #624]	@ (80109a4 <_dtoa_r+0x364>)
 8010734:	0b09      	lsrs	r1, r1, #12
 8010736:	430b      	orrs	r3, r1
 8010738:	499b      	ldr	r1, [pc, #620]	@ (80109a8 <_dtoa_r+0x368>)
 801073a:	1857      	adds	r7, r2, r1
 801073c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801073e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010740:	0019      	movs	r1, r3
 8010742:	2200      	movs	r2, #0
 8010744:	4b99      	ldr	r3, [pc, #612]	@ (80109ac <_dtoa_r+0x36c>)
 8010746:	f7f1 f9ff 	bl	8001b48 <__aeabi_dsub>
 801074a:	4a99      	ldr	r2, [pc, #612]	@ (80109b0 <_dtoa_r+0x370>)
 801074c:	4b99      	ldr	r3, [pc, #612]	@ (80109b4 <_dtoa_r+0x374>)
 801074e:	f7f0 ff15 	bl	800157c <__aeabi_dmul>
 8010752:	4a99      	ldr	r2, [pc, #612]	@ (80109b8 <_dtoa_r+0x378>)
 8010754:	4b99      	ldr	r3, [pc, #612]	@ (80109bc <_dtoa_r+0x37c>)
 8010756:	f7ef ff11 	bl	800057c <__aeabi_dadd>
 801075a:	0004      	movs	r4, r0
 801075c:	0038      	movs	r0, r7
 801075e:	000d      	movs	r5, r1
 8010760:	f7f1 fe5a 	bl	8002418 <__aeabi_i2d>
 8010764:	4a96      	ldr	r2, [pc, #600]	@ (80109c0 <_dtoa_r+0x380>)
 8010766:	4b97      	ldr	r3, [pc, #604]	@ (80109c4 <_dtoa_r+0x384>)
 8010768:	f7f0 ff08 	bl	800157c <__aeabi_dmul>
 801076c:	0002      	movs	r2, r0
 801076e:	000b      	movs	r3, r1
 8010770:	0020      	movs	r0, r4
 8010772:	0029      	movs	r1, r5
 8010774:	f7ef ff02 	bl	800057c <__aeabi_dadd>
 8010778:	0004      	movs	r4, r0
 801077a:	000d      	movs	r5, r1
 801077c:	f7f1 fe10 	bl	80023a0 <__aeabi_d2iz>
 8010780:	2200      	movs	r2, #0
 8010782:	9004      	str	r0, [sp, #16]
 8010784:	2300      	movs	r3, #0
 8010786:	0020      	movs	r0, r4
 8010788:	0029      	movs	r1, r5
 801078a:	f7ef fe61 	bl	8000450 <__aeabi_dcmplt>
 801078e:	2800      	cmp	r0, #0
 8010790:	d00b      	beq.n	80107aa <_dtoa_r+0x16a>
 8010792:	9804      	ldr	r0, [sp, #16]
 8010794:	f7f1 fe40 	bl	8002418 <__aeabi_i2d>
 8010798:	002b      	movs	r3, r5
 801079a:	0022      	movs	r2, r4
 801079c:	f7ef fe52 	bl	8000444 <__aeabi_dcmpeq>
 80107a0:	4243      	negs	r3, r0
 80107a2:	4158      	adcs	r0, r3
 80107a4:	9b04      	ldr	r3, [sp, #16]
 80107a6:	1a1b      	subs	r3, r3, r0
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	2301      	movs	r3, #1
 80107ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80107ae:	9b04      	ldr	r3, [sp, #16]
 80107b0:	2b16      	cmp	r3, #22
 80107b2:	d810      	bhi.n	80107d6 <_dtoa_r+0x196>
 80107b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80107b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80107b8:	9a04      	ldr	r2, [sp, #16]
 80107ba:	4b83      	ldr	r3, [pc, #524]	@ (80109c8 <_dtoa_r+0x388>)
 80107bc:	00d2      	lsls	r2, r2, #3
 80107be:	189b      	adds	r3, r3, r2
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	f7ef fe44 	bl	8000450 <__aeabi_dcmplt>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d047      	beq.n	801085c <_dtoa_r+0x21c>
 80107cc:	9b04      	ldr	r3, [sp, #16]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	9304      	str	r3, [sp, #16]
 80107d2:	2300      	movs	r3, #0
 80107d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80107d6:	2200      	movs	r2, #0
 80107d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80107da:	9206      	str	r2, [sp, #24]
 80107dc:	1bdb      	subs	r3, r3, r7
 80107de:	1e5a      	subs	r2, r3, #1
 80107e0:	d53e      	bpl.n	8010860 <_dtoa_r+0x220>
 80107e2:	2201      	movs	r2, #1
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	9306      	str	r3, [sp, #24]
 80107e8:	2300      	movs	r3, #0
 80107ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80107ec:	9b04      	ldr	r3, [sp, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	db38      	blt.n	8010864 <_dtoa_r+0x224>
 80107f2:	9a04      	ldr	r2, [sp, #16]
 80107f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107f6:	4694      	mov	ip, r2
 80107f8:	4463      	add	r3, ip
 80107fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80107fc:	2300      	movs	r3, #0
 80107fe:	9214      	str	r2, [sp, #80]	@ 0x50
 8010800:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010802:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010804:	2401      	movs	r4, #1
 8010806:	2b09      	cmp	r3, #9
 8010808:	d862      	bhi.n	80108d0 <_dtoa_r+0x290>
 801080a:	2b05      	cmp	r3, #5
 801080c:	dd02      	ble.n	8010814 <_dtoa_r+0x1d4>
 801080e:	2400      	movs	r4, #0
 8010810:	3b04      	subs	r3, #4
 8010812:	9322      	str	r3, [sp, #136]	@ 0x88
 8010814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010816:	1e98      	subs	r0, r3, #2
 8010818:	2803      	cmp	r0, #3
 801081a:	d863      	bhi.n	80108e4 <_dtoa_r+0x2a4>
 801081c:	f7ef fc78 	bl	8000110 <__gnu_thumb1_case_uqi>
 8010820:	2b385654 	.word	0x2b385654
 8010824:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010826:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010828:	18f6      	adds	r6, r6, r3
 801082a:	4b68      	ldr	r3, [pc, #416]	@ (80109cc <_dtoa_r+0x38c>)
 801082c:	18f2      	adds	r2, r6, r3
 801082e:	2a20      	cmp	r2, #32
 8010830:	dd0f      	ble.n	8010852 <_dtoa_r+0x212>
 8010832:	2340      	movs	r3, #64	@ 0x40
 8010834:	1a9b      	subs	r3, r3, r2
 8010836:	409f      	lsls	r7, r3
 8010838:	4b65      	ldr	r3, [pc, #404]	@ (80109d0 <_dtoa_r+0x390>)
 801083a:	0038      	movs	r0, r7
 801083c:	18f3      	adds	r3, r6, r3
 801083e:	40dc      	lsrs	r4, r3
 8010840:	4320      	orrs	r0, r4
 8010842:	f7f1 fe17 	bl	8002474 <__aeabi_ui2d>
 8010846:	2201      	movs	r2, #1
 8010848:	4b62      	ldr	r3, [pc, #392]	@ (80109d4 <_dtoa_r+0x394>)
 801084a:	1e77      	subs	r7, r6, #1
 801084c:	18cb      	adds	r3, r1, r3
 801084e:	9218      	str	r2, [sp, #96]	@ 0x60
 8010850:	e776      	b.n	8010740 <_dtoa_r+0x100>
 8010852:	2320      	movs	r3, #32
 8010854:	0020      	movs	r0, r4
 8010856:	1a9b      	subs	r3, r3, r2
 8010858:	4098      	lsls	r0, r3
 801085a:	e7f2      	b.n	8010842 <_dtoa_r+0x202>
 801085c:	9015      	str	r0, [sp, #84]	@ 0x54
 801085e:	e7ba      	b.n	80107d6 <_dtoa_r+0x196>
 8010860:	920d      	str	r2, [sp, #52]	@ 0x34
 8010862:	e7c3      	b.n	80107ec <_dtoa_r+0x1ac>
 8010864:	9b06      	ldr	r3, [sp, #24]
 8010866:	9a04      	ldr	r2, [sp, #16]
 8010868:	1a9b      	subs	r3, r3, r2
 801086a:	9306      	str	r3, [sp, #24]
 801086c:	4253      	negs	r3, r2
 801086e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010870:	2300      	movs	r3, #0
 8010872:	9314      	str	r3, [sp, #80]	@ 0x50
 8010874:	e7c5      	b.n	8010802 <_dtoa_r+0x1c2>
 8010876:	2301      	movs	r3, #1
 8010878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801087a:	9310      	str	r3, [sp, #64]	@ 0x40
 801087c:	4694      	mov	ip, r2
 801087e:	9b04      	ldr	r3, [sp, #16]
 8010880:	4463      	add	r3, ip
 8010882:	930e      	str	r3, [sp, #56]	@ 0x38
 8010884:	3301      	adds	r3, #1
 8010886:	9309      	str	r3, [sp, #36]	@ 0x24
 8010888:	2b00      	cmp	r3, #0
 801088a:	dc08      	bgt.n	801089e <_dtoa_r+0x25e>
 801088c:	2301      	movs	r3, #1
 801088e:	e006      	b.n	801089e <_dtoa_r+0x25e>
 8010890:	2301      	movs	r3, #1
 8010892:	9310      	str	r3, [sp, #64]	@ 0x40
 8010894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010896:	2b00      	cmp	r3, #0
 8010898:	dd28      	ble.n	80108ec <_dtoa_r+0x2ac>
 801089a:	930e      	str	r3, [sp, #56]	@ 0x38
 801089c:	9309      	str	r3, [sp, #36]	@ 0x24
 801089e:	9a03      	ldr	r2, [sp, #12]
 80108a0:	2100      	movs	r1, #0
 80108a2:	69d0      	ldr	r0, [r2, #28]
 80108a4:	2204      	movs	r2, #4
 80108a6:	0015      	movs	r5, r2
 80108a8:	3514      	adds	r5, #20
 80108aa:	429d      	cmp	r5, r3
 80108ac:	d923      	bls.n	80108f6 <_dtoa_r+0x2b6>
 80108ae:	6041      	str	r1, [r0, #4]
 80108b0:	9803      	ldr	r0, [sp, #12]
 80108b2:	f001 f927 	bl	8011b04 <_Balloc>
 80108b6:	9008      	str	r0, [sp, #32]
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d11f      	bne.n	80108fc <_dtoa_r+0x2bc>
 80108bc:	21b0      	movs	r1, #176	@ 0xb0
 80108be:	4b46      	ldr	r3, [pc, #280]	@ (80109d8 <_dtoa_r+0x398>)
 80108c0:	4831      	ldr	r0, [pc, #196]	@ (8010988 <_dtoa_r+0x348>)
 80108c2:	9a08      	ldr	r2, [sp, #32]
 80108c4:	31ff      	adds	r1, #255	@ 0xff
 80108c6:	e6d0      	b.n	801066a <_dtoa_r+0x2a>
 80108c8:	2300      	movs	r3, #0
 80108ca:	e7e2      	b.n	8010892 <_dtoa_r+0x252>
 80108cc:	2300      	movs	r3, #0
 80108ce:	e7d3      	b.n	8010878 <_dtoa_r+0x238>
 80108d0:	2300      	movs	r3, #0
 80108d2:	9410      	str	r4, [sp, #64]	@ 0x40
 80108d4:	9322      	str	r3, [sp, #136]	@ 0x88
 80108d6:	3b01      	subs	r3, #1
 80108d8:	2200      	movs	r2, #0
 80108da:	930e      	str	r3, [sp, #56]	@ 0x38
 80108dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80108de:	3313      	adds	r3, #19
 80108e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80108e2:	e7dc      	b.n	801089e <_dtoa_r+0x25e>
 80108e4:	2301      	movs	r3, #1
 80108e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80108e8:	3b02      	subs	r3, #2
 80108ea:	e7f5      	b.n	80108d8 <_dtoa_r+0x298>
 80108ec:	2301      	movs	r3, #1
 80108ee:	001a      	movs	r2, r3
 80108f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80108f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80108f4:	e7f4      	b.n	80108e0 <_dtoa_r+0x2a0>
 80108f6:	3101      	adds	r1, #1
 80108f8:	0052      	lsls	r2, r2, #1
 80108fa:	e7d4      	b.n	80108a6 <_dtoa_r+0x266>
 80108fc:	9b03      	ldr	r3, [sp, #12]
 80108fe:	9a08      	ldr	r2, [sp, #32]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	601a      	str	r2, [r3, #0]
 8010904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010906:	2b0e      	cmp	r3, #14
 8010908:	d900      	bls.n	801090c <_dtoa_r+0x2cc>
 801090a:	e0d6      	b.n	8010aba <_dtoa_r+0x47a>
 801090c:	2c00      	cmp	r4, #0
 801090e:	d100      	bne.n	8010912 <_dtoa_r+0x2d2>
 8010910:	e0d3      	b.n	8010aba <_dtoa_r+0x47a>
 8010912:	9b04      	ldr	r3, [sp, #16]
 8010914:	2b00      	cmp	r3, #0
 8010916:	dd63      	ble.n	80109e0 <_dtoa_r+0x3a0>
 8010918:	210f      	movs	r1, #15
 801091a:	9a04      	ldr	r2, [sp, #16]
 801091c:	4b2a      	ldr	r3, [pc, #168]	@ (80109c8 <_dtoa_r+0x388>)
 801091e:	400a      	ands	r2, r1
 8010920:	00d2      	lsls	r2, r2, #3
 8010922:	189b      	adds	r3, r3, r2
 8010924:	681e      	ldr	r6, [r3, #0]
 8010926:	685f      	ldr	r7, [r3, #4]
 8010928:	9b04      	ldr	r3, [sp, #16]
 801092a:	2402      	movs	r4, #2
 801092c:	111d      	asrs	r5, r3, #4
 801092e:	05db      	lsls	r3, r3, #23
 8010930:	d50a      	bpl.n	8010948 <_dtoa_r+0x308>
 8010932:	4b2a      	ldr	r3, [pc, #168]	@ (80109dc <_dtoa_r+0x39c>)
 8010934:	400d      	ands	r5, r1
 8010936:	6a1a      	ldr	r2, [r3, #32]
 8010938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801093c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801093e:	f7f0 f9e3 	bl	8000d08 <__aeabi_ddiv>
 8010942:	900a      	str	r0, [sp, #40]	@ 0x28
 8010944:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010946:	3401      	adds	r4, #1
 8010948:	4b24      	ldr	r3, [pc, #144]	@ (80109dc <_dtoa_r+0x39c>)
 801094a:	930c      	str	r3, [sp, #48]	@ 0x30
 801094c:	2d00      	cmp	r5, #0
 801094e:	d108      	bne.n	8010962 <_dtoa_r+0x322>
 8010950:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010952:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010954:	0032      	movs	r2, r6
 8010956:	003b      	movs	r3, r7
 8010958:	f7f0 f9d6 	bl	8000d08 <__aeabi_ddiv>
 801095c:	900a      	str	r0, [sp, #40]	@ 0x28
 801095e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010960:	e059      	b.n	8010a16 <_dtoa_r+0x3d6>
 8010962:	2301      	movs	r3, #1
 8010964:	421d      	tst	r5, r3
 8010966:	d009      	beq.n	801097c <_dtoa_r+0x33c>
 8010968:	18e4      	adds	r4, r4, r3
 801096a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801096c:	0030      	movs	r0, r6
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	0039      	movs	r1, r7
 8010974:	f7f0 fe02 	bl	800157c <__aeabi_dmul>
 8010978:	0006      	movs	r6, r0
 801097a:	000f      	movs	r7, r1
 801097c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801097e:	106d      	asrs	r5, r5, #1
 8010980:	3308      	adds	r3, #8
 8010982:	e7e2      	b.n	801094a <_dtoa_r+0x30a>
 8010984:	08013283 	.word	0x08013283
 8010988:	0801329a 	.word	0x0801329a
 801098c:	7ff00000 	.word	0x7ff00000
 8010990:	0000270f 	.word	0x0000270f
 8010994:	0801327f 	.word	0x0801327f
 8010998:	08013282 	.word	0x08013282
 801099c:	0801324b 	.word	0x0801324b
 80109a0:	0801324a 	.word	0x0801324a
 80109a4:	3ff00000 	.word	0x3ff00000
 80109a8:	fffffc01 	.word	0xfffffc01
 80109ac:	3ff80000 	.word	0x3ff80000
 80109b0:	636f4361 	.word	0x636f4361
 80109b4:	3fd287a7 	.word	0x3fd287a7
 80109b8:	8b60c8b3 	.word	0x8b60c8b3
 80109bc:	3fc68a28 	.word	0x3fc68a28
 80109c0:	509f79fb 	.word	0x509f79fb
 80109c4:	3fd34413 	.word	0x3fd34413
 80109c8:	08013498 	.word	0x08013498
 80109cc:	00000432 	.word	0x00000432
 80109d0:	00000412 	.word	0x00000412
 80109d4:	fe100000 	.word	0xfe100000
 80109d8:	080132f2 	.word	0x080132f2
 80109dc:	08013470 	.word	0x08013470
 80109e0:	9b04      	ldr	r3, [sp, #16]
 80109e2:	2402      	movs	r4, #2
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d016      	beq.n	8010a16 <_dtoa_r+0x3d6>
 80109e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80109ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80109ec:	220f      	movs	r2, #15
 80109ee:	425d      	negs	r5, r3
 80109f0:	402a      	ands	r2, r5
 80109f2:	4bd5      	ldr	r3, [pc, #852]	@ (8010d48 <_dtoa_r+0x708>)
 80109f4:	00d2      	lsls	r2, r2, #3
 80109f6:	189b      	adds	r3, r3, r2
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	f7f0 fdbe 	bl	800157c <__aeabi_dmul>
 8010a00:	2701      	movs	r7, #1
 8010a02:	2300      	movs	r3, #0
 8010a04:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010a08:	4ed0      	ldr	r6, [pc, #832]	@ (8010d4c <_dtoa_r+0x70c>)
 8010a0a:	112d      	asrs	r5, r5, #4
 8010a0c:	2d00      	cmp	r5, #0
 8010a0e:	d000      	beq.n	8010a12 <_dtoa_r+0x3d2>
 8010a10:	e095      	b.n	8010b3e <_dtoa_r+0x4fe>
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d1a2      	bne.n	801095c <_dtoa_r+0x31c>
 8010a16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010a18:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010a1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d100      	bne.n	8010a22 <_dtoa_r+0x3e2>
 8010a20:	e098      	b.n	8010b54 <_dtoa_r+0x514>
 8010a22:	2200      	movs	r2, #0
 8010a24:	0030      	movs	r0, r6
 8010a26:	0039      	movs	r1, r7
 8010a28:	4bc9      	ldr	r3, [pc, #804]	@ (8010d50 <_dtoa_r+0x710>)
 8010a2a:	f7ef fd11 	bl	8000450 <__aeabi_dcmplt>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d100      	bne.n	8010a34 <_dtoa_r+0x3f4>
 8010a32:	e08f      	b.n	8010b54 <_dtoa_r+0x514>
 8010a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d100      	bne.n	8010a3c <_dtoa_r+0x3fc>
 8010a3a:	e08b      	b.n	8010b54 <_dtoa_r+0x514>
 8010a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	dd37      	ble.n	8010ab2 <_dtoa_r+0x472>
 8010a42:	9b04      	ldr	r3, [sp, #16]
 8010a44:	2200      	movs	r2, #0
 8010a46:	3b01      	subs	r3, #1
 8010a48:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a4a:	0030      	movs	r0, r6
 8010a4c:	4bc1      	ldr	r3, [pc, #772]	@ (8010d54 <_dtoa_r+0x714>)
 8010a4e:	0039      	movs	r1, r7
 8010a50:	f7f0 fd94 	bl	800157c <__aeabi_dmul>
 8010a54:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a5a:	3401      	adds	r4, #1
 8010a5c:	0020      	movs	r0, r4
 8010a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010a60:	f7f1 fcda 	bl	8002418 <__aeabi_i2d>
 8010a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a68:	f7f0 fd88 	bl	800157c <__aeabi_dmul>
 8010a6c:	4bba      	ldr	r3, [pc, #744]	@ (8010d58 <_dtoa_r+0x718>)
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f7ef fd84 	bl	800057c <__aeabi_dadd>
 8010a74:	4bb9      	ldr	r3, [pc, #740]	@ (8010d5c <_dtoa_r+0x71c>)
 8010a76:	0006      	movs	r6, r0
 8010a78:	18cf      	adds	r7, r1, r3
 8010a7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d16d      	bne.n	8010b5c <_dtoa_r+0x51c>
 8010a80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010a82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a84:	2200      	movs	r2, #0
 8010a86:	4bb6      	ldr	r3, [pc, #728]	@ (8010d60 <_dtoa_r+0x720>)
 8010a88:	f7f1 f85e 	bl	8001b48 <__aeabi_dsub>
 8010a8c:	0032      	movs	r2, r6
 8010a8e:	003b      	movs	r3, r7
 8010a90:	0004      	movs	r4, r0
 8010a92:	000d      	movs	r5, r1
 8010a94:	f7ef fcf0 	bl	8000478 <__aeabi_dcmpgt>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	d000      	beq.n	8010a9e <_dtoa_r+0x45e>
 8010a9c:	e2b6      	b.n	801100c <_dtoa_r+0x9cc>
 8010a9e:	2180      	movs	r1, #128	@ 0x80
 8010aa0:	0609      	lsls	r1, r1, #24
 8010aa2:	187b      	adds	r3, r7, r1
 8010aa4:	0032      	movs	r2, r6
 8010aa6:	0020      	movs	r0, r4
 8010aa8:	0029      	movs	r1, r5
 8010aaa:	f7ef fcd1 	bl	8000450 <__aeabi_dcmplt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d128      	bne.n	8010b04 <_dtoa_r+0x4c4>
 8010ab2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ab4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8010ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ab8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010aba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	da00      	bge.n	8010ac2 <_dtoa_r+0x482>
 8010ac0:	e174      	b.n	8010dac <_dtoa_r+0x76c>
 8010ac2:	9a04      	ldr	r2, [sp, #16]
 8010ac4:	2a0e      	cmp	r2, #14
 8010ac6:	dd00      	ble.n	8010aca <_dtoa_r+0x48a>
 8010ac8:	e170      	b.n	8010dac <_dtoa_r+0x76c>
 8010aca:	4b9f      	ldr	r3, [pc, #636]	@ (8010d48 <_dtoa_r+0x708>)
 8010acc:	00d2      	lsls	r2, r2, #3
 8010ace:	189b      	adds	r3, r3, r2
 8010ad0:	685c      	ldr	r4, [r3, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	9306      	str	r3, [sp, #24]
 8010ad6:	9407      	str	r4, [sp, #28]
 8010ad8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	db00      	blt.n	8010ae0 <_dtoa_r+0x4a0>
 8010ade:	e0e7      	b.n	8010cb0 <_dtoa_r+0x670>
 8010ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	dd00      	ble.n	8010ae8 <_dtoa_r+0x4a8>
 8010ae6:	e0e3      	b.n	8010cb0 <_dtoa_r+0x670>
 8010ae8:	d10c      	bne.n	8010b04 <_dtoa_r+0x4c4>
 8010aea:	9806      	ldr	r0, [sp, #24]
 8010aec:	9907      	ldr	r1, [sp, #28]
 8010aee:	2200      	movs	r2, #0
 8010af0:	4b9b      	ldr	r3, [pc, #620]	@ (8010d60 <_dtoa_r+0x720>)
 8010af2:	f7f0 fd43 	bl	800157c <__aeabi_dmul>
 8010af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010afa:	f7ef fcc7 	bl	800048c <__aeabi_dcmpge>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d100      	bne.n	8010b04 <_dtoa_r+0x4c4>
 8010b02:	e286      	b.n	8011012 <_dtoa_r+0x9d2>
 8010b04:	2600      	movs	r6, #0
 8010b06:	0037      	movs	r7, r6
 8010b08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b0a:	9c08      	ldr	r4, [sp, #32]
 8010b0c:	43db      	mvns	r3, r3
 8010b0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b10:	9704      	str	r7, [sp, #16]
 8010b12:	2700      	movs	r7, #0
 8010b14:	0031      	movs	r1, r6
 8010b16:	9803      	ldr	r0, [sp, #12]
 8010b18:	f001 f838 	bl	8011b8c <_Bfree>
 8010b1c:	9b04      	ldr	r3, [sp, #16]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d100      	bne.n	8010b24 <_dtoa_r+0x4e4>
 8010b22:	e0bb      	b.n	8010c9c <_dtoa_r+0x65c>
 8010b24:	2f00      	cmp	r7, #0
 8010b26:	d005      	beq.n	8010b34 <_dtoa_r+0x4f4>
 8010b28:	429f      	cmp	r7, r3
 8010b2a:	d003      	beq.n	8010b34 <_dtoa_r+0x4f4>
 8010b2c:	0039      	movs	r1, r7
 8010b2e:	9803      	ldr	r0, [sp, #12]
 8010b30:	f001 f82c 	bl	8011b8c <_Bfree>
 8010b34:	9904      	ldr	r1, [sp, #16]
 8010b36:	9803      	ldr	r0, [sp, #12]
 8010b38:	f001 f828 	bl	8011b8c <_Bfree>
 8010b3c:	e0ae      	b.n	8010c9c <_dtoa_r+0x65c>
 8010b3e:	423d      	tst	r5, r7
 8010b40:	d005      	beq.n	8010b4e <_dtoa_r+0x50e>
 8010b42:	6832      	ldr	r2, [r6, #0]
 8010b44:	6873      	ldr	r3, [r6, #4]
 8010b46:	f7f0 fd19 	bl	800157c <__aeabi_dmul>
 8010b4a:	003b      	movs	r3, r7
 8010b4c:	3401      	adds	r4, #1
 8010b4e:	106d      	asrs	r5, r5, #1
 8010b50:	3608      	adds	r6, #8
 8010b52:	e75b      	b.n	8010a0c <_dtoa_r+0x3cc>
 8010b54:	9b04      	ldr	r3, [sp, #16]
 8010b56:	930c      	str	r3, [sp, #48]	@ 0x30
 8010b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5a:	e77f      	b.n	8010a5c <_dtoa_r+0x41c>
 8010b5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8010d48 <_dtoa_r+0x708>)
 8010b60:	3a01      	subs	r2, #1
 8010b62:	00d2      	lsls	r2, r2, #3
 8010b64:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010b66:	189b      	adds	r3, r3, r2
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	2900      	cmp	r1, #0
 8010b6e:	d04c      	beq.n	8010c0a <_dtoa_r+0x5ca>
 8010b70:	2000      	movs	r0, #0
 8010b72:	497c      	ldr	r1, [pc, #496]	@ (8010d64 <_dtoa_r+0x724>)
 8010b74:	f7f0 f8c8 	bl	8000d08 <__aeabi_ddiv>
 8010b78:	0032      	movs	r2, r6
 8010b7a:	003b      	movs	r3, r7
 8010b7c:	f7f0 ffe4 	bl	8001b48 <__aeabi_dsub>
 8010b80:	9a08      	ldr	r2, [sp, #32]
 8010b82:	0006      	movs	r6, r0
 8010b84:	4694      	mov	ip, r2
 8010b86:	000f      	movs	r7, r1
 8010b88:	9b08      	ldr	r3, [sp, #32]
 8010b8a:	9316      	str	r3, [sp, #88]	@ 0x58
 8010b8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b8e:	4463      	add	r3, ip
 8010b90:	9311      	str	r3, [sp, #68]	@ 0x44
 8010b92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010b94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010b96:	f7f1 fc03 	bl	80023a0 <__aeabi_d2iz>
 8010b9a:	0005      	movs	r5, r0
 8010b9c:	f7f1 fc3c 	bl	8002418 <__aeabi_i2d>
 8010ba0:	0002      	movs	r2, r0
 8010ba2:	000b      	movs	r3, r1
 8010ba4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010ba6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010ba8:	f7f0 ffce 	bl	8001b48 <__aeabi_dsub>
 8010bac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010bae:	3530      	adds	r5, #48	@ 0x30
 8010bb0:	1c5c      	adds	r4, r3, #1
 8010bb2:	701d      	strb	r5, [r3, #0]
 8010bb4:	0032      	movs	r2, r6
 8010bb6:	003b      	movs	r3, r7
 8010bb8:	900a      	str	r0, [sp, #40]	@ 0x28
 8010bba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010bbc:	f7ef fc48 	bl	8000450 <__aeabi_dcmplt>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	d16b      	bne.n	8010c9c <_dtoa_r+0x65c>
 8010bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bc8:	2000      	movs	r0, #0
 8010bca:	4961      	ldr	r1, [pc, #388]	@ (8010d50 <_dtoa_r+0x710>)
 8010bcc:	f7f0 ffbc 	bl	8001b48 <__aeabi_dsub>
 8010bd0:	0032      	movs	r2, r6
 8010bd2:	003b      	movs	r3, r7
 8010bd4:	f7ef fc3c 	bl	8000450 <__aeabi_dcmplt>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d000      	beq.n	8010bde <_dtoa_r+0x59e>
 8010bdc:	e0c6      	b.n	8010d6c <_dtoa_r+0x72c>
 8010bde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010be0:	42a3      	cmp	r3, r4
 8010be2:	d100      	bne.n	8010be6 <_dtoa_r+0x5a6>
 8010be4:	e765      	b.n	8010ab2 <_dtoa_r+0x472>
 8010be6:	2200      	movs	r2, #0
 8010be8:	0030      	movs	r0, r6
 8010bea:	0039      	movs	r1, r7
 8010bec:	4b59      	ldr	r3, [pc, #356]	@ (8010d54 <_dtoa_r+0x714>)
 8010bee:	f7f0 fcc5 	bl	800157c <__aeabi_dmul>
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	0006      	movs	r6, r0
 8010bf6:	000f      	movs	r7, r1
 8010bf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010bfa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bfc:	4b55      	ldr	r3, [pc, #340]	@ (8010d54 <_dtoa_r+0x714>)
 8010bfe:	f7f0 fcbd 	bl	800157c <__aeabi_dmul>
 8010c02:	9416      	str	r4, [sp, #88]	@ 0x58
 8010c04:	900a      	str	r0, [sp, #40]	@ 0x28
 8010c06:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010c08:	e7c3      	b.n	8010b92 <_dtoa_r+0x552>
 8010c0a:	0030      	movs	r0, r6
 8010c0c:	0039      	movs	r1, r7
 8010c0e:	f7f0 fcb5 	bl	800157c <__aeabi_dmul>
 8010c12:	9d08      	ldr	r5, [sp, #32]
 8010c14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010c16:	002b      	movs	r3, r5
 8010c18:	4694      	mov	ip, r2
 8010c1a:	9016      	str	r0, [sp, #88]	@ 0x58
 8010c1c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8010c1e:	4463      	add	r3, ip
 8010c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8010c22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c26:	f7f1 fbbb 	bl	80023a0 <__aeabi_d2iz>
 8010c2a:	0004      	movs	r4, r0
 8010c2c:	f7f1 fbf4 	bl	8002418 <__aeabi_i2d>
 8010c30:	000b      	movs	r3, r1
 8010c32:	0002      	movs	r2, r0
 8010c34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010c36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c38:	f7f0 ff86 	bl	8001b48 <__aeabi_dsub>
 8010c3c:	3430      	adds	r4, #48	@ 0x30
 8010c3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010c40:	702c      	strb	r4, [r5, #0]
 8010c42:	3501      	adds	r5, #1
 8010c44:	0006      	movs	r6, r0
 8010c46:	000f      	movs	r7, r1
 8010c48:	42ab      	cmp	r3, r5
 8010c4a:	d12a      	bne.n	8010ca2 <_dtoa_r+0x662>
 8010c4c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010c4e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8010c50:	9b08      	ldr	r3, [sp, #32]
 8010c52:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8010c54:	469c      	mov	ip, r3
 8010c56:	2200      	movs	r2, #0
 8010c58:	4b42      	ldr	r3, [pc, #264]	@ (8010d64 <_dtoa_r+0x724>)
 8010c5a:	4464      	add	r4, ip
 8010c5c:	f7ef fc8e 	bl	800057c <__aeabi_dadd>
 8010c60:	0002      	movs	r2, r0
 8010c62:	000b      	movs	r3, r1
 8010c64:	0030      	movs	r0, r6
 8010c66:	0039      	movs	r1, r7
 8010c68:	f7ef fc06 	bl	8000478 <__aeabi_dcmpgt>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d000      	beq.n	8010c72 <_dtoa_r+0x632>
 8010c70:	e07c      	b.n	8010d6c <_dtoa_r+0x72c>
 8010c72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010c74:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c76:	2000      	movs	r0, #0
 8010c78:	493a      	ldr	r1, [pc, #232]	@ (8010d64 <_dtoa_r+0x724>)
 8010c7a:	f7f0 ff65 	bl	8001b48 <__aeabi_dsub>
 8010c7e:	0002      	movs	r2, r0
 8010c80:	000b      	movs	r3, r1
 8010c82:	0030      	movs	r0, r6
 8010c84:	0039      	movs	r1, r7
 8010c86:	f7ef fbe3 	bl	8000450 <__aeabi_dcmplt>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	d100      	bne.n	8010c90 <_dtoa_r+0x650>
 8010c8e:	e710      	b.n	8010ab2 <_dtoa_r+0x472>
 8010c90:	0023      	movs	r3, r4
 8010c92:	3c01      	subs	r4, #1
 8010c94:	7822      	ldrb	r2, [r4, #0]
 8010c96:	2a30      	cmp	r2, #48	@ 0x30
 8010c98:	d0fa      	beq.n	8010c90 <_dtoa_r+0x650>
 8010c9a:	001c      	movs	r4, r3
 8010c9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c9e:	9304      	str	r3, [sp, #16]
 8010ca0:	e042      	b.n	8010d28 <_dtoa_r+0x6e8>
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8010d54 <_dtoa_r+0x714>)
 8010ca6:	f7f0 fc69 	bl	800157c <__aeabi_dmul>
 8010caa:	900a      	str	r0, [sp, #40]	@ 0x28
 8010cac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010cae:	e7b8      	b.n	8010c22 <_dtoa_r+0x5e2>
 8010cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cb2:	9d08      	ldr	r5, [sp, #32]
 8010cb4:	3b01      	subs	r3, #1
 8010cb6:	195b      	adds	r3, r3, r5
 8010cb8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010cba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cbe:	9a06      	ldr	r2, [sp, #24]
 8010cc0:	9b07      	ldr	r3, [sp, #28]
 8010cc2:	0030      	movs	r0, r6
 8010cc4:	0039      	movs	r1, r7
 8010cc6:	f7f0 f81f 	bl	8000d08 <__aeabi_ddiv>
 8010cca:	f7f1 fb69 	bl	80023a0 <__aeabi_d2iz>
 8010cce:	9009      	str	r0, [sp, #36]	@ 0x24
 8010cd0:	f7f1 fba2 	bl	8002418 <__aeabi_i2d>
 8010cd4:	9a06      	ldr	r2, [sp, #24]
 8010cd6:	9b07      	ldr	r3, [sp, #28]
 8010cd8:	f7f0 fc50 	bl	800157c <__aeabi_dmul>
 8010cdc:	0002      	movs	r2, r0
 8010cde:	000b      	movs	r3, r1
 8010ce0:	0030      	movs	r0, r6
 8010ce2:	0039      	movs	r1, r7
 8010ce4:	f7f0 ff30 	bl	8001b48 <__aeabi_dsub>
 8010ce8:	002b      	movs	r3, r5
 8010cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cec:	3501      	adds	r5, #1
 8010cee:	3230      	adds	r2, #48	@ 0x30
 8010cf0:	701a      	strb	r2, [r3, #0]
 8010cf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010cf4:	002c      	movs	r4, r5
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d14b      	bne.n	8010d92 <_dtoa_r+0x752>
 8010cfa:	0002      	movs	r2, r0
 8010cfc:	000b      	movs	r3, r1
 8010cfe:	f7ef fc3d 	bl	800057c <__aeabi_dadd>
 8010d02:	9a06      	ldr	r2, [sp, #24]
 8010d04:	9b07      	ldr	r3, [sp, #28]
 8010d06:	0006      	movs	r6, r0
 8010d08:	000f      	movs	r7, r1
 8010d0a:	f7ef fbb5 	bl	8000478 <__aeabi_dcmpgt>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d12a      	bne.n	8010d68 <_dtoa_r+0x728>
 8010d12:	9a06      	ldr	r2, [sp, #24]
 8010d14:	9b07      	ldr	r3, [sp, #28]
 8010d16:	0030      	movs	r0, r6
 8010d18:	0039      	movs	r1, r7
 8010d1a:	f7ef fb93 	bl	8000444 <__aeabi_dcmpeq>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	d002      	beq.n	8010d28 <_dtoa_r+0x6e8>
 8010d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d24:	07dd      	lsls	r5, r3, #31
 8010d26:	d41f      	bmi.n	8010d68 <_dtoa_r+0x728>
 8010d28:	9905      	ldr	r1, [sp, #20]
 8010d2a:	9803      	ldr	r0, [sp, #12]
 8010d2c:	f000 ff2e 	bl	8011b8c <_Bfree>
 8010d30:	2300      	movs	r3, #0
 8010d32:	7023      	strb	r3, [r4, #0]
 8010d34:	9b04      	ldr	r3, [sp, #16]
 8010d36:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010d38:	3301      	adds	r3, #1
 8010d3a:	6013      	str	r3, [r2, #0]
 8010d3c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d100      	bne.n	8010d44 <_dtoa_r+0x704>
 8010d42:	e4c7      	b.n	80106d4 <_dtoa_r+0x94>
 8010d44:	601c      	str	r4, [r3, #0]
 8010d46:	e4c5      	b.n	80106d4 <_dtoa_r+0x94>
 8010d48:	08013498 	.word	0x08013498
 8010d4c:	08013470 	.word	0x08013470
 8010d50:	3ff00000 	.word	0x3ff00000
 8010d54:	40240000 	.word	0x40240000
 8010d58:	401c0000 	.word	0x401c0000
 8010d5c:	fcc00000 	.word	0xfcc00000
 8010d60:	40140000 	.word	0x40140000
 8010d64:	3fe00000 	.word	0x3fe00000
 8010d68:	9b04      	ldr	r3, [sp, #16]
 8010d6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d6c:	0023      	movs	r3, r4
 8010d6e:	001c      	movs	r4, r3
 8010d70:	3b01      	subs	r3, #1
 8010d72:	781a      	ldrb	r2, [r3, #0]
 8010d74:	2a39      	cmp	r2, #57	@ 0x39
 8010d76:	d108      	bne.n	8010d8a <_dtoa_r+0x74a>
 8010d78:	9a08      	ldr	r2, [sp, #32]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d1f7      	bne.n	8010d6e <_dtoa_r+0x72e>
 8010d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d80:	9908      	ldr	r1, [sp, #32]
 8010d82:	3201      	adds	r2, #1
 8010d84:	920c      	str	r2, [sp, #48]	@ 0x30
 8010d86:	2230      	movs	r2, #48	@ 0x30
 8010d88:	700a      	strb	r2, [r1, #0]
 8010d8a:	781a      	ldrb	r2, [r3, #0]
 8010d8c:	3201      	adds	r2, #1
 8010d8e:	701a      	strb	r2, [r3, #0]
 8010d90:	e784      	b.n	8010c9c <_dtoa_r+0x65c>
 8010d92:	2200      	movs	r2, #0
 8010d94:	4bc6      	ldr	r3, [pc, #792]	@ (80110b0 <_dtoa_r+0xa70>)
 8010d96:	f7f0 fbf1 	bl	800157c <__aeabi_dmul>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	0006      	movs	r6, r0
 8010da0:	000f      	movs	r7, r1
 8010da2:	f7ef fb4f 	bl	8000444 <__aeabi_dcmpeq>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d089      	beq.n	8010cbe <_dtoa_r+0x67e>
 8010daa:	e7bd      	b.n	8010d28 <_dtoa_r+0x6e8>
 8010dac:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010dae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010db0:	9c06      	ldr	r4, [sp, #24]
 8010db2:	2f00      	cmp	r7, #0
 8010db4:	d014      	beq.n	8010de0 <_dtoa_r+0x7a0>
 8010db6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010db8:	2a01      	cmp	r2, #1
 8010dba:	dd00      	ble.n	8010dbe <_dtoa_r+0x77e>
 8010dbc:	e0e4      	b.n	8010f88 <_dtoa_r+0x948>
 8010dbe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8010dc0:	2a00      	cmp	r2, #0
 8010dc2:	d100      	bne.n	8010dc6 <_dtoa_r+0x786>
 8010dc4:	e0da      	b.n	8010f7c <_dtoa_r+0x93c>
 8010dc6:	4abb      	ldr	r2, [pc, #748]	@ (80110b4 <_dtoa_r+0xa74>)
 8010dc8:	189b      	adds	r3, r3, r2
 8010dca:	9a06      	ldr	r2, [sp, #24]
 8010dcc:	2101      	movs	r1, #1
 8010dce:	18d2      	adds	r2, r2, r3
 8010dd0:	9206      	str	r2, [sp, #24]
 8010dd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010dd4:	9803      	ldr	r0, [sp, #12]
 8010dd6:	18d3      	adds	r3, r2, r3
 8010dd8:	930d      	str	r3, [sp, #52]	@ 0x34
 8010dda:	f000 ffdb 	bl	8011d94 <__i2b>
 8010dde:	0007      	movs	r7, r0
 8010de0:	2c00      	cmp	r4, #0
 8010de2:	d00e      	beq.n	8010e02 <_dtoa_r+0x7c2>
 8010de4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	dd0b      	ble.n	8010e02 <_dtoa_r+0x7c2>
 8010dea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010dec:	0023      	movs	r3, r4
 8010dee:	4294      	cmp	r4, r2
 8010df0:	dd00      	ble.n	8010df4 <_dtoa_r+0x7b4>
 8010df2:	0013      	movs	r3, r2
 8010df4:	9a06      	ldr	r2, [sp, #24]
 8010df6:	1ae4      	subs	r4, r4, r3
 8010df8:	1ad2      	subs	r2, r2, r3
 8010dfa:	9206      	str	r2, [sp, #24]
 8010dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d021      	beq.n	8010e4c <_dtoa_r+0x80c>
 8010e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d100      	bne.n	8010e10 <_dtoa_r+0x7d0>
 8010e0e:	e0d3      	b.n	8010fb8 <_dtoa_r+0x978>
 8010e10:	9e05      	ldr	r6, [sp, #20]
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	d014      	beq.n	8010e40 <_dtoa_r+0x800>
 8010e16:	0039      	movs	r1, r7
 8010e18:	002a      	movs	r2, r5
 8010e1a:	9803      	ldr	r0, [sp, #12]
 8010e1c:	f001 f87c 	bl	8011f18 <__pow5mult>
 8010e20:	9a05      	ldr	r2, [sp, #20]
 8010e22:	0001      	movs	r1, r0
 8010e24:	0007      	movs	r7, r0
 8010e26:	9803      	ldr	r0, [sp, #12]
 8010e28:	f000 ffcc 	bl	8011dc4 <__multiply>
 8010e2c:	0006      	movs	r6, r0
 8010e2e:	9905      	ldr	r1, [sp, #20]
 8010e30:	9803      	ldr	r0, [sp, #12]
 8010e32:	f000 feab 	bl	8011b8c <_Bfree>
 8010e36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e38:	9605      	str	r6, [sp, #20]
 8010e3a:	1b5b      	subs	r3, r3, r5
 8010e3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e3e:	d005      	beq.n	8010e4c <_dtoa_r+0x80c>
 8010e40:	0031      	movs	r1, r6
 8010e42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010e44:	9803      	ldr	r0, [sp, #12]
 8010e46:	f001 f867 	bl	8011f18 <__pow5mult>
 8010e4a:	9005      	str	r0, [sp, #20]
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	9803      	ldr	r0, [sp, #12]
 8010e50:	f000 ffa0 	bl	8011d94 <__i2b>
 8010e54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e56:	0006      	movs	r6, r0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d100      	bne.n	8010e5e <_dtoa_r+0x81e>
 8010e5c:	e1bc      	b.n	80111d8 <_dtoa_r+0xb98>
 8010e5e:	001a      	movs	r2, r3
 8010e60:	0001      	movs	r1, r0
 8010e62:	9803      	ldr	r0, [sp, #12]
 8010e64:	f001 f858 	bl	8011f18 <__pow5mult>
 8010e68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010e6a:	0006      	movs	r6, r0
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	2b01      	cmp	r3, #1
 8010e70:	dc16      	bgt.n	8010ea0 <_dtoa_r+0x860>
 8010e72:	2500      	movs	r5, #0
 8010e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e76:	42ab      	cmp	r3, r5
 8010e78:	d10e      	bne.n	8010e98 <_dtoa_r+0x858>
 8010e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e7c:	031b      	lsls	r3, r3, #12
 8010e7e:	42ab      	cmp	r3, r5
 8010e80:	d10a      	bne.n	8010e98 <_dtoa_r+0x858>
 8010e82:	4b8d      	ldr	r3, [pc, #564]	@ (80110b8 <_dtoa_r+0xa78>)
 8010e84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010e86:	4213      	tst	r3, r2
 8010e88:	d006      	beq.n	8010e98 <_dtoa_r+0x858>
 8010e8a:	9b06      	ldr	r3, [sp, #24]
 8010e8c:	3501      	adds	r5, #1
 8010e8e:	3301      	adds	r3, #1
 8010e90:	9306      	str	r3, [sp, #24]
 8010e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e94:	3301      	adds	r3, #1
 8010e96:	930d      	str	r3, [sp, #52]	@ 0x34
 8010e98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e9a:	2001      	movs	r0, #1
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d008      	beq.n	8010eb2 <_dtoa_r+0x872>
 8010ea0:	6933      	ldr	r3, [r6, #16]
 8010ea2:	3303      	adds	r3, #3
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	18f3      	adds	r3, r6, r3
 8010ea8:	6858      	ldr	r0, [r3, #4]
 8010eaa:	f000 ff23 	bl	8011cf4 <__hi0bits>
 8010eae:	2320      	movs	r3, #32
 8010eb0:	1a18      	subs	r0, r3, r0
 8010eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eb4:	1818      	adds	r0, r3, r0
 8010eb6:	0002      	movs	r2, r0
 8010eb8:	231f      	movs	r3, #31
 8010eba:	401a      	ands	r2, r3
 8010ebc:	4218      	tst	r0, r3
 8010ebe:	d100      	bne.n	8010ec2 <_dtoa_r+0x882>
 8010ec0:	e081      	b.n	8010fc6 <_dtoa_r+0x986>
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	1a9b      	subs	r3, r3, r2
 8010ec6:	2b04      	cmp	r3, #4
 8010ec8:	dd79      	ble.n	8010fbe <_dtoa_r+0x97e>
 8010eca:	231c      	movs	r3, #28
 8010ecc:	1a9b      	subs	r3, r3, r2
 8010ece:	9a06      	ldr	r2, [sp, #24]
 8010ed0:	18e4      	adds	r4, r4, r3
 8010ed2:	18d2      	adds	r2, r2, r3
 8010ed4:	9206      	str	r2, [sp, #24]
 8010ed6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010ed8:	18d3      	adds	r3, r2, r3
 8010eda:	930d      	str	r3, [sp, #52]	@ 0x34
 8010edc:	9b06      	ldr	r3, [sp, #24]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	dd05      	ble.n	8010eee <_dtoa_r+0x8ae>
 8010ee2:	001a      	movs	r2, r3
 8010ee4:	9905      	ldr	r1, [sp, #20]
 8010ee6:	9803      	ldr	r0, [sp, #12]
 8010ee8:	f001 f872 	bl	8011fd0 <__lshift>
 8010eec:	9005      	str	r0, [sp, #20]
 8010eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	dd05      	ble.n	8010f00 <_dtoa_r+0x8c0>
 8010ef4:	0031      	movs	r1, r6
 8010ef6:	001a      	movs	r2, r3
 8010ef8:	9803      	ldr	r0, [sp, #12]
 8010efa:	f001 f869 	bl	8011fd0 <__lshift>
 8010efe:	0006      	movs	r6, r0
 8010f00:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d061      	beq.n	8010fca <_dtoa_r+0x98a>
 8010f06:	0031      	movs	r1, r6
 8010f08:	9805      	ldr	r0, [sp, #20]
 8010f0a:	f001 f8cd 	bl	80120a8 <__mcmp>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	da5b      	bge.n	8010fca <_dtoa_r+0x98a>
 8010f12:	9b04      	ldr	r3, [sp, #16]
 8010f14:	220a      	movs	r2, #10
 8010f16:	3b01      	subs	r3, #1
 8010f18:	930c      	str	r3, [sp, #48]	@ 0x30
 8010f1a:	9905      	ldr	r1, [sp, #20]
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9803      	ldr	r0, [sp, #12]
 8010f20:	f000 fe58 	bl	8011bd4 <__multadd>
 8010f24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f26:	9005      	str	r0, [sp, #20]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d100      	bne.n	8010f2e <_dtoa_r+0x8ee>
 8010f2c:	e15b      	b.n	80111e6 <_dtoa_r+0xba6>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	0039      	movs	r1, r7
 8010f32:	220a      	movs	r2, #10
 8010f34:	9803      	ldr	r0, [sp, #12]
 8010f36:	f000 fe4d 	bl	8011bd4 <__multadd>
 8010f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f3c:	0007      	movs	r7, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	dc4d      	bgt.n	8010fde <_dtoa_r+0x99e>
 8010f42:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010f44:	2b02      	cmp	r3, #2
 8010f46:	dd46      	ble.n	8010fd6 <_dtoa_r+0x996>
 8010f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d000      	beq.n	8010f50 <_dtoa_r+0x910>
 8010f4e:	e5db      	b.n	8010b08 <_dtoa_r+0x4c8>
 8010f50:	0031      	movs	r1, r6
 8010f52:	2205      	movs	r2, #5
 8010f54:	9803      	ldr	r0, [sp, #12]
 8010f56:	f000 fe3d 	bl	8011bd4 <__multadd>
 8010f5a:	0006      	movs	r6, r0
 8010f5c:	0001      	movs	r1, r0
 8010f5e:	9805      	ldr	r0, [sp, #20]
 8010f60:	f001 f8a2 	bl	80120a8 <__mcmp>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	dc00      	bgt.n	8010f6a <_dtoa_r+0x92a>
 8010f68:	e5ce      	b.n	8010b08 <_dtoa_r+0x4c8>
 8010f6a:	9b08      	ldr	r3, [sp, #32]
 8010f6c:	9a08      	ldr	r2, [sp, #32]
 8010f6e:	1c5c      	adds	r4, r3, #1
 8010f70:	2331      	movs	r3, #49	@ 0x31
 8010f72:	7013      	strb	r3, [r2, #0]
 8010f74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f76:	3301      	adds	r3, #1
 8010f78:	930c      	str	r3, [sp, #48]	@ 0x30
 8010f7a:	e5c9      	b.n	8010b10 <_dtoa_r+0x4d0>
 8010f7c:	2336      	movs	r3, #54	@ 0x36
 8010f7e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010f80:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8010f82:	1a9b      	subs	r3, r3, r2
 8010f84:	9c06      	ldr	r4, [sp, #24]
 8010f86:	e720      	b.n	8010dca <_dtoa_r+0x78a>
 8010f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f8a:	1e5d      	subs	r5, r3, #1
 8010f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f8e:	42ab      	cmp	r3, r5
 8010f90:	db08      	blt.n	8010fa4 <_dtoa_r+0x964>
 8010f92:	1b5d      	subs	r5, r3, r5
 8010f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	daf4      	bge.n	8010f84 <_dtoa_r+0x944>
 8010f9a:	9b06      	ldr	r3, [sp, #24]
 8010f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f9e:	1a9c      	subs	r4, r3, r2
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	e712      	b.n	8010dca <_dtoa_r+0x78a>
 8010fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010fa8:	1aeb      	subs	r3, r5, r3
 8010faa:	18d3      	adds	r3, r2, r3
 8010fac:	9314      	str	r3, [sp, #80]	@ 0x50
 8010fae:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010fb0:	9c06      	ldr	r4, [sp, #24]
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb6:	e708      	b.n	8010dca <_dtoa_r+0x78a>
 8010fb8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010fba:	9905      	ldr	r1, [sp, #20]
 8010fbc:	e742      	b.n	8010e44 <_dtoa_r+0x804>
 8010fbe:	2b04      	cmp	r3, #4
 8010fc0:	d08c      	beq.n	8010edc <_dtoa_r+0x89c>
 8010fc2:	331c      	adds	r3, #28
 8010fc4:	e783      	b.n	8010ece <_dtoa_r+0x88e>
 8010fc6:	0013      	movs	r3, r2
 8010fc8:	e7fb      	b.n	8010fc2 <_dtoa_r+0x982>
 8010fca:	9b04      	ldr	r3, [sp, #16]
 8010fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8010fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	ddb5      	ble.n	8010f42 <_dtoa_r+0x902>
 8010fd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d100      	bne.n	8010fde <_dtoa_r+0x99e>
 8010fdc:	e107      	b.n	80111ee <_dtoa_r+0xbae>
 8010fde:	2c00      	cmp	r4, #0
 8010fe0:	dd05      	ble.n	8010fee <_dtoa_r+0x9ae>
 8010fe2:	0039      	movs	r1, r7
 8010fe4:	0022      	movs	r2, r4
 8010fe6:	9803      	ldr	r0, [sp, #12]
 8010fe8:	f000 fff2 	bl	8011fd0 <__lshift>
 8010fec:	0007      	movs	r7, r0
 8010fee:	9704      	str	r7, [sp, #16]
 8010ff0:	2d00      	cmp	r5, #0
 8010ff2:	d020      	beq.n	8011036 <_dtoa_r+0x9f6>
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	9803      	ldr	r0, [sp, #12]
 8010ff8:	f000 fd84 	bl	8011b04 <_Balloc>
 8010ffc:	1e04      	subs	r4, r0, #0
 8010ffe:	d10c      	bne.n	801101a <_dtoa_r+0x9da>
 8011000:	0022      	movs	r2, r4
 8011002:	4b2e      	ldr	r3, [pc, #184]	@ (80110bc <_dtoa_r+0xa7c>)
 8011004:	482e      	ldr	r0, [pc, #184]	@ (80110c0 <_dtoa_r+0xa80>)
 8011006:	492f      	ldr	r1, [pc, #188]	@ (80110c4 <_dtoa_r+0xa84>)
 8011008:	f7ff fb2f 	bl	801066a <_dtoa_r+0x2a>
 801100c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801100e:	0037      	movs	r7, r6
 8011010:	e7ab      	b.n	8010f6a <_dtoa_r+0x92a>
 8011012:	9b04      	ldr	r3, [sp, #16]
 8011014:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8011016:	930c      	str	r3, [sp, #48]	@ 0x30
 8011018:	e7f9      	b.n	801100e <_dtoa_r+0x9ce>
 801101a:	0039      	movs	r1, r7
 801101c:	693a      	ldr	r2, [r7, #16]
 801101e:	310c      	adds	r1, #12
 8011020:	3202      	adds	r2, #2
 8011022:	0092      	lsls	r2, r2, #2
 8011024:	300c      	adds	r0, #12
 8011026:	f7ff fa75 	bl	8010514 <memcpy>
 801102a:	2201      	movs	r2, #1
 801102c:	0021      	movs	r1, r4
 801102e:	9803      	ldr	r0, [sp, #12]
 8011030:	f000 ffce 	bl	8011fd0 <__lshift>
 8011034:	9004      	str	r0, [sp, #16]
 8011036:	9b08      	ldr	r3, [sp, #32]
 8011038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801103a:	9306      	str	r3, [sp, #24]
 801103c:	3b01      	subs	r3, #1
 801103e:	189b      	adds	r3, r3, r2
 8011040:	2201      	movs	r2, #1
 8011042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011046:	4013      	ands	r3, r2
 8011048:	930e      	str	r3, [sp, #56]	@ 0x38
 801104a:	0031      	movs	r1, r6
 801104c:	9805      	ldr	r0, [sp, #20]
 801104e:	f7ff fa71 	bl	8010534 <quorem>
 8011052:	0039      	movs	r1, r7
 8011054:	0005      	movs	r5, r0
 8011056:	900a      	str	r0, [sp, #40]	@ 0x28
 8011058:	9805      	ldr	r0, [sp, #20]
 801105a:	f001 f825 	bl	80120a8 <__mcmp>
 801105e:	9a04      	ldr	r2, [sp, #16]
 8011060:	900d      	str	r0, [sp, #52]	@ 0x34
 8011062:	0031      	movs	r1, r6
 8011064:	9803      	ldr	r0, [sp, #12]
 8011066:	f001 f83b 	bl	80120e0 <__mdiff>
 801106a:	2201      	movs	r2, #1
 801106c:	68c3      	ldr	r3, [r0, #12]
 801106e:	0004      	movs	r4, r0
 8011070:	3530      	adds	r5, #48	@ 0x30
 8011072:	9209      	str	r2, [sp, #36]	@ 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	d104      	bne.n	8011082 <_dtoa_r+0xa42>
 8011078:	0001      	movs	r1, r0
 801107a:	9805      	ldr	r0, [sp, #20]
 801107c:	f001 f814 	bl	80120a8 <__mcmp>
 8011080:	9009      	str	r0, [sp, #36]	@ 0x24
 8011082:	0021      	movs	r1, r4
 8011084:	9803      	ldr	r0, [sp, #12]
 8011086:	f000 fd81 	bl	8011b8c <_Bfree>
 801108a:	9b06      	ldr	r3, [sp, #24]
 801108c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801108e:	1c5c      	adds	r4, r3, #1
 8011090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011092:	4313      	orrs	r3, r2
 8011094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011096:	4313      	orrs	r3, r2
 8011098:	d116      	bne.n	80110c8 <_dtoa_r+0xa88>
 801109a:	2d39      	cmp	r5, #57	@ 0x39
 801109c:	d02f      	beq.n	80110fe <_dtoa_r+0xabe>
 801109e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	dd01      	ble.n	80110a8 <_dtoa_r+0xa68>
 80110a4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80110a6:	3531      	adds	r5, #49	@ 0x31
 80110a8:	9b06      	ldr	r3, [sp, #24]
 80110aa:	701d      	strb	r5, [r3, #0]
 80110ac:	e532      	b.n	8010b14 <_dtoa_r+0x4d4>
 80110ae:	46c0      	nop			@ (mov r8, r8)
 80110b0:	40240000 	.word	0x40240000
 80110b4:	00000433 	.word	0x00000433
 80110b8:	7ff00000 	.word	0x7ff00000
 80110bc:	080132f2 	.word	0x080132f2
 80110c0:	0801329a 	.word	0x0801329a
 80110c4:	000002ef 	.word	0x000002ef
 80110c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	db04      	blt.n	80110d8 <_dtoa_r+0xa98>
 80110ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80110d0:	4313      	orrs	r3, r2
 80110d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110d4:	4313      	orrs	r3, r2
 80110d6:	d11e      	bne.n	8011116 <_dtoa_r+0xad6>
 80110d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110da:	2b00      	cmp	r3, #0
 80110dc:	dde4      	ble.n	80110a8 <_dtoa_r+0xa68>
 80110de:	9905      	ldr	r1, [sp, #20]
 80110e0:	2201      	movs	r2, #1
 80110e2:	9803      	ldr	r0, [sp, #12]
 80110e4:	f000 ff74 	bl	8011fd0 <__lshift>
 80110e8:	0031      	movs	r1, r6
 80110ea:	9005      	str	r0, [sp, #20]
 80110ec:	f000 ffdc 	bl	80120a8 <__mcmp>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	dc02      	bgt.n	80110fa <_dtoa_r+0xaba>
 80110f4:	d1d8      	bne.n	80110a8 <_dtoa_r+0xa68>
 80110f6:	07eb      	lsls	r3, r5, #31
 80110f8:	d5d6      	bpl.n	80110a8 <_dtoa_r+0xa68>
 80110fa:	2d39      	cmp	r5, #57	@ 0x39
 80110fc:	d1d2      	bne.n	80110a4 <_dtoa_r+0xa64>
 80110fe:	2339      	movs	r3, #57	@ 0x39
 8011100:	9a06      	ldr	r2, [sp, #24]
 8011102:	7013      	strb	r3, [r2, #0]
 8011104:	0023      	movs	r3, r4
 8011106:	001c      	movs	r4, r3
 8011108:	3b01      	subs	r3, #1
 801110a:	781a      	ldrb	r2, [r3, #0]
 801110c:	2a39      	cmp	r2, #57	@ 0x39
 801110e:	d050      	beq.n	80111b2 <_dtoa_r+0xb72>
 8011110:	3201      	adds	r2, #1
 8011112:	701a      	strb	r2, [r3, #0]
 8011114:	e4fe      	b.n	8010b14 <_dtoa_r+0x4d4>
 8011116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011118:	2b00      	cmp	r3, #0
 801111a:	dd03      	ble.n	8011124 <_dtoa_r+0xae4>
 801111c:	2d39      	cmp	r5, #57	@ 0x39
 801111e:	d0ee      	beq.n	80110fe <_dtoa_r+0xabe>
 8011120:	3501      	adds	r5, #1
 8011122:	e7c1      	b.n	80110a8 <_dtoa_r+0xa68>
 8011124:	9b06      	ldr	r3, [sp, #24]
 8011126:	9a06      	ldr	r2, [sp, #24]
 8011128:	701d      	strb	r5, [r3, #0]
 801112a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801112c:	4293      	cmp	r3, r2
 801112e:	d02b      	beq.n	8011188 <_dtoa_r+0xb48>
 8011130:	2300      	movs	r3, #0
 8011132:	220a      	movs	r2, #10
 8011134:	9905      	ldr	r1, [sp, #20]
 8011136:	9803      	ldr	r0, [sp, #12]
 8011138:	f000 fd4c 	bl	8011bd4 <__multadd>
 801113c:	9b04      	ldr	r3, [sp, #16]
 801113e:	9005      	str	r0, [sp, #20]
 8011140:	429f      	cmp	r7, r3
 8011142:	d109      	bne.n	8011158 <_dtoa_r+0xb18>
 8011144:	0039      	movs	r1, r7
 8011146:	2300      	movs	r3, #0
 8011148:	220a      	movs	r2, #10
 801114a:	9803      	ldr	r0, [sp, #12]
 801114c:	f000 fd42 	bl	8011bd4 <__multadd>
 8011150:	0007      	movs	r7, r0
 8011152:	9004      	str	r0, [sp, #16]
 8011154:	9406      	str	r4, [sp, #24]
 8011156:	e778      	b.n	801104a <_dtoa_r+0xa0a>
 8011158:	0039      	movs	r1, r7
 801115a:	2300      	movs	r3, #0
 801115c:	220a      	movs	r2, #10
 801115e:	9803      	ldr	r0, [sp, #12]
 8011160:	f000 fd38 	bl	8011bd4 <__multadd>
 8011164:	2300      	movs	r3, #0
 8011166:	0007      	movs	r7, r0
 8011168:	220a      	movs	r2, #10
 801116a:	9904      	ldr	r1, [sp, #16]
 801116c:	9803      	ldr	r0, [sp, #12]
 801116e:	f000 fd31 	bl	8011bd4 <__multadd>
 8011172:	9004      	str	r0, [sp, #16]
 8011174:	e7ee      	b.n	8011154 <_dtoa_r+0xb14>
 8011176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011178:	2401      	movs	r4, #1
 801117a:	2b00      	cmp	r3, #0
 801117c:	dd00      	ble.n	8011180 <_dtoa_r+0xb40>
 801117e:	001c      	movs	r4, r3
 8011180:	9704      	str	r7, [sp, #16]
 8011182:	2700      	movs	r7, #0
 8011184:	9b08      	ldr	r3, [sp, #32]
 8011186:	191c      	adds	r4, r3, r4
 8011188:	9905      	ldr	r1, [sp, #20]
 801118a:	2201      	movs	r2, #1
 801118c:	9803      	ldr	r0, [sp, #12]
 801118e:	f000 ff1f 	bl	8011fd0 <__lshift>
 8011192:	0031      	movs	r1, r6
 8011194:	9005      	str	r0, [sp, #20]
 8011196:	f000 ff87 	bl	80120a8 <__mcmp>
 801119a:	2800      	cmp	r0, #0
 801119c:	dcb2      	bgt.n	8011104 <_dtoa_r+0xac4>
 801119e:	d101      	bne.n	80111a4 <_dtoa_r+0xb64>
 80111a0:	07ed      	lsls	r5, r5, #31
 80111a2:	d4af      	bmi.n	8011104 <_dtoa_r+0xac4>
 80111a4:	0023      	movs	r3, r4
 80111a6:	001c      	movs	r4, r3
 80111a8:	3b01      	subs	r3, #1
 80111aa:	781a      	ldrb	r2, [r3, #0]
 80111ac:	2a30      	cmp	r2, #48	@ 0x30
 80111ae:	d0fa      	beq.n	80111a6 <_dtoa_r+0xb66>
 80111b0:	e4b0      	b.n	8010b14 <_dtoa_r+0x4d4>
 80111b2:	9a08      	ldr	r2, [sp, #32]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d1a6      	bne.n	8011106 <_dtoa_r+0xac6>
 80111b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111ba:	3301      	adds	r3, #1
 80111bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80111be:	2331      	movs	r3, #49	@ 0x31
 80111c0:	7013      	strb	r3, [r2, #0]
 80111c2:	e4a7      	b.n	8010b14 <_dtoa_r+0x4d4>
 80111c4:	4b14      	ldr	r3, [pc, #80]	@ (8011218 <_dtoa_r+0xbd8>)
 80111c6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80111c8:	9308      	str	r3, [sp, #32]
 80111ca:	4b14      	ldr	r3, [pc, #80]	@ (801121c <_dtoa_r+0xbdc>)
 80111cc:	2a00      	cmp	r2, #0
 80111ce:	d001      	beq.n	80111d4 <_dtoa_r+0xb94>
 80111d0:	f7ff fa7e 	bl	80106d0 <_dtoa_r+0x90>
 80111d4:	f7ff fa7e 	bl	80106d4 <_dtoa_r+0x94>
 80111d8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80111da:	2b01      	cmp	r3, #1
 80111dc:	dc00      	bgt.n	80111e0 <_dtoa_r+0xba0>
 80111de:	e648      	b.n	8010e72 <_dtoa_r+0x832>
 80111e0:	2001      	movs	r0, #1
 80111e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80111e4:	e665      	b.n	8010eb2 <_dtoa_r+0x872>
 80111e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	dc00      	bgt.n	80111ee <_dtoa_r+0xbae>
 80111ec:	e6a9      	b.n	8010f42 <_dtoa_r+0x902>
 80111ee:	2400      	movs	r4, #0
 80111f0:	0031      	movs	r1, r6
 80111f2:	9805      	ldr	r0, [sp, #20]
 80111f4:	f7ff f99e 	bl	8010534 <quorem>
 80111f8:	9b08      	ldr	r3, [sp, #32]
 80111fa:	3030      	adds	r0, #48	@ 0x30
 80111fc:	5518      	strb	r0, [r3, r4]
 80111fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011200:	3401      	adds	r4, #1
 8011202:	0005      	movs	r5, r0
 8011204:	42a3      	cmp	r3, r4
 8011206:	ddb6      	ble.n	8011176 <_dtoa_r+0xb36>
 8011208:	2300      	movs	r3, #0
 801120a:	220a      	movs	r2, #10
 801120c:	9905      	ldr	r1, [sp, #20]
 801120e:	9803      	ldr	r0, [sp, #12]
 8011210:	f000 fce0 	bl	8011bd4 <__multadd>
 8011214:	9005      	str	r0, [sp, #20]
 8011216:	e7eb      	b.n	80111f0 <_dtoa_r+0xbb0>
 8011218:	08013276 	.word	0x08013276
 801121c:	0801327e 	.word	0x0801327e

08011220 <_free_r>:
 8011220:	b570      	push	{r4, r5, r6, lr}
 8011222:	0005      	movs	r5, r0
 8011224:	1e0c      	subs	r4, r1, #0
 8011226:	d010      	beq.n	801124a <_free_r+0x2a>
 8011228:	3c04      	subs	r4, #4
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	da00      	bge.n	8011232 <_free_r+0x12>
 8011230:	18e4      	adds	r4, r4, r3
 8011232:	0028      	movs	r0, r5
 8011234:	f000 fc56 	bl	8011ae4 <__malloc_lock>
 8011238:	4a1d      	ldr	r2, [pc, #116]	@ (80112b0 <_free_r+0x90>)
 801123a:	6813      	ldr	r3, [r2, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d105      	bne.n	801124c <_free_r+0x2c>
 8011240:	6063      	str	r3, [r4, #4]
 8011242:	6014      	str	r4, [r2, #0]
 8011244:	0028      	movs	r0, r5
 8011246:	f000 fc55 	bl	8011af4 <__malloc_unlock>
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	42a3      	cmp	r3, r4
 801124e:	d908      	bls.n	8011262 <_free_r+0x42>
 8011250:	6820      	ldr	r0, [r4, #0]
 8011252:	1821      	adds	r1, r4, r0
 8011254:	428b      	cmp	r3, r1
 8011256:	d1f3      	bne.n	8011240 <_free_r+0x20>
 8011258:	6819      	ldr	r1, [r3, #0]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	1809      	adds	r1, r1, r0
 801125e:	6021      	str	r1, [r4, #0]
 8011260:	e7ee      	b.n	8011240 <_free_r+0x20>
 8011262:	001a      	movs	r2, r3
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <_free_r+0x4e>
 801126a:	42a3      	cmp	r3, r4
 801126c:	d9f9      	bls.n	8011262 <_free_r+0x42>
 801126e:	6811      	ldr	r1, [r2, #0]
 8011270:	1850      	adds	r0, r2, r1
 8011272:	42a0      	cmp	r0, r4
 8011274:	d10b      	bne.n	801128e <_free_r+0x6e>
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	1809      	adds	r1, r1, r0
 801127a:	1850      	adds	r0, r2, r1
 801127c:	6011      	str	r1, [r2, #0]
 801127e:	4283      	cmp	r3, r0
 8011280:	d1e0      	bne.n	8011244 <_free_r+0x24>
 8011282:	6818      	ldr	r0, [r3, #0]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	1841      	adds	r1, r0, r1
 8011288:	6011      	str	r1, [r2, #0]
 801128a:	6053      	str	r3, [r2, #4]
 801128c:	e7da      	b.n	8011244 <_free_r+0x24>
 801128e:	42a0      	cmp	r0, r4
 8011290:	d902      	bls.n	8011298 <_free_r+0x78>
 8011292:	230c      	movs	r3, #12
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	e7d5      	b.n	8011244 <_free_r+0x24>
 8011298:	6820      	ldr	r0, [r4, #0]
 801129a:	1821      	adds	r1, r4, r0
 801129c:	428b      	cmp	r3, r1
 801129e:	d103      	bne.n	80112a8 <_free_r+0x88>
 80112a0:	6819      	ldr	r1, [r3, #0]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	1809      	adds	r1, r1, r0
 80112a6:	6021      	str	r1, [r4, #0]
 80112a8:	6063      	str	r3, [r4, #4]
 80112aa:	6054      	str	r4, [r2, #4]
 80112ac:	e7ca      	b.n	8011244 <_free_r+0x24>
 80112ae:	46c0      	nop			@ (mov r8, r8)
 80112b0:	200020a4 	.word	0x200020a4

080112b4 <rshift>:
 80112b4:	0002      	movs	r2, r0
 80112b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b8:	6904      	ldr	r4, [r0, #16]
 80112ba:	b085      	sub	sp, #20
 80112bc:	3214      	adds	r2, #20
 80112be:	114b      	asrs	r3, r1, #5
 80112c0:	0016      	movs	r6, r2
 80112c2:	9302      	str	r3, [sp, #8]
 80112c4:	429c      	cmp	r4, r3
 80112c6:	dd31      	ble.n	801132c <rshift+0x78>
 80112c8:	261f      	movs	r6, #31
 80112ca:	000f      	movs	r7, r1
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	00a5      	lsls	r5, r4, #2
 80112d0:	18d3      	adds	r3, r2, r3
 80112d2:	4037      	ands	r7, r6
 80112d4:	1955      	adds	r5, r2, r5
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	9701      	str	r7, [sp, #4]
 80112da:	4231      	tst	r1, r6
 80112dc:	d10d      	bne.n	80112fa <rshift+0x46>
 80112de:	0016      	movs	r6, r2
 80112e0:	0019      	movs	r1, r3
 80112e2:	428d      	cmp	r5, r1
 80112e4:	d836      	bhi.n	8011354 <rshift+0xa0>
 80112e6:	9b00      	ldr	r3, [sp, #0]
 80112e8:	2600      	movs	r6, #0
 80112ea:	3b03      	subs	r3, #3
 80112ec:	429d      	cmp	r5, r3
 80112ee:	d302      	bcc.n	80112f6 <rshift+0x42>
 80112f0:	9b02      	ldr	r3, [sp, #8]
 80112f2:	1ae4      	subs	r4, r4, r3
 80112f4:	00a6      	lsls	r6, r4, #2
 80112f6:	1996      	adds	r6, r2, r6
 80112f8:	e018      	b.n	801132c <rshift+0x78>
 80112fa:	2120      	movs	r1, #32
 80112fc:	9e01      	ldr	r6, [sp, #4]
 80112fe:	9f01      	ldr	r7, [sp, #4]
 8011300:	1b89      	subs	r1, r1, r6
 8011302:	9e00      	ldr	r6, [sp, #0]
 8011304:	9103      	str	r1, [sp, #12]
 8011306:	ce02      	ldmia	r6!, {r1}
 8011308:	4694      	mov	ip, r2
 801130a:	40f9      	lsrs	r1, r7
 801130c:	42b5      	cmp	r5, r6
 801130e:	d816      	bhi.n	801133e <rshift+0x8a>
 8011310:	9b00      	ldr	r3, [sp, #0]
 8011312:	2600      	movs	r6, #0
 8011314:	3301      	adds	r3, #1
 8011316:	429d      	cmp	r5, r3
 8011318:	d303      	bcc.n	8011322 <rshift+0x6e>
 801131a:	9b02      	ldr	r3, [sp, #8]
 801131c:	1ae4      	subs	r4, r4, r3
 801131e:	00a6      	lsls	r6, r4, #2
 8011320:	3e04      	subs	r6, #4
 8011322:	1996      	adds	r6, r2, r6
 8011324:	6031      	str	r1, [r6, #0]
 8011326:	2900      	cmp	r1, #0
 8011328:	d000      	beq.n	801132c <rshift+0x78>
 801132a:	3604      	adds	r6, #4
 801132c:	1ab1      	subs	r1, r6, r2
 801132e:	1089      	asrs	r1, r1, #2
 8011330:	6101      	str	r1, [r0, #16]
 8011332:	4296      	cmp	r6, r2
 8011334:	d101      	bne.n	801133a <rshift+0x86>
 8011336:	2300      	movs	r3, #0
 8011338:	6143      	str	r3, [r0, #20]
 801133a:	b005      	add	sp, #20
 801133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801133e:	6837      	ldr	r7, [r6, #0]
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	409f      	lsls	r7, r3
 8011344:	430f      	orrs	r7, r1
 8011346:	4661      	mov	r1, ip
 8011348:	c180      	stmia	r1!, {r7}
 801134a:	468c      	mov	ip, r1
 801134c:	9b01      	ldr	r3, [sp, #4]
 801134e:	ce02      	ldmia	r6!, {r1}
 8011350:	40d9      	lsrs	r1, r3
 8011352:	e7db      	b.n	801130c <rshift+0x58>
 8011354:	c980      	ldmia	r1!, {r7}
 8011356:	c680      	stmia	r6!, {r7}
 8011358:	e7c3      	b.n	80112e2 <rshift+0x2e>

0801135a <__hexdig_fun>:
 801135a:	0002      	movs	r2, r0
 801135c:	3a30      	subs	r2, #48	@ 0x30
 801135e:	0003      	movs	r3, r0
 8011360:	2a09      	cmp	r2, #9
 8011362:	d802      	bhi.n	801136a <__hexdig_fun+0x10>
 8011364:	3b20      	subs	r3, #32
 8011366:	b2d8      	uxtb	r0, r3
 8011368:	4770      	bx	lr
 801136a:	0002      	movs	r2, r0
 801136c:	3a61      	subs	r2, #97	@ 0x61
 801136e:	2a05      	cmp	r2, #5
 8011370:	d801      	bhi.n	8011376 <__hexdig_fun+0x1c>
 8011372:	3b47      	subs	r3, #71	@ 0x47
 8011374:	e7f7      	b.n	8011366 <__hexdig_fun+0xc>
 8011376:	001a      	movs	r2, r3
 8011378:	3a41      	subs	r2, #65	@ 0x41
 801137a:	2000      	movs	r0, #0
 801137c:	2a05      	cmp	r2, #5
 801137e:	d8f3      	bhi.n	8011368 <__hexdig_fun+0xe>
 8011380:	3b27      	subs	r3, #39	@ 0x27
 8011382:	e7f0      	b.n	8011366 <__hexdig_fun+0xc>

08011384 <__gethex>:
 8011384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011386:	b089      	sub	sp, #36	@ 0x24
 8011388:	9307      	str	r3, [sp, #28]
 801138a:	680b      	ldr	r3, [r1, #0]
 801138c:	9201      	str	r2, [sp, #4]
 801138e:	9003      	str	r0, [sp, #12]
 8011390:	9106      	str	r1, [sp, #24]
 8011392:	1c9a      	adds	r2, r3, #2
 8011394:	0011      	movs	r1, r2
 8011396:	3201      	adds	r2, #1
 8011398:	1e50      	subs	r0, r2, #1
 801139a:	7800      	ldrb	r0, [r0, #0]
 801139c:	2830      	cmp	r0, #48	@ 0x30
 801139e:	d0f9      	beq.n	8011394 <__gethex+0x10>
 80113a0:	1acb      	subs	r3, r1, r3
 80113a2:	3b02      	subs	r3, #2
 80113a4:	9305      	str	r3, [sp, #20]
 80113a6:	9100      	str	r1, [sp, #0]
 80113a8:	f7ff ffd7 	bl	801135a <__hexdig_fun>
 80113ac:	2300      	movs	r3, #0
 80113ae:	001d      	movs	r5, r3
 80113b0:	9302      	str	r3, [sp, #8]
 80113b2:	4298      	cmp	r0, r3
 80113b4:	d11e      	bne.n	80113f4 <__gethex+0x70>
 80113b6:	2201      	movs	r2, #1
 80113b8:	49a6      	ldr	r1, [pc, #664]	@ (8011654 <__gethex+0x2d0>)
 80113ba:	9800      	ldr	r0, [sp, #0]
 80113bc:	f7ff f80e 	bl	80103dc <strncmp>
 80113c0:	0007      	movs	r7, r0
 80113c2:	42a8      	cmp	r0, r5
 80113c4:	d000      	beq.n	80113c8 <__gethex+0x44>
 80113c6:	e06a      	b.n	801149e <__gethex+0x11a>
 80113c8:	9b00      	ldr	r3, [sp, #0]
 80113ca:	7858      	ldrb	r0, [r3, #1]
 80113cc:	1c5c      	adds	r4, r3, #1
 80113ce:	f7ff ffc4 	bl	801135a <__hexdig_fun>
 80113d2:	2301      	movs	r3, #1
 80113d4:	9302      	str	r3, [sp, #8]
 80113d6:	42a8      	cmp	r0, r5
 80113d8:	d02f      	beq.n	801143a <__gethex+0xb6>
 80113da:	9400      	str	r4, [sp, #0]
 80113dc:	9b00      	ldr	r3, [sp, #0]
 80113de:	7818      	ldrb	r0, [r3, #0]
 80113e0:	2830      	cmp	r0, #48	@ 0x30
 80113e2:	d009      	beq.n	80113f8 <__gethex+0x74>
 80113e4:	f7ff ffb9 	bl	801135a <__hexdig_fun>
 80113e8:	4242      	negs	r2, r0
 80113ea:	4142      	adcs	r2, r0
 80113ec:	2301      	movs	r3, #1
 80113ee:	0025      	movs	r5, r4
 80113f0:	9202      	str	r2, [sp, #8]
 80113f2:	9305      	str	r3, [sp, #20]
 80113f4:	9c00      	ldr	r4, [sp, #0]
 80113f6:	e004      	b.n	8011402 <__gethex+0x7e>
 80113f8:	9b00      	ldr	r3, [sp, #0]
 80113fa:	3301      	adds	r3, #1
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	e7ed      	b.n	80113dc <__gethex+0x58>
 8011400:	3401      	adds	r4, #1
 8011402:	7820      	ldrb	r0, [r4, #0]
 8011404:	f7ff ffa9 	bl	801135a <__hexdig_fun>
 8011408:	1e07      	subs	r7, r0, #0
 801140a:	d1f9      	bne.n	8011400 <__gethex+0x7c>
 801140c:	2201      	movs	r2, #1
 801140e:	0020      	movs	r0, r4
 8011410:	4990      	ldr	r1, [pc, #576]	@ (8011654 <__gethex+0x2d0>)
 8011412:	f7fe ffe3 	bl	80103dc <strncmp>
 8011416:	2800      	cmp	r0, #0
 8011418:	d10d      	bne.n	8011436 <__gethex+0xb2>
 801141a:	2d00      	cmp	r5, #0
 801141c:	d106      	bne.n	801142c <__gethex+0xa8>
 801141e:	3401      	adds	r4, #1
 8011420:	0025      	movs	r5, r4
 8011422:	7820      	ldrb	r0, [r4, #0]
 8011424:	f7ff ff99 	bl	801135a <__hexdig_fun>
 8011428:	2800      	cmp	r0, #0
 801142a:	d102      	bne.n	8011432 <__gethex+0xae>
 801142c:	1b2d      	subs	r5, r5, r4
 801142e:	00af      	lsls	r7, r5, #2
 8011430:	e003      	b.n	801143a <__gethex+0xb6>
 8011432:	3401      	adds	r4, #1
 8011434:	e7f5      	b.n	8011422 <__gethex+0x9e>
 8011436:	2d00      	cmp	r5, #0
 8011438:	d1f8      	bne.n	801142c <__gethex+0xa8>
 801143a:	2220      	movs	r2, #32
 801143c:	7823      	ldrb	r3, [r4, #0]
 801143e:	0026      	movs	r6, r4
 8011440:	4393      	bics	r3, r2
 8011442:	2b50      	cmp	r3, #80	@ 0x50
 8011444:	d11d      	bne.n	8011482 <__gethex+0xfe>
 8011446:	7863      	ldrb	r3, [r4, #1]
 8011448:	2b2b      	cmp	r3, #43	@ 0x2b
 801144a:	d02d      	beq.n	80114a8 <__gethex+0x124>
 801144c:	2b2d      	cmp	r3, #45	@ 0x2d
 801144e:	d02f      	beq.n	80114b0 <__gethex+0x12c>
 8011450:	2300      	movs	r3, #0
 8011452:	1c66      	adds	r6, r4, #1
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	7830      	ldrb	r0, [r6, #0]
 8011458:	f7ff ff7f 	bl	801135a <__hexdig_fun>
 801145c:	1e43      	subs	r3, r0, #1
 801145e:	b2db      	uxtb	r3, r3
 8011460:	0005      	movs	r5, r0
 8011462:	2b18      	cmp	r3, #24
 8011464:	d82a      	bhi.n	80114bc <__gethex+0x138>
 8011466:	7870      	ldrb	r0, [r6, #1]
 8011468:	f7ff ff77 	bl	801135a <__hexdig_fun>
 801146c:	1e43      	subs	r3, r0, #1
 801146e:	b2db      	uxtb	r3, r3
 8011470:	3601      	adds	r6, #1
 8011472:	3d10      	subs	r5, #16
 8011474:	2b18      	cmp	r3, #24
 8011476:	d91d      	bls.n	80114b4 <__gethex+0x130>
 8011478:	9b04      	ldr	r3, [sp, #16]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d000      	beq.n	8011480 <__gethex+0xfc>
 801147e:	426d      	negs	r5, r5
 8011480:	197f      	adds	r7, r7, r5
 8011482:	9b06      	ldr	r3, [sp, #24]
 8011484:	601e      	str	r6, [r3, #0]
 8011486:	9b02      	ldr	r3, [sp, #8]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d019      	beq.n	80114c0 <__gethex+0x13c>
 801148c:	9b05      	ldr	r3, [sp, #20]
 801148e:	2606      	movs	r6, #6
 8011490:	425a      	negs	r2, r3
 8011492:	4153      	adcs	r3, r2
 8011494:	425b      	negs	r3, r3
 8011496:	401e      	ands	r6, r3
 8011498:	0030      	movs	r0, r6
 801149a:	b009      	add	sp, #36	@ 0x24
 801149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801149e:	2301      	movs	r3, #1
 80114a0:	2700      	movs	r7, #0
 80114a2:	9c00      	ldr	r4, [sp, #0]
 80114a4:	9302      	str	r3, [sp, #8]
 80114a6:	e7c8      	b.n	801143a <__gethex+0xb6>
 80114a8:	2300      	movs	r3, #0
 80114aa:	9304      	str	r3, [sp, #16]
 80114ac:	1ca6      	adds	r6, r4, #2
 80114ae:	e7d2      	b.n	8011456 <__gethex+0xd2>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e7fa      	b.n	80114aa <__gethex+0x126>
 80114b4:	230a      	movs	r3, #10
 80114b6:	435d      	muls	r5, r3
 80114b8:	182d      	adds	r5, r5, r0
 80114ba:	e7d4      	b.n	8011466 <__gethex+0xe2>
 80114bc:	0026      	movs	r6, r4
 80114be:	e7e0      	b.n	8011482 <__gethex+0xfe>
 80114c0:	9b00      	ldr	r3, [sp, #0]
 80114c2:	9902      	ldr	r1, [sp, #8]
 80114c4:	1ae3      	subs	r3, r4, r3
 80114c6:	3b01      	subs	r3, #1
 80114c8:	2b07      	cmp	r3, #7
 80114ca:	dc0a      	bgt.n	80114e2 <__gethex+0x15e>
 80114cc:	9803      	ldr	r0, [sp, #12]
 80114ce:	f000 fb19 	bl	8011b04 <_Balloc>
 80114d2:	1e05      	subs	r5, r0, #0
 80114d4:	d108      	bne.n	80114e8 <__gethex+0x164>
 80114d6:	002a      	movs	r2, r5
 80114d8:	21e4      	movs	r1, #228	@ 0xe4
 80114da:	4b5f      	ldr	r3, [pc, #380]	@ (8011658 <__gethex+0x2d4>)
 80114dc:	485f      	ldr	r0, [pc, #380]	@ (801165c <__gethex+0x2d8>)
 80114de:	f001 fa15 	bl	801290c <__assert_func>
 80114e2:	3101      	adds	r1, #1
 80114e4:	105b      	asrs	r3, r3, #1
 80114e6:	e7ef      	b.n	80114c8 <__gethex+0x144>
 80114e8:	0003      	movs	r3, r0
 80114ea:	3314      	adds	r3, #20
 80114ec:	9302      	str	r3, [sp, #8]
 80114ee:	9305      	str	r3, [sp, #20]
 80114f0:	2300      	movs	r3, #0
 80114f2:	001e      	movs	r6, r3
 80114f4:	9304      	str	r3, [sp, #16]
 80114f6:	9b00      	ldr	r3, [sp, #0]
 80114f8:	42a3      	cmp	r3, r4
 80114fa:	d338      	bcc.n	801156e <__gethex+0x1ea>
 80114fc:	9c05      	ldr	r4, [sp, #20]
 80114fe:	9b02      	ldr	r3, [sp, #8]
 8011500:	c440      	stmia	r4!, {r6}
 8011502:	1ae4      	subs	r4, r4, r3
 8011504:	10a4      	asrs	r4, r4, #2
 8011506:	0030      	movs	r0, r6
 8011508:	612c      	str	r4, [r5, #16]
 801150a:	f000 fbf3 	bl	8011cf4 <__hi0bits>
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	0164      	lsls	r4, r4, #5
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	1a26      	subs	r6, r4, r0
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	429e      	cmp	r6, r3
 801151a:	dd52      	ble.n	80115c2 <__gethex+0x23e>
 801151c:	1af6      	subs	r6, r6, r3
 801151e:	0031      	movs	r1, r6
 8011520:	0028      	movs	r0, r5
 8011522:	f000 ff8e 	bl	8012442 <__any_on>
 8011526:	1e04      	subs	r4, r0, #0
 8011528:	d00f      	beq.n	801154a <__gethex+0x1c6>
 801152a:	2401      	movs	r4, #1
 801152c:	211f      	movs	r1, #31
 801152e:	0020      	movs	r0, r4
 8011530:	1e73      	subs	r3, r6, #1
 8011532:	4019      	ands	r1, r3
 8011534:	4088      	lsls	r0, r1
 8011536:	0001      	movs	r1, r0
 8011538:	115a      	asrs	r2, r3, #5
 801153a:	9802      	ldr	r0, [sp, #8]
 801153c:	0092      	lsls	r2, r2, #2
 801153e:	5812      	ldr	r2, [r2, r0]
 8011540:	420a      	tst	r2, r1
 8011542:	d002      	beq.n	801154a <__gethex+0x1c6>
 8011544:	42a3      	cmp	r3, r4
 8011546:	dc34      	bgt.n	80115b2 <__gethex+0x22e>
 8011548:	2402      	movs	r4, #2
 801154a:	0031      	movs	r1, r6
 801154c:	0028      	movs	r0, r5
 801154e:	f7ff feb1 	bl	80112b4 <rshift>
 8011552:	19bf      	adds	r7, r7, r6
 8011554:	9b01      	ldr	r3, [sp, #4]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	42bb      	cmp	r3, r7
 801155a:	da42      	bge.n	80115e2 <__gethex+0x25e>
 801155c:	0029      	movs	r1, r5
 801155e:	9803      	ldr	r0, [sp, #12]
 8011560:	f000 fb14 	bl	8011b8c <_Bfree>
 8011564:	2300      	movs	r3, #0
 8011566:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011568:	26a3      	movs	r6, #163	@ 0xa3
 801156a:	6013      	str	r3, [r2, #0]
 801156c:	e794      	b.n	8011498 <__gethex+0x114>
 801156e:	3c01      	subs	r4, #1
 8011570:	7823      	ldrb	r3, [r4, #0]
 8011572:	2b2e      	cmp	r3, #46	@ 0x2e
 8011574:	d012      	beq.n	801159c <__gethex+0x218>
 8011576:	9b04      	ldr	r3, [sp, #16]
 8011578:	2b20      	cmp	r3, #32
 801157a:	d104      	bne.n	8011586 <__gethex+0x202>
 801157c:	9b05      	ldr	r3, [sp, #20]
 801157e:	c340      	stmia	r3!, {r6}
 8011580:	2600      	movs	r6, #0
 8011582:	9305      	str	r3, [sp, #20]
 8011584:	9604      	str	r6, [sp, #16]
 8011586:	7820      	ldrb	r0, [r4, #0]
 8011588:	f7ff fee7 	bl	801135a <__hexdig_fun>
 801158c:	230f      	movs	r3, #15
 801158e:	4018      	ands	r0, r3
 8011590:	9b04      	ldr	r3, [sp, #16]
 8011592:	4098      	lsls	r0, r3
 8011594:	3304      	adds	r3, #4
 8011596:	4306      	orrs	r6, r0
 8011598:	9304      	str	r3, [sp, #16]
 801159a:	e7ac      	b.n	80114f6 <__gethex+0x172>
 801159c:	9b00      	ldr	r3, [sp, #0]
 801159e:	42a3      	cmp	r3, r4
 80115a0:	d8e9      	bhi.n	8011576 <__gethex+0x1f2>
 80115a2:	2201      	movs	r2, #1
 80115a4:	0020      	movs	r0, r4
 80115a6:	492b      	ldr	r1, [pc, #172]	@ (8011654 <__gethex+0x2d0>)
 80115a8:	f7fe ff18 	bl	80103dc <strncmp>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d1e2      	bne.n	8011576 <__gethex+0x1f2>
 80115b0:	e7a1      	b.n	80114f6 <__gethex+0x172>
 80115b2:	0028      	movs	r0, r5
 80115b4:	1eb1      	subs	r1, r6, #2
 80115b6:	f000 ff44 	bl	8012442 <__any_on>
 80115ba:	2800      	cmp	r0, #0
 80115bc:	d0c4      	beq.n	8011548 <__gethex+0x1c4>
 80115be:	2403      	movs	r4, #3
 80115c0:	e7c3      	b.n	801154a <__gethex+0x1c6>
 80115c2:	9b00      	ldr	r3, [sp, #0]
 80115c4:	2400      	movs	r4, #0
 80115c6:	429e      	cmp	r6, r3
 80115c8:	dac4      	bge.n	8011554 <__gethex+0x1d0>
 80115ca:	1b9e      	subs	r6, r3, r6
 80115cc:	0029      	movs	r1, r5
 80115ce:	0032      	movs	r2, r6
 80115d0:	9803      	ldr	r0, [sp, #12]
 80115d2:	f000 fcfd 	bl	8011fd0 <__lshift>
 80115d6:	0003      	movs	r3, r0
 80115d8:	3314      	adds	r3, #20
 80115da:	0005      	movs	r5, r0
 80115dc:	1bbf      	subs	r7, r7, r6
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	e7b8      	b.n	8011554 <__gethex+0x1d0>
 80115e2:	9b01      	ldr	r3, [sp, #4]
 80115e4:	685e      	ldr	r6, [r3, #4]
 80115e6:	42be      	cmp	r6, r7
 80115e8:	dd6f      	ble.n	80116ca <__gethex+0x346>
 80115ea:	9b00      	ldr	r3, [sp, #0]
 80115ec:	1bf6      	subs	r6, r6, r7
 80115ee:	42b3      	cmp	r3, r6
 80115f0:	dc36      	bgt.n	8011660 <__gethex+0x2dc>
 80115f2:	9b01      	ldr	r3, [sp, #4]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	2b02      	cmp	r3, #2
 80115f8:	d024      	beq.n	8011644 <__gethex+0x2c0>
 80115fa:	2b03      	cmp	r3, #3
 80115fc:	d026      	beq.n	801164c <__gethex+0x2c8>
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d117      	bne.n	8011632 <__gethex+0x2ae>
 8011602:	9b00      	ldr	r3, [sp, #0]
 8011604:	42b3      	cmp	r3, r6
 8011606:	d114      	bne.n	8011632 <__gethex+0x2ae>
 8011608:	2b01      	cmp	r3, #1
 801160a:	d10b      	bne.n	8011624 <__gethex+0x2a0>
 801160c:	9b01      	ldr	r3, [sp, #4]
 801160e:	9a07      	ldr	r2, [sp, #28]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	2662      	movs	r6, #98	@ 0x62
 8011614:	6013      	str	r3, [r2, #0]
 8011616:	2301      	movs	r3, #1
 8011618:	9a02      	ldr	r2, [sp, #8]
 801161a:	612b      	str	r3, [r5, #16]
 801161c:	6013      	str	r3, [r2, #0]
 801161e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011620:	601d      	str	r5, [r3, #0]
 8011622:	e739      	b.n	8011498 <__gethex+0x114>
 8011624:	9900      	ldr	r1, [sp, #0]
 8011626:	0028      	movs	r0, r5
 8011628:	3901      	subs	r1, #1
 801162a:	f000 ff0a 	bl	8012442 <__any_on>
 801162e:	2800      	cmp	r0, #0
 8011630:	d1ec      	bne.n	801160c <__gethex+0x288>
 8011632:	0029      	movs	r1, r5
 8011634:	9803      	ldr	r0, [sp, #12]
 8011636:	f000 faa9 	bl	8011b8c <_Bfree>
 801163a:	2300      	movs	r3, #0
 801163c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801163e:	2650      	movs	r6, #80	@ 0x50
 8011640:	6013      	str	r3, [r2, #0]
 8011642:	e729      	b.n	8011498 <__gethex+0x114>
 8011644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011646:	2b00      	cmp	r3, #0
 8011648:	d1f3      	bne.n	8011632 <__gethex+0x2ae>
 801164a:	e7df      	b.n	801160c <__gethex+0x288>
 801164c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1dc      	bne.n	801160c <__gethex+0x288>
 8011652:	e7ee      	b.n	8011632 <__gethex+0x2ae>
 8011654:	08013238 	.word	0x08013238
 8011658:	080132f2 	.word	0x080132f2
 801165c:	08013303 	.word	0x08013303
 8011660:	1e77      	subs	r7, r6, #1
 8011662:	2c00      	cmp	r4, #0
 8011664:	d12f      	bne.n	80116c6 <__gethex+0x342>
 8011666:	2f00      	cmp	r7, #0
 8011668:	d004      	beq.n	8011674 <__gethex+0x2f0>
 801166a:	0039      	movs	r1, r7
 801166c:	0028      	movs	r0, r5
 801166e:	f000 fee8 	bl	8012442 <__any_on>
 8011672:	0004      	movs	r4, r0
 8011674:	231f      	movs	r3, #31
 8011676:	117a      	asrs	r2, r7, #5
 8011678:	401f      	ands	r7, r3
 801167a:	3b1e      	subs	r3, #30
 801167c:	40bb      	lsls	r3, r7
 801167e:	9902      	ldr	r1, [sp, #8]
 8011680:	0092      	lsls	r2, r2, #2
 8011682:	5852      	ldr	r2, [r2, r1]
 8011684:	421a      	tst	r2, r3
 8011686:	d001      	beq.n	801168c <__gethex+0x308>
 8011688:	2302      	movs	r3, #2
 801168a:	431c      	orrs	r4, r3
 801168c:	9b00      	ldr	r3, [sp, #0]
 801168e:	0031      	movs	r1, r6
 8011690:	1b9b      	subs	r3, r3, r6
 8011692:	2602      	movs	r6, #2
 8011694:	0028      	movs	r0, r5
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	f7ff fe0c 	bl	80112b4 <rshift>
 801169c:	9b01      	ldr	r3, [sp, #4]
 801169e:	685f      	ldr	r7, [r3, #4]
 80116a0:	2c00      	cmp	r4, #0
 80116a2:	d03f      	beq.n	8011724 <__gethex+0x3a0>
 80116a4:	9b01      	ldr	r3, [sp, #4]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	2b02      	cmp	r3, #2
 80116aa:	d010      	beq.n	80116ce <__gethex+0x34a>
 80116ac:	2b03      	cmp	r3, #3
 80116ae:	d012      	beq.n	80116d6 <__gethex+0x352>
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d106      	bne.n	80116c2 <__gethex+0x33e>
 80116b4:	07a2      	lsls	r2, r4, #30
 80116b6:	d504      	bpl.n	80116c2 <__gethex+0x33e>
 80116b8:	9a02      	ldr	r2, [sp, #8]
 80116ba:	6812      	ldr	r2, [r2, #0]
 80116bc:	4314      	orrs	r4, r2
 80116be:	421c      	tst	r4, r3
 80116c0:	d10c      	bne.n	80116dc <__gethex+0x358>
 80116c2:	2310      	movs	r3, #16
 80116c4:	e02d      	b.n	8011722 <__gethex+0x39e>
 80116c6:	2401      	movs	r4, #1
 80116c8:	e7d4      	b.n	8011674 <__gethex+0x2f0>
 80116ca:	2601      	movs	r6, #1
 80116cc:	e7e8      	b.n	80116a0 <__gethex+0x31c>
 80116ce:	2301      	movs	r3, #1
 80116d0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80116d2:	1a9b      	subs	r3, r3, r2
 80116d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d0f2      	beq.n	80116c2 <__gethex+0x33e>
 80116dc:	692b      	ldr	r3, [r5, #16]
 80116de:	2000      	movs	r0, #0
 80116e0:	9302      	str	r3, [sp, #8]
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	9304      	str	r3, [sp, #16]
 80116e6:	002b      	movs	r3, r5
 80116e8:	9a04      	ldr	r2, [sp, #16]
 80116ea:	3314      	adds	r3, #20
 80116ec:	1899      	adds	r1, r3, r2
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	1c54      	adds	r4, r2, #1
 80116f2:	d01c      	beq.n	801172e <__gethex+0x3aa>
 80116f4:	3201      	adds	r2, #1
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	002b      	movs	r3, r5
 80116fa:	3314      	adds	r3, #20
 80116fc:	2e02      	cmp	r6, #2
 80116fe:	d13f      	bne.n	8011780 <__gethex+0x3fc>
 8011700:	9a01      	ldr	r2, [sp, #4]
 8011702:	9900      	ldr	r1, [sp, #0]
 8011704:	6812      	ldr	r2, [r2, #0]
 8011706:	3a01      	subs	r2, #1
 8011708:	428a      	cmp	r2, r1
 801170a:	d109      	bne.n	8011720 <__gethex+0x39c>
 801170c:	000a      	movs	r2, r1
 801170e:	201f      	movs	r0, #31
 8011710:	4010      	ands	r0, r2
 8011712:	2201      	movs	r2, #1
 8011714:	4082      	lsls	r2, r0
 8011716:	1149      	asrs	r1, r1, #5
 8011718:	0089      	lsls	r1, r1, #2
 801171a:	58cb      	ldr	r3, [r1, r3]
 801171c:	4213      	tst	r3, r2
 801171e:	d13d      	bne.n	801179c <__gethex+0x418>
 8011720:	2320      	movs	r3, #32
 8011722:	431e      	orrs	r6, r3
 8011724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011726:	601d      	str	r5, [r3, #0]
 8011728:	9b07      	ldr	r3, [sp, #28]
 801172a:	601f      	str	r7, [r3, #0]
 801172c:	e6b4      	b.n	8011498 <__gethex+0x114>
 801172e:	c301      	stmia	r3!, {r0}
 8011730:	4299      	cmp	r1, r3
 8011732:	d8dc      	bhi.n	80116ee <__gethex+0x36a>
 8011734:	68ab      	ldr	r3, [r5, #8]
 8011736:	9a02      	ldr	r2, [sp, #8]
 8011738:	429a      	cmp	r2, r3
 801173a:	db18      	blt.n	801176e <__gethex+0x3ea>
 801173c:	6869      	ldr	r1, [r5, #4]
 801173e:	9803      	ldr	r0, [sp, #12]
 8011740:	3101      	adds	r1, #1
 8011742:	f000 f9df 	bl	8011b04 <_Balloc>
 8011746:	1e04      	subs	r4, r0, #0
 8011748:	d104      	bne.n	8011754 <__gethex+0x3d0>
 801174a:	0022      	movs	r2, r4
 801174c:	2184      	movs	r1, #132	@ 0x84
 801174e:	4b1d      	ldr	r3, [pc, #116]	@ (80117c4 <__gethex+0x440>)
 8011750:	481d      	ldr	r0, [pc, #116]	@ (80117c8 <__gethex+0x444>)
 8011752:	e6c4      	b.n	80114de <__gethex+0x15a>
 8011754:	0029      	movs	r1, r5
 8011756:	692a      	ldr	r2, [r5, #16]
 8011758:	310c      	adds	r1, #12
 801175a:	3202      	adds	r2, #2
 801175c:	0092      	lsls	r2, r2, #2
 801175e:	300c      	adds	r0, #12
 8011760:	f7fe fed8 	bl	8010514 <memcpy>
 8011764:	0029      	movs	r1, r5
 8011766:	9803      	ldr	r0, [sp, #12]
 8011768:	f000 fa10 	bl	8011b8c <_Bfree>
 801176c:	0025      	movs	r5, r4
 801176e:	692b      	ldr	r3, [r5, #16]
 8011770:	1c5a      	adds	r2, r3, #1
 8011772:	612a      	str	r2, [r5, #16]
 8011774:	2201      	movs	r2, #1
 8011776:	3304      	adds	r3, #4
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	18eb      	adds	r3, r5, r3
 801177c:	605a      	str	r2, [r3, #4]
 801177e:	e7bb      	b.n	80116f8 <__gethex+0x374>
 8011780:	692a      	ldr	r2, [r5, #16]
 8011782:	9902      	ldr	r1, [sp, #8]
 8011784:	428a      	cmp	r2, r1
 8011786:	dd0b      	ble.n	80117a0 <__gethex+0x41c>
 8011788:	2101      	movs	r1, #1
 801178a:	0028      	movs	r0, r5
 801178c:	f7ff fd92 	bl	80112b4 <rshift>
 8011790:	9b01      	ldr	r3, [sp, #4]
 8011792:	3701      	adds	r7, #1
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	42bb      	cmp	r3, r7
 8011798:	da00      	bge.n	801179c <__gethex+0x418>
 801179a:	e6df      	b.n	801155c <__gethex+0x1d8>
 801179c:	2601      	movs	r6, #1
 801179e:	e7bf      	b.n	8011720 <__gethex+0x39c>
 80117a0:	221f      	movs	r2, #31
 80117a2:	9c00      	ldr	r4, [sp, #0]
 80117a4:	9900      	ldr	r1, [sp, #0]
 80117a6:	4014      	ands	r4, r2
 80117a8:	4211      	tst	r1, r2
 80117aa:	d0f7      	beq.n	801179c <__gethex+0x418>
 80117ac:	9a04      	ldr	r2, [sp, #16]
 80117ae:	189b      	adds	r3, r3, r2
 80117b0:	3b04      	subs	r3, #4
 80117b2:	6818      	ldr	r0, [r3, #0]
 80117b4:	f000 fa9e 	bl	8011cf4 <__hi0bits>
 80117b8:	2320      	movs	r3, #32
 80117ba:	1b1b      	subs	r3, r3, r4
 80117bc:	4298      	cmp	r0, r3
 80117be:	dbe3      	blt.n	8011788 <__gethex+0x404>
 80117c0:	e7ec      	b.n	801179c <__gethex+0x418>
 80117c2:	46c0      	nop			@ (mov r8, r8)
 80117c4:	080132f2 	.word	0x080132f2
 80117c8:	08013303 	.word	0x08013303

080117cc <L_shift>:
 80117cc:	2308      	movs	r3, #8
 80117ce:	b570      	push	{r4, r5, r6, lr}
 80117d0:	2520      	movs	r5, #32
 80117d2:	1a9a      	subs	r2, r3, r2
 80117d4:	0092      	lsls	r2, r2, #2
 80117d6:	1aad      	subs	r5, r5, r2
 80117d8:	6843      	ldr	r3, [r0, #4]
 80117da:	6804      	ldr	r4, [r0, #0]
 80117dc:	001e      	movs	r6, r3
 80117de:	40ae      	lsls	r6, r5
 80117e0:	40d3      	lsrs	r3, r2
 80117e2:	4334      	orrs	r4, r6
 80117e4:	6004      	str	r4, [r0, #0]
 80117e6:	6043      	str	r3, [r0, #4]
 80117e8:	3004      	adds	r0, #4
 80117ea:	4288      	cmp	r0, r1
 80117ec:	d3f4      	bcc.n	80117d8 <L_shift+0xc>
 80117ee:	bd70      	pop	{r4, r5, r6, pc}

080117f0 <__match>:
 80117f0:	b530      	push	{r4, r5, lr}
 80117f2:	6803      	ldr	r3, [r0, #0]
 80117f4:	780c      	ldrb	r4, [r1, #0]
 80117f6:	3301      	adds	r3, #1
 80117f8:	2c00      	cmp	r4, #0
 80117fa:	d102      	bne.n	8011802 <__match+0x12>
 80117fc:	6003      	str	r3, [r0, #0]
 80117fe:	2001      	movs	r0, #1
 8011800:	bd30      	pop	{r4, r5, pc}
 8011802:	781a      	ldrb	r2, [r3, #0]
 8011804:	0015      	movs	r5, r2
 8011806:	3d41      	subs	r5, #65	@ 0x41
 8011808:	2d19      	cmp	r5, #25
 801180a:	d800      	bhi.n	801180e <__match+0x1e>
 801180c:	3220      	adds	r2, #32
 801180e:	3101      	adds	r1, #1
 8011810:	42a2      	cmp	r2, r4
 8011812:	d0ef      	beq.n	80117f4 <__match+0x4>
 8011814:	2000      	movs	r0, #0
 8011816:	e7f3      	b.n	8011800 <__match+0x10>

08011818 <__hexnan>:
 8011818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801181a:	680b      	ldr	r3, [r1, #0]
 801181c:	b08b      	sub	sp, #44	@ 0x2c
 801181e:	9201      	str	r2, [sp, #4]
 8011820:	9901      	ldr	r1, [sp, #4]
 8011822:	115a      	asrs	r2, r3, #5
 8011824:	0092      	lsls	r2, r2, #2
 8011826:	188a      	adds	r2, r1, r2
 8011828:	9202      	str	r2, [sp, #8]
 801182a:	0019      	movs	r1, r3
 801182c:	221f      	movs	r2, #31
 801182e:	4011      	ands	r1, r2
 8011830:	9008      	str	r0, [sp, #32]
 8011832:	9106      	str	r1, [sp, #24]
 8011834:	4213      	tst	r3, r2
 8011836:	d002      	beq.n	801183e <__hexnan+0x26>
 8011838:	9b02      	ldr	r3, [sp, #8]
 801183a:	3304      	adds	r3, #4
 801183c:	9302      	str	r3, [sp, #8]
 801183e:	9b02      	ldr	r3, [sp, #8]
 8011840:	2500      	movs	r5, #0
 8011842:	1f1f      	subs	r7, r3, #4
 8011844:	003e      	movs	r6, r7
 8011846:	003c      	movs	r4, r7
 8011848:	9b08      	ldr	r3, [sp, #32]
 801184a:	603d      	str	r5, [r7, #0]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	9507      	str	r5, [sp, #28]
 8011850:	9305      	str	r3, [sp, #20]
 8011852:	9503      	str	r5, [sp, #12]
 8011854:	9b05      	ldr	r3, [sp, #20]
 8011856:	3301      	adds	r3, #1
 8011858:	9309      	str	r3, [sp, #36]	@ 0x24
 801185a:	9b05      	ldr	r3, [sp, #20]
 801185c:	785b      	ldrb	r3, [r3, #1]
 801185e:	9304      	str	r3, [sp, #16]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d028      	beq.n	80118b6 <__hexnan+0x9e>
 8011864:	9804      	ldr	r0, [sp, #16]
 8011866:	f7ff fd78 	bl	801135a <__hexdig_fun>
 801186a:	2800      	cmp	r0, #0
 801186c:	d155      	bne.n	801191a <__hexnan+0x102>
 801186e:	9b04      	ldr	r3, [sp, #16]
 8011870:	2b20      	cmp	r3, #32
 8011872:	d819      	bhi.n	80118a8 <__hexnan+0x90>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	9a07      	ldr	r2, [sp, #28]
 8011878:	4293      	cmp	r3, r2
 801187a:	dd12      	ble.n	80118a2 <__hexnan+0x8a>
 801187c:	42b4      	cmp	r4, r6
 801187e:	d206      	bcs.n	801188e <__hexnan+0x76>
 8011880:	2d07      	cmp	r5, #7
 8011882:	dc04      	bgt.n	801188e <__hexnan+0x76>
 8011884:	002a      	movs	r2, r5
 8011886:	0031      	movs	r1, r6
 8011888:	0020      	movs	r0, r4
 801188a:	f7ff ff9f 	bl	80117cc <L_shift>
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	2508      	movs	r5, #8
 8011892:	429c      	cmp	r4, r3
 8011894:	d905      	bls.n	80118a2 <__hexnan+0x8a>
 8011896:	1f26      	subs	r6, r4, #4
 8011898:	2500      	movs	r5, #0
 801189a:	0034      	movs	r4, r6
 801189c:	9b03      	ldr	r3, [sp, #12]
 801189e:	6035      	str	r5, [r6, #0]
 80118a0:	9307      	str	r3, [sp, #28]
 80118a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118a4:	9305      	str	r3, [sp, #20]
 80118a6:	e7d5      	b.n	8011854 <__hexnan+0x3c>
 80118a8:	9b04      	ldr	r3, [sp, #16]
 80118aa:	2b29      	cmp	r3, #41	@ 0x29
 80118ac:	d15a      	bne.n	8011964 <__hexnan+0x14c>
 80118ae:	9b05      	ldr	r3, [sp, #20]
 80118b0:	9a08      	ldr	r2, [sp, #32]
 80118b2:	3302      	adds	r3, #2
 80118b4:	6013      	str	r3, [r2, #0]
 80118b6:	9b03      	ldr	r3, [sp, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d053      	beq.n	8011964 <__hexnan+0x14c>
 80118bc:	42b4      	cmp	r4, r6
 80118be:	d206      	bcs.n	80118ce <__hexnan+0xb6>
 80118c0:	2d07      	cmp	r5, #7
 80118c2:	dc04      	bgt.n	80118ce <__hexnan+0xb6>
 80118c4:	002a      	movs	r2, r5
 80118c6:	0031      	movs	r1, r6
 80118c8:	0020      	movs	r0, r4
 80118ca:	f7ff ff7f 	bl	80117cc <L_shift>
 80118ce:	9b01      	ldr	r3, [sp, #4]
 80118d0:	429c      	cmp	r4, r3
 80118d2:	d936      	bls.n	8011942 <__hexnan+0x12a>
 80118d4:	001a      	movs	r2, r3
 80118d6:	0023      	movs	r3, r4
 80118d8:	cb02      	ldmia	r3!, {r1}
 80118da:	c202      	stmia	r2!, {r1}
 80118dc:	429f      	cmp	r7, r3
 80118de:	d2fb      	bcs.n	80118d8 <__hexnan+0xc0>
 80118e0:	9b02      	ldr	r3, [sp, #8]
 80118e2:	1c62      	adds	r2, r4, #1
 80118e4:	1ed9      	subs	r1, r3, #3
 80118e6:	2304      	movs	r3, #4
 80118e8:	4291      	cmp	r1, r2
 80118ea:	d305      	bcc.n	80118f8 <__hexnan+0xe0>
 80118ec:	9b02      	ldr	r3, [sp, #8]
 80118ee:	3b04      	subs	r3, #4
 80118f0:	1b1b      	subs	r3, r3, r4
 80118f2:	089b      	lsrs	r3, r3, #2
 80118f4:	3301      	adds	r3, #1
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	9a01      	ldr	r2, [sp, #4]
 80118fa:	18d3      	adds	r3, r2, r3
 80118fc:	2200      	movs	r2, #0
 80118fe:	c304      	stmia	r3!, {r2}
 8011900:	429f      	cmp	r7, r3
 8011902:	d2fc      	bcs.n	80118fe <__hexnan+0xe6>
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d104      	bne.n	8011914 <__hexnan+0xfc>
 801190a:	9b01      	ldr	r3, [sp, #4]
 801190c:	429f      	cmp	r7, r3
 801190e:	d127      	bne.n	8011960 <__hexnan+0x148>
 8011910:	2301      	movs	r3, #1
 8011912:	603b      	str	r3, [r7, #0]
 8011914:	2005      	movs	r0, #5
 8011916:	b00b      	add	sp, #44	@ 0x2c
 8011918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801191a:	9b03      	ldr	r3, [sp, #12]
 801191c:	3501      	adds	r5, #1
 801191e:	3301      	adds	r3, #1
 8011920:	9303      	str	r3, [sp, #12]
 8011922:	2d08      	cmp	r5, #8
 8011924:	dd06      	ble.n	8011934 <__hexnan+0x11c>
 8011926:	9b01      	ldr	r3, [sp, #4]
 8011928:	429c      	cmp	r4, r3
 801192a:	d9ba      	bls.n	80118a2 <__hexnan+0x8a>
 801192c:	2300      	movs	r3, #0
 801192e:	2501      	movs	r5, #1
 8011930:	3c04      	subs	r4, #4
 8011932:	6023      	str	r3, [r4, #0]
 8011934:	220f      	movs	r2, #15
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	4010      	ands	r0, r2
 801193a:	011b      	lsls	r3, r3, #4
 801193c:	4303      	orrs	r3, r0
 801193e:	6023      	str	r3, [r4, #0]
 8011940:	e7af      	b.n	80118a2 <__hexnan+0x8a>
 8011942:	9b06      	ldr	r3, [sp, #24]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d0dd      	beq.n	8011904 <__hexnan+0xec>
 8011948:	2320      	movs	r3, #32
 801194a:	9a06      	ldr	r2, [sp, #24]
 801194c:	9902      	ldr	r1, [sp, #8]
 801194e:	1a9b      	subs	r3, r3, r2
 8011950:	2201      	movs	r2, #1
 8011952:	4252      	negs	r2, r2
 8011954:	40da      	lsrs	r2, r3
 8011956:	3904      	subs	r1, #4
 8011958:	680b      	ldr	r3, [r1, #0]
 801195a:	4013      	ands	r3, r2
 801195c:	600b      	str	r3, [r1, #0]
 801195e:	e7d1      	b.n	8011904 <__hexnan+0xec>
 8011960:	3f04      	subs	r7, #4
 8011962:	e7cf      	b.n	8011904 <__hexnan+0xec>
 8011964:	2004      	movs	r0, #4
 8011966:	e7d6      	b.n	8011916 <__hexnan+0xfe>

08011968 <malloc>:
 8011968:	b510      	push	{r4, lr}
 801196a:	4b03      	ldr	r3, [pc, #12]	@ (8011978 <malloc+0x10>)
 801196c:	0001      	movs	r1, r0
 801196e:	6818      	ldr	r0, [r3, #0]
 8011970:	f000 f826 	bl	80119c0 <_malloc_r>
 8011974:	bd10      	pop	{r4, pc}
 8011976:	46c0      	nop			@ (mov r8, r8)
 8011978:	20000278 	.word	0x20000278

0801197c <sbrk_aligned>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	4e0f      	ldr	r6, [pc, #60]	@ (80119bc <sbrk_aligned+0x40>)
 8011980:	000d      	movs	r5, r1
 8011982:	6831      	ldr	r1, [r6, #0]
 8011984:	0004      	movs	r4, r0
 8011986:	2900      	cmp	r1, #0
 8011988:	d102      	bne.n	8011990 <sbrk_aligned+0x14>
 801198a:	f000 ffad 	bl	80128e8 <_sbrk_r>
 801198e:	6030      	str	r0, [r6, #0]
 8011990:	0029      	movs	r1, r5
 8011992:	0020      	movs	r0, r4
 8011994:	f000 ffa8 	bl	80128e8 <_sbrk_r>
 8011998:	1c43      	adds	r3, r0, #1
 801199a:	d103      	bne.n	80119a4 <sbrk_aligned+0x28>
 801199c:	2501      	movs	r5, #1
 801199e:	426d      	negs	r5, r5
 80119a0:	0028      	movs	r0, r5
 80119a2:	bd70      	pop	{r4, r5, r6, pc}
 80119a4:	2303      	movs	r3, #3
 80119a6:	1cc5      	adds	r5, r0, #3
 80119a8:	439d      	bics	r5, r3
 80119aa:	42a8      	cmp	r0, r5
 80119ac:	d0f8      	beq.n	80119a0 <sbrk_aligned+0x24>
 80119ae:	1a29      	subs	r1, r5, r0
 80119b0:	0020      	movs	r0, r4
 80119b2:	f000 ff99 	bl	80128e8 <_sbrk_r>
 80119b6:	3001      	adds	r0, #1
 80119b8:	d1f2      	bne.n	80119a0 <sbrk_aligned+0x24>
 80119ba:	e7ef      	b.n	801199c <sbrk_aligned+0x20>
 80119bc:	200020a0 	.word	0x200020a0

080119c0 <_malloc_r>:
 80119c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119c2:	2203      	movs	r2, #3
 80119c4:	1ccb      	adds	r3, r1, #3
 80119c6:	4393      	bics	r3, r2
 80119c8:	3308      	adds	r3, #8
 80119ca:	0005      	movs	r5, r0
 80119cc:	001f      	movs	r7, r3
 80119ce:	2b0c      	cmp	r3, #12
 80119d0:	d234      	bcs.n	8011a3c <_malloc_r+0x7c>
 80119d2:	270c      	movs	r7, #12
 80119d4:	42b9      	cmp	r1, r7
 80119d6:	d833      	bhi.n	8011a40 <_malloc_r+0x80>
 80119d8:	0028      	movs	r0, r5
 80119da:	f000 f883 	bl	8011ae4 <__malloc_lock>
 80119de:	4e37      	ldr	r6, [pc, #220]	@ (8011abc <_malloc_r+0xfc>)
 80119e0:	6833      	ldr	r3, [r6, #0]
 80119e2:	001c      	movs	r4, r3
 80119e4:	2c00      	cmp	r4, #0
 80119e6:	d12f      	bne.n	8011a48 <_malloc_r+0x88>
 80119e8:	0039      	movs	r1, r7
 80119ea:	0028      	movs	r0, r5
 80119ec:	f7ff ffc6 	bl	801197c <sbrk_aligned>
 80119f0:	0004      	movs	r4, r0
 80119f2:	1c43      	adds	r3, r0, #1
 80119f4:	d15f      	bne.n	8011ab6 <_malloc_r+0xf6>
 80119f6:	6834      	ldr	r4, [r6, #0]
 80119f8:	9400      	str	r4, [sp, #0]
 80119fa:	9b00      	ldr	r3, [sp, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d14a      	bne.n	8011a96 <_malloc_r+0xd6>
 8011a00:	2c00      	cmp	r4, #0
 8011a02:	d052      	beq.n	8011aaa <_malloc_r+0xea>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	0028      	movs	r0, r5
 8011a08:	18e3      	adds	r3, r4, r3
 8011a0a:	9900      	ldr	r1, [sp, #0]
 8011a0c:	9301      	str	r3, [sp, #4]
 8011a0e:	f000 ff6b 	bl	80128e8 <_sbrk_r>
 8011a12:	9b01      	ldr	r3, [sp, #4]
 8011a14:	4283      	cmp	r3, r0
 8011a16:	d148      	bne.n	8011aaa <_malloc_r+0xea>
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	0028      	movs	r0, r5
 8011a1c:	1aff      	subs	r7, r7, r3
 8011a1e:	0039      	movs	r1, r7
 8011a20:	f7ff ffac 	bl	801197c <sbrk_aligned>
 8011a24:	3001      	adds	r0, #1
 8011a26:	d040      	beq.n	8011aaa <_malloc_r+0xea>
 8011a28:	6823      	ldr	r3, [r4, #0]
 8011a2a:	19db      	adds	r3, r3, r7
 8011a2c:	6023      	str	r3, [r4, #0]
 8011a2e:	6833      	ldr	r3, [r6, #0]
 8011a30:	685a      	ldr	r2, [r3, #4]
 8011a32:	2a00      	cmp	r2, #0
 8011a34:	d133      	bne.n	8011a9e <_malloc_r+0xde>
 8011a36:	9b00      	ldr	r3, [sp, #0]
 8011a38:	6033      	str	r3, [r6, #0]
 8011a3a:	e019      	b.n	8011a70 <_malloc_r+0xb0>
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	dac9      	bge.n	80119d4 <_malloc_r+0x14>
 8011a40:	230c      	movs	r3, #12
 8011a42:	602b      	str	r3, [r5, #0]
 8011a44:	2000      	movs	r0, #0
 8011a46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011a48:	6821      	ldr	r1, [r4, #0]
 8011a4a:	1bc9      	subs	r1, r1, r7
 8011a4c:	d420      	bmi.n	8011a90 <_malloc_r+0xd0>
 8011a4e:	290b      	cmp	r1, #11
 8011a50:	d90a      	bls.n	8011a68 <_malloc_r+0xa8>
 8011a52:	19e2      	adds	r2, r4, r7
 8011a54:	6027      	str	r7, [r4, #0]
 8011a56:	42a3      	cmp	r3, r4
 8011a58:	d104      	bne.n	8011a64 <_malloc_r+0xa4>
 8011a5a:	6032      	str	r2, [r6, #0]
 8011a5c:	6863      	ldr	r3, [r4, #4]
 8011a5e:	6011      	str	r1, [r2, #0]
 8011a60:	6053      	str	r3, [r2, #4]
 8011a62:	e005      	b.n	8011a70 <_malloc_r+0xb0>
 8011a64:	605a      	str	r2, [r3, #4]
 8011a66:	e7f9      	b.n	8011a5c <_malloc_r+0x9c>
 8011a68:	6862      	ldr	r2, [r4, #4]
 8011a6a:	42a3      	cmp	r3, r4
 8011a6c:	d10e      	bne.n	8011a8c <_malloc_r+0xcc>
 8011a6e:	6032      	str	r2, [r6, #0]
 8011a70:	0028      	movs	r0, r5
 8011a72:	f000 f83f 	bl	8011af4 <__malloc_unlock>
 8011a76:	0020      	movs	r0, r4
 8011a78:	2207      	movs	r2, #7
 8011a7a:	300b      	adds	r0, #11
 8011a7c:	1d23      	adds	r3, r4, #4
 8011a7e:	4390      	bics	r0, r2
 8011a80:	1ac2      	subs	r2, r0, r3
 8011a82:	4298      	cmp	r0, r3
 8011a84:	d0df      	beq.n	8011a46 <_malloc_r+0x86>
 8011a86:	1a1b      	subs	r3, r3, r0
 8011a88:	50a3      	str	r3, [r4, r2]
 8011a8a:	e7dc      	b.n	8011a46 <_malloc_r+0x86>
 8011a8c:	605a      	str	r2, [r3, #4]
 8011a8e:	e7ef      	b.n	8011a70 <_malloc_r+0xb0>
 8011a90:	0023      	movs	r3, r4
 8011a92:	6864      	ldr	r4, [r4, #4]
 8011a94:	e7a6      	b.n	80119e4 <_malloc_r+0x24>
 8011a96:	9c00      	ldr	r4, [sp, #0]
 8011a98:	6863      	ldr	r3, [r4, #4]
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	e7ad      	b.n	80119fa <_malloc_r+0x3a>
 8011a9e:	001a      	movs	r2, r3
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	42a3      	cmp	r3, r4
 8011aa4:	d1fb      	bne.n	8011a9e <_malloc_r+0xde>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e7da      	b.n	8011a60 <_malloc_r+0xa0>
 8011aaa:	230c      	movs	r3, #12
 8011aac:	0028      	movs	r0, r5
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f000 f820 	bl	8011af4 <__malloc_unlock>
 8011ab4:	e7c6      	b.n	8011a44 <_malloc_r+0x84>
 8011ab6:	6007      	str	r7, [r0, #0]
 8011ab8:	e7da      	b.n	8011a70 <_malloc_r+0xb0>
 8011aba:	46c0      	nop			@ (mov r8, r8)
 8011abc:	200020a4 	.word	0x200020a4

08011ac0 <__ascii_mbtowc>:
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	d100      	bne.n	8011ac8 <__ascii_mbtowc+0x8>
 8011ac6:	a901      	add	r1, sp, #4
 8011ac8:	1e10      	subs	r0, r2, #0
 8011aca:	d006      	beq.n	8011ada <__ascii_mbtowc+0x1a>
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d006      	beq.n	8011ade <__ascii_mbtowc+0x1e>
 8011ad0:	7813      	ldrb	r3, [r2, #0]
 8011ad2:	600b      	str	r3, [r1, #0]
 8011ad4:	7810      	ldrb	r0, [r2, #0]
 8011ad6:	1e43      	subs	r3, r0, #1
 8011ad8:	4198      	sbcs	r0, r3
 8011ada:	b002      	add	sp, #8
 8011adc:	4770      	bx	lr
 8011ade:	2002      	movs	r0, #2
 8011ae0:	4240      	negs	r0, r0
 8011ae2:	e7fa      	b.n	8011ada <__ascii_mbtowc+0x1a>

08011ae4 <__malloc_lock>:
 8011ae4:	b510      	push	{r4, lr}
 8011ae6:	4802      	ldr	r0, [pc, #8]	@ (8011af0 <__malloc_lock+0xc>)
 8011ae8:	f7fe fd07 	bl	80104fa <__retarget_lock_acquire_recursive>
 8011aec:	bd10      	pop	{r4, pc}
 8011aee:	46c0      	nop			@ (mov r8, r8)
 8011af0:	2000209c 	.word	0x2000209c

08011af4 <__malloc_unlock>:
 8011af4:	b510      	push	{r4, lr}
 8011af6:	4802      	ldr	r0, [pc, #8]	@ (8011b00 <__malloc_unlock+0xc>)
 8011af8:	f7fe fd00 	bl	80104fc <__retarget_lock_release_recursive>
 8011afc:	bd10      	pop	{r4, pc}
 8011afe:	46c0      	nop			@ (mov r8, r8)
 8011b00:	2000209c 	.word	0x2000209c

08011b04 <_Balloc>:
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	69c5      	ldr	r5, [r0, #28]
 8011b08:	0006      	movs	r6, r0
 8011b0a:	000c      	movs	r4, r1
 8011b0c:	2d00      	cmp	r5, #0
 8011b0e:	d10e      	bne.n	8011b2e <_Balloc+0x2a>
 8011b10:	2010      	movs	r0, #16
 8011b12:	f7ff ff29 	bl	8011968 <malloc>
 8011b16:	1e02      	subs	r2, r0, #0
 8011b18:	61f0      	str	r0, [r6, #28]
 8011b1a:	d104      	bne.n	8011b26 <_Balloc+0x22>
 8011b1c:	216b      	movs	r1, #107	@ 0x6b
 8011b1e:	4b19      	ldr	r3, [pc, #100]	@ (8011b84 <_Balloc+0x80>)
 8011b20:	4819      	ldr	r0, [pc, #100]	@ (8011b88 <_Balloc+0x84>)
 8011b22:	f000 fef3 	bl	801290c <__assert_func>
 8011b26:	6045      	str	r5, [r0, #4]
 8011b28:	6085      	str	r5, [r0, #8]
 8011b2a:	6005      	str	r5, [r0, #0]
 8011b2c:	60c5      	str	r5, [r0, #12]
 8011b2e:	69f5      	ldr	r5, [r6, #28]
 8011b30:	68eb      	ldr	r3, [r5, #12]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d013      	beq.n	8011b5e <_Balloc+0x5a>
 8011b36:	69f3      	ldr	r3, [r6, #28]
 8011b38:	00a2      	lsls	r2, r4, #2
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	189b      	adds	r3, r3, r2
 8011b3e:	6818      	ldr	r0, [r3, #0]
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d118      	bne.n	8011b76 <_Balloc+0x72>
 8011b44:	2101      	movs	r1, #1
 8011b46:	000d      	movs	r5, r1
 8011b48:	40a5      	lsls	r5, r4
 8011b4a:	1d6a      	adds	r2, r5, #5
 8011b4c:	0030      	movs	r0, r6
 8011b4e:	0092      	lsls	r2, r2, #2
 8011b50:	f000 fefa 	bl	8012948 <_calloc_r>
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d00c      	beq.n	8011b72 <_Balloc+0x6e>
 8011b58:	6044      	str	r4, [r0, #4]
 8011b5a:	6085      	str	r5, [r0, #8]
 8011b5c:	e00d      	b.n	8011b7a <_Balloc+0x76>
 8011b5e:	2221      	movs	r2, #33	@ 0x21
 8011b60:	2104      	movs	r1, #4
 8011b62:	0030      	movs	r0, r6
 8011b64:	f000 fef0 	bl	8012948 <_calloc_r>
 8011b68:	69f3      	ldr	r3, [r6, #28]
 8011b6a:	60e8      	str	r0, [r5, #12]
 8011b6c:	68db      	ldr	r3, [r3, #12]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1e1      	bne.n	8011b36 <_Balloc+0x32>
 8011b72:	2000      	movs	r0, #0
 8011b74:	bd70      	pop	{r4, r5, r6, pc}
 8011b76:	6802      	ldr	r2, [r0, #0]
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	6103      	str	r3, [r0, #16]
 8011b7e:	60c3      	str	r3, [r0, #12]
 8011b80:	e7f8      	b.n	8011b74 <_Balloc+0x70>
 8011b82:	46c0      	nop			@ (mov r8, r8)
 8011b84:	08013283 	.word	0x08013283
 8011b88:	08013363 	.word	0x08013363

08011b8c <_Bfree>:
 8011b8c:	b570      	push	{r4, r5, r6, lr}
 8011b8e:	69c6      	ldr	r6, [r0, #28]
 8011b90:	0005      	movs	r5, r0
 8011b92:	000c      	movs	r4, r1
 8011b94:	2e00      	cmp	r6, #0
 8011b96:	d10e      	bne.n	8011bb6 <_Bfree+0x2a>
 8011b98:	2010      	movs	r0, #16
 8011b9a:	f7ff fee5 	bl	8011968 <malloc>
 8011b9e:	1e02      	subs	r2, r0, #0
 8011ba0:	61e8      	str	r0, [r5, #28]
 8011ba2:	d104      	bne.n	8011bae <_Bfree+0x22>
 8011ba4:	218f      	movs	r1, #143	@ 0x8f
 8011ba6:	4b09      	ldr	r3, [pc, #36]	@ (8011bcc <_Bfree+0x40>)
 8011ba8:	4809      	ldr	r0, [pc, #36]	@ (8011bd0 <_Bfree+0x44>)
 8011baa:	f000 feaf 	bl	801290c <__assert_func>
 8011bae:	6046      	str	r6, [r0, #4]
 8011bb0:	6086      	str	r6, [r0, #8]
 8011bb2:	6006      	str	r6, [r0, #0]
 8011bb4:	60c6      	str	r6, [r0, #12]
 8011bb6:	2c00      	cmp	r4, #0
 8011bb8:	d007      	beq.n	8011bca <_Bfree+0x3e>
 8011bba:	69eb      	ldr	r3, [r5, #28]
 8011bbc:	6862      	ldr	r2, [r4, #4]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	0092      	lsls	r2, r2, #2
 8011bc2:	189b      	adds	r3, r3, r2
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	6022      	str	r2, [r4, #0]
 8011bc8:	601c      	str	r4, [r3, #0]
 8011bca:	bd70      	pop	{r4, r5, r6, pc}
 8011bcc:	08013283 	.word	0x08013283
 8011bd0:	08013363 	.word	0x08013363

08011bd4 <__multadd>:
 8011bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bd6:	000f      	movs	r7, r1
 8011bd8:	9001      	str	r0, [sp, #4]
 8011bda:	000c      	movs	r4, r1
 8011bdc:	001e      	movs	r6, r3
 8011bde:	2000      	movs	r0, #0
 8011be0:	690d      	ldr	r5, [r1, #16]
 8011be2:	3714      	adds	r7, #20
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	3001      	adds	r0, #1
 8011be8:	b299      	uxth	r1, r3
 8011bea:	4351      	muls	r1, r2
 8011bec:	0c1b      	lsrs	r3, r3, #16
 8011bee:	4353      	muls	r3, r2
 8011bf0:	1989      	adds	r1, r1, r6
 8011bf2:	0c0e      	lsrs	r6, r1, #16
 8011bf4:	199b      	adds	r3, r3, r6
 8011bf6:	0c1e      	lsrs	r6, r3, #16
 8011bf8:	b289      	uxth	r1, r1
 8011bfa:	041b      	lsls	r3, r3, #16
 8011bfc:	185b      	adds	r3, r3, r1
 8011bfe:	c708      	stmia	r7!, {r3}
 8011c00:	4285      	cmp	r5, r0
 8011c02:	dcef      	bgt.n	8011be4 <__multadd+0x10>
 8011c04:	2e00      	cmp	r6, #0
 8011c06:	d022      	beq.n	8011c4e <__multadd+0x7a>
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	42ab      	cmp	r3, r5
 8011c0c:	dc19      	bgt.n	8011c42 <__multadd+0x6e>
 8011c0e:	6861      	ldr	r1, [r4, #4]
 8011c10:	9801      	ldr	r0, [sp, #4]
 8011c12:	3101      	adds	r1, #1
 8011c14:	f7ff ff76 	bl	8011b04 <_Balloc>
 8011c18:	1e07      	subs	r7, r0, #0
 8011c1a:	d105      	bne.n	8011c28 <__multadd+0x54>
 8011c1c:	003a      	movs	r2, r7
 8011c1e:	21ba      	movs	r1, #186	@ 0xba
 8011c20:	4b0c      	ldr	r3, [pc, #48]	@ (8011c54 <__multadd+0x80>)
 8011c22:	480d      	ldr	r0, [pc, #52]	@ (8011c58 <__multadd+0x84>)
 8011c24:	f000 fe72 	bl	801290c <__assert_func>
 8011c28:	0021      	movs	r1, r4
 8011c2a:	6922      	ldr	r2, [r4, #16]
 8011c2c:	310c      	adds	r1, #12
 8011c2e:	3202      	adds	r2, #2
 8011c30:	0092      	lsls	r2, r2, #2
 8011c32:	300c      	adds	r0, #12
 8011c34:	f7fe fc6e 	bl	8010514 <memcpy>
 8011c38:	0021      	movs	r1, r4
 8011c3a:	9801      	ldr	r0, [sp, #4]
 8011c3c:	f7ff ffa6 	bl	8011b8c <_Bfree>
 8011c40:	003c      	movs	r4, r7
 8011c42:	1d2b      	adds	r3, r5, #4
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	18e3      	adds	r3, r4, r3
 8011c48:	3501      	adds	r5, #1
 8011c4a:	605e      	str	r6, [r3, #4]
 8011c4c:	6125      	str	r5, [r4, #16]
 8011c4e:	0020      	movs	r0, r4
 8011c50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011c52:	46c0      	nop			@ (mov r8, r8)
 8011c54:	080132f2 	.word	0x080132f2
 8011c58:	08013363 	.word	0x08013363

08011c5c <__s2b>:
 8011c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c5e:	0007      	movs	r7, r0
 8011c60:	0018      	movs	r0, r3
 8011c62:	000c      	movs	r4, r1
 8011c64:	3008      	adds	r0, #8
 8011c66:	2109      	movs	r1, #9
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	0015      	movs	r5, r2
 8011c6c:	f7ee faee 	bl	800024c <__divsi3>
 8011c70:	2301      	movs	r3, #1
 8011c72:	2100      	movs	r1, #0
 8011c74:	4283      	cmp	r3, r0
 8011c76:	db0a      	blt.n	8011c8e <__s2b+0x32>
 8011c78:	0038      	movs	r0, r7
 8011c7a:	f7ff ff43 	bl	8011b04 <_Balloc>
 8011c7e:	1e01      	subs	r1, r0, #0
 8011c80:	d108      	bne.n	8011c94 <__s2b+0x38>
 8011c82:	000a      	movs	r2, r1
 8011c84:	4b19      	ldr	r3, [pc, #100]	@ (8011cec <__s2b+0x90>)
 8011c86:	481a      	ldr	r0, [pc, #104]	@ (8011cf0 <__s2b+0x94>)
 8011c88:	31d3      	adds	r1, #211	@ 0xd3
 8011c8a:	f000 fe3f 	bl	801290c <__assert_func>
 8011c8e:	005b      	lsls	r3, r3, #1
 8011c90:	3101      	adds	r1, #1
 8011c92:	e7ef      	b.n	8011c74 <__s2b+0x18>
 8011c94:	9b08      	ldr	r3, [sp, #32]
 8011c96:	6143      	str	r3, [r0, #20]
 8011c98:	2301      	movs	r3, #1
 8011c9a:	6103      	str	r3, [r0, #16]
 8011c9c:	2d09      	cmp	r5, #9
 8011c9e:	dd18      	ble.n	8011cd2 <__s2b+0x76>
 8011ca0:	0023      	movs	r3, r4
 8011ca2:	3309      	adds	r3, #9
 8011ca4:	001e      	movs	r6, r3
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	1964      	adds	r4, r4, r5
 8011caa:	7833      	ldrb	r3, [r6, #0]
 8011cac:	220a      	movs	r2, #10
 8011cae:	0038      	movs	r0, r7
 8011cb0:	3b30      	subs	r3, #48	@ 0x30
 8011cb2:	f7ff ff8f 	bl	8011bd4 <__multadd>
 8011cb6:	3601      	adds	r6, #1
 8011cb8:	0001      	movs	r1, r0
 8011cba:	42a6      	cmp	r6, r4
 8011cbc:	d1f5      	bne.n	8011caa <__s2b+0x4e>
 8011cbe:	002c      	movs	r4, r5
 8011cc0:	9b00      	ldr	r3, [sp, #0]
 8011cc2:	3c08      	subs	r4, #8
 8011cc4:	191c      	adds	r4, r3, r4
 8011cc6:	002e      	movs	r6, r5
 8011cc8:	9b01      	ldr	r3, [sp, #4]
 8011cca:	429e      	cmp	r6, r3
 8011ccc:	db04      	blt.n	8011cd8 <__s2b+0x7c>
 8011cce:	0008      	movs	r0, r1
 8011cd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011cd2:	2509      	movs	r5, #9
 8011cd4:	340a      	adds	r4, #10
 8011cd6:	e7f6      	b.n	8011cc6 <__s2b+0x6a>
 8011cd8:	1b63      	subs	r3, r4, r5
 8011cda:	5d9b      	ldrb	r3, [r3, r6]
 8011cdc:	220a      	movs	r2, #10
 8011cde:	0038      	movs	r0, r7
 8011ce0:	3b30      	subs	r3, #48	@ 0x30
 8011ce2:	f7ff ff77 	bl	8011bd4 <__multadd>
 8011ce6:	3601      	adds	r6, #1
 8011ce8:	0001      	movs	r1, r0
 8011cea:	e7ed      	b.n	8011cc8 <__s2b+0x6c>
 8011cec:	080132f2 	.word	0x080132f2
 8011cf0:	08013363 	.word	0x08013363

08011cf4 <__hi0bits>:
 8011cf4:	2280      	movs	r2, #128	@ 0x80
 8011cf6:	0003      	movs	r3, r0
 8011cf8:	0252      	lsls	r2, r2, #9
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d201      	bcs.n	8011d04 <__hi0bits+0x10>
 8011d00:	041b      	lsls	r3, r3, #16
 8011d02:	3010      	adds	r0, #16
 8011d04:	2280      	movs	r2, #128	@ 0x80
 8011d06:	0452      	lsls	r2, r2, #17
 8011d08:	4293      	cmp	r3, r2
 8011d0a:	d201      	bcs.n	8011d10 <__hi0bits+0x1c>
 8011d0c:	3008      	adds	r0, #8
 8011d0e:	021b      	lsls	r3, r3, #8
 8011d10:	2280      	movs	r2, #128	@ 0x80
 8011d12:	0552      	lsls	r2, r2, #21
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d201      	bcs.n	8011d1c <__hi0bits+0x28>
 8011d18:	3004      	adds	r0, #4
 8011d1a:	011b      	lsls	r3, r3, #4
 8011d1c:	2280      	movs	r2, #128	@ 0x80
 8011d1e:	05d2      	lsls	r2, r2, #23
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d201      	bcs.n	8011d28 <__hi0bits+0x34>
 8011d24:	3002      	adds	r0, #2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	db03      	blt.n	8011d34 <__hi0bits+0x40>
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	4213      	tst	r3, r2
 8011d30:	d100      	bne.n	8011d34 <__hi0bits+0x40>
 8011d32:	2020      	movs	r0, #32
 8011d34:	4770      	bx	lr

08011d36 <__lo0bits>:
 8011d36:	6803      	ldr	r3, [r0, #0]
 8011d38:	0001      	movs	r1, r0
 8011d3a:	2207      	movs	r2, #7
 8011d3c:	0018      	movs	r0, r3
 8011d3e:	4010      	ands	r0, r2
 8011d40:	4213      	tst	r3, r2
 8011d42:	d00d      	beq.n	8011d60 <__lo0bits+0x2a>
 8011d44:	3a06      	subs	r2, #6
 8011d46:	2000      	movs	r0, #0
 8011d48:	4213      	tst	r3, r2
 8011d4a:	d105      	bne.n	8011d58 <__lo0bits+0x22>
 8011d4c:	3002      	adds	r0, #2
 8011d4e:	4203      	tst	r3, r0
 8011d50:	d003      	beq.n	8011d5a <__lo0bits+0x24>
 8011d52:	40d3      	lsrs	r3, r2
 8011d54:	0010      	movs	r0, r2
 8011d56:	600b      	str	r3, [r1, #0]
 8011d58:	4770      	bx	lr
 8011d5a:	089b      	lsrs	r3, r3, #2
 8011d5c:	600b      	str	r3, [r1, #0]
 8011d5e:	e7fb      	b.n	8011d58 <__lo0bits+0x22>
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	2a00      	cmp	r2, #0
 8011d64:	d101      	bne.n	8011d6a <__lo0bits+0x34>
 8011d66:	2010      	movs	r0, #16
 8011d68:	0c1b      	lsrs	r3, r3, #16
 8011d6a:	b2da      	uxtb	r2, r3
 8011d6c:	2a00      	cmp	r2, #0
 8011d6e:	d101      	bne.n	8011d74 <__lo0bits+0x3e>
 8011d70:	3008      	adds	r0, #8
 8011d72:	0a1b      	lsrs	r3, r3, #8
 8011d74:	071a      	lsls	r2, r3, #28
 8011d76:	d101      	bne.n	8011d7c <__lo0bits+0x46>
 8011d78:	3004      	adds	r0, #4
 8011d7a:	091b      	lsrs	r3, r3, #4
 8011d7c:	079a      	lsls	r2, r3, #30
 8011d7e:	d101      	bne.n	8011d84 <__lo0bits+0x4e>
 8011d80:	3002      	adds	r0, #2
 8011d82:	089b      	lsrs	r3, r3, #2
 8011d84:	07da      	lsls	r2, r3, #31
 8011d86:	d4e9      	bmi.n	8011d5c <__lo0bits+0x26>
 8011d88:	3001      	adds	r0, #1
 8011d8a:	085b      	lsrs	r3, r3, #1
 8011d8c:	d1e6      	bne.n	8011d5c <__lo0bits+0x26>
 8011d8e:	2020      	movs	r0, #32
 8011d90:	e7e2      	b.n	8011d58 <__lo0bits+0x22>
	...

08011d94 <__i2b>:
 8011d94:	b510      	push	{r4, lr}
 8011d96:	000c      	movs	r4, r1
 8011d98:	2101      	movs	r1, #1
 8011d9a:	f7ff feb3 	bl	8011b04 <_Balloc>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d107      	bne.n	8011db2 <__i2b+0x1e>
 8011da2:	2146      	movs	r1, #70	@ 0x46
 8011da4:	4c05      	ldr	r4, [pc, #20]	@ (8011dbc <__i2b+0x28>)
 8011da6:	0002      	movs	r2, r0
 8011da8:	4b05      	ldr	r3, [pc, #20]	@ (8011dc0 <__i2b+0x2c>)
 8011daa:	0020      	movs	r0, r4
 8011dac:	31ff      	adds	r1, #255	@ 0xff
 8011dae:	f000 fdad 	bl	801290c <__assert_func>
 8011db2:	2301      	movs	r3, #1
 8011db4:	6144      	str	r4, [r0, #20]
 8011db6:	6103      	str	r3, [r0, #16]
 8011db8:	bd10      	pop	{r4, pc}
 8011dba:	46c0      	nop			@ (mov r8, r8)
 8011dbc:	08013363 	.word	0x08013363
 8011dc0:	080132f2 	.word	0x080132f2

08011dc4 <__multiply>:
 8011dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dc6:	0014      	movs	r4, r2
 8011dc8:	690a      	ldr	r2, [r1, #16]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	000d      	movs	r5, r1
 8011dce:	b089      	sub	sp, #36	@ 0x24
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	db02      	blt.n	8011dda <__multiply+0x16>
 8011dd4:	0023      	movs	r3, r4
 8011dd6:	000c      	movs	r4, r1
 8011dd8:	001d      	movs	r5, r3
 8011dda:	6927      	ldr	r7, [r4, #16]
 8011ddc:	692e      	ldr	r6, [r5, #16]
 8011dde:	6861      	ldr	r1, [r4, #4]
 8011de0:	19bb      	adds	r3, r7, r6
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	68a3      	ldr	r3, [r4, #8]
 8011de6:	19ba      	adds	r2, r7, r6
 8011de8:	4293      	cmp	r3, r2
 8011dea:	da00      	bge.n	8011dee <__multiply+0x2a>
 8011dec:	3101      	adds	r1, #1
 8011dee:	f7ff fe89 	bl	8011b04 <_Balloc>
 8011df2:	4684      	mov	ip, r0
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d106      	bne.n	8011e06 <__multiply+0x42>
 8011df8:	21b1      	movs	r1, #177	@ 0xb1
 8011dfa:	4662      	mov	r2, ip
 8011dfc:	4b44      	ldr	r3, [pc, #272]	@ (8011f10 <__multiply+0x14c>)
 8011dfe:	4845      	ldr	r0, [pc, #276]	@ (8011f14 <__multiply+0x150>)
 8011e00:	0049      	lsls	r1, r1, #1
 8011e02:	f000 fd83 	bl	801290c <__assert_func>
 8011e06:	0002      	movs	r2, r0
 8011e08:	19bb      	adds	r3, r7, r6
 8011e0a:	3214      	adds	r2, #20
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	18d3      	adds	r3, r2, r3
 8011e10:	9301      	str	r3, [sp, #4]
 8011e12:	2100      	movs	r1, #0
 8011e14:	0013      	movs	r3, r2
 8011e16:	9801      	ldr	r0, [sp, #4]
 8011e18:	4283      	cmp	r3, r0
 8011e1a:	d328      	bcc.n	8011e6e <__multiply+0xaa>
 8011e1c:	0023      	movs	r3, r4
 8011e1e:	00bf      	lsls	r7, r7, #2
 8011e20:	3314      	adds	r3, #20
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	3514      	adds	r5, #20
 8011e26:	19db      	adds	r3, r3, r7
 8011e28:	00b6      	lsls	r6, r6, #2
 8011e2a:	9302      	str	r3, [sp, #8]
 8011e2c:	19ab      	adds	r3, r5, r6
 8011e2e:	9307      	str	r3, [sp, #28]
 8011e30:	2304      	movs	r3, #4
 8011e32:	9305      	str	r3, [sp, #20]
 8011e34:	0023      	movs	r3, r4
 8011e36:	9902      	ldr	r1, [sp, #8]
 8011e38:	3315      	adds	r3, #21
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	d305      	bcc.n	8011e4a <__multiply+0x86>
 8011e3e:	1b0c      	subs	r4, r1, r4
 8011e40:	3c15      	subs	r4, #21
 8011e42:	08a4      	lsrs	r4, r4, #2
 8011e44:	3401      	adds	r4, #1
 8011e46:	00a3      	lsls	r3, r4, #2
 8011e48:	9305      	str	r3, [sp, #20]
 8011e4a:	9b07      	ldr	r3, [sp, #28]
 8011e4c:	429d      	cmp	r5, r3
 8011e4e:	d310      	bcc.n	8011e72 <__multiply+0xae>
 8011e50:	9b00      	ldr	r3, [sp, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dd05      	ble.n	8011e62 <__multiply+0x9e>
 8011e56:	9b01      	ldr	r3, [sp, #4]
 8011e58:	3b04      	subs	r3, #4
 8011e5a:	9301      	str	r3, [sp, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d052      	beq.n	8011f08 <__multiply+0x144>
 8011e62:	4663      	mov	r3, ip
 8011e64:	4660      	mov	r0, ip
 8011e66:	9a00      	ldr	r2, [sp, #0]
 8011e68:	611a      	str	r2, [r3, #16]
 8011e6a:	b009      	add	sp, #36	@ 0x24
 8011e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e6e:	c302      	stmia	r3!, {r1}
 8011e70:	e7d1      	b.n	8011e16 <__multiply+0x52>
 8011e72:	682c      	ldr	r4, [r5, #0]
 8011e74:	b2a4      	uxth	r4, r4
 8011e76:	2c00      	cmp	r4, #0
 8011e78:	d01f      	beq.n	8011eba <__multiply+0xf6>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	0017      	movs	r7, r2
 8011e7e:	9e04      	ldr	r6, [sp, #16]
 8011e80:	9303      	str	r3, [sp, #12]
 8011e82:	ce08      	ldmia	r6!, {r3}
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	9306      	str	r3, [sp, #24]
 8011e88:	466b      	mov	r3, sp
 8011e8a:	8b1b      	ldrh	r3, [r3, #24]
 8011e8c:	b288      	uxth	r0, r1
 8011e8e:	4363      	muls	r3, r4
 8011e90:	181b      	adds	r3, r3, r0
 8011e92:	9803      	ldr	r0, [sp, #12]
 8011e94:	0c09      	lsrs	r1, r1, #16
 8011e96:	181b      	adds	r3, r3, r0
 8011e98:	9806      	ldr	r0, [sp, #24]
 8011e9a:	0c00      	lsrs	r0, r0, #16
 8011e9c:	4360      	muls	r0, r4
 8011e9e:	1840      	adds	r0, r0, r1
 8011ea0:	0c19      	lsrs	r1, r3, #16
 8011ea2:	1841      	adds	r1, r0, r1
 8011ea4:	0c08      	lsrs	r0, r1, #16
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	0409      	lsls	r1, r1, #16
 8011eaa:	4319      	orrs	r1, r3
 8011eac:	9b02      	ldr	r3, [sp, #8]
 8011eae:	9003      	str	r0, [sp, #12]
 8011eb0:	c702      	stmia	r7!, {r1}
 8011eb2:	42b3      	cmp	r3, r6
 8011eb4:	d8e5      	bhi.n	8011e82 <__multiply+0xbe>
 8011eb6:	9b05      	ldr	r3, [sp, #20]
 8011eb8:	50d0      	str	r0, [r2, r3]
 8011eba:	682c      	ldr	r4, [r5, #0]
 8011ebc:	0c24      	lsrs	r4, r4, #16
 8011ebe:	d020      	beq.n	8011f02 <__multiply+0x13e>
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	0010      	movs	r0, r2
 8011ec4:	6813      	ldr	r3, [r2, #0]
 8011ec6:	9e04      	ldr	r6, [sp, #16]
 8011ec8:	9103      	str	r1, [sp, #12]
 8011eca:	6831      	ldr	r1, [r6, #0]
 8011ecc:	6807      	ldr	r7, [r0, #0]
 8011ece:	b289      	uxth	r1, r1
 8011ed0:	4361      	muls	r1, r4
 8011ed2:	0c3f      	lsrs	r7, r7, #16
 8011ed4:	19c9      	adds	r1, r1, r7
 8011ed6:	9f03      	ldr	r7, [sp, #12]
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	19c9      	adds	r1, r1, r7
 8011edc:	040f      	lsls	r7, r1, #16
 8011ede:	431f      	orrs	r7, r3
 8011ee0:	6007      	str	r7, [r0, #0]
 8011ee2:	ce80      	ldmia	r6!, {r7}
 8011ee4:	6843      	ldr	r3, [r0, #4]
 8011ee6:	0c3f      	lsrs	r7, r7, #16
 8011ee8:	4367      	muls	r7, r4
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	0c09      	lsrs	r1, r1, #16
 8011eee:	18fb      	adds	r3, r7, r3
 8011ef0:	185b      	adds	r3, r3, r1
 8011ef2:	0c19      	lsrs	r1, r3, #16
 8011ef4:	9103      	str	r1, [sp, #12]
 8011ef6:	9902      	ldr	r1, [sp, #8]
 8011ef8:	3004      	adds	r0, #4
 8011efa:	42b1      	cmp	r1, r6
 8011efc:	d8e5      	bhi.n	8011eca <__multiply+0x106>
 8011efe:	9905      	ldr	r1, [sp, #20]
 8011f00:	5053      	str	r3, [r2, r1]
 8011f02:	3504      	adds	r5, #4
 8011f04:	3204      	adds	r2, #4
 8011f06:	e7a0      	b.n	8011e4a <__multiply+0x86>
 8011f08:	9b00      	ldr	r3, [sp, #0]
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	9300      	str	r3, [sp, #0]
 8011f0e:	e79f      	b.n	8011e50 <__multiply+0x8c>
 8011f10:	080132f2 	.word	0x080132f2
 8011f14:	08013363 	.word	0x08013363

08011f18 <__pow5mult>:
 8011f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	0015      	movs	r5, r2
 8011f1e:	0007      	movs	r7, r0
 8011f20:	000e      	movs	r6, r1
 8011f22:	401a      	ands	r2, r3
 8011f24:	421d      	tst	r5, r3
 8011f26:	d008      	beq.n	8011f3a <__pow5mult+0x22>
 8011f28:	4925      	ldr	r1, [pc, #148]	@ (8011fc0 <__pow5mult+0xa8>)
 8011f2a:	3a01      	subs	r2, #1
 8011f2c:	0092      	lsls	r2, r2, #2
 8011f2e:	5852      	ldr	r2, [r2, r1]
 8011f30:	2300      	movs	r3, #0
 8011f32:	0031      	movs	r1, r6
 8011f34:	f7ff fe4e 	bl	8011bd4 <__multadd>
 8011f38:	0006      	movs	r6, r0
 8011f3a:	10ad      	asrs	r5, r5, #2
 8011f3c:	d03d      	beq.n	8011fba <__pow5mult+0xa2>
 8011f3e:	69fc      	ldr	r4, [r7, #28]
 8011f40:	2c00      	cmp	r4, #0
 8011f42:	d10f      	bne.n	8011f64 <__pow5mult+0x4c>
 8011f44:	2010      	movs	r0, #16
 8011f46:	f7ff fd0f 	bl	8011968 <malloc>
 8011f4a:	1e02      	subs	r2, r0, #0
 8011f4c:	61f8      	str	r0, [r7, #28]
 8011f4e:	d105      	bne.n	8011f5c <__pow5mult+0x44>
 8011f50:	21b4      	movs	r1, #180	@ 0xb4
 8011f52:	4b1c      	ldr	r3, [pc, #112]	@ (8011fc4 <__pow5mult+0xac>)
 8011f54:	481c      	ldr	r0, [pc, #112]	@ (8011fc8 <__pow5mult+0xb0>)
 8011f56:	31ff      	adds	r1, #255	@ 0xff
 8011f58:	f000 fcd8 	bl	801290c <__assert_func>
 8011f5c:	6044      	str	r4, [r0, #4]
 8011f5e:	6084      	str	r4, [r0, #8]
 8011f60:	6004      	str	r4, [r0, #0]
 8011f62:	60c4      	str	r4, [r0, #12]
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	689c      	ldr	r4, [r3, #8]
 8011f68:	9301      	str	r3, [sp, #4]
 8011f6a:	2c00      	cmp	r4, #0
 8011f6c:	d108      	bne.n	8011f80 <__pow5mult+0x68>
 8011f6e:	0038      	movs	r0, r7
 8011f70:	4916      	ldr	r1, [pc, #88]	@ (8011fcc <__pow5mult+0xb4>)
 8011f72:	f7ff ff0f 	bl	8011d94 <__i2b>
 8011f76:	9b01      	ldr	r3, [sp, #4]
 8011f78:	0004      	movs	r4, r0
 8011f7a:	6098      	str	r0, [r3, #8]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6003      	str	r3, [r0, #0]
 8011f80:	2301      	movs	r3, #1
 8011f82:	421d      	tst	r5, r3
 8011f84:	d00a      	beq.n	8011f9c <__pow5mult+0x84>
 8011f86:	0031      	movs	r1, r6
 8011f88:	0022      	movs	r2, r4
 8011f8a:	0038      	movs	r0, r7
 8011f8c:	f7ff ff1a 	bl	8011dc4 <__multiply>
 8011f90:	0031      	movs	r1, r6
 8011f92:	9001      	str	r0, [sp, #4]
 8011f94:	0038      	movs	r0, r7
 8011f96:	f7ff fdf9 	bl	8011b8c <_Bfree>
 8011f9a:	9e01      	ldr	r6, [sp, #4]
 8011f9c:	106d      	asrs	r5, r5, #1
 8011f9e:	d00c      	beq.n	8011fba <__pow5mult+0xa2>
 8011fa0:	6820      	ldr	r0, [r4, #0]
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d107      	bne.n	8011fb6 <__pow5mult+0x9e>
 8011fa6:	0022      	movs	r2, r4
 8011fa8:	0021      	movs	r1, r4
 8011faa:	0038      	movs	r0, r7
 8011fac:	f7ff ff0a 	bl	8011dc4 <__multiply>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	6020      	str	r0, [r4, #0]
 8011fb4:	6003      	str	r3, [r0, #0]
 8011fb6:	0004      	movs	r4, r0
 8011fb8:	e7e2      	b.n	8011f80 <__pow5mult+0x68>
 8011fba:	0030      	movs	r0, r6
 8011fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011fbe:	46c0      	nop			@ (mov r8, r8)
 8011fc0:	08013460 	.word	0x08013460
 8011fc4:	08013283 	.word	0x08013283
 8011fc8:	08013363 	.word	0x08013363
 8011fcc:	00000271 	.word	0x00000271

08011fd0 <__lshift>:
 8011fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fd2:	000c      	movs	r4, r1
 8011fd4:	0016      	movs	r6, r2
 8011fd6:	6923      	ldr	r3, [r4, #16]
 8011fd8:	1157      	asrs	r7, r2, #5
 8011fda:	b085      	sub	sp, #20
 8011fdc:	18fb      	adds	r3, r7, r3
 8011fde:	9301      	str	r3, [sp, #4]
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	9300      	str	r3, [sp, #0]
 8011fe4:	6849      	ldr	r1, [r1, #4]
 8011fe6:	68a3      	ldr	r3, [r4, #8]
 8011fe8:	9002      	str	r0, [sp, #8]
 8011fea:	9a00      	ldr	r2, [sp, #0]
 8011fec:	4293      	cmp	r3, r2
 8011fee:	db10      	blt.n	8012012 <__lshift+0x42>
 8011ff0:	9802      	ldr	r0, [sp, #8]
 8011ff2:	f7ff fd87 	bl	8011b04 <_Balloc>
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	0001      	movs	r1, r0
 8011ffa:	0005      	movs	r5, r0
 8011ffc:	001a      	movs	r2, r3
 8011ffe:	3114      	adds	r1, #20
 8012000:	4298      	cmp	r0, r3
 8012002:	d10c      	bne.n	801201e <__lshift+0x4e>
 8012004:	21ef      	movs	r1, #239	@ 0xef
 8012006:	002a      	movs	r2, r5
 8012008:	4b25      	ldr	r3, [pc, #148]	@ (80120a0 <__lshift+0xd0>)
 801200a:	4826      	ldr	r0, [pc, #152]	@ (80120a4 <__lshift+0xd4>)
 801200c:	0049      	lsls	r1, r1, #1
 801200e:	f000 fc7d 	bl	801290c <__assert_func>
 8012012:	3101      	adds	r1, #1
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	e7e8      	b.n	8011fea <__lshift+0x1a>
 8012018:	0098      	lsls	r0, r3, #2
 801201a:	500a      	str	r2, [r1, r0]
 801201c:	3301      	adds	r3, #1
 801201e:	42bb      	cmp	r3, r7
 8012020:	dbfa      	blt.n	8012018 <__lshift+0x48>
 8012022:	43fb      	mvns	r3, r7
 8012024:	17db      	asrs	r3, r3, #31
 8012026:	401f      	ands	r7, r3
 8012028:	00bf      	lsls	r7, r7, #2
 801202a:	0023      	movs	r3, r4
 801202c:	201f      	movs	r0, #31
 801202e:	19c9      	adds	r1, r1, r7
 8012030:	0037      	movs	r7, r6
 8012032:	6922      	ldr	r2, [r4, #16]
 8012034:	3314      	adds	r3, #20
 8012036:	0092      	lsls	r2, r2, #2
 8012038:	189a      	adds	r2, r3, r2
 801203a:	4007      	ands	r7, r0
 801203c:	4206      	tst	r6, r0
 801203e:	d029      	beq.n	8012094 <__lshift+0xc4>
 8012040:	3001      	adds	r0, #1
 8012042:	1bc0      	subs	r0, r0, r7
 8012044:	9003      	str	r0, [sp, #12]
 8012046:	468c      	mov	ip, r1
 8012048:	2000      	movs	r0, #0
 801204a:	681e      	ldr	r6, [r3, #0]
 801204c:	40be      	lsls	r6, r7
 801204e:	4306      	orrs	r6, r0
 8012050:	4660      	mov	r0, ip
 8012052:	c040      	stmia	r0!, {r6}
 8012054:	4684      	mov	ip, r0
 8012056:	9e03      	ldr	r6, [sp, #12]
 8012058:	cb01      	ldmia	r3!, {r0}
 801205a:	40f0      	lsrs	r0, r6
 801205c:	429a      	cmp	r2, r3
 801205e:	d8f4      	bhi.n	801204a <__lshift+0x7a>
 8012060:	0026      	movs	r6, r4
 8012062:	3615      	adds	r6, #21
 8012064:	2304      	movs	r3, #4
 8012066:	42b2      	cmp	r2, r6
 8012068:	d304      	bcc.n	8012074 <__lshift+0xa4>
 801206a:	1b13      	subs	r3, r2, r4
 801206c:	3b15      	subs	r3, #21
 801206e:	089b      	lsrs	r3, r3, #2
 8012070:	3301      	adds	r3, #1
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	50c8      	str	r0, [r1, r3]
 8012076:	2800      	cmp	r0, #0
 8012078:	d002      	beq.n	8012080 <__lshift+0xb0>
 801207a:	9b01      	ldr	r3, [sp, #4]
 801207c:	3302      	adds	r3, #2
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	9b00      	ldr	r3, [sp, #0]
 8012082:	9802      	ldr	r0, [sp, #8]
 8012084:	3b01      	subs	r3, #1
 8012086:	0021      	movs	r1, r4
 8012088:	612b      	str	r3, [r5, #16]
 801208a:	f7ff fd7f 	bl	8011b8c <_Bfree>
 801208e:	0028      	movs	r0, r5
 8012090:	b005      	add	sp, #20
 8012092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012094:	cb01      	ldmia	r3!, {r0}
 8012096:	c101      	stmia	r1!, {r0}
 8012098:	429a      	cmp	r2, r3
 801209a:	d8fb      	bhi.n	8012094 <__lshift+0xc4>
 801209c:	e7f0      	b.n	8012080 <__lshift+0xb0>
 801209e:	46c0      	nop			@ (mov r8, r8)
 80120a0:	080132f2 	.word	0x080132f2
 80120a4:	08013363 	.word	0x08013363

080120a8 <__mcmp>:
 80120a8:	b530      	push	{r4, r5, lr}
 80120aa:	690b      	ldr	r3, [r1, #16]
 80120ac:	6904      	ldr	r4, [r0, #16]
 80120ae:	0002      	movs	r2, r0
 80120b0:	1ae0      	subs	r0, r4, r3
 80120b2:	429c      	cmp	r4, r3
 80120b4:	d10f      	bne.n	80120d6 <__mcmp+0x2e>
 80120b6:	3214      	adds	r2, #20
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	3114      	adds	r1, #20
 80120bc:	0014      	movs	r4, r2
 80120be:	18c9      	adds	r1, r1, r3
 80120c0:	18d2      	adds	r2, r2, r3
 80120c2:	3a04      	subs	r2, #4
 80120c4:	3904      	subs	r1, #4
 80120c6:	6815      	ldr	r5, [r2, #0]
 80120c8:	680b      	ldr	r3, [r1, #0]
 80120ca:	429d      	cmp	r5, r3
 80120cc:	d004      	beq.n	80120d8 <__mcmp+0x30>
 80120ce:	2001      	movs	r0, #1
 80120d0:	429d      	cmp	r5, r3
 80120d2:	d200      	bcs.n	80120d6 <__mcmp+0x2e>
 80120d4:	3802      	subs	r0, #2
 80120d6:	bd30      	pop	{r4, r5, pc}
 80120d8:	4294      	cmp	r4, r2
 80120da:	d3f2      	bcc.n	80120c2 <__mcmp+0x1a>
 80120dc:	e7fb      	b.n	80120d6 <__mcmp+0x2e>
	...

080120e0 <__mdiff>:
 80120e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120e2:	000c      	movs	r4, r1
 80120e4:	b087      	sub	sp, #28
 80120e6:	9000      	str	r0, [sp, #0]
 80120e8:	0011      	movs	r1, r2
 80120ea:	0020      	movs	r0, r4
 80120ec:	0017      	movs	r7, r2
 80120ee:	f7ff ffdb 	bl	80120a8 <__mcmp>
 80120f2:	1e05      	subs	r5, r0, #0
 80120f4:	d110      	bne.n	8012118 <__mdiff+0x38>
 80120f6:	0001      	movs	r1, r0
 80120f8:	9800      	ldr	r0, [sp, #0]
 80120fa:	f7ff fd03 	bl	8011b04 <_Balloc>
 80120fe:	1e02      	subs	r2, r0, #0
 8012100:	d104      	bne.n	801210c <__mdiff+0x2c>
 8012102:	4b40      	ldr	r3, [pc, #256]	@ (8012204 <__mdiff+0x124>)
 8012104:	4840      	ldr	r0, [pc, #256]	@ (8012208 <__mdiff+0x128>)
 8012106:	4941      	ldr	r1, [pc, #260]	@ (801220c <__mdiff+0x12c>)
 8012108:	f000 fc00 	bl	801290c <__assert_func>
 801210c:	2301      	movs	r3, #1
 801210e:	6145      	str	r5, [r0, #20]
 8012110:	6103      	str	r3, [r0, #16]
 8012112:	0010      	movs	r0, r2
 8012114:	b007      	add	sp, #28
 8012116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012118:	2600      	movs	r6, #0
 801211a:	42b0      	cmp	r0, r6
 801211c:	da03      	bge.n	8012126 <__mdiff+0x46>
 801211e:	0023      	movs	r3, r4
 8012120:	003c      	movs	r4, r7
 8012122:	001f      	movs	r7, r3
 8012124:	3601      	adds	r6, #1
 8012126:	6861      	ldr	r1, [r4, #4]
 8012128:	9800      	ldr	r0, [sp, #0]
 801212a:	f7ff fceb 	bl	8011b04 <_Balloc>
 801212e:	1e02      	subs	r2, r0, #0
 8012130:	d103      	bne.n	801213a <__mdiff+0x5a>
 8012132:	4b34      	ldr	r3, [pc, #208]	@ (8012204 <__mdiff+0x124>)
 8012134:	4834      	ldr	r0, [pc, #208]	@ (8012208 <__mdiff+0x128>)
 8012136:	4936      	ldr	r1, [pc, #216]	@ (8012210 <__mdiff+0x130>)
 8012138:	e7e6      	b.n	8012108 <__mdiff+0x28>
 801213a:	6923      	ldr	r3, [r4, #16]
 801213c:	3414      	adds	r4, #20
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	18e3      	adds	r3, r4, r3
 8012144:	0021      	movs	r1, r4
 8012146:	9401      	str	r4, [sp, #4]
 8012148:	003c      	movs	r4, r7
 801214a:	9302      	str	r3, [sp, #8]
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	3414      	adds	r4, #20
 8012150:	009b      	lsls	r3, r3, #2
 8012152:	18e3      	adds	r3, r4, r3
 8012154:	9303      	str	r3, [sp, #12]
 8012156:	0003      	movs	r3, r0
 8012158:	60c6      	str	r6, [r0, #12]
 801215a:	468c      	mov	ip, r1
 801215c:	2000      	movs	r0, #0
 801215e:	3314      	adds	r3, #20
 8012160:	9304      	str	r3, [sp, #16]
 8012162:	9305      	str	r3, [sp, #20]
 8012164:	4663      	mov	r3, ip
 8012166:	cb20      	ldmia	r3!, {r5}
 8012168:	b2a9      	uxth	r1, r5
 801216a:	000e      	movs	r6, r1
 801216c:	469c      	mov	ip, r3
 801216e:	cc08      	ldmia	r4!, {r3}
 8012170:	0c2d      	lsrs	r5, r5, #16
 8012172:	b299      	uxth	r1, r3
 8012174:	1a71      	subs	r1, r6, r1
 8012176:	1809      	adds	r1, r1, r0
 8012178:	0c1b      	lsrs	r3, r3, #16
 801217a:	1408      	asrs	r0, r1, #16
 801217c:	1aeb      	subs	r3, r5, r3
 801217e:	181b      	adds	r3, r3, r0
 8012180:	1418      	asrs	r0, r3, #16
 8012182:	b289      	uxth	r1, r1
 8012184:	041b      	lsls	r3, r3, #16
 8012186:	4319      	orrs	r1, r3
 8012188:	9b05      	ldr	r3, [sp, #20]
 801218a:	c302      	stmia	r3!, {r1}
 801218c:	9305      	str	r3, [sp, #20]
 801218e:	9b03      	ldr	r3, [sp, #12]
 8012190:	42a3      	cmp	r3, r4
 8012192:	d8e7      	bhi.n	8012164 <__mdiff+0x84>
 8012194:	0039      	movs	r1, r7
 8012196:	9c03      	ldr	r4, [sp, #12]
 8012198:	3115      	adds	r1, #21
 801219a:	2304      	movs	r3, #4
 801219c:	428c      	cmp	r4, r1
 801219e:	d304      	bcc.n	80121aa <__mdiff+0xca>
 80121a0:	1be3      	subs	r3, r4, r7
 80121a2:	3b15      	subs	r3, #21
 80121a4:	089b      	lsrs	r3, r3, #2
 80121a6:	3301      	adds	r3, #1
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	9901      	ldr	r1, [sp, #4]
 80121ac:	18cd      	adds	r5, r1, r3
 80121ae:	9904      	ldr	r1, [sp, #16]
 80121b0:	002e      	movs	r6, r5
 80121b2:	18cb      	adds	r3, r1, r3
 80121b4:	001f      	movs	r7, r3
 80121b6:	9902      	ldr	r1, [sp, #8]
 80121b8:	428e      	cmp	r6, r1
 80121ba:	d311      	bcc.n	80121e0 <__mdiff+0x100>
 80121bc:	9c02      	ldr	r4, [sp, #8]
 80121be:	1ee9      	subs	r1, r5, #3
 80121c0:	2000      	movs	r0, #0
 80121c2:	428c      	cmp	r4, r1
 80121c4:	d304      	bcc.n	80121d0 <__mdiff+0xf0>
 80121c6:	0021      	movs	r1, r4
 80121c8:	3103      	adds	r1, #3
 80121ca:	1b49      	subs	r1, r1, r5
 80121cc:	0889      	lsrs	r1, r1, #2
 80121ce:	0088      	lsls	r0, r1, #2
 80121d0:	181b      	adds	r3, r3, r0
 80121d2:	3b04      	subs	r3, #4
 80121d4:	6819      	ldr	r1, [r3, #0]
 80121d6:	2900      	cmp	r1, #0
 80121d8:	d010      	beq.n	80121fc <__mdiff+0x11c>
 80121da:	9b00      	ldr	r3, [sp, #0]
 80121dc:	6113      	str	r3, [r2, #16]
 80121de:	e798      	b.n	8012112 <__mdiff+0x32>
 80121e0:	4684      	mov	ip, r0
 80121e2:	ce02      	ldmia	r6!, {r1}
 80121e4:	b288      	uxth	r0, r1
 80121e6:	4460      	add	r0, ip
 80121e8:	1400      	asrs	r0, r0, #16
 80121ea:	0c0c      	lsrs	r4, r1, #16
 80121ec:	1904      	adds	r4, r0, r4
 80121ee:	4461      	add	r1, ip
 80121f0:	1420      	asrs	r0, r4, #16
 80121f2:	b289      	uxth	r1, r1
 80121f4:	0424      	lsls	r4, r4, #16
 80121f6:	4321      	orrs	r1, r4
 80121f8:	c702      	stmia	r7!, {r1}
 80121fa:	e7dc      	b.n	80121b6 <__mdiff+0xd6>
 80121fc:	9900      	ldr	r1, [sp, #0]
 80121fe:	3901      	subs	r1, #1
 8012200:	9100      	str	r1, [sp, #0]
 8012202:	e7e6      	b.n	80121d2 <__mdiff+0xf2>
 8012204:	080132f2 	.word	0x080132f2
 8012208:	08013363 	.word	0x08013363
 801220c:	00000237 	.word	0x00000237
 8012210:	00000245 	.word	0x00000245

08012214 <__ulp>:
 8012214:	b510      	push	{r4, lr}
 8012216:	2400      	movs	r4, #0
 8012218:	4b0c      	ldr	r3, [pc, #48]	@ (801224c <__ulp+0x38>)
 801221a:	4a0d      	ldr	r2, [pc, #52]	@ (8012250 <__ulp+0x3c>)
 801221c:	400b      	ands	r3, r1
 801221e:	189b      	adds	r3, r3, r2
 8012220:	42a3      	cmp	r3, r4
 8012222:	dc06      	bgt.n	8012232 <__ulp+0x1e>
 8012224:	425b      	negs	r3, r3
 8012226:	151a      	asrs	r2, r3, #20
 8012228:	2a13      	cmp	r2, #19
 801222a:	dc05      	bgt.n	8012238 <__ulp+0x24>
 801222c:	2380      	movs	r3, #128	@ 0x80
 801222e:	031b      	lsls	r3, r3, #12
 8012230:	4113      	asrs	r3, r2
 8012232:	0019      	movs	r1, r3
 8012234:	0020      	movs	r0, r4
 8012236:	bd10      	pop	{r4, pc}
 8012238:	3a14      	subs	r2, #20
 801223a:	2401      	movs	r4, #1
 801223c:	2a1e      	cmp	r2, #30
 801223e:	dc02      	bgt.n	8012246 <__ulp+0x32>
 8012240:	2480      	movs	r4, #128	@ 0x80
 8012242:	0624      	lsls	r4, r4, #24
 8012244:	40d4      	lsrs	r4, r2
 8012246:	2300      	movs	r3, #0
 8012248:	e7f3      	b.n	8012232 <__ulp+0x1e>
 801224a:	46c0      	nop			@ (mov r8, r8)
 801224c:	7ff00000 	.word	0x7ff00000
 8012250:	fcc00000 	.word	0xfcc00000

08012254 <__b2d>:
 8012254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012256:	0006      	movs	r6, r0
 8012258:	6903      	ldr	r3, [r0, #16]
 801225a:	3614      	adds	r6, #20
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	18f3      	adds	r3, r6, r3
 8012260:	1f1d      	subs	r5, r3, #4
 8012262:	682c      	ldr	r4, [r5, #0]
 8012264:	000f      	movs	r7, r1
 8012266:	0020      	movs	r0, r4
 8012268:	9301      	str	r3, [sp, #4]
 801226a:	f7ff fd43 	bl	8011cf4 <__hi0bits>
 801226e:	2220      	movs	r2, #32
 8012270:	1a12      	subs	r2, r2, r0
 8012272:	603a      	str	r2, [r7, #0]
 8012274:	0003      	movs	r3, r0
 8012276:	4a1c      	ldr	r2, [pc, #112]	@ (80122e8 <__b2d+0x94>)
 8012278:	280a      	cmp	r0, #10
 801227a:	dc15      	bgt.n	80122a8 <__b2d+0x54>
 801227c:	210b      	movs	r1, #11
 801227e:	0027      	movs	r7, r4
 8012280:	1a09      	subs	r1, r1, r0
 8012282:	40cf      	lsrs	r7, r1
 8012284:	433a      	orrs	r2, r7
 8012286:	468c      	mov	ip, r1
 8012288:	0011      	movs	r1, r2
 801228a:	2200      	movs	r2, #0
 801228c:	42ae      	cmp	r6, r5
 801228e:	d202      	bcs.n	8012296 <__b2d+0x42>
 8012290:	9a01      	ldr	r2, [sp, #4]
 8012292:	3a08      	subs	r2, #8
 8012294:	6812      	ldr	r2, [r2, #0]
 8012296:	3315      	adds	r3, #21
 8012298:	409c      	lsls	r4, r3
 801229a:	4663      	mov	r3, ip
 801229c:	0027      	movs	r7, r4
 801229e:	40da      	lsrs	r2, r3
 80122a0:	4317      	orrs	r7, r2
 80122a2:	0038      	movs	r0, r7
 80122a4:	b003      	add	sp, #12
 80122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a8:	2700      	movs	r7, #0
 80122aa:	42ae      	cmp	r6, r5
 80122ac:	d202      	bcs.n	80122b4 <__b2d+0x60>
 80122ae:	9d01      	ldr	r5, [sp, #4]
 80122b0:	3d08      	subs	r5, #8
 80122b2:	682f      	ldr	r7, [r5, #0]
 80122b4:	210b      	movs	r1, #11
 80122b6:	4249      	negs	r1, r1
 80122b8:	468c      	mov	ip, r1
 80122ba:	449c      	add	ip, r3
 80122bc:	2b0b      	cmp	r3, #11
 80122be:	d010      	beq.n	80122e2 <__b2d+0x8e>
 80122c0:	4661      	mov	r1, ip
 80122c2:	2320      	movs	r3, #32
 80122c4:	408c      	lsls	r4, r1
 80122c6:	1a5b      	subs	r3, r3, r1
 80122c8:	0039      	movs	r1, r7
 80122ca:	40d9      	lsrs	r1, r3
 80122cc:	430c      	orrs	r4, r1
 80122ce:	4322      	orrs	r2, r4
 80122d0:	0011      	movs	r1, r2
 80122d2:	2200      	movs	r2, #0
 80122d4:	42b5      	cmp	r5, r6
 80122d6:	d901      	bls.n	80122dc <__b2d+0x88>
 80122d8:	3d04      	subs	r5, #4
 80122da:	682a      	ldr	r2, [r5, #0]
 80122dc:	4664      	mov	r4, ip
 80122de:	40a7      	lsls	r7, r4
 80122e0:	e7dd      	b.n	801229e <__b2d+0x4a>
 80122e2:	4322      	orrs	r2, r4
 80122e4:	0011      	movs	r1, r2
 80122e6:	e7dc      	b.n	80122a2 <__b2d+0x4e>
 80122e8:	3ff00000 	.word	0x3ff00000

080122ec <__d2b>:
 80122ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122ee:	2101      	movs	r1, #1
 80122f0:	0016      	movs	r6, r2
 80122f2:	001f      	movs	r7, r3
 80122f4:	f7ff fc06 	bl	8011b04 <_Balloc>
 80122f8:	1e04      	subs	r4, r0, #0
 80122fa:	d105      	bne.n	8012308 <__d2b+0x1c>
 80122fc:	0022      	movs	r2, r4
 80122fe:	4b25      	ldr	r3, [pc, #148]	@ (8012394 <__d2b+0xa8>)
 8012300:	4825      	ldr	r0, [pc, #148]	@ (8012398 <__d2b+0xac>)
 8012302:	4926      	ldr	r1, [pc, #152]	@ (801239c <__d2b+0xb0>)
 8012304:	f000 fb02 	bl	801290c <__assert_func>
 8012308:	033b      	lsls	r3, r7, #12
 801230a:	007d      	lsls	r5, r7, #1
 801230c:	0b1b      	lsrs	r3, r3, #12
 801230e:	0d6d      	lsrs	r5, r5, #21
 8012310:	d002      	beq.n	8012318 <__d2b+0x2c>
 8012312:	2280      	movs	r2, #128	@ 0x80
 8012314:	0352      	lsls	r2, r2, #13
 8012316:	4313      	orrs	r3, r2
 8012318:	9301      	str	r3, [sp, #4]
 801231a:	2e00      	cmp	r6, #0
 801231c:	d025      	beq.n	801236a <__d2b+0x7e>
 801231e:	4668      	mov	r0, sp
 8012320:	9600      	str	r6, [sp, #0]
 8012322:	f7ff fd08 	bl	8011d36 <__lo0bits>
 8012326:	9b01      	ldr	r3, [sp, #4]
 8012328:	9900      	ldr	r1, [sp, #0]
 801232a:	2800      	cmp	r0, #0
 801232c:	d01b      	beq.n	8012366 <__d2b+0x7a>
 801232e:	2220      	movs	r2, #32
 8012330:	001e      	movs	r6, r3
 8012332:	1a12      	subs	r2, r2, r0
 8012334:	4096      	lsls	r6, r2
 8012336:	0032      	movs	r2, r6
 8012338:	40c3      	lsrs	r3, r0
 801233a:	430a      	orrs	r2, r1
 801233c:	6162      	str	r2, [r4, #20]
 801233e:	9301      	str	r3, [sp, #4]
 8012340:	9e01      	ldr	r6, [sp, #4]
 8012342:	61a6      	str	r6, [r4, #24]
 8012344:	1e73      	subs	r3, r6, #1
 8012346:	419e      	sbcs	r6, r3
 8012348:	3601      	adds	r6, #1
 801234a:	6126      	str	r6, [r4, #16]
 801234c:	2d00      	cmp	r5, #0
 801234e:	d014      	beq.n	801237a <__d2b+0x8e>
 8012350:	2635      	movs	r6, #53	@ 0x35
 8012352:	4b13      	ldr	r3, [pc, #76]	@ (80123a0 <__d2b+0xb4>)
 8012354:	18ed      	adds	r5, r5, r3
 8012356:	9b08      	ldr	r3, [sp, #32]
 8012358:	182d      	adds	r5, r5, r0
 801235a:	601d      	str	r5, [r3, #0]
 801235c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801235e:	1a36      	subs	r6, r6, r0
 8012360:	601e      	str	r6, [r3, #0]
 8012362:	0020      	movs	r0, r4
 8012364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012366:	6161      	str	r1, [r4, #20]
 8012368:	e7ea      	b.n	8012340 <__d2b+0x54>
 801236a:	a801      	add	r0, sp, #4
 801236c:	f7ff fce3 	bl	8011d36 <__lo0bits>
 8012370:	9b01      	ldr	r3, [sp, #4]
 8012372:	2601      	movs	r6, #1
 8012374:	6163      	str	r3, [r4, #20]
 8012376:	3020      	adds	r0, #32
 8012378:	e7e7      	b.n	801234a <__d2b+0x5e>
 801237a:	4b0a      	ldr	r3, [pc, #40]	@ (80123a4 <__d2b+0xb8>)
 801237c:	18c0      	adds	r0, r0, r3
 801237e:	9b08      	ldr	r3, [sp, #32]
 8012380:	6018      	str	r0, [r3, #0]
 8012382:	4b09      	ldr	r3, [pc, #36]	@ (80123a8 <__d2b+0xbc>)
 8012384:	18f3      	adds	r3, r6, r3
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	18e3      	adds	r3, r4, r3
 801238a:	6958      	ldr	r0, [r3, #20]
 801238c:	f7ff fcb2 	bl	8011cf4 <__hi0bits>
 8012390:	0176      	lsls	r6, r6, #5
 8012392:	e7e3      	b.n	801235c <__d2b+0x70>
 8012394:	080132f2 	.word	0x080132f2
 8012398:	08013363 	.word	0x08013363
 801239c:	0000030f 	.word	0x0000030f
 80123a0:	fffffbcd 	.word	0xfffffbcd
 80123a4:	fffffbce 	.word	0xfffffbce
 80123a8:	3fffffff 	.word	0x3fffffff

080123ac <__ratio>:
 80123ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ae:	b087      	sub	sp, #28
 80123b0:	000f      	movs	r7, r1
 80123b2:	a904      	add	r1, sp, #16
 80123b4:	0006      	movs	r6, r0
 80123b6:	f7ff ff4d 	bl	8012254 <__b2d>
 80123ba:	9000      	str	r0, [sp, #0]
 80123bc:	9101      	str	r1, [sp, #4]
 80123be:	9b00      	ldr	r3, [sp, #0]
 80123c0:	9c01      	ldr	r4, [sp, #4]
 80123c2:	0038      	movs	r0, r7
 80123c4:	a905      	add	r1, sp, #20
 80123c6:	9302      	str	r3, [sp, #8]
 80123c8:	9403      	str	r4, [sp, #12]
 80123ca:	f7ff ff43 	bl	8012254 <__b2d>
 80123ce:	000d      	movs	r5, r1
 80123d0:	0002      	movs	r2, r0
 80123d2:	000b      	movs	r3, r1
 80123d4:	6930      	ldr	r0, [r6, #16]
 80123d6:	6939      	ldr	r1, [r7, #16]
 80123d8:	9e04      	ldr	r6, [sp, #16]
 80123da:	1a40      	subs	r0, r0, r1
 80123dc:	9905      	ldr	r1, [sp, #20]
 80123de:	0140      	lsls	r0, r0, #5
 80123e0:	1a71      	subs	r1, r6, r1
 80123e2:	1841      	adds	r1, r0, r1
 80123e4:	0508      	lsls	r0, r1, #20
 80123e6:	2900      	cmp	r1, #0
 80123e8:	dd08      	ble.n	80123fc <__ratio+0x50>
 80123ea:	9901      	ldr	r1, [sp, #4]
 80123ec:	1841      	adds	r1, r0, r1
 80123ee:	9103      	str	r1, [sp, #12]
 80123f0:	9802      	ldr	r0, [sp, #8]
 80123f2:	9903      	ldr	r1, [sp, #12]
 80123f4:	f7ee fc88 	bl	8000d08 <__aeabi_ddiv>
 80123f8:	b007      	add	sp, #28
 80123fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123fc:	1a2b      	subs	r3, r5, r0
 80123fe:	e7f7      	b.n	80123f0 <__ratio+0x44>

08012400 <__copybits>:
 8012400:	b570      	push	{r4, r5, r6, lr}
 8012402:	0014      	movs	r4, r2
 8012404:	0005      	movs	r5, r0
 8012406:	3901      	subs	r1, #1
 8012408:	6913      	ldr	r3, [r2, #16]
 801240a:	1149      	asrs	r1, r1, #5
 801240c:	3101      	adds	r1, #1
 801240e:	0089      	lsls	r1, r1, #2
 8012410:	3414      	adds	r4, #20
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	1841      	adds	r1, r0, r1
 8012416:	18e3      	adds	r3, r4, r3
 8012418:	42a3      	cmp	r3, r4
 801241a:	d80d      	bhi.n	8012438 <__copybits+0x38>
 801241c:	0014      	movs	r4, r2
 801241e:	3411      	adds	r4, #17
 8012420:	2500      	movs	r5, #0
 8012422:	42a3      	cmp	r3, r4
 8012424:	d303      	bcc.n	801242e <__copybits+0x2e>
 8012426:	1a9b      	subs	r3, r3, r2
 8012428:	3b11      	subs	r3, #17
 801242a:	089b      	lsrs	r3, r3, #2
 801242c:	009d      	lsls	r5, r3, #2
 801242e:	2300      	movs	r3, #0
 8012430:	1940      	adds	r0, r0, r5
 8012432:	4281      	cmp	r1, r0
 8012434:	d803      	bhi.n	801243e <__copybits+0x3e>
 8012436:	bd70      	pop	{r4, r5, r6, pc}
 8012438:	cc40      	ldmia	r4!, {r6}
 801243a:	c540      	stmia	r5!, {r6}
 801243c:	e7ec      	b.n	8012418 <__copybits+0x18>
 801243e:	c008      	stmia	r0!, {r3}
 8012440:	e7f7      	b.n	8012432 <__copybits+0x32>

08012442 <__any_on>:
 8012442:	0002      	movs	r2, r0
 8012444:	6900      	ldr	r0, [r0, #16]
 8012446:	b510      	push	{r4, lr}
 8012448:	3214      	adds	r2, #20
 801244a:	114b      	asrs	r3, r1, #5
 801244c:	4298      	cmp	r0, r3
 801244e:	db13      	blt.n	8012478 <__any_on+0x36>
 8012450:	dd0c      	ble.n	801246c <__any_on+0x2a>
 8012452:	241f      	movs	r4, #31
 8012454:	0008      	movs	r0, r1
 8012456:	4020      	ands	r0, r4
 8012458:	4221      	tst	r1, r4
 801245a:	d007      	beq.n	801246c <__any_on+0x2a>
 801245c:	0099      	lsls	r1, r3, #2
 801245e:	588c      	ldr	r4, [r1, r2]
 8012460:	0021      	movs	r1, r4
 8012462:	40c1      	lsrs	r1, r0
 8012464:	4081      	lsls	r1, r0
 8012466:	2001      	movs	r0, #1
 8012468:	428c      	cmp	r4, r1
 801246a:	d104      	bne.n	8012476 <__any_on+0x34>
 801246c:	009b      	lsls	r3, r3, #2
 801246e:	18d3      	adds	r3, r2, r3
 8012470:	4293      	cmp	r3, r2
 8012472:	d803      	bhi.n	801247c <__any_on+0x3a>
 8012474:	2000      	movs	r0, #0
 8012476:	bd10      	pop	{r4, pc}
 8012478:	0003      	movs	r3, r0
 801247a:	e7f7      	b.n	801246c <__any_on+0x2a>
 801247c:	3b04      	subs	r3, #4
 801247e:	6819      	ldr	r1, [r3, #0]
 8012480:	2900      	cmp	r1, #0
 8012482:	d0f5      	beq.n	8012470 <__any_on+0x2e>
 8012484:	2001      	movs	r0, #1
 8012486:	e7f6      	b.n	8012476 <__any_on+0x34>

08012488 <__ascii_wctomb>:
 8012488:	0003      	movs	r3, r0
 801248a:	1e08      	subs	r0, r1, #0
 801248c:	d005      	beq.n	801249a <__ascii_wctomb+0x12>
 801248e:	2aff      	cmp	r2, #255	@ 0xff
 8012490:	d904      	bls.n	801249c <__ascii_wctomb+0x14>
 8012492:	228a      	movs	r2, #138	@ 0x8a
 8012494:	2001      	movs	r0, #1
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	4240      	negs	r0, r0
 801249a:	4770      	bx	lr
 801249c:	2001      	movs	r0, #1
 801249e:	700a      	strb	r2, [r1, #0]
 80124a0:	e7fb      	b.n	801249a <__ascii_wctomb+0x12>
	...

080124a4 <__ssputs_r>:
 80124a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124a6:	688e      	ldr	r6, [r1, #8]
 80124a8:	b085      	sub	sp, #20
 80124aa:	001f      	movs	r7, r3
 80124ac:	000c      	movs	r4, r1
 80124ae:	680b      	ldr	r3, [r1, #0]
 80124b0:	9002      	str	r0, [sp, #8]
 80124b2:	9203      	str	r2, [sp, #12]
 80124b4:	42be      	cmp	r6, r7
 80124b6:	d830      	bhi.n	801251a <__ssputs_r+0x76>
 80124b8:	210c      	movs	r1, #12
 80124ba:	5e62      	ldrsh	r2, [r4, r1]
 80124bc:	2190      	movs	r1, #144	@ 0x90
 80124be:	00c9      	lsls	r1, r1, #3
 80124c0:	420a      	tst	r2, r1
 80124c2:	d028      	beq.n	8012516 <__ssputs_r+0x72>
 80124c4:	2003      	movs	r0, #3
 80124c6:	6921      	ldr	r1, [r4, #16]
 80124c8:	1a5b      	subs	r3, r3, r1
 80124ca:	9301      	str	r3, [sp, #4]
 80124cc:	6963      	ldr	r3, [r4, #20]
 80124ce:	4343      	muls	r3, r0
 80124d0:	9801      	ldr	r0, [sp, #4]
 80124d2:	0fdd      	lsrs	r5, r3, #31
 80124d4:	18ed      	adds	r5, r5, r3
 80124d6:	1c7b      	adds	r3, r7, #1
 80124d8:	181b      	adds	r3, r3, r0
 80124da:	106d      	asrs	r5, r5, #1
 80124dc:	42ab      	cmp	r3, r5
 80124de:	d900      	bls.n	80124e2 <__ssputs_r+0x3e>
 80124e0:	001d      	movs	r5, r3
 80124e2:	0552      	lsls	r2, r2, #21
 80124e4:	d528      	bpl.n	8012538 <__ssputs_r+0x94>
 80124e6:	0029      	movs	r1, r5
 80124e8:	9802      	ldr	r0, [sp, #8]
 80124ea:	f7ff fa69 	bl	80119c0 <_malloc_r>
 80124ee:	1e06      	subs	r6, r0, #0
 80124f0:	d02c      	beq.n	801254c <__ssputs_r+0xa8>
 80124f2:	9a01      	ldr	r2, [sp, #4]
 80124f4:	6921      	ldr	r1, [r4, #16]
 80124f6:	f7fe f80d 	bl	8010514 <memcpy>
 80124fa:	89a2      	ldrh	r2, [r4, #12]
 80124fc:	4b18      	ldr	r3, [pc, #96]	@ (8012560 <__ssputs_r+0xbc>)
 80124fe:	401a      	ands	r2, r3
 8012500:	2380      	movs	r3, #128	@ 0x80
 8012502:	4313      	orrs	r3, r2
 8012504:	81a3      	strh	r3, [r4, #12]
 8012506:	9b01      	ldr	r3, [sp, #4]
 8012508:	6126      	str	r6, [r4, #16]
 801250a:	18f6      	adds	r6, r6, r3
 801250c:	6026      	str	r6, [r4, #0]
 801250e:	003e      	movs	r6, r7
 8012510:	6165      	str	r5, [r4, #20]
 8012512:	1aed      	subs	r5, r5, r3
 8012514:	60a5      	str	r5, [r4, #8]
 8012516:	42be      	cmp	r6, r7
 8012518:	d900      	bls.n	801251c <__ssputs_r+0x78>
 801251a:	003e      	movs	r6, r7
 801251c:	0032      	movs	r2, r6
 801251e:	9903      	ldr	r1, [sp, #12]
 8012520:	6820      	ldr	r0, [r4, #0]
 8012522:	f000 f9ce 	bl	80128c2 <memmove>
 8012526:	2000      	movs	r0, #0
 8012528:	68a3      	ldr	r3, [r4, #8]
 801252a:	1b9b      	subs	r3, r3, r6
 801252c:	60a3      	str	r3, [r4, #8]
 801252e:	6823      	ldr	r3, [r4, #0]
 8012530:	199b      	adds	r3, r3, r6
 8012532:	6023      	str	r3, [r4, #0]
 8012534:	b005      	add	sp, #20
 8012536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012538:	002a      	movs	r2, r5
 801253a:	9802      	ldr	r0, [sp, #8]
 801253c:	f000 fa31 	bl	80129a2 <_realloc_r>
 8012540:	1e06      	subs	r6, r0, #0
 8012542:	d1e0      	bne.n	8012506 <__ssputs_r+0x62>
 8012544:	6921      	ldr	r1, [r4, #16]
 8012546:	9802      	ldr	r0, [sp, #8]
 8012548:	f7fe fe6a 	bl	8011220 <_free_r>
 801254c:	230c      	movs	r3, #12
 801254e:	2001      	movs	r0, #1
 8012550:	9a02      	ldr	r2, [sp, #8]
 8012552:	4240      	negs	r0, r0
 8012554:	6013      	str	r3, [r2, #0]
 8012556:	89a2      	ldrh	r2, [r4, #12]
 8012558:	3334      	adds	r3, #52	@ 0x34
 801255a:	4313      	orrs	r3, r2
 801255c:	81a3      	strh	r3, [r4, #12]
 801255e:	e7e9      	b.n	8012534 <__ssputs_r+0x90>
 8012560:	fffffb7f 	.word	0xfffffb7f

08012564 <_svfiprintf_r>:
 8012564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012566:	b0a1      	sub	sp, #132	@ 0x84
 8012568:	9003      	str	r0, [sp, #12]
 801256a:	001d      	movs	r5, r3
 801256c:	898b      	ldrh	r3, [r1, #12]
 801256e:	000f      	movs	r7, r1
 8012570:	0016      	movs	r6, r2
 8012572:	061b      	lsls	r3, r3, #24
 8012574:	d511      	bpl.n	801259a <_svfiprintf_r+0x36>
 8012576:	690b      	ldr	r3, [r1, #16]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d10e      	bne.n	801259a <_svfiprintf_r+0x36>
 801257c:	2140      	movs	r1, #64	@ 0x40
 801257e:	f7ff fa1f 	bl	80119c0 <_malloc_r>
 8012582:	6038      	str	r0, [r7, #0]
 8012584:	6138      	str	r0, [r7, #16]
 8012586:	2800      	cmp	r0, #0
 8012588:	d105      	bne.n	8012596 <_svfiprintf_r+0x32>
 801258a:	230c      	movs	r3, #12
 801258c:	9a03      	ldr	r2, [sp, #12]
 801258e:	6013      	str	r3, [r2, #0]
 8012590:	2001      	movs	r0, #1
 8012592:	4240      	negs	r0, r0
 8012594:	e0cf      	b.n	8012736 <_svfiprintf_r+0x1d2>
 8012596:	2340      	movs	r3, #64	@ 0x40
 8012598:	617b      	str	r3, [r7, #20]
 801259a:	2300      	movs	r3, #0
 801259c:	ac08      	add	r4, sp, #32
 801259e:	6163      	str	r3, [r4, #20]
 80125a0:	3320      	adds	r3, #32
 80125a2:	7663      	strb	r3, [r4, #25]
 80125a4:	3310      	adds	r3, #16
 80125a6:	76a3      	strb	r3, [r4, #26]
 80125a8:	9507      	str	r5, [sp, #28]
 80125aa:	0035      	movs	r5, r6
 80125ac:	782b      	ldrb	r3, [r5, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d001      	beq.n	80125b6 <_svfiprintf_r+0x52>
 80125b2:	2b25      	cmp	r3, #37	@ 0x25
 80125b4:	d148      	bne.n	8012648 <_svfiprintf_r+0xe4>
 80125b6:	1bab      	subs	r3, r5, r6
 80125b8:	9305      	str	r3, [sp, #20]
 80125ba:	42b5      	cmp	r5, r6
 80125bc:	d00b      	beq.n	80125d6 <_svfiprintf_r+0x72>
 80125be:	0032      	movs	r2, r6
 80125c0:	0039      	movs	r1, r7
 80125c2:	9803      	ldr	r0, [sp, #12]
 80125c4:	f7ff ff6e 	bl	80124a4 <__ssputs_r>
 80125c8:	3001      	adds	r0, #1
 80125ca:	d100      	bne.n	80125ce <_svfiprintf_r+0x6a>
 80125cc:	e0ae      	b.n	801272c <_svfiprintf_r+0x1c8>
 80125ce:	6963      	ldr	r3, [r4, #20]
 80125d0:	9a05      	ldr	r2, [sp, #20]
 80125d2:	189b      	adds	r3, r3, r2
 80125d4:	6163      	str	r3, [r4, #20]
 80125d6:	782b      	ldrb	r3, [r5, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d100      	bne.n	80125de <_svfiprintf_r+0x7a>
 80125dc:	e0a6      	b.n	801272c <_svfiprintf_r+0x1c8>
 80125de:	2201      	movs	r2, #1
 80125e0:	2300      	movs	r3, #0
 80125e2:	4252      	negs	r2, r2
 80125e4:	6062      	str	r2, [r4, #4]
 80125e6:	a904      	add	r1, sp, #16
 80125e8:	3254      	adds	r2, #84	@ 0x54
 80125ea:	1852      	adds	r2, r2, r1
 80125ec:	1c6e      	adds	r6, r5, #1
 80125ee:	6023      	str	r3, [r4, #0]
 80125f0:	60e3      	str	r3, [r4, #12]
 80125f2:	60a3      	str	r3, [r4, #8]
 80125f4:	7013      	strb	r3, [r2, #0]
 80125f6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80125f8:	4b54      	ldr	r3, [pc, #336]	@ (801274c <_svfiprintf_r+0x1e8>)
 80125fa:	2205      	movs	r2, #5
 80125fc:	0018      	movs	r0, r3
 80125fe:	7831      	ldrb	r1, [r6, #0]
 8012600:	9305      	str	r3, [sp, #20]
 8012602:	f7fd ff7c 	bl	80104fe <memchr>
 8012606:	1c75      	adds	r5, r6, #1
 8012608:	2800      	cmp	r0, #0
 801260a:	d11f      	bne.n	801264c <_svfiprintf_r+0xe8>
 801260c:	6822      	ldr	r2, [r4, #0]
 801260e:	06d3      	lsls	r3, r2, #27
 8012610:	d504      	bpl.n	801261c <_svfiprintf_r+0xb8>
 8012612:	2353      	movs	r3, #83	@ 0x53
 8012614:	a904      	add	r1, sp, #16
 8012616:	185b      	adds	r3, r3, r1
 8012618:	2120      	movs	r1, #32
 801261a:	7019      	strb	r1, [r3, #0]
 801261c:	0713      	lsls	r3, r2, #28
 801261e:	d504      	bpl.n	801262a <_svfiprintf_r+0xc6>
 8012620:	2353      	movs	r3, #83	@ 0x53
 8012622:	a904      	add	r1, sp, #16
 8012624:	185b      	adds	r3, r3, r1
 8012626:	212b      	movs	r1, #43	@ 0x2b
 8012628:	7019      	strb	r1, [r3, #0]
 801262a:	7833      	ldrb	r3, [r6, #0]
 801262c:	2b2a      	cmp	r3, #42	@ 0x2a
 801262e:	d016      	beq.n	801265e <_svfiprintf_r+0xfa>
 8012630:	0035      	movs	r5, r6
 8012632:	2100      	movs	r1, #0
 8012634:	200a      	movs	r0, #10
 8012636:	68e3      	ldr	r3, [r4, #12]
 8012638:	782a      	ldrb	r2, [r5, #0]
 801263a:	1c6e      	adds	r6, r5, #1
 801263c:	3a30      	subs	r2, #48	@ 0x30
 801263e:	2a09      	cmp	r2, #9
 8012640:	d950      	bls.n	80126e4 <_svfiprintf_r+0x180>
 8012642:	2900      	cmp	r1, #0
 8012644:	d111      	bne.n	801266a <_svfiprintf_r+0x106>
 8012646:	e017      	b.n	8012678 <_svfiprintf_r+0x114>
 8012648:	3501      	adds	r5, #1
 801264a:	e7af      	b.n	80125ac <_svfiprintf_r+0x48>
 801264c:	9b05      	ldr	r3, [sp, #20]
 801264e:	6822      	ldr	r2, [r4, #0]
 8012650:	1ac0      	subs	r0, r0, r3
 8012652:	2301      	movs	r3, #1
 8012654:	4083      	lsls	r3, r0
 8012656:	4313      	orrs	r3, r2
 8012658:	002e      	movs	r6, r5
 801265a:	6023      	str	r3, [r4, #0]
 801265c:	e7cc      	b.n	80125f8 <_svfiprintf_r+0x94>
 801265e:	9b07      	ldr	r3, [sp, #28]
 8012660:	1d19      	adds	r1, r3, #4
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	9107      	str	r1, [sp, #28]
 8012666:	2b00      	cmp	r3, #0
 8012668:	db01      	blt.n	801266e <_svfiprintf_r+0x10a>
 801266a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801266c:	e004      	b.n	8012678 <_svfiprintf_r+0x114>
 801266e:	425b      	negs	r3, r3
 8012670:	60e3      	str	r3, [r4, #12]
 8012672:	2302      	movs	r3, #2
 8012674:	4313      	orrs	r3, r2
 8012676:	6023      	str	r3, [r4, #0]
 8012678:	782b      	ldrb	r3, [r5, #0]
 801267a:	2b2e      	cmp	r3, #46	@ 0x2e
 801267c:	d10c      	bne.n	8012698 <_svfiprintf_r+0x134>
 801267e:	786b      	ldrb	r3, [r5, #1]
 8012680:	2b2a      	cmp	r3, #42	@ 0x2a
 8012682:	d134      	bne.n	80126ee <_svfiprintf_r+0x18a>
 8012684:	9b07      	ldr	r3, [sp, #28]
 8012686:	3502      	adds	r5, #2
 8012688:	1d1a      	adds	r2, r3, #4
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	9207      	str	r2, [sp, #28]
 801268e:	2b00      	cmp	r3, #0
 8012690:	da01      	bge.n	8012696 <_svfiprintf_r+0x132>
 8012692:	2301      	movs	r3, #1
 8012694:	425b      	negs	r3, r3
 8012696:	9309      	str	r3, [sp, #36]	@ 0x24
 8012698:	4e2d      	ldr	r6, [pc, #180]	@ (8012750 <_svfiprintf_r+0x1ec>)
 801269a:	2203      	movs	r2, #3
 801269c:	0030      	movs	r0, r6
 801269e:	7829      	ldrb	r1, [r5, #0]
 80126a0:	f7fd ff2d 	bl	80104fe <memchr>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d006      	beq.n	80126b6 <_svfiprintf_r+0x152>
 80126a8:	2340      	movs	r3, #64	@ 0x40
 80126aa:	1b80      	subs	r0, r0, r6
 80126ac:	4083      	lsls	r3, r0
 80126ae:	6822      	ldr	r2, [r4, #0]
 80126b0:	3501      	adds	r5, #1
 80126b2:	4313      	orrs	r3, r2
 80126b4:	6023      	str	r3, [r4, #0]
 80126b6:	7829      	ldrb	r1, [r5, #0]
 80126b8:	2206      	movs	r2, #6
 80126ba:	4826      	ldr	r0, [pc, #152]	@ (8012754 <_svfiprintf_r+0x1f0>)
 80126bc:	1c6e      	adds	r6, r5, #1
 80126be:	7621      	strb	r1, [r4, #24]
 80126c0:	f7fd ff1d 	bl	80104fe <memchr>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d038      	beq.n	801273a <_svfiprintf_r+0x1d6>
 80126c8:	4b23      	ldr	r3, [pc, #140]	@ (8012758 <_svfiprintf_r+0x1f4>)
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d122      	bne.n	8012714 <_svfiprintf_r+0x1b0>
 80126ce:	2207      	movs	r2, #7
 80126d0:	9b07      	ldr	r3, [sp, #28]
 80126d2:	3307      	adds	r3, #7
 80126d4:	4393      	bics	r3, r2
 80126d6:	3308      	adds	r3, #8
 80126d8:	9307      	str	r3, [sp, #28]
 80126da:	6963      	ldr	r3, [r4, #20]
 80126dc:	9a04      	ldr	r2, [sp, #16]
 80126de:	189b      	adds	r3, r3, r2
 80126e0:	6163      	str	r3, [r4, #20]
 80126e2:	e762      	b.n	80125aa <_svfiprintf_r+0x46>
 80126e4:	4343      	muls	r3, r0
 80126e6:	0035      	movs	r5, r6
 80126e8:	2101      	movs	r1, #1
 80126ea:	189b      	adds	r3, r3, r2
 80126ec:	e7a4      	b.n	8012638 <_svfiprintf_r+0xd4>
 80126ee:	2300      	movs	r3, #0
 80126f0:	200a      	movs	r0, #10
 80126f2:	0019      	movs	r1, r3
 80126f4:	3501      	adds	r5, #1
 80126f6:	6063      	str	r3, [r4, #4]
 80126f8:	782a      	ldrb	r2, [r5, #0]
 80126fa:	1c6e      	adds	r6, r5, #1
 80126fc:	3a30      	subs	r2, #48	@ 0x30
 80126fe:	2a09      	cmp	r2, #9
 8012700:	d903      	bls.n	801270a <_svfiprintf_r+0x1a6>
 8012702:	2b00      	cmp	r3, #0
 8012704:	d0c8      	beq.n	8012698 <_svfiprintf_r+0x134>
 8012706:	9109      	str	r1, [sp, #36]	@ 0x24
 8012708:	e7c6      	b.n	8012698 <_svfiprintf_r+0x134>
 801270a:	4341      	muls	r1, r0
 801270c:	0035      	movs	r5, r6
 801270e:	2301      	movs	r3, #1
 8012710:	1889      	adds	r1, r1, r2
 8012712:	e7f1      	b.n	80126f8 <_svfiprintf_r+0x194>
 8012714:	aa07      	add	r2, sp, #28
 8012716:	9200      	str	r2, [sp, #0]
 8012718:	0021      	movs	r1, r4
 801271a:	003a      	movs	r2, r7
 801271c:	4b0f      	ldr	r3, [pc, #60]	@ (801275c <_svfiprintf_r+0x1f8>)
 801271e:	9803      	ldr	r0, [sp, #12]
 8012720:	f7fd f954 	bl	800f9cc <_printf_float>
 8012724:	9004      	str	r0, [sp, #16]
 8012726:	9b04      	ldr	r3, [sp, #16]
 8012728:	3301      	adds	r3, #1
 801272a:	d1d6      	bne.n	80126da <_svfiprintf_r+0x176>
 801272c:	89bb      	ldrh	r3, [r7, #12]
 801272e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012730:	065b      	lsls	r3, r3, #25
 8012732:	d500      	bpl.n	8012736 <_svfiprintf_r+0x1d2>
 8012734:	e72c      	b.n	8012590 <_svfiprintf_r+0x2c>
 8012736:	b021      	add	sp, #132	@ 0x84
 8012738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801273a:	aa07      	add	r2, sp, #28
 801273c:	9200      	str	r2, [sp, #0]
 801273e:	0021      	movs	r1, r4
 8012740:	003a      	movs	r2, r7
 8012742:	4b06      	ldr	r3, [pc, #24]	@ (801275c <_svfiprintf_r+0x1f8>)
 8012744:	9803      	ldr	r0, [sp, #12]
 8012746:	f7fd fbef 	bl	800ff28 <_printf_i>
 801274a:	e7eb      	b.n	8012724 <_svfiprintf_r+0x1c0>
 801274c:	080133bc 	.word	0x080133bc
 8012750:	080133c2 	.word	0x080133c2
 8012754:	080133c6 	.word	0x080133c6
 8012758:	0800f9cd 	.word	0x0800f9cd
 801275c:	080124a5 	.word	0x080124a5

08012760 <__sflush_r>:
 8012760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012762:	220c      	movs	r2, #12
 8012764:	5e8b      	ldrsh	r3, [r1, r2]
 8012766:	0005      	movs	r5, r0
 8012768:	000c      	movs	r4, r1
 801276a:	071a      	lsls	r2, r3, #28
 801276c:	d456      	bmi.n	801281c <__sflush_r+0xbc>
 801276e:	684a      	ldr	r2, [r1, #4]
 8012770:	2a00      	cmp	r2, #0
 8012772:	dc02      	bgt.n	801277a <__sflush_r+0x1a>
 8012774:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8012776:	2a00      	cmp	r2, #0
 8012778:	dd4e      	ble.n	8012818 <__sflush_r+0xb8>
 801277a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801277c:	2f00      	cmp	r7, #0
 801277e:	d04b      	beq.n	8012818 <__sflush_r+0xb8>
 8012780:	2200      	movs	r2, #0
 8012782:	2080      	movs	r0, #128	@ 0x80
 8012784:	682e      	ldr	r6, [r5, #0]
 8012786:	602a      	str	r2, [r5, #0]
 8012788:	001a      	movs	r2, r3
 801278a:	0140      	lsls	r0, r0, #5
 801278c:	6a21      	ldr	r1, [r4, #32]
 801278e:	4002      	ands	r2, r0
 8012790:	4203      	tst	r3, r0
 8012792:	d033      	beq.n	80127fc <__sflush_r+0x9c>
 8012794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	075b      	lsls	r3, r3, #29
 801279a:	d506      	bpl.n	80127aa <__sflush_r+0x4a>
 801279c:	6863      	ldr	r3, [r4, #4]
 801279e:	1ad2      	subs	r2, r2, r3
 80127a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <__sflush_r+0x4a>
 80127a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127a8:	1ad2      	subs	r2, r2, r3
 80127aa:	2300      	movs	r3, #0
 80127ac:	0028      	movs	r0, r5
 80127ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80127b0:	6a21      	ldr	r1, [r4, #32]
 80127b2:	47b8      	blx	r7
 80127b4:	89a2      	ldrh	r2, [r4, #12]
 80127b6:	1c43      	adds	r3, r0, #1
 80127b8:	d106      	bne.n	80127c8 <__sflush_r+0x68>
 80127ba:	6829      	ldr	r1, [r5, #0]
 80127bc:	291d      	cmp	r1, #29
 80127be:	d846      	bhi.n	801284e <__sflush_r+0xee>
 80127c0:	4b29      	ldr	r3, [pc, #164]	@ (8012868 <__sflush_r+0x108>)
 80127c2:	40cb      	lsrs	r3, r1
 80127c4:	07db      	lsls	r3, r3, #31
 80127c6:	d542      	bpl.n	801284e <__sflush_r+0xee>
 80127c8:	2300      	movs	r3, #0
 80127ca:	6063      	str	r3, [r4, #4]
 80127cc:	6923      	ldr	r3, [r4, #16]
 80127ce:	6023      	str	r3, [r4, #0]
 80127d0:	04d2      	lsls	r2, r2, #19
 80127d2:	d505      	bpl.n	80127e0 <__sflush_r+0x80>
 80127d4:	1c43      	adds	r3, r0, #1
 80127d6:	d102      	bne.n	80127de <__sflush_r+0x7e>
 80127d8:	682b      	ldr	r3, [r5, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d100      	bne.n	80127e0 <__sflush_r+0x80>
 80127de:	6560      	str	r0, [r4, #84]	@ 0x54
 80127e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127e2:	602e      	str	r6, [r5, #0]
 80127e4:	2900      	cmp	r1, #0
 80127e6:	d017      	beq.n	8012818 <__sflush_r+0xb8>
 80127e8:	0023      	movs	r3, r4
 80127ea:	3344      	adds	r3, #68	@ 0x44
 80127ec:	4299      	cmp	r1, r3
 80127ee:	d002      	beq.n	80127f6 <__sflush_r+0x96>
 80127f0:	0028      	movs	r0, r5
 80127f2:	f7fe fd15 	bl	8011220 <_free_r>
 80127f6:	2300      	movs	r3, #0
 80127f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80127fa:	e00d      	b.n	8012818 <__sflush_r+0xb8>
 80127fc:	2301      	movs	r3, #1
 80127fe:	0028      	movs	r0, r5
 8012800:	47b8      	blx	r7
 8012802:	0002      	movs	r2, r0
 8012804:	1c43      	adds	r3, r0, #1
 8012806:	d1c6      	bne.n	8012796 <__sflush_r+0x36>
 8012808:	682b      	ldr	r3, [r5, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d0c3      	beq.n	8012796 <__sflush_r+0x36>
 801280e:	2b1d      	cmp	r3, #29
 8012810:	d001      	beq.n	8012816 <__sflush_r+0xb6>
 8012812:	2b16      	cmp	r3, #22
 8012814:	d11a      	bne.n	801284c <__sflush_r+0xec>
 8012816:	602e      	str	r6, [r5, #0]
 8012818:	2000      	movs	r0, #0
 801281a:	e01e      	b.n	801285a <__sflush_r+0xfa>
 801281c:	690e      	ldr	r6, [r1, #16]
 801281e:	2e00      	cmp	r6, #0
 8012820:	d0fa      	beq.n	8012818 <__sflush_r+0xb8>
 8012822:	680f      	ldr	r7, [r1, #0]
 8012824:	600e      	str	r6, [r1, #0]
 8012826:	1bba      	subs	r2, r7, r6
 8012828:	9201      	str	r2, [sp, #4]
 801282a:	2200      	movs	r2, #0
 801282c:	079b      	lsls	r3, r3, #30
 801282e:	d100      	bne.n	8012832 <__sflush_r+0xd2>
 8012830:	694a      	ldr	r2, [r1, #20]
 8012832:	60a2      	str	r2, [r4, #8]
 8012834:	9b01      	ldr	r3, [sp, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	ddee      	ble.n	8012818 <__sflush_r+0xb8>
 801283a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801283c:	0032      	movs	r2, r6
 801283e:	001f      	movs	r7, r3
 8012840:	0028      	movs	r0, r5
 8012842:	9b01      	ldr	r3, [sp, #4]
 8012844:	6a21      	ldr	r1, [r4, #32]
 8012846:	47b8      	blx	r7
 8012848:	2800      	cmp	r0, #0
 801284a:	dc07      	bgt.n	801285c <__sflush_r+0xfc>
 801284c:	89a2      	ldrh	r2, [r4, #12]
 801284e:	2340      	movs	r3, #64	@ 0x40
 8012850:	2001      	movs	r0, #1
 8012852:	4313      	orrs	r3, r2
 8012854:	b21b      	sxth	r3, r3
 8012856:	81a3      	strh	r3, [r4, #12]
 8012858:	4240      	negs	r0, r0
 801285a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801285c:	9b01      	ldr	r3, [sp, #4]
 801285e:	1836      	adds	r6, r6, r0
 8012860:	1a1b      	subs	r3, r3, r0
 8012862:	9301      	str	r3, [sp, #4]
 8012864:	e7e6      	b.n	8012834 <__sflush_r+0xd4>
 8012866:	46c0      	nop			@ (mov r8, r8)
 8012868:	20400001 	.word	0x20400001

0801286c <_fflush_r>:
 801286c:	690b      	ldr	r3, [r1, #16]
 801286e:	b570      	push	{r4, r5, r6, lr}
 8012870:	0005      	movs	r5, r0
 8012872:	000c      	movs	r4, r1
 8012874:	2b00      	cmp	r3, #0
 8012876:	d102      	bne.n	801287e <_fflush_r+0x12>
 8012878:	2500      	movs	r5, #0
 801287a:	0028      	movs	r0, r5
 801287c:	bd70      	pop	{r4, r5, r6, pc}
 801287e:	2800      	cmp	r0, #0
 8012880:	d004      	beq.n	801288c <_fflush_r+0x20>
 8012882:	6a03      	ldr	r3, [r0, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <_fflush_r+0x20>
 8012888:	f7fd fcea 	bl	8010260 <__sinit>
 801288c:	220c      	movs	r2, #12
 801288e:	5ea3      	ldrsh	r3, [r4, r2]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d0f1      	beq.n	8012878 <_fflush_r+0xc>
 8012894:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012896:	07d2      	lsls	r2, r2, #31
 8012898:	d404      	bmi.n	80128a4 <_fflush_r+0x38>
 801289a:	059b      	lsls	r3, r3, #22
 801289c:	d402      	bmi.n	80128a4 <_fflush_r+0x38>
 801289e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128a0:	f7fd fe2b 	bl	80104fa <__retarget_lock_acquire_recursive>
 80128a4:	0028      	movs	r0, r5
 80128a6:	0021      	movs	r1, r4
 80128a8:	f7ff ff5a 	bl	8012760 <__sflush_r>
 80128ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128ae:	0005      	movs	r5, r0
 80128b0:	07db      	lsls	r3, r3, #31
 80128b2:	d4e2      	bmi.n	801287a <_fflush_r+0xe>
 80128b4:	89a3      	ldrh	r3, [r4, #12]
 80128b6:	059b      	lsls	r3, r3, #22
 80128b8:	d4df      	bmi.n	801287a <_fflush_r+0xe>
 80128ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128bc:	f7fd fe1e 	bl	80104fc <__retarget_lock_release_recursive>
 80128c0:	e7db      	b.n	801287a <_fflush_r+0xe>

080128c2 <memmove>:
 80128c2:	b510      	push	{r4, lr}
 80128c4:	4288      	cmp	r0, r1
 80128c6:	d902      	bls.n	80128ce <memmove+0xc>
 80128c8:	188b      	adds	r3, r1, r2
 80128ca:	4298      	cmp	r0, r3
 80128cc:	d308      	bcc.n	80128e0 <memmove+0x1e>
 80128ce:	2300      	movs	r3, #0
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d007      	beq.n	80128e4 <memmove+0x22>
 80128d4:	5ccc      	ldrb	r4, [r1, r3]
 80128d6:	54c4      	strb	r4, [r0, r3]
 80128d8:	3301      	adds	r3, #1
 80128da:	e7f9      	b.n	80128d0 <memmove+0xe>
 80128dc:	5c8b      	ldrb	r3, [r1, r2]
 80128de:	5483      	strb	r3, [r0, r2]
 80128e0:	3a01      	subs	r2, #1
 80128e2:	d2fb      	bcs.n	80128dc <memmove+0x1a>
 80128e4:	bd10      	pop	{r4, pc}
	...

080128e8 <_sbrk_r>:
 80128e8:	2300      	movs	r3, #0
 80128ea:	b570      	push	{r4, r5, r6, lr}
 80128ec:	4d06      	ldr	r5, [pc, #24]	@ (8012908 <_sbrk_r+0x20>)
 80128ee:	0004      	movs	r4, r0
 80128f0:	0008      	movs	r0, r1
 80128f2:	602b      	str	r3, [r5, #0]
 80128f4:	f7f1 fbae 	bl	8004054 <_sbrk>
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	d103      	bne.n	8012904 <_sbrk_r+0x1c>
 80128fc:	682b      	ldr	r3, [r5, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d000      	beq.n	8012904 <_sbrk_r+0x1c>
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	bd70      	pop	{r4, r5, r6, pc}
 8012906:	46c0      	nop			@ (mov r8, r8)
 8012908:	20002098 	.word	0x20002098

0801290c <__assert_func>:
 801290c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801290e:	0014      	movs	r4, r2
 8012910:	001a      	movs	r2, r3
 8012912:	4b09      	ldr	r3, [pc, #36]	@ (8012938 <__assert_func+0x2c>)
 8012914:	0005      	movs	r5, r0
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	000e      	movs	r6, r1
 801291a:	68d8      	ldr	r0, [r3, #12]
 801291c:	4b07      	ldr	r3, [pc, #28]	@ (801293c <__assert_func+0x30>)
 801291e:	2c00      	cmp	r4, #0
 8012920:	d101      	bne.n	8012926 <__assert_func+0x1a>
 8012922:	4b07      	ldr	r3, [pc, #28]	@ (8012940 <__assert_func+0x34>)
 8012924:	001c      	movs	r4, r3
 8012926:	4907      	ldr	r1, [pc, #28]	@ (8012944 <__assert_func+0x38>)
 8012928:	9301      	str	r3, [sp, #4]
 801292a:	9402      	str	r4, [sp, #8]
 801292c:	002b      	movs	r3, r5
 801292e:	9600      	str	r6, [sp, #0]
 8012930:	f000 f868 	bl	8012a04 <fiprintf>
 8012934:	f000 f876 	bl	8012a24 <abort>
 8012938:	20000278 	.word	0x20000278
 801293c:	080133cd 	.word	0x080133cd
 8012940:	08013408 	.word	0x08013408
 8012944:	080133da 	.word	0x080133da

08012948 <_calloc_r>:
 8012948:	b570      	push	{r4, r5, r6, lr}
 801294a:	0c0b      	lsrs	r3, r1, #16
 801294c:	0c15      	lsrs	r5, r2, #16
 801294e:	2b00      	cmp	r3, #0
 8012950:	d11e      	bne.n	8012990 <_calloc_r+0x48>
 8012952:	2d00      	cmp	r5, #0
 8012954:	d10c      	bne.n	8012970 <_calloc_r+0x28>
 8012956:	b289      	uxth	r1, r1
 8012958:	b294      	uxth	r4, r2
 801295a:	434c      	muls	r4, r1
 801295c:	0021      	movs	r1, r4
 801295e:	f7ff f82f 	bl	80119c0 <_malloc_r>
 8012962:	1e05      	subs	r5, r0, #0
 8012964:	d01b      	beq.n	801299e <_calloc_r+0x56>
 8012966:	0022      	movs	r2, r4
 8012968:	2100      	movs	r1, #0
 801296a:	f7fd fd2f 	bl	80103cc <memset>
 801296e:	e016      	b.n	801299e <_calloc_r+0x56>
 8012970:	1c2b      	adds	r3, r5, #0
 8012972:	1c0c      	adds	r4, r1, #0
 8012974:	b289      	uxth	r1, r1
 8012976:	b292      	uxth	r2, r2
 8012978:	434a      	muls	r2, r1
 801297a:	b29b      	uxth	r3, r3
 801297c:	b2a1      	uxth	r1, r4
 801297e:	4359      	muls	r1, r3
 8012980:	0c14      	lsrs	r4, r2, #16
 8012982:	190c      	adds	r4, r1, r4
 8012984:	0c23      	lsrs	r3, r4, #16
 8012986:	d107      	bne.n	8012998 <_calloc_r+0x50>
 8012988:	0424      	lsls	r4, r4, #16
 801298a:	b292      	uxth	r2, r2
 801298c:	4314      	orrs	r4, r2
 801298e:	e7e5      	b.n	801295c <_calloc_r+0x14>
 8012990:	2d00      	cmp	r5, #0
 8012992:	d101      	bne.n	8012998 <_calloc_r+0x50>
 8012994:	1c14      	adds	r4, r2, #0
 8012996:	e7ed      	b.n	8012974 <_calloc_r+0x2c>
 8012998:	230c      	movs	r3, #12
 801299a:	2500      	movs	r5, #0
 801299c:	6003      	str	r3, [r0, #0]
 801299e:	0028      	movs	r0, r5
 80129a0:	bd70      	pop	{r4, r5, r6, pc}

080129a2 <_realloc_r>:
 80129a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80129a4:	0006      	movs	r6, r0
 80129a6:	000c      	movs	r4, r1
 80129a8:	0015      	movs	r5, r2
 80129aa:	2900      	cmp	r1, #0
 80129ac:	d105      	bne.n	80129ba <_realloc_r+0x18>
 80129ae:	0011      	movs	r1, r2
 80129b0:	f7ff f806 	bl	80119c0 <_malloc_r>
 80129b4:	0004      	movs	r4, r0
 80129b6:	0020      	movs	r0, r4
 80129b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80129ba:	2a00      	cmp	r2, #0
 80129bc:	d103      	bne.n	80129c6 <_realloc_r+0x24>
 80129be:	f7fe fc2f 	bl	8011220 <_free_r>
 80129c2:	002c      	movs	r4, r5
 80129c4:	e7f7      	b.n	80129b6 <_realloc_r+0x14>
 80129c6:	f000 f834 	bl	8012a32 <_malloc_usable_size_r>
 80129ca:	0007      	movs	r7, r0
 80129cc:	4285      	cmp	r5, r0
 80129ce:	d802      	bhi.n	80129d6 <_realloc_r+0x34>
 80129d0:	0843      	lsrs	r3, r0, #1
 80129d2:	42ab      	cmp	r3, r5
 80129d4:	d3ef      	bcc.n	80129b6 <_realloc_r+0x14>
 80129d6:	0029      	movs	r1, r5
 80129d8:	0030      	movs	r0, r6
 80129da:	f7fe fff1 	bl	80119c0 <_malloc_r>
 80129de:	9001      	str	r0, [sp, #4]
 80129e0:	2800      	cmp	r0, #0
 80129e2:	d101      	bne.n	80129e8 <_realloc_r+0x46>
 80129e4:	9c01      	ldr	r4, [sp, #4]
 80129e6:	e7e6      	b.n	80129b6 <_realloc_r+0x14>
 80129e8:	002a      	movs	r2, r5
 80129ea:	42bd      	cmp	r5, r7
 80129ec:	d900      	bls.n	80129f0 <_realloc_r+0x4e>
 80129ee:	003a      	movs	r2, r7
 80129f0:	0021      	movs	r1, r4
 80129f2:	9801      	ldr	r0, [sp, #4]
 80129f4:	f7fd fd8e 	bl	8010514 <memcpy>
 80129f8:	0021      	movs	r1, r4
 80129fa:	0030      	movs	r0, r6
 80129fc:	f7fe fc10 	bl	8011220 <_free_r>
 8012a00:	e7f0      	b.n	80129e4 <_realloc_r+0x42>
	...

08012a04 <fiprintf>:
 8012a04:	b40e      	push	{r1, r2, r3}
 8012a06:	b517      	push	{r0, r1, r2, r4, lr}
 8012a08:	4c05      	ldr	r4, [pc, #20]	@ (8012a20 <fiprintf+0x1c>)
 8012a0a:	ab05      	add	r3, sp, #20
 8012a0c:	cb04      	ldmia	r3!, {r2}
 8012a0e:	0001      	movs	r1, r0
 8012a10:	6820      	ldr	r0, [r4, #0]
 8012a12:	9301      	str	r3, [sp, #4]
 8012a14:	f000 f83c 	bl	8012a90 <_vfiprintf_r>
 8012a18:	bc1e      	pop	{r1, r2, r3, r4}
 8012a1a:	bc08      	pop	{r3}
 8012a1c:	b003      	add	sp, #12
 8012a1e:	4718      	bx	r3
 8012a20:	20000278 	.word	0x20000278

08012a24 <abort>:
 8012a24:	2006      	movs	r0, #6
 8012a26:	b510      	push	{r4, lr}
 8012a28:	f000 fa18 	bl	8012e5c <raise>
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	f7f1 fa9f 	bl	8003f70 <_exit>

08012a32 <_malloc_usable_size_r>:
 8012a32:	1f0b      	subs	r3, r1, #4
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	1f18      	subs	r0, r3, #4
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	da01      	bge.n	8012a40 <_malloc_usable_size_r+0xe>
 8012a3c:	580b      	ldr	r3, [r1, r0]
 8012a3e:	18c0      	adds	r0, r0, r3
 8012a40:	4770      	bx	lr

08012a42 <__sfputc_r>:
 8012a42:	6893      	ldr	r3, [r2, #8]
 8012a44:	b510      	push	{r4, lr}
 8012a46:	3b01      	subs	r3, #1
 8012a48:	6093      	str	r3, [r2, #8]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	da04      	bge.n	8012a58 <__sfputc_r+0x16>
 8012a4e:	6994      	ldr	r4, [r2, #24]
 8012a50:	42a3      	cmp	r3, r4
 8012a52:	db07      	blt.n	8012a64 <__sfputc_r+0x22>
 8012a54:	290a      	cmp	r1, #10
 8012a56:	d005      	beq.n	8012a64 <__sfputc_r+0x22>
 8012a58:	6813      	ldr	r3, [r2, #0]
 8012a5a:	1c58      	adds	r0, r3, #1
 8012a5c:	6010      	str	r0, [r2, #0]
 8012a5e:	7019      	strb	r1, [r3, #0]
 8012a60:	0008      	movs	r0, r1
 8012a62:	bd10      	pop	{r4, pc}
 8012a64:	f000 f930 	bl	8012cc8 <__swbuf_r>
 8012a68:	0001      	movs	r1, r0
 8012a6a:	e7f9      	b.n	8012a60 <__sfputc_r+0x1e>

08012a6c <__sfputs_r>:
 8012a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6e:	0006      	movs	r6, r0
 8012a70:	000f      	movs	r7, r1
 8012a72:	0014      	movs	r4, r2
 8012a74:	18d5      	adds	r5, r2, r3
 8012a76:	42ac      	cmp	r4, r5
 8012a78:	d101      	bne.n	8012a7e <__sfputs_r+0x12>
 8012a7a:	2000      	movs	r0, #0
 8012a7c:	e007      	b.n	8012a8e <__sfputs_r+0x22>
 8012a7e:	7821      	ldrb	r1, [r4, #0]
 8012a80:	003a      	movs	r2, r7
 8012a82:	0030      	movs	r0, r6
 8012a84:	f7ff ffdd 	bl	8012a42 <__sfputc_r>
 8012a88:	3401      	adds	r4, #1
 8012a8a:	1c43      	adds	r3, r0, #1
 8012a8c:	d1f3      	bne.n	8012a76 <__sfputs_r+0xa>
 8012a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a90 <_vfiprintf_r>:
 8012a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a92:	b0a1      	sub	sp, #132	@ 0x84
 8012a94:	000f      	movs	r7, r1
 8012a96:	0015      	movs	r5, r2
 8012a98:	001e      	movs	r6, r3
 8012a9a:	9003      	str	r0, [sp, #12]
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	d004      	beq.n	8012aaa <_vfiprintf_r+0x1a>
 8012aa0:	6a03      	ldr	r3, [r0, #32]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d101      	bne.n	8012aaa <_vfiprintf_r+0x1a>
 8012aa6:	f7fd fbdb 	bl	8010260 <__sinit>
 8012aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012aac:	07db      	lsls	r3, r3, #31
 8012aae:	d405      	bmi.n	8012abc <_vfiprintf_r+0x2c>
 8012ab0:	89bb      	ldrh	r3, [r7, #12]
 8012ab2:	059b      	lsls	r3, r3, #22
 8012ab4:	d402      	bmi.n	8012abc <_vfiprintf_r+0x2c>
 8012ab6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012ab8:	f7fd fd1f 	bl	80104fa <__retarget_lock_acquire_recursive>
 8012abc:	89bb      	ldrh	r3, [r7, #12]
 8012abe:	071b      	lsls	r3, r3, #28
 8012ac0:	d502      	bpl.n	8012ac8 <_vfiprintf_r+0x38>
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d113      	bne.n	8012af0 <_vfiprintf_r+0x60>
 8012ac8:	0039      	movs	r1, r7
 8012aca:	9803      	ldr	r0, [sp, #12]
 8012acc:	f000 f93e 	bl	8012d4c <__swsetup_r>
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d00d      	beq.n	8012af0 <_vfiprintf_r+0x60>
 8012ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ad6:	07db      	lsls	r3, r3, #31
 8012ad8:	d503      	bpl.n	8012ae2 <_vfiprintf_r+0x52>
 8012ada:	2001      	movs	r0, #1
 8012adc:	4240      	negs	r0, r0
 8012ade:	b021      	add	sp, #132	@ 0x84
 8012ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ae2:	89bb      	ldrh	r3, [r7, #12]
 8012ae4:	059b      	lsls	r3, r3, #22
 8012ae6:	d4f8      	bmi.n	8012ada <_vfiprintf_r+0x4a>
 8012ae8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012aea:	f7fd fd07 	bl	80104fc <__retarget_lock_release_recursive>
 8012aee:	e7f4      	b.n	8012ada <_vfiprintf_r+0x4a>
 8012af0:	2300      	movs	r3, #0
 8012af2:	ac08      	add	r4, sp, #32
 8012af4:	6163      	str	r3, [r4, #20]
 8012af6:	3320      	adds	r3, #32
 8012af8:	7663      	strb	r3, [r4, #25]
 8012afa:	3310      	adds	r3, #16
 8012afc:	76a3      	strb	r3, [r4, #26]
 8012afe:	9607      	str	r6, [sp, #28]
 8012b00:	002e      	movs	r6, r5
 8012b02:	7833      	ldrb	r3, [r6, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d001      	beq.n	8012b0c <_vfiprintf_r+0x7c>
 8012b08:	2b25      	cmp	r3, #37	@ 0x25
 8012b0a:	d148      	bne.n	8012b9e <_vfiprintf_r+0x10e>
 8012b0c:	1b73      	subs	r3, r6, r5
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	42ae      	cmp	r6, r5
 8012b12:	d00b      	beq.n	8012b2c <_vfiprintf_r+0x9c>
 8012b14:	002a      	movs	r2, r5
 8012b16:	0039      	movs	r1, r7
 8012b18:	9803      	ldr	r0, [sp, #12]
 8012b1a:	f7ff ffa7 	bl	8012a6c <__sfputs_r>
 8012b1e:	3001      	adds	r0, #1
 8012b20:	d100      	bne.n	8012b24 <_vfiprintf_r+0x94>
 8012b22:	e0ae      	b.n	8012c82 <_vfiprintf_r+0x1f2>
 8012b24:	6963      	ldr	r3, [r4, #20]
 8012b26:	9a05      	ldr	r2, [sp, #20]
 8012b28:	189b      	adds	r3, r3, r2
 8012b2a:	6163      	str	r3, [r4, #20]
 8012b2c:	7833      	ldrb	r3, [r6, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d100      	bne.n	8012b34 <_vfiprintf_r+0xa4>
 8012b32:	e0a6      	b.n	8012c82 <_vfiprintf_r+0x1f2>
 8012b34:	2201      	movs	r2, #1
 8012b36:	2300      	movs	r3, #0
 8012b38:	4252      	negs	r2, r2
 8012b3a:	6062      	str	r2, [r4, #4]
 8012b3c:	a904      	add	r1, sp, #16
 8012b3e:	3254      	adds	r2, #84	@ 0x54
 8012b40:	1852      	adds	r2, r2, r1
 8012b42:	1c75      	adds	r5, r6, #1
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	60e3      	str	r3, [r4, #12]
 8012b48:	60a3      	str	r3, [r4, #8]
 8012b4a:	7013      	strb	r3, [r2, #0]
 8012b4c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8012b4e:	4b59      	ldr	r3, [pc, #356]	@ (8012cb4 <_vfiprintf_r+0x224>)
 8012b50:	2205      	movs	r2, #5
 8012b52:	0018      	movs	r0, r3
 8012b54:	7829      	ldrb	r1, [r5, #0]
 8012b56:	9305      	str	r3, [sp, #20]
 8012b58:	f7fd fcd1 	bl	80104fe <memchr>
 8012b5c:	1c6e      	adds	r6, r5, #1
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d11f      	bne.n	8012ba2 <_vfiprintf_r+0x112>
 8012b62:	6822      	ldr	r2, [r4, #0]
 8012b64:	06d3      	lsls	r3, r2, #27
 8012b66:	d504      	bpl.n	8012b72 <_vfiprintf_r+0xe2>
 8012b68:	2353      	movs	r3, #83	@ 0x53
 8012b6a:	a904      	add	r1, sp, #16
 8012b6c:	185b      	adds	r3, r3, r1
 8012b6e:	2120      	movs	r1, #32
 8012b70:	7019      	strb	r1, [r3, #0]
 8012b72:	0713      	lsls	r3, r2, #28
 8012b74:	d504      	bpl.n	8012b80 <_vfiprintf_r+0xf0>
 8012b76:	2353      	movs	r3, #83	@ 0x53
 8012b78:	a904      	add	r1, sp, #16
 8012b7a:	185b      	adds	r3, r3, r1
 8012b7c:	212b      	movs	r1, #43	@ 0x2b
 8012b7e:	7019      	strb	r1, [r3, #0]
 8012b80:	782b      	ldrb	r3, [r5, #0]
 8012b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b84:	d016      	beq.n	8012bb4 <_vfiprintf_r+0x124>
 8012b86:	002e      	movs	r6, r5
 8012b88:	2100      	movs	r1, #0
 8012b8a:	200a      	movs	r0, #10
 8012b8c:	68e3      	ldr	r3, [r4, #12]
 8012b8e:	7832      	ldrb	r2, [r6, #0]
 8012b90:	1c75      	adds	r5, r6, #1
 8012b92:	3a30      	subs	r2, #48	@ 0x30
 8012b94:	2a09      	cmp	r2, #9
 8012b96:	d950      	bls.n	8012c3a <_vfiprintf_r+0x1aa>
 8012b98:	2900      	cmp	r1, #0
 8012b9a:	d111      	bne.n	8012bc0 <_vfiprintf_r+0x130>
 8012b9c:	e017      	b.n	8012bce <_vfiprintf_r+0x13e>
 8012b9e:	3601      	adds	r6, #1
 8012ba0:	e7af      	b.n	8012b02 <_vfiprintf_r+0x72>
 8012ba2:	9b05      	ldr	r3, [sp, #20]
 8012ba4:	6822      	ldr	r2, [r4, #0]
 8012ba6:	1ac0      	subs	r0, r0, r3
 8012ba8:	2301      	movs	r3, #1
 8012baa:	4083      	lsls	r3, r0
 8012bac:	4313      	orrs	r3, r2
 8012bae:	0035      	movs	r5, r6
 8012bb0:	6023      	str	r3, [r4, #0]
 8012bb2:	e7cc      	b.n	8012b4e <_vfiprintf_r+0xbe>
 8012bb4:	9b07      	ldr	r3, [sp, #28]
 8012bb6:	1d19      	adds	r1, r3, #4
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	9107      	str	r1, [sp, #28]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	db01      	blt.n	8012bc4 <_vfiprintf_r+0x134>
 8012bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012bc2:	e004      	b.n	8012bce <_vfiprintf_r+0x13e>
 8012bc4:	425b      	negs	r3, r3
 8012bc6:	60e3      	str	r3, [r4, #12]
 8012bc8:	2302      	movs	r3, #2
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	7833      	ldrb	r3, [r6, #0]
 8012bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bd2:	d10c      	bne.n	8012bee <_vfiprintf_r+0x15e>
 8012bd4:	7873      	ldrb	r3, [r6, #1]
 8012bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bd8:	d134      	bne.n	8012c44 <_vfiprintf_r+0x1b4>
 8012bda:	9b07      	ldr	r3, [sp, #28]
 8012bdc:	3602      	adds	r6, #2
 8012bde:	1d1a      	adds	r2, r3, #4
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	9207      	str	r2, [sp, #28]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	da01      	bge.n	8012bec <_vfiprintf_r+0x15c>
 8012be8:	2301      	movs	r3, #1
 8012bea:	425b      	negs	r3, r3
 8012bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bee:	4d32      	ldr	r5, [pc, #200]	@ (8012cb8 <_vfiprintf_r+0x228>)
 8012bf0:	2203      	movs	r2, #3
 8012bf2:	0028      	movs	r0, r5
 8012bf4:	7831      	ldrb	r1, [r6, #0]
 8012bf6:	f7fd fc82 	bl	80104fe <memchr>
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d006      	beq.n	8012c0c <_vfiprintf_r+0x17c>
 8012bfe:	2340      	movs	r3, #64	@ 0x40
 8012c00:	1b40      	subs	r0, r0, r5
 8012c02:	4083      	lsls	r3, r0
 8012c04:	6822      	ldr	r2, [r4, #0]
 8012c06:	3601      	adds	r6, #1
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	6023      	str	r3, [r4, #0]
 8012c0c:	7831      	ldrb	r1, [r6, #0]
 8012c0e:	2206      	movs	r2, #6
 8012c10:	482a      	ldr	r0, [pc, #168]	@ (8012cbc <_vfiprintf_r+0x22c>)
 8012c12:	1c75      	adds	r5, r6, #1
 8012c14:	7621      	strb	r1, [r4, #24]
 8012c16:	f7fd fc72 	bl	80104fe <memchr>
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	d040      	beq.n	8012ca0 <_vfiprintf_r+0x210>
 8012c1e:	4b28      	ldr	r3, [pc, #160]	@ (8012cc0 <_vfiprintf_r+0x230>)
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d122      	bne.n	8012c6a <_vfiprintf_r+0x1da>
 8012c24:	2207      	movs	r2, #7
 8012c26:	9b07      	ldr	r3, [sp, #28]
 8012c28:	3307      	adds	r3, #7
 8012c2a:	4393      	bics	r3, r2
 8012c2c:	3308      	adds	r3, #8
 8012c2e:	9307      	str	r3, [sp, #28]
 8012c30:	6963      	ldr	r3, [r4, #20]
 8012c32:	9a04      	ldr	r2, [sp, #16]
 8012c34:	189b      	adds	r3, r3, r2
 8012c36:	6163      	str	r3, [r4, #20]
 8012c38:	e762      	b.n	8012b00 <_vfiprintf_r+0x70>
 8012c3a:	4343      	muls	r3, r0
 8012c3c:	002e      	movs	r6, r5
 8012c3e:	2101      	movs	r1, #1
 8012c40:	189b      	adds	r3, r3, r2
 8012c42:	e7a4      	b.n	8012b8e <_vfiprintf_r+0xfe>
 8012c44:	2300      	movs	r3, #0
 8012c46:	200a      	movs	r0, #10
 8012c48:	0019      	movs	r1, r3
 8012c4a:	3601      	adds	r6, #1
 8012c4c:	6063      	str	r3, [r4, #4]
 8012c4e:	7832      	ldrb	r2, [r6, #0]
 8012c50:	1c75      	adds	r5, r6, #1
 8012c52:	3a30      	subs	r2, #48	@ 0x30
 8012c54:	2a09      	cmp	r2, #9
 8012c56:	d903      	bls.n	8012c60 <_vfiprintf_r+0x1d0>
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d0c8      	beq.n	8012bee <_vfiprintf_r+0x15e>
 8012c5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c5e:	e7c6      	b.n	8012bee <_vfiprintf_r+0x15e>
 8012c60:	4341      	muls	r1, r0
 8012c62:	002e      	movs	r6, r5
 8012c64:	2301      	movs	r3, #1
 8012c66:	1889      	adds	r1, r1, r2
 8012c68:	e7f1      	b.n	8012c4e <_vfiprintf_r+0x1be>
 8012c6a:	aa07      	add	r2, sp, #28
 8012c6c:	9200      	str	r2, [sp, #0]
 8012c6e:	0021      	movs	r1, r4
 8012c70:	003a      	movs	r2, r7
 8012c72:	4b14      	ldr	r3, [pc, #80]	@ (8012cc4 <_vfiprintf_r+0x234>)
 8012c74:	9803      	ldr	r0, [sp, #12]
 8012c76:	f7fc fea9 	bl	800f9cc <_printf_float>
 8012c7a:	9004      	str	r0, [sp, #16]
 8012c7c:	9b04      	ldr	r3, [sp, #16]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	d1d6      	bne.n	8012c30 <_vfiprintf_r+0x1a0>
 8012c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c84:	07db      	lsls	r3, r3, #31
 8012c86:	d405      	bmi.n	8012c94 <_vfiprintf_r+0x204>
 8012c88:	89bb      	ldrh	r3, [r7, #12]
 8012c8a:	059b      	lsls	r3, r3, #22
 8012c8c:	d402      	bmi.n	8012c94 <_vfiprintf_r+0x204>
 8012c8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8012c90:	f7fd fc34 	bl	80104fc <__retarget_lock_release_recursive>
 8012c94:	89bb      	ldrh	r3, [r7, #12]
 8012c96:	065b      	lsls	r3, r3, #25
 8012c98:	d500      	bpl.n	8012c9c <_vfiprintf_r+0x20c>
 8012c9a:	e71e      	b.n	8012ada <_vfiprintf_r+0x4a>
 8012c9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8012c9e:	e71e      	b.n	8012ade <_vfiprintf_r+0x4e>
 8012ca0:	aa07      	add	r2, sp, #28
 8012ca2:	9200      	str	r2, [sp, #0]
 8012ca4:	0021      	movs	r1, r4
 8012ca6:	003a      	movs	r2, r7
 8012ca8:	4b06      	ldr	r3, [pc, #24]	@ (8012cc4 <_vfiprintf_r+0x234>)
 8012caa:	9803      	ldr	r0, [sp, #12]
 8012cac:	f7fd f93c 	bl	800ff28 <_printf_i>
 8012cb0:	e7e3      	b.n	8012c7a <_vfiprintf_r+0x1ea>
 8012cb2:	46c0      	nop			@ (mov r8, r8)
 8012cb4:	080133bc 	.word	0x080133bc
 8012cb8:	080133c2 	.word	0x080133c2
 8012cbc:	080133c6 	.word	0x080133c6
 8012cc0:	0800f9cd 	.word	0x0800f9cd
 8012cc4:	08012a6d 	.word	0x08012a6d

08012cc8 <__swbuf_r>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	0006      	movs	r6, r0
 8012ccc:	000d      	movs	r5, r1
 8012cce:	0014      	movs	r4, r2
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d004      	beq.n	8012cde <__swbuf_r+0x16>
 8012cd4:	6a03      	ldr	r3, [r0, #32]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <__swbuf_r+0x16>
 8012cda:	f7fd fac1 	bl	8010260 <__sinit>
 8012cde:	69a3      	ldr	r3, [r4, #24]
 8012ce0:	60a3      	str	r3, [r4, #8]
 8012ce2:	89a3      	ldrh	r3, [r4, #12]
 8012ce4:	071b      	lsls	r3, r3, #28
 8012ce6:	d502      	bpl.n	8012cee <__swbuf_r+0x26>
 8012ce8:	6923      	ldr	r3, [r4, #16]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d109      	bne.n	8012d02 <__swbuf_r+0x3a>
 8012cee:	0021      	movs	r1, r4
 8012cf0:	0030      	movs	r0, r6
 8012cf2:	f000 f82b 	bl	8012d4c <__swsetup_r>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d003      	beq.n	8012d02 <__swbuf_r+0x3a>
 8012cfa:	2501      	movs	r5, #1
 8012cfc:	426d      	negs	r5, r5
 8012cfe:	0028      	movs	r0, r5
 8012d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d02:	6923      	ldr	r3, [r4, #16]
 8012d04:	6820      	ldr	r0, [r4, #0]
 8012d06:	b2ef      	uxtb	r7, r5
 8012d08:	1ac0      	subs	r0, r0, r3
 8012d0a:	6963      	ldr	r3, [r4, #20]
 8012d0c:	b2ed      	uxtb	r5, r5
 8012d0e:	4283      	cmp	r3, r0
 8012d10:	dc05      	bgt.n	8012d1e <__swbuf_r+0x56>
 8012d12:	0021      	movs	r1, r4
 8012d14:	0030      	movs	r0, r6
 8012d16:	f7ff fda9 	bl	801286c <_fflush_r>
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d1ed      	bne.n	8012cfa <__swbuf_r+0x32>
 8012d1e:	68a3      	ldr	r3, [r4, #8]
 8012d20:	3001      	adds	r0, #1
 8012d22:	3b01      	subs	r3, #1
 8012d24:	60a3      	str	r3, [r4, #8]
 8012d26:	6823      	ldr	r3, [r4, #0]
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	6022      	str	r2, [r4, #0]
 8012d2c:	701f      	strb	r7, [r3, #0]
 8012d2e:	6963      	ldr	r3, [r4, #20]
 8012d30:	4283      	cmp	r3, r0
 8012d32:	d004      	beq.n	8012d3e <__swbuf_r+0x76>
 8012d34:	89a3      	ldrh	r3, [r4, #12]
 8012d36:	07db      	lsls	r3, r3, #31
 8012d38:	d5e1      	bpl.n	8012cfe <__swbuf_r+0x36>
 8012d3a:	2d0a      	cmp	r5, #10
 8012d3c:	d1df      	bne.n	8012cfe <__swbuf_r+0x36>
 8012d3e:	0021      	movs	r1, r4
 8012d40:	0030      	movs	r0, r6
 8012d42:	f7ff fd93 	bl	801286c <_fflush_r>
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d0d9      	beq.n	8012cfe <__swbuf_r+0x36>
 8012d4a:	e7d6      	b.n	8012cfa <__swbuf_r+0x32>

08012d4c <__swsetup_r>:
 8012d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8012e04 <__swsetup_r+0xb8>)
 8012d4e:	b570      	push	{r4, r5, r6, lr}
 8012d50:	0005      	movs	r5, r0
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	000c      	movs	r4, r1
 8012d56:	2800      	cmp	r0, #0
 8012d58:	d004      	beq.n	8012d64 <__swsetup_r+0x18>
 8012d5a:	6a03      	ldr	r3, [r0, #32]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <__swsetup_r+0x18>
 8012d60:	f7fd fa7e 	bl	8010260 <__sinit>
 8012d64:	220c      	movs	r2, #12
 8012d66:	5ea3      	ldrsh	r3, [r4, r2]
 8012d68:	071a      	lsls	r2, r3, #28
 8012d6a:	d423      	bmi.n	8012db4 <__swsetup_r+0x68>
 8012d6c:	06da      	lsls	r2, r3, #27
 8012d6e:	d407      	bmi.n	8012d80 <__swsetup_r+0x34>
 8012d70:	2209      	movs	r2, #9
 8012d72:	602a      	str	r2, [r5, #0]
 8012d74:	2240      	movs	r2, #64	@ 0x40
 8012d76:	2001      	movs	r0, #1
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	81a3      	strh	r3, [r4, #12]
 8012d7c:	4240      	negs	r0, r0
 8012d7e:	e03a      	b.n	8012df6 <__swsetup_r+0xaa>
 8012d80:	075b      	lsls	r3, r3, #29
 8012d82:	d513      	bpl.n	8012dac <__swsetup_r+0x60>
 8012d84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012d86:	2900      	cmp	r1, #0
 8012d88:	d008      	beq.n	8012d9c <__swsetup_r+0x50>
 8012d8a:	0023      	movs	r3, r4
 8012d8c:	3344      	adds	r3, #68	@ 0x44
 8012d8e:	4299      	cmp	r1, r3
 8012d90:	d002      	beq.n	8012d98 <__swsetup_r+0x4c>
 8012d92:	0028      	movs	r0, r5
 8012d94:	f7fe fa44 	bl	8011220 <_free_r>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012d9c:	2224      	movs	r2, #36	@ 0x24
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	4393      	bics	r3, r2
 8012da2:	81a3      	strh	r3, [r4, #12]
 8012da4:	2300      	movs	r3, #0
 8012da6:	6063      	str	r3, [r4, #4]
 8012da8:	6923      	ldr	r3, [r4, #16]
 8012daa:	6023      	str	r3, [r4, #0]
 8012dac:	2308      	movs	r3, #8
 8012dae:	89a2      	ldrh	r2, [r4, #12]
 8012db0:	4313      	orrs	r3, r2
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	6923      	ldr	r3, [r4, #16]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d10b      	bne.n	8012dd2 <__swsetup_r+0x86>
 8012dba:	21a0      	movs	r1, #160	@ 0xa0
 8012dbc:	2280      	movs	r2, #128	@ 0x80
 8012dbe:	89a3      	ldrh	r3, [r4, #12]
 8012dc0:	0089      	lsls	r1, r1, #2
 8012dc2:	0092      	lsls	r2, r2, #2
 8012dc4:	400b      	ands	r3, r1
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d003      	beq.n	8012dd2 <__swsetup_r+0x86>
 8012dca:	0021      	movs	r1, r4
 8012dcc:	0028      	movs	r0, r5
 8012dce:	f000 f88f 	bl	8012ef0 <__smakebuf_r>
 8012dd2:	220c      	movs	r2, #12
 8012dd4:	5ea3      	ldrsh	r3, [r4, r2]
 8012dd6:	2101      	movs	r1, #1
 8012dd8:	001a      	movs	r2, r3
 8012dda:	400a      	ands	r2, r1
 8012ddc:	420b      	tst	r3, r1
 8012dde:	d00b      	beq.n	8012df8 <__swsetup_r+0xac>
 8012de0:	2200      	movs	r2, #0
 8012de2:	60a2      	str	r2, [r4, #8]
 8012de4:	6962      	ldr	r2, [r4, #20]
 8012de6:	4252      	negs	r2, r2
 8012de8:	61a2      	str	r2, [r4, #24]
 8012dea:	2000      	movs	r0, #0
 8012dec:	6922      	ldr	r2, [r4, #16]
 8012dee:	4282      	cmp	r2, r0
 8012df0:	d101      	bne.n	8012df6 <__swsetup_r+0xaa>
 8012df2:	061a      	lsls	r2, r3, #24
 8012df4:	d4be      	bmi.n	8012d74 <__swsetup_r+0x28>
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	0799      	lsls	r1, r3, #30
 8012dfa:	d400      	bmi.n	8012dfe <__swsetup_r+0xb2>
 8012dfc:	6962      	ldr	r2, [r4, #20]
 8012dfe:	60a2      	str	r2, [r4, #8]
 8012e00:	e7f3      	b.n	8012dea <__swsetup_r+0x9e>
 8012e02:	46c0      	nop			@ (mov r8, r8)
 8012e04:	20000278 	.word	0x20000278

08012e08 <_raise_r>:
 8012e08:	b570      	push	{r4, r5, r6, lr}
 8012e0a:	0004      	movs	r4, r0
 8012e0c:	000d      	movs	r5, r1
 8012e0e:	291f      	cmp	r1, #31
 8012e10:	d904      	bls.n	8012e1c <_raise_r+0x14>
 8012e12:	2316      	movs	r3, #22
 8012e14:	6003      	str	r3, [r0, #0]
 8012e16:	2001      	movs	r0, #1
 8012e18:	4240      	negs	r0, r0
 8012e1a:	bd70      	pop	{r4, r5, r6, pc}
 8012e1c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d004      	beq.n	8012e2c <_raise_r+0x24>
 8012e22:	008a      	lsls	r2, r1, #2
 8012e24:	189b      	adds	r3, r3, r2
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	2a00      	cmp	r2, #0
 8012e2a:	d108      	bne.n	8012e3e <_raise_r+0x36>
 8012e2c:	0020      	movs	r0, r4
 8012e2e:	f000 f831 	bl	8012e94 <_getpid_r>
 8012e32:	002a      	movs	r2, r5
 8012e34:	0001      	movs	r1, r0
 8012e36:	0020      	movs	r0, r4
 8012e38:	f000 f81a 	bl	8012e70 <_kill_r>
 8012e3c:	e7ed      	b.n	8012e1a <_raise_r+0x12>
 8012e3e:	2a01      	cmp	r2, #1
 8012e40:	d009      	beq.n	8012e56 <_raise_r+0x4e>
 8012e42:	1c51      	adds	r1, r2, #1
 8012e44:	d103      	bne.n	8012e4e <_raise_r+0x46>
 8012e46:	2316      	movs	r3, #22
 8012e48:	6003      	str	r3, [r0, #0]
 8012e4a:	2001      	movs	r0, #1
 8012e4c:	e7e5      	b.n	8012e1a <_raise_r+0x12>
 8012e4e:	2100      	movs	r1, #0
 8012e50:	0028      	movs	r0, r5
 8012e52:	6019      	str	r1, [r3, #0]
 8012e54:	4790      	blx	r2
 8012e56:	2000      	movs	r0, #0
 8012e58:	e7df      	b.n	8012e1a <_raise_r+0x12>
	...

08012e5c <raise>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	4b03      	ldr	r3, [pc, #12]	@ (8012e6c <raise+0x10>)
 8012e60:	0001      	movs	r1, r0
 8012e62:	6818      	ldr	r0, [r3, #0]
 8012e64:	f7ff ffd0 	bl	8012e08 <_raise_r>
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	46c0      	nop			@ (mov r8, r8)
 8012e6c:	20000278 	.word	0x20000278

08012e70 <_kill_r>:
 8012e70:	2300      	movs	r3, #0
 8012e72:	b570      	push	{r4, r5, r6, lr}
 8012e74:	4d06      	ldr	r5, [pc, #24]	@ (8012e90 <_kill_r+0x20>)
 8012e76:	0004      	movs	r4, r0
 8012e78:	0008      	movs	r0, r1
 8012e7a:	0011      	movs	r1, r2
 8012e7c:	602b      	str	r3, [r5, #0]
 8012e7e:	f7f1 f867 	bl	8003f50 <_kill>
 8012e82:	1c43      	adds	r3, r0, #1
 8012e84:	d103      	bne.n	8012e8e <_kill_r+0x1e>
 8012e86:	682b      	ldr	r3, [r5, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d000      	beq.n	8012e8e <_kill_r+0x1e>
 8012e8c:	6023      	str	r3, [r4, #0]
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	20002098 	.word	0x20002098

08012e94 <_getpid_r>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	f7f1 f855 	bl	8003f44 <_getpid>
 8012e9a:	bd10      	pop	{r4, pc}

08012e9c <__swhatbuf_r>:
 8012e9c:	b570      	push	{r4, r5, r6, lr}
 8012e9e:	000e      	movs	r6, r1
 8012ea0:	001d      	movs	r5, r3
 8012ea2:	230e      	movs	r3, #14
 8012ea4:	5ec9      	ldrsh	r1, [r1, r3]
 8012ea6:	0014      	movs	r4, r2
 8012ea8:	b096      	sub	sp, #88	@ 0x58
 8012eaa:	2900      	cmp	r1, #0
 8012eac:	da0c      	bge.n	8012ec8 <__swhatbuf_r+0x2c>
 8012eae:	89b2      	ldrh	r2, [r6, #12]
 8012eb0:	2380      	movs	r3, #128	@ 0x80
 8012eb2:	0011      	movs	r1, r2
 8012eb4:	4019      	ands	r1, r3
 8012eb6:	421a      	tst	r2, r3
 8012eb8:	d114      	bne.n	8012ee4 <__swhatbuf_r+0x48>
 8012eba:	2380      	movs	r3, #128	@ 0x80
 8012ebc:	00db      	lsls	r3, r3, #3
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	6029      	str	r1, [r5, #0]
 8012ec2:	6023      	str	r3, [r4, #0]
 8012ec4:	b016      	add	sp, #88	@ 0x58
 8012ec6:	bd70      	pop	{r4, r5, r6, pc}
 8012ec8:	466a      	mov	r2, sp
 8012eca:	f000 f853 	bl	8012f74 <_fstat_r>
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	dbed      	blt.n	8012eae <__swhatbuf_r+0x12>
 8012ed2:	23f0      	movs	r3, #240	@ 0xf0
 8012ed4:	9901      	ldr	r1, [sp, #4]
 8012ed6:	021b      	lsls	r3, r3, #8
 8012ed8:	4019      	ands	r1, r3
 8012eda:	4b04      	ldr	r3, [pc, #16]	@ (8012eec <__swhatbuf_r+0x50>)
 8012edc:	18c9      	adds	r1, r1, r3
 8012ede:	424b      	negs	r3, r1
 8012ee0:	4159      	adcs	r1, r3
 8012ee2:	e7ea      	b.n	8012eba <__swhatbuf_r+0x1e>
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	2340      	movs	r3, #64	@ 0x40
 8012ee8:	e7e9      	b.n	8012ebe <__swhatbuf_r+0x22>
 8012eea:	46c0      	nop			@ (mov r8, r8)
 8012eec:	ffffe000 	.word	0xffffe000

08012ef0 <__smakebuf_r>:
 8012ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef2:	2602      	movs	r6, #2
 8012ef4:	898b      	ldrh	r3, [r1, #12]
 8012ef6:	0005      	movs	r5, r0
 8012ef8:	000c      	movs	r4, r1
 8012efa:	b085      	sub	sp, #20
 8012efc:	4233      	tst	r3, r6
 8012efe:	d007      	beq.n	8012f10 <__smakebuf_r+0x20>
 8012f00:	0023      	movs	r3, r4
 8012f02:	3347      	adds	r3, #71	@ 0x47
 8012f04:	6023      	str	r3, [r4, #0]
 8012f06:	6123      	str	r3, [r4, #16]
 8012f08:	2301      	movs	r3, #1
 8012f0a:	6163      	str	r3, [r4, #20]
 8012f0c:	b005      	add	sp, #20
 8012f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f10:	ab03      	add	r3, sp, #12
 8012f12:	aa02      	add	r2, sp, #8
 8012f14:	f7ff ffc2 	bl	8012e9c <__swhatbuf_r>
 8012f18:	9f02      	ldr	r7, [sp, #8]
 8012f1a:	9001      	str	r0, [sp, #4]
 8012f1c:	0039      	movs	r1, r7
 8012f1e:	0028      	movs	r0, r5
 8012f20:	f7fe fd4e 	bl	80119c0 <_malloc_r>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d108      	bne.n	8012f3a <__smakebuf_r+0x4a>
 8012f28:	220c      	movs	r2, #12
 8012f2a:	5ea3      	ldrsh	r3, [r4, r2]
 8012f2c:	059a      	lsls	r2, r3, #22
 8012f2e:	d4ed      	bmi.n	8012f0c <__smakebuf_r+0x1c>
 8012f30:	2203      	movs	r2, #3
 8012f32:	4393      	bics	r3, r2
 8012f34:	431e      	orrs	r6, r3
 8012f36:	81a6      	strh	r6, [r4, #12]
 8012f38:	e7e2      	b.n	8012f00 <__smakebuf_r+0x10>
 8012f3a:	2380      	movs	r3, #128	@ 0x80
 8012f3c:	89a2      	ldrh	r2, [r4, #12]
 8012f3e:	6020      	str	r0, [r4, #0]
 8012f40:	4313      	orrs	r3, r2
 8012f42:	81a3      	strh	r3, [r4, #12]
 8012f44:	9b03      	ldr	r3, [sp, #12]
 8012f46:	6120      	str	r0, [r4, #16]
 8012f48:	6167      	str	r7, [r4, #20]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00c      	beq.n	8012f68 <__smakebuf_r+0x78>
 8012f4e:	0028      	movs	r0, r5
 8012f50:	230e      	movs	r3, #14
 8012f52:	5ee1      	ldrsh	r1, [r4, r3]
 8012f54:	f000 f820 	bl	8012f98 <_isatty_r>
 8012f58:	2800      	cmp	r0, #0
 8012f5a:	d005      	beq.n	8012f68 <__smakebuf_r+0x78>
 8012f5c:	2303      	movs	r3, #3
 8012f5e:	89a2      	ldrh	r2, [r4, #12]
 8012f60:	439a      	bics	r2, r3
 8012f62:	3b02      	subs	r3, #2
 8012f64:	4313      	orrs	r3, r2
 8012f66:	81a3      	strh	r3, [r4, #12]
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	9a01      	ldr	r2, [sp, #4]
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	81a3      	strh	r3, [r4, #12]
 8012f70:	e7cc      	b.n	8012f0c <__smakebuf_r+0x1c>
	...

08012f74 <_fstat_r>:
 8012f74:	2300      	movs	r3, #0
 8012f76:	b570      	push	{r4, r5, r6, lr}
 8012f78:	4d06      	ldr	r5, [pc, #24]	@ (8012f94 <_fstat_r+0x20>)
 8012f7a:	0004      	movs	r4, r0
 8012f7c:	0008      	movs	r0, r1
 8012f7e:	0011      	movs	r1, r2
 8012f80:	602b      	str	r3, [r5, #0]
 8012f82:	f7f1 f845 	bl	8004010 <_fstat>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d103      	bne.n	8012f92 <_fstat_r+0x1e>
 8012f8a:	682b      	ldr	r3, [r5, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d000      	beq.n	8012f92 <_fstat_r+0x1e>
 8012f90:	6023      	str	r3, [r4, #0]
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
 8012f94:	20002098 	.word	0x20002098

08012f98 <_isatty_r>:
 8012f98:	2300      	movs	r3, #0
 8012f9a:	b570      	push	{r4, r5, r6, lr}
 8012f9c:	4d06      	ldr	r5, [pc, #24]	@ (8012fb8 <_isatty_r+0x20>)
 8012f9e:	0004      	movs	r4, r0
 8012fa0:	0008      	movs	r0, r1
 8012fa2:	602b      	str	r3, [r5, #0]
 8012fa4:	f7f1 f842 	bl	800402c <_isatty>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d103      	bne.n	8012fb4 <_isatty_r+0x1c>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d000      	beq.n	8012fb4 <_isatty_r+0x1c>
 8012fb2:	6023      	str	r3, [r4, #0]
 8012fb4:	bd70      	pop	{r4, r5, r6, pc}
 8012fb6:	46c0      	nop			@ (mov r8, r8)
 8012fb8:	20002098 	.word	0x20002098

08012fbc <_init>:
 8012fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fbe:	46c0      	nop			@ (mov r8, r8)
 8012fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fc2:	bc08      	pop	{r3}
 8012fc4:	469e      	mov	lr, r3
 8012fc6:	4770      	bx	lr

08012fc8 <_fini>:
 8012fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fca:	46c0      	nop			@ (mov r8, r8)
 8012fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fce:	bc08      	pop	{r3}
 8012fd0:	469e      	mov	lr, r3
 8012fd2:	4770      	bx	lr
